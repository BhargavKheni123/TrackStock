<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CartByRFIDAfterCall" xml:space="preserve">
    <value>Cart By RFID After Call</value>
  </data>
  <data name="ConsignedBatchPull" xml:space="preserve">
    <value>Consigned Batch Pull</value>
  </data>
  <data name="CountApplyMail" xml:space="preserve">
    <value>Count Apply Mail</value>
  </data>
  <data name="CreateNewUser" xml:space="preserve">
    <value>Create New User</value>
  </data>
  <data name="CycleCounteMail" xml:space="preserve">
    <value>Cycle Counte Mail</value>
  </data>
  <data name="CycleCountItemsMissed" xml:space="preserve">
    <value>Cycle Count Items Missed</value>
  </data>
  <data name="DiscrepancyAfterSync" xml:space="preserve">
    <value>Discrepancy After Sync</value>
  </data>
  <data name="eVMIProblems" xml:space="preserve">
    <value>eVMI Problems</value>
  </data>
  <data name="ForgotPassword" xml:space="preserve">
    <value>Forgot Password</value>
  </data>
  <data name="ItemQtyAdjust" xml:space="preserve">
    <value>Item Qty Adjust</value>
  </data>
  <data name="ItemReceipt" xml:space="preserve">
    <value>Item Receipt</value>
  </data>
  <data name="ItemStockOut" xml:space="preserve">
    <value>Item Stock Out</value>
  </data>
  <data name="ItemUsage" xml:space="preserve">
    <value>Item Usage</value>
  </data>
  <data name="MaintanceDue" xml:space="preserve">
    <value>Maintance Due</value>
  </data>
  <data name="OrderApproval" xml:space="preserve">
    <value>Order Approval</value>
  </data>
  <data name="OrderApproveReject" xml:space="preserve">
    <value>Order Approve Reject</value>
  </data>
  <data name="OrderToSupplier" xml:space="preserve">
    <value>OrderToSupplier 1</value>
  </data>
  <data name="OrderUnSubmitted" xml:space="preserve">
    <value>Order Un Submitted</value>
  </data>
  <data name="PendingOrders" xml:space="preserve">
    <value>Pending Orders</value>
  </data>
  <data name="PendingRequisition" xml:space="preserve">
    <value>Pending Requisition</value>
  </data>
  <data name="PendingReturnOrders" xml:space="preserve">
    <value>Pending Return Orders</value>
  </data>
  <data name="PendingTransfers" xml:space="preserve">
    <value>Pending Transfers</value>
  </data>
  <data name="ProjectSpendLimitAboutToExceed" xml:space="preserve">
    <value>Project Spend Limit About To Exceed</value>
  </data>
  <data name="ProjectSpendLimitExceed" xml:space="preserve">
    <value>Project Spend Limit Exceed</value>
  </data>
  <data name="ReportTemplate" xml:space="preserve">
    <value>Report Template</value>
  </data>
  <data name="RequisitionApproval" xml:space="preserve">
    <value>Requisition Approval</value>
  </data>
  <data name="RequisitionApproveReject" xml:space="preserve">
    <value>Requisition Approve Reject</value>
  </data>
  <data name="ReturnOrderApproval" xml:space="preserve">
    <value>Return Order Approval</value>
  </data>
  <data name="ReturnOrderApproveReject" xml:space="preserve">
    <value>Return Order Approve Reject</value>
  </data>
  <data name="ReturnOrderToSupplier" xml:space="preserve">
    <value>Return Order To Supplier</value>
  </data>
  <data name="sFTPFailEmail" xml:space="preserve">
    <value>sFTP Fail Email</value>
  </data>
  <data name="SuggestedOrders" xml:space="preserve">
    <value>Suggested Orders</value>
  </data>
  <data name="SuggestedOrdersCritical" xml:space="preserve">
    <value>Suggested Orders Critical</value>
  </data>
  <data name="SuggestedOrdersMinimum" xml:space="preserve">
    <value>Suggested Orders Minimum</value>
  </data>
  <data name="ToolAssetOrderApproval" xml:space="preserve">
    <value>Tool Asset Order Approval</value>
  </data>
  <data name="ToolAssetOrderApproveReject" xml:space="preserve">
    <value>Tool Asset Order Approve Reject</value>
  </data>
  <data name="ToolAssetOrderUnSubmitted" xml:space="preserve">
    <value>Tool Asset Order UnSubmitted</value>
  </data>
  <data name="TransferApproval" xml:space="preserve">
    <value>Transfer Approval</value>
  </data>
  <data name="TransferApproveReject" xml:space="preserve">
    <value>Transfer Approve Reject</value>
  </data>
</root>