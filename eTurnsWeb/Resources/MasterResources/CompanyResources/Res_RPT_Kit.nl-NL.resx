<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedFrom" xml:space="preserve">
    <value>Added From</value>
  </data>
  <data name="AvailableInGeneralInventory" xml:space="preserve">
    <value>Available In General Inventory</value>
  </data>
  <data name="AvailableInWIP" xml:space="preserve">
    <value>AvailableIn In WIP</value>
  </data>
  <data name="AvailableItemsInWIP" xml:space="preserve">
    <value>Available In WIP</value>
  </data>
  <data name="AvailableQuantity" xml:space="preserve">
    <value>Available Qty</value>
  </data>
  <data name="CategoryName" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>Company</value>
  </data>
  <data name="Consignment" xml:space="preserve">
    <value>Consignment</value>
  </data>
  <data name="Cost" xml:space="preserve">
    <value>Cost</value>
  </data>
  <data name="CreateBy" xml:space="preserve">
    <value>Create By</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="CreatedByName" xml:space="preserve">
    <value>Created By</value>
  </data>
  <data name="CreatedOn" xml:space="preserve">
    <value>Created On</value>
  </data>
  <data name="CriticalKitQuantity" xml:space="preserve">
    <value>Critical Kit Qty</value>
  </data>
  <data name="DateCodeTracking" xml:space="preserve">
    <value>Date Code Tracking</value>
  </data>
  <data name="DefaultLocationName" xml:space="preserve">
    <value>Default Bin </value>
  </data>
  <data name="DefualtBinName" xml:space="preserve">
    <value>Defualt Bin</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="EditedFrom" xml:space="preserve">
    <value>Edited From</value>
  </data>
  <data name="IsBuildBreak" xml:space="preserve">
    <value>Is Build Break</value>
  </data>
  <data name="ItemNumber" xml:space="preserve">
    <value>Item #</value>
  </data>
  <data name="ItemReceivedOn" xml:space="preserve">
    <value>Received On</value>
  </data>
  <data name="ItemReceivedOnWeb" xml:space="preserve">
    <value>Received On Web</value>
  </data>
  <data name="KitCost" xml:space="preserve">
    <value>Kit Cost</value>
  </data>
  <data name="KitDemand" xml:space="preserve">
    <value>Kit Demand</value>
  </data>
  <data name="KitDescription" xml:space="preserve">
    <value>Kit Description</value>
  </data>
  <data name="KitPartNumber" xml:space="preserve">
    <value>Kit Part Number</value>
  </data>
  <data name="KitSellPrice" xml:space="preserve">
    <value>Kit Sell Price</value>
  </data>
  <data name="KitSupplierName" xml:space="preserve">
    <value>Kit Supplier</value>
  </data>
  <data name="LastUpdated" xml:space="preserve">
    <value>Updated On</value>
  </data>
  <data name="LotNumberTracking" xml:space="preserve">
    <value>Lot Tracking</value>
  </data>
  <data name="ManufacturerName" xml:space="preserve">
    <value>Manufacturer</value>
  </data>
  <data name="ManufacturerNumber" xml:space="preserve">
    <value>Manu. #</value>
  </data>
  <data name="Markup" xml:space="preserve">
    <value>Markup</value>
  </data>
  <data name="MaximumKitQuantity" xml:space="preserve">
    <value>Max Kit Qty</value>
  </data>
  <data name="MinimumKitQuantity" xml:space="preserve">
    <value>Min Kit Qty</value>
  </data>
  <data name="NoOfItemsInKit" xml:space="preserve">
    <value>No Of Items In Kit</value>
  </data>
  <data name="OnHandQuantity" xml:space="preserve">
    <value>On Hand Qty</value>
  </data>
  <data name="QtyToMeetDemand" xml:space="preserve">
    <value>Qty To Meet Demand</value>
  </data>
  <data name="QuantityPerKit" xml:space="preserve">
    <value>Qty Per Kit</value>
  </data>
  <data name="QuantityReadyForAssembly" xml:space="preserve">
    <value>Qty Ready For Assembly</value>
  </data>
  <data name="RoomInfo" xml:space="preserve">
    <value>Room Info</value>
  </data>
  <data name="RoomName" xml:space="preserve">
    <value>Room</value>
  </data>
  <data name="RoomName1" xml:space="preserve">
    <value>Room</value>
  </data>
  <data name="SellPrice" xml:space="preserve">
    <value>Sell Price</value>
  </data>
  <data name="SerialNumberTracking" xml:space="preserve">
    <value>Serial Tracking</value>
  </data>
  <data name="SupplierName" xml:space="preserve">
    <value>Supplier</value>
  </data>
  <data name="SupplierPartNo" xml:space="preserve">
    <value>Supplier #</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="UDF1" xml:space="preserve">
    <value>UDF1</value>
  </data>
  <data name="UDF2" xml:space="preserve">
    <value>UDF2</value>
  </data>
  <data name="UDF3" xml:space="preserve">
    <value>UDF3</value>
  </data>
  <data name="UDF4" xml:space="preserve">
    <value>UDF4</value>
  </data>
  <data name="UDF5" xml:space="preserve">
    <value>UDF5</value>
  </data>
  <data name="Unit" xml:space="preserve">
    <value>Unit</value>
  </data>
  <data name="UpdatedBy" xml:space="preserve">
    <value>Updated By</value>
  </data>
  <data name="UpdatedByName" xml:space="preserve">
    <value>Updated By</value>
  </data>
  <data name="UpdatedOn" xml:space="preserve">
    <value>Updated On</value>
  </data>
  <data name="SerialNumber" xml:space="preserve">
    <value>Serial Number</value>
  </data>
  <data name="LotNumber" xml:space="preserve">
    <value>Lot Number</value>
  </data>
  <data name="ExpirationDate" xml:space="preserve">
    <value>Expiration Date</value>
  </data>
</root>