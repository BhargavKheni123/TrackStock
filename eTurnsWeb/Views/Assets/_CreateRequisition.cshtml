@model eTurns.DTO.RequisitionMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Requisitions, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Requisitions, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool IsApprove = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.RequisitionApproval, eTurnsWeb.Helper.SessionHelper.PermissionType.Approval);
    string priceformate1 = "N";
    //if (eTurnsWeb.Helper.SessionHelper.CompanyConfig != null)
    //{
    //    priceformate1 = "N" + eTurnsWeb.Helper.SessionHelper.CompanyConfig.CostDecimalPoints.GetValueOrDefault(0).ToString();
    //}
    if (eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits != null)
    {
        priceformate1 = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits;
    }
    ToolsMaintenanceDTO objToolsMaintenanceDTO = ViewBag.objToolsMaintenanceDTO;
    string CurrencySymbol = "";
    if (eTurnsWeb.Helper.SessionHelper.CurrencySymbol != null
        && !string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencySymbol))
    {
        CurrencySymbol = eTurnsWeb.Helper.SessionHelper.CurrencySymbol;
    }
}
@*@using (Ajax.BeginForm("SaveRequisition", "Consume", new AjaxOptions { HttpMethod = "Post", OnBegin = "onBegin", OnSuccess = "onSuccess", OnFailure = "onFailure" }, new { @id = "frmRequisitionMaster" }))
{*@
@using (Ajax.BeginRouteForm("Default", new { @controller = "Consume", @action = "SaveRequisition" }, new AjaxOptions() { HttpMethod = "Post", OnSuccess = "onSuccess", OnFailure = "onFailure" }, new { @id = "frmRequisitionMaster" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedDate)
                        </label>
                        : <span>@(Model.ReceivedOnWebDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedDate)
                        </label>
                        : <span>@(Model.ReceivedOnDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                    <li style="border: none; text-align: right;">
                        @*<a onclick="window.open('/Reports/Transaction/Requisition?Ids=@Model.ID','_blank')" href="javascript:void(null);">
                            <img src="../../Content/images/print.png" title="Print Requisition" /></a>*@
                        <a id="aRptSingle" href="javascript:void(null);">
                            <img src="../../Content/images/print.png" title="Print Requisition" />
                        </a>
                    </li>
                </ul>
            </div>
        }
        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContent" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px; background: none">
                <div id="CollapsedContent" class="edtForm">
                    <ul>
                        <li style="border-right: none; padding: 0px">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequisitionNumber)<em style="color: Red">*</em>
                            </label>
                            @Html.TextBoxFor(model => model.RequisitionNumber, new { @class = "text-box", id = "txtReqName", autocomplete = "off", @style = "background:white", @maxlength = "50" })
                            @*@Html.EditorFor(model => model.RequisitionNumber)*@
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequisitionNumber)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.BillingAccount)
                            @Html.HiddenFor(model => model.WorkorderGUID)
                            @*@Html.HiddenFor(model => model.ProjectSpendGUID)*@
                            @Html.HiddenFor(model => model.NumberofItemsrequisitioned)
                            @Html.HiddenFor(model => model.TotalCost)
                            @Html.HiddenFor(model => model.IsRecordEditable)
                            @Html.HiddenFor(model => model.IsOnlyStatusUpdate)
                            @Html.HiddenFor(model => model.PageSubmissionMethod)
                            @Html.HiddenFor(model => model.ReceivedOn)
                            @Html.HiddenFor(model => model.ReceivedOnWeb)
                            @Html.HiddenFor(model => model.AddedFrom)
                            @Html.HiddenFor(model => model.EditedFrom)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.WorkorderName)
                            </label>
                            @if (@Model.ID > 0 && !string.IsNullOrEmpty(Model.WorkorderName))
                            {
                                @Html.TextBoxFor(model => model.WorkorderName, new { @class = "text-box", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.WorkorderName, new { @class = "text-box", @style = "background:white", maxlength = "128" })
                            }
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkorderName)</span>
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequiredDate)<em style="color: Red">*</em>
                            </label>
                            @Html.TextBoxFor(model => model.RequiredDateStr, eTurnsWeb.Helper.SessionHelper.RoomDateFormat, new { @class = "text-box", id = "txtRequiredDate1", @readonly = "readonly", @style = "background:white", maxlength = 128, @Value = Model.RequiredDateStr.ToString() })
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequiredDateStr)</span>
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequisitionStatus)
                            </label>
                            @Html.DropDownListFor(model => model.RequisitionStatus, new SelectList(ViewBag.RequisitionStatusBag, "Text", "Text", Model.RequisitionStatus), new { @class = "selectBox" })
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequisitionStatus)</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div id="ExpandedContent" style="display: none">
            <ul>
                <li style="border: none">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @*@Html.LabelFor(model => model.CustomerID)*@
                                    @Html.LabelFor(model => model.CustomerGUID)
                                </div>
                                <div class="editor-field">
                                    @Html.HiddenFor(model => model.RequisitionType)
                                    @Html.HiddenFor(model => model.NumberofItemsrequisitioned)
                                    @Html.DropDownListFor(model => model.CustomerGUID, new SelectList((IEnumerable<eTurns.DTO.CustomerMasterDTO>)ViewBag.Customer, "GUID", "Customer", Model.CustomerGUID), string.Empty, new { @class = "selectBox" })
                                    @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster,
eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && Model.IsRecordEditable == true)
                                    {
                                        <label>
                                            <a onclick="AddNewFromPopup('Customer');" id="btnAddNewCustomer" class="addNewLink">
                                                (Add New)
                                            </a>
                                        </label>
                                    }
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ProjectSpendGUID)
                                </div>
                                <div class="editor-field">
                                    @if (ViewBag.ProjectSpent != null && ((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent).Where(t => t.TrackAllUsageAgainstThis == true).Count() == 1)
                                    {
                                        if (ViewBag.IsClosedFalse != null)
                                        {
                                            @Html.DropDownListFor(model => model.ProjectSpendGUID, new SelectList((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent, "GUID", "ProjectSpendName", Model.ProjectSpendGUID), string.Empty, new { @id = "ddlProjectSpendHeader", @class = "selectBox" })
                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(model => model.ProjectSpendGUID, new SelectList((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent, "GUID", "ProjectSpendName", Model.ProjectSpendGUID), new { @id = "ddlProjectSpendHeader", @class = "selectBox" })
                                        }
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.ProjectSpendGUID, new SelectList((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent, "GUID", "ProjectSpendName", Model.ProjectSpendGUID), string.Empty, new { @id = "ddlProjectSpendHeader", @class = "selectBox" })
                                    }
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.RequisitionType)
                                </div>
                                <div class="editor-field">
                                    @*@Html.DropDownListFor(model => model.RequisitionType, new SelectList(ViewBag.RequisitionTypeBag, "Text", "Text", Model.RequisitionType), new { @class = "selectBox" })*@
                                    @(Model.RequisitionType)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Description)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.Description, new { @class = "text-box" })
                                    @Html.ValidationMessageFor(model => model.Description)
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="editorForm padRightNone">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.BillingAccountID)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.BillingAccountID, new SelectList(ViewBag.SupplierAccountBag, "ID", "Text", Model.BillingAccountID), "", new { @class = "selectBox", @onchange = "SetNames();" })
                                    @Html.ValidationMessageFor(model => model.BillingAccountID)
                                </div>
                            </li>
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResRequisitionMaster())
                        </ul>
                    </div>
                </li>
            </ul>
        </div>
        <div class="editorForm" style="width: 98%">
            <ul>
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        @if (ViewBag.FromMaintenance == null)
                        {
                            <input type="button" value="Cancel" id="btnCancel" class="CreateBtn" />
                        }
                        @if (Model.IsRecordEditable || Model.IsOnlyStatusUpdate)
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                            if (Model.IsOnlyStatusUpdate)
                            {
                                <script type="text/javascript">
                                    disableControls('frmRequisitionMaster');
                                    $('#RequisitionStatus').removeAttr('disabled');
                                    $('#btnSave').removeAttr('disabled');
                                </script>
                            }
                        }
                        else if (Model.RequisitionStatus.ToLower() == "closed")
                        {
                            <input type="button" value="@eTurns.DTO.ResRequisitionMaster.UncloseReq" id="btnUncloseReq" class="CreateBtn" />
                            <script type="text/javascript">
                                disableControls('frmRequisitionMaster');
                                $("input[type='button'][id='btnUncloseReq']").removeAttr('disabled');
                            </script>

                        }
                        else
                        {
                            <script type="text/javascript">
                                disableControls('frmRequisitionMaster');
                            </script>
                        }
                    </div>
                </li>
                <li>
                    <div class="BtnBlockform">
                        @if (Model.ID > 0)
                        {
                            if (Model.IsRecordEditable && Model.RequisitionStatus == "Unsubmitted")
                            {
                                <input type="button" value="New Item" id="btnAddNewItemps" class="CreateBtn ays-ignore"
                                       style="float: left; margin-left: 20px;" />
                            }

                            if (Model.RequisitionStatus == "Submitted")
                            {
                                if (Model.IsRecordEditable)
                                {
                                    <input type="button" onclick="ResetApprovedQTY();" value="Reset Approved Quantity"
                                           id="btnRAQ" class="CreateBtn" />
                                        <script type="text/javascript">
                                            $('#btnRAQ').removeAttr('disabled');
                                        </script>
                                }
                            }
                        }
                    </div>
                </li>
            </ul>
        </div>
        @if (Model.NumberofItemsrequisitioned.GetValueOrDefault(0) > 0)
        {
            <div class="infoBlock" style="margin-bottom: 10px; margin-top: 10px;">
                <ul>
                    <li style="width: auto;">
                        <label for="RoomName">
                            <label>@eTurns.DTO.ResRequisitionMaster.NumberofItemsrequisitioned</label>
                        </label>
                        : <span>@(Model.NumberofItemsrequisitioned)</span>
                    </li>
                    <li style="border: none; width: auto;">
                        <label for="RoomName">
                            <label>@eTurns.DTO.ResRequisitionMaster.TotalCost</label>
                        </label>
                        : <span id="spnTotalCost">@CurrencySymbol @(Model.TotalCost.GetValueOrDefault(0).ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture))</span>
                    </li>
                </ul>
            </div>
        }
    </div>
    <div id="RequisitionLineItems">
    </div>
}
<div id="ItemModelTemp">
</div>
<div class="dialog" id="basic-modal-content-Requisition" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.RequisitionApproveWithZero
        </p>
        <a href="JavaScript:void()" id="btnModelYesRequisition" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="#" class="no" onclick="closeModalRequisition()">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div class="dialog" id="divModelReqToApprove" style="display: none;">
    <div class="inner">
        @*<div id="dvConfirmChoice">
                <p class="text">
                    @eTurns.DTO.Resources.ResMessage.RequisitionToApproveQtyMsg
                </p>


            </div>*@
        <div id="dvChoice">
            <p class="text">
                @eTurns.DTO.Resources.ResMessage.RequisitionToApproveQtyMsg
            </p>
            @Html.RadioButtonFor(model => model.rdoApprovelChoice, 1, new { @id = "rdoCorrectQty" }):
            <label for="rdoCorrectQty">
                @eTurns.DTO.ResRequisitionMaster.msgGoBackAndCorrectAprQty
            </label>
            <br />
            @Html.RadioButtonFor(model => model.rdoApprovelChoice, 2, new { @id = "rdofilledQty" }):
            <label for="rdofilledQty">@eTurns.DTO.ResRequisitionMaster.msgGoAheadWithZeroAprQty</label><br />
            @Html.RadioButtonFor(model => model.rdoApprovelChoice, 3, new { @id = "rdoReqasApprovedQty" }):
            <label for="rdoReqasApprovedQty">@eTurns.DTO.ResRequisitionMaster.msgGoAheadWithReqasAprQty</label><br />
            <br />
            <a href="JavaScript:void()" id="btnModelYesReqToApprove" class="yes">
                <img src="~/Content/images/yes.png" alt="Yes" />
                @eTurns.DTO.Resources.ResMessage.ConfirmYes
            </a><a href="#" class="no" onclick="closeModalRequisition()">
                <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
            </a>
        </div>
    </div>
</div>
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    var EditRequisitionID = 0;
    $("form").submit(function (e) {
        $(':input', '#frmRequisitionMaster')
            .removeAttr('disabled');

        $.validator.unobtrusive.parse("#frmRequisitionMaster");
        if ($(this).valid()) {
        }
        e.preventDefault();
    });

    $("#ItemModelTemp").dialog({
        autoOpen: false,
        modal: true,
        draggable: true,
        resizable: true,
        width: '82%',
        height: 710,
        title: '@(eTurns.DTO.ResRequisitionMaster.ModelHeader)',
        open: function () {
            $('#DivLoading').show();
        },
        close: function () {
            $(this).empty();
            $("#ItemModelTemp").empty();
            ReDirectData();
        }
    });

    $(document).ready(function () {
        $('form#frmRequisitionMaster').attr('action', $('form#frmRequisitionMaster').attr('action').split("?")[0]);

        $('form').areYouSure({ 'message': 'You have unsaved changes.  Do you want to leave this page and lose your changes?' });
        if (parseInt('@Model.ID', 10) <= 0) {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent').css('display', 'none');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent').css('display', '');
        }
        $("#btnSave").click(function () {
            $("#PageSubmissionMethod").val("1");
            if ($('#RequisitionStatus').val() === 'Submitted' && '@IsApprove' == "True") {
                $('#RequisitionStatus').val('Approved');
            }
        });

        $("#RequisitionLineItems").on("change", "input,select", function () {
            $(this).closest("tr").addClass("RowChanged");
        });

        $("#btnModelYesRequisition").click(function () {

            $.ajax({
                url: '@Url.Content("~/Consume/ChangeRequisitionStatus")',
                data: { RequisitionID: '@Model.ID', OldStatus: "Approved", NewStatus: "Closed" },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (response) {
                    $.modal.impl.close();
                    clearControls('frmRequisitionMaster');
                    ShowEditTabGUID("RequisitionEdit?RequisitionGUID=" + '@Model.GUID', "frmRequisitionMaster");
                }
            });
        });

        $("#btnModelYesReqToApprove").click(function () {
            $("#PageSubmissionMethod").val("2");
            var rdoApprovelChoice = $("input[name='rdoApprovelChoice']:checked").val();
            if (rdoApprovelChoice == 1) {
                $('#RequisitionStatus').val('Submitted');
                $.modal.impl.close();
            }
            else if (rdoApprovelChoice == 2) {
                $.modal.impl.close();
                $('#DivLoading').show();
                $('#frmRequisitionMaster').submit();
            }
            else {
                var DTName = 'RequisitionItemsTable' + '@Model.ID';
                var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
                for (var i = 0; i < ItemNodes.length; i++) {
                    var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val();
                    if (isNaN(parseFloat(txtQuantityApproved)) || parseFloat(txtQuantityApproved) <= 0) {
                        $(ItemNodes[i]).find('#txtQuantityApproved').val($(ItemNodes[i]).find('#txtQuantityRequisitioned').val())
                        $(ItemNodes[i]).addClass("RowChanged");
                    }
                }
                $('#RequisitionStatus').val('Approved');
                $("#PageSubmissionMethod").val("1");
                $.modal.impl.close();
                $('#DivLoading').show();
                $('#frmRequisitionMaster').submit();
            }


            //  if (SaveAllClick(true)) {
            //      $.modal.impl.close();
            //      clearControls('frmRequisitionMaster');
            //      ShowEditTabGUID("RequisitionEdit?RequisitionGUID=" + '@Model.GUID', "frmRequisitionMaster");
            //  }

        });

        var IsFirstTime = true;

        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });



        $('#txtRequiredDate1').blur(function () { }).datepicker({
            changeMonth: true,
            changeYear: true, dateFormat: RoomDateJSFormat
        });
        $('#txtRequiredDate1').on('change', function () {

            var RequiredDateValid = true;

            try {
                $.datepicker.parseDate(RoomDateJSFormat, $('#txtRequiredDate1').val());
                RequiredDateValid = true;
            } catch (e) {
                RequiredDateValid = false;
            }
            if (!RequiredDateValid)
                $('#txtRequiredDate1').val('');
        });

        $('#btnClose').click(function () {
            $(".ui-dialog-titlebar-close").click();
        });

        $('#btnCancel').click(function (e) {
            if ('@Model.IsHistory' != 'True') {
                SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
                $(".tab5").hide();
            }
            else {
                $(".ui-dialog-titlebar-close").click();

            }
        });

        $('#btnUncloseReq').on('click', function () {
            var Reqguid = '@Model.GUID';

            $.ajax({
                url: "/Consume/UncloseRequisition",
                type: 'Post',
                data: { 'ReqGUID': Reqguid },
                success: function (response) {
                    if (response.Status == "ok") {
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        oTable.fnDraw();
                        clearControls('frmRequisitionMaster');
                        SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
                    }
                    else {
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                    }

                },
                error: function (response) {
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    $("#spanGlobalMessage").html(response.Message);
                    $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                }
            });
        });

        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        if ('@Model.ID' > 0) {
            EditRequisitionID = '@Model.ID';
            if ('@Model.IsHistory' != 'True') {
                $('#RequisitionLineItems').empty();
                $('#DivLoading').show();
                var action = '@Url.Action("LoadRequisitionItems","Consume", new { RequisitionID = @Model.ID })';
                var IsArchived = $('#IsArchivedRecords').is(':checked');
                var IsDeleted = $('#IsDeletedRecords').is(':checked');
                action += '&IsArchived=' + IsArchived + '&IsDeleted=' + IsDeleted;
                $('#RequisitionLineItems').load(action, function () {
                    $('#DivLoading').hide();
                });

                //// need to call below block in case of New Item saved and open POPUP Item ... START
                if (NeedToOpenItemPopupNow) {
                    NeedToOpenItemPopupNow = false;
                    setTimeout("OpenItemPopup()", 3000);
                    return false;
                }
                //// need to call below block in case of New Item saved and open POPUP Item ... END

                return false;
            }
            else {
                $('#RequisitionLineItems').empty();
                $('#DivLoading').show();
                var action = '@Url.Action("LoadRequisitionItems", new { RequisitionID = @Model.ID })';
                var IsHistory = true;
                action += '&IsHistory=' + IsHistory;
                $('#RequisitionLineItems').load(action, function () {
                    $('#DivLoading').hide();
                });
            }
        }

        if ('@Model.IsHistory' == 'True') {
            $(':input', '#frmQuickList')
        .not('#btnClose')
        .attr('disabled', 'disabled');
        }

    });
    $('#btnAddNewItemps').click(function () {
        return OpenItemPopup();
    });
    function OpenItemPopup() {
        if (parseInt('@Model.ID', 10) > 0) {
            ClearVariables();
            var strUrl = '@Url.Action("LoadItemMasterModel","Consume")';
            strUrl = strUrl + '?ParentId=' + '@Model.ID';
            strUrl = strUrl + '&ParentGuid=' + '@Model.GUID.ToString()';
            $('#ItemModelTemp').load(strUrl, new function () {
                $('#ItemModelTemp').dialog('open');
            })
            if ($("input#global_filter").length > 0) {
                $("input#global_filter").focus();
                setTimeout(function () {
                    $("input#global_filter").focus();
                }, 600);
            }
            if ($("input.searchinput").length > 0) {
                $("input.searchinput").focus();
                setTimeout(function () {
                    $("input.searchinput").focus();
                }, 600);

            }
        }
        //return false;
    }

    function SetNames() {
        $("#BillingAccount").val($("#BillingAccountID option:selected").text());
    }




    function onBegin() {
        $('#DivLoading').show();
        if ($('#RequisitionStatus').val() == "Closed")
            return true;

        if ('@Model.RequisitionStatus' == "Approved")
            return true;

        if ($('#RequisitionStatus').val() === 'Submitted' && '@IsApprove' == "True") {
            $('#RequisitionStatus').val('Approved');
        }

        if ('@Model.ID' != 0) {
            if (!SaveAllClick(false)) {
                $('#DivLoading').hide();
                return false;
            }
        }

        if ($('#RequisitionStatus').val() != "Unsubmitted") {
            var Count = 0;
            var DTName = 'RequisitionItemsTable' + '@Model.ID';
            $('#' + DTName + ' tbody tr').each(function () {
                Count = Count + 1;
            });
            if (Count == 1 && $('#' + DTName + ' tbody tr')[0].cells.length == 1) {
                //alert('You can not submit Zero line Item, Kindly add Items and then Submit the Requisition');
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                $("#spanGlobalMessage").html('@ResRequisitionMaster.LineItemRequired');
                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                return false;
            }

            if ($('#RequisitionStatus').val() == "Approved") {
                if ($("#PageSubmissionMethod").val() == 1) {
                    var ApprovedQTY = 0;
                    var DTName = 'RequisitionItemsTable' + '@Model.ID';
                    var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
                    for (var i = 0; i < ItemNodes.length; i++) {
                        var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val() == '' ? 0 : $(ItemNodes[i]).find('#txtQuantityApproved').val();
                        ApprovedQTY = parseInt(txtQuantityApproved, 10) + ApprovedQTY;
                    }


                    //var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();

                    //$(ItemNodes).each(function (indx, obj) {

                    //    var txtQuantityApproved = $(obj).find('#txtQuantityApproved').val() == '' ? 0 : $(obj).find('#txtQuantityApproved').val();
                    //    ApprovedQTY = parseInt(txtQuantityApproved, 10) + ApprovedQTY;
                    //});
                    if (ApprovedQTY == 0) {
                        $('#DivLoading').hide();
                        $('#divModelReqToApprove').modal();
                        return false;
                    }
                    else {
                        var isApprZero = false;
                        var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
                        for (var i = 0; i < ItemNodes.length; i++) {
                            var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val() == '' ? 0 : $(ItemNodes[i]).find('#txtQuantityApproved').val();
                            if (isNaN(parseFloat(txtQuantityApproved)) || parseFloat(txtQuantityApproved) <= 0) {
                                $('#DivLoading').hide();
                                $('#divModelReqToApprove').modal();
                                isApprZero = true;
                                return;
                            }
                        }

                        if (isApprZero) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                }
                else {
                    return true;
                }
            }
            else {
                return true;
            }
        }
    }

    $('#ancHideShowContent').click(function () {
        if ($('#ExpandedContent').css('display') == 'none') {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_open.jpg');
        }
    });

    function onSuccess(response) {

        IsRefreshGrid = true;
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();
        SetTabswithCount('RequisitionMaster', 'RequisitionStatus');
        UpdateTopMenuReqCount();
        $('#DivLoading').hide();
        if (response.Status == "fail") {

            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#RequisitionNumber").val("");
            $("#RequisitionNumber").focus();
        }
        else if (idValue == 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#RequisitionNumber").val("");
                $("#RequisitionNumber").focus();
            }
            else if (response.Status == "duplicateWO") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#WorkorderName").val("");
                $("#WorkorderName").focus();
            }
            else {
                //clearControls('frmRequisitionMaster');
                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                EditRequisitionID = response.ID;
                NeedToOpenItemPopupNow = true;
                //ShowEditTab("RequisitionEdit/" + response.ID, "frmRequisitionMaster");
                ShowEditTabGUIDTRUEOnly("RequisitionEdit?RequisitionGUID=" + response.GUID, "frmRequisitionMaster");
                UpdateTopMenuReqCount();
            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#RequisitionNumber").val("");
                $("#RequisitionNumber").focus();
            }
            else if (response.Status == "duplicateWO") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#WorkorderName").val("");
                $("#WorkorderName").focus();
            }
            else {
                if (response.reqobj.RequisitionStatus == "Approved" && response.ReportPDFFilePath.length > 0) {
                    $('#DivLoading').show();
                    var lnk = '@Url.Content("~/Consume/PrintSubmittedRequisition")' + "?ReqGUID=" + response.ReportPDFFilePath;
                    OpenPrintTab(lnk)
                }
                CallReqNarrowFunctions();
                clearControls('frmRequisitionMaster');
                SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
                $('#DivLoading').hide();
            }

            if (response.reqobj.RequisitionStatus == "Approved" && response.reqobj.PageSubmissionMethod == "2") {
                $.ajax({
                    "url": '@Url.Content("~/Consume/CloseRequisitionIfPullCompleted")',
                    data: { RequisitionGUID: response.GUID },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    success: function (response) {
                    }
                });
            }

        }
    }
    function onFailure(message) {
        $('#DivLoading').hide();
        $("#spanGlobalMessage").html(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#RequisitionNumber").focus();
    }



    function OnRequisitionStatusChange() {
        if ($('#RequisitionStatus').val() == "Approved") {
            var ApprovedQTY = 0;
            var DTName = 'RequisitionItemsTable' + '@Model.ID';
            var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
            for (var i = 0; i < ItemNodes.length; i++) {
                var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val() == '' ? 0 : $(ItemNodes[i]).find('#txtQuantityApproved').val();
                ApprovedQTY = parseInt(txtQuantityApproved, 10) + ApprovedQTY;
            }
            if (ApprovedQTY == 0) {
                $('#basic-modal-content-RequisitionApprove').modal();
            }
        }
        else
            return true;
    }

    function closeModalRequisitionApprove() {
        $.modal.impl.close();
        return false;
    }

    function IsRejectTheRequisition() {
        if ($('#RequisitionStatus').val() == "Approved") {
            var ApprovedQTY = 0;
            var DTName = 'RequisitionItemsTable' + '@Model.ID';
            var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
            for (var i = 0; i < ItemNodes.length; i++) {
                var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val() == '' ? 0 : $(ItemNodes[i]).find('#txtQuantityApproved').val();
                ApprovedQTY = parseInt(txtQuantityApproved, 10) + ApprovedQTY;
            }
            if (ApprovedQTY == 0) {
                $('#basic-modal-content-Requisition').modal();
            }
            else {
                clearControls('frmRequisitionMaster');
                SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
            }
        }
        else {
            clearControls('frmRequisitionMaster');
            SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
        }
    }

    function closeModalRequisition() {
        $.modal.impl.close();
        // clearControls('frmRequisitionMaster');
        // SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
    }


    function ResetApprovedQTY() {
        var DTName = 'RequisitionItemsTable' + '@Model.ID';
        var arrItems = new Array();
        //var nNodes = oTable.fnGetNodes();
        var Nodes = $('#' + DTName).dataTable().fnGetNodes()
        for (var i = 0; i <= Nodes.length - 1; i++) {
            var txtQuantityRequisitioned = null;
            var txtQuantityApproved = 0;
            var txtQuantityPulled = null;
            var item_BinID = null;
            var ProjectSpendID = null;

            var hdnID = $(Nodes[i]).find('#hdnID').val();
            var hdnItemID = $(Nodes[i]).find('#hdnItemID').val();
            var hdnItemNumber = $(Nodes[i]).find('#hdnItemNumber').val();
            var hdnItemGUID = $(Nodes[i]).find('#hdnItemGUID').val();
            var hdnRequisitionID = '@Model.ID';
            var hdnRequisitionGUID = $(Nodes[i]).find('#hdnRequisitionGUID').val();
            var hdnItemCost = $(Nodes[i]).find("#hdnItemCost").val();

            if (hdnID != undefined) {
                var data = { "GUID": hdnID, "ItemGUID": hdnItemGUID, "RequisitionID": hdnRequisitionID, "RequisitionGUID": hdnRequisitionGUID, "ItemNumber": hdnItemNumber, "QuantityRequisitioned": txtQuantityRequisitioned, "QuantityPulled": txtQuantityPulled, "QuantityApproved": txtQuantityApproved, "ItemCost": hdnItemCost };
                arrItems.push(data);
            }
            //});
        }
        if (arrItems.length > 0) {
            $('#DivLoading').show();
            $.ajax({
                url: '@Url.Content("~/Consume/AddItemToDetailTable")',
                data: { 'para': JSON.stringify(arrItems) },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (response) {
                    $('#DivLoading').hide();
                    if (response.Status == "ok") {
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        //ShowEditTab("RequisitionEdit/" + '@Model.ID', "frmRequisitionMaster");
                        ShowEditTabGUID("RequisitionEdit?RequisitionGUID=" + '@Model.GUID', "frmRequisitionMaster", false); // change for WI-712
                        SetTabswithCount('RequisitionMaster', 'RequisitionStatus');
                        UpdateTopMenuReqCount();
                    }
                    else {
                        $("#spanGlobalMessage").html(response.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    }
                }
            });
        }
        else {
            $("#spanGlobalMessage").html('@ResRequisitionMaster.NoItemsAvailable');
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("#spanGlobalMessage").removeClass('succesIcon errorIcon').addClass('WarningIcon');
        }
    }
</script>
<div id="NewMasterPopUP">
</div>
<script type="text/javascript">
    $("#NewMasterPopUP").dialog({
        autoOpen: false,
        //        show: "blind",
        //        hide: "explode",
        height: 600,
        width: 800,
        modal: true,
        open: function () {
            $(this).parent().find("span.ui-dialog-title").html("Add New " + $(this).data("data"));
        },
        close: function () {
            $('#DivLoading').show();
            RefreshDropdownList($(this).data("data"), $(this).data("IDVal"));
            $(this).data("data", null);
            $(this).data("IDVal", null);
            $(this).parent().find("span.ui-dialog-title").html('');
        }
    });
    function AddNewFromPopup(PopupFor) {
        $('#DivLoading').show();
        var _URL = ''
        if (PopupFor == 'Customer') {
            _URL = '@Url.Action("../Master/CustomerMasterCreate")';
        }
        else {
            return false;
        }
        $('#NewMasterPopUP').load(_URL, function () {
            $('#NewMasterPopUP').data("data", PopupFor).dialog('open');
            $('#DivLoading').hide();
        });
    }
    function RefreshDropdownList(PopupFor, IDVal) {
        if (IDVal != undefined) {
            var _ControlID = '';
            if (PopupFor == 'Customer') {
                _ControlID = "CustomerGUID";
            }
            var arrdata = IDVal.split("~");
            var listData = $('select[id*="' + _ControlID + '"]');
            $(listData).each(function () {
                $(this).append($("<option />").val(arrdata[0]).text(arrdata[1]));
            });
            var foption = $('select[id*="' + _ControlID + '"] option:first');
            var soptions = $('select[id*="' + _ControlID + '"] option:not(:first)').sort(function (a, b) {
                return a.text == b.text ? 0 : a.text < b.text ? -1 : 1
            });
            $(listData).html(soptions).prepend(foption);
        }
        $('#DivLoading').hide();
    }

    $('#ddlProjectSpendHeader').live('change', function () {
        if ($(this).val().length > 0) {
            //$('.userContentInnerGrid').find("#ProjectSpendGUID").val($(this).val());
            $('.userContentInnerGrid').find("#ProjectSpendGUID").attr('disabled', 'disabled');
        }
        else {
            //$('.userContentInnerGrid').find("#ProjectSpendGUID").val($(this).val());
            $('.userContentInnerGrid').find("#ProjectSpendGUID").removeAttr('disabled', 'disabled');
        }

    });
    $('#aRptSingle').on('click', function () {
        // var objkeyVal = new Array();
        // objkeyVal.push({ 'key': 'OrderGuids', 'value': '@Model.GUID' });
        // ShowLocalReports(objkeyVal, 'RPT_Orders');
        ReportExecutionSingleRecord('Requisition', '@Model.GUID');
    });

</script>
