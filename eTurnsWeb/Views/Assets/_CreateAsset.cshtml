@model eTurns.DTO.AssetMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    List<SelectListItem> lstItems = new List<SelectListItem>();
    lstItems.Add(new SelectListItem() { Text = "", Value = "" });
    lstItems.Add(new SelectListItem() { Text = "Mileage", Value = Convert.ToString((int)MaintenanceScheduleType.Mileage) });
    lstItems.Add(new SelectListItem() { Text = "Operation Hours", Value = Convert.ToString((int)MaintenanceScheduleType.OperationalHours) });
    List<AssetCategoryMasterDTO> lstAssetCats = new List<AssetCategoryMasterDTO>();
    if (ViewBag.AssetCategoryList != null)
    {
        lstAssetCats = ViewBag.AssetCategoryList;
        lstAssetCats = lstAssetCats.OrderBy(t => t.AssetCategory).ToList();
    }
    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));
    string UNCPathRootLink2 = eTurns.DTO.SiteSettingHelper.AssetPhoto; // Settinfile.Element("AssetPhoto").Value;


    Int64 EnterpriseId = eTurnsWeb.Helper.SessionHelper.EnterPriceID;
    Int64 CompanyID = eTurnsWeb.Helper.SessionHelper.CompanyID;
    Int64 RoomID = eTurnsWeb.Helper.SessionHelper.RoomID;
    UNCPathRootLink2 = UNCPathRootLink2.Replace("~", string.Empty);

    string CharCodeList = eTurnsWeb.Helper.CommonUtility.GetNotAllowCharList();


    string LogoPathImage = (UNCPathRootLink2 + EnterpriseId + "/" + CompanyID + "/" + RoomID);
}
@{
    bool isUpdate;
    bool isInsert;
    bool onlyView = false;
    bool isCost = false;
    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
        onlyView = true;
    }
    else
    {
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Assets, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Assets, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    }

}
<script type='text/javascript' src="@Url.Content("~/Scripts/ajaxfileupload.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>
@using (Ajax.BeginForm("AssetSave", "Assets", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmAsset" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedDate)
                        </label>
                        @*: <span>@eTurnsWeb.Helper.CommonUtility.ToClientDateTime(Model.Created)</span></li>*@
                        : <span>@Model.ReceivedOnDateWeb</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedDate)
                        </label>
                        @*: <span>@eTurnsWeb.Helper.CommonUtility.ToClientDateTime(Model.Updated)</span></li>*@
                        : <span>@Model.ReceivedOnDate</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.AssetName) <em>*</em>
                    </div>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.AssetName)
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.AssetName)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.Created)
                        @Html.HiddenFor(model => model.Updated)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.LastUpdatedBy)
                        @Html.HiddenFor(model => model.CompanyID)
                        @Html.HiddenFor(model => model.Room)
                        @Html.HiddenFor(model => model.RoomName)
                        @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                        @Html.HiddenFor(model => model.IsDeleted)
                        @Html.HiddenFor(model => model.IsArchived)
                        @Html.HiddenFor(model => model.IsOnlyFromItemUI)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Description)
                    </div>
                    <div class="editor-field">
                        @Html.TextAreaFor(model => model.Description, new { @class = "text-box", maxlenght = 1024 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Description)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Make)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Make, new { @class = "text-box", maxlenght = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Make)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Model)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Model, new { @class = "text-box", maxlenght = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Model)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Serial)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Serial, new { @class = "text-box", maxlenght = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Serial)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.AssetCategoryID)
                    </div>
                    <div class="editor-field">
                        @*@Html.DropDownListFor(model => model.ToolCategoryID, new SelectList(ViewBag.ToolCategoryList, "ID", "ToolCategory", Model.ToolCategoryID), "", new { @class = "selectBox" })*@
                        @Html.DropDownListFor(model => model.AssetCategoryID, new SelectList(lstAssetCats, "ID", "AssetCategory", Model.AssetCategory), "", new { @class = "selectBox" })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.AssetCategoryID)</span>
                        @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolCategory, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                        {
                            <a onclick="AddNewFromPopup('Asset Category');" id="btnAddToolCategory" class="addNewLink">
                                (@ResCommon.AddNew)
                            </a>
                        }
                    </div>
                </li>
                <li>
                    <ul>
                        <li>
                            <h4>
                                @eTurns.DTO.ResItemMaster.ImagePath
                            </h4>
                        </li>
                        <li>
                            @Html.RadioButtonFor(e => e.ImageType, "ImagePath", new { id = "ImagePath", onchange = "ShowImage(this);" })
                            @Html.Label("ImagePath", ResItemMaster.LocalImage)
                            @Html.RadioButtonFor(e => e.ImageType, "ExternalImage", new { id = "ExternalImage", onchange = "ShowImage(this);" })
                            @Html.Label("ExternalImage", ResItemMaster.ExternalUrl)
                        </li>
                       
                        <li id="ExternalURL">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.AssetImageExternalURL)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.AssetImageExternalURL, new { @class = "text-box", maxlength = 500, @onblur = "return CheckValidURLForImage(this);" })
                            </div>
                            @Html.HiddenFor(model => Model.AssetImageExternalURL)
                        </li>
                        <li>
                            <ul>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.ImagePath)@*<em> *</em>*@
                                    </div>
                                    <div class="editor-field" style="width: 1000px;">
                                        <a href="javascript:void(null);" onclick="DeleteAssetImage('@Model.GUID');" title="@ResCommon.DeleteImage" id="btnDeleteImage" name="btnDeleteImage">
                                                          <img src="~/Content/images/delete.png" />
                                        </a> 
                                        <input name="AssetImage" id="AssetImage" type="file" />
                                        @if (!string.IsNullOrEmpty(Model.ImagePath))
                                        {
                                            <input type="hidden" value="@( LogoPathImage + "/" + Model.ID + "/" + Model.ImagePath)" id="currentpath" />
                                        }
                                        else
                                        {
                                            <input type="hidden" value="~/Content/images/no-image.jpg" id="currentpath" />    
                                        }
                                    <div style="float: left;">
                                        @if (!string.IsNullOrEmpty(Model.ImagePath) && Model.ImageType.Trim().ToLower() == "imagepath")
                                        {

                                            <a href='/Consume/Get?path=@(LogoPathImage + "/" + Model.ID + "/" + Model.ImagePath)' target="_blank"> <img id="previewHolder" style="width:120px;height:120px;" src="/Consume/Get?path=@(LogoPathImage + "/" + Model.ID + "/" + Model.ImagePath)"> </a>
                                        }
                                        else if (!string.IsNullOrEmpty(Model.AssetImageExternalURL) && Model.ImageType.Trim().ToLower() == "externalimage")
                                        {
                                            <img id="previewHolder" style="width:120px;height:120px;" src="@( Model.AssetImageExternalURL)">
                                        }
                                        else
                                        {
                                            <img id="previewHolder" style="width: 120px; height: 120px;" alt="@ResCommon.NoImage" src="~/Content/images/no-image.jpg" />
                                        }
                                    </div>
                                    </div>
                                </li>
                            </ul>
                        </li>
                    </ul>

                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.PurchaseDate)
                    </div>
                    <div class="editor-field">
                        <div class="divLabel">
                            @Html.TextBoxFor(model => model.PurchaseDateStr, new { @class = "text-box", id = "txtPurchaseDate", @readonly = "readonly", @style = "background:white", maxlength = 128 })
                            <a id="ancPurchasePrice" title="" class="datePicker" style="cursor: pointer">
                                <img src="~/Content/images/date-picker-icon.png" alt="" title="" />
                            </a>
                        </div>
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PurchaseDateStr)</span>
                    </div>
                </li>
                @if (isCost)
                {


                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PurchasePrice)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PurchasePrice, new { @class = "numericinput", @name = "costdata" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PurchasePrice)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.DepreciatedValue)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.DepreciatedValue, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DepreciatedValue)</span>
                        </div>
                    </li>

                }
                else
                {
                    <li>
                        @Html.HiddenFor(t => t.PurchasePrice)
                        @Html.HiddenFor(t => t.DepreciatedValue)
                    </li>
                }
                @*<li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.SuggestedMaintenanceDate)
                        </div>
                        <div class="editor-field">
                            <div class="divLabel">
                                @Html.TextBoxFor(model => model.SuggestedMaintenanceDateStr, new { @class = "text-box", id = "txtSuggestedMaintenanceDate", @readonly = "readonly", @style = "background:white", maxlength = 128 })
                                <a id="ancSuggestedMaintenanceDate" title="" class="datePicker" style="cursor: pointer">
                                    <img src="@Url.Content("~/Content/images/date-picker-icon.png")" alt="" title="" />
                                </a>
                            </div>
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SuggestedMaintenanceDateStr)</span>
                        </div>
                    </li>*@
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.NoOfPastMntsToConsider)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.NoOfPastMntsToConsider, new { @class = "text-box", maxlenght = 2 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.NoOfPastMntsToConsider)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.MaintenanceDueNoticeDays)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.MaintenanceDueNoticeDays, new { @class = "text-box", maxlenght = 2 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaintenanceDueNoticeDays)</span>
                    </div>
                </li>
                @*<li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.MaintenanceType)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.MaintenanceType, new SelectList(lstItems, "Value", "Text"), new { @class = "selectBox" })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaintenanceType)</span>
                    </div>
                </li>*@
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        @if ((isInsert == true && Model.ID == 0) || (isUpdate == true && Model.ID > 0) || Convert.ToString(Session["IsInsert"]) == "True")
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else //if (isUpdate == false && isInsert == false)
                        {
                            <script>
                                //This is the case when archived or deleted record is being viewed..
                                disableControls('frmAsset');
                            </script>
                        }
                    </div>
                </li>
            </ul>
        </div>
        <div class="editorForm padRightNone">
            <ul>
                @Html.Partial("UDFLayout", new eTurns.DTO.ResAssetMaster())
            </ul>

            @Html.Partial("_DueMaintenance")

        </div>
    </div>
}
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    var AssetImageType = '@Model.ImageType';
    var AssetImagePath = '@Model.ImagePath';
    var charCode = '@CharCodeList';
    var CommonFileExtension = '@SiteSettingHelper.CommonAllowedFileExtension';
    var MsgInvalidFileSelected = '@ResWorkOrder.MsgInvalidFileSelected';
    var MsgvalidFileList = '@ResWorkOrder.MsgvalidFileList';

    $(document).ready(function () {
        window.location.hash = '';
        var intNotAllowededCode = charCode.split(',');
        if (intNotAllowededCode != null && intNotAllowededCode.length > 0) {
            specialKeys = new Array();
            for (i = 0; i < intNotAllowededCode.length; i++) {
                specialKeys.push(parseInt(intNotAllowededCode[i])); //Backspace
            }
        }

        $('form').areYouSure();
        
        if (AssetImageType == 'ImagePath' || AssetImageType == '') {
            $("#AssetImage").show();
            $("#ExternalURL").hide();
            if (AssetImagePath != undefined && AssetImagePath != null && AssetImagePath != '') {
                $("#btnDeleteImage").show();
            }
            else {
                $("#btnDeleteImage").hide();
            }
        }
        else {
            $("#AssetImage").hide();
            $("#ExternalURL").show();
            $("#btnDeleteImage").hide();
        }
        $("#AssetImage").change(function () {
            readURL(this);
        });
    });

    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmAsset");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
        //$('#NarroSearchClear').click();
    });
    function CheckValidURLForImage(curobj) {
        var strURL = $(curobj).val();
        if (strURL != '' && strURL != null) {

            var validExtension = CommonFileExtension.split(',');
            var strValidationMessage = "";
            var fileExt = strURL.substring(strURL.lastIndexOf('.'));
            if (fileExt.indexOf("/") <= 0) {
                if (validExtension.indexOf(fileExt.toLowerCase()) <= -1) {
                    strValidationMessage = strValidationMessage + strURL + " " + MsgInvalidFileSelected;
                }
                if (strValidationMessage != "") {
                    alert(strValidationMessage + MsgvalidFileList.replace("{0}", validExtension.toString()));
                    $('#previewHolder').attr('src', '/Content/images/no-image.jpg');
                    $("input#AssetImageExternalURL").val('');
                    return;
                }
            }

            $("<img>", {
                src: strURL,
                error: function () {
                    alert('@ResCommon.InvalidURL');
                    $(curobj).val("");
                    curobj.focus();
                },
                load: function () {

                    $('#previewHolder').attr('src', strURL);
                }
            });
        }
        else {
            $('#previewHolder').attr('src', '/Content/images/no-image.jpg');
        }
        return false;
    }


    function onSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#AssetName").val("");
            $("#AssetName").focus();
        }
        else if (idValue == 0) {
            $("#AssetName").val("");
            $("#AssetName").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                //                clearControls('frmAsset');
                //                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                if ($("#AssetImage").val() != "") {
                    ajaxFileUpload(response.AssetID);
                }
                               
                CallNarrowfunctions();                
                ShowNewTab('AssetCreate', 'frmAsset');
            }

        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#AssetName").focus();
            }
            else {
                if ($("#AssetImage").val() != "") {
                    ajaxFileUpload(response.AssetID);
                }
                clearControls('frmAsset');
                CallNarrowfunctions();
                SwitchTextTab(0, 'AssetCreate', 'frmAsset');
            }
        }
        return false;
    }
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#AssetName").focus();
    }
    function ajaxFileUpload(retid) {
        //starting setting some animation when the ajax starts and completes
        $("#loading")
    .ajaxStart(function () {
        $(this).show();
    })
    .ajaxComplete(function () {
        $(this).hide();
    });

        $.ajaxFileUpload
    (
        {
            url: '/api/fileupload/PostAssetFile/' + retid,
            secureuri: false,
            type: "POST",
            fileElementId: 'AssetImage',
            dataType: 'json',
            success: function (data, status) {
                //  window.location.reload();
            },
            error: function (data, status, e) {
                //    window.location.reload();
            }
        }
    )
        return false;
    }
    $(document).ready(function () {

        $('#txtPurchaseDate').blur(function () { }).datepicker({changeMonth:true,changeYear:true, dateFormat: RoomDateJSFormat });
        $('#txtSuggestedMaintenanceDate').blur(function () { }).datepicker({ dateFormat: RoomDateJSFormat });

        //$.ajaxSetup({
        //    beforeSend: function (req) {
        //        $('#DivLoading').show();
        //    },
        //    complete: function (req) {
        //        $('#DivLoading').hide();
        //    }
        //});
        $('#btnCancel').click(function (e) {
            //            if (IsRefreshGrid)
            //                $('#NarroSearchClear').click();
            SwitchTextTab(0, 'AssetCreate', 'frmAsset');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();
            }
            //$('#NarroSearchClear').click();
        });

        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });


    });
    function ShowImage(currentRadio) {
        var currentId = $(currentRadio).attr("id");
        if (currentId == "ImagePath") {
            $("#AssetImage").show();
            $("#ExternalURL").hide();
            setImagePath();

            $("#btnDeleteImage").hide();
            if ((AssetImagePath != undefined && AssetImagePath != null && AssetImagePath != '') || ($("input#currentpath").val() != '' && $("input#currentpath").val() != '/Content/images/no-image.jpg')) {
                $("#btnDeleteImage").show();
            }
        }
        else {
            CheckValidURLForImage($("input#AssetImageExternalURL"));

            $("#AssetImage").hide();
            $("#ExternalURL").show();
            $("#btnDeleteImage").hide();
        }
    }
    function DeleteAssetImage(AssetGUID) { 
        
        $.ajax({
            url: '/Assets/DeleteAssetImage', 
            data: { 'AssetGUID': AssetGUID },
            dataType: 'json',
            type: 'POST',
            async: false,
            cache: false,
            success: function (response) {
                if (response.status == 'ok') {
                    
                    $('#previewHolder').attr('src', '/Content/images/no-image.jpg');
                    $("input#currentpath").val('/Content/images/no-image.jpg');
                    $("input#AssetImage").val('');
                    $("#btnDeleteImage").hide();
                    AssetImagePath = '';
                }
                else {
                    Status = 'Error';
                    alert("Error");
                }
            }
        });
    }
    function setImagePath() {
        $('#previewHolder').attr('src', $("input#currentpath").val());
    }
    function readURL(input) {
        if (input.files && input.files[0]) {

            var validExtension = CommonFileExtension.split(',');
            var strValidationMessage = "";
            var fileExt = input.files[0].name;
            fileExt = fileExt.substring(fileExt.lastIndexOf('.'));
            if (validExtension.indexOf(fileExt.toLowerCase()) <= -1) {
                strValidationMessage = strValidationMessage + input.files[0].name + " " + MsgInvalidFileSelected;
            }
            if (strValidationMessage != "") {
                alert(strValidationMessage + MsgvalidFileList.replace("{0}", validExtension.toString()));
                $('#previewHolder').attr('src', '/Content/images/no-image.jpg');
                $("input#currentpath").val('');
                $("input#AssetImage").val('');
                $("#btnDeleteImage").hide();
                EnterpriseImagePath = '';
                return;
            }

            var isError = false;
            var objFile = input.files[0];
        
            for (var n = 0; n < specialKeys.length; n++) {
                if (objFile.name.toString().lastIndexOf(String.fromCharCode(specialKeys[n])) >= 0) {
                    isError = true;
                    break;
                }
            }
       
      
            if (isError == true) {
                showNotificationDialog();
                //alert("Please select correct file name.");
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                $("#spanGlobalMessage").html('@ResCommon.ValidFileName');

                $("input#currentpath").val('');
                $("input#AssetImage").val('');
            }
            else {

                var reader = new FileReader();
                reader.onload = function (e) {
                    var filePath = $("#currentpath").val().split('\\').pop();

                    if (filePath.toString().indexOf("&") >= 0 || filePath.toString().indexOf("<") >= 0 || filePath.toString().indexOf(">") >= 0
                        || filePath.toString().indexOf("*") >= 0 || filePath.toString().indexOf(":") >= 0
                        || filePath.toString().indexOf("?") >= 0) {
                        alert("@ResCommon.ValidFileName");
                        $("input#currentpath").val('');
                    }
                    else {
                        $('#previewHolder').attr('src', e.target.result);
                        $("input#currentpath").val(e.target.result);
                        $("#btnDeleteImage").show();
                    }
                }

                reader.readAsDataURL(input.files[0]);

            }

          
        
        }
    }
</script>
@if (isUpdate != false && isInsert != false)
{
    <script>
        $(document).ready(function () {
            $('#ancPurchasePrice').click(function () {
                $('#txtPurchaseDate').focus();
            });
            $('#ancSuggestedMaintenanceDate').click(function () {
                $('#txtSuggestedMaintenanceDate').focus();
            });
        });
    </script>
}
<div id="NewMasterPopUP">
</div>
<script type="text/javascript">
    $("#NewMasterPopUP").dialog({
        autoOpen: false,
        show: "blind",
        hide: "explode",
        height: 600,
        width: 800,
        modal: true,
        open: function () {
            var PopupTile = "@ResCommon.AddNew";
            if ($(this).data("data") == "Asset Category")
            {
                PopupTile = PopupTile + " " + "@ResAssetMaster.AssetCategory";
            }
            else if ($(this).data("data") == "Tool Location")
            {
                PopupTile = PopupTile + " " + "@ResToolMaster.Location";
            }
            $(this).parent().find("span.ui-dialog-title").html(PopupTile);
        },
        close: function () {
            $('#DivLoading').show();
            RefreshDropdownList($(this).data("data"), $(this).data("IDVal"));
            $(this).data("data", null);
            $(this).data("IDVal", null);
            $(this).parent().find("span.ui-dialog-title").html('');
        }
    });
    function AddNewFromPopup(PopupFor) {
        $('#DivLoading').show();
        var _URL = ''
        if (PopupFor == 'Asset Category') {
            _URL = '@Url.Action("../Master/AssetCategoryCreate")';
        }
        else if (PopupFor == 'Tool Location') {
            _URL = '@Url.Action("../Master/LocationCreate")';
        }
        else {
            return false;
        }
        $('#NewMasterPopUP').load(_URL, function () {
            $('#NewMasterPopUP').data("data", PopupFor).dialog('open');
            $('#DivLoading').hide();
        });
    }
    function RefreshDropdownList(PopupFor, IDVal) {
        if (IDVal != undefined) {
            var _ControlID = '';
            if (PopupFor == 'Asset Category') {
                _ControlID = "AssetCategoryID";
            }
            else if (PopupFor == 'Tool Location') {
                _ControlID = "LocationID";
            }
            var arrdata = IDVal.split("~");
            var listData = $('select[id*="' + _ControlID + '"]');
            $(listData).each(function () {
                $(this).append($("<option />").val(arrdata[0]).text(arrdata[1]));
            });
        }
        $('#DivLoading').hide();
    }
    _Common.addRequiredSign();
</script>
