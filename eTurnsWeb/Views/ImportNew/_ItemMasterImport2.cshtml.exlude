@model eTurns.DTO.ImportMastersNewDTO.ImportPageDTO

@{

}
@using (ImportMastersNewDTO.ImportPageDTO objImportPageDTO = Model)
{
    //@Html.HiddenFor(m => m.DataTableColumns.Concat(','));
    <input type="hidden" name="hdnDataTableColumns" value='@String.Join(",", Model.DataTableColumns)' />
    <table class="display dataTable">
        <thead>
            <tr>
                @if (objImportPageDTO.DataTableColumns.Count() > 0)
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.Status
                    </th>
                    <th class="ui-state-default read_only">
                        @ResCommon.Reason
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("itemnumber"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.ItemNumber
                    </th>
                }
                @*@if (objImportPageDTO.DataTableColumns.Contains("link1"))
                    {
                        <th class="ui-state-default read_only">
                            @eTurns.DTO.ResItemMaster.Link1
                        </th>
                    }*@
                @if (objImportPageDTO.DataTableColumns.Contains("link2"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.Link2
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("manufacturer"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ManufacturerName
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("manufacturernumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ManufacturerNumber
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("suppliername"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.Supplier
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("supplierpartno"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.SupplierPartNo
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("blanketordernumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.BlanketPO
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("upc"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UPC
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("unspsc"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UNSPSC
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("description"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Description
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("longdescription"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.LongDescription
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("categoryname"))
                {
                    <th class="ui-state-default read_only">
                        @ResCategoryMaster.Category
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("glaccount"))
                {
                    <th class="ui-state-default read_only">
                        @ResGLAccount.GLAccount
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("uom"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResUnitMaster.Unit
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("costuom"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResCostUOMMaster.CostUOM
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("defaultreorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.DefaultReorderQuantity
                    </th>

                }
                @if (objImportPageDTO.DataTableColumns.Contains("defaultpullquantity"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.DefaultPullQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("cost"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Cost
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("markup"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Markup
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("sellprice"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.SellPrice
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("extendedcost"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ExtendedCost
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("leadtimeindays"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.LeadTimeInDays
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("trend"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Trend
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("taxable"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Taxable
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("consignment"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Consignment
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("stagedquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.StagedQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("intransitquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.InTransitquantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("onorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.OnOrderQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("ontransferquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.OnTransferQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("suggestedorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.SuggestedOrderQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("requisitionedquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.RequisitionedQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("averageusage"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.AverageUsage
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("turns"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Turns
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("onhandquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.OnHandQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("isitemlevelminmaxqtyrequired"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.IsItemLevelMinMaxQtyRequired
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("criticalquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.CriticalQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("minimumquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.MinimumQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("maximumquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.MaximumQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("weightperpiece"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.WeightPerPiece
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("itemuniquenumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ItemUniqueNumber
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("istransfer"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsTransfer
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("ispurchase"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsPurchase
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("inventrylocation"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResBin.BinNumber
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("inventoryclassification"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.InventoryClassification
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("serialnumbertracking"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.SerialNumberTracking
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("lotnumbertracking"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.LotNumberTracking
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("datecodetracking"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.DateCodeTracking
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("itemtype"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.ItemType
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("imagepath"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ImagePath
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("udf1"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF1
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("udf2"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF2
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("udf3"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF3
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("udf4"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF4
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("udf5"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF5
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("islotserialexpirycost"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsLotSerialExpiryCost
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("isbuildbreak"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsBuildBreak
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("enforcedefaultpullquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.PullQtyScanOverride
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("enforcedefaultreorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsEnforceDefaultReorderQuantity
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("isautoinventoryclassification"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsAutoInventoryClassification
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("trendingsetting"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.TrendingSetting
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("ispackslipmandatoryatreceive"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsPackslipMandatoryAtReceive
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("itemimageexternalurl"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.ItemImageExternalURL
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("itemdocexternalurl"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.ItemDocExternalURL
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("isdeleted"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.IsDeleted
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("itemlink2externalurl"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.ItemLink2ExternalURL
                    </th>
                }
                @if (objImportPageDTO.DataTableColumns.Contains("isactive"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.IsActive
                    </th>
                }
            </tr>
        </thead>
        <tbody>

            @*@{
                    List<eTurns.DTO.ImportMastersNewDTO.ItemMasterImport> lstImport = (List<eTurns.DTO.ImportMastersNewDTO.ItemMasterImport>)objImportPageDTO.lstItemMasterImportData;
                }*@

            @for (int i = 0; i < objImportPageDTO.lstItemMasterImportData.Count; i++)
            {
                string strTRAttributes = "";
                if (i % 2 != 0)
                {
                    strTRAttributes = "class='odd' style='background-color: rgb(239, 247, 255);'";
                }
                else
                {
                    strTRAttributes = "class='even' style='background-color: rgb(255, 255, 255);'";
                }

                //List<eTurns.DTO.ImportMastersNewDTO.ItemMasterImport> objItemMasterImport = ((List<eTurns.DTO.ImportMastersNewDTO.ItemMasterImport>)objImportPageDTO.lstImportData);

                <tr @Html.Raw(@strTRAttributes)>
                    @if (objImportPageDTO.DataTableColumns.Count() > 0)
                    {
                        <td class="read_only ImportStatus">
                            @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].Status, new { @class = "importtext-box" })
                        </td>
                        <td class="read_only ImportReason">
                            @if (ViewData.ModelState.IsValid)
                            {
                                @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].Reason, new { @class = "importtext-box" })
                            }
                            @Html.ValidationMessageFor(m => objImportPageDTO.lstItemMasterImportData[i].ItemNumber, null, new { @style = "color:red", @class = "ImportValidationError" })
                            @Html.ValidationMessageFor(m => objImportPageDTO.lstItemMasterImportData[i].InventryLocation, null, new { @style = "color:red", @class = "ImportValidationError" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("itemnumber"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ItemNumber, new { @class = "importtext-box" })
                        </td>
                    }
                    @*@if (objImportPageDTO.DataTableColumns.Contains("link1"))
                        {
                            <td class="read_only">
                                @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].Link1, new { @class = "importtext-box" })
                            </td>
                        }*@
                    @if (objImportPageDTO.DataTableColumns.Contains("link2"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].Link2, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("manufacturer"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ManufacturerName, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("manufacturernumber"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ManufacturerNumber, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("suppliername"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].SupplierName, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("supplierpartno"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].SupplierPartNo, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("blanketordernumber"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].BlanketOrderNumber, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("upc"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].UPC, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("unspsc"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].UNSPSC, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("description"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].Description, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("longdescription"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].LongDescription, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("categoryname"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].CategoryName, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("glaccount"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].GLAccount, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("uom"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].Unit, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("costuom"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].CostUOMName, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("defaultreorderquantity"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].DefaultReorderQuantity, new { @class = "importtext-box" })
                        </td>

                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("defaultpullquantity"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].DefaultPullQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("cost"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].Cost, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("markup"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].Markup, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("sellprice"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].SellPrice, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("extendedcost"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ExtendedCost, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("leadtimeindays"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].LeadTimeInDays, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("trend"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].Trend, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("taxable"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].Taxable, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("consignment"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].Consignment, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("stagedquantity"))
                    {
                        <td class="read_only">
                            @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].StagedQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("intransitquantity"))
                    {
                        <td class="read_only">
                            @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].InTransitquantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("onorderquantity"))
                    {
                        <td class="read_only">
                            @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].OnOrderQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("ontransferquantity"))
                    {
                        <td class="read_only">
                            @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].OnTransferQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("suggestedorderquantity"))
                    {
                        <td class="read_only">
                            @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].SuggestedOrderQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("requisitionedquantity"))
                    {
                        <td class="read_only">
                            @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].RequisitionedQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("averageusage"))
                    {
                        <td class="read_only">
                            @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].AverageUsage, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("turns"))
                    {
                        <td class="read_only">
                            @Html.DisplayFor(m => objImportPageDTO.lstItemMasterImportData[i].Turns, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("onhandquantity"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].OnHandQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("isitemlevelminmaxqtyrequired"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsItemLevelMinMaxQtyRequired, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("criticalquantity"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].CriticalQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("minimumquantity"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].MinimumQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("maximumquantity"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].MaximumQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("weightperpiece"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].WeightPerPiece, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("itemuniquenumber"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ItemUniqueNumber, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("istransfer"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsTransfer, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("ispurchase"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsPurchase, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("inventrylocation"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].InventryLocation, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("inventoryclassification"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].InventoryClassificationName, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("serialnumbertracking"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].SerialNumberTracking, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("lotnumbertracking"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].LotNumberTracking, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("datecodetracking"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].DateCodeTracking, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("itemtype"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ItemType, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("imagepath"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ImagePath, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("udf1"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].UDF1, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("udf2"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].UDF2, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("udf3"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].UDF3, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("udf4"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].UDF4, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("udf5"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].UDF5, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("islotserialexpirycost"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsLotSerialExpiryCost, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("isbuildbreak"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsBuildBreak, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("enforcedefaultpullquantity"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].PullQtyScanOverride, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("enforcedefaultreorderquantity"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsEnforceDefaultReorderQuantity, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("isautoinventoryclassification"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsAutoInventoryClassification, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("trendingsetting"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].TrendingSettingName, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("ispackslipmandatoryatreceive"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsPackslipMandatoryAtReceive, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("itemimageexternalurl"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ItemImageExternalURL, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("itemdocexternalurl"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ItemDocExternalURL, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("isdeleted"))
                    {
                        <td class="read_only">
                            @Html.CheckBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsDeleted, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("itemlink2externalurl"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].ItemLink2ExternalURL, new { @class = "importtext-box" })
                        </td>
                    }
                    @if (objImportPageDTO.DataTableColumns.Contains("isactive"))
                    {
                        <td class="read_only">
                            @Html.TextBoxFor(m => objImportPageDTO.lstItemMasterImportData[i].IsActive, new { @class = "importtext-box" })
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}