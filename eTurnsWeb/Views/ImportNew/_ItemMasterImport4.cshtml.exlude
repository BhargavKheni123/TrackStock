@model eTurns.DTO.ImportMastersNewDTO.ImportPageDTO

@{
    //var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    //serializer.MaxJsonLength = Int32.MaxValue;
    //var lstItemMasterImportData = serializer.Serialize(Model.lstItemMasterImportData);
    //string lstItemMasterImportData = Newtonsoft.Json.JsonConvert.SerializeObject(Model.lstItemMasterImportData);
    //string DataTableColumns = Newtonsoft.Json.JsonConvert.SerializeObject(Model.DataTableColumns);
    string ImportPageDTO = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
}
<div id="divtest" data-ng-controller="myCtrl">
    <table class="display dataTable">
        <thead>
            <tr>
                @if (Model.DataTableColumns.Count() > 0)
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.Status
                    </th>
                    <th class="ui-state-default read_only">
                        @ResCommon.Reason
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemnumber"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.ItemNumber
                    </th>
                }
                @if (Model.DataTableColumns.Contains("link2"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.Link2
                    </th>
                }
                @if (Model.DataTableColumns.Contains("manufacturer"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ManufacturerName
                    </th>
                }
                @if (Model.DataTableColumns.Contains("manufacturernumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ManufacturerNumber
                    </th>
                }
                @if (Model.DataTableColumns.Contains("suppliername"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.Supplier
                    </th>
                }
                @if (Model.DataTableColumns.Contains("supplierpartno"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.SupplierPartNo
                    </th>
                }
                @if (Model.DataTableColumns.Contains("blanketordernumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.BlanketPO
                    </th>
                }
                @if (Model.DataTableColumns.Contains("upc"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UPC
                    </th>
                }
                @if (Model.DataTableColumns.Contains("unspsc"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UNSPSC
                    </th>
                }
                @if (Model.DataTableColumns.Contains("description"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Description
                    </th>
                }
                @if (Model.DataTableColumns.Contains("longdescription"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.LongDescription
                    </th>
                }
                @if (Model.DataTableColumns.Contains("categoryname"))
                {
                    <th class="ui-state-default read_only">
                        @ResCategoryMaster.Category
                    </th>
                }
                @if (Model.DataTableColumns.Contains("glaccount"))
                {
                    <th class="ui-state-default read_only">
                        @ResGLAccount.GLAccount
                    </th>
                }
                @if (Model.DataTableColumns.Contains("uom"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResUnitMaster.Unit
                    </th>
                }
                @if (Model.DataTableColumns.Contains("costuom"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResCostUOMMaster.CostUOM
                    </th>
                }
                @if (Model.DataTableColumns.Contains("defaultreorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.DefaultReorderQuantity
                    </th>

                }
                @if (Model.DataTableColumns.Contains("defaultpullquantity"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.DefaultPullQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("cost"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Cost
                    </th>
                }
                @if (Model.DataTableColumns.Contains("markup"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Markup
                    </th>
                }
                @if (Model.DataTableColumns.Contains("sellprice"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.SellPrice
                    </th>
                }
                @if (Model.DataTableColumns.Contains("extendedcost"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ExtendedCost
                    </th>
                }
                @if (Model.DataTableColumns.Contains("leadtimeindays"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.LeadTimeInDays
                    </th>
                }
                @if (Model.DataTableColumns.Contains("trend"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Trend
                    </th>
                }
                @if (Model.DataTableColumns.Contains("taxable"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Taxable
                    </th>
                }
                @if (Model.DataTableColumns.Contains("consignment"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Consignment
                    </th>
                }
                @if (Model.DataTableColumns.Contains("stagedquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.StagedQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("intransitquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.InTransitquantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("onorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.OnOrderQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ontransferquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.OnTransferQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("suggestedorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.SuggestedOrderQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("requisitionedquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.RequisitionedQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("averageusage"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.AverageUsage
                    </th>
                }
                @if (Model.DataTableColumns.Contains("turns"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Turns
                    </th>
                }
                @if (Model.DataTableColumns.Contains("onhandquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.OnHandQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isitemlevelminmaxqtyrequired"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.IsItemLevelMinMaxQtyRequired
                    </th>
                }
                @if (Model.DataTableColumns.Contains("criticalquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.CriticalQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("minimumquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.MinimumQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("maximumquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.MaximumQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("weightperpiece"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.WeightPerPiece
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemuniquenumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ItemUniqueNumber
                    </th>
                }
                @if (Model.DataTableColumns.Contains("istransfer"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsTransfer
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ispurchase"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsPurchase
                    </th>
                }
                @if (Model.DataTableColumns.Contains("inventrylocation"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResBin.BinNumber
                    </th>
                }
                @if (Model.DataTableColumns.Contains("inventoryclassification"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.InventoryClassification
                    </th>
                }
                @if (Model.DataTableColumns.Contains("serialnumbertracking"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.SerialNumberTracking
                    </th>
                }
                @if (Model.DataTableColumns.Contains("lotnumbertracking"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.LotNumberTracking
                    </th>
                }
                @if (Model.DataTableColumns.Contains("datecodetracking"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.DateCodeTracking
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemtype"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.ItemType
                    </th>
                }
                @if (Model.DataTableColumns.Contains("imagepath"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ImagePath
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf1"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF1
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf2"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF2
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf3"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF3
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf4"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF4
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf5"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF5
                    </th>
                }
                @if (Model.DataTableColumns.Contains("islotserialexpirycost"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsLotSerialExpiryCost
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isbuildbreak"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsBuildBreak
                    </th>
                }
                @if (Model.DataTableColumns.Contains("enforcedefaultpullquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.PullQtyScanOverride
                    </th>
                }
                @if (Model.DataTableColumns.Contains("enforcedefaultreorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsEnforceDefaultReorderQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isautoinventoryclassification"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsAutoInventoryClassification
                    </th>
                }
                @if (Model.DataTableColumns.Contains("trendingsetting"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.TrendingSetting
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ispackslipmandatoryatreceive"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsPackslipMandatoryAtReceive
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemimageexternalurl"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.ItemImageExternalURL
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemdocexternalurl"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.ItemDocExternalURL
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isdeleted"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.IsDeleted
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemlink2externalurl"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.ItemLink2ExternalURL
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isactive"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.IsActive
                    </th>
                }
            </tr>
        </thead>
        <tbody ng-init="tBodyInit()">
            <tr ng-repeat="item in ImportPageDTO.lstItemMasterImportData" class='odd importtext-box-tr' style='background-color: rgb(239, 247, 255);' my-repeat-directive>
                @if (Model.DataTableColumns.Count() > 0)
                {
                    <td class="read_only ImportStatus">
                        {{item.Status}}
                    </td>
                    <td class="read_only ImportReason">
                        {{item.Reason}}
                    </td>
                }
                @if (Model.DataTableColumns.Contains("itemnumber"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ItemNumber" ng-model="item.ItemNumber" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("link2"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].Link2" ng-model="item.Link2" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("manufacturer"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ManufacturerName" ng-model="item.ManufacturerName" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("manufacturernumber"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ManufacturerNumber" ng-model="item.ManufacturerNumber" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("suppliername"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].SupplierName" ng-model="item.SupplierName" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("supplierpartno"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].SupplierPartNo" ng-model="item.SupplierPartNo" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("blanketordernumber"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].BlanketOrderNumber" ng-model="item.BlanketOrderNumber" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("upc"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].UPC" ng-model="item.UPC" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("unspsc"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].UNSPSC" ng-model="item.UNSPSC" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("description"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].Description" ng-model="item.Description" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("longdescription"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].LongDescription" ng-model="item.LongDescription" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("categoryname"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].CategoryName" ng-model="item.CategoryName" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("glaccount"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].GLAccount" ng-model="item.GLAccount" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("uom"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].Unit" ng-model="item.Unit" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("costuom"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].CostUOMName" ng-model="item.CostUOMName" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("defaultreorderquantity"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].DefaultReorderQuantity" ng-model="item.DefaultReorderQuantity" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("defaultpullquantity"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].DefaultPullQuantity" ng-model="item.DefaultPullQuantity" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("cost"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].Cost" ng-model="item.Cost" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("markup"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].Markup" ng-model="item.Markup" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("sellprice"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].SellPrice" ng-model="item.SellPrice" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("extendedcost"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ExtendedCost" ng-model="item.ExtendedCost" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("leadtimeindays"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].LeadTimeInDays" ng-model="item.LeadTimeInDays" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("trend"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].Trend" ng-model="item.Trend" type="checkbox" ng-checked="item.expression"></td>
                }
                @if (Model.DataTableColumns.Contains("taxable"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].Taxable" ng-model="item.Taxable" type="checkbox" ng-checked="item.Taxable"></td>
                }
                @if (Model.DataTableColumns.Contains("consignment"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].Consignment" ng-model="item.Consignment" type="checkbox" ng-checked="item.Consignment"></td>
                }
                @if (Model.DataTableColumns.Contains("stagedquantity"))
                {
                    <td>{{item.StagedQuantity}}</td>
                }
                @if (Model.DataTableColumns.Contains("intransitquantity"))
                {
                    <td>{{item.InTransitquantity}}</td>
                }
                @if (Model.DataTableColumns.Contains("onorderquantity"))
                {
                    <td>{{item.OnOrderQuantity}}</td>
                }
                @if (Model.DataTableColumns.Contains("ontransferquantity"))
                {
                    <td>{{item.OnTransferQuantity}}</td>
                }
                @if (Model.DataTableColumns.Contains("suggestedorderquantity"))
                {
                    <td>{{item.SuggestedOrderQuantity}}</td>
                }
                @if (Model.DataTableColumns.Contains("requisitionedquantity"))
                {
                    <td>{{item.RequisitionedQuantity}}</td>
                }
                @if (Model.DataTableColumns.Contains("averageusage"))
                {
                    <td>{{item.AverageUsage}}</td>
                }
                @if (Model.DataTableColumns.Contains("turns"))
                {
                    <td>{{item.Turns}}</td>
                }
                @if (Model.DataTableColumns.Contains("onhandquantity"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].OnHandQuantity" ng-model="item.OnHandQuantity" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("isitemlevelminmaxqtyrequired"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsItemLevelMinMaxQtyRequired" ng-model="item.IsItemLevelMinMaxQtyRequired" type="checkbox" ng-checked="item.IsItemLevelMinMaxQtyRequired"></td>
                }
                @if (Model.DataTableColumns.Contains("criticalquantity"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].CriticalQuantity" ng-model="item.CriticalQuantity" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("minimumquantity"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].MinimumQuantity" ng-model="item.MinimumQuantity" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("maximumquantity"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].MaximumQuantity" ng-model="item.MaximumQuantity" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("weightperpiece"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].WeightPerPiece" ng-model="item.WeightPerPiece" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("itemuniquenumber"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ItemUniqueNumber" ng-model="item.ItemUniqueNumber" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("istransfer"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsTransfer" ng-model="item.IsTransfer" type="checkbox" ng-checked="item.IsTransfer"></td>
                }
                @if (Model.DataTableColumns.Contains("ispurchase"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsPurchase" ng-model="item.IsPurchase" type="checkbox" ng-checked="item.IsPurchase"></td>
                }
                @if (Model.DataTableColumns.Contains("inventrylocation"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].InventryLocation" ng-model="item.InventryLocation" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("inventoryclassification"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].InventoryClassificationName" ng-model="item.InventoryClassificationName" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("serialnumbertracking"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].SerialNumberTracking" ng-model="item.SerialNumberTracking" type="checkbox" ng-checked="item.SerialNumberTracking"></td>
                }
                @if (Model.DataTableColumns.Contains("lotnumbertracking"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].LotNumberTracking" ng-model="item.LotNumberTracking" type="checkbox" ng-checked="item.LotNumberTracking"></td>
                }
                @if (Model.DataTableColumns.Contains("datecodetracking"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].DateCodeTracking" ng-model="item.DateCodeTracking" type="checkbox" ng-checked="item.DateCodeTracking"></td>
                }
                @if (Model.DataTableColumns.Contains("itemtype"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ItemType" ng-model="item.ItemType" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("imagepath"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ImagePath" ng-model="item.ImagePath" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("udf1"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].UDF1" ng-model="item.UDF1" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("udf2"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].UDF2" ng-model="item.UDF2" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("udf3"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].UDF3" ng-model="item.UDF3" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("udf4"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].UDF4" ng-model="item.UDF4" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("udf5"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].UDF5" ng-model="item.UDF5" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("islotserialexpirycost"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsLotSerialExpiryCost" ng-model="item.IsLotSerialExpiryCost" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("isbuildbreak"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsBuildBreak" ng-model="item.IsBuildBreak" type="checkbox" ng-checked="item.IsBuildBreak"></td>
                }
                @if (Model.DataTableColumns.Contains("enforcedefaultpullquantity"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].PullQtyScanOverride" ng-model="item.PullQtyScanOverride" type="checkbox" ng-checked="item.PullQtyScanOverride"></td>
                }
                @if (Model.DataTableColumns.Contains("enforcedefaultreorderquantity"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsEnforceDefaultReorderQuantity" ng-model="item.IsEnforceDefaultReorderQuantity" type="checkbox" ng-checked="item.IsEnforceDefaultReorderQuantity"></td>
                }
                @if (Model.DataTableColumns.Contains("isautoinventoryclassification"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsAutoInventoryClassification" ng-model="item.IsAutoInventoryClassification" type="checkbox" ng-checked="item.IsAutoInventoryClassification"></td>
                }
                @if (Model.DataTableColumns.Contains("trendingsetting"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].TrendingSettingName" ng-model="item.TrendingSettingName" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("ispackslipmandatoryatreceive"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsPackslipMandatoryAtReceive" ng-model="item.IsPackslipMandatoryAtReceive" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("itemimageexternalurl"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ItemImageExternalURL" ng-model="item.ItemImageExternalURL" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("itemdocexternalurl"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ItemDocExternalURL" ng-model="item.ItemDocExternalURL" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("isdeleted"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsDeleted" ng-model="item.IsDeleted" type="checkbox" ng-checked="item.IsDeleted"></td>
                }
                @if (Model.DataTableColumns.Contains("itemlink2externalurl"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].ItemLink2ExternalURL" ng-model="item.ItemLink2ExternalURL" type="text"></td>
                }
                @if (Model.DataTableColumns.Contains("isactive"))
                {
                    <td><input name="objImportPageDTO.lstItemMasterImportData[{{item.Index}}].IsActive" ng-model="item.IsActive" type="text"></td>
                }
            </tr>
        </tbody>
    </table>
    <div class="editor-field" style="width: 6%; float: left;">
        <input type="button" id="btnSave" value="Save" title="Save" class="CreateBtn" ng-click="SaveImportClick();" />
    </div>
</div>

<script type="text/javascript">
    var _ImportPageDTO = @Html.Raw(ImportPageDTO);
    var eTurnsAppModule = angular.module("eTurnsAppModule");

    eTurnsAppModule.directive('myRepeatDirective', function() {
        //return function(scope, element, attrs) {            
        //    if (scope.$last){
        //        $('#DivGridLoading').hide();                
        //    }
        //};
    });
    
    eTurnsAppModule.controller("myCtrl", function ($scope) {
        
        $scope.ImportPageDTO = null;

        $scope.tBodyInit = function() {                          
            setTimeout(function(){
                $scope.$apply(function () {
                    $scope.ImportPageDTO = _ImportPageDTO;                    
                });
            }, 1000);
        };

        $scope.SaveImportClick = function(){
            
            $.ajax({
                url: "/ImportNew/ImportSave",
                type: "POST",
                data: JSON.stringify({ TableName: 'TableName', lstItemMasterImportData : $scope.ImportPageDTO.lstItemMasterImportData }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if (data.status == "success") {
                        alert("Done");
                    } else {
                        alert("Some Error");
                    }
                },
                error: function () {
                    alert("Some Exception");
                }
            });

            return false;
        };
    });
</script>