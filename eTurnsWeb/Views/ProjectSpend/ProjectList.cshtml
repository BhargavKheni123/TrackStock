@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    ViewBag.Title = ResProjectMaster.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DisplaySaveButton = false, DisplayUDFButton = false, UDFSetupFor = "Projects&UDFHeader=" + @eTurns.DTO.ResProjectMaster.PageHeader, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "ProjectList" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ProjectList" };
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    Session["IsInsert"] = "";
    string ProjectSpendPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/ProjectSpend.pdf", DateTime.Now.Ticks);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    //HelpDocumentMasterDTO objHelpDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentMaster("ProjectSpend");
    //string ProjectSpendBasicVideo = "";
    //if (objHelpDTO != null)
    //{
    //    ProjectSpendBasicVideo = objHelpDTO.ModuleVideoPath.Replace("../Uploads/HelpVideo/", "");
    //}
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("ProjectSpend", (int)HelpDocType.Module);
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script type='text/javascript' src="@Url.Content("~/Scripts/SiteScripts.js?v=" + version)"></script>
    <script language="javascript" type="text/javascript">
        var oTable;
        var IsRefreshGrid = false;
        var SelectedHistoryRecordID = 0; 
        var deleteURL = "/ProjectSpend/DeleteProjectRecords";
        var sImageUrl = "/Content/images/";
        var anOpen = [];
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;  
        var ItemName = '';
        var ItemUniqueID = '';
        var objColumns = {};
        var IsReloadItemList=false;
        $(document).ready(function () {
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];

            var ColumnsArr = new Array();
                ColumnsArr.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });
              ColumnsArr.push({"mDataProp": "",
                               "sClass": "read_only control center",
                               "bSortable": false,
                               "sDefaultContent": '<img src="' + sImageUrl + 'drildown_open.jpg' + '">'
                              });
              ColumnsArr.push({ "mDataProp": "ID", "sClass": "read_only" });
              ColumnsArr.push({ "sClass": "read_only",
                                "mDataProp": "ProjectSpendName",
                                "sDefaultContent": '',
                                "bSortable": true,
                                "bSearchable": false,
                                "fnRender": function (obj, val) {
                                     return "<a id='aEditLink' onclick='BlankSession(); return ShowEditTab(&quot;ProjectEdit/" + obj.aData.ID + "&quot;,&quot;frmProject&quot;)' href='JavaScript:void(0);'>" + obj.aData.ProjectSpendName + "</a>" + " <input type='hidden' id='ProjectGUID' value='" + obj.aData.GUID.toString() + "' />";
                                 }
                                });
              ColumnsArr.push({ "mDataProp": "Description", "sClass": "read_only" });
              ColumnsArr.push({ "mDataProp": "DollarLimitAmount", "sClass": "read_only numericalign",
                                    "fnRender": function (obj, val) {
                                        if (obj.aData.DollarLimitAmount != null && obj.aData.DollarLimitAmount != NaN)
                                            return "<span>" + FormatedCostQtyValues(obj.aData.DollarLimitAmount, 1) + "</span>";
                                        else
                                            return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                                    }
                                });
              ColumnsArr.push({ "mDataProp": "DollarUsedAmount", "sClass": "read_only numericalign",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.DollarUsedAmount != null && obj.aData.DollarUsedAmount != NaN)
                                        return "<span>" + FormatedCostQtyValues(obj.aData.DollarUsedAmount, 1) + "</span>";
                                    else
                                        return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                                }
                            });
              ColumnsArr.push({ "mDataProp": "TrackAllUsageAgainstThis", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
                                });
              ColumnsArr.push({ "mDataProp": "IsClosed", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
			                    });
              ColumnsArr.push({ "mDataProp": "RoomName", "sClass": "read_only" });
              ColumnsArr.push({ "mDataProp": "AddedFrom", "sClass": "read_only" });
              ColumnsArr.push({ "mDataProp": "EditedFrom", "sClass": "read_only" });
              ColumnsArr.push({ "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
			                        "fnRender": function (obj, val) {
                                        return obj.aData.ReceivedOnWebDate;
			                        }
			                    });
              ColumnsArr.push({ "mDataProp": "ReceivedOn", "sClass": "read_only",
			                        "fnRender": function (obj, val) {
			                            //return GetDateInFullFormat(val);
                                        return obj.aData.ReceivedOnDate;
			                        }
			                    });
              ColumnsArr.push({
                  "mDataProp": "Created", "sClass": "read_only",
                  "fnRender": function (obj, val) {
                      //return GetDateInFullFormat(val);
                      return obj.aData.CreatedDate;
                  }
              });
              ColumnsArr.push({
                  "mDataProp": "Updated", "sClass": "read_only",
                  "fnRender": function (obj, val) {
                      //return GetDateInFullFormat(val);
                      return obj.aData.UpdatedDate;
                  }
              });
            ColumnsArr.push({ "mDataProp": "CreatedByName", "sClass": "read_only" });
            ColumnsArr.push({ "mDataProp": "UpdatedByName", "sClass": "read_only" });
            ColumnsArr.push({
                "mDataProp": "RemainsSpend",  "sClass": "read_only numericalign",
                "fnRender": function (obj, val) {
                    if (obj.aData.RemainsSpend != null && obj.aData.RemainsSpend != NaN)
                        return "<span>" + FormatedCostQtyValues(obj.aData.RemainsSpend, 1) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                }
            });
            ColumnsArr.push(@Html.RenderColumnsArray("ProjectMaster", false));

            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                
                "sScrollX": "100%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {
                    // "aiOrder": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
                }, // oColReorder : required for col re-ordering, need to set this as per requirement
                "sPaginationType": "full_numbers", // sPaginationType : required for paging (full paging)
                "bProcessing": true, // bProcessing : required for process bar
                "bStateSave": true, // bStateSave : required for state save for filter and other
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (aData.IsDeleted == true && aData.IsArchived == true)
                        //nRow.className = "GridDeleatedArchivedRow";
                        $(nRow).css('background-color','#B9BCBF');
                    else if (aData.IsDeleted == true)
//                        nRow.className = "GridDeletedRow";
                        $(nRow).css('background-color','#FFCCCC');
                    else if (aData.IsArchived == true)
                        $(nRow).css('background-color','#CCFFCC');
                    //                        nRow.className = "GridArchivedRow";
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    //var myJSONText = JSON.stringify(oData);                    
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'ProjectList' },
                        "async": false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                }, // fnStateSaveParams : used to save the state information User wise
                "fnStateLoad": function (oSettings) {
                    var o;
                    // Send an Ajax request to the server to get the data. Note that
                    // this is a synchronous request.
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                         "type": "POST",
                        data: { ListName: 'ProjectList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            //o = JSON.parse(json); //json;  
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                }, // fnStateLoad : used to load the state information User wise
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/ProjectSpend/GetProjectList")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    //endFor
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    if (oSettings.aaSorting.length != 0)
                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                            //TODO: Barcode Changes
                            //if(oTable.fnGetData().length <= 0 && $("#global_filter").val().length>0){
                            //    $('#cnfBarcodeAddmdl').modal();
                            //}
                            if ($("#global_filter").val().length > 0) {
                                if ($('#myDataTable').dataTable().fnGetData().length <= 0) {
                                    //$('#cnfBarcodeAddmdl').modal();
                                }
                                //                                else if ($('#myDataTable').dataTable().fnGetData().length === 1) {
                                //                                    $('#myDataTable tr').find('#aEditLink').click();
                                //                                    $('#global_filter').val('');
                                //                                    $('#myDataTable').dataTable().fnFilter('', null, null, null);
                                //                                }
                            }

                        }
                    })
                }, // fnServerData : required to pass the custom parameter before fetching data from DB
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                },
                "aoColumns":   ColumnsArr
            }).makeEditable({
                sUpdateURL: '@Url.Content("~/Master/UpdateProjectData")' //"/Company/UpdateData",               
            });
            $('.DTTT_container').css('z-index', '-1');


            /*Functions used for nasted data binding START*/
            $("#myDataTable").on("click", "td.control", function (event) {

                if ($(this).find('img').length <= 0)
                    return;

                var nTr = this.parentNode;
                var i = $.inArray(nTr, anOpen);

                if (i === -1) {
                    $('img', this).attr('src', sImageUrl + "drildown_close.jpg");
                    oTable.fnOpen(nTr, fnFormatDetails(oTable, nTr), '');
                    anOpen.push(nTr);
                }
                else {
                    $('img', this).attr('src', sImageUrl + "drildown_open.jpg");
                    oTable.fnClose(nTr);
                    anOpen.splice(i, 1);
                }
            });



            var QueryStringParam1 = getParameterByName('fromdashboard');
            var QueryStringParam2 = getParameterByName('ProjectID');
            if (QueryStringParam2 != '' && QueryStringParam1 == 'yes') {
                BlankSession();
                ShowEditTab("ProjectEdit/" + QueryStringParam2, "frmProject");
                IsReloadItemList=true;
            }



            function getParameterByName(name) {
                name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
                var regexS = "[\\?&]" + name + "=([^&#]*)";
                var regex = new RegExp(regexS);
                var results = regex.exec(window.location.search);
                if (results == null)
                    return "";
                else
                    return decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            function fnFormatDetails(oTable, nTr) {
                var oData = oTable.fnGetData(nTr);
                ItemName = oData.ItemNumber;
                ItemUniqueID = oData.ID;
                var sOut = '';
                $('#DivLoading').show();
                $.ajax({
                    "url": '@Url.Content("~/ProjectSpend/ProjectItems")',
                    data: { ProjectGUID: oData.GUID.toString(), IsDelted: oData.IsDeleted },
                    "async": false,
                    cache: false,
                    "dataType": "text",
                    "success": function (json) {
                        sOut = json;
                        $('#DivLoading').hide();
                    },
                    error: function (response) {
                    }
                });
                return sOut;
            }
            /*Functions used for nasted data binding END*/

            $('#myDataTable').on('tap click', 'a[id^="aEditLink"]', function () {
                var tr = $(this).parent().parent();
                $("#myDataTable").find("tbody tr").removeClass("row_selected");
                $(tr).addClass('row_selected');

            });

        });        


         /* HISTORY related data deleated and archived START */
        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }
        function HistoryTabClick() {
            GetHistoryData();
        }
        function GetHistoryData() {
            
            HistorySelected = fnGetSelected(oTable);            
            if (HistorySelected != undefined && HistorySelected.length == 1) {            
                //if(SelectedHistoryRecordID != HistorySelected[0].id)
                //{
                    SelectedHistoryRecordID = HistorySelected[0].id;                    
                    $('#DivLoading').show();
                     $("#CTab").hide();
                    $("#CtabCL").show();
                    $('#CtabCL').load('ProjectHistory', function () { $('#DivLoading').hide(); });
                    //$('#tab5').load('ProjectHistory', function () { $('#DivLoading').hide(); });
                //}
            }
            else {
                $('#CtabCL').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                return false;
            }
        }
        /* HISTORY related data deleated and archived END */

         /* Cost Narrow Search Related Code  START */
        function ProjectSpendNarroSearch()
        {
            //oTable.fnFilter($(CostDDLObject).val(),null,null,null);            
            spendPerSpendLimit = $('#ddlTotalSpendLimitInPer').val();
            TotalSpendLimit = $('#ddlTotalSpendLimitInDlr').val();
            TotalSpendRemaining = $('#ddlTotalSpendLimitRemaingInDlr').val();
            TotalItemSpendLimit = $('#TotalItemSpendLimitInDlr').val();
            DoNarrowSearch();
        }
        /* Cost Narrow Search Related Code  END */
    </script>
}
<script type="text/javascript">
    var isTabClick = false;
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true),

    ];
    if ('@IsShowChangeLog.ToString().ToUpper()' == 'TRUE') {
        TabsArry.push(new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true));
    }
    function callbacknew() { window.location.hash = '#new'; ShowNewTab('ProjectCreate', 'frmProject'); }
    function callbackhistory() {
        window.location.hash = '#list';
        if (IsReloadItemList == true) {
            $('#myDataTable').dataTable().fnDraw();
            IsReloadItemList = false;
        }
    } 
    //HistoryTabClick(); }
    function callbackCL() { HistoryTabClick(); }
    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
        }

    }
    $(document).ready(function () {
        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
        //SetTabView();
    });
</script>
<div class="userListingWrapper">
    <h2>@*@ResProjectMaster.PageHeader*@
        @eTurns.DTO.ResProjectMaster.PageHeader</h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'>
        </ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" /></a>
                    </div>
                    @*<input type="button" value="Search" class="searchBtn" />*@
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster)
            @*NARROW SEARCH STARTS HERE*@
            @Html.Partial("NarrowSearchLayout", modelCommon)
            @*NARROW SEARCH STARTS HERE*@
            <div class="userContent">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Expand
                            </th>
                            <th>
                                @ResCommon.ID
                            </th>
                            <th>
                                @ResProjectMaster.ProjectSpendName
                            </th>
                            <th>
                                @ResProjectMaster.Description
                            </th>
                            <th>
                                @ResProjectMaster.DollarLimitAmount
                            </th>
                            <th>
                                @ResProjectMaster.DollarUsedAmount
                            </th>
                            <th>
                                @ResProjectMaster.TrackAllUsageAgainstThis
                            </th>
                            <th>
                                @ResProjectMaster.IsClosed
                            </th>
                            <th>
                                @ResCommon.RoomName
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                            </th>
                            <th>
                                @ResCommon.CreatedOn
                            </th>
                            <th>
                                @ResCommon.UpdatedOn
                            </th>
                            <th>
                                @ResCommon.CreatedBy
                            </th>
                            <th>
                                @ResCommon.UpdatedBy
                            </th>
                            <th>
                                @ResProjectMaster.RemainsSpend
                            </th>
                            @Html.RenderColumnsHeader("ProjectMaster", typeof(eTurns.DTO.ResProjectMaster))
                            @* @Html.RenderColumnsHeader("ProjectMaster")*@
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
                <button id="btnAddNewCompany" value="Ok" style="display: none">
                    @ResCommon.AddNew</button>
                <button id="btnDeleteCompany" value="cancel" style="display: none">
                    Delete Selected</button>
                <div id="processing_message" style="display: none" title="Processing">
                    @ResMessage.RequestProcessMessage
                </div>
            </div>
        </div>
        <div id="CtabCL" class="tabContener">
        </div>
    </div>
</div>
<script type="text/javascript" language="javascript">
    @*var objColumns = {
        '@MvcHtmlString.Create("")': 0,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ID)': 1,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.ProjectSpendName)': 2,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.Description)': 3,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.DollarLimitAmount)': 4,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.DollarUsedAmount)': 5,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.TrackAllUsageAgainstThis)': 6,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.IsClosed)': 7,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.RoomName)': 8,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedOn)': 9,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedOn)': 10,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedBy)': 11,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedBy)': 12,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.UDF1)': 13,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.UDF2)': 14,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.UDF3)': 15,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.UDF4)': 16,
        '@MvcHtmlString.Create(eTurns.DTO.ResProjectMaster.UDF5)': 17
    };*@
    function BlankSession(ID) {
        $.ajax({ url: '@Url.Content("~/QuickList/BlankSession")'
                                    , type: 'POST'
            //, contentType: "application/json"
                                    , success: function (result) {
                                    },
            error: function (msg) {
            }
        });
    }
</script>
<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
