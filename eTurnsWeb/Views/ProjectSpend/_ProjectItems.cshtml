@model IEnumerable<eTurns.DTO.ProjectSpendItemsDTO>
@{
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isDelete = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Delete);
}
<script src="@Url.Content("~/Scripts/DynemicDataTable.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())" type="text/javascript"></script>
<div class="innerGrid" style="background: none repeat scroll 0 0 #F8F8F8; padding: 10px 0 0 28px;width:2000px;">
    <table style="width: 1100px;">
        <tr>
            <td class="BtnBlock" style="float: none; border: 1px solid #F8F8F8; height: 2px;">
                <div class="innerHeadSec">
                    <div style="position: absolute; left: 470px; top: -11px; width: 350px; z-index: 1;">
                        @if (isDelete && (!ViewBag.IsDelted))
                        {
                            <a href="javascript:void(null);" onclick="DeleteProjectItems();" title="@ViewBag.ProjectGUID" id="btnDeleteRecords">
                                <img src="~/Content/images/delete.png" />
                            </a>
                        }
                        @if (isUpdate)
                        {
                            @*                            <input type="submit" value="Save All" id="btnAddAll" class="CreateBtn" onclick="SaveAllClick();return false;"
                                style="margin: 0 5px 0 0; float: right;" />*@
                        }
                        <input type="button" id="InnerGridGobtn" class="go" value=@eTurns.DTO.Resources.ResGridHeader.Go />
                        <input type="text" id="InnerGridPageNumber" class="inputNum" />
                        <span class="label">@eTurns.DTO.Resources.ResGridHeader.GoToPage</span>
                    </div>
                </div>
            </td>
        </tr>
        @*<tr>
                <td class="BtnBlock" style="float: none; border: 1px solid #F8F8F8; height: 2px;">
                    <div class="innerHeadSec">
                        <div style="position: absolute; left: 470px; top: -11px; width: 350px; z-index: 10;">
                            <a href="javascript:void(null);" onclick="DeleteItemLocatino();" title="@ViewBag.ItemID" id="btnDeleteRecords">
                                <img src="~/Content/images/delete.png" />
                            </a>
                            <input type="button" value="Add/Edit Locations" id="btnNewLocations" class="CreateBtn"
                                style="margin: 0 5px 0 0; float: right;" />
                            <input type="button" id="InnerGridGobtn" class="go" value=@eTurns.DTO.Resources.ResGridHeader.Go />
                            <input type="text" id="InnerGridPageNumber" class="inputNum" />
                            <span class="label">@eTurns.DTO.Resources.ResGridHeader.GoToPage</span>
                        </div>
                    </div>
                </td>
                <td style="text-align: right;">
                </td>
            </tr>*@
        <tr>
            <td colspan="2" style="padding-top: 14px; padding-bottom: 35px; border: 1px solid #F8F8F8;">
                <div class="userContentInnerGrid">
                    <table id="ProjectItemsDT@(ViewBag.ProjectGUID)" class="display" style="width: 1100px;">
                        <thead>
                            <tr>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.RowNo
                                </th>
                                <th>
                                    @eTurns.DTO.ResItemMaster.ItemNumber
                                </th>
                                <th>
                                    @eTurns.DTO.ResItemMaster.Description
                                </th>
                                <th>
                                    @eTurns.DTO.ResProjectSpendItems.QuantityLimit
                                </th>
                                <th>
                                    @eTurns.DTO.ResProjectSpendItems.QuantityUsed
                                </th>
                                <th>
                                    @eTurns.DTO.ResProjectSpendItems.DollarLimitAmount
                                </th>
                                <th>
                                    @eTurns.DTO.ResProjectSpendItems.DollarUsedAmount
                                </th>
                                <th>
                                    @eTurns.DTO.ResItemMaster.Cost
                                </th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </td>
        </tr>
    </table>
</div>
<script type="text/javascript">
    $(function (event) {
        var ColumnObject = new Array();
        ColumnObject.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });
        ColumnObject.push({
            mDataProp: "ItemNumber", sClass: "read_only", sWidth: "15%",
            "fnRender": function (obj, val) {
                return obj.aData.ItemNumber + '<input id="hdnGUID" name="hdnGUID" type="hidden" value="' + obj.aData.GUID + '" />';
            }
        });
        ColumnObject.push({ mDataProp: "Description", sClass: "read_only", sWidth: "150px" });
        ColumnObject.push(
        {
            "mDataProp": "QuantityLimit", "sClass": "read_only", sWidth: "150px",
            "fnRender": function (obj, val) {
                if (obj.aData.QuantityLimit != null && obj.aData.QuantityLimit != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.QuantityLimit, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        }
        );
        ColumnObject.push(
        {
            "mDataProp": "QuantityUsed", "sClass": "read_only numericalign", sWidth: "150px",
            "fnRender": function (obj, val) {
                if (obj.aData.QuantityUsed != null && obj.aData.QuantityUsed != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.QuantityUsed, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        }
        );
        ColumnObject.push(
        {
            "mDataProp": "DollarLimitAmount", "sClass": "read_only numericalign", sWidth: "150px",
            "fnRender": function (obj, val) {
                if (obj.aData.DollarLimitAmount != null && obj.aData.DollarLimitAmount != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.DollarLimitAmount, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        }
        );
        ColumnObject.push(
        {
            "mDataProp": "DollarUsedAmount", "sClass": "read_only numericalign", sWidth: "150px",
            "fnRender": function (obj, val) {
                if (obj.aData.DollarUsedAmount != null && obj.aData.DollarUsedAmount != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.DollarUsedAmount, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        }
        );
        ColumnObject.push(
        {
            "mDataProp": "ItemCost", "sClass": "read_only numericalign", sWidth: "100px",
            "fnRender": function (obj, val) {
                if (obj.aData.ItemCost != null && obj.aData.ItemCost != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.ItemCost, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        }
        );
        
        var InnerPSIItemoTable = $('#ProjectItemsDT' + '@ViewBag.ProjectGUID').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": false,
            
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>',
            "oColVis": {},
            "aaSorting": [[2, "asc"]],
            "oColReorder": {
            },
            "sPaginationType": "full_numbers", // sPaginationType : required for paging (full paging)
            "bProcessing": true, // bProcessing : required for process bar
            "bStateSave": true, // bStateSave : required for state save for filter and other
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";
                $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'ProjectItemsList' },
                    "async": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            }, // fnStateSaveParams : used to save the state information User wise
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'ProjectItemsList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        //o = JSON.parse(json); //json;  
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            }, // fnStateLoad : used to load the state information User wise
            "bServerSide": true,
            "sAjaxSource": '@Url.Content("~/ProjectSpend/GetProjectSpendItemsAjax")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                //endFor
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                //if (oSettings.aaSorting.length != 0)
                //    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                //else
                //    aoData.push({ "name": "SortingField", "value": "0" });

                if (oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];

                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                else {
                    aoData.push({ "name": "SortingField", "value": "0" });
                }

                aoData.push({ "name": "ItemID", "value": '@(ViewBag.ProjectGUID)' });
                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#ProjectItemsDT' + '@(ViewBag.ProjectGUID)' + ' td').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        if ($("#global_filter").val() != '') {
                            $('#ProjectItemsDT' + '@(ViewBag.ProjectGUID)' + ' td').highlight($("#global_filter").val());
                        }

                        if ($("#global_filter").val().length > 0) {
                            if ($('#ProjectItemsDT' + '@(ViewBag.ProjectGUID)').dataTable().fnGetData().length <= 0) {
                                //$('#cnfBarcodeAddmdl').modal();
                            }

                        }

                    }
                })
            }, // fnServerData : required to pass the custom parameter before fetching data from DB
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
            },
            "aoColumns": ColumnObject
        });
        // PrepareItemLocationDataTable("ProjectItemsDT", '@ViewBag.ProjectGUID', '@Url.Content("/ProjectSpend/GetProjectSpendItemsAjax")', 'ProjectItemsList', ColumnObject);
    });

    function DeleteProjectItems() {
        DeleteDynemicTableData_New($("#" + "ProjectItemsDT" + '@ViewBag.ProjectGUID').DataTable(), '@Url.Content("~/ProjectSpend/ProjectItemsDelete")');
    }

    function SaveAllClick() {
        var arrItems = new Array();
        var gridid = "#" + "ProjectItemsDT" + '@ViewBag.ProjectGUID';
        $(gridid + ' tbody tr').each(function () {
            var tempQuantityLimit = $(this).find('#txtQuantityLimit');
            //var tempDollarLimitAmount = $(this).find('#txtDollarLimitAmount');
            var txtQty = tempQuantityLimit.val();
            //var txtQty1 = tempDollarLimitAmount.val();

            if (txtQty != 'undefined') {
                if (txtQty.length > 0) {
                    var trimtxtVal = txtQty.replace(/ /g, '');
                    if (trimtxtVal.length > 0) {
                        var tempID = $(this).find('#spnID').text();
                        var tempProjectID = $(this).find('#spnProjectID').text();
                        var itemGUID = $(this).find('#spnItemGUID').text();
                        var tempProjectGUID = $(this).find('#spnProjectGUID').text();
                        var vUDF1 = '';
                        var vUDF2 = '';
                        var vUDF3 = '';
                        var vUDF4 = '';
                        var vUDF5 = '';

                        if ($(this).find('#UDF1') != null) {
                            if ($(this).find('#UDF1').attr("class") == 'selectBox') {
                                vUDF1 = $(this).find('#UDF1 option:selected').text();
                            }
                            else {
                                vUDF1 = $(this).find('#UDF1').val();
                            }
                        }

                        if ($(this).find('#UDF2') != null) {
                            if ($(this).find('#UDF2').attr("class") == 'selectBox') {
                                vUDF2 = $(this).find('#UDF2 option:selected').text();
                            }
                            else {
                                vUDF2 = $(this).find('#UDF2').val();
                            }
                        }

                        if ($(this).find('#UDF3') != null) {
                            if ($(this).find('#UDF3').attr("class") == 'selectBox') {
                                vUDF3 = $(this).find('#UDF3 option:selected').text();
                            }
                            else {
                                vUDF3 = $(this).find('#UDF3').val();
                            }
                        }

                        if ($(this).find('#UDF4') != null) {
                            if ($(this).find('#UDF4').attr("class") == 'selectBox') {
                                vUDF4 = $(this).find('#UDF4 option:selected').text();
                            }
                            else {
                                vUDF4 = $(this).find('#UDF4').val();
                            }
                        }

                        if ($(this).find('#UDF5') != null) {
                            if ($(this).find('#UDF5').attr("class") == 'selectBox') {
                                vUDF5 = $(this).find('#UDF5 option:selected').text();
                            }
                            else {
                                vUDF5 = $(this).find('#UDF5').val();
                            }
                        }

                        var data = { "ID": tempID, "QuantityLimit": txtQty, "DollarLimitAmount": 0, "ItemGUID": itemGUID, "ProjectGUID": tempProjectGUID, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                        arrItems.push(data);
                    }
                }

            }

        });
        if (arrItems.length > 0) {
            $('#DivLoading').show();
            $.ajax({
                url: '@Url.Content("~/ProjectSpend/AddItemToDetailTable")',
                data: { 'para': JSON.stringify(arrItems) },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (response) {
                    $('#DivLoading').hide();
                    if (response.Status == "ok") {
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        oTableItemModel.fnDraw();
                        oTable.fnDraw();
                    }
                    else {
                        $("#spanGlobalMessage").html(response.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    }
                }
            });
        }
        else {
            $("#spanGlobalMessage").html('@ResCommon.NoChanges');
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("#spanGlobalMessage").removeClass('succesIcon errorIcon').addClass('WarningIcon');
        }
    }

    function CallThisFunctionFromModel(msg) {
        if (msg == 'success') {
            //$('.modalCloseImg').click();
            oTableItemModel.fnDraw();
        }
        else if (json.Status == 'fail') {
            alert(json.Message);
            return false;
        }
    }

    function onlyNumeric(event) {
        var charCode = (event.which) ? event.which : event.keyCode;
        if (charCode == 110 || charCode == 144 || charCode == 48 || charCode == 8 || charCode == 9)
            return true;
        if (charCode > 31 && (charCode < 48 || charCode > 57 || code == 86))
            return false;
        return true;
    }


</script>
