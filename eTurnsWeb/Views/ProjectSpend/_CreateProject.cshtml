@model eTurns.DTO.ProjectMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}

    @{  
        bool isUpdate;
        bool isInsert;
        if (ViewBag.ViewOnly == true)
        {
            isUpdate = false;
            isInsert = false;
        }
        else
        {
            isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
            isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        }
    }
    @using (Ajax.BeginForm("ProjectSave", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmProject" }))
    {
        @Html.AntiForgeryToken()
        <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {        
            <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.ReceivedOnWebDate)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    : <span>@(Model.ReceivedOnDate)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        } 
        
        <div class="mainForm">
            <div class="editorForm">
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ProjectSpendName)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ProjectSpendName, new { id = "ProjectSpendName", @class = "text-box", maxlength = 200 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ProjectSpendName)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.ReceivedOn)
                            @Html.HiddenFor(model => model.ReceivedOnWeb)
                            @Html.HiddenFor(model => model.AddedFrom)
                            @if (Model.EditedFrom == null)
                            {
                            @Html.HiddenFor(model => model.EditedFrom)
                            }
                            else
                            {
                                <input data-val="true" data-val-length="Max length is 250." data-val-length-max="250" id="EditedFrom" name="EditedFrom" type="hidden" value="Web">
                            }
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Description)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.Description, new { id = "txtDescription", @class = "text-box", maxlength = 1024 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Description)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.DollarLimitAmount)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.DollarLimitAmount, new { id = "txtDollarLimitAmount", @class = "numericinput", @name = "costdata"})
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DollarLimitAmount)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.DollarUsedAmount)
                        </div>
                        <div class="editor-field">
                            @Html.TextBox("txtDollarUsedAmount", Model.DollarUsedAmount, new { @disabled = "disabled", @class = "text-box", @style = "background-color:silver;" })
                            @Html.HiddenFor(model => model.DollarUsedAmount)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.TrackAllUsageAgainstThis)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.TrackAllUsageAgainstThis, new { id = "chkTrackAllUsageAgainstThis", @class = "check-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.TrackAllUsageAgainstThis)</span>
                        </div>
                    </li>
                    @if (Model.ID > 0)
                    {
                        //if (ViewBag.AllowCloseProjectSpent == "1")
                        //{
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsClosed)
                            </div>
                            <div class="editor-field">
                                @*  @Html.DropDownListFor(model => model.IsClosed, ViewData["list"] as SelectList, new { id = "Closed", @class = "selectBox" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsClosed)</span>*@
                                @Html.CheckBoxFor(model => model.IsClosed, new { @class = "check-box" })
                            </div>
                        </li>    
                        @*}
                        else
                        {
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsClosed)
                            </div>
                            <div class="editor-field">
                                @(Model.IsClosed != true ? "No" : "Yes")
                            </div>
                        </li>
                        }*@
                    }
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                            @if ((isInsert == true && Model.ID == 0) || (isUpdate == true && Model.ID > 0) || Convert.ToString(Session["IsInsert"]) == "True")
                            {                            
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />                            
                            }
                            else //if (isUpdate == false && isInsert == false)
                            {                             
                                <script>
                                    //This is the case when archived or deleted record is being viewed..
                                    disableControls('frmProject');
                                </script>
                            }
                        </div>
                    </li>
                    <li>
                        <div class="BtnBlockform">
                            @if (Model.ID > 0)
                            {
                                if (isUpdate == true || Convert.ToString(Session["IsInsert"]) == "True")
                                {                            
                                    <input type="button" value="@ResCommon.NewItem" id="btnAddNewItemps" class="CreateBtn" style="float: left; margin-left: 20px;" />
                                }
                            }
                        </div>
                    </li>
                </ul>
            </div>
            <div class="editorForm padRightNone">
                <ul>
                    @Html.Partial("UDFLayout", new eTurns.DTO.ResProjectMaster())
                </ul>
            </div>
        </div>
         <div id="divProjectSpendItems">
        </div>
        </div>
    }

       
        <div id="ItemModelPS">
        </div>

@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmProject");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
    });

    $(document).ready(function () {
        window.location.hash = '';
        AllowDeletePopup = false;
        $('form').areYouSure({ 'message': '@ResCommon.MsgLostChangesConfirmation' });
        $("#ItemModelPS").dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '82%',
            height: 710,
            title: '@ResProjectSpendItems.AddItemProjectSpend',
            open: function () {
                $('#DivLoading').show();
                $("#ItemModelPS").load($(this).data("url"));
            },
            close: function () {
                AllowDeletePopup = false;
                CallThisFunctionFromModel('success');
            }
        });
        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });

        $('#btnClose').click(function () {
            $(".ui-dialog-titlebar-close").click();
        });
        
        $('#btnSave').click(function (e) {
            $('#NarroSearchClear').click();
        });
        $('#btnCancel').click(function (e) {
            if ('@Model.IsHistory' != 'True') {
                SwitchTextTab(0, 'ProjectCreate', 'frmProject');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
                //$(".tab5").hide();
            }
            else {
                $(".ui-dialog-titlebar-close").click();

            }
            $('#NarroSearchClear').click();
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        
        if ('@Model.ID' > 0) {
            if ('@Model.IsHistory' != 'True') {
                $('#divProjectSpendItems').empty();
                $('#DivLoading').show();
                $('#divProjectSpendItems').load('@Url.Action("LoadProjectItems", new { ProjectGUID = @Model.GUID })', function () {
                    $('#DivLoading').hide();
                });
                //// need to call below block in case of New Item saved and open POPUP Item ... START                
                if (NeedToOpenItemPopupNow) {
                    NeedToOpenItemPopupNow = false;
                    setTimeout("OpenItemPopup()", 3000);
                    return false;
                }
                //// need to call below block in case of New Item saved and open POPUP Item ... END
                return false;
            }
            else {
                $('#DivLoading').show();
                $('#divProjectSpendItems').load('@Url.Action("LoadProjectItems", new { historyID = @Model.HistoryID })', function () {
                    $('#DivLoading').hide();
                });
            }
        }

        if ('@Model.IsHistory' == 'True') {
            $(':input', '#frmProject')
            .not('#btnClose')
            .attr('disabled', 'disabled');
        }

    });

    $('#btnAddNewItemps').click(function () {
        return OpenItemPopup();
    });

    function OpenItemPopup() {
        if (parseInt('@Model.ID', 10) > 0) {
            ClearVariables();
            var strUrl = '@Url.Action("LoadItemMasterModel")';
            strUrl = strUrl + '?ParentId=' + '@Model.ID';
            strUrl = strUrl + '&ParentGuid=' + '@Model.GUID.ToString()';
            $('#ItemModelPS').data("url", strUrl).dialog('open');
            if ($("input#global_filter").length > 0) {
                $("input#global_filter").focus();
                setTimeout(function () {
                    $("input#global_filter").focus();
                }, 600);
            }
            if ($("input.searchinput").length > 0) {
                $("input.searchinput").focus();
                setTimeout(function () {
                    $("input.searchinput").focus();
                }, 600);

            }
        }

        //return false;
    }


    function onSuccess(response) {
        window.location.hash = '';
        IsRefreshGrid = true;
        IsRefreshGrid1 = true;
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#txtProjectName").val("");
            $("#txtProjectName").focus();

        }
        else if (idValue == 0) {
            $("#txtProjectName").val("");
            $("#txtProjectName").focus();
            //clearControls('frmProject');

            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                //clearControls('frmProject');
                //setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                //CallThisFunctionFromModel('success');
                
                NeedToOpenItemPopupNow = true;
                ShowEditTab("ProjectEdit/" + response.ID, "frmProject");
            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#txtProjectName").val("");
                $("#txtProjectName").focus();
            }
            else {
                if (oTable !== undefined && oTable != null)
                    oTable.fnDraw();

                clearControls('frmProject');
                SwitchTextTab(0, 'ProjectCreate', 'frmProject');

                CallThisFunctionFromModel('success');


            }
        }
    }


    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#txtProjectName").focus();
    }

    _Common.addRequiredSign();
</script>
