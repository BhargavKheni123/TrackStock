@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayDeleteButton = false, DataTableName = "HistoryTable", ColumnSetupFor = "QuoteChangeLog",DisplaySettings = false };
}

<div class="searchWrapper">
    <div class="searchBlock">
        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
        <div class="searchinputB">
            <input type="text" class="searchinput" id="HistoryText" />
            <a href="javascript:void(0);" class="xclose">
                <img src="~/Content/images/x.png" alt="X" id="HistoryClear" />
            </a>
        </div>
    </div>
</div>
@Html.GridTopHeaderForHistory(settings)
<div style="margin: 0 0.4% 1%">
    <table id="HistoryTable" class="display">
        <thead>
            <tr>
                @*<th>
            @eTurns.DTO.Resources.ResCommon.HistoryID
        </th>*@
                <th>
                    @eTurns.DTO.Resources.ResCommon.HistoryAction
                </th>
                @*<th>
            @eTurns.DTO.Resources.ResCommon.ID
        </th>*@
                <th>
                    @eTurns.DTO.ResQuoteMaster.QuoteNumber
                </th>
                <th>
                    From Where
                </th>
                <th>
                    @eTurns.DTO.ResQuoteMaster.ReleaseNumber
                </th>
                <th>
                    @eTurns.DTO.ResQuoteMaster.Comment
                </th>
                <th>
                    @eTurns.DTO.ResQuoteMaster.RequiredDate
                </th>
                <th>
                    @eTurns.DTO.ResQuoteMaster.QuoteStatus
                </th>
                <th>
                    @eTurns.DTO.ResQuoteMaster.NoOfLineItems
                </th>
                <th>
                    @eTurns.DTO.ResQuoteMaster.QuoteCost
                </th>
                <th>
                    @eTurns.DTO.ResQuoteMaster.ChangeQuoteRevisionNo
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.RoomName
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.IsDeleted
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.AddedFrom
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.EditedFrom
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                </th>
                @Html.RenderColumnsHeader("QuoteMaster", typeof(eTurns.DTO.ResQuoteMaster))
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<script type="text/javascript">
    var oHistoryTable;
    var historyDTName = 'HistoryTable';
    $(document).ready(function ()
    {
        oHistoryTable = $('#HistoryTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "250%",
                "sDom": 'R<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    compareHistoryRows(this);
                    if (!isNaN(parseInt(aData.ChangeOrderRevisionNo)) && parseInt(aData.ChangeOrderRevisionNo) > 0) {
                        $(nRow).find('#imgPlusMinus').css('display', '');
                    }

                    if ($(aData.IsDeleted).text() == 'Yes' && $(aData.IsArchived).text() == 'Yes')
                        $(nRow).css('background-color', '#B9BCBF');
                    //                        nRow.className = "GridDeleatedArchivedRow";
                    else if ($(aData.IsDeleted).text() == 'Yes')
                        $(nRow).css('background-color', '#FFCCCC');
                    //                        nRow.className = "GridDeletedRow";
                    else if ($(aData.IsArchived).text() == 'Yes')
                        $(nRow).css('background-color', '#CCFFCC');
                    //                        nRow.className = "GridArchivedRow";

                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Quote/QuoteMasterHistoryListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    if (oSettings.aaSorting.length != 0) {
                        var sortValue = "";
                        for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];

                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "QuoteId", "value": SelectedHistoryRecordID });

                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        cache: false,
                        "data": aoData,
                        "headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        //beforeSend: function () {
                        //    $('#myDataTable').removeHighlight();
                        //    $('.dataTables_scroll').css({ "opacity": 0.2 });
                        //},
                        complete: function (result) {
                        }
                    })
                },
                "fnInitComplete": function () {
                    compareHistoryRows(this);
                },
                "aoColumns": [
                    { "mDataProp": "Action", "sClass": "read_only" },
                    {
                        "mDataProp": "QuoteNumber",
                        "sClass": "read_only NotHide",
                        "sDefaultContent": '',
                        "bSortable": true,
                        "bSearchable": false
                    },
                    { "mDataProp": "WhatWhereAction", "sClass": "read_only" },
                    { "mDataProp": "ReleaseNumber", "sClass": "read_only" },
                    { "mDataProp": "Comment", "sClass": "read_only" },
                    { "mDataProp": "RequiredDate", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.RequiredDateStr; } },
                    { "mDataProp": "QuoteStatusChar", "sClass": "read_only" },
                    { "mDataProp": "NoOfLineItems", "sClass": "read_only numericalign", "fnRender": function (obj, val) { return val; } },
                    {
                        "mDataProp": "QuoteCost", "sClass": "read_only numericalign isCost" //"fnRender": function (obj, val) { return val; }
                    },
                    { "mDataProp": "ChangeQuoteRevisionNo", "sClass": "read_only" },
                    { "mDataProp": "Created", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.CreatedDate; } },
                    { "mDataProp": "CreatedByName", "sClass": "read_only" },
                    { "mDataProp": "LastUpdated", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.UpdatedDate; } },
                    { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                    { "mDataProp": "RoomName", "sClass": "read_only" },
                    { "mDataProp": "IsDeleted", "sClass": "read_only", "fnRender": function (obj, val) { return '<span id="spnIsDeleted">' + GetBoolInFormat(obj, val) + '</span>'; } },
                    { "mDataProp": "AddedFrom", "sClass": "read_only" },
                    { "mDataProp": "EditedFrom", "sClass": "read_only" },
                    {
                        "mDataProp": "ReceivedOn", "sClass": "read_only",
                        "fnRender": function (obj, val) {
                            return obj.aData.ReceivedOnDate;
                        }
                    },
                    {
                        "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
                        "fnRender": function (obj, val) {
                            return obj.aData.ReceivedOnDateWeb;
                        }
                    }
                    @Html.RenderColumnsArray("QuoteMaster")
                ]
            });
        //HIDE PRINT CONTAINER
        $('.DTTT_container').css('z-index', '-1');
        $("#HistoryText").keyup(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
            }
            else {
                fnFilterOrderMasterHistory();
            }
        });

        //Keydown event is required to handle ENTER KEY to work in IE
        $("#HistoryText").keydown(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                fnFilterOrderMasterHistory();
            }
        });

        $("#HistoryClear").click(function () {
            $("#HistoryText").val('');
            fnFilterOrderMasterHistory();
            $("#HistoryText").focus();
            return false;
        });

        var timeoutscheduler;
        $(document).on('propertychange input', "#HistoryText", function () {
            clearTimeout(timeoutscheduler);
            timeoutscheduler = setTimeout(function () {
                if (SearchPattern == 2 || SearchPattern == "2") {
                    fnFilterOrderMasterHistory();
                }
                else {
                    $('#HistoryText').unbind("keypress");
                    $('#HistoryText').keypress(function (event) {
                        var keycode = (event.keyCode ? event.keyCode : event.which);
                        if (keycode == 13) {
                            fnFilterOrderMasterHistory();
                        }
                    });
                    if ($("#HistoryText").val().length == 0) {
                        setTimeout(function () { fnFilterOrderMasterHistory(); }, 200);
                    }
                }
            }, 500);
        });
    });

    function fnFilterOrderMasterHistory() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#HistoryText") != 'undefined' && ($("#HistoryText").val().length > 2 || $("#HistoryText").val().length == 0)) {
            //if (typeof $("#HistoryText") != 'undefined') {
            var searchtext = $("#HistoryText").val().replace(/'/g, "''");

            $('#' + historyDTName + ' td').removeHighlight();

            $('#' + historyDTName).dataTable().fnFilter(
                searchtext,
                null,
                null,
                null
            );

            if (searchtext.length > 0)
                $('#' + historyDTName + ' td').highlight($("#HistoryText").val());
        }
    }

    function ExportHistoryData(ModuleName, Exporttype) {
        var stringIDs = SelectedHistoryRecordID;
        //Get Current Sorting info of table.
        var aa_SortingInfo = $("#myDataTable").dataTable().fnSettings().aaSorting;
        var objCols = $("#myDataTable").dataTable().fnSettings().aoColumns;

        var arrCols = new Array();
        for (var i = 0; i <= objCols.length - 1; i++) {
            arrCols.push(objCols[i].mDataProp);
        }

        var sortValue = "";
        if (aa_SortingInfo.length != 0) {
            for (var k = 0; k <= aa_SortingInfo.length - 1; k++) {
                if (sortValue.length > 0)
                    sortValue += ", "
                sortValue += arrCols[aa_SortingInfo[k][0]] + ' ' + aa_SortingInfo[k][1];
            }
        }

        //Get Current Sorting info of table.
        var shiftselectedarray = readCookieforshift("finalselectedarray");
        if (shiftselectedarray != null) {
            stringIDs = shiftselectedarray;
        }

        if (stringIDs != null && stringIDs > 0) {
            $.ajax({
                "url": '/Export/ExportModuleInfo',
                "data": { ExportModuleName: ModuleName, Ids: stringIDs, Type: Exporttype, SortNameString: sortValue, 'Isdeleted': null, 'TableName': '' },
                "dataType": "json",
                "type": "POST",
                "success": function (response) {
                    if (response.rStatus == "Fail") {

                        alert(response.rMessage);
                    }
                    else
                        window.open("../../Downloads/" + response, "_self");

                },
                "error": function (response) {

                    window.open("../../Downloads/" + response, "_self");

                }
            });
        }
        else {
            alert("Please select record to export.");
        }
    }

</script>