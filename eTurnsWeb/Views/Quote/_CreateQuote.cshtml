@model eTurns.DTO.QuoteMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    string CurrencyDecimalDigits = eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits;
    string priceformate1 = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits.ToString();
    bool AbleToEdit = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Quote, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool AbleToInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Quote, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool IsableToChangeQuote = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Allowanchangequote);
    bool IsableToApprove = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowanquotetobeApproved);
    bool IsableToUnCloseQuote = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowanquotetobeUnclose);
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);
    bool IsReportView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.View);
    //bool IsReportView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.View);
    bool HasItemCreateRights = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    int? PriseSelectionOption = 2;
    string TotalCost = "0.00";
    string TotalPrice = "0.00";
    string CurrencySymbol = "";
    if (eTurnsWeb.Helper.SessionHelper.CurrencySymbol != null
        && !string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencySymbol))
    {
        CurrencySymbol = eTurnsWeb.Helper.SessionHelper.CurrencySymbol;
    }

    string callFor = ViewBag.CallFor ?? string.Empty;
}

<script type="text/javascript" src="@Url.Content("~/Scripts/SiteScripts.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>

@using (Ajax.BeginForm("SaveQuote", "Quote", new AjaxOptions { HttpMethod = "Post", OnBegin = "onQuoteBegin", OnSuccess = "onQuoteSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onQuoteFailure" }, new { @id = "frmQuote" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" value="QuoteLineItemList" id="hdnListName" />
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.CreatedDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.LastUpdated)
                        </label>
                        : <span>@(Model.UpdatedDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                    @*<li style="border: none; text-align: right; display: none;">
                            <a onclick="callPrintTransaction('','OrderMasterList',false,@Model.ID,'','');" href="javascript:void(null);">
                                <img alt="" src="@Url.Content("~/Content/images/print.png")" title="Print Purchase Order" />
                            </a>
                        </li>*@
                    @if (IsReportView && !Model.IsDeleted && (Model.IsArchived ?? false) == false)
                    {
                        <li style="border: none; text-align: right;">
                            <a href="javascript:void(null);" id="aRptSingle">
                                <img alt="" src="@Url.Content("~/Content/images/print.png")" title="@ResQuoteMaster.PrintQuote" />
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContent" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px; background: none">
                <div id="CollapsedContent" class="edtForm">
                    <ul>
                        <li id="liQuoteNumber" style="border-right: none; padding: 0px">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.QuoteNumber) <em style="color: Red">*</em>
                            </label>
                            @if (Model.QuoteStatus == (int)QuoteStatus.UnSubmitted)
                            {
                                @Html.TextBoxFor(model => model.QuoteNumber, new { id = "txtQuoteNumber", @class = "text-box", @style = "background:white", maxlength = 22 })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.QuoteNumber, new { id = "txtQuoteNumber", @class = "text-box", @style = "background:white", maxlength = 22, @readonly = "readonly" })
                            }
                            <br />
                            @Html.ValidationMessageFor(model => model.QuoteNumber)
                            @Html.HiddenFor(model => model.QuoteNumber_ForSorting)
                            <br />
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequiredDate) <em style="color: Red">*</em>
                            </label>
                            @Html.TextBoxFor(model => model.RequiredDateStr, new { @class = "text-box", id = "txtRequiredDate", @readonly = "readonly", @style = "background:white", maxlength = 128 })
                            @Html.ValidationMessageFor(model => model.RequiredDateStr)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.QuoteStatus)
                            </label>
                            @Html.DropDownListFor(model => model.QuoteStatus, new SelectList(ViewBag.QuoteStatusList, "value", "Text", Model.QuoteStatus), new { id = "ddlQuoteStatus", @class = "selectBox", @style = "width:120px" })
                            @Html.ValidationMessageFor(model => model.QuoteStatus)
                        </li>
                        <li id="liSupplierIds" style="border-right: none;">
                            <label for="label" style="width: 70px; float: left; padding: 1.3% 0;">
                                @eTurns.DTO.ResQuoteMaster.Supplier
                            </label>
                            @*<div class="editor-label">
                                    @eTurns.DTO.ResQuoteMaster.Supplier
                                </div>*@
                            <div class="editor-field rightEdit" style="width:175px;">
                                <select id="ddlSupplier" multiple="multiple" width="150px" name="example-basic" size="5"
                                        class="text-box selectBox"></select>
                                @Html.HiddenFor(model => model.QuoteSupplierIdsCSV, new { id = "QuoteSupplierIdsCSV" })
                            </div>
                        </li>
                        <li id="liRoomIdsList" style="border-right: none;width:195px;">
                            @*<label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                    Selected Supplier
                                </label>*@
                            <div class="editor-label rightEdit neweditorlabelrm">
                                <label id="lblselectedSupplier">
                                </label>
                            </div>
                        </li>
                        <li style="border-right: none; padding: 0px">
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.LastUpdated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.IsRecordNotEditable)
                            @Html.HiddenFor(model => model.IsOnlyStatusUpdate)
                            @Html.HiddenFor(model => model.QuoteStatusChar)
                            @Html.HiddenFor(model => model.RequiredDate)
                            @Html.HiddenFor(model => model.IsChangeQuoteClick, new { @id = "hdnIsChangeQuoteclick" })
                            <input type="hidden" name="hdnIsEDISentOnEditQuoteLineItems" id="hdnIsEDISentOnEditQuoteLineItems" value="" />
                            <input type="hidden" name="hdnIsEditQuoteLineItems" id="hdnIsEditQuoteLineItems" value="" />
                            <input type="hidden" name="hdnIsSupplierApprove" id="hdnIsSupplierApprove" value="" />
                            <input type="hidden" name="hdnPrevQuoteStatus" id="hdnPrevQuoteStatus" value="" />
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div id="ExpandedContent" style="display: none">
            <ul>
                <li style="border: none">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Comment)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.Comment, new { @class = "text-box", maxlength = 1024 })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Comment)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ReleaseNumber)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.ReleaseNumber, new { id = "txtReleaseNumber", @class = "text-box", @style = "background:white", maxlength = 255, @readonly = "readonly" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ReleaseNumber)</span>
                                </div>
                            </li>

                            @if (Model.ChangeQuoteRevisionNo.GetValueOrDefault(0) > 0)
                            {
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.ChangeQuoteRevisionNo)
                                    </div>
                                    <div class="editor-field">
                                        @Html.TextBoxFor(model => model.ChangeQuoteRevisionNo, new { @class = "text-box", @readonly = "readonly", @style = "display:block" })
                                        @Html.ValidationMessageFor(model => model.CustomerGUID)
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="editorForm padRightNone divClsOrderRigthPan">
                        <ul>
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResQuoteMaster())
                        </ul>
                        @Html.Hidden("hdnCopyUDFValuesTemp", "", new { @id = "hdnCopyUDFValuesTemp" })
                    </div>
                </li>
            </ul>
        </div>
        <div class="editorForm" style="width: 98%">
            <ul>
                <li>
                    <div class="editor-label" style="width: 2%">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnQuoteCancel" class="CreateBtn" />
                        @if (!Model.IsOnlyStatusUpdate && (Model.QuoteStatus >= (int)QuoteStatus.Approved && Model.QuoteStatus < (int)QuoteStatus.Closed)
&& AbleToEdit)
                        {
                            <input type="button" value="@ResCommon.Save" id="btnUpdateComment" class="CreateBtn" />
                        }
                        @if ((!Model.IsRecordNotEditable || Model.IsOnlyStatusUpdate) && ((Model.ID < 1 && AbleToInsert)
|| (Model.ID > 0 && AbleToEdit) || (AbleToInsert && AbleToEdit)))
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnQuoteSave" class="CreateBtn" />
                            if (Model.IsRecordNotEditable && Model.IsOnlyStatusUpdate)
                            {
                                <script type="text/javascript">
                                    disableControls('frmQuote');
                                    $('#ddlQuoteStatus, #btnQuoteSave, #btnQuoteCancel,#aRptSingle').removeAttr('disabled');
                                </script>
                            }
                        }
                        else if (Model.QuoteStatus == (int)QuoteStatus.Closed && IsableToUnCloseQuote)
                        {
                            <input type="button" value="@ResQuoteMaster.UncloseQuote" id="btnUncloseQuoteOnlyInEditPage" class="CreateBtn" />
                            <input type="button" value="@eTurns.DTO.ResQuoteMaster.EditQuoteLineItems" id="btnUncloseQuote" class="CreateBtn" style="display:none" />



                            <script type="text/javascript">
                                disableControls('frmQuote');
                                $('#btnQuoteCancel,#aRptSingle').removeAttr('disabled');
                            </script>
                        }
                        else
                        {
                            <script type="text/javascript">
                                disableControls('frmQuote');
                                $('#btnQuoteCancel,#aRptSingle').removeAttr('disabled');
                            </script>
                        }
                        @if (Model.QuoteStatus != (int)QuoteStatus.UnSubmitted && Model.QuoteStatus != (int)QuoteStatus.Closed)
                        {
                            <script type="text/javascript">
                                disableControls('frmQuote');
                                $('#ddlQuoteStatus,#btnQuoteSave,#btnQuoteCancel,#aRptSingle').removeAttr('disabled');

                            </script>
                        }
                    </div>
                </li>
                @if (Model.ID > 0)
                {
                    <li>
                        <div class="BtnBlockform">
                            @if (!Model.IsRecordNotEditable && (Model.QuoteStatus <= (int)QuoteStatus.Submitted || Model.QuoteStatus == (int)QuoteStatus.Transmitted))
                            {
                                <input type="button" value="@eTurns.DTO.ResQuoteMaster.AddNewItemButton" id="btnAddNewItem" class="CreateBtn" style="float: left;
                                    margin-left: 20px;" />
                                @*
                                    <div style="padding-top: 2.7px;">
                                        @(Html.Partial("SupplierCatalog", new SupplierCatalogItemDTO() { SourcePageName = "OrderMaster", OpenPopup = true, ButtonText = "Add from Catalog", OrderGUID = Model.GUID, OrderSupplier = Model.SupplierName }))
                                    </div>
                                *@
                            }
                            @if (Model.QuoteStatus == (int)QuoteStatus.Approved)
                            {
                                <input type="button" value="Transmit" id="btnTransmit" class="CreateBtn" style="display: none;" />
                            }
                        </div>
                    </li>
                }
            </ul>
        </div>
        <div class="infoBlock" style="margin-bottom: 10px; margin-top: 10px;">
            <ul>
                <li style="width: auto;">
                    <label for="RoomName">
                        <label>
                            @ResQuoteMaster.NooflineItems
                        </label>
                    </label>
                    : <span id="spnNoOfItems">@Model.NoOfLineItems.GetValueOrDefault(0)</span>
                </li>
                <li style="border: none; width: auto; display:none">
                    <label for="RoomName">
                        <label>
                            @eTurns.DTO.ResQuoteMaster.QuoteCost
                        </label>
                    </label>
                    : <span id="spnTotalCost">@CurrencySymbol @Model.QuoteCost.GetValueOrDefault(0).ToString(priceformate1)</span>
                </li>
                <li style="border: none; width: auto;" id="liQuoteCostInfo">
                    <label for="RoomName">
                        <label id="lblQuoteTotalSellPrice">@eTurns.DTO.ResQuoteMaster.TotalSellPrice</label>
                        <label id="lblQuoteTotalCost">@eTurns.DTO.ResQuoteMaster.TotalCost</label>
                    </label>
                    : <span id="spnTotalQuoteCost">'@CurrencySymbol' + ' ' + @Model.QuoteCost.GetValueOrDefault(0).ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture)</span>
                    <span id="spnTotalQuotePrice">'@CurrencySymbol' + ' ' +  @Model.QuotePrice.GetValueOrDefault(0).ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture)</span>
                </li>
            </ul>
        </div>
    </div>
    @*<div id="divQuoteLineItems">
        </div>*@
}
<div id="divQuoteLineItems">
</div>
<div class="dialog" id="OrdApprdInfoDialog" style="float: left; display: none; width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="Message" style="float: left; text-align: left; padding-left: 10px;">
            <b>@ResQuoteMaster.ConfirmApprQuantiyMassage </b>
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="ModelYesClick()">
                <img src="~/Content/images/yes.png" alt="@ResCommon.Yes" />@ResCommon.Yes
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="ModelCancelClick()">
                <img src="~/Content/images/no.png" alt="@ResCommon.Cancel" />@ResCommon.Cancel
            </a>
        </p>
    </div>
</div>
<div class="dialog" id="divOrdCancelUnsaveItemInfoDialog" style="float: left; display: none;
    width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="Message" style="float: left; text-align: left; padding-left: 10px;">
            @*<b>@ResOrder.ConfirmApprQuantiyMassage </b>*@ <b>
                '@ResQuoteMaster.cnfrmNewlyAddedItems'
            </b>
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="CancelUnsaveModelYesClick();">
                <img src="~/Content/images/yes.png" alt="@ResMessage.ConfirmYes" />@ResMessage.ConfirmYes
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="CancelUnsaveModelCancelClick()">
                <img src="~/Content/images/no.png" alt="@ResCommon.Cancel" />@ResMessage.ConfirmNo
            </a>
        </p>
    </div>
</div>
<div id="ItemModel">
</div>
<div id="divAddNewItemDailog">
</div>
<div id="dvCreteQuoteToOrder" style="width: 95%"></div>
<div class="dialog" id="divUnCloseQuoteToEdit" style="float: left; display: none;
    width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="UCOLIE" style="float: left; text-align: left; padding-left: 10px;">
            @*<b>a.</b>&nbsp;All ordered quantities will be unordered*@
            <b>a.</b>&nbsp;All items may be edited or deleted
            <br />
            <b>b.</b>&nbsp;New Items may be added to the quote
            <br />
            <b>c.</b>&nbsp;The quote will need to be approved once submitted
            @*<br />
                <b>e.</b>&nbsp;The quote will be re-transmitted to the supplier once approved*@
            <br />
            <b>d.</b>&nbsp;Quotess Created from EDI are not to be unclosed
            <br />
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="UnCloseQuoteToEdit()">
                <img src="~/Content/images/yes.png" alt="@ResCommon.Ok" />@ResCommon.Ok
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="UnCloseQuoteCancel()">
                <img src="~/Content/images/no.png" alt="@ResCommon.Cancel" />@ResCommon.Cancel
            </a>
        </p>
    </div>
</div>
<div class="dialog" id="CloseQuoteDialog" style="display: none;">
    <div class="inner">
        <p class="text">
            Are you sure you want to close this quote?
        </p>
        <a href="JavaScript:void(0)" id="bntCloseConfirmYes" class="yes yesornooryes">
            <img src="~/Content/images/yes.png" alt="@ResMessage.ConfirmYes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no" onclick="CloseModel();">
            <img src="~/Content/images/no.png" alt="@ResMessage.ConfirmNo" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div class="dialog" id="CloseQuoteLineItemDialog" style="display: none;">
    <div class="inner">
        <p class="text">
            Are you sure you want to close selected quote's item?
        </p>
        <a href="JavaScript:void(0)" id="bntCloseQuoteLineItemConfirmYes" class="yes yesornooryes">
            <img src="~/Content/images/yes.png" alt="@ResMessage.ConfirmYes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no" onclick="CloseModel();">
            <img src="~/Content/images/no.png" alt="@ResMessage.ConfirmNo" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div class="dialog" id="basic-modal-content-OrderAction" style="display: none;">
    <div class="inner">
        <p class="text" id="ptextcart">
        </p>
        <a href="JavaScript:void{}" id="btnModelYesCartAction" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="#" class="no" onclick="closeModal()">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div class="dialog" id="QuoteOrderedInfoDialog" style="display: none; width: 470px;">
    <div class="inner" style="width: 470px;">
        <p class="text" id="QuoteOrderedMSG" style="text-align: left; padding-left: 10px;overflow:auto;max-height:400px;">
        </p>
        <p class="text" style="text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="no" onclick="closeFromOk()">
                <img src="~/Content/images/yes.png" alt="@ResCommon.Ok" />@ResCommon.Ok
            </a>
        </p>
    </div>
</div>
@Html.Partial("_RequiredMessages")

<script type="text/javascript">
    var QuoteID = '@Model.ID';
    var QuoteGUID = '@(Model.GUID.ToString())';
    var QuoteStatus = '@Model.QuoteStatus';
    var existingSupplierIds = '@Model.QuoteSupplierIdsCSV';
    var URL_Listget = '';
    var _createQuote = (function () {

        var self = {};

        self.isFormValid = function () {
            $.validator.unobtrusive.parse("#frmQuote");
            return $("#frmQuote").valid();
        }

        self.expandCollapseForm = function (isExpand) {
            if (isExpand) {
                if ($('#ExpandedContent').css('display') == 'none') {
                    $('#ExpandedContent').css('display', '');
                    $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
                }
            }
            else {
                if ($('#ExpandedContent').css('display') != 'none') {
                    $('#ExpandedContent').css('display', 'none');
                    $('#ancHideShowContent img').attr('src', '/Content/images/drildown_open.jpg');
                }
            }
        }

        return self;

    })();

    _Common.addRequiredSign();

    jQuery(function () {
        $("#dvCreteQuoteToOrder").dialog({
            autoOpen: false,
            modal: true,
            width: 1200,
            minHeight: 'auto',
            maxHeight:500,
            title: '@eTurns.DTO.ResCartItem.PageTitleQuoteToOrder',
            draggable: false,
            resizable: false,
            open: function () {
                AllowDeletePopup = false;
            },
            close: function () {
                AllowDeletePopup = true;
            }
        });
    });

    $(document).ready(function () {
        window.location.hash = '';
        $("#txtRequiredDate").datepicker({
            dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat', showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            clearText: 'Clear', onClose: function () { $("#txtRequiredDate").datepicker("hide"); this.blur(); }
        });
        bindSupplierList(existingSupplierIds);
        isDirtyForm = false;
        $('form').areYouSure();
        $('#spnTotalQuoteCost').html('@CurrencySymbol' + ' ' + '@TotalCost');
        $('#spnTotalQuotePrice').html('@CurrencySymbol' + ' ' +  '@TotalPrice');
        if ('@PriseSelectionOption.ToString()' == '1') {
            $('#lblQuoteTotalSellPrice').show();
            $('#spnTotalQuotePrice').show();

            $('#lblQuoteTotalCost').hide();
            $('#spnTotalQuoteCost').hide();
        }
        else if ('@PriseSelectionOption.ToString()' == '2') {
            $('#lblQuoteTotalSellPrice').hide();
            $('#spnTotalQuotePrice').hide();

            $('#lblQuoteTotalCost').show();
            $('#spnTotalQuoteCost').show();
        }

        if ($('#hdnIsChangeQuoteclick').val() == "True" && parseInt($('#ddlQuoteStatus').val()) == '@((int)QuoteStatus.Transmitted)') {
            $('#btnTransmit').css('display', 'none');
        }
        else if (parseInt($('#ddlQuoteStatus').val()) > 2) {
            $(':input', '#frmQuote').not('#btnQuoteCancel, #btnTransmit, #Comment,#txtPackslipNumber,#ShippingTrackNumber').attr('disabled', 'disabled');
            $(':button', '#frmQuote').not('#btnQuoteCancel, #btnTransmit, .ui-multiselect').css('display', 'none');
            $(':submit', '#frmQuote').css('display', 'none');
            $('.addNewLink', '#frmQuote').css('display', 'none');
        }

        if (parseInt($('#ddlQuoteStatus').val()) == '@((int)QuoteStatus.Approved)' && '@(Model.IsOnlyStatusUpdate)' == "True") {
            $(':submit', '#frmQuote').css('display', '');
            $('#ddlQuoteStatus,#btnQuoteSave,#aRptSingle').removeAttr('disabled');
        }

        if (parseInt($('#ddlQuoteStatus').val()) == '@((int)QuoteStatus.Closed)' && '@(IsableToUnCloseQuote)' == 'True') {
            $('#btnUncloseQuote,#btnUncloseQuoteOnlyInEditPage').css('display', '');
            $('#btnUncloseQuote,#btnUncloseQuoteOnlyInEditPage,#aRptSingle').removeAttr('disabled');
        }
        else {
            $('#btnUncloseQuote,#btnUncloseQuoteOnlyInEditPage').css('display', 'none');
            $('#btnUncloseQuote,#btnUncloseQuoteOnlyInEditPage').attr('disabled', 'disabled');

        }

        $("form").submit(function (e) {
            $.validator.unobtrusive.parse("#frmQuote");
            if ($(this).valid()) {
                $(':input', '#frmQuote').removeAttr('disabled');
                rememberUDFValues($("#hdnPageName").val(), parseInt(QuoteID, 10));
            }
            else {
                $('#DivLoading').hide();
            }
            e.preventDefault();

        });
        var itemModeldialogTitle = '@eTurns.DTO.ResQuoteMaster.ItemModelHeader';

        //$(window).keydown(function (event)
        //{
        //    if (event.keyCode == 13)
        //    {
        //        event.preventDefault();
        //        return false;
        //    }
        // });

        $("#ItemModel").dialog({
            autoOpen: false, modal: true, draggable: true, resizable: true, width: '82%', height: 710, title: itemModeldialogTitle,
            open: function () {
                $('#DivLoading').show();
                var strUrl = $(this).data("url");
                var strupc = $(this).data("strupc");
                $.get(strUrl, function (data) {
                    $("#ItemModel").html(data);
                    @*if (strupc == undefined || strupc == '') {
                        $.get('@Url.Action("GetSupplierCatalog", "SupplierCatalog")?PageName=OrderMaster&Openpopup=true&Buttonname=' + escape("Add from Catalog") + '&OrderGUID=' + QuoteGUID, function (data) {
                            $("#ItemModel").prepend(data);
                            if ('@(HasItemCreateRights)' == 'True') {
                                $("#ItemModel").prepend('&nbsp;&nbsp;<input type="button" value="Add New Item" id="btnCreateItem" class="btnGeneral"style="margin-top: 1.3% !important; " onclick="OpenAddNewItemPopup(this);" />')
                            }
                        });
                    }*@
                    //else {
                        if ($("#ItemModel_filter") != undefined) {
                            $("#ItemModel_filter").val(strupc);
                            fnFilterGlobalIM();
                        }
                    //}
                });
            },
            close: function () {
                $("#ItemModel").empty();
                CallThisFunctionFromModel('success');
                SetUDFValuesToUDFControl();
            }
        });


        $("#divAddNewItemDailog").dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '82%',
            height: 710,
            title: '@ResQuoteMaster.TitleCreateNewItem',
            open: function () {
                $('#DivLoading').show();

                $("#divAddNewItemDailog").load('@Url.Action("ItemCreate", "Inventory")?SourcePageName=' + $(this).data("data").SourcePageName + '&OrderGUID=' + $(this).data("data").QuoteGUID + '&OrderSupplier=', function () {
                    $('#DivLoading').hide();
                    $("#divAddNewItemDailog").dialog("option", "width", "82%");
                    $("#divAddNewItemDailog").dialog("option", "height", 710);
                    $("#divAddNewItemDailog").dialog('option', 'position', 'center');
                });
            },
            close: function () {
                $("#divAddNewItemDailog").html("");
                OpenItemPopup();
            }
        });
        if (parseInt(QuoteID, 10) <= 0) {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent').css('display', 'none');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent').css('display', '');
            $('#DivLoading').show();
            CallThisFunctionFromModel('success', true);

            //// need to call below block in case of New Item saved and open POPUP Item ... START
            if (NeedToOpenItemPopupNow) {
                NeedToOpenItemPopupNow = false;
                setTimeout("OpenItemPopup()", 3000);
                return false;
            }
            //// need to call below block in case of New Item saved and open POPUP Item ... END
        }


        //if (QuoteID <= 0 && $('#txtOrderNumber').val().length <= 0) {
        if (QuoteID <= 0) {
            $('#txtQuoteNumber').removeAttr('readonly');
            //$(this).find('#ddlSupplier').focus();

        }
        if (QuoteStatus == '@((int)QuoteStatus.Transmitted)') {
            $('#btnQuoteSave').val('Change Quote');
            $('#btnUpdateComment').css('display', 'none');
        }

        if ('@AbleToEdit' == "True") {
            if ('@Model.QuoteStatus' != '@((int)QuoteStatus.UnSubmitted)' && '@Model.QuoteStatus' != '@((int)QuoteStatus.Submitted)' && '@Model.QuoteStatus' != '@((int)QuoteStatus.Closed)') {
                if ($('#btnQuoteSave').css('display') == 'none' && $('#btnQuoteSave').val() == 'Change Quote') {
                    $('#btnUpdateComment').css('display', 'block');
                }

                $('#Comment,#btnUpdateComment, #btnQuoteCancel,#aRptSingle').removeAttr('disabled');
            }
            var QuoteStatusInt = (parseInt('@((int)Model.QuoteStatus)') || 0);
            var approvedStatusInt = (parseInt('@((int)QuoteStatus.Approved)') || 0);
            var closedStatusInt = (parseInt('@((int)QuoteStatus.Closed)') || 0);
            var saveOrderBtn = $('#btnQuoteSave');
            if ((typeof (saveOrderBtn) == "undefined" || saveOrderBtn == null || typeof (saveOrderBtn.css('display')) == "undefined" || saveOrderBtn.css('display') == 'none')
                    && '@Model.IsOnlyStatusUpdate' != "True" && (QuoteStatusInt >= approvedStatusInt && QuoteStatusInt < closedStatusInt))
            {
                $('#btnUpdateComment').css('display', 'block');
                $('#Comment,#btnUpdateComment').removeAttr('disabled');
            }
        }

    });

    $(document).off('click', 'input#btnQuoteSave');
    $(document).on("click", 'input#btnQuoteSave', function (e) {
        _createQuote.expandCollapseForm(true);
        //ExpandOrderNarrowSearch();
        SaveQuoteDetail(e);
    });
    $('div.infoBlock').off('click', '#aRptSingle');
    $('div.infoBlock').on('click', '#aRptSingle', function () {
        ReportExecutionSingleRecord('QuoteMasterList', '@Model.GUID');
    });
    function bindSupplierList(objExistSelected) {

        var objList = '';
        var objExistselect = objExistSelected.split(',');

        $.ajax({
            type: "POST",
            url: "/Quote/GetSupplierList",
            data: JSON.stringify({ 'SelectedSupplierIds': objExistSelected, 'Id': QuoteID }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (message) {
                objList = message.SupplierList;
                //objSelect = message.Selected;
            },
            error: function (response) {

            }
        });

        $("#ddlSupplier > option").remove();
        $("#ddlSupplier").multiselect("refresh");
        var s = '';
        for (var i = 0; i < objList.length; i++) {
            s += '<option value=' + objList[i].key + '  >' + objList[i].value + '</option>';
        }

        $("#ddlSupplier").append(s);
        $("#ddlSupplier").multiselect({
            checkAllText: '@ResNarrowSearch.Check',
            uncheckAllText: '@ResNarrowSearch.UnCheck',
            noneSelectedText: '@ResNarrowSearch.Supplier', selectedList: 5,
            selectedText: function (numChecked, numTotal, checkedItems) {
                return '@ResNarrowSearch.Supplier' + ' ' + numChecked + ' ' + '@ResNarrowSearch.selected';
            }
        }).unbind("multiselectclick multiselectcheckall multiselectuncheckall").bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
            if (ui.checked) {
                $("#ddlSupplier").multiselect("widget").find(":checkbox[value='" + ui.value + "']").attr("checked", "checked");
                $("#ddlSupplier option[value='" + ui.value + "']").attr("selected", 1);
                SetLabelText('lblselectedSupplier', 'ddlSupplier');
                var SelectedRoomID = getSelectedID('ddlSupplier');
                $("body").find("input#QuoteSupplierIdsCSV").val(SelectedRoomID);
                //BindSupplierPartNoDDL();
            }
            else {
                var SelectedRoomID = getSelectedID('ddlSupplier');
                $("body").find("input#QuoteSupplierIdsCSV").val(SelectedRoomID);
                SetLabelText('lblselectedSupplier', 'ddlSupplier');
                //BindSupplierPartNoDDL();
            }

            var selectedValues = $.map($("#ddlSupplier").multiselect("getChecked"), function (input) {
                return input.value;
            });

            if (selectedValues.length == 1) {
                $.ajax({
                    "url": '@Url.Action("getQuoteNumberForSupplier", "Replenish")',
                    "data": { SupplierID: selectedValues[0] },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    success: function (response) {
                        $("#txtQuoteNumber").val(response.DDData.QuoteNumber);
                    }
                });
            } else {
                $("#txtQuoteNumber").val('');
            }
       
        }).multiselectfilter({ label: '@ResNarrowSearch.Filter', placeholder: '@ResNarrowSearch.Enterkeywords' });
        $("#ddlSupplier").multiselect("refresh");

        for (var i = 0; i < objExistselect.length; i++) {

            for (var j = 0; j < objList.length; j++) {

                if (objList[j].key == objExistselect[i]) {
                    $("#ddlSupplier").multiselect("widget").find(":checkbox[value='" + objList[j].key + "']").attr("checked", "checked");
                    $("#ddlSupplier option[value='" + objList[j].key + "']").attr("selected", 1);
                    $("#ddlSupplier").multiselect("refresh");
                }
            }
        }
        SetLabelText('lblselectedSupplier', 'ddlSupplier');
        var SelectedRoomID = getSelectedID('ddlSupplier');
        $("body").find("input#QuoteSupplierIdsCSV").val(SelectedRoomID);
        //$('form#frmQuote').removeClass('dirty');
    }

    function getSelectedID(objID) {
        var selectedlist = '';
        var selectedrecs = $("#" + objID).multiselect("getChecked");
        if (selectedrecs.length > 0) {
            $(selectedrecs).each(function (indx, obj) {
                selectedlist += obj.value + ',';
            });
        }

        return selectedlist;
    }

    function SetLabelText(objlblID, objddlID) {

        var selectedlist = '';
        $('.ui-multiselect-menu [type="checkbox"][id^="ui-multiselect-' + objddlID + '-option"]').each(function () {
            if ($(this).attr('checked') == 'checked') {
                if (selectedlist.length > 0)
                    selectedlist += ',';
                selectedlist += $(this).parent().find('span').text();
            }
        });
        $('#' + objlblID + '').text(selectedlist);

        if ($('#lblselectedSupplier').length > 0) {
            var txtLength = $('#lblselectedSupplier').text().length;
            if (txtLength > 100) {
                $('.neweditorlabelrm').height("150px");
                $('.neweditorlabelrm').css("overflow", "auto");

            }
            else {
            }
        }

    }

    function CheckBeforeSave() {
        var SelectedSupplierID = getSelectedID('ddlSupplier');
        //$("body").find("input#RoomIds").val(SelectedRoomID);
        $("body").find("input#QuoteSupplierIdsCSV").val(SelectedSupplierID);

        if (SelectedSupplierID == null || typeof (SelectedSupplierID) == "undefined" || SelectedSupplierID.length < 1) {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#spanGlobalMessage").html('@ResQuoteMaster.ReqOneSupplier');
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime); //$("div#target").delay(2000).fadeOut(200);
            return false;
        }

        return true;
    }

    function SaveQuoteDetail(e, isFromEditQuoteLineItems) {
        $('#DivLoading').show();
        var _vIsDeleted = false;
        if (typeof ($('#IsDeletedRecordsQuoteLn')) != undefined) {
            _vIsDeleted = $('#IsDeletedRecordsQuoteLn').is(':checked');

            if (_vIsDeleted == true) {
                $('#DivLoading').hide();
                $("#spanGlobalMessage").html("@eTurns.DTO.Resources.ResMessage.RemoveDeletedItemFlag");
                showNotificationDialog();
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                isError = true;
                e.preventDefault();
                return false;
            }
        }

        $("#hdnPrevQuoteStatus").val($('#ddlQuoteStatus').val());

        if ($('#ddlQuoteStatus').val() === '@((int)QuoteStatus.Submitted)' && '@IsableToApprove' == "True")
        {
            $("#hdnPrevQuoteStatus").val($('#ddlQuoteStatus').val());
            $('#ddlQuoteStatus').val('@((int)QuoteStatus.Approved)');
        }

        var isError = false;

        if ('@Model.ID' > 0 && QuoteID > 0) {
            var LineItems = $('#QuoteLineItem' + QuoteID).dataTable().fnGetNodes();
            for (var i = 0; i < LineItems.length; i++) {

                var qty = $(LineItems[i]).find('#txtQty').val();

                if (isNaN(parseFloat(qty)) || parseFloat(qty) <= 0) {
                    $('#DivLoading').hide();
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    $("#spanGlobalMessage").html('@ResQuoteMaster.msgRequestedQuantity');
                    showNotificationDialog();
                    //alert('@ResQuoteMaster.msgRequestedQuantity');
                    $(LineItems[i]).find('#txtQty').focus();
                    isError = true;
                    return false;
                }

                var isEnforceDefultOrdQty = $(LineItems[i]).find('#hdnIsEnforceDefultOrdQty').val();
                if (isEnforceDefultOrdQty == 'True') {
                    var apprQty = $(LineItems[i]).find('#txtApprQty').val();
                    var itemNumber = $(LineItems[i]).find('#hdnItemNumber').val();
                    var IsAllowQuoteCostuom = $(LineItems[i]).find('#hdnIsAllowQuoteCostuom').val();
                    var QuoteUOMValue = $(LineItems[i]).find('#hdnQuoteUOMValue').val();
                    var defultOrderQty = $(LineItems[i]).find('#hdnDefultQuoteQty').val();
                    var modulo = 0;

                    if (!isNaN(parseFloat(defultOrderQty)) && parseFloat(defultOrderQty) > 0) {
                        var alertMsg = ' ' + '@ResQuoteMaster.QuantityNotMatchedWithDefaultReOrderQty'.replace("{0}", defultOrderQty).replace("{1}", itemNumber)
                        //var alertMsg = ' Qty. is not matched with Default Reorder Qty. Please update it to multiple of ' + defultOrderQty + ' for Item#' + itemNumber;
                        if (!isNaN(parseFloat(apprQty)) && parseFloat(apprQty) > 0) {
                            if (IsAllowQuoteCostuom == "True") {
                                modulo = (parseFloat(apprQty) * parseFloat(QuoteUOMValue)) % (parseFloat(defultOrderQty));
                            }
                            else {
                                modulo = (parseFloat(apprQty)) % (parseFloat(defultOrderQty));
                            }
                            alertMsg = '@ResCommon.Approved' + ' ' + alertMsg;
                            $(LineItems[i]).find('#txtApprQty').focus();
                        }
                        else if (!isNaN(parseFloat(qty)) && parseFloat(qty) > 0) {
                            if (IsAllowQuoteCostuom == "True") {
                                modulo = (parseFloat(qty) * parseFloat(QuoteUOMValue)) % (parseFloat(defultOrderQty));
                            }
                            else {
                                modulo = (parseFloat(qty)) % (parseFloat(defultOrderQty));
                            }
                            alertMsg = '@ResCommon.Requested' + ' ' + alertMsg;
                            $(LineItems[i]).find('#txtQty').focus();
                        }

                        if (!isNaN(parseFloat(modulo)) && parseFloat(modulo) > 0) {
                            //alert(alertMsg);
                            $('#DivLoading').hide();
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                            $("#spanGlobalMessage").html(alertMsg);
                            showNotificationDialog();
                            isError = true;
                            e.preventDefault();
                            return false;
                        }
                    }
                }
            }
            if (!isError)
                SaveLatestValueInSession();
        }

        if (!isError) {
            if (isNaN(parseInt($("#ddlQuoteStatus").val())) === false && parseInt($("#ddlQuoteStatus").val()) === parseInt('@((int)QuoteStatus.Approved)')) {
                var ItemNodes = $('#QuoteLineItem' + QuoteID).dataTable().fnGetNodes();
                var ItemsList = '';
                for (var i = 0; i < ItemNodes.length; i++) {
                    var Qty = $(ItemNodes[i]).find('#txtQty').val();
                    if (isNaN(parseFloat(Qty)) === false && parseFloat(Qty) > 0) {
                        var ApprQty = $(ItemNodes[i]).find('#txtApprQty').val();
                        if (isNaN(parseFloat(ApprQty)) === true || parseFloat(ApprQty) <= 0) {
                            $('#OrdApprdInfoDialog').modal();
                            e.preventDefault();
                            $('#DivLoading').hide();
                            return false;
                        }
                    }
                }
                if (ItemsList != '') {
                    $('#ValidateAppQty').modal();
                    $('#pItemListApprove').html(ItemsList);
                    e.preventDefault();
                    $('#DivLoading').hide();
                    return false;
                }
            }
        }
        if (!isError && (isFromEditQuoteLineItems !== undefined && isFromEditQuoteLineItems != null && isFromEditQuoteLineItems === true)) {
            $('#frmQuote').submit();
        }
    }

    function SaveLatestValueInSession() {
        var arrItems = new Array();
        $('#DivLoading').show();

        var ItemNodes = $('#QuoteLineItem' + QuoteID).dataTable().fnGetNodes();
        for (var i = 0; i < ItemNodes.length; i++) {

            var Qty = $(ItemNodes[i]).find('#txtQty').val();
            var ApprQty = $(ItemNodes[i]).find('#txtApprQty').val();
            var ID = $(ItemNodes[i]).find('#hdnID').val();
            var ItemGUID = $(ItemNodes[i]).find('#hdnItemGUID').val();
            var QuoteGUID = $(ItemNodes[i]).find('#hdnQuoteGUID').val();
            var vtempDetailsGUID = $(ItemNodes[i]).find('#hdnTempDetailsGUID').val();
            var RequiredDate = $(ItemNodes[i]).find('#hiddenDatePicker' + ID).val();

            if ((typeof (RequiredDate) == "undefined" || (typeof (RequiredDate) == undefined))) {
                RequiredDate = $(ItemNodes[i]).find('#hdnRequiredDate').val();
            }
            var IsEDISent = $(ItemNodes[i]).find('#hdnIsEDISent').val();
            var Comment = $(ItemNodes[i]).find('#Comment').val();


            if ($("#hdnIsEDISentOnEditQuoteLineItems").val() == "true") {
                IsEDISent = false;
            }
            else if (IsEDISent == "True") {
                IsEDISent = true;
            }
            else {
                IsEDISent = false;
            }
            var vUDF1 = '';
            var vUDF2 = '';
            var vUDF3 = '';
            var vUDF4 = '';
            var vUDF5 = '';

            if ($(ItemNodes[i]).find('#UDF1QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF1QuoteDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF1QuoteDetails option:selected').text() != undefined) {
                    vUDF1 = $(ItemNodes[i]).find('#UDF1QuoteDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF1QuoteDetails').val() != undefined) {
                        vUDF1 = $(ItemNodes[i]).find('#UDF1QuoteDetails').val();
                    }
                }
            }

            if ($(ItemNodes[i]).find('#UDF2QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF2QuoteDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF2QuoteDetails option:selected').text() != undefined) {
                    vUDF2 = $(ItemNodes[i]).find('#UDF2QuoteDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF2QuoteDetails').val() != undefined) {
                        vUDF2 = $(ItemNodes[i]).find('#UDF2QuoteDetails').val();
                    }
                }
            }

            if ($(ItemNodes[i]).find('#UDF3QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF3QuoteDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF3QuoteDetails option:selected').text() != undefined) {
                    vUDF3 = $(ItemNodes[i]).find('#UDF3QuoteDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF3QuoteDetails').val() != undefined) {
                        vUDF3 = $(ItemNodes[i]).find('#UDF3QuoteDetails').val();
                    }
                }
            }

            if ($(ItemNodes[i]).find('#UDF4QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF4QuoteDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF4QuoteDetails option:selected').text() != undefined) {
                    vUDF4 = $(ItemNodes[i]).find('#UDF4QuoteDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF4QuoteDetails').val() != undefined) {
                        vUDF4 = $(ItemNodes[i]).find('#UDF4QuoteDetails').val();
                    }
                }
            }

            if ($(ItemNodes[i]).find('#UDF5QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF5QuoteDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF5QuoteDetails option:selected').text() != undefined) {
                    vUDF5 = $(ItemNodes[i]).find('#UDF5QuoteDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF5QuoteDetails').val() != undefined) {
                        vUDF5 = $(ItemNodes[i]).find('#UDF5QuoteDetails').val();
                    }
                }
            }
            var binName = $(ItemNodes[i]).find('#txtBinNumber').val();

           if (isNaN(Qty) === false && parseFloat(Qty) > 0) {
                var data = {
                    "ID": ID
                , "ItemGUID": ItemGUID
                , "QuoteGUID": QuoteGUID
                , "tempDetailsGUID": vtempDetailsGUID
                , "RequestedQuantity": Qty
                , "ApprovedQuantity": ApprQty
                , "BinName": binName
                , "RequiredDateStr": RequiredDate
                , "IsEDISent": IsEDISent
                , "Comment": Comment
                    , "UDF1": vUDF1
                    , "UDF2": vUDF2
                    , "UDF3": vUDF3
                    , "UDF4": vUDF4
                    , "UDF5": vUDF5
                };
                arrItems.push(data);

            }
        }
        if (arrItems.length > 0) {
            $('#DivLoading').show();
            $.ajax({
                url: '@Url.Content("~/Quote/SaveLatestValueInSession")',
                data: JSON.stringify({ 'arrDetails': arrItems, 'QuoteID': QuoteID }),
                dataType: 'json',
                type: 'POST',
                contentType: "application/json",
                async: false,
                cache: false,
                success: function (response) {
                    $('#DivLoading').hide();
                },
                error: function (exh) {
                    $('#DivLoading').hide();
                }

            });
        }

    }

    $(document).on('click', 'input#btnAddNewItem', function () {
        return OpenItemPopup();
    });

    checkRememberUDFValues($("#hdnPageName").val(), parseInt(QuoteID, 10));


    $(document).off('click', 'input#btnQuoteCancel');
    $(document).on('click', 'input#btnQuoteCancel', function (e) {

        $('#global_filter').val('');

        if (typeof CheckUnSavedItemBeforCancel == 'function') {
            var isCheck = CheckUnSavedItemBeforCancel();
            if (isCheck == true)
                DoCancelButton();
        }
        else {
            DoCancelButton();
        }
    });

    $('#btnUncloseQuoteOnlyInEditPage').off('click');
    $('#btnUncloseQuoteOnlyInEditPage').on('click', function () {
        var anSelectedRows = fnGetSelected(oTable);

        if (anSelectedRows.length == 1 || QuoteGUID != '@Guid.Empty.ToString()')
        {
            var quoteGuid = "";

            if (anSelectedRows.length == 1) {
                var rawData = oTable.fnGetData(anSelectedRows[0]);
                if (rawData != null && typeof (rawData) != "undefined" && rawData.GUID != null && typeof (rawData.GUID) != "undefined") {
                    quoteGuid = rawData.GUID;
                }
                else {
                    quoteGuid = QuoteGUID;
                }
            }
            else
            {
                quoteGuid = QuoteGUID;
            }

            var uncloseQuoteData = { 'QuoteGUID': quoteGuid, 'editedFrom': 'Web', 'whateWhereAction': 'ToUnclosedQuote'  };

            $.ajax({
                url: 'UpdateQuoteToTransmited',
                type: 'Post',
                data: JSON.stringify(uncloseQuoteData),
                dataType: 'json',
                contentType: "application/json",
                success: function (result) {
                    RefreshQuoteListNarrowSearhFromEdit();
                    @*if ('@callFor' == 'UnCloseQuote')
                    {*@
                        $('#frmQuote').areYouSure({ 'silent': true });
                        $("form").off(".areYouSure");
                        removeDirtyclass();
                    //}

                    if (result.Status == "ok") {
                        ShowEditTab("QuoteEdit/" + result.ID, "frmQuote");
                    }
                    else {
                        alert(result.Message);
                    }
                },
                'error': function (xhr) {
                    alert('@ResCommon.ErrorInProcess');
                }

            });
        }
    });

    function CallThisFunctionFromModel(msg, isfromedit, isOnlyDeleted) {
        if (msg == 'success') {
            if (typeof (isOnlyDeleted) == "undefined")
                isOnlyDeleted = false;

            $('#DivLoading').show();
            $('#divQuoteLineItems').empty();
            var url = '@Url.Action("LoadQuoteLineItems")'; // + '?QuoteID=' + QuoteID;

            // This for Receive
            if ($('#hdnIsChangeQuoteclick').val() == "True" && parseInt($('#ddlQuoteStatus').val()) == '@((int)QuoteStatus.Transmitted)') {
                url = '@Url.Action("LoadQuoteLineItems")';
            }
            @*else if (parseInt($('#ddlQuoteStatus').val()) > parseInt('@((int)QuoteStatus.Approved)') && parseInt($('#ddlQuoteStatus').val()) < parseInt('@((int)QuoteStatus.Closed)')) {
                url = '@Url.Action("LoadQuoteLineItemsForReceive")';
            }*@
            URL_Listget = url;
            $.get(url, { 'quoteId': QuoteID, 'IsShowDeleted': isOnlyDeleted }, function (data) {
                $('#divQuoteLineItems').html(data);
                $('#DivLoading').hide();
                if ('@callFor' == 'editQuoteItem' && isfromedit == true) {
                    if ($("#btnUncloseQuote").length > 0) {
                        $("#btnUncloseQuote").trigger("click");
                    }
                }
                else if ('@callFor' == 'UnCloseQuote') {
                    if ($("#btnUncloseQuoteOnlyInEditPage").length > 0) {
                        $("#btnUncloseQuoteOnlyInEditPage").trigger("click");
                    }
                }

                if (isOnlyDeleted) {
                    $("#IsDeletedRecordsQuoteLn").attr("checked", 'checked');
                }

            });
        }
        else if (json.Status == 'fail') {
            alert(json.Message);
            return false;
        }
    }

    function OpenAddNewItemPopup(curobj) {
        $("#ItemModel").dialog("close");
        SetUdfValuesInTempHidden();
        $('#divAddNewItemDailog').data("data", { SourcePageName: 'Quote', 'OrderGUID': '@Model.GUID', 'OrderSupplier': '' }).dialog('open');
    }

    function onQuoteBegin() {
        $('#UDFPreserveInfo').find('input[type=checkbox]').attr("disabled", "disabled");
        $('DivLoading').show();
        return CheckBeforeSave();
    }

    function onQuoteSuccess(response) {
        $('#frmQuote').areYouSure({ 'silent': true });
        $("form").off(".areYouSure");
        IsRefreshGrid = true;

        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();
        $('#DivLoading').hide();
        if (response.Status == "fail") {

            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#Name").val("");
            $("#Name").focus();
            if ($("#hdnIsEditQuoteLineItems").val() == "true") {
                ShowEditTab("QuoteEdit/" + idValue, "frmQuote");
            }
        }
        else if (idValue == 0) {

            $("#Name").val("");
            $("#Name").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                NeedToOpenItemPopupNow = true;
                ShowEditTab("QuoteEdit/" + response.ID, "frmQuote");
            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#Name").val("");
                $("#Name").focus();
            }
            else
            {
                var msg = UpdateLineItemGrid(0, 0);

                if (msg.Status != "ok") {
                    $('#DivLoading').hide();
                    $("#spanGlobalMessage").html(msg.Message);
                    showNotificationDialog();
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                }
                else {
                    if (oTable !== undefined && oTable != null)
                        oTable.fnDraw();

                    if (IsRefreshGrid)
                    {
                        $('#NarroSearchClear').click();
                        RefreshQuoteListNarrowSearhFromEdit();
                    }

                    var url = document.location;
                    if (url.toString().indexOf("?FromItem") > 0) {
                        document.location = '@Url.Content("~/Quote/QuoteList")';
                    }
                    else if (QuoteStatus == '@((int)QuoteStatus.Transmitted)' && parseInt($('#ddlQuoteStatus').val()) == '@((int)QuoteStatus.UnSubmitted)') {
                        ShowEditTab("QuoteEdit/" + response.ID, "frmQuote");
                    }
                    else
                    {
                        SwitchQuoteTab('QuoteCreate', 'frmQuote');
                    }
                }
            }
        }
    }

    function RefreshQuoteListNarrowSearhFromEdit()
    {
        clearQuoteMasterNarrowSearchSelection();
        CallNarrowfunctions();
        CallQuoteMasterNarrowFunctions();
    }

    function onQuoteFailure(message) {
        $('#DivLoading').hide();
        $("#spanGlobalMessage").html(message.statusText);
        showNotificationDialog();
        //$("#Name").focus();
    }

    $('#btnUncloseQuote').on('click', function () {
        $('#divUnCloseQuoteToEdit').modal();
        $('.simplemodal-close').css('display', 'none');
    });

    function UnCloseQuoteToEdit() {
        _createQuote.expandCollapseForm(false);
        $('#DivLoading').show();
        var arrQuoteGuid = new Array();
        arrQuoteGuid.push(QuoteGUID);
        var success = false;
        $.ajax({
            url: "/Quote/UnCloseQuoteToEdit",
            type: 'Post',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({ 'QuoteGuid': arrQuoteGuid, 'EditType': 'EditLineItems' }),
            async: false,
            success: function (response) {
                if (response.Status == "ok") {
                    $("#spanGlobalMessage").html(response.Message);
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    success = true;
                    //ShowEditTab("OrderEdit/" + OrderID, "frmOrder");
                }
                else {
                    showNotificationDialog();
                    $("#spanGlobalMessage").html(response.Message);
                    $("#spanGlobalMessage").removeClass('succesIcon').addClass('errorIcon WarningIcon');
                    $('#QuoteOrderedInfoDialog').find("#QuoteOrderedMSG").html(response.Message);
                }
                $('#DivLoading').hide();
                UnCloseQuoteCancel();
            },
            error: function (response) {
                $("#hdnIsEDISentOnEditQuoteLineItems").val("false");
                $("#hdnIsEditQuoteLineItems").val("false");
                $("#spanGlobalMessage").removeClass('succesIcon').addClass('errorIcon WarningIcon');
                $('#QuoteOrderedInfoDialog').find("#QuoteOrderedMSG").html(response.Message);
                $('#DivLoading').hide();
            },
            complete: function (response) {
                if (success == true) {
                    if (oTable !== undefined && oTable != null)
                        oTable.fnDraw();

                    $('#ddlQuoteStatus').val('@((int)OrderStatus.UnSubmitted)');
                    $("#btnUncloseQuoteOnlyInEditPage").hide();
                    $("#btnUncloseQuote").hide();
                    $("#hdnIsEDISentOnEditQuoteLineItems").val("true");
                    $("#hdnIsEditQuoteLineItems").val("true");
                    SaveQuoteDetail($("#btnQuoteSave"), true);//$("#btnOrderSave").trigger('click'); // Added for WI-4249
                }
            }
        });
    }

    function DoCancelButton() {
        //if (IsRefreshGrid)
        //    $('#NarroSearchClear').click();

        var url = document.location;
        if (url.toString().indexOf("?FromItem") > 0)
            document.location = '@Url.Content("~/Quote/QuoteList")';
        else {
            SwitchQuoteTab('QuoteCreate', 'frmQuote');
        }
    }

    function CancelUnsaveModelYesClick() {
        $.modal.impl.close();
        DoCancelButton();
    }

    function CancelUnsaveModelCancelClick() {
        $.modal.impl.close();
    }

    function ModelCancelClick() {
        $.modal.impl.close();
    }

    function CloseModel()
    {
        $.modal.impl.close();
    }

    function ModelYesClick() {
        var ItemNodes = $('#QuoteLineItem' + QuoteID).dataTable().fnGetNodes();
        for (var i = 0; i < ItemNodes.length; i++) {
            //$('#QuoteLineItem' + OrdID + ' tbody tr').each(function () {
            var Qty = $(ItemNodes[i]).find('#txtQty').val();
            if (isNaN(parseFloat(Qty)) === false && parseFloat(Qty) > 0) {
                var ApprQty = $(ItemNodes[i]).find('#txtApprQty').val();
                if (isNaN(parseFloat(ApprQty)) === true || parseFloat(ApprQty) <= 0) {
                    $(ItemNodes[i]).find('#txtApprQty').val(Qty)

                }
            }
        } //);
        $.modal.impl.close();
        $("#btnQuoteSave").click();
    }

    function OpenItemPopup() {
        ClearVariables();
        $("#ItemModel").empty();
        var strUrl = '@Url.Action("LoadItemMasterModel")';
        strUrl = strUrl + '?ParentId=' + QuoteID;

        $('#ItemModel').data({ "url": strUrl, "strupc": '' }).dialog('open');

        if ($("input#global_filter").length > 0) {
            $("input#global_filter").focus();

            setTimeout(function () {
                $("input#global_filter").focus();

            }, 600);
        }

        if ($("input.searchinput").length > 0) {
            $("input.searchinput").focus();
            setTimeout(function () {
                $("input.searchinput").focus();
            }, 600);

        }
    }

    function SetUDFValuesToUDFControl() {
        var strUdfValues = $('div.divClsOrderRigthPan').find('input#hdnCopyUDFValuesTemp').val();
        if ($.trim(strUdfValues).length <= 0)
            return;

        var UDFObject = JSON.parse(strUdfValues);
        if ($('div.divClsOrderRigthPan').find('div#UDFDiv').length > 0) {

            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF1").length > 0) {
                $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF1").val(UDFObject.OrderUDF1);
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF2").length > 0) {
                $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF2").val(UDFObject.OrderUDF2);
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF3").length > 0) {
                $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF3").val(UDFObject.OrderUDF3);
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF4").length > 0) {
                $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF4").val(UDFObject.OrderUDF4);
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5").length > 0) {
                udf5 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5").val(UDFObject.OrderUDF5);
            }
        }
    }

    function SetUdfValuesInTempHidden() {
        var udf1 = '';
        var udf2 = '';
        var udf3 = '';
        var udf4 = '';
        var udf5 = '';
        if ($('div.divClsOrderRigthPan').find('div#UDFDiv').length > 0) {

            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF1").length > 0) {

                udf1 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF1").val();
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF2").length > 0) {

                udf2 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF2").val();
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF3").length > 0) {

                udf3 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF3").val();
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF4").length > 0) {

                udf4 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF4").val();
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5").length > 0) {
                //if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5")[0].nodeName === "SELECT")
                //    udf5 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5 option:selected").text();
                //else
                udf5 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5").val();
            }

            var obj = new Object();
            //obj = { "OrderUDF1": udf1, "OrderUDF2": udf2, "OrderUDF3": udf3, "OrderUDF4": udf4, "OrderUDF5": udf5 };
            obj.OrderUDF1 = udf1;
            obj.OrderUDF2 = udf2;
            obj.OrderUDF3 = udf3;
            obj.OrderUDF4 = udf4;
            obj.OrderUDF5 = udf5;

            $('div.divClsOrderRigthPan').find('input#hdnCopyUDFValuesTemp').val(JSON.stringify(obj));
        }

    }

    function FillDetailGridDiv() {

        var _vCOIsDeleted = false;
        if (typeof ($('#IsDeletedRecordsQuoteLn')) != undefined) {
            _vCOIsDeleted = $('#IsDeletedRecordsQuoteLn').is(':checked');
        }
        $('#divQuoteLineItems').empty();
        var url = '@Url.Action("LoadQuoteLineItems")';
        if ($('#hdnIsChangeQuoteclick').val() == "True" && parseInt($('#ddlQuoteStatus').val()) == '@((int)QuoteStatus.Transmitted)') {
            url = '@Url.Action("LoadQuoteLineItems")';
        }


        $.get(url, { 'quoteID': QuoteID,'IsShowDeleted': _vCOIsDeleted }, function (data) {
            $('#divQuoteLineItems').html(data);
            $("#divDetailGridReorderPopup").dialog("close");
            if (_vCOIsDeleted) {
                $("#IsDeletedRecordsQuoteLn").attr("checked", 'checked');
            }
            $('#DivLoading').hide();
        });


    }

    $('#divQuoteLineItems').off('click', 'a#ColumnOrderSetup1');
    $('#divQuoteLineItems').on('click', 'a#ColumnOrderSetup1', function () {
        var dtName = 'QuoteLineItem' + QuoteID;
        var lstName = 'QuoteDetailList';
        var clmobjName = 'objQuoteDtlGridColumns';

        @*if (parseInt($('#ddlQuoteStatus').val()) > parseInt('@((int)QuoteStatus.Approved)') && parseInt($('#ddlQuoteStatus').val()) < parseInt('@((int)QuoteStatus.Closed)')) {
            dtName = 'RecieveQuoteLineItem' + OrderID;
            lstName = 'ReceiveQuoteLineItem';
            clmobjName = 'objOrdRcvDtlGridColumns';
        }*@

        $("#divDetailGridReorderPopup").data({ 'DataTableName': dtName, 'ListName': lstName, 'ColumnObjectName': clmobjName }).dialog("open");
        return false;
    });


    $('#btnUpdateComment').on('click', function () {
        _createQuote.expandCollapseForm(true);
        if (_createQuote.isFormValid() == false) {
            return false;
        }

        $('#DivLoading').show();
        var arrItems = new Array();
        var QuoteID = '@Model.ID';
        var QuoteGUID = '@Model.GUID';
        //var strPackslipNumber = $.trim($('#frmQuote').find('#txtPackslipNumber').val());
        //var strShipmentTrackingNumber = $.trim($('#frmOrder').find('#ShippingTrackNumber').val());
        var strComment = $.trim($('#frmQuote').find('#Comment').val());


        var ItemNodes = $('#QuoteLineItem' + QuoteID).dataTable().fnGetNodes();
        for (var i = 0; i < ItemNodes.length; i++) {
            var ID = $(ItemNodes[i]).find('#hdnID').val();
            var ItemGUID = $(ItemNodes[i]).find('#hdnItemGUID').val();
            var QuoteGUID = $(ItemNodes[i]).find('#hdnQuoteGUID').val();
            var Comment = $.trim($(ItemNodes[i]).find('#Comment').val());

            var vUDF1 = '';
            var vUDF2 = '';
            var vUDF3 = '';
            var vUDF4 = '';
            var vUDF5 = '';

            if ($(ItemNodes[i]).find('#UDF1QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF1QuoteDetails').attr("class") == 'selectBox') {
                    vUDF1 = $(ItemNodes[i]).find('#UDF1QuoteDetails option:selected').text();
                }
                else {
                    vUDF1 = $(ItemNodes[i]).find('#UDF1QuoteDetails').val();
                }
            }

            if ($(ItemNodes[i]).find('#UDF2QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF2QuoteDetails').attr("class") == 'selectBox') {
                    vUDF2 = $(ItemNodes[i]).find('#UDF2QuoteDetails option:selected').text();
                }
                else {
                    vUDF2 = $(ItemNodes[i]).find('#UDF2QuoteDetails').val();
                }
            }

            if ($(ItemNodes[i]).find('#UDF3QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF3QuoteDetails').attr("class") == 'selectBox') {
                    vUDF3 = $(ItemNodes[i]).find('#UDF3QuoteDetails option:selected').text();
                }
                else {
                    vUDF3 = $(ItemNodes[i]).find('#UDF3QuoteDetails').val();
                }
            }

            if ($(ItemNodes[i]).find('#UDF4QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF4QuoteDetails').attr("class") == 'selectBox') {
                    vUDF4 = $(ItemNodes[i]).find('#UDF4QuoteDetails option:selected').text();
                }
                else {
                    vUDF4 = $(ItemNodes[i]).find('#UDF4QuoteDetails').val();
                }
            }

            if ($(ItemNodes[i]).find('#UDF5QuoteDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF5QuoteDetails').attr("class") == 'selectBox') {
                    vUDF5 = $(ItemNodes[i]).find('#UDF5QuoteDetails option:selected').text();
                }
                else {
                    vUDF5 = $(ItemNodes[i]).find('#UDF5QuoteDetails').val();
                }
            }
            if (parseFloat(ID) > 0) {
                var data = {
                    "ID": ID, "ItemGUID": ItemGUID, "QuoteGUID": QuoteGUID, "Comment": Comment, "UDF1": vUDF1, "UDF2": vUDF2,
                    "UDF3": vUDF3, "UDF4": vUDF4, "UDF5": vUDF5
                };
                arrItems.push(data);
            }
        }

        var updateQuoteData = {
            'ID': QuoteID, 'GUID': QuoteGUID, 'Comment': strComment,
            //'PackSlipNumber': strPackslipNumber,
            //'ShippingTrackNumber': strShipmentTrackingNumber,
            'QuoteListItem': arrItems
        };

        //setTimeout(function () {
        $.ajax({
            url: 'UpdateQuoteAndLineItemComment',
            type: 'Post',
            async: false,
            data: JSON.stringify(updateQuoteData),
            dataType: 'json',
            contentType: "application/json",
            success: function (obj) {
                if (obj.Status) {
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    $("#spanGlobalMessage").html("@ResQuoteMaster.msgSavedSuccessfully");
                }
                else {
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    $("#spanGlobalMessage").html("@ResQuoteMaster.msgNotSavedSuccessfully");
                }
                showNotificationDialog();
                $('#DivLoading').hide();
                isDirtyForm = false;
                $('form#frmQuote').removeClass('dirty');
                document.location = '@Url.Content("~/Quote/QuoteList#list")';
            },
            error: function (xhr) {
                $('#DivLoading').hide();
            }
        });
        // }, 100);

    });

</script>