
@{
    ViewBag.Title = ResLayout.CatalogReport;
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "CatalogReport" };
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayUDFButton = false, DisplaySettings = true, DisplayDeleteButton = true, DisplayPrintBlock = false, DisplayColumnSetupButton = true, ColumnSetupFor = "CatalogReportList", ShowCopyButton = false };

    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.CatalogReport, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.CatalogReport, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    Session["IsInsert"] = "";
    string LabelPrintingPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Label Design.pdf", DateTime.Now.Ticks);
    //string ItemPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/CatalogReport.pdf", DateTime.Now.Ticks);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("CatalogReport", (int)HelpDocType.Module);
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" +version)"></script>
}
<script type="text/javascript">
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
        new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true)
        @*,
         new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true)*@
    ];
    function callbacknew() { window.location.hash = '#new'; ShowNewTab('/CatalogReport/AddEditCatalog', 'frmCatalog'); }
    function callbackhistory() { window.location.hash = '#list';  }
    //function callbackCL() { HistoryTabClick(); }
</script>
<script type="text/javascript">
    var oTable;
    var IsRefreshGrid = false;
    var deleteURL = "/CatalogReport/DeleteCatalogReportDetailRecords";
    var IsDeletePopupOpen = false;
    var AllowDeletePopup = true;
    var HistorySelected;
    var objColumns = {};
    var isTabClick = false;
    $(document).ready(function () {
        objColumns = GetGridHeaderColumnsObject('myDataTable');
        LoadTabs();
        var gaiSelected = [];
        oTable = $('#myDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "100%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[1, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";

                if (!isNaN(parseInt(aData.CompanyID)) && parseInt(aData.CompanyID) === parseInt('-1')) {
                    $(nRow).css('background-color', '#C8F6C8');
                    //$(nRow).find('#aEditLink').removeAttr('onclick');
                }
                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";

                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'CatalogReportList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });

            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'CatalogReportList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '') {
                            o = JSON.parse(json.jsonData);
                        }
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content("~/CatalogReport/CatalogReportDetailListAjax")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#myDataTable').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        //if ($("#txtLPFilter").val() != '') {
                        //    $('#myDataTable').highlight($("#txtLPFilter").val());
                        //}
                        if ($("#txtLPFilter").val() != '') {

                            var SearchText = $("#txtLPFilter").val();
                            var count = (SearchText.match(/"/g) || []).length;

                            if (count == 2 && SearchText.indexOf('"') == 0) {
                                SearchText = SearchText.replace('"', '').replace('"', '');
                                $('#myDataTable').highlight(SearchText);
                            }
                            if (count == 0) {
                                $('#myDataTable').highlight($("#txtLPFilter").val());
                            }
                        }
                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
            },
            "aoColumns": [
                {
                    "mDataProp": "",
                    "sClass": "read_only",
                    "sDefaultContent": '',
                    "bSortable": true,
                    "bSearchable": false,
                    "fnRender": function (obj, val) {
                        //return '<a id="aRunRpt" href="/CatalogReport/GenerateCatalogReport/' + obj.aData.ID + '" target="_blank"><input type="button" value="Run" id="btnRun" /></a>';
                        return '<input type="button" value="@ResLayout.ViewReport" id="btnRun" onclick="return OpenCatalogPopup(' + obj.aData.ID + ',\'CR\')" />';

                    }
                },
                        { "mDataProp": "ID", "sClass": "read_only" },
                        {
                            "mDataProp": "Name",
                            "sClass": "read_only",
                            "sDefaultContent": '',
                            "bSortable": true,
                            "bSearchable": false,
                            "fnRender": function (obj, val) {
                                return "<a id='aEditLink' onclick='return ShowEditTab(&quot;EditCatalogDetail/" + obj.aData.ID + "&quot;,&quot;frmCatalogReport&quot;)' href='JavaScript:void(0);'>" + val + "</a><input type='hidden' id='hdnId' value='" + obj.aData.ID + "'/>";
                            }
                        },
                        { "mDataProp": "TemplateName", "sClass": "read_only" },
                        { "mDataProp": "CreatedByName", "sClass": "read_only" },
                        { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                        {
                            "mDataProp": "CreatedOn", "sClass": "read_only",
                            "fnRender": function (obj, val) {
                                return obj.aData.CreatedDate;
                            }
                        },
                        {
                            "mDataProp": "UpdatedOn", "sClass": "read_only",
                            "fnRender": function (obj, val) {
                                return obj.aData.UpdatedDate;
                            }
                        }
                        //, {
                        //    "mDataProp": "SelectedFields",
                        //    "sClass": "read_only"
                        //}

            ]
        }).makeEditable();

        $('.DTTT_container').css('z-index', '-1');

        if (window.location.hash.toLowerCase() == "#list") {
            callbackhistory();//$("#tab5").click();
            $("#CtabNew").hide();
            $("#Ctab").show();
            $("#tab1").removeClass("selected").addClass("unselected");
            $("#tab5").removeClass("unselected").addClass("selected");
        }
        else if (window.location.hash.toLowerCase() == "#new") {
            callbacknew();//$("#tab26").click();
            $("#Ctab").hide();
            $("#CtabNew").show();
            $("#tab5").removeClass("selected").addClass("unselected");
            $("#tab1").removeClass("unselected").addClass("selected");
        }

        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
    });

    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
        }
    }

</script>


<div class="userListingWrapper">
    <h2>@ResLayout.CatalogReport</h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'></ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="txtLPFilter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="imgClearLPFilter" />
                        </a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.CatalogReport)
            <div id="divNarrowSearch" style="float: left; padding: 0 5px 0 0; width: 18%;">
                <div id="divNarrowSearchData" style="float: left; padding: 0 0 0 0; width: 99%;">
                    &nbsp;
                </div>
            </div>
            <div class="userContent ">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.Name
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.Template
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            @*<th>
                                    Selected Fields
                                </th>*@
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div style="display: block;">
                    <div id="divQTYLegends" style="display: none; clear: both; width: 90%; margin-top: 10px;
                        display: block; float: left">
                        <div>
                            @*<span class="SpanCriticalLegend" style="background-color: #C8F6C8; float: left; width: 40px;
                                margin-right: 10px;">&nbsp;</span>*@
                            @*<a id="arun" href="/CatalogReport/GenerateCatalogReport/" target="_blank">
                                    <input type="button" value="Run" id="btnRun" />
                                </a>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id='CtabCL' class="tabContener">
        </div>
    </div>
</div>

<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" +version)"></script>

<script>
    var _IsArchived = false;
    var _IsDeleted = false;
    function fillCRNarrowSearchDiv() {
        $('#divNarrowSearchData').html('&nbsp');
        $.get('@Url.Action("GetCRNarrwSearchHTML")', function (data) {
            $('#divNarrowSearchData').html(data);
        });
    }

    var timeoutsc1;
    $('#txtLPFilter').bind('textchange', function (event) {
        clearTimeout(timeoutsc1);
        var self = this;
        timeoutsc1 = setTimeout(function () {

            if (SearchPattern == 2 || SearchPattern == "2") {
                if ($("#txtLPFilter").val().length > 2 || $("#txtLPFilter").val().length == 0) {
                    DoLPNarrowSearch();
                }
                else
                {
                    highlightSelection();
                }
            }
            else
            {
                    var keycode = (event.keyCode ? event.keyCode : event.which);
                    if (keycode == 13) {
                        DoLPNarrowSearch();
                    }
                    else {
                        highlightSelection();
                    }
                if ($("#txtLPFilter").val().length == 0) {
                    setTimeout(function () { DoLPNarrowSearch(); }, 200);
                }
            }
        }, 200);
    });
    $("#txtLPFilter").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);

        if (SearchPattern == 2 || SearchPattern == "2") {
            //if ($("#txtLPFilter").val().length > 2 ) {
            //    DoLPNarrowSearch();
            //}
            //else {
            //    highlightSelection();
            //}
        }
        else
        {
            if (code == 13) {
                DoLPNarrowSearch();
                //fnFilterLPList($("#txtLPFilter").val().replace(/'/g, "''"));
                if ($('#myDataTable').dataTable().fnGetData().length === 1) {
                    $('#myDataTable tr').find('#aEditLink').click();
                }
                return false;
            }
        }
    });

    function highlightSelection() {
        var searchtext = $("#txtLPFilter").val().replace(/'/g, "''");
        $('#myDataTable' + ' td').removeHighlight();
        if (searchtext.length > 0)
            $('#myDataTable' + ' td').highlight($("#txtLPFilter").val());
    }

    $("#imgClearLPFilter").click(function () {
        $("#txtLPFilter").val('');
        $("#txtLPFilter").focus();
        $("#txtLPFilter").change();
        return false;
    });

    function fnFilterLPList(searchtext) {
        bIsFilter = true;
        var appendedText = '';

        if (appendedText.length > 0) {
            searchtext = searchtext + "[^]" + appendedText;
        }

        $('#myDataTable').dataTable().fnFilter(searchtext, null, null, null);
        $('#myDataTable' + ' td').removeHighlight();
        $('#tab11').hide();
        if (searchtext.length > 0)
            $('#myDataTable' + ' td').highlight(searchtext);
    }

    $(document).ready(function () {
        fillCRNarrowSearchDiv();
        $("a#arun").click(function () {
            var anSelected = fnGetSelected(oTable);
            if (anSelected.length > 0 && anSelected.length == 1) {
                var tr = $(anSelected)[0];
                var oData = oTable.fnGetData($(tr)[0]);
                var url = '@Url.Content("~/CatalogReport/GenerateCatalogReport")' + '/' + oData.ID;

                $('#arun').attr("target", "_blank");
                $('#arun').attr('href', url);
                window.open($('#arun').attr('href'));
                return false;


                $.ajax({
                    url: '@Url.Content("~/CatalogReport/GenerateCatalogReport")',
                    type: 'Post',
                    data: { 'CatalogReportID': oData.ID },
                    dataType: 'json',
                    success: function (result) {
                        alert('@ResCommon.success')
                    }

                })
            }
            else {
                alert('@ResCommon.SelectRow');
                return false;
            }



            return false;
        });




    });

    $('#btnRun').on('click', function (e) {
        var anSelected = fnGetSelected(oTable);
        if (anSelected.length > 0 && anSelected.length == 1) {
            var tr = $(anSelected)[0];
            var oData = oTable.fnGetData($(tr)[0]);
            $('#arun').attr('href', $('#arun').attr('href') + '/' + oData.ID);
            $('#arun').click();
            return false;
            $.ajax({
                url: '@Url.Content("~/CatalogReport/GenerateCatalogReport")',
                type: 'Post',
                data: { 'CatalogReportID': oData.ID },
                dataType: 'json',
                success: function (result) {
                    alert('@ResCommon.success')
                }

            })
        }
        else {
            alert('@ResCommon.SelectRow');
            return false;
        }
    });

    $(document).on('dblclick', '.nottdselect', function () {
        if ($(this).hasClass('tdselect')) {
            $(this).removeClass('tdselect');
        }
        else if ($(this).find('img').length <= 0 || $(this).find('div').length <= 0) {
            $(this).addClass('tdselect');
        }
        showHideCustomizeFont();
    });
    _Common.setGloblaSearch('txtLPFilter', 'myDataTable');
</script>