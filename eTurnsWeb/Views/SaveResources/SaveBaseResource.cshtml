@using eTurns.DTO.Resources;
@{
    ViewBag.Title = ResResourceEditor.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayUDFButton = true };
    string ResourcesPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Resources.pdf", DateTime.Now.Ticks);
    Int64 CurrentUserRoleID = eTurnsWeb.Helper.SessionHelper.RoleID;
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Resources", (int)HelpDocType.Module);
}
<div class="userListingWrapper">
    <h2>
        eTurns: Base Resource Save
    </h2>
    <div class="Infoclass" id="divinfoList" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="fieldIcon">
        <a href="#" id="aCopy" style="display: none;">
            <img alt="copy" src='@Url.Content("/Content/images/copy.png")' />
        </a>
    </div>
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99%">
            @using (Html.BeginForm("Download", "SaveResources", FormMethod.Post, new { @id = "frmDownLoad" }))
            {
                @Html.AntiForgeryToken()
                <div class="userContent" style="padding-left: 5px; width: 99%;">
                    <div class="userHead" style="margin: 0.5% 0.5% 0; width: 99%">
                        <div class="editorForm" style="width: 98%">
                            <ul>
                                <li style="float: left;">
                                    <div class="editor-label" style="width: 7%; float: left; padding: 0">
                                        @Html.Label(ResResourceEditor.Language)
                                    </div>
                                    <div class="editor-field" style="width: 18%; float: left;">
                                        @Html.DropDownList("ddlResEditorLanguage", (List<SelectListItem>)ViewBag.DDLanguage, new { @style = "width:85%", @class = "selectBox" })
                                    </div>
                                    <div class="editor-label" style="width: 7%; float: left; padding: 0">
                                        @Html.Label(ResResourceEditor.Mdodules)
                                    </div>
                                    <div class="editor-field" style="width: 18%; float: left;">
                                        @Html.DropDownList("ddlResourceModule", (List<SelectListItem>)ViewBag.DDLModuleMaster, new { @style = "width:85%", @class = "selectBox" })
                                    </div>
                                    <div class="editor-label" style="width: 7%; float: left; padding: 0">
                                        @Html.Label(ResResourceEditor.Resources)
                                    </div>
                                    <div class="editor-field" style="width: 18%; float: left;">
                                        @Html.DropDownList("ddlResourceFile", (List<SelectListItem>)ViewBag.DDLResourceFile, new { @style = "width:85%", @class = "selectBox" })
                                    </div>
                                    <div class="editor-label" style="width: 1%; float: left;">
                                        &nbsp;
                                    </div>
                                    <div class="editor-field" style="width: 10%; float: left; display: block">
                                        <input type="button" class="CreateBtn" value="@ResCommon.Save" id="btnSaveResource" name="btnSaveResource" />
                                        <input type="button" class="CreateBtn" value="SaveAll" id="btnSaveAllResource" name="btnSaveAllResource" />
                                    </div>
                                    <div class="editor-label" style="width: 25%; float: left;">
                                        
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <script language="javascript" type="text/javascript">

        $('#ddlResourceFile').change(function () {
            var selectedVal = $('#ddlResourceFile option:selected').attr('value');
            ClearResourceSession(true);
        });

        $('#ddlResEditorLanguage').change(function () {
            var selectedVal = $('#ddlResEditorLanguage option:selected').attr('value');
        });

        $('#ddlResourceModule').change(function () {
            var selectedVal = $('#ddlResourceModule option:selected').attr('value');
            $.ajax({
                url: '@Url.Content("~/SaveResources/GetBaseResourceModule")'
                    , type: 'GET'
                    , data: { 'ModuleID': selectedVal }
                    , contentType: "application/json"
                    , success: function (result) {
                        var items = "";
                        $.each(result, function (i, result) {
                            if ('@(Request.QueryString["page"])' == result.Value) {
                                items += "<option value='" + result.Value + "' selected='true' >" + result.Text + "</option>";
                            }
                            else {
                                items += "<option value='" + result.Value + "'>" + result.Text + "</option>";
                            }
                        });
                        $("#ddlResourceFile").html(items);
                    }
                    , error: function (msg) {
                    }
            });

        });
        $('#btnSaveResource').click(function () {
            $.ajax({
                url: '@Url.Content("~/SaveResources/InsertBaseResource")'
                                                    , type: 'POST'
                                                    , cache: false
                                                    , data: { 'resourcefile': $("#ddlResourceFile").val(), 'resourcelang': $("#ddlResEditorLanguage").val(), 'resourceModule': $("#ddlResourceModule option:selected").text()  }
                                                    , success: function (result) {
                                                        alert(result+' '+'@ResResourceEditor.msgfor' + ' '+$("#ddlResourceFile").val());
                                                    }
                                                    , error: function (xhr) {
                                                        alert(xhr);
                                                    }
            });
        });
        $('#btnSaveAllResource').click(function () {
            $.ajax({
                url: '@Url.Content("~/SaveResources/InsertAllBaseResource")'
                                                    , type: 'POST'
                                                    , cache: false
                                                    , data: {}
                , success: function (result) {
                    alert("@ResResourceEditor.msgInsertforAllResources".replace("{0}", result));
                                                    }
                                                    , error: function (xhr) {
                                                        alert(xhr);
                                                    }
            });
        });

        $(document).ready(function () {
            if ('@(HttpContext.Current.Request.QueryString.Count <= 0)' == 'True') {
                $("#ddlResEditorLanguage").val('@eTurns.DTO.Resources.ResourceHelper.CurrentCult');
            }
        })
        $('.DTTT_container').css('z-index', '-1');

    </script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>
