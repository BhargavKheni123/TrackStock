@model eTurns.DTO.UDFDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";

}
<div class="userHead">
    @using (Ajax.BeginForm("UDFSave", "UDF", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmUDF" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.CreatedDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.UpdatedDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }


        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsDeleted)
                    </div>
                    <div class="editor-field" style="padding: 5px">
                        @Html.CheckBox("IsDeleted", Model.IsDeleted)
                    </div>
                    <div class="editor-label" style="display: none;">
                        @Html.LabelFor(model => model.UDFColumnName)<em> *</em>
                    </div>
                    <div class="editor-field" style="display: none;">
                        @Html.TextBoxFor(model => model.UDFColumnName, new { id = "UDFColumnName", @readonly = "readonly", @class = "text-box", maxlength = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UDFColumnName)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                        @Html.HiddenFor(model => model.CompanyID)
                        @Html.HiddenFor(model => model.Room)
                        @Html.HiddenFor(model => model.UDFTableName)
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.Created)
                        @Html.HiddenFor(model => model.Updated)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.LastUpdatedBy)
                        @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                        @Html.HiddenFor(model => model.EnterpriseId)
                        @Html.HiddenFor(model => model.OtherFromeTurns)
                        @Html.HiddenFor(model => model.SetUpForEnterpriseLevel)
                        
                    </div>
                    <div class="editor-label">
                        @Html.Label(Model.UDFColumnName)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.UDFDisplayColumnName, new { id = "txtUDFDisplayColumnName", @class = "text-box", maxlength = 25 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UDFDisplayColumnName)</span>
                    </div>
                    @if (ViewBag.ShowPDAField == true)
                    {
                    <div class="editor-label">
                        @eTurns.DTO.ResUDFSetup.ColumnDisplayNamePDA<em> *</em>
                    </div>
                   
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.UDFPDADisplayColumnName, new { id = "txtUDFPDADisplayColumnName", @class = "text-box", maxlength = 25 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UDFPDADisplayColumnName)</span>
                    </div>
                    }
                    <div class="editor-label">
                        @Html.LabelFor(model => model.UDFIsRequired)
                    </div>
                    <div class="editor-field" style="padding: 5px">
                        @Html.CheckBox("UDFIsRequired", Model.UDFIsRequired)
                    </div>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.UDFIsSearchable)
                    </div>
                    <div class="editor-field" style="padding: 5px">
                        @Html.CheckBox("UDFIsSearchable", Model.UDFIsSearchable)
                    </div>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.UDFControlType)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.UDFControlType, Enum.GetValues(typeof(eTurnsWeb.Controllers.UDFControlTypes)).Cast<eTurnsWeb.Controllers.UDFControlTypes>().Select(v => new SelectListItem
                   {
                       Text = ResourceRead.GetResourceValue(v.ToString().Replace("_", ""), "ResUDFSetup"),
                       Value = v.ToString().Replace("_", " ")
                       //Value = ((int)v).ToString()
                   }), new { id = "UDFControlType", @class = "selectBox" })
                    </div>
                    @*Options will go here*@
                    <div id="divUDFDefaultValue">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.UDFDefaultValue)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.UDFDefaultValue, new { id = "UDFDefaultValue", @class = "text-box", maxlength = 255 })
                        </div>
                    </div>
                    <div id="UDFOptions">
                        <div class="editor-label" style="display:none;">
                            @Html.LabelFor(model => model.UDFOptionsCSV)
                        </div>
                        <div class="editor-field" style="display:none;">
                            <select id="ddUDFOptions" class="selectBox" style="min-width: 140px"></select>
                        </div>
                        <div class="editor-label">
                            <span>@eTurns.DTO.ResUDFSetup.EnterHere</span>&nbsp;
                        </div>
                        <div class="editor-field">
                            <input id="newUDFOption" type="text" class="text-box" style="width: 150px" maxlength="255" />
                            <input id="newUDFOptionButton" type="button" value="@ResCommon.BtnAddNew" class="UDFBtn" />
                            <input id="delUDFOptionButton" type="button" value="@ResReportMaster.Delete" class="UDFBtn" />
                        </div>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="editor-field">
                        </div>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        <input type="submit" value="@ResCommon.Save" id="btnSave" class="CreateBtn" onclick="return checkDefault();" />
                    </div>
                </li>
            </ul>
            <div id="DropdownValues">
                <table id="myUDFDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @ResUDFSetup.UDFOption
                            </th>

                            <th>
                                @ResUDFSetup.IsDefault
                            </th>
                            <th>
                               @ResCommon.Edit
                            </th>
                            <th>
                                @ResReportMaster.Delete
                            </th>
                        </tr>
                    </thead>
                </table>
                
            </div>
        </div>
        <input type="hidden" value="@Model.ValueString" id="ValueString" name="ValueString" />

    }

</div>
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    var table ;
    var arryOptions = new Array();
    function checkDefault() {


        var result = false;
        if($("input#UDFIsRequired").is(":checked"))
        {
            var ValueString = $.parseJSON(JSON.stringify(arryOptions));
            if (ValueString.length == 0 && $.trim($("select#UDFControlType").val()) != 'Textbox') {
                result = false;
            }
            else{
                result = true;
            }
        }
        else
        {
            result = true;
        }
        //$.each(ValueString, function (k, val) {
        //    if (ValueString[k].IsDefault == true || ValueString[k].IsDefault == 'true') {
        //        result = true;
        //    }
        //});
        if (result == false) {
            $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            $("#spanGlobalMessage").html('@ResUDFSetup.ReqValueBeforeSave');
            showNotificationDialog();
        }
        return result;
    }
    $("form").submit(function (e) {
        showHideLoaderForUDFEnterprise(true);
        $.validator.unobtrusive.parse("#frmUDF");
        if ($(this).valid()) {
        } else {
            showHideLoaderForUDFEnterprise(false);
        }
        e.preventDefault();
    });

    // -------- Private functions
    function showHideLoaderForUDFEnterprise (isShow) {
        if (isShow) {
            $('#DivLoading').show();
        }
        else {
            $('#DivLoading').hide();
        }
    }

    function MakeTable()
    {
        $("#myUDFDataTable").find("tbody").remove();

        var ValueString=  JSON.stringify(arryOptions);

        ValueString=$.parseJSON(ValueString);

        var TableString='<tbody>';
        $.each(ValueString, function(k, val) {

            if(val != '' && val != '0')
            {
                TableString+='<tr>';
                TableString+='<td><span id="span'+val.ID+'">'+val.UDFOption+'</span><input style="display:none;" maxlength="255" type="text" id="txt'+val.ID+'" value="'+val.UDFOption+'" /><input type="hidden" id="hdnID" name="hdnID" value="'+val.ID+'" /></td>';

                if($.trim(val.UDFOption) != $.trim($("input#UDFDefaultValue").val()))
                {
                    TableString+='<td><input type="checkbox" class="singleChecked"  onclick="SingleChecked('+val.ID+',this)" id="chk'+val.ID+'" name="chk'+val.ID+'" /></td>';
                }
                else
                {
                    TableString+='<td><input type="checkbox" checked="checked" class="singleChecked"  onclick="SingleChecked('+val.ID+',this)" id="chk'+val.ID+'" name="chk'+val.ID+'" /></td>';
                }
                TableString += '<td><a href="#" id="edit' + val.ID + '" onclick="EditUDFValue(' + val.ID + ',this)">@ResCommon.Edit</a><a href="#" id="update' + val.ID + '" style="display:none;"  onclick="UpdateUDFValue(' + val.ID + ',this)">@ResRoleMaster.Update</a><br /><a href="#" id="Cancel' + val.ID + '" style="display:none;"  onclick="CancelUDFValue(' + val.ID + ',this)">@ResCommon.Cancel</a></td>';
                TableString += '<td><a href="#" onclick="DeleteUDFValue(' + val.ID + ',this)">@ResReportMaster.Delete</a></td>';
                TableString+='</tr>';
            }
        });
        TableString+='</tbody>';
        $("input#ValueString").val(JSON.stringify(ValueString));

        $("#myUDFDataTable").append(TableString);

        table=  $("#myUDFDataTable").DataTable({"bLengthChange": false,"oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                } });

    }
    function SingleChecked(Id,CurrentCheckBox)
    {
        var currentId="chk"+Id;
        var defaultValue ='';
        $("input.singleChecked").each(function () {
            if ($(this).attr("id") != currentId) {
                $(this).removeAttr("checked");
            }
            else {
                if ($(CurrentCheckBox).is(":checked")) {
                    defaultValue = $(this).parents("tr").find("span#span" + Id).text();
                    $("input#UDFDefaultValue").val(defaultValue);
                }
                else {
                    $("input#UDFDefaultValue").val('');
                }

            }
        });
        var ValueString= $.parseJSON(JSON.stringify(arryOptions));

        $.each(ValueString, function(k, val) {
            if(Id != 0)
            {

                if("chk"+arryOptions[k].ID != currentId || arryOptions[k].ID == 0)
                {
                    arryOptions[k].IsDefault=false;
                }
                else
                {
                   if($(CurrentCheckBox).is(":checked"))
                       arryOptions[k].IsDefault = true;
                    else
                        arryOptions[k].IsDefault = false;
                }
            }
            else
            {
                var SpanValue= $(CurrentCheckBox).parents("tr").find("td span#span"+Id).text();
                if(arryOptions[k].UDFOption != SpanValue )
                {
                    arryOptions[k].IsDefault=false;
                }
                else
                {
                    if ($(CurrentCheckBox).is(":checked"))
                        arryOptions[k].IsDefault = true;
                    else
                        arryOptions[k].IsDefault = false;
                }

            }
        });
        $("input#ValueString").val(JSON.stringify(arryOptions));
    }
    function DeleteUDFValue(Id,currentAnchor)
    {
        var ValueString = $.parseJSON(JSON.stringify(arryOptions));
       var CurrentValue= $(currentAnchor).parents("tr").find("td span#span" + Id).text();
        var i=0;
        var j=0;

        $.each(ValueString, function(k, val) {
            if(Id != 0)
            {
                if(val.ID == Id)
                {
                    delete ValueString[k];
                    j=i;
                }
            }
            else
            {
                var SpanValue= $(currentAnchor).parents("tr").find("td span#span"+Id).text();
                if(val.UDFOption == SpanValue)
                {
                    delete ValueString[k];
                    j=i;
                }
            }
            i++;
        });
        if($.trim(CurrentValue) == $.trim($("input#UDFDefaultValue").val()))
        {
            $("input#UDFDefaultValue").val('');
        }
        arryOptions.splice(j, 1);

        //$('select#ddUDFOptions').find('option[value="'+Id+'"]').remove();
        $("input#ValueString").val(JSON.stringify(ValueString));
        table.fnDestroy();
        MakeTable();
    }

    function EditUDFValue(Id, currentAnchor)
    {

        $(currentAnchor).parents("tr").find("td span#span" + Id).hide();
        $(currentAnchor).parents("tr").find("td input#txt" + Id).show();
        $(currentAnchor).parents("tr").find("td a#edit" + Id).hide();
        $(currentAnchor).parents("tr").find("td a#update" + Id).show();
        $(currentAnchor).parents("tr").find("td a#Cancel" + Id).show();

    }
    function UpdateUDFValue(Id,currentText)
    {
        var OldValue= $(currentText).parents("tr").find("td span#span"+Id).text();
        var NewValue = $(currentText).parents("tr").find("td input#txt" + Id).val();

        if ($.trim(NewValue) != '') {
            if (CheckDuplicate(NewValue, Id) != "0") {
                var ValueString = $.parseJSON(JSON.stringify(arryOptions));
                $(currentText).parents("tr").find("td span#span" + Id).text(NewValue);
                $.each(ValueString, function (k, val) {

                    if (Id != 0) {
                        if (val.ID == Id) {
                            ValueString[k] = NewValue;
                            arryOptions[k].UDFOption = NewValue;
                        }
                    }
                    else {
                        if (val.UDFOption == OldValue) {
                            ValueString[k] = NewValue;
                            arryOptions[k].UDFOption = NewValue;
                        }
                    }
                });

                //$('select#ddUDFOptions').find('option[value="'+Id+'"]').text(NewValue);
                $("input#ValueString").val(JSON.stringify(arryOptions));
                if ($.trim(OldValue) == $.trim($("input#UDFDefaultValue").val())) {
                    $("input#UDFDefaultValue").val(NewValue);
                }
                CancelUDFValue(Id, currentText);
            }
            else {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#spanGlobalMessage").html('@ResUDFSetup.MsgUDFOptionTryAnother'.replace("{0}", NewValue));
                showNotificationDialog();
            }
        }
        else {
            $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            $("#spanGlobalMessage").html('@ResUDFSetup.ReqDropDonwOption');
            showNotificationDialog();
        }
    }
    function CancelUDFValue(Id,currentAnchor)
    {
        $(currentAnchor).parents("tr").find("td input#txt" + Id).val($(currentAnchor).parents("tr").find("td span#span" + Id).text());
        $(currentAnchor).parents("tr").find("td span#span" + Id).show();
        $(currentAnchor).parents("tr").find("td input#txt" + Id).hide();
        $(currentAnchor).parents("tr").find("td a#edit" + Id).show();
        $(currentAnchor).parents("tr").find("td a#update" + Id).hide();
        $(currentAnchor).parents("tr").find("td a#Cancel" + Id).hide();

    }

</script>
<script language="javascript" type="text/javascript">
    $(document).ready(function(){
        $("input#newUDFOptionButton").hide();
        $("input#btnSave").hide();
        //table= $('#myUDFDataTable').DataTable( {
        //    data: JSON.stringify(arryOptions),
        //    columns: [
        //        { data: "UDFOption" },
        //        { data: "IsDefault" },
        //        { data: "null" },
        //        { data: "null" }

        //    ]
        //});
        @*oTable = $('#myUDFDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            //"bAutoWidth": false,
            "sScrollX": "350%",
            //"sScrollX": "8000px",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[0, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable', //+ "&nbsp; This barcode text is not assing to any item.<br>Would you like to assing it?<br><a id='aBarcodeYes'href='javascript:void(0)' onclick='javascript:return OpenItemInPopup(this);' >Yes</a> ",
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

                return nRow;
            },

            "bServerSide": true,
            "sAjaxSource": '',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {


            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
                $('#divQTYLegends').show(1000);

            },
            "aoColumns": [

                        {

                            "mDataProp": null,
                            "bSortable": false,
                            "sClass": "read_only control center NotHide",
                            "sDefaultContent": '',
                            "fnRender": function (obj, val) {

                                if (obj.aData.ItemType == 4) {
                                    return '';
                                }
                                else {
                                    return '<img class="ItemMasterImage" src="' + sImageUrl + 'drildown_open.jpg' + '">';
                                }
                            }
                        },
                        {
                            "mDataProp": "ItemType", "sClass": "read_only"
                                , "sDefaultContent": '', "fnRender": function (obj, val) {
                                    if (val == 1)
                                        return "Item";
                                    else if (val == 2)
                                        return "Quick List";
                                    else if (val == 3)
                                        return "Kit";
                                    else if (val == 4)
                                        return "Labor";
                                    else
                                        return "";
                                }
                        },
                        {
                            "mDataProp": "Value",
                            "sClass": "read_only",
                            "sDefaultContent": '',
                            "bSortable": true,
                            "bSearchable": false,
                            "fnRender": function (obj, val) {
                                var strVal = val;//.replace(/ /g, "&nbsp;");
                                return "<a id='aEditLink' onclick='' href='JavaScript:void(0);'>" + strVal + "</a>" + " <input type='hidden' id='ID' value='" + obj.aData.ID.toString() + "' />"
                                ;
                            }
                        }
            ]
        }).makeEditable({
            sUpdateURL: '@Url.Content("~/Master/UpdateBinMasterData")'
        });*@
    });
    function onSuccess(response) {
        showHideLoaderForUDFEnterprise(true);
        IsRefreshGrid = true;
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
        }
        else if (idValue == 0) {
            clearControls('frmUDF');
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                clearControls('frmUDF');
            }
            else {
                SwitchTextTab(0, 'UDFCreate', 'frmUDF');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
                $('.tab1').hide();
            }
        }
        showHideLoaderForUDFEnterprise(false);
    }

    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#ToolName").focus();
    }

    $(document).ready(function () {
        //$.ajaxSetup({
        //    beforeSend: function (req) {
        //        $('#DivLoading').show();
        //    },
        //    complete: function (req) {
        //        $('#DivLoading').hide();
        //    }
        //});
        $('#btnCancel').click(function (e) {
            SwitchTextTab(0, 'UDFCreate?t=@ViewBag.UDFTableName', 'frmUDF');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();
            }
            $('.tab1').hide();
        });

        $("#UDFControlType").change(function () {
            toggleControl(false);
        });

        //$("#ddUDFOptions").change(function () {
        //    setAttributes();
        //});

        toggleControl(true);
        $('#DivLoading').show();
        setTimeout(function(){
            MakeTable();
            $('#DivLoading').hide();
            $("input#newUDFOptionButton").show();
            $("input#btnSave").show();
        },2500);
    });

    function toggleControl(fillit) {
        var UDFOption = $("#UDFControlType").val();
        if (UDFOption == 'Textbox') {
            $("#divUDFDefaultValue").css({ 'display': '' });
            $("#UDFOptions").css({ 'display': 'none' });
            //$("#UDFDefaultValue").val('');
            $("div#DropdownValues").hide();
        }
        else {
            $("#divUDFDefaultValue").css({ 'display': 'none' });
            $("#UDFOptions").css({ 'display': 'block' });
            fillOptions(@Model.ID,fillit);
            $("div#DropdownValues").show();
        }
    }

    function setAttributes() {
        
        var ID = $("#ddUDFOptions").val();
        var UDFOption = $("#ddUDFOptions option:selected").text();
        $("#newUDFOption").val(UDFOption);
        
        if (ID > 0) {
            $("#newUDFOptionButton").html('@ResRoleMaster.Update');
            $("#delUDFOptionButton").css({ 'display': '' });
            $('#UDFDefaultValue').val(UDFOption);
        }
        else {
            $("#newUDFOptionButton").html('@ResCommon.AddNew');
            $("#delUDFOptionButton").css({ 'display': 'none' });
        }

        $("#newUDFOptionButton").removeAttr("onclick", "");
        $("#newUDFOptionButton").attr("onclick", "callUpdate(" + ID + ")");

        $("#delUDFOptionButton").removeAttr("onclick", "");
        $("#delUDFOptionButton").attr("onclick", "callDelete(" + ID + ")");

    }
    function getSelectOptions(id){
        var select = $('#' + id);
        var obj = {};

        $('option', select).each(function(i, v){

            var $this = $(this);
            obj[$this.val()] = $this.text();
        });
        return obj;
    }

    function fillOptions(_UDFID,fillit) {
        
        if (_UDFID > 0 && fillit) {
            $.ajax({ 'url': '/UDF/GetUDFOptionsByUDF',
                data: { UDFID: _UDFID,UDFTableName:'@Model.UDFTableName',EnterpriseID:'@Model.EnterpriseId',"OthereTurns":true },
                cache: false,
                success: function (response) {
                    //$("#ddUDFOptions").empty();
                    //var s = '';
                    ////s += '<option value="0">Add New Option</option>';
                    //s += '<option value="0"></option>';
                   
                    $.each(response.DDData, function (i, val) {

                        if(val.UDFOption != $('#UDFDefaultValue').val())
                        {
                            arryOptions.push({ID:val.ID,UDFOption:val.UDFOption,IsDefault:false,GUID: val.GUID});
                        }
                        else
                        {
                            arryOptions.push({ID:val.ID,UDFOption:val.UDFOption,IsDefault:true,GUID: val.GUID});
                        }
                    });
                    

                    //$("#ddUDFOptions").append(s);

                    //$("#newUDFOption").css({ 'display': '' });
                    //$("#newUDFOptionButton").css({ 'display': '' });

                    //var txtvalue = $('#UDFDefaultValue').val();
                    //$('#ddUDFOptions option:contains("' + txtvalue + '")').attr("selected", "selected");

                    setAttributes();

                }
            });
        }
        else if (_UDFID > 0)
        {
             setAttributes();
        }
        else {
            //$("#ddUDFOptions").empty();
            var s = '';
            //s += '<option value="0">Add New Option</option>';
            s += '<option value="0"></option>';
            $("#ddUDFOptions").append(s);

            $("#newUDFOption").css({ 'display': '' });
            $("#newUDFOptionButton").css({ 'display': '' });
            setAttributes();
        }
    }

    function callUpdate(_ID) {
        var newValue = $("#newUDFOption").val();
        
        if(arryOptions.length == 0)
        {
            $('#UDFDefaultValue').val(newValue);
        }
        AddEditOption(_ID, @Model.ID, newValue);
        
        $("input#newUDFOption").val('');
        $("input#newUDFOption").focus();
    }
    function CheckDuplicate(UDFText,Id)
    {
        var returnValue="1";
        var ValueString= $.parseJSON(JSON.stringify(arryOptions));

        $.each(ValueString, function(k, val) {

            if((arryOptions[k].ID != Id || (arryOptions[k].ID ==0 && Id== 0)) && $.trim(arryOptions[k].UDFOption) == $.trim(UDFText))
            {
                returnValue= "0";
            }

        });
        return returnValue;
    }
    function AddEditOption(_ID, _UDFID, _UDFOption) {
        var actionURL;
        var params;

        //Edit Mode - UDF
        if (_UDFID > 0) {

            if (_UDFOption.trim().length > 0) {

                @*  if (_ID > 0) {
                    //Edit Mode - UDFOption
                    actionURL = '/UDF/EditUDFOption';
                    params = { ID: _ID, UDFID: _UDFID, UDFOption: _UDFOption,UDFTableName:'@Model.UDFTableName',EnterpriseID:'@Model.EnterpriseId' }
                }
                else {
                    //Add Mode  - UDFOption
                    actionURL = '/UDF/InsertUDFOption';
                    params = { ID: _ID, UDFID: _UDFID, UDFOption: _UDFOption,UDFTableName:'@Model.UDFTableName',EnterpriseID:'@Model.EnterpriseId' }
                }

                $.ajax({ 'url': actionURL,
                    data: params,
                    success: function (response) {
                        //Refresh the droddown here
                        if (response.Response == "duplicate")
                        {
                            $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                            $("#spanGlobalMessage").text('@ResUDFSetup.MsgUDFOptionTryAnother'.replace("{0}", _UDFOption));
                            showNotificationDialog();
                        }
                        else
                        {
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                            $("#spanGlobalMessage").text('@ResUDFSetup.MsgUDFOptionSaved');
                            showNotificationDialog();

                        }
                    }
                });
            }*@

                if(CheckDuplicate(_UDFOption,0) != "0")
                {

                    var ValueString= $.parseJSON(JSON.stringify(arryOptions));

                    //$.each(ValueString, function(k, val) {

                    //    arryOptions[k].IsDefault=false;
                    //});
                    
                    if(arryOptions.length != 0)
                    {
                        arryOptions.push({ID:0,UDFOption:_UDFOption,IsDefault:false,GUID:generateUUID()});
                    }
                    else
                    {
                        arryOptions.push({ID:0,UDFOption:_UDFOption,IsDefault:true,GUID:generateUUID()});
                    }
                    
                    //ValueString = ValueString.replace("}",object2+"}");
                    //alert(arryOptions.length);

                    //table.fnAddData(JSON.parse(JSON.stringify(arryOptions)));
                    table.fnDestroy();


                    //table.data(JSON.stringify(arryOptions));
                    //table.fnDraw();
                    MakeTable();
                }
                else
                {

                    $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                    $("#spanGlobalMessage").html('@ResUDFSetup.MsgUDFOptionTryAnother'.replace("{0}", _UDFOption));
                    showNotificationDialog();
                }
            }
                // toggleControl();
            else {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#spanGlobalMessage").html('@ResUDFSetup.ReqDropDonwOption');
                showNotificationDialog();
            }
        }
        else {
            //Add Mode - UDF
            $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            $("#spanGlobalMessage").html('@ResUDFSetup.MsgUDFSaveFirst');
            showNotificationDialog();
        }
       
    }
    function generateUUID() {
        var d = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (d + Math.random()*16)%16 | 0;
            d = Math.floor(d/16);
            return (c=='x' ? r : (r&0x3|0x8)).toString(16);
        });
        return uuid;
    };
    function callDelete(_ID) {
        if (_ID > 0) {
            //Delete Mode
            actionURL = '/UDF/DeleteUDFOption';
            params = { ID: _ID }

            $.ajax({ 'url': actionURL,
                data: params,
                success: function (response) {
                    toggleControl(false);
                }
            });
        }
    }
    //$.ajaxSetup({ cache: false });

</script>
