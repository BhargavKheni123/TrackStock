@model IEnumerable<eTurns.DTO.UDFDTO>
@{
    ViewBag.Title = string.Format(eTurns.DTO.ResUDFSetup.PageTitle, (string)ViewBag.UDFTableNameKey);// "eTurns : UDF for " + ViewBag.UDFTableNameKey;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayPrintBlock = false, ShowSelectAll = false, DisplayUDFButton = false, DisplayGoToPage = false, DisplaySettings = false, DisplayContextMenu = false };
    bool isInsert = false;
    bool isUpdate = true;
    string UDFTableKeyName = Convert.ToString(ViewBag.UDFTableNameKey);
    long EID = Convert.ToInt64(ViewBag.EnterpriseID);


}

<script type="text/javascript">
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew1();', false, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory1();', true, true)
    ];
    function callbacknew1() { ShowNewTab('UDFCreate?t=@ViewBag.UDFTableName', 'frmUDF'); }
    function callbackhistory1() { } //HistoryTabClick(); }
    
</script>
<div class="userListingWrapper">
    <h2>
        @{ string.Format(eTurns.DTO.ResUDFSetup.PageHeader, (string)ViewBag.UDFTableNameKey);}
    </h2>
    <h2>
        @string.Format(ResUDFSetup.PageHeaderUDFSetting,ViewBag.UDFHeader)
    </h2>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        <ul class='tabs'>
            @* <li class="tab1" style="display: none"><a id="atab1" href='#tab1' onclick="TabItemClicked('UDFCreate?t=@ViewBag.UDFTableName','frmUDF')">
                </a></li>
                <li class="tab10"><a id="atab7" class="active" href='#tab7' onclick="javascript:ChangeEditToNew('UDFCreate?t=@ViewBag.UDFTableName','frmUDF');">
                </a></li>*@
        </ul>
        <div id="CtabNew" class="tabContener" style="display:none;">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings)
            <div class="userContent" style="width: 98%; padding-left: 12px">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResUDFSetup.ColumnName
                            </th>
                            <th>
                                @eTurns.DTO.ResUDFSetup.ColumnDisplayName
                            </th>

                            <th class="pdaColumn">
                                @eTurns.DTO.ResUDFSetup.ColumnDisplayNamePDA
                            </th>

                            <th>
                                @eTurns.DTO.ResUDFSetup.ControlType
                            </th>
                            <th>
                                @eTurns.DTO.ResUDFSetup.DefaultValue
                            </th>
                            <th>
                                @eTurns.DTO.ResUDFSetup.IsRequired
                            </th>
                            <th>
                                @eTurns.DTO.ResUDFSetup.IsInNarrowSearch
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.IsActive
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <button id="btnAddNewCompany" value="Ok" style="display: none">
                    @ResCommon.AddNew
                </button>
                <button id="btnDeleteCompany" value="cancel" style="display: none">
                    Delete Selected
                </button>
                <div id="processing_message" style="display: none" title="Processing">
                    @eTurns.DTO.Resources.ResMessage.RequestProcessMessage
                </div>
            </div>
        </div>
        @* <div id='tab1' class="tabContener">
            </div>*@
    </div>
</div>
<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>
<script type="text/javascript">

    function ShowEditTablocal(url, fname) {
        var paramtopass = new Array();
        paramtopass.push({ name: "UDFTableKeyName", value: '@UDFTableKeyName' });
        paramtopass.push({ name: "OtherFromeTurns", value: true });
        paramtopass.push({ name: "ForEnterPriseSetup", value: true });
        ShowEditTabWithParams(url, fname, paramtopass);
    }
</script>

<script language="javascript" type="text/javascript">
        var isPDAFieldShow = true;
        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/UDF/DeleteUDFRecords";
        var PostCount = 0;
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;

        $(document).ready(function () {

            if ('@ViewBag.ShowPDAField' == "False") {
                isPDAFieldShow = false;
            }

            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "100%",
                "bScrollAutoCss": false,
                "sScrollXInner": "",
                "sDom": 'RC<"top"l<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[1, "asc"]],
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bServerSide": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "sAjaxSource": "/UDF/UDFListAjax?t=" + '@ViewBag.UDFTableName' + "&OtherFromeTurns=true&ForEnterPriseSetup=true",
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    PostCount = PostCount + 1;
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }

                    }
                    aoData.push({ "name": "eid", "value": '@EID' });
                    if (oSettings.aaSorting.length != 0)
                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });
                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
                        "headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        "beforeSend": function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                        },
                        error: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            $('#myDataTable').removeHighlight();
                        }
                    })
                },
                "aoColumns": [
			                { "mDataProp": "ID", "sClass": "read_only" },
			                {
			                    "mDataProp": "UDFColumnName",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSearchable": false,
			                    "fnRender": function (obj, val) {
			                        return "<a onclick='return ShowEditTablocal(&quot;/UDF/UDFEdit/" + obj.aData.ID + "&quot;,&quot;frmUDF&quot;)' href='JavaScript:void(0);'>" + obj.aData.UDFColumnName + "</a>";
			                    }
			                },
                            { "mDataProp": "UDFDisplayColumnName", "sClass": "read_only" },
                            { "mDataProp": "UDFPDADisplayColumnName", "sClass": "read_only", "bVisible": isPDAFieldShow },
                            { "mDataProp": "UDFControlType", "sClass": "read_only" },
                            { "mDataProp": "UDFDefaultValue", "sClass": "read_only" },
                            {
                                "mDataProp": "UDFIsRequired", "sClass": "read_only",
                                "fnRender": function (oObj, val) {
                                    var $checked = '';
                                    if (val == '1' || val == 'true') {
                                        $checked = "checked='checked'";
                                    }
                                    return '<input disabled="true" value="' + val + '" type="checkbox" ' + $checked + ' />';
                                }
                            },
                            {
                                "mDataProp": "UDFIsSearchable", "sClass": "read_only",
                                "fnRender": function (oObj, val) {
                                    var $checked = '';
                                    if (val == '1' || val == 'true') {
                                        $checked = "checked='checked'";
                                    }
                                    return '<input disabled="true" value="' + val + '" type="checkbox" ' + $checked + ' />';
                                }
                            },
			                {
			                    "mDataProp": "Created", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return obj.aData.CreatedDate;
			                    }
			                },
			                {
			                    "mDataProp": "Updated", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return obj.aData.UpdatedDate;
			                    }
			                },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            {
                                "mDataProp": "IsDeleted", "sClass": "read_only",
                                "fnRender": function (oObj, val) {
                                    var $checked = '';
                                    if (val == '1' || val == 'true') {
                                        $checked = "checked='checked'";
                                    }
                                    return '<input disabled="true" value="' + val + '" type="checkbox" ' + $checked + ' />';
                                }
                            }
                ]

            }).makeEditable();

            $('.DTTT_container').css('z-index', '-1');

            // To adjust the print block next to colvis button
            $('.BtnBlock').css({ 'margin-right': '45px' });
        });


</script>
