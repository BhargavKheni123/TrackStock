@using eTurns.DTO
@using eTurns.DTO.Resources
@{    
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayDeleteButton = false, DataTableName = "HistoryTable", ColumnSetupFor = "CartItemsChangeLog" };
}
<script language="javascript" type="text/javascript">
    var oHistoryTable;
    var historyDTName = 'HistoryTable';

    $(document).ready(function () {
        oHistoryTable = $('#HistoryTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "bAutoWidth": true,                        
            "sDom": 'R<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "sScrollX": "100%",
            "aaSorting": [[1, "asc"]],
            "oColReorder": {},
            "bSort": false,
            "sPaginationType": "full_numbers",
            "sAjaxSource": '@Url.Content("~/Master/GetHistoryDataGUID")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                aoData.push({ "name": "PageType", "value": "cartlist" });
                aoData.push({ "name": "PageID", "value": '@ViewBag.CartItemId' });                
                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback
                })
            },
            "fnInitComplete": function () {                     
                     compareHistoryRows(this);
            },
            "aoColumns": [                            
                            //{ "mDataProp": "ID", "sClass": "read_only" },                            
                            { "mDataProp": "ItemNumber", "sClass": "read_only" },
			                { "mDataProp": "Quantity", "sClass": "read_only" },
                              { "mDataProp": "WhatWhereAction", "sClass": "read_only" },
			                { "mDataProp": "ReplenishType", "sClass": "read_only" }	,                            
                            { "mDataProp": "Created", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.CreatedDate; } },
                            { "mDataProp": "Updated", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.UpdatedDate; } },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "EditedFrom", "sClass": "read_only" },
                            { "mDataProp": "ReceivedOn", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                       return obj.aData.ReceivedOnDate;
 			                    }
			                },
			                { "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                       return obj.aData.ReceivedOnDateWeb;
			                    }
			                }
//                            { "mDataProp": "ReceivedOnDate", "sClass": "read_only" },
//                            { "mDataProp": "ReceivedOnDateWeb", "sClass": "read_only" }
                            @Html.RenderColumnsArray("CartItem")


		    ]
        });
        //HIDE PRINT CONTAINER
        $('.DTTT_container').css('z-index', '-1');
        $('#dvCartHistory .printBlock').css({'left':'-83px'});        

        $("#HistoryText").keyup(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
            }
            else {
                fnFilterGlobalPS();
            }
        });

        //Keydown event is required to handle ENTER KEY to work in IE
        $("#HistoryText").keydown(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                fnFilterGlobalPS();
            }
        });

        $("#HistoryClear").click(function () {
            $("#HistoryText").val('');
            fnFilterGlobalPS();
            $("#HistoryText").focus();
            return false;
        });

        var timeoutscheduler;
        $(document).on('propertychange input', "#HistoryText", function () {
            clearTimeout(timeoutscheduler);
            timeoutscheduler = setTimeout(function () {
                if (SearchPattern == 2 || SearchPattern == "2") {
                    fnFilterGlobalPS();
                }
                else {
                    $('#HistoryText').unbind("keypress");
                    $('#HistoryText').keypress(function (event) {
                        var keycode = (event.keyCode ? event.keyCode : event.which);
                        if (keycode == 13) {
                            fnFilterGlobalPS();
                        }
                    });
                    if ($("#HistoryText").val().length == 0) {
                        setTimeout(function () { fnFilterGlobalPS(); }, 200);
                    }
                }
            }, 500);
        });

        _Common.setGloblaSearch('HistoryText', 'HistoryTable');
    });  

    function fnFilterGlobalPS() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#HistoryText") != 'undefined' && ($("#HistoryText").val().length > 2 || $("#HistoryText").val().length == 0)) {
            //if (typeof $("#HistoryText") != 'undefined') {
            var searchtext = $("#HistoryText").val().replace(/'/g, "''");

            $('#' + historyDTName + ' td').removeHighlight();

            $('#' + historyDTName).dataTable().fnFilter(
                searchtext,
                null,
                null,
                null
            );

            if (searchtext.length > 0)
                $('#' + historyDTName + ' td').highlight($("#HistoryText").val());
        }
    }
//    CartItemListColumnsArr.push({ mDataProp: "Created", sClass: "read_only", fnRender: function (obj, val) { return GetDateInFullFormat(val); } });
//        CartItemListColumnsArr.push({ mDataProp: "Updated", sClass: "read_only", fnRender: function (obj, val) { return GetDateInFullFormat(val); } });
//        CartItemListColumnsArr.push({ mDataProp: "UpdatedByName", sClass: "read_only" });
//        CartItemListColumnsArr.push({ mDataProp: "CreatedByName", sClass: "read_only" });  
</script>
<div class="searchWrapper">
    <div class="searchBlock">
        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
        <div class="searchinputB">
            <input type="text" class="searchinput" id="HistoryText" />
            <a href="javascript:void(0);" class="xclose">
                <img src="~/Content/images/x.png" alt="X" id="HistoryClear" /></a>
        </div>
    </div>
</div>
@Html.GridTopHeaderForHistory(settings)
<div style="margin: 0 0.4% 1%">
    <table id="HistoryTable" class="display">
        <thead>
            <tr>
                @*<th>
                    @eTurns.DTO.Resources.ResCommon.ID
                </th>*@
                <th>
                    @eTurns.DTO.ResCartItem.ItemNumber
                </th>
                <th>
                    @eTurns.DTO.ResCartItem.Quantity
                </th>
                <th>
                    From Where
                </th>
                <th>
                    @eTurns.DTO.ResCartItem.ReplenishType
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.AddedFrom
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.EditedFrom
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                </th>
                @Html.RenderColumnsHeader("CartItem", typeof(eTurns.DTO.ResCartItem))
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
