@model eTurnsWeb.Models.ItemModelPerameter
@{
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    var settings = new GridHeaderSettings() { DisplayContextMenu = false, DisplayPrintBlock = false, ShowSelectAll = true, DisplayDeleteButton = false, dataViewType = DataViewType.None, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "NewCartItemMasterModelList" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ItemMaster", ListName="_NewCartItem" , ItemModelCallFromPageName = "NewCART" };
    //List<BinMasterDTO> lstAllBins = (List<BinMasterDTO>)ViewBag.AllBinsOfRoom;
    //string strBinLocations = "<option value=''></option>";
    //foreach (var item in lstAllBins)
    //{
    //    strBinLocations += "<option value='" + item.ID + "'>" + item.BinNumber + "</option>";
    //}
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    bool isTransfer = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.CartTransferPermission);
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);

}
<div class="searchWrapper">
    <div class="searchBlock">
        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
        <div class="searchinputB">
            <input type="text" class="searchinput" id="Cart_ItemModel_filter" />
            <a href="javascript:void(0);" class="xclose">
                <img src="~/Content/images/x.png" alt="X" id="ClearCart_ItemModel_filter" />
            </a>
        </div>
    </div>
</div>
@Html.ItemModelGridTopHeader(settings)
<script src="@Url.Content("~/Scripts/PageScripts/NarrowSearchForItemModel.js?v=" + version)" type="text/javascript"></script>
@Html.Partial("NarrowSearchForItemModel", modelCommon)
<div class="userContent ">
    <table id="ItemModeDataTable" class="display">
        <thead>
            <tr>
                <th>
                    @eTurns.DTO.Resources.ResCommon.RowNo
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.Add 
                </th>
                <th>
                    @eTurns.DTO.ResCartItem.Quantity
                </th>
                <th>
                    @eTurns.DTO.ResCartItem.BinName
                </th>
                <th>
                    @eTurns.DTO.ResCartItem.ReplenishType
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ItemType
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ItemNumber
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Description
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnHandQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnOrderQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SuggestedOrderQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.MinimumQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.MaximumQuantity
                </th>
                <th>
                    @eTurns.DTO.ResCategoryMaster.Category
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.InventoryClassification
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.AverageUsage
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Cost
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Markup
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SellPrice
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ExtendedCost
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LongDescription
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Supplier
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SupplierPartNo
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ManufacturerName
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ManufacturerNumber
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.UPC
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.UNSPSC
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LeadTimeInDays
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.InTransitquantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnTransferQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.RequisitionedQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Turns
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.CriticalQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SerialNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LotNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DateCodeTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.IsLotSerialExpiryCost
                </th>
                <th>
                    @eTurns.DTO.ResGLAccount.GLAccount
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ID
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.PricePerTerm
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DefaultPullQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Trend
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Taxable
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Consignment
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.StagedQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.WeightPerPiece
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ItemUniqueNumber
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.IsTransfer
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.IsPurchase
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.RoomName
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.AverageCost
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Link2
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.BondedInventory
                </th>
                <th>
                    @eTurns.DTO.ResUnitMaster.Unit
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.AddedFrom
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.EditedFrom
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                </th>
                @*  @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster))*@
                @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster), "Item")
                @Html.RenderColumnsHeader("CartItemList", typeof(eTurns.DTO.ResCartItem))
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <button id="btnAddNewCompany" value="Ok" style="display: none">
        @ResCommon.AddNew
    </button>
    <button id="btnDeleteCompany" value="Cancel" style="display: none">
        Delete Selected
    </button>
    <div id="processing_message" style="display: none" title="Processing">@eTurns.DTO.Resources.ResMessage.RequestProcessMessage</div>
    @*START : QTY Legends*@
    @Html.Partial("_QTYLegends")
    @*END : QTY Legends*@
</div>
<div id="ItemQty">
</div>
<div class="editorForm">
    <input type="button" value="@ResCommon.AddAll" id="btnAddAll" class="CreateBtn" onclick="SaveAllCartItems();"
           style="float: left; margin-left: 15px; margin-top: 1px;" />
</div>
@*@if (false)
    {
        <script src="../../Scripts/jquery-1.9.1-vsdoc.js" type="text/javascript"></script>
    }*@
<script type="text/javascript">
    var oTableItemModel;
    var sImageUrl = "/Content/images/";
    var anOpen = [];
    var decoded = '';
    var objColumnsMI = {}

    $(document).ready(function () {
        objColumnsMI = GetGridHeaderColumnsObject('ItemModeDataTable');
        $("#ItemQty").dialog({
            autoOpen: false, modal: true, draggable: true, resizable: true, width: '60%', height: 450, title: 'Quantity Detail',
            open: function () {
                $('#DivLoading').show();
                var itemGuid = $(this).data("itemGuid");
                var strUrl = $(this).data("url");
                $.get(strUrl, { ItemGuid: itemGuid }, function (data) {
                    $('#DivLoading').hide();
                    $("#ItemQty").html(data);

                });
            },
            close: function () {
                $("#ItemQty").empty();
            }
        });
    });

    jQuery(function ($) {

        $("#ItemModeDataTable").on({
            mouseover: function () {
                FillLocations($(this), "");
            },
            focus: function () {
                FillLocations($(this), "");
            },
            change: function () {
                $(this).parent().find("input[id='txtBinName']").val($(this).val());
            }
        }, "#slctBinName");
        $("#ItemModeDataTable").on({
            focus: function () {
                SetAutoCompleteOpenOnFocus($(this), '@Url.Action("GetAllLocationOfRoom", "Master")', null, " ");
            }
        }, "input[type='text'][id='txtBinName']");
        //$("#ItemModeDataTable").on('focus', "input[type='text'][name='txtBinName']", function (e) {
        //    var objCurtxt = $(this);
        //    var aPos = $('#ItemModeDataTable').dataTable().fnGetPosition($(objCurtxt).parent()[0]);
        //    var aData = oTableItemModel.fnGetData(aPos[0]);

        //    var itmguid = aData.GUID;
        //    $(this).autocomplete({
        //        source: function (request, response) {
        //            $.ajax({
        //                url: '/Master/GetAllLocationOfRoom',
        //                contentType: 'application/json',
        //                dataType: 'json',
        //                data: {
        //                    featureClass: "P",
        //                    style: "full",
        //                    maxRows: 1000,
        //                    NameStartWith: request.term,
        //                    StagingName: '',
        //                    ItemGUID: itmguid

        //                },
        //                success: function (data) {
        //                    response($.map(data, function (item) {
        //                        return {
        //                            label: item,
        //                            value: item
        //                        }
        //                    }));
        //                },
        //                error: function (err) {
        //                    //

        //                }
        //            });
        //        },
        //        autoFocus: false,
        //        minLength: 1,
        //        select: function (event, ui) {
        //            //                    $(objCurtxt).parent().parent().find("input[type='hidden'][name='hdnStagingBin']").val(ui.item.selval);
        //            //                    $(objCurtxt).parent().parent().find("input[type='hidden'][name='hdnStagingBinName']").val(ui.item.label);
        //        },
        //        open: function () {
        //            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
        //        },
        //        close: function () {
        //            $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
        //            $(objCurtxt).trigger("change");
        //        },
        //        change: function (event, ui) {
        //            //                    $(objCurtxt).parent().parent().find("input[type='hidden'][name='hdnStagingBinName']").val($(objCurtxt).val());
        //        }
        //    });
        //});

        fillItemMaster(false);
        $("#ColumnSortableModalIM").dialog({
            autoOpen: false,
            modal: true,
            width: 500,
            height: dHeight,
            title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
            draggable: false,
            resizable: false,
            open: function () {

                GenerateColumnSortableIM();
                $("#ColumnSortableIM").sortable({ axis: "y", containment: "parent" });
            }
        });
        $("#actionSelectAll2").click(function () {
            $("#ItemModeDataTable").find("tbody tr").removeClass("row_selected").addClass("row_selected");
            //$("#myDataTable").find("tbody tr").toggleClass('row_selected');
            $("#actionDeSelectAll2").css('display', '');
            $("#actionSelectAll2").css('display', 'none');

        });

        $("#actionDeSelectAll2").click(function () {

            $("#ItemModeDataTable").find("tbody tr").removeClass("row_selected");
            $("#actionDeSelectAll2").css('display', 'none');
            $("#actionSelectAll2").css('display', '');
        });



        var lastCheckedNewCart
        $("#ItemModeDataTable").on("tap click", "tbody tr", function (e) {
            if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text" || e.target.type == "button" || e.target.type == "textarea") {
                e.stopPropagation();
            } else {
                if (IsDeleteItemPictureViewRecord) {
                    $(this).parent().parent().parent().parent().parent().toggleClass('row_selected');
                }
                else {
                    //$(this).toggleClass('row_selected');
                    if (!lastCheckedNewCart) {
                        lastCheckedNewCart = this;
                    }

                    if (e.shiftKey) {
                        var start = $('#ItemModeDataTable tbody tr').index(this);
                        var end = $('#ItemModeDataTable tbody tr').index(lastCheckedNewCart);

                        for (i = Math.min(start, end) ; i <= Math.max(start, end) ; i++) {
                            if (!$('#ItemModeDataTable tbody tr').eq(i).hasClass('row_selected')) {
                                $('#ItemModeDataTable tbody tr').eq(i).addClass("row_selected");
                            }
                        }
                        if (window.getSelection) {
                            if (window.getSelection().empty) {  // Chrome
                                window.getSelection().empty();
                            } else if (window.getSelection().removeAllRanges) {  // Firefox
                                window.getSelection().removeAllRanges();
                            }
                        } else if (document.selection) {  // IE?
                            document.selection.empty();
                        }
                    } else if ((e.metaKey || e.ctrlKey)) {
                        $(this).toggleClass('row_selected');
                    } else {
                        $(this).toggleClass('row_selected');
                    }

                    lastCheckedNewCart = this;
                }
                return false;
            }
        });
    });

    function fillItemMaster(bDestroy) {
        var gaiSelected = [];
        oTableItemModel = $('#ItemModeDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "100%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[4, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    // nRow.className = "GridDeleatedArchivedRow";
                    $(nRow).css('background-color', '#B9BCBF');
                else if (aData.IsDeleted == true)
                    // nRow.className = "GridDeletedRow";
                    $(nRow).css('background-color', '#FFCCCC');
                else if (aData.IsArchived == true)
                    // nRow.className = "GridArchivedRow";
                    $(nRow).css('background-color', '#CCFFCC');
                /*START : QTY Legends*/
                aData.MinimumQuantity = aData.MinimumQuantity ? aData.MinimumQuantity : 0;
                aData.CriticalQuantity = aData.CriticalQuantity ? aData.CriticalQuantity : 0;
                aData.OnHandQuantity = aData.OnHandQuantity ? aData.OnHandQuantity : 0;
                var OnHandQTY = 0;
                OnHandQTY = parseFloat($(aData.OnHandQuantity).text());

                if (OnHandQTY < parseFloat($(aData.CriticalQuantity).text()))
                    $(nRow).attr({ 'style': 'background-color:@eTurnsWeb.Helper.SessionHelper.CriticalQuantityBackColor !Important' });
                else if (OnHandQTY < parseFloat($(aData.MinimumQuantity).text()))
                    $(nRow).attr({ 'style': 'background-color:@eTurnsWeb.Helper.SessionHelper.MinimumQuantityBackColor !Important' });
                /*END : QTY Legends*/
                $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'NewCartItemMasterModelList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'NewCartItemMasterModelList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content(Model.AjaxURLToFillItemGrid)', //'@Url.Content("~/Replenish/ItemMasterListAjax")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                //PostCount = PostCount + 1;
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting != null && oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];
                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                    //                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        //$('#ItemModeDataTable td').removeHighlight();
                        $("#ItemModeDataTable").removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        if ($("#Cart_ItemModel_filter").val() != '') {
                            //$('#ItemModeDataTable td').highlight($("#Cart_ItemModel_filter").val());
                            $("#ItemModeDataTable").highlight($("#Cart_ItemModel_filter").val());
                        }
                        CallShowHideData();

                        $(".text-boxPriceFormat").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
                        });
                        $(".text-boxQuantityFormat").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
                        });
                        $(".text-boxQuantityFormatSR").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: 0
                        });

                        UDFfillEditableOptionsForGrid();

                        $('.ShowAllOptions').click(function () {
                            $(this).siblings('#txtBinName').trigger("focus");
                            $(this).siblings("#txtBinName").autocomplete("search", " ");
                        });
                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
                $('#divQTYLegends').show(1000);
                $('div.top').css('left', '100px');
                $('div.top').css('position', 'relative')
            },
            "aoColumns": [
                { mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' },
                {
                    "mDataProp": null,
                    "sClass": "read_only control center",
                    "bSortable": false,
                    "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">',
                    "fnRender": function (obj, val) {
                        var tmpQuickListGuid = obj.aData.QuickListGUID;
                        if (tmpQuickListGuid == null || tmpQuickListGuid == '') {
                            return "<input type='button' value='@ResCommon.Add' onclick='return AddSingleItemToCart(this);' id='btnAddCartItem~" + obj.aData.GUID + "' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />";
                        }
                        else {
                            //return "<input type='button' value='Add' onclick='return LoadQuickListData(this)' id='btnLoad' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnQuickListGUID'  style='display:none'>" + obj.aData.QuickListGUID + "</span>";
                            return "<input type='button' value='@ResCommon.Add' onclick='return AddQuickListToSelectedModuleForCart(this)' id='btnLoad' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />"
                               + "<span id='spnQuickListGUID'  style='display:none'>" + tmpQuickListGuid + "</span>";
                        }
                    }
                },
                {
                    "mDataProp": null,
                    "bSortable": false,
                    "sClass": "read_only control center",
                    "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">',
                    "fnRender": function (obj, val) {
                        var tmpData = obj.aData;
                        if (tmpData.QuickListGUID == null || tmpData.QuickListGUID == '') {
                            if (tmpData.SerialNumberTracking == true) {
                                return "<input type='text' value='" + parseFloat(tmpData.DefaultReorderQuantity).toFixed(0) + "' class='text-boxinner numericinput' maxlength='10' id='txtQty' style='width:93%;' />";
                            }
                            else {
                                return "<input type='text' value='" + parseFloat(tmpData.DefaultReorderQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + "' class='text-boxinner numericinput' maxlength='10' id='txtQty' style='width:93%;' />";
                            }
                        }
                        else {
                            return "<input type='text' value='1' class='text-boxinner numericinput' maxlength='10' id='txtQty' style='width:93%;' />";
                            //wi-1372 add qty for QL type item
                            //return "";
                        }
                    }
                },
                {
                    "mDataProp": null,
                    "sClass": "read_only",
                    "sDefaultContent": '',
                    "bSortable": true,
                    "bSearchable": false,
                    "fnRender": function (obj, val) {
                        var itemdefaultbin = obj.aData.DefaultLocationName;
                        if (itemdefaultbin == null || itemdefaultbin == 'null' || itemdefaultbin == undefined || itemdefaultbin == "undefined") {
                            itemdefaultbin = "";
                        }
                        if ('@HasOnTheFlyEntryRight' == '@Boolean.TrueString') {
                            return '<span style="display:none">' + itemdefaultbin + '</span> <span style="position:relative"><input type="text" id="txtBinName" name="txtBinName" value="' + itemdefaultbin + '" class="text-boxinner" style="width:93%;" /><a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;" class="ShowAllOptions" ><img src="/Content/images/arrow_down_black.png" alt="select" /></a></span>';
                        }
                        else {
                            return "<span style='display:none'>" + itemdefaultbin + "</span> <select id='slctBinName' name='slctBinName' style='width:93%' class='selectBox'><option value='" + itemdefaultbin + "'>" + itemdefaultbin + "</option</select><input type='text' id='txtBinName' name='txtBinName' value='" + itemdefaultbin + "' style='display:none;' />";
                        }
                    }
                },
                {
                    "mDataProp": null,
                    "bSortable": false,
                    "sClass": "read_only control center",
                    "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">',
                    "fnRender": function (obj, val) {
                        var tmpCartType = obj.aData;
                        if (tmpCartType.IsTransfer || tmpCartType.IsPurchase) {
                            var rTypedrpbld = "<select id='slctRt' class='selectBox' style='width:93%'>";
                            if (tmpCartType.IsTransfer && tmpCartType.IsTransfer != "No") { rTypedrpbld += "<option value='Transfer'>Transfer</option>"; }
                            if (tmpCartType.IsPurchase && tmpCartType.IsPurchase != "No") { rTypedrpbld += "<option value='Purchase'>Purchase</option>"; }
                            rTypedrpbld += "</select>";
                            return rTypedrpbld;
                        }
                        else {
                            return "";
                        }
                    }
                },
                {
                    "mDataProp": "ItemType", "sClass": "read_only"
                        , "fnRender": function (obj, val) {

                            if (val == 1)
                                return "Item";
                            else if (val == 2)
                                return "Quick List";
                            else if (val == 3)
                                return "Kit";
                            else if (val == 4)
                                return "Labor";
                            else
                                return "";
                        }
                },
                {
                    "mDataProp": "ItemNumber",
                    "sClass": "read_only",
                    "sDefaultContent": '',
                    "bSortable": true,
                    "bSearchable": false,
                    "fnRender": function (obj, val) {

                        return "<span id='spnItemNumber'>" + obj.aData.ItemNumber + "</span>";
                    }
                },
                { "mDataProp": "Description", "sClass": "read_only" },
                {
                    "mDataProp": "OnHandQuantity", "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tmpOnHandQtyData = obj.aData;
                        if (tmpOnHandQtyData.OnHandQuantity != null && tmpOnHandQtyData.OnHandQuantity != NaN)
                            return "<span id='spnOnHand" + tmpOnHandQtyData.GUID + "'>" + FormatedCostQtyValues(tmpOnHandQtyData.OnHandQuantity, 2) + "</span>";
                        else
                            return "<span id='spnOnHand" + tmpOnHandQtyData.GUID + "'>" + FormatedCostQtyValues(0, 2) + "</span>";
                    }
                },
            //{ "mDataProp": "OnOrderQuantity", "sClass": "read_only" },
                {
                    "mDataProp": "OnOrderQuantity", "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        if (isNaN(parseFloat(val)))
                            val = 0;
                        val = FormatedCostQtyValues(val, 2);
                        if (val > 0) {
                            return "<a id='aOnOrderQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayOnOrderQty(this)' >" + FormatedCostQtyValues(val, 2) + "</span>";
                        }
                        else {
                            return FormatedCostQtyValues(val, 2);
                        }
                    }
                },
                {
                    "mDataProp": "SuggestedOrderQuantity", "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tmpSuggestedQtyData = obj.aData;
                        if (tmpSuggestedQtyData.SuggestedOrderQuantity != null && tmpSuggestedQtyData.SuggestedOrderQuantity != NaN)
                            return "<span id='spnSuggested" + tmpSuggestedQtyData.GUID + "'>" + FormatedCostQtyValues(tmpSuggestedQtyData.SuggestedOrderQuantity, 2) + "</span>";
                        else
                            return "<span id='spnSuggested" + tmpSuggestedQtyData.GUID + "'>" + FormatedCostQtyValues(0, 2) + "</span>";
                    }
                },
                {
                    "mDataProp": "MinimumQuantity", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        var tmpMinimumQtyData = obj.aData.MinimumQuantity;
                        if (tmpMinimumQtyData != null && tmpMinimumQtyData != NaN)
                            return "<span>" + FormatedCostQtyValues(tmpMinimumQtyData, 2) + "</span>";
                        else
                            return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                    }
                },
                {
                    "mDataProp": "MaximumQuantity", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        var tmpMaximumQtyData = obj.aData.MaximumQuantity;
                        if (tmpMaximumQtyData != null && tmpMaximumQtyData != NaN)
                            return "<span>" + FormatedCostQtyValues(tmpMaximumQtyData, 2) + "</span>";
                        else
                            return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                    }
                },
                { "mDataProp": "CategoryName", "sClass": "read_only" },
                    {
                        "mDataProp": "InventoryClassification", "sClass": "read_only"
                , "fnRender": function (obj, val) {
                    if (val == 1)
                        return "A";
                    else if (val == 2)
                        return "B";
                    else if (val == 3)
                        return "C";
                    else if (val == 4)
                        return "D";
                    else if (val == 5)
                        return "E";
                    else
                        return "";
                }
                    },
                {
                    "mDataProp": "AverageUsage", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        var tmpAverageUsageData = obj.aData;
                        if (tmpAverageUsageData.AverageUsage != null && tmpAverageUsageData.AverageUsage != NaN)
                            return "<span id='spnAverageUsage" + tmpAverageUsageData.GUID + "'>" + FormatedCostQtyValues(tmpAverageUsageData.AverageUsage, 4) + "</span>";
                        else
                            return "<span id='spnAverageUsage" + tmpAverageUsageData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
                    }
                },
                {
                    "mDataProp": "Cost", "sClass": "read_only isCost",
                    "fnRender": function (obj, val) {
                        var tmpCostData = obj.aData.Cost;
                        if (tmpCostData != null && tmpCostData != NaN)
                            return "<span>" + FormatedCostQtyValues(tmpCostData, 1) + "</span>";
                        else
                            return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                    }
                },
                { "mDataProp": "Markup", "sClass": "read_only isCost" },
                {
                    "mDataProp": "SellPrice", "sClass": "read_only isCost",
                    "fnRender": function (obj, val) {
                        var tmpSellPriceData = obj.aData.SellPrice;
                        if (tmpSellPriceData != null && tmpSellPriceData != NaN)
                            return "<span>" + FormatedCostQtyValues(tmpSellPriceData, 1) + "</span>";
                        else
                            return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                    }
                },
                {
                    "mDataProp": "ExtendedCost", "sClass": "read_only isCost",
                    "fnRender": function (obj, val) {
                        var tmpExtendedCostData = obj.aData.ExtendedCost;
                        var tmpGuid = obj.aData.GUID;
                        if (tmpExtendedCostData != null && tmpExtendedCostData != NaN)
                            return "<span id='spnExtendedCost" + tmpGuid + "'>" + FormatedCostQtyValues(tmpExtendedCostData, 1) + "</span>";
                        else
                            return "<span id='spnExtendedCost" + tmpGuid + "'>" + FormatedCostQtyValues(0, 1) + "</span>";
                    }
                },
                {
                    "mDataProp": "LongDescription", "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        return "<div class='comment more'>" + val + "</div>";
                    }
                },
                { "mDataProp": "SupplierName", "sClass": "read_only" },
                { "mDataProp": "SupplierPartNo", "sClass": "read_only" },
                { "mDataProp": "ManufacturerName", "sClass": "read_only" },
                { "mDataProp": "ManufacturerNumber", "sClass": "read_only" },
                { "mDataProp": "UPC", "sClass": "read_only" },
                { "mDataProp": "UNSPSC", "sClass": "read_only" },
                { "mDataProp": "LeadTimeInDays", "sClass": "read_only" },
                {
                    "mDataProp": "InTransitquantity", "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        if (isNaN(parseFloat(val)))
                            val = 0;
                        val = FormatedCostQtyValues(val, 2);
                        if (val > 0) {
                            return "<a id='aInTransitQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayInTransitQty(this)' >" + FormatedCostQtyValues(val, 2) + "</span>";
                        }
                        else {
                            return FormatedCostQtyValues(val, 2);
                        }
                    }
                },
                {
                    "mDataProp": "OnTransferQuantity", "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        if (isNaN(parseFloat(val)))
                            val = 0;
                        val = FormatedCostQtyValues(val, 2);
                        if (val > 0) {
                            return "<a id='aOnTransferQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayOnTransferQty(this)' >" + FormatedCostQtyValues(val, 2) + "</span>";
                        }
                        else {
                            return FormatedCostQtyValues(val, 2);
                        }
                    }
                },
                {
                    "mDataProp": "RequisitionedQuantity", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        if (isNaN(parseFloat(val)))
                            val = 0;
                        val = FormatedCostQtyValues(val, 2);
                        if (val > 0) {
                            return "<a id='aRequisitionedQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayRequisitionedQty(this)' >" + FormatedCostQtyValues(val, 2) + "</span>";
                        }
                        else {
                            return FormatedCostQtyValues(val, 2);
                        }
                    }

                },
                {
                    "mDataProp": "Turns", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        var tmpTurnsData = obj.aData.Turns;
                        if (tmpTurnsData != null && tmpTurnsData != NaN)
                            return "<span>" + FormatedCostQtyValues(tmpTurnsData, 4) + "</span>";
                        else
                            return "<span>" + FormatedCostQtyValues(0, 4) + "</span>";
                    }
                },
                {
                    "mDataProp": "CriticalQuantity", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        var tmpCriticalQtyData = obj.aData.CriticalQuantity;
                        if (tmpCriticalQtyData != null && tmpCriticalQtyData != NaN)
                            return "<span>" + FormatedCostQtyValues(tmpCriticalQtyData, 2) + "</span>";
                        else
                            return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                    }
                },
                {
                    "mDataProp": "SerialNumberTracking", "sClass": "read_only"
                        , "fnRender": function (obj, val) {
                            return GetBoolInFormat(obj, val);
                        }
                },
                {
                    "mDataProp": "LotNumberTracking", "sClass": "read_only"
                    , "fnRender": function (obj, val) {
                        return GetBoolInFormat(obj, val);
                    }
                },
                {
                    "mDataProp": "DateCodeTracking", "sClass": "read_only"
                    , "fnRender": function (obj, val) {
                        return GetBoolInFormat(obj, val);
                    }
                },
                { "mDataProp": "IsLotSerialExpiryCost", "sClass": "read_only" },
                { "mDataProp": "GLAccount", "sClass": "read_only" },
                { "mDataProp": "ID", "sClass": "read_only" },
                { "mDataProp": "PricePerTerm", "sClass": "read_only" },
                {
                    "mDataProp": "DefaultReorderQuantity", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        var tmpDefaultReorderQtyData = obj.aData.DefaultReorderQuantity;
                        if (tmpDefaultReorderQtyData != null && tmpDefaultReorderQtyData != NaN)
                            return "<span>" + FormatedCostQtyValues(tmpDefaultReorderQtyData, 2) + "</span>";
                        else
                            return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                    }
                },
                {
                    "mDataProp": "DefaultPullQuantity", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        var tmpDefaultPullQtyData = obj.aData.DefaultPullQuantity;
                        if (tmpDefaultPullQtyData != null && tmpDefaultPullQtyData != NaN)
                            return "<span>" + FormatedCostQtyValues(tmpDefaultPullQtyData, 2) + "</span>";
                        else
                            return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                    }
                },
                {
                    "mDataProp": "Trend", "sClass": "read_only"
                    , "fnRender": function (obj, val) {
                        return GetBoolInFormat(obj, val);
                    }
                },
                {
                    "mDataProp": "Taxable", "sClass": "read_only"
                    , "fnRender": function (obj, val) {
                        return GetBoolInFormat(obj, val);
                    }
                },
                {
                    "mDataProp": "Consignment", "sClass": "read_only"
                    , "fnRender": function (obj, val) {
                        return GetBoolInFormat(obj, val);
                    }
                },
                {
                    "mDataProp": "StagedQuantity", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        var tmpStagedQtyData = obj.aData.StagedQuantity;
                        if (tmpStagedQtyData != null && tmpStagedQtyData != NaN)
                            return "<span>" + FormatedCostQtyValues(tmpStagedQtyData, 2) + "</span>";
                        else
                            return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                    }
                },
                { "mDataProp": "WeightPerPiece", "sClass": "read_only" },



                { "mDataProp": "ItemUniqueNumber", "sClass": "read_only" },
                {
                    "mDataProp": "IsTransfer", "sClass": "read_only"
                        , "fnRender": function (obj, val) {
                            return GetBoolInFormat(obj, val);
                        }
                },
                    {
                        "mDataProp": "IsPurchase", "sClass": "read_only"
                        , "fnRender": function (obj, val) {
                            return GetBoolInFormat(obj, val);
                        }
                    },
                { "mDataProp": "RoomName", "sClass": "read_only" },
			    {
			        "mDataProp": "Created", "sClass": "read_only",
			        "fnRender": function (obj, val) {
			            //return GetDateInFullFormat(val);
			            return obj.aData.CreatedDate;
			        }
			    },
			    {
			        "mDataProp": "Updated", "sClass": "read_only",
			        "fnRender": function (obj, val) {
			            //return GetDateInFullFormat(val);
			            return obj.aData.UpdatedDate;
			        }
			    },
                { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                { "mDataProp": "CreatedByName", "sClass": "read_only" },
                {
                    "mDataProp": "AverageCost", "sClass": "read_only isCost",
                    "fnRender": function (obj, val) {
                        var tmpAverageCostData = obj.aData.AverageCost;
                        var tmpAvgGuid = obj.aData.GUID;
                        if (tmpAverageCostData != null && tmpAverageCostData != NaN)
                            return "<span id='spnAverageCost" + tmpAvgGuid + "'>" + tmpAverageCostData + "</span>";
                        else
                            return "<span id='spnAverageCost" + tmpAvgGuid + "'>" + 0 + "</span>";
                    }
                },
                { "mDataProp": "Link2", "sClass": "read_only" },
                { "mDataProp": "BondedInventory", "sClass": "read_only" },
                { "mDataProp": "Unit", "sClass": "read_only" },
                { "mDataProp": "AddedFrom", "sClass": "read_only" },
                { "mDataProp": "EditedFrom", "sClass": "read_only" },
                {
                    "mDataProp": "ReceivedOn", "sClass": "read_only",
                    "fnRender": function (obj, val) {
                        return obj.aData.ReceivedOnDate;
                    }
                },
			    {
			        "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
			        "fnRender": function (obj, val) {
			            return obj.aData.ReceivedOnDateWeb;
			        }
			    }
//                { "mDataProp": "ReceivedOnDate", "sClass": "read_only" },
//                { "mDataProp": "ReceivedOnDateWeb", "sClass": "read_only" }

               @(Html.RenderColumnsArray("ItemMaster", true, "Item"))
               @Html.RenderColumnsArrayEditableObject("CartItemList",isUDFOrderRequire: true)
            ]
        });

        $('.DTTT_container').css('z-index', '-1');

        if ('@isCost' == '@Boolean.FalseString') {

            //ColumnsToHideinPopUp.push(12);
            //   ColumnsToHideinPopUp.push(15);
            //   ColumnsToHideinPopUp.push(16);
            //   ColumnsToHideinPopUp.push(17);
            //   ColumnsToHideinPopUp.push(18);
            HideColumnUsingClassName("ItemModeDataTable");
            // oTable.fnSetColumnVis(12, false);
            //  oTable.fnSetColumnVis(15, false);
            //  oTable.fnSetColumnVis(16, false);
            //  oTable.fnSetColumnVis(17, false);
            //  oTable.fnSetColumnVis(18, false);
        }
    }
    function SetDefaultLocation(objParams) {

        $("#" + objParams.sInstance).find("tbody").find("tr").each(function () {
            var aPos = oTableItemModel.fnGetPosition($(this).find("td")[0]);
            var aData = oTableItemModel.fnGetData(aPos[0]);
            $(this).find("#txtBinName").val(aData.DefaultLocation);
        });
    }
    function SaveAllCartItems() {

        var AllowAddAll = false;
        if ($("#ItemModeDataTable").find("tbody").find("tr.row_selected").length <= 0) {
            showNotificationDialog();
            $("#spanGlobalMessage").removeClass('succesIcon errorIcon').addClass('WarningIcon');
            $("#spanGlobalMessage").html('@eTurns.DTO.ResCartItem.SelectOneRecrod');
            return false;
        }
        $("#ItemModeDataTable").find("tbody").find("tr.row_selected").each(function () {
            if ($(this).find("#txtQty").val() > 0) {
                AllowAddAll = true;
                return false;
            }
        });
        if (AllowAddAll) {
            var arrCartItems = [];
            $("#ItemModeDataTable").find("tbody").find("tr.row_selected").each(function (inx, trele) {
                var aPos = oTableItemModel.fnGetPosition($(trele).find("td")[0]);
                var aData = oTableItemModel.fnGetData(aPos[0]);
                var btnAdd, slctRt, arrId, txtQty, vItemGUID = "", vItemNumber = "", ReplenishType = "", vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', txtBinName, BinName;
                btnAdd = $(this).find("input[type='button'][id^='btnAddCartItem']");
                slctRt = $(this).find("select[id='slctRt']");
                txtBinName = $(this).find("input[id='txtBinName']");

                var currentRow = $(this);

                if ($(btnAdd).val() != undefined) {
                    if ($(btnAdd).attr("id").indexOf("~") != -1) {
                        //if($(btnAdd).attr("id").contains("~")) {
                        // Ql can not be added Wi-1372

                        //vItemID = arrId[1];
                        arrId = $(btnAdd).attr("id").split("~");
                        vItemGUID = aData.GUID;
                        vItemNumber = $(this).find("#spnItemNumber").text();
                        txtQty = $(this).find("#txtQty");
                        if (txtBinName != undefined) {
                            BinName = $(txtBinName).val();
                        }
                        if (slctRt != undefined) {
                            ReplenishType = $(slctRt).val();
                        }
                        if (txtQty != undefined && vItemGUID != "") {
                            trimtxtValQ = $(txtQty).val().replace(/ /g, '');
                            if (trimtxtValQ > 0) {
                                if (!isNaN(trimtxtValQ) && trimtxtValQ.length > 0 && parseFloat(trimtxtValQ) > 0) {
                                    if ($(this).find('#UDF1') != null) {
                                        if ($(this).find('#UDF1').attr("class") == 'selectBox') {
                                            vUDF1 = $(this).find('#UDF1 option:selected').text();
                                        }
                                        else {
                                            vUDF1 = $(this).find('#UDF1').val();
                                        }
                                    }

                                    if ($(this).find('#UDF2') != null) {
                                        if ($(this).find('#UDF2').attr("class") == 'selectBox') {
                                            vUDF2 = $(this).find('#UDF2 option:selected').text();
                                        }
                                        else {
                                            vUDF2 = $(this).find('#UDF2').val();
                                        }
                                    }

                                    if ($(this).find('#UDF3') != null) {
                                        if ($(this).find('#UDF3').attr("class") == 'selectBox') {
                                            vUDF3 = $(this).find('#UDF3 option:selected').text();
                                        }
                                        else {
                                            vUDF3 = $(this).find('#UDF3').val();
                                        }
                                    }

                                    if ($(this).find('#UDF4') != null) {
                                        if ($(this).find('#UDF4').attr("class") == 'selectBox') {
                                            vUDF4 = $(this).find('#UDF4 option:selected').text();
                                        }
                                        else {
                                            vUDF4 = $(this).find('#UDF4').val();
                                        }
                                    }

                                    if ($(this).find('#UDF5') != null) {
                                        if ($(this).find('#UDF5').attr("class") == 'selectBox') {
                                            vUDF5 = $(this).find('#UDF5 option:selected').text();
                                        }
                                        else {
                                            vUDF5 = $(this).find('#UDF5').val();
                                        }
                                    }
                                    arrCartItems.push({ ID: 0, ItemGUID: vItemGUID, ItemNumber: vItemNumber, BinName: BinName, Quantity: trimtxtValQ, ReplenishType: ReplenishType, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 });

                                    UDFInsertNewForGrid($(this));

                                }
                            }
                        }
                    }
                }
            });


            if (arrCartItems.length > 0) {
                var strjson = JSON.stringify(arrCartItems);
                $('#DivLoading').show();
                $.ajax({
                    "url": '@Url.Action("UpdateCartItemsBulk", "Replenish")',
                    "data": { strCartItems: strjson, IsOnlyFromUI: true },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    "type": "POST",
                    "timeout": 0,
                    success: function (response) {

                        if (response.Status == "ok") {
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            $("#spanGlobalMessage").html(response.Message);
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                            $("#ItemModeDataTable tbody tr").find("input[type='text'][id='txtQty']").val("");
                            oTable.fnDraw();
                            oTableItemModel.fnDraw();

                        }
                        else {
                            $("#spanGlobalMessage").html(response.Message);
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                        }
                        $('#DivLoading').hide();
                        RefressFilterCart("CartItemList");
                        CallNarrowfunctions();
                        //FillRedCount();
                    },
                    error: function (response) {
                        $('#DivLoading').hide();
                        $("#spanGlobalMessage").html(response.message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                });
            }
        }
        else {
            alert('@eTurns.DTO.ResCartItem.msgAddAll');
            return false;
        }
    }

    function AddSingleItemToCart(obj) {

        var arrId = obj.id.split("~");
        //var vItemID = arrId[1];
        var vItemGUID = arrId[1];
        var txtQty = $(obj).parent().parent().find("#txtQty");
        var slctRt = $(obj).parent().parent().find("#slctRt");
        var txtBinName = $(obj).parent().parent().find("#txtBinName");
        var vItemNumber = $(obj).parent().parent().find("#spnItemNumber").text();
        var ReplenishType = "";
        var BinName = "";
        if (slctRt != undefined) {
            ReplenishType = $(slctRt).val();
        }
        if (txtBinName != undefined) {
            BinName = $(txtBinName).val();
        }

        if (txtQty != undefined && vItemGUID != "") {
            var trimtxtValQ = $(txtQty).val().replace(/ /g, '');

            if (!isNaN(trimtxtValQ) && trimtxtValQ.length > 0 && parseFloat(trimtxtValQ) > 0) {
                $('#DivLoading').show();
                var vUDF1 = '';
                var vUDF2 = '';
                var vUDF3 = '';
                var vUDF4 = '';
                var vUDF5 = '';


                if ($(obj).parent().parent().find('#UDF1') != null) {
                    if ($(obj).parent().parent().find('#UDF1').attr("class") == 'selectBox') {
                        vUDF1 = $(obj).parent().parent().find('#UDF1 option:selected').text();
                    }
                    else {
                        vUDF1 = $(obj).parent().parent().find('#UDF1').val();
                    }
                }

                if ($(obj).parent().parent().find('#UDF2') != null) {
                    if ($(obj).parent().parent().find('#UDF2').attr("class") == 'selectBox') {
                        vUDF2 = $(obj).parent().parent().find('#UDF2 option:selected').text();
                    }
                    else {
                        vUDF2 = $(obj).parent().parent().find('#UDF2').val();
                    }
                }

                if ($(obj).parent().parent().find('#UDF3') != null) {
                    if ($(obj).parent().parent().find('#UDF3').attr("class") == 'selectBox') {
                        vUDF3 = $(obj).parent().parent().find('#UDF3 option:selected').text();
                    }
                    else {
                        vUDF3 = $(obj).parent().parent().find('#UDF3').val();
                    }
                }

                if ($(obj).parent().parent().find('#UDF4') != null) {
                    if ($(obj).parent().parent().find('#UDF4').attr("class") == 'selectBox') {
                        vUDF4 = $(obj).parent().parent().find('#UDF4 option:selected').text();
                    }
                    else {
                        vUDF4 = $(obj).parent().parent().find('#UDF4').val();
                    }
                }

                if ($(obj).parent().parent().find('#UDF5') != null) {
                    if ($(obj).parent().parent().find('#UDF5').attr("class") == 'selectBox') {
                        vUDF5 = $(obj).parent().parent().find('#UDF5 option:selected').text();
                    }
                    else {
                        vUDF5 = $(obj).parent().parent().find('#UDF5').val();
                    }
                }

                $.ajax({
                    "url": '@Url.Action("UpdateCartItemData", "Replenish")',
                    "data": { ID: 0, ItemGUID: vItemGUID, ItemNumber: vItemNumber, CartQty: trimtxtValQ, BinName: BinName, ReplenishType: ReplenishType, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, IsFromUI: true },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    success: function (response) {
                        if (response.Status == "ok") {
                            UDFInsertNewForGrid($(obj).parent().parent());
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            $("#spanGlobalMessage").html(response.Message);
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                            //                            $(obj).parent().parent().find("input[type='text'][id='txtQty']").val("");
                            oTable.fnDraw();
                            oTableItemModel.fnDraw();

                        }
                        else {
                            $("#spanGlobalMessage").html(response.Message);
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');

                        }
                        $('#DivLoading').hide();
                        RefressFilterCart("CartItemList");
                        CallNarrowfunctions();
                        //FillRedCount();
                    },
                    error: function (response) {
                        $('#DivLoading').hide();
                        $("#spanGlobalMessage").html(response.message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                });
            }
            else {
                alert('@eTurns.DTO.ResCartItem.msgAddSingle');
            }
        }
    }

    var optionsTW = {
        callback: function () { alert("changed search text"); },
        wait: 500,
        highlight: true,
        captureLength: 2
    }

    //$(document).on('propertychange input', "#Cart_ItemModel_filter", function () {
    //    fnFilterGlobalCIM();
    //    return false;
    //});

    var txtFilerId = 'Cart_ItemModel_filter';
        var myDataTableId = 'ItemModeDataTable';
        var $searchInAllItems = $('#' + txtFilerId);
        var $ItemModeDataTable = $('#' + myDataTableId);

        _Common.setGloblaSearch(txtFilerId, myDataTableId, function (txtSearch) {
                DoNarrowSearchIM();
            },
            function (txtSearch, keycode) {
                DoNarrowSearchIM();
            }
        );

    $("#ClearCart_ItemModel_filter").click(funClearFilterCIM);
    $('#PageNumberIM').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#GobtnIM").click();
            return false;
        }
    });

    $("#GobtnIM").click(function () {
        var pval = $('#PageNumberIM').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (pval == 0)
            return;
        oTableItemModel.fnPageChange(Number(pval - 1));
        $('#PageNumberIM').val('');
    });

    $('#refreshGridIM').live('click', function () {
        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

        oTableItemModel.fnDraw();
        //fillItemMaster(false);

    });


    //**************************** Not used Code *************************//

    $("#reordersettingIM").click(function () {
        $("#divRefreshBlockIM").toggle();
    });

    $("#ColumnOrderSetupIM").click(function () {
        $("#ColumnSortableModalIM").dialog("open");
        return false;
    });
    function GenerateColumnSortableIM() {
        $('#ColumnSortableIM li').each(function (index) {
            $(this).remove();
        });
        var div = document.createElement('div');
        div.id = "CheckAll";
        div.innerHTML = "<input type='hidden' value ='ColumnSortableIM' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
                        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
        $('div.sortableContainer').find("div#CheckAll").remove();
        $('div.sortableContainer').prepend(div);
        for (i = 0, iLen = oTableItemModel.fnSettings().aoColumns.length; i < iLen; i++) {
            var oColumn = oTableItemModel.fnSettings().aoColumns[i];
            var li = document.createElement('li');
            li.id = GetColumnIndex1(oColumn.sTitle.trim());
            li.innerHTML = oColumn.sTitle.trim();
            var LiClassName = 'ui-state-default'
            if (oColumn.sClass.indexOf('NotHide') >= 0 || (oColumn.nTh != null && oColumn.nTh.className.indexOf('NotHide') >= 0)) {
                LiClassName = LiClassName + ' HiddenLi';
            }
            li.className = LiClassName;

            if (oColumn.sClass.indexOf('NotHide') >= 0 || (oColumn.nTh != null && oColumn.nTh.className.indexOf('NotHide') >= 0)) {
                li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" disabled="disabled" />' + oColumn.sTitle.trim();
            }
            else {
                if (oColumn.bVisible) {
                    li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
                else
                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            }
            $('#ColumnSortableIM').append(li);
        }
    }
    var GetColumnIndex1 = function (ColumnName) {

        return objColumnsMI[ColumnName];
    };
    function funClearFilterCIM() {
        //Check length first
        if ($("#Cart_ItemModel_filter").val().length > 0) {
            $("#Cart_ItemModel_filter").val('');
            DoNarrowSearchIM();
            //$('#ItemModeDataTable').dataTable().fnFilter(
            //                $("#Cart_ItemModel_filter").val(),
            //                null,
            //                null,
            //                null
            //            );
        }
        $("#Cart_ItemModel_filter").focus();
        return false;
    }

    function onlyNumeric(event) {
        var charCode = (event.which) ? event.which : event.keyCode

        if (charCode > 31 && (charCode < 48 || charCode > 57 || code == 86))
            return false;

        return true;

    }

    function fnFilterGlobalCIM() {
        //set filter only if more than 2 characters are pressed

        if (typeof $("#Cart_ItemModel_filter") != 'undefined' && ($("#Cart_ItemModel_filter").val().length >= 2 || $("#Cart_ItemModel_filter").val().length == 0)) {
            var searchtext = $("#Cart_ItemModel_filter").val().replace(/'/g, "''");
            DoNarrowSearchIM();
            //$('#ItemModeDataTable').dataTable().fnFilter(
            //                searchtext,
            //                null,
            //                null,
            //                null
            //            );
        }
        else {
            //$('#ItemModeDataTable').removeHighlight();
            //$('#ItemModeDataTable').highlight($("#Cart_ItemModel_filter").val());
            $('#ItemModeDataTable').removeHighlight();
            $('#ItemModeDataTable').highlight($("#Cart_ItemModel_filter").val());
        }
    }

    function LoadQuickListData(OBJGridRow) {
        var vsQuickListGUID = $(OBJGridRow).parent().parent().find('#spnQuickListGUID').text() == "" ? "" : $(OBJGridRow).parent().parent().find('#spnQuickListGUID').text();
        var vsQuickListQty = $(OBJGridRow).parent().parent().find('#txtQty');
        var tempQtyVal = 0;
        if (vsQuickListQty != undefined)
            tempQtyVal = $(vsQuickListQty).val().replace(/ /g, '');
        else
            tempQtyVal = 0;
        if (tempQtyVal == '' || tempQtyVal == null)
            tempQtyVal = 0;

        var searchText = "QLGuid=" + vsQuickListGUID + "," + "QLQty=" + tempQtyVal;
        oTableItemModel.fnFilter(searchText, null, null, null);
        IsQLLoaded = true;
        return false;
    }

    function UpdateColumnOrderIM(_ListName) {

        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

        var _Order = $('#ColumnSortableIM').sortable("toArray");
        var __Order = _Order.toString().split(",");
        for (var i = 0; i < __Order.length; i++) {
            __Order[i] = parseFloat(__Order[i], 10);
        }

        $.ajax({
            "url": '/Master/LoadGridState',
            data: { ListName: _ListName },
            cache: false,
            "dataType": "json",
            "success": function (json) {
                if (json.jsonData != '') {
                    o = JSON.parse(json.jsonData);
                    oTableItemModel.fnSettings().oLoadedState = $.extend(true, {}, o);

                    oTableItemModel.fnSettings().oLoadedState.ColReorder = __Order;

                    var _abVisCols = [];
                    for (i = 0, iLen = oTableItemModel.fnSettings().aoColumns.length; i < iLen; i++) {
                        var checked = $("#" + i + "_").is(":checked");
                        _abVisCols.push(checked);
                    }
                    oTableItemModel.fnSettings().oLoadedState.abVisCols = _abVisCols;

                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        data: { Data: JSON.stringify(oTableItemModel.fnSettings().oLoadedState), ListName: _ListName },
                        "dataType": "json",
                        "type": "Post",
                        cache: false,
                        "async": false,
                        "success": function (json) {
                            o = json;
                            TabItemClickedCart('NewCartItem', 'frmCartItem');
                            $("#ColumnSortableModalIM").dialog("close");
                        }
                    });
                }
            }
        });

    }
    function DisplayOnOrderQty(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemOnOrderQty' }).dialog('open');
        return false;
    }

    //function DisplayOnQuoteQty(obj) {
    //    $("#ItemQty").empty();
    //    var itemGuid = obj.id.split('_');
    //    $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": 'ItemOnQuoteQty' }).dialog('open');
    //    return false;
    //}

    function DisplayOnOrderInTransitQty(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemOnOrderInTransitQty' }).dialog('open');
        return false;
    }

    function DisplayTurnsQty(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemTurnsQty' }).dialog('open');
        return false;
    }

    function DisplayAverageUsageQty(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemAverageUsageQty' }).dialog('open');
        return false;
    }

    function DisplayOnRetunQty(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemOnReturnQty' }).dialog('open');
        return false;
    }


    function DisplayInTransitQty(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemInTransitQty' }).dialog('open');
        return false;
    }

    function DisplayOnTransferQty(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemOnTransferQty' }).dialog('open');
        return false;
    }
    function DisplayOnTransferInTransitQty(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemOnTransferInTransitQty' }).dialog('open');
        return false;
    }

    function DisplayRequisitionedQty(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemOnRequisationQty' }).dialog('open');
        return false;
    }

    function DisplayStagedQuantity(obj) {
        $("#ItemQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ItemQty').data({ "itemGuid": itemGuid[1], "url": '/Inventory/ItemStagedQuantity' }).dialog('open');
        return false;
    }

    //////////////////////////////////// // new added for QL///////////////////////////////////START

    function AddQuickListToSelectedModuleForCart(obj) { // new added for QL
        $('#DivLoading').show();
        $(obj).attr("disabled", "disabled");
        SaveQuickListToSelectedModuleForCart(obj);
        return;
    }

    function SaveQuickListToSelectedModuleForCart(btn) { // new added for QL
        var vQuickListGUID = '';
        var ReplenishType = "";
        var arrItems = new Array();
        var qty = 0;
            var tr = $(btn).parent().parent();

            vQuickListGUID = $(tr).find('#spnQuickListGUID').text();
            var txtQty = $(tr).find('#txtQty');
            if (txtQty != undefined || txtQty != null)
                qty = parseFloat($(txtQty).val());

            var vUDF1 = '';
            var vUDF2 = '';
            var vUDF3 = '';
            var vUDF4 = '';
            var vUDF5 = '';

            if ($(tr).find('#UDF1') != null) {
                if ($(tr).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tr).find('#UDF1 option:selected').text();
                }
                else {
                    vUDF1 = $(tr).find('#UDF1').val();
                }
            }

            if ($(tr).find('#UDF2') != null) {
                if ($(tr).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tr).find('#UDF2 option:selected').text();
                }
                else {
                    vUDF2 = $(tr).find('#UDF2').val();
                }
            }

            if ($(tr).find('#UDF3') != null) {
                if ($(tr).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tr).find('#UDF3 option:selected').text();
                }
                else {
                    vUDF3 = $(tr).find('#UDF3').val();
                }
            }

            if ($(tr).find('#UDF4') != null) {
                if ($(tr).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tr).find('#UDF4 option:selected').text();
                }
                else {
                    vUDF4 = $(tr).find('#UDF4').val();
                }
            }

            if ($(tr).find('#UDF5') != null) {
                if ($(tr).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tr).find('#UDF5 option:selected').text();
                }
                else {
                    vUDF5 = $(tr).find('#UDF5').val();
                }
            }

        $.ajax({
            url: '@Url.Content("~/Replenish/AddQLItemsToCart")',
            data: { 'QuickListGUID': vQuickListGUID, 'Quantity': qty, "UDF1": vUDF1, "UDF2": vUDF2, "UDF3": vUDF3, "UDF4": vUDF4, "UDF5": vUDF5 },
            dataType: 'json',
            async: false,
            cache: false,
            success: function (json) {
                var errorMessage = json.Message;
                if (json.Status == "ok") {
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                }
                else {
                    $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                }

                $('#DivLoading').hide();
                $("#spanGlobalMessage").html(errorMessage);
                showNotificationDialog();
            },
            error: function (xhr) {
                $('#DivLoading').hide();
                $(btn).removeAttr("disabled");
            }
        });
    }

    //////////////////////////////////// // new added for QL///////////////////////////////////END
</script>
