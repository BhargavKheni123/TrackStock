@{
    ViewBag.Title = eTurns.DTO.ResKitMaster.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DisplayDeleteButton = false, DisplayUDFButton = false, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "KitMasterList" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "KitMaster" };

    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Kits, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Kits, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    string KitsPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Kits.pdf", DateTime.Now.Ticks);

    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Kits, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    //HelpDocumentMasterDTO objHelpDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentMaster("Kits");
    //string KitBasicVideo = "";
    //if (objHelpDTO != null)
    //{
    //    KitBasicVideo = objHelpDTO.ModuleVideoPath.Replace("../Uploads/HelpVideo/", "");
    //}
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Kits", (int)HelpDocType.Module);
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script type="text/javascript">
        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Kit/DeleteKitMasterRecords";
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var HistorySelected;
        var HistorySelectedID = 0;
        var HistorySelectedGUID = '';
        var objColumns = {};
        $(document).ready(function () {
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "150%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (!aData.IsDeleted) {
                        var crQty = (aData.CriticalQuantity !== undefined && aData.CriticalQuantity != null && aData.CriticalQuantity.length > 0 && !isNaN(parseFloat(aData.CriticalQuantity))) ? aData.CriticalQuantity : 0;
                        var mnQty = (aData.MinimumKitQuantity !== undefined && aData.MinimumKitQuantity != null && aData.MinimumKitQuantity.length > 0 && !isNaN(parseFloat(aData.MinimumKitQuantity))) ? aData.MinimumKitQuantity : 0;
                        var avQty = $(nRow).find('#spnAvailableQty').text() ? $(nRow).find('#spnAvailableQty').text() : 0;
                        if (parseFloat(avQty) < parseFloat(crQty))
                            $(nRow).attr({ 'style': 'background-color:@eTurnsWeb.Helper.SessionHelper.CriticalQuantityBackColor !Important' });
                        else if (parseFloat(avQty) < parseFloat(mnQty))
                            $(nRow).attr({ 'style': 'background-color:@eTurnsWeb.Helper.SessionHelper.MinimumQuantityBackColor !Important' });

                    }
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'KitMasterList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'KitMasterList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);

                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Kit/KitMasterListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }

                    var sortValue = "";
                    if (oSettings.aaSorting.length > 0) {
                        for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                            if (sortValue.length > 0)
                                sortValue += ", "

                            sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];
                        }
                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value":  $('#IsDeletedRecords').is(':checked') });
                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        cache: false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                    $('#divQTYLegends').show(1000);
                },
                "aoColumns": [
                    { mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: ''},
			                { "mDataProp": "ID", "sClass": "read_only" },
                            { "mDataProp": "KitPartNumber", "sClass": "read_only", "sDefaultContent": '', "bSortable": true, "bSearchable": false,
                                "fnRender": function (obj, val) {
                                    return "<a id='aEditLink' onclick='return ShowEditTabGUID(&quot;KitEdit?KitGUID=" + obj.aData.GUID + "&quot;,&quot;frmKitMaster&quot;)' href='JavaScript:void(0);'>" + val + "</a>"
                                            + "<span id='spnKitMasterID' style='display:none'>" + obj.aData.ID + "</span>"
                                            + "<span id='spnIsNotAbleToDelete' style='display:none'>" + obj.aData.IsNotAbleToDelete + "</span>"
                                            + "<span id='spnKitMasterGUID' style='display:none'>" + obj.aData.GUID + "</span>";
                                }
                            },
			                { "mDataProp": "Description", "sClass": "read_only", "sDefaultContent": ''
                                            , "fnRender": function (obj, val) {
                                                return "<div class='comment more'>" + val + "</div>";
                                            }
			                },
			                { "mDataProp": "AvailableKitQuantity", "sDefaultContent": '', "sClass": "read_only numericalign"
                                          , "fnRender": function (obj, val) {
                                              var qty = val;
                                              if (!isNaN(parseFloat(qty)) && parseFloat(qty) > 0) {
                                                  return "<span id='spnAvailableQty'>" + FormatedCostQtyValues(qty, 2) + "</span>";
                                              }
                                              return "";
                                          }
			                },
			                { "mDataProp": "AvailableWIPKit", "sClass": "read_only numericalign",
			                    "fnRender": function (obj, val) {
			                        var qty = val;
			                        if (!isNaN(parseFloat(qty)) && parseFloat(qty) > 0)
			                            return "<span id='spnAvailableWIP'>" + FormatedCostQtyValues(qty, 2) + "</span>";
			                        else
			                            return "<span id='spnAvailableWIP'></span>";
			                    }
			                },

			                { "mDataProp": "KitDemand", "sClass": "read_only numericalign",
			                    "fnRender": function (obj, val) {
			                        var qty = val;
			                        if (!isNaN(parseFloat(qty)) && parseFloat(qty) > 0)
			                            return "<span id='spnAvailableWIP'>" + FormatedCostQtyValues(qty, 2) + "</span>";
			                        else
			                            return "<span id='spnAvailableWIP'></span>";
			                    }
			                },
			                { "mDataProp": "KitCost", "sClass": "read_only numericalign isCost", "fnRender": function (obj, val) {
			                    if (parseFloat(val) != NaN && parseFloat(val) > 0) {
			                        return FormatedCostQtyValues(val, 1);
			                    }
			                    return "";
			                }
			                },
                            { "mDataProp": "NoOfItemsInKit", "sClass": "read_only numericalign" },
                            { "mDataProp": "ReOrderType", "sDefaultContent": '', "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    var reorderType = "";
                                    if (val === true)
                                        reorderType = "Re-Order";
                                    else if (val === false)
                                        reorderType = "Transfer";

                                    return "<span id='spnReOrderType'>" + reorderType + "</span>";
                                }
                            },
                            { "mDataProp": "KitCategory", "sDefaultContent": '', "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    var kitCat = "";
                                    if (val === 0)
                                        kitCat = "WIP";
                                    else if (val === 1)
                                        kitCat = "Direct";

                                    return "<span id='spnKitCategory'>" + kitCat + "</span>";
                                }

                            },
                             {
                                 "mDataProp": "CriticalQuantity", "sClass": "read_only numericalign", "fnRender": function (oDt,val) {
                                     //return '<span>' + FormatedCostQtyValues(oDt.aData.CriticalQuantity, 2) + ' </span>';
                                     var qty = val;
                                     if (!isNaN(parseFloat(qty)) && parseFloat(qty) >= 0) {
                                         return FormatedCostQtyValues(qty, 2); //return "<span>" + FormatedCostQtyValues(qty, 2) + "</span>";
                                     }
                                     return "";
                                 }
                             },
                    {
                        "mDataProp": "MinimumKitQuantity", "sClass": "read_only numericalign", "fnRender": function (oDt) {
                            var qty = oDt.aData.MinimumKitQuantity;
                            if (!isNaN(parseFloat(qty)) && parseFloat(qty) >= 0) {
                                return FormatedCostQtyValues(oDt.aData.MinimumKitQuantity, 2); //return "<span>" + FormatedCostQtyValues(qty, 2) + "</span>";
                            }
                            return "";
                            //return '<span>' + FormatedCostQtyValues(oDt.aData.MinimumKitQuantity, 2) + ' </span>';
                        }
                    },
                    {
                        "mDataProp": "MaximumKitQuantity", "sClass": "read_only numericalign", "fnRender": function (oDt) {
                            return '<span>' + FormatedCostQtyValues(oDt.aData.MaximumKitQuantity, 2) + ' </span>';
                        }
                    },
                    { "mDataProp": "Created", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.CreatedDate; } },
                    { "mDataProp": "Updated", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.UpdatedDate; } },
                    { "mDataProp": "CreatedByName", "sClass": "read_only" },
                    { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                    { "mDataProp": "RoomName", "sClass": "read_only" },
                    { "mDataProp": "AddedFrom", "sClass": "read_only" },
                    { "mDataProp": "EditedFrom", "sClass": "read_only" },
                    { "mDataProp": "ReceivedOnWeb", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.ReceivedOnWebDate; } },
                    { "mDataProp": "ReceivedOn", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.ReceivedOnDate; } }
            ]
            });
            function RenderDecimalNumber(oObj) {
                var num = new NumberFormat();
                num.setInputDecimal('.');
                num.setNumber(oObj.aData[oObj.iDataColumn]);
                num.setPlaces(this.oCustomInfo.decimalPlaces, true);
                num.setCurrency(false);
                num.setNegativeFormat(num.LEFT_DASH);
                num.setSeparators(true, this.oCustomInfo.decimalSeparator, this.oCustomInfo.thousandSeparator);
                return num.toFormatted();
            }

            $('.DTTT_container').css('z-index', '-1');
            if ('@isCost' == '@Boolean.FalseString') {
                HideColumnUsingClassName("myDataTable");
            }

        });
    </script>
}
<script type="text/javascript">
    var isTabClick = false;
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', false, true),
                    new TabClass('tab5', '@eTurns.DTO.Resources.ResLayout.Kits', 'callbackhistory();', true, true)];
    function callbacknew() { window.location.hash = '#new'; ShowNewTab('CreateKit', 'frmKitMaster'); }
    function callbackhistory() { window.location.hash = '#list'; AllowDeletePopup = true; $('#tab1').hide(); } //HistoryTabClick(); }

    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
        }

    }
    $(document).ready(function () {
        window.location.hash = '';
        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
        //SetTabView();
    });
</script>
<div class="userListingWrapper">
    <h2>
        @eTurns.DTO.ResKitMaster.PageHeader
    </h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'>
        </ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" /></a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Kits)
            @Html.Partial("NarrowSearchLayout", modelCommon)
            <div class="userContent ">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.KitPartNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.Description
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.AvailableKitQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.AvailableItemsInWIP
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.KitDemand
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.Cost                               
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.KitPartsInWIP                               
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.ReOrderType
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.KitCategory
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.CriticalQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.MinimumKitQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.MaximumKitQuantity
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RoomName
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
                @Html.Partial("_QTYLegends")
            </div>
        </div>
        <div id='CtabCL' class="tabContener">
        </div>
    </div>
</div>
<script type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
