@model eTurns.DTO.ToolMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    List<SelectListItem> lstItems = new List<SelectListItem>();
    lstItems.Add(new SelectListItem() { Text = "", Value = "" });
    lstItems.Add(new SelectListItem() { Text = "Mileage", Value = "1" });
    lstItems.Add(new SelectListItem() { Text = "Operation Hours", Value = "2" });
    List<ToolCategoryMasterDTO> lstToolcats = new List<ToolCategoryMasterDTO>();
    List<LocationMasterDTO> lstToolLocs = new List<LocationMasterDTO>();
    List<TechnicianMasterDTO> lstToolTechs = new List<TechnicianMasterDTO>();
    if (ViewBag.ToolCategoryList != null)
    {
        lstToolcats = ViewBag.ToolCategoryList;
        lstToolcats = lstToolcats.OrderBy(t => t.ToolCategory).ToList();
    }
    if (ViewBag.LocationList != null)
    {
        lstToolLocs = ViewBag.LocationList;
        lstToolLocs = lstToolLocs.OrderBy(t => t.Location).ToList();
    }
    if (ViewBag.TechnicianList != null)
    {
        lstToolTechs = ViewBag.TechnicianList;
        lstToolTechs = lstToolTechs.OrderBy(t => t.Technician).ToList();
    }
    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));
    string UNCPathRootToolPhoto = eTurns.DTO.SiteSettingHelper.ToolPhoto; // Settinfile.Element("ToolPhoto").Value;


    Int64 EnterpriseId = eTurnsWeb.Helper.SessionHelper.EnterPriceID;
    Int64 CompanyID = eTurnsWeb.Helper.SessionHelper.CompanyID;
    Int64 RoomID = eTurnsWeb.Helper.SessionHelper.RoomID;
    UNCPathRootToolPhoto = UNCPathRootToolPhoto.Replace("~", string.Empty);

    string LogoPathImage = (UNCPathRootToolPhoto + EnterpriseId + "/" + CompanyID + "/" + RoomID);
    Model.IsGroupOfItems = 1;


}
@{
    bool isUpdate;
    bool isInsert;
    bool onlyView = false;
    bool isCost = false;
    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
        onlyView = true;
    }
    else
    {
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    }
    string KitPostMethod = "../kit/ToolKitSave";
}
<style>
    .ui-autocomplete {
        max-height: 100px;
        overflow-y: auto; /* prevent horizontal scrollbar */
        overflow-x: hidden; /* add padding to account for vertical scrollbar */
        padding-right: 20px;
    }
    /* IE 6 doesn't support max-heightf
    * we use height instead, but this forces the menu to always be this tall
    */
    * html .ui-autocomplete {
        height: 100px;
    }
</style>
<script type='text/javascript' src="@Url.Content("~/Scripts/ajaxfileupload.js")"></script>
@using (Ajax.BeginForm(KitPostMethod, "kit", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", OnBegin = "onBegin", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmTool1" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@Model.ReceivedOnDateWeb)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.ReceivedOnDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="mainForm">
            <div class="editorForm">
                <ul>

                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.KitToolName)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.KitToolName, new { id = "ToolName", @class = "text-box", maxlength = 128 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.KitToolName)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.ReceivedOn)
                            @Html.HiddenFor(model => model.ReceivedOnWeb)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.CheckedOutMQTY)
                            @Html.HiddenFor(model => model.CheckedOutQTY)
                            @Html.HiddenFor(model => model.IsOnlyFromItemUI)
                            @Html.HiddenFor(model => model.Type)
                            @Html.HiddenFor(model => model.AvailableToolQty)

                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.KitToolSerial) <em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.KitToolSerial, new { id = "Serial", @class = "text-box", maxlength = 128 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.KitToolSerial)</span>
                        </div>
                    </li>
                    <li style="display:none;">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Location)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.LocationID, new SelectList(lstToolLocs, "ID", "Location", Model.LocationID), new { @class = "selectBox" })
                            @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.LocationMaster,
eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                            {
                                <a onclick="AddNewFromPopup('Tool Location');" id="btnAddToolLocation" class="addNewLink">
                                    (Add New)
                                </a>
                            }
                        </div>
                    </li>
                    <li style="display:none">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Description)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.Description, 10, 100, new { id = "Description", @class = "text-box", maxlength = 1024 })
                        </div>
                    </li>
                    @if (isCost)
                    {
                        <li style="display:none">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Cost)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Cost, new { id = "Cost", @class = "numericinput", maxlength = 128 })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Cost)</span>

                            </div>
                        </li>
                    }
                    else
                    {
                        <li style="display:none">
                            @Html.HiddenFor(t => t.Cost)
                        </li>
                    }
                    <li style="display:none">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsGroupOfItems)<em> *</em>
                        </div>
                        <div class="editor-field" style="padding: 5px">
                            @if (Model.ID > 0)
                            {
                                @(Model.IsGroupOfItems == 1 ? "Yes" : "No")
                                @Html.HiddenFor(model => model.IsGroupOfItems)
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.IsGroupOfItems, new SelectList(ViewBag.GropOfItemsBag, "ID", "Text", 1), new { @class = "selectBox", @disabled = "disabled", @onchange = "FnIsGroupOfItems();" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsGroupOfItems)</span>
                                @Html.HiddenFor(model => model.IsGroupOfItems)
                            }
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.KitToolQuantity)
                        </div>
                        <div class="editor-field" style="padding: 5px">
                            @if (Model.ID > 0 && (((Model.IsBuildBreak) == true)))
                            {
                                <span id="Qty">@(Model.KitToolQuantity)</span>
                                @Html.HiddenFor(model => model.KitToolQuantity, new { @class = "text-box numericinput" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.KitToolQuantity, new { @class = "text-box numericinput" })
                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.KitToolQuantity)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsBuildBreak)
                        </div>
                        <div class="editor-field">
                            @if (Model.ID > 0)
                            {
                                @Html.CheckBox("IsBuildBreak", (Model.IsBuildBreak ? Convert.ToBoolean(Model.IsBuildBreak) : false), new { @class = "check-box", @style = "display:none" })
                                @Html.Label(((Model.IsBuildBreak ? Convert.ToBoolean(Model.IsBuildBreak) : false) ? "Yes" : "No"), new { @style = "display:block" })
                            }
                            else
                            {
                                @Html.CheckBox("IsBuildBreak", (Model.IsBuildBreak ? Convert.ToBoolean(Model.IsBuildBreak) : false), new { @class = "check-box", @style = "display:block" })
                                @Html.Label(((Model.IsBuildBreak ? Convert.ToBoolean(Model.IsBuildBreak) : false) ? "Yes" : "No"), new { @style = "display:none" })
                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsBuildBreak)</span>
                        </div>
                    </li>

                    <li style="display:none">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.NoOfPastMntsToConsider)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.NoOfPastMntsToConsider, new { @class = "text-box", maxlenght = 2 })

                        </div>
                    </li>
                    <li style="display:none">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaintenanceDueNoticeDays)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaintenanceDueNoticeDays, new { @class = "text-box", maxlenght = 2 })

                        </div>
                    </li>
                    @*<li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.MaintenanceType)
                            </div>
                            <div class="editor-field">
                                @Html.DropDownListFor(model => model.MaintenanceType, new SelectList(lstItems, "Value", "Text"), new { @class = "selectBox" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaintenanceType)</span>
                            </div>
                        </li>*@
                    <li style="display:none">
                        <ul>
                            <li>
                                <h4>
                                    @eTurns.DTO.ResItemMaster.ImagePath
                                </h4>
                            </li>
                            <li>
                                @Html.RadioButtonFor(e => e.ImageType, "ImagePath", new { id = "ImagePath", onchange = "ShowImage(this);" })
                                @Html.Label("ImagePath", "Local Image")
                                @Html.RadioButtonFor(e => e.ImageType, "ExternalImage", new { id = "ExternalImage", onchange = "ShowImage(this);" })
                                @Html.Label("ExternalImage", "External Url")
                            </li>

                            <li id="ExternalURL">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ToolImageExternalURL)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.ToolImageExternalURL, new { @class = "text-box", maxlength = 500, @onblur = "return CheckValidURLForImage(this);" })
                                </div>
                                @Html.HiddenFor(model => Model.ToolImageExternalURL)
                            </li>
                            <li>
                                <ul>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.ImagePath)@*<em> *</em>*@
                                        </div>
                                        <div class="editor-field" style="width: 1000px;">
                                            <input name="ToolImage" id="ToolImage" type="file" />
                                            <input type="hidden" value="~/Content/images/no-image.jpg" id="currentpath" />
                                            <div style="float: left;">
                                                @if (!string.IsNullOrEmpty(Model.ImageType) && !string.IsNullOrEmpty(Model.ImagePath) && Model.ImageType.Trim().ToLower() == "imagepath")
                                                {

                                                    <img id="previewHolder" style="width:120px;height:120px;" src="@( LogoPathImage + "/" + Model.ID+ "/" + Model.ImagePath)">
                                                }
                                                else if (!string.IsNullOrEmpty(Model.ImageType) && !string.IsNullOrEmpty(Model.ToolImageExternalURL) && Model.ImageType.Trim().ToLower() == "externalimage")
                                                {
                                                    <img id="previewHolder" style="width:120px;height:120px;" src="@( Model.ToolImageExternalURL)">
                                                }
                                                else
                                                {
                                                    <img id="previewHolder" style="width: 120px; height: 120px;" alt="No Image" src="~/Content/images/no-image.jpg" />
                                                }
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                            </li>
                        </ul>

                    </li>
                    <ul id="ulkitdetails">
                        <li>
                            <h4>
                                @eTurns.DTO.ResKitToolMaster.KitDetails
                            </h4>
                            <ul>

                                <li id="liKitDetails">
                                    <div id="divKitDetails">
                                    </div>
                                </li>
                            </ul>
                        </li>
                    </ul>
                    <li id="liLocationListInline" style="display:none;">
                        <div id="divBinReplanish">
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                            @if (isInsert == true && Model.ID == 0)
                            {
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" onclick="return CheckBeforeSave();" class="CreateBtn" />
                            }
                            else if (isUpdate == true)
                            {
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" onclick="return CheckBeforeSave();" class="CreateBtn" />
                            }
                            else if (isUpdate == false && isInsert == false)
                            {
                                <script>
                                    //This is the case when archived or deleted record is being viewed..
                                    disableControls('frmTool1');
                                </script>
                            }
                        </div>
                    </li>

                </ul>
            </div>
            <div class="editorForm padRightNone">
                <ul>
                    <li style="display:none">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ToolCategory)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.ToolCategoryID, new SelectList(lstToolcats, "ID", "ToolCategory", Model.ToolCategoryID), new { @class = "selectBox" })
                            @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolCategory,
eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                            {
                                <a onclick="AddNewFromPopup('Tool Category');" id="btnAddToolCategory" class="addNewLink">
                                    (Add New)
                                </a>
                            }
                        </div>
                    </li>

                    @*<li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Technician)
                            </div>
                            <div class="editor-field">
                                @Html.DropDownListFor(model => model.TechnicianGuID, new SelectList(lstToolTechs, "GUID", "Technician", Model.TechnicianGuID), new { @class = "selectBox" })
                                @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster,
                                eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                                {
                                    <a onclick="AddNewFromPopup('Tool Technician');" id="btnAddToolTechnician" class="addNewLink">
                                        (Add New)
                                    </a>
                                }
                            </div>
                        </li>*@
                    @Html.Partial("UDFLayout", new eTurns.DTO.ResToolMaster())

                </ul>
            </div>
        </div>
    </div>
}
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmTool1");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
    });
    $("span#Qty").text(FormatedCostQtyValues($("span#Qty").text(), 2));
</script>
<script language="javascript" type="text/javascript">
    var ToolImageType = '@Model.ImageType';
    var Inventory_LoadLocationsofTool = '@Url.Action("LoadLocationsofTool", "Kit")';
     var ToolID = '@Model.ID';
    var ToolGUID = '@Model.GUID';
    var Tool_SavetoSeesionBinReplanishSingle = '@Url.Action("SavetoSeesionBinReplanishSingle", "Kit")';
    var Inventory_SavetoSeesionBinReplanishSingleNew = '@Url.Action("SavetoSeesionBinReplanishSingleNew", "Kit")';
    var Inventory_DeletetoSeesionBinReplanishSingle = '@Url.Action("DeletetoSeesionBinReplanishSingle", "Kit")';
    function onSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();
        GetToolsNarrowSearchData(false, false, 'KitToolMaster', 'KitList');
        CallNarrowfunctions();
        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#ToolName").val("");
            $("#ToolName").focus();
        }
        else if (idValue == 0) {
            $("#ToolName").val("");
            $("#ToolName").focus();

            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                //clearControls('frmTool');
                //setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');

                if ($("#ToolImage").val() != "") {
                    ajaxFileUpload(response.ToolID);
                }
                clearControls('frmTool');
                ShowNewTab('CreateToolKit', 'frmTool');
            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#Serial").focus();
            }
            else {
                if ($("#ToolImage").val() != "") {
                    ajaxFileUpload(response.ToolID);
                }
                clearControls('frmTool');
                SwitchTextTab(0, 'CreateToolKit', 'frmTool');
            }
        }
    }
    function ajaxFileUpload(retid) {
        //starting setting some animation when the ajax starts and completes
        $("#loading")
    .ajaxStart(function () {
        $(this).show();
    })
    .ajaxComplete(function () {
        $(this).hide();
    });

        $.ajaxFileUpload
    (
        {
            url: '/api/fileupload/PostToolFile/' + retid,
            secureuri: false,
            type: "POST",
            fileElementId: 'ToolImage',
            dataType: 'json',
            success: function (data, status) {
                //  window.location.reload();
            },
            error: function (data, status, e) {
                //    window.location.reload();
            }
        }
    )
        return false;
    }

    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#ToolName").focus();
    }

    function FnIsGroupOfItems() {
        if ($("#IsGroupOfItems option:selected")[0].value == 0) { // 0 means false
            $("#Quantity").attr("readonly", true);
            $("#Quantity").val('1');
        }
        else
            $("#Quantity").attr("readonly", false);
    }

    function onlyNumeric(event) {
        var charCode = (event.which) ? event.which : event.keyCode

        if (charCode > 31 && (charCode < 48 || charCode > 57 || code == 86))
            return false;

        return true;

    }


    function CheckBeforeSave() {
        //if ($("input#ToolImageExternalURL").val() != '') {
        //    if(!CheckValidURLForImage($("input#ToolImageExternalURL")))
        //    {
        //        $("input#ToolImageExternalURL").val('');
        //        return false;
        //    }
        //}
        var tmpCheckedOutMQTY = parseInt($('#CheckedOutMQTY').val() == '' ? 0 : $('#CheckedOutMQTY').val(), 10);
        var tmpCheckedOutQTY = parseInt($('#CheckedOutQTY').val() == '' ? 0 : $('#CheckedOutQTY').val(), 10);
        var tmpQuantity = parseInt($('#Quantity').val() == '' ? 0 : $('#Quantity').val(), 10);

        if (tmpQuantity == 0) {
            //$('div#target').fadeToggle();
            //$("div#target").delay(2000).fadeOut(200);
            showNotificationDialog();
            $("#spanGlobalMessage").html('@ResToolMaster.InvalidQuantity');
            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
            return false;
        }
        else if (tmpQuantity < (tmpCheckedOutMQTY + tmpCheckedOutQTY)) {
            //$('div#target').fadeToggle();
            //$("div#target").delay(2000).fadeOut(200);
            showNotificationDialog();
            $("#spanGlobalMessage").html('@ResToolMaster.QuantityGreaterThancheckedOutQty' + (tmpCheckedOutMQTY + tmpCheckedOutQTY));
            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
            return false;
        }
        else
            return true;
    }

    $(document).ready(function () {
        $('form').areYouSure();
        if (ToolImageType == 'ImagePath' || ToolImageType == '') {
            $("#ToolImage").show();
            $("#ExternalURL").hide();
        }
        else {
            $("#ToolImage").hide();
            $("#ExternalURL").show();
        }
        $("#ToolImage").change(function () {
            readURL(this);
        });
        //$.ajaxSetup({
        //    beforeSend: function (req) {
        //        $('#DivLoading').show();
        //    },
        //    complete: function (req) {
        //        $('#DivLoading').hide();
        //    }
        //});

        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });

        $('#btnCancel').click(function (e) {
            //            if (IsRefreshGrid)
            $('#NarroSearchClear').click();
            SwitchTextTab(0, 'ToolCreate', 'frmTool');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();
            }

        });

        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
       // setTimeout(function () { BindBinReplanish(); }, 300);
    });
</script>
<div id="ItemModelPS">
</div>
<div id="NewMasterPopUP">
</div>
<script type="text/javascript">
    var Tool_LoadToolKitModel = '@Url.Action("LoadToolKitModel", "Kit")';
    var Tool_SaveKitQty = '@Url.Action("SaveToolKitQty", "Kit")';
    var Tool_LoadKitComponentofItem = '@Url.Action("LoadToolKitComponentofItem", "Kit")';
    var ToolGUID = '@Model.GUID';
    var ToolID = '@Model.ID';
    var Tool_DeletetoSeesionToolKitComponentSingle = '@Url.Action("DeletetoSeesionToolKitComponentSingle", "Kit")';
    $("#NewMasterPopUP").dialog({
        autoOpen: false,
        show: "blind",
        hide: "explode",
        height: 600,
        width: 800,
        modal: true,
        open: function () {
            $(this).parent().find("span.ui-dialog-title").html("Add New " + $(this).data("data"));
        },
        close: function () {
            $('#DivLoading').show();
            RefreshDropdownList($(this).data("data"), $(this).data("IDVal"));
            $(this).data("data", null);
            $(this).data("IDVal", null);
            $(this).parent().find("span.ui-dialog-title").html('');
        }
    });
    function AddNewFromPopup(PopupFor) {
        $('#DivLoading').show();
        var _URL = ''
        if (PopupFor == 'Tool Category') {
            _URL = '@Url.Action("../Master/ToolCategoryCreate")';
        }
        else if (PopupFor == 'Tool Location') {
            _URL = '@Url.Action("../Master/LocationCreate")';
        }
        else if (PopupFor == 'Tool Technician') {
            _URL = '@Url.Action("../Master/TechnicianCreate")';
        }
        else {
            return false;
        }
        $('#NewMasterPopUP').load(_URL, function () {
            $('#NewMasterPopUP').data("data", PopupFor).dialog('open');
            $('#DivLoading').hide();
        });
    }
    function RefreshDropdownList(PopupFor, IDVal) {
        if (IDVal != undefined) {
            var _ControlID = '';
            if (PopupFor == 'Tool Category') {
                _ControlID = "ToolCategoryID";
            }
            else if (PopupFor == 'Tool Location') {
                _ControlID = "LocationID";
            }
            var arrdata = IDVal.split("~");
            var listData = $('select[id*="' + _ControlID + '"]');
            $(listData).each(function () {
                $(this).append($("<option />").val(arrdata[0]).text(arrdata[1]));
            });
        }
        $('#DivLoading').hide();
    }
    function CheckValidURLForImage(curobj) {
        var strURL = $(curobj).val();

        if (strURL != '' && strURL != null) {
            $("<img>", {
                src: strURL,
                error: function () {
                    $(curobj).val("");
                    alert('@ResCommon.InvalidURL');
                    curobj.focus();
                    return false;
                },
                load: function () {
                    $('#previewHolder').attr('src', strURL);
                }
            });
        }
        else {
            $('#previewHolder').attr('src', '/Content/images/no-image.jpg');
        }
        return false;
    }
    function ShowImage(currentRadio) {
        var currentId = $(currentRadio).attr("id");

        if (currentId == "ImagePath") {
            $("#ToolImage").show();
            $("#ExternalURL").hide();
            setImagePath();
        }
        else {
            CheckValidURLForImage($("input#ToolImageExternalURL"));

            $("#ToolImage").hide();
            $("#ExternalURL").show();

        }
    }
    function setImagePath() {
        $('#previewHolder').attr('src', $("input#currentpath").val());
    }
    function readURL(input) {

        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var filePath = $("#currentpath").val().split('\\').pop();

                if (filePath.toString().indexOf("&") >= 0 || filePath.toString().indexOf("<") >= 0 || filePath.toString().indexOf(">") >= 0
                    || filePath.toString().indexOf("*") >= 0 || filePath.toString().indexOf(":") >= 0
                    || filePath.toString().indexOf("?") >= 0) {
                    alert("Please select correct file name.");
                    $("input#currentpath").val('');
                }
                else {
                    $('#previewHolder').attr('src', e.target.result);
                    $("input#currentpath").val(e.target.result);
                }
            }

            reader.readAsDataURL(input.files[0]);
        }
    }
    $(document).ready(function () {
        BindKitDetails();

        $("#divKitDetails").on("change", "input[type='text'][id='txtQuantityPerKit']", function () {
            var curobj = $(this);
            var itmguid = $(curobj).parent().parent().find("input[type='hidden'][id='hdnToolItemGUID']").val();


            $.ajax({
                type: "POST",
                url: Tool_SaveKitQty,
                contentType: 'application/json',
                dataType: 'json',
                data: "{QuantityPerKit:'" + $(curobj).val() + "',ToolItemGuid:'" + itmguid + "'}",
                success: function (retdt) {

                },
                error: function (err) {
                    //
                    alert("There is some Error");
                }
            });
        });
        $("#ItemModelPS").dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '82%',
            height: 710,
            title: "Add Tool Component to Tool Kit",
            open: function () {
                $('#DivLoading').show();
                $("#ItemModelPS").load($(this).data("url"));
            },
            close: function () {
                clearNarrowSearchFilterTM();

                BindKitDetails();//console 3
            }
        });
    });
    function BindKitDetails() {
        $('#ulkitdetails').show();
        $('#divKitDetails').empty();
        $('#DivLoading').show();
        $.get(Tool_LoadKitComponentofItem + '?ToolGUID=' + ToolGUID + '&AddCount=0', function (data) {
            $('#divKitDetails').html(data);
            $('#DivLoading').hide();
        });
    }
    $("input#IsBuildBreak").click(function () {

        if($(this).is(":checked"))
        {
            $("input#KitToolQuantity").val('');
            $("input#KitToolQuantity").prop("readonly", "readonly").addClass("disableBack");
        }
        else {
            $("input#KitToolQuantity").val('');
            $("input#KitToolQuantity").removeProp("readonly", "readonly").removeClass("disableBack");
        }
    });
    $("form").submit(function (e) {

        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), 0);
        }
        e.preventDefault();
    });
    function BindBinReplanish() {
        $('#divBinReplanish').empty();
        $('#DivLoading').show();
        $.get(Inventory_LoadLocationsofTool + '?ToolGUID=' + ToolGUID + '&AddCount=0', function (data) {
            $('#divBinReplanish').html(data);

            // alert('hi');
            // DisableLocationTextboxForBOM('True');
            $('#DivLoading').hide();
        });
    }
    function onBegin(xhr) {

       
    }
    _Common.addRequiredSign();
</script>
