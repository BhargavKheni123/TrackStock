@model eTurns.DTO.KitMasterDTO
@{
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayDeleteButton = true, DisplaySaveButton = false, DisplayPrintBlock = false, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = false, DisplayColumnSetupButton = false, ColumnSetupFor = "OrderLineItem", DisplayContextMenu = false };
}
<div class="userListingWrapper">
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99.5%">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search</span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="QLItem_filter" />
                        <a href="" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_QLItem_filter" /></a>
                    </div>
                </div>
                <input type="button" id="btnDiv" value="Div" style="visibility: hidden" />
            </div>
            @Html.QuickListItemsGridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Kits)
            <div class="userContent" style="width: 99% !important; margin-left: 5px !important;
                float: left;">
                <table id="KitLineItem@(Model.ID)" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ItemNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.QuantityPerKit
                            </th>
                            <th>
                                @if (Model.KitCategory.GetValueOrDefault(0) == 0)
                                {
                                    @eTurns.DTO.ResKitMaster.AvailableItemsInWIP
                                }
                                else
                                {
                                    @*@eTurns.DTO.ResKitMaster.QuentityToBuildKit*@
                                }
                            </th>
                            <th>
                                @eTurns.DTO.ResKitMaster.QuantityReadyForAssembly
                            </th>
                            <th>
                            </th>
                            <th>
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.OnHandQuantity
                            </th>
                            <th>
                                @*@eTurns.DTO.ResKitMaster.QuentityNeededToMeetDemand*@
                            </th>
                            <th>
                                @*@eTurns.DTO.ResItemMaster.MinimumQuantity*@
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.MaximumQuantity
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="dialog" id="mdlKLIYesNo" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.DeleteConfirm</p>
        <a href="JavaScript:void{}" id="btnKLIYes" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes</a><a href="javascript:void(0)" class="no"
                onclick="closeConfirmModal()">
                <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo</a>
    </div>
</div>
<div id="QtyMoveInMoveOutModel">
</div>
<script type="text/javascript">
    var KLIObjectTable = 'KitLineItem' + '@Model.ID';
    var ColumnObject = new Array();
    var oTableKitItem;
    var IsDeleteKLIPopupOpen = false;
    var AllowKLIDeletePopup = true;

    $(document).ready(function () {


        ColumnObject.push({ mDataProp: "ItemDetail.ID", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "ItemDetail.ItemNumber", sClass: "read_only", fnRender: function (obj, val) {
            return "<span id='spnItemNummber'>" + val + "</span>" + "<span id='spnID'  style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnKitItemID'  style='display:none'>" + obj.aData.ItemDetail.ID + "</span>";
        }
        });
        ColumnObject.push({ mDataProp: "QuantityPerKit", "bSortable": false, fnRender: function (obj, val) {
            return "<input id='txtQuentityPerKit' style='width:60px' onkeydown='return OnlyNumericKitQty(event,this);' type='text' value='" + val + "'/>";
        }
        });
        ColumnObject.push({ mDataProp: "AvailableItemsInWIP", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "QuantityReadyForAssembly", sClass: "read_only" });

        ColumnObject.push({ sDefaultContent: "Move In", "bSortable": false, sClass: "read_only", fnRender: function (obj, val) {
            if ('@Model.KitCategory.GetValueOrDefault(0)' == 0)
                return "<a id='aMoveIn_" + obj.aData.ItemDetail.ID + "' style='cursor: pointer;' herf='javascript:void(0)' onclick='return MoveInLocation(" + obj.aData.ItemDetail.ID + "," + obj.aData.ItemDetail.DefaultLocation + "," + obj.aData.ID + ") '>" + '@eTurns.DTO.ResKitMaster.MoveIn' + "</a>";
            else if ('@Model.KitCategory.GetValueOrDefault(0)' == 1)
                return "<a id='aMoveIn_" + obj.aData.ItemDetail.ID + "' style='cursor: pointer;' herf='javascript:void(0)' onclick='return MoveInLocation(" + obj.aData.ItemDetail.ID + "," + obj.aData.ItemDetail.DefaultLocation + "," + obj.aData.ID + ") '>Add</a>";
        }
        });

        ColumnObject.push({ sDefaultContent: "Move Out", "bSortable": false, sClass: "read_only", fnRender: function (obj, val) {
            if ('@Model.KitCategory.GetValueOrDefault(0)' == 0)
                return "<a id='aMoveOut_" + obj.aData.ItemDetail.ID + "' style='cursor: pointer;' herf='javascript:void(0)' onclick='return MoveOutLocation(" + obj.aData.ItemDetail.ID + "," + obj.aData.ItemDetail.DefaultLocation + "," + obj.aData.ID + ")  '> " + '@eTurns.DTO.ResKitMaster.MoveOut' + "</a>";
            else if ('@Model.KitCategory.GetValueOrDefault(0)' == 1)
                return "<a id='aMoveOut_" + obj.aData.ItemDetail.ID + "' style='cursor: pointer;' herf='javascript:void(0)' onclick='return MoveOutLocation(" + obj.aData.ItemDetail.ID + "," + obj.aData.ItemDetail.DefaultLocation + "," + obj.aData.ID + ")  '>Remove</a>";
        }
        });

        ColumnObject.push({ "mDataProp": "ItemDetail.OnHandQuantity", "sClass": "read_only" });
        ColumnObject.push({ mDataProp: "QuentityNeededToMeetDemand", sClass: "read_only", fnRender: function (obj, val) {
            var TotalNeededQty = ($(obj.aData.QuantityPerKit).val() * '@Model.KitDemand') - obj.aData.AvailableItemsInWIP;
            return TotalNeededQty.toString();
        }
        });
        ColumnObject.push({ "mDataProp": "ItemDetail.MinimumQuantity", "sClass": "read_only" });
        ColumnObject.push({ "mDataProp": "ItemDetail.MaximumQuantity", "sClass": "read_only" });
        //PrepareDataTable("KitLineItem", ItemUniqueID, '@Url.Content("~/Kit/GetKitLineItems")', 'KitLineItem', ColumnObject, '@Url.Content("~/Kit/DeleteKitLineItem")');
        oTableKitItem = $('#' + KLIObjectTable).dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "150%",
            "sDom": '<"top"lp<"clear">>rt<"bottom"i<"clear">>',
            "aaSorting": [[1, "asc"]],
            "oColReorder": {},
            "bAutoWidth": false,
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "bServerSide": true,
            "fnStateSaveParams": function (oSettings, oData) {
                $.ajax({
                    "url": "/Master/SaveGridState",
                    data: { Data: JSON.stringify(oData), ListName: 'KitLineItem' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": "/Master/LoadGridState",
                    data: { ListName: 'KitLineItem' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "sAjaxSource": '@Url.Content("~/Kit/GetKitLineItems")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                aoData.push({ "name": "ItemID", "value": '@Model.ID' });

                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                aoData.push({ "name": "ParentID", "value": '@Model.ID' });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        UpdateAvailableWIP();
                    }
                })
            },
            "aoColumns": ColumnObject
        }).makeEditable();


        $(document).keyup(function (e) {
            if (AllowKLIDeletePopup == true) {
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code == 46) {
                    closeModal();
                    $('#deleteRows1').click();
                }
                if (code == 89 && IsDeleteKLIPopupOpen == true) {
                    $("#btnQLModelYes").click();
                    IsDeleteKLIPopupOpen = false;
                }
                else if (code == 78 && IsDeleteKLIPopupOpen == true) {
                    QLcloseModal();
                    IsDeleteKLIPopupOpen = false;
                }
            }
        });


        $("#QtyMoveInMoveOutModel").dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '36%',
            height: 380,
            title: 'Move Items Quantity',
            open: function () {
                var data = $(this).data("data");
                var arr = data.split('_');
                $("#QtyMoveInMoveOutModel").load('@Url.Action("MoveInMoveOutQty")' + '?itemID=' + arr[0] + '&DefaultLocation=' + arr[1] + '&isMoveIn=' + arr[2] + '&KitDetailID=' + arr[3], function () {
                    $('#DivLoading').hide();
                });
            },
            close: function () {
                // CallThisFunctionFromModel('success');
            }
        });

    });

   
</script>
<script type="text/javascript">

    $('#deleteRows1').click(function () {
        @*if ('@Model.AvailableKitQuentity' <= 0) {*@
        if (0 <= 0) {
            var tbl = $("#" + KLIObjectTable).dataTable();

            var anSelected = fnGetSelected1(tbl);
            var stringIDs = "";
            for (var i = 0; i <= anSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnKitItemID').text() + ",";
            }
            if (anSelected.length !== 0) {
                $('#mdlKLIYesNo').modal();
                IsDeleteKLIPopupOpen = true;
            }
        }
    });

    $("#btnKLIYes").click(function () {

        var tbl = $("#" + KLIObjectTable).dataTable();
        var anSelected = fnGetSelected1(tbl);
        var stringIDs = "";
        for (var i = 0; i <= anSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anSelected[i]).find('#spnKitItemID').text() + ",";
        }
        if (anSelected.length !== 0) {

            $.ajax({ 'url': '@Url.Content("~/kit/DeleteKitLineItem")',
                data: { ids: stringIDs },
                success: function (response) {
                    if (response == "ok") {
                        for (var i = 0; i <= anSelected.length - 1; i++) {
                            tbl.fnDeleteRow(anSelected[i]);
                        }

                        if (anSelected.length > 0)
                            $("#spanGlobalMessage").html("@ResCommon.RecordDeletedSuccessfully".replace("{0}","(" + anSelected.length + ")"));


                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                },
                error: function (response) {
                }
            });
            QLcloseModal();
            IsDeleteKLIPopupOpen = false;
        }
    });


    $('#' + KLIObjectTable + ' tbody tr').live('touchstart click', function () {
        $(this).toggleClass('row_selected');
        return false;
    });


    $("#QLItem_filter").keyup(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
        }
        else {
            fnFilterGlobal1();
        }
    });


    $("#QLItem_filter").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            var searchtext = $("#QLItem_filter").val().replace(/'/g, "''");
            oTableKitItem.fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
            return false;
        }
    });

    $("#clear_QLItem_filter").click(funClearFilter1);

    $('#PageNumber1').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#Gobtn1").click();
            return false;
        }
    });

    $("#Gobtn1").click(function () {
        var pval = $('#PageNumber1').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (pval == 0)
            return;

        oTableKitItem.fnPageChange(Number(pval - 1));
        $('#PageNumber1').val('');
    });



    function CallThisFunctionFromModel(msg) {
        if (msg == 'success') {
            $("#" + KLIObjectTable).DataTable().fnDraw();
            UpdateAvailableWIP();
        }
        else if (msg.Status == 'fail') {
            alert(json.Message);
            return false;
        }
    }

    function MoveInLocation(itemId, itemDefaultLocation,ID) {

        if (itemDefaultLocation != null) {
            $('#QtyMoveInMoveOutModel').data("data", itemId + '_' + itemDefaultLocation + '_' + true + '_' + ID).dialog('open')
        }
        else {
            $('#QtyMoveInMoveOutModel').data("data", itemId + '_0' + '_' + true + '_' + ID).dialog('open')
        }
        return false;
    }

    function MoveOutLocation(itemId, itemDefaultLocation) {

        if (itemDefaultLocation != null) {
            $('#QtyMoveInMoveOutModel').data("data", itemId + '_' + itemDefaultLocation + '_' + false + '_' + ID).dialog('open')
        }
        else {
            $('#QtyMoveInMoveOutModel').data("data", itemId + '_0' + '_' + false + '_' + ID).dialog('open')
        }

        return false;
    }


    function UpdateAvailableWIP() {
        var readyforass = -1;
        var AvailabeInGeneralInvtr = -1;

        $("#" + KLIObjectTable + ' tbody tr').each(function () {
            if ($(this).find('td').length > 1) {
                var tempreadyforass = $(this).find('td')[4].innerHTML;
                if (parseFloat(readyforass) == -1 || parseFloat(tempreadyforass) < parseFloat(readyforass)) {
                    readyforass = parseInt(tempreadyforass);
                }

                var onHandQtry = $(this).find('td')[7].innerHTML;
                var qtyReadyForAssmbly = $(this).find('#txtQuentityPerKit').val();
                var tempAvailabeInGeneralInvtr = parseFloat(onHandQtry) / parseFloat(qtyReadyForAssmbly)
                if (parseFloat(AvailabeInGeneralInvtr) == -1 || parseFloat(tempAvailabeInGeneralInvtr) < parseFloat(AvailabeInGeneralInvtr))
                    AvailabeInGeneralInvtr = parseInt(tempAvailabeInGeneralInvtr);

            }
        });
        $('#txtAWIP').val(readyforass);
        $('#txtAQGI').val(AvailabeInGeneralInvtr);
    }


    function fnGetSelected1(oTableLocal) {
        return oTableLocal.$('tr.row_selected');
    }


    function closeConfirmModal() {
        $.modal.impl.close();
    }

    function fnFilterGlobal1() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#QLItem_filter") != 'undefined' && ($("#QLItem_filter").val().length > 2 || $("#QLItem_filter").val().length == 0)) {
            var searchtext = $("#QLItem_filter").val().replace(/'/g, "''");
            oTableKitItem.fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
        }
        else {
            $('#' + KLIObjectTable + ' td').removeHighlight();
            $('#' + KLIObjectTable + ' td').highlight($("#QLItem_filter").val());
        }
    }


    function funClearFilter1() {
        //Check length first
        if ($("#QLItem_filter").val().length > 0) {
            $("#QLItem_filter").val('');
            oTableKitItem.fnFilter(
                            $("#QLItem_filter").val(),
                            null,
                            null,
                            null
                        );
        }
        $("#QLItem_filter").focus();
        return false;
    }

    function OnlyNumericKitQty(e, obj) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code === 13 || code === 100) {
            $.ajax({ url: '@Url.Content("~/Kit/UpdateKitItemQty")'
                                        , type: 'GET'
                                        , cache: false
                                        , data: { 'ItemID': $(obj.parentNode.parentNode).find("#spnKitItemID").text(), 'value': $(obj).val() }
                                        , success: function (result) {
                                            CallThisFunctionFromModel('success');
                                        }
                                        , error: function (xhr) {
                                            alert(xhr);
                                        }
            });

        }
        else if (code > 95 && code < 106) {
            return tru;
        }
        else if (code > 31 && (code < 48 || code > 57)) {
            return false;
        }
    }
</script>
