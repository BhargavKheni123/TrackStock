@model eTurns.DTO.KitMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
<div class="userHead">
    @{             
        bool isUpdate;
        bool isInsert;
        if (ViewBag.ViewOnly == true)
        {
            isUpdate = false;
            isInsert = false;
        }
        else
        {
            isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Kits, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
            isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Kits, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        }
    }
    @using (Ajax.BeginForm("SaveKit", "Kit", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmKitMaster" }))
    {                                
        @Html.ValidationSummary(true)        
        if (Model.ID != 0)
        {        
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.Created)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    : <span>@(Model.Updated)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
         
        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContent" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px">
                <div id="CollapsedContent">
                    <ul>
                        <li>
                            <label for="label" style="width: 50px; float: left;">
                                @eTurns.DTO.ResKitMaster.KitPartNumber
                            </label>
                            : <span>@*<input class="text-box" id="txtKPN"   value='@Model.KitPartNumber' type="text" disabled="disabled" />*@
                                @Html.TextBoxFor(model => model.KitPartNumber, new { @id = "txtKitPartNumber", @class = "text-box", @readonly = "readonly" })
                            </span></li>
                        <li>
                            <label for="label" style="width: 50px; float: left;">
                                @eTurns.DTO.ResKitMaster.AvailableKitQuentity
                            </label>
                            : <span>@*<input class="text-box" id="txtAQ" style="width: 60px;" type="text"    value='@Model.AvailableKitQuentity' />*@
                                @Html.TextBoxFor(model => model.AvailableKitQuentity, new { @id = "txtAQ", @readonly = "readonly", @class = "text-box", @style = "width: 60px;" })
                            </span></li>
                        <li>
                            <label for="label" style="width: 50px; float: left;">
                                @eTurns.DTO.ResKitMaster.KitDemand
                            </label>
                            : <span>@*<input class="text-box" id="txtDQ" style="width: 60px;"  type="text" value='@Model.KitDemand'   />*@
                                @Html.TextBoxFor(model => model.KitDemand, new { @id = "txtDQ", @readonly = "readonly", @class = "text-box", @style = "width: 60px;" })
                            </span></li>
                        <li>
                            <label for="label" style="width: 50px; float: left;">
                                @*@eTurns.DTO.ResKitMaster.AvailableWIPKit*@
                                @if (Model.KitCategory.GetValueOrDefault(0) == 0)
                                {
                                    @eTurns.DTO.ResKitMaster.AvailableWIPKit
                                }
                                else
                                {
                                    @eTurns.DTO.ResKitMaster.QuentityToBuildKit
                                }
                            </label>
                            : <span>@*<input class="text-box" id="txtAWIP" style="width: 60px;"   type="text" value='@Model.AvailableWIPKit'  />*@
                                @Html.TextBoxFor(model => model.AvailableWIPKit, new { @id = "txtAWIP", @readonly = "readonly", @class = "text-box", @style = "width: 60px;" })
                            </span></li>
                        <li>
                            <label for="label" style="width: 100px; float: left;">
                                @eTurns.DTO.ResKitMaster.AvailableInGeneralInventory
                            </label>
                            : <span>@* <input class="text-box" id="txtAQGI" style="width: 60px;"  type="text" value='@Model.AvailableInGeneralInventory' disabled="disabled" />*@
                                @Html.TextBoxFor(model => model.AvailableInGeneralInventory, new { @id = "txtAQGI", @readonly = "readonly", @class = "text-box", @style = "width: 60px;" })
                            </span></li>
                    </ul>
                </div>
                <div id="ExpandedContent" style="display: none">
                    <ul>
                        <li style="border: none">
                            <div class="editorForm">
                                <ul>
                                    <li>
                                        <div class="editor-label">
                                            <em>* </em>@Html.LabelFor(model => model.KitPartNumber)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.KitPartNumber, new { id = "txtKitPartNumber", @readonly = "readonly", @class = "text-box", maxlength = 128 })
                                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.KitPartNumber)</span>
                                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                                            @Html.HiddenFor(model => model.GUID)
                                            @Html.HiddenFor(model => model.Created)
                                            @Html.HiddenFor(model => model.Updated)
                                            @Html.HiddenFor(model => model.CreatedBy)
                                            @Html.HiddenFor(model => model.LastUpdatedBy)
                                            @Html.HiddenFor(model => model.CompanyID)
                                            @Html.HiddenFor(model => model.Room)
                                            @Html.HiddenFor(model => model.RoomName)
                                            @Html.HiddenFor(model => model.CreatedByName)
                                            @Html.HiddenFor(model => model.UpdatedByName)
                                            @Html.HiddenFor(model => model.IsDeleted)
                                            @Html.HiddenFor(model => model.IsArchived)
                                            @Html.HiddenFor(model => model.IsKitBuildAction)
                                            @Html.HiddenFor(model => model.IsKitBreakAction)
                                        </div>
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.Description)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextAreaFor(model => model.Description, new { id = "txtDescription", @class = "text-box", maxlength = 1024 })
                                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Description)</span>
                                        </div>
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.MinimumKitQuentity)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.MinimumKitQuentity, new { id = "txtMinimumKitQuentity", onkeydown = "javascript:return OnlyNumeric(event,this);", @class = "text-box", maxlength = 5 })
                                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MinimumKitQuentity)</span>
                                        </div>
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.MaximumKitQuentity)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.MaximumKitQuentity, new { id = "txtMaximumKitQuentity", onkeydown = "javascript:return OnlyNumeric(event,this);", @class = "text-box", maxlength = 10 })
                                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaximumKitQuentity)</span>
                                        </div>
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.ReOrderType)
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownListFor(model => model.ReOrderType, new SelectList(ViewBag.ReOrderTypeList, "typeValue", "ReOrderType"), new { style = "width:80px" })
                                        </div>
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.KitCategory)
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownListFor(model => model.KitCategory, new SelectList(ViewBag.KitCategoryList, "CategoryValue", "KitCategory"), new { style = "width:80px" })
                                        </div>
                                    </li>
                                    <li>
                                        @Html.Partial("UDFLayout")
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.AvailableKitQuentity)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.AvailableKitQuentity, new { @id = "txtAQ", @readonly = "readonly" })
                                        </div>
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.KitDemand)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.KitDemand, new { @id = "txtDQ", @readonly = "readonly" })
                                        </div>
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            @*@Html.LabelFor(model => model.AvailableWIPKit)*@
                                            @if (Model.KitCategory.GetValueOrDefault(0) == 0)
                                            {
                                                @eTurns.DTO.ResKitMaster.AvailableWIPKit
                                            }
                                            else
                                            {
                                                @eTurns.DTO.ResKitMaster.QuentityToBuildKit
                                            }
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.AvailableWIPKit, new { @id = "txtAWIP", @readonly = "readonly" })
                                        </div>
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.AvailableInGeneralInventory)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.AvailableInGeneralInventory, new { @id = "txtAQGI", @readonly = "readonly" })
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </li>
                    </ul>
                </div>
                <div id="CollapsedContent">
                    <ul>
                        <li style="width: 300px;">
                            @if ((isUpdate == true && Model.ID > 0))
                            {                            
                                <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                                if ((isInsert == true && Model.ID == 0) || (isUpdate == true && Model.ID > 0))
                                {                            
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave"
                                class="CreateBtn" />                            
                                }
                                <input type="submit" value="Build" id="btnBuild" class="CreateBtn" />
                                <input type="submit" value="Break" id="btnBreak" class="CreateBtn" />
                                <input type="button" value="New Item" id="btnAddNewItem" class="CreateBtn" />
                            }
                        </li>
                        <li>
                            <label for="label" style="width: 50px; float: left;">
                                @Html.LabelFor(model => model.NoOfItemsInKit)
                            </label>
                            : <span>
                                @Html.TextBoxFor(model => model.NoOfItemsInKit, new { @readonly = "readonly", @class = "text-box", style = "width: 60px;" })
                            </span></li>
                        <li>
                            <label for="label" style="width: 50px; float: left;">
                                @Html.LabelFor(model => model.KitCost)
                            </label>
                            : <span>
                                @Html.TextBoxFor(model => model.KitCost, new { @readonly = "readonly", @class = "text-box", style = "width: 60px;" })
                            </span></li>
                    </ul>
                </div>
            </div>
        </div>
        }
        else
        {
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        <em>* </em>@Html.LabelFor(model => model.KitPartNumber)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.KitPartNumber, new { id = "txtKitPartNumber", @class = "text-box", maxlength = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.KitPartNumber)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.Created)
                        @Html.HiddenFor(model => model.Updated)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.LastUpdatedBy)
                        @Html.HiddenFor(model => model.CompanyID)
                        @Html.HiddenFor(model => model.Room)
                        @Html.HiddenFor(model => model.RoomName)
                        @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                        @Html.HiddenFor(model => model.IsDeleted)
                        @Html.HiddenFor(model => model.IsArchived)
                        @Html.HiddenFor(model => model.IsKitBuildAction)
                        @Html.HiddenFor(model => model.IsKitBreakAction)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Description)
                    </div>
                    <div class="editor-field">
                        @Html.TextAreaFor(model => model.Description, new { id = "txtDescription", @class = "text-box", maxlength = 1024 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Description)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.MinimumKitQuentity)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.MinimumKitQuentity, new { id = "txtMinimumKitQuentity", onkeydown = "javascript:return OnlyNumeric(event,this);", @class = "text-box", maxlength = 5 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MinimumKitQuentity)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.MaximumKitQuentity)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.MaximumKitQuentity, new { id = "txtMaximumKitQuentity", onkeydown = "javascript:return OnlyNumeric(event,this);", @class = "text-box", maxlength = 10 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaximumKitQuentity)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.ReOrderType)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.ReOrderType, new SelectList(ViewBag.ReOrderTypeList, "typeValue", "ReOrderType"), new { style = "width:80px" })
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.KitCategory)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.KitCategory, new SelectList(ViewBag.KitCategoryList, "CategoryValue", "KitCategory"), new { style = "width:80px" })
                    </div>
                </li>
                @Html.Partial("UDFLayout")
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        @if ((isInsert == true && Model.ID == 0) || (isUpdate == true && Model.ID > 0))
                        {                            
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />                            
                        }
                        else if (isUpdate == false && isInsert == false)
                        {                             
                            <script type="text/javascript">
                                disableControls('frmKitMaster');
                            </script>
                        }
                    </div>
                </li>
                <li>
                    <div class="BtnBlockform">
                        @if ((isInsert == true && Model.ID == 0) || (isUpdate == true && Model.ID > 0))
                        {                            
                            <input type="button" value="New Item" id="btnAddNewItem" class="CreateBtn" style="float: left;
                                margin-left: 20px;" />
                        }
                    </div>
                </li>
            </ul>
        </div>  
        }
    }
</div>
<div id="KitLineItems">
</div>
<div id="ItemModel">
</div>
<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmKitMaster");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
    });
</script>
<script type="text/javascript">

    function onSuccess(response) {
        IsRefreshGrid = true;
        $('div#target').fadeToggle();
        $("div#target").delay(2000).fadeOut(200);
        $("#spanGlobalMessage").text(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {

            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#txtKitPartNumber").val("");
            $("#txtKitPartNumber").focus();
        }
        else if (response.Status == "build") {

            $('#txtAQ').val(response.UpdatedDTO.AvailableKitQuentity);
            $('#txtAWIP').val(response.UpdatedDTO.AvailableWIPKit);
            $('#txtDQ').val(response.UpdatedDTO.KitDemand);
            $('#txtAQGI').val(response.UpdatedDTO.AvailableInGeneralInventory);
            $('#IsKitBuildAction').val(response.UpdatedDTO.IsKitBuildAction);
            $('#IsKitBreakAction').val(response.UpdatedDTO.IsKitBreakAction);

            CallThisFunctionFromModel('success');
        }
        else if (response.Status == "break") {

            $('#txtAQ').val(response.UpdatedDTO.AvailableKitQuentity);
            $('#txtAWIP').val(response.UpdatedDTO.AvailableWIPKit);
            $('#txtDQ').val(response.UpdatedDTO.KitDemand);
            $('#txtAQGI').val(response.UpdatedDTO.AvailableInGeneralInventory);
            $('#IsKitBuildAction').val(response.UpdatedDTO.IsKitBuildAction);
            $('#IsKitBreakAction').val(response.UpdatedDTO.IsKitBreakAction);

            CallThisFunctionFromModel('success');
        }
        else if (idValue == 0) {
            $("#txtKitPartNumber").val("");
            $("#txtKitPartNumber").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                ClearSessionKitItem();
                clearControls('frmKitMaster');
                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');                
                CallThisFunctionFromModel('success');
            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#txtKitPartNumber").val("");
                $("#txtKitPartNumber").focus();
            }
            else {
                if (oTable !== undefined && oTable != null)
                    oTable.fnDraw();
                if (IsRefreshGrid)
                    $('#NarroSearchClear').click();

                SwitchTab(0, 'KitCreate', 'frmKitMaster');
                ClearSessionKitItem();
                CallThisFunctionFromModel('success');
            }
        }
    }
    function onFailure(message) {

        $("#spanGlobalMessage").text(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(2000).fadeOut(200);
        $("#txtKitPartNumber").focus();
    }

    $(document).ready(function () {
        $('#btnCancel').click(function (e) {
            RevertItemQty();
            
            SwitchTab(0, 'KitCreate', 'frmKitMaster');
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');

        $('#DivLoading').show();
        $.get('LoadKitLineItems?KitMasterID=' + '@Model.ID', {}, function (data) {
            $('#KitLineItems').html(data);

        }, "html");

        $("#ItemModel").dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '82%',
            height: 710,
            title: 'Add Items for Kitting',
            open: function () {
                $("#ItemModel").load('@Url.Action("LoadItemMasterModel", new { ParentId = @Model.ID })', function () {
                    $('#DivLoading').hide();
                });
            },
            close: function () {
                CallThisFunctionFromModel('success');
            }
        });



        $('#ancHideShowContent').click(function () {
            if ($('#ExpandedContent').css('display') == 'none') {
                $('#CollapsedContent').css('display', 'none');
                $('#ExpandedContent').css('display', '');
                $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
            }
            else {

                $('#ExpandedContent').css('display', 'none');
                $('#CollapsedContent').css('display', '');
                $('#ancHideShowContent img').attr('src', '/Content/images/drildown_open.jpg');
            }
        });
        $('#ExpandedContent').css('display', 'none');
        $('#CollapsedContent').css('display', '');
        $('#DivLoading').hide();
    });



    $('#btnAddNewItem').click(function () {
        if (parseFloat($('#txtAQ').val()) != null && parseFloat($('#txtAQ').val()) > 0) {
            return false;
        }
        else {
            $('#DivLoading').show();
            $('#ItemModel').dialog('open');
        }
        return false;
    });


    function RevertItemQty() {
        $.ajax({
            "url": '@Url.Content("~/Kit/RevertItemQtyOnCancel")',
            "async": false,
            cache: false,
            "dataType": "json",
            "success": function (json) {
                ClearSessionKitItem();
            }
        });
    }


    function ClearSessionKitItem() {
        $.ajax({
            "url": '@Url.Content("~/Kit/ClearKitSession")',
            "async": false,
            cache: false,
            "dataType": "json",
            "success": function (json) {
                //o = JSON.parse(json.jsonData);
            }
        });
    }



    $('#btnBuild').click(function () {
        var WIP = parseFloat($('#txtAWIP').val());
        if (WIP != null && WIP > 0) {
            //  var AQ = parseFloat(('#txtAQ').val());
            //  var KD = parseFloat($('#txtDQ').val());
            //  if (KD != null && KD > 0) {
            //      KD = KD - WIP;
            //      if (KD <= 0)
            //          KD = 0;
            //  }
            //  if (AQ === undefined || AQ == '') {
            //      AQ = 0;
            //  }
            //  $('#txtAQ').val(AQ + WIP);
            //  $('#txtAWIP').val('0')
            $('#IsKitBuildAction').val('true');
            $('#IsKitBreakAction').val('false');
            //$('#txtDQ').val(KD)
            return true;
        }
        else
            return false;

    });

    $('#btnBreak').click(function () {

        var AQ = parseFloat($('#txtAQ').val());

        if (AQ != null && AQ > 0) {
            //   var WIP = parseFloat($('#txtAWIP').val());
            //   var KD = parseFloat($('#txtDQ').val());
            //   if (KD != null && KD > 0) {
            //       KD = KD - WIP;
            //       if (AQ >= 5)
            //           KD = 0;
            //       else
            //           KD = 5 - AQ

            //   }
            //   if (AQ === undefined || AQ == '') {
            //       AQ = 0;
            //   }
            //   $('#txtAQ').val(0);
            //            $('#txtAWIP').val(AQ)

            $('#IsKitBuildAction').val('false');
            $('#IsKitBreakAction').val('true');
            //            $('#txtDQ').val(KD)
            return true;
        }
        else
            return false;

    });
</script>
