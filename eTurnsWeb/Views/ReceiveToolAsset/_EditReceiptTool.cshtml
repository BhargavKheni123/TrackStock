@model List<ReceivedToolAssetOrderTransferDetailDTO>
@{
    string costFormat = "N";
    string qtyFormat = "N";
    string dateFomat = "MM/dd/yyyy";


    if (!string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits))
    {
        costFormat += eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits;
    }
    if (!string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.NumberDecimalDigits))
    {
        qtyFormat += eTurnsWeb.Helper.SessionHelper.NumberDecimalDigits;
    }
    if (!string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.DateTimeFormat))
    {
        dateFomat = eTurnsWeb.Helper.SessionHelper.DateTimeFormat;
    }

    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isCost = false;
    isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);

    Guid ToolGuid = ViewBag.ToolGuid;
    Guid ToolAssetOrderDetailGuid = ViewBag.ToolAssetOrderDetailGuid;
    Guid ToolAssetOrderGuid = ViewBag.ToolAssetOrderGuid;
    bool IsSerialTracking = false;
    if(Model[0].ToolTypeTracking != null && (!string.IsNullOrWhiteSpace(Model[0].ToolTypeTracking)) && Model[0].ToolTypeTracking.IndexOf("2") >= 0)
    {
        IsSerialTracking = true;
    }
}
<div class="innerGrid" id="DivInnerGridReceivEdit" style="background: none repeat scroll 0 0 #F8F8F8;
    padding: 10px; float: left; width: 98%;">
    <table id="tblRecieptEdit" class="display" style="float: left; clear: both; width: 98%;">
        <thead>
            <tr>
                <th>
                    @ResToolMaster.ToolName
                </th>
                @*<th>
                    @ResToolMaster.Serial
                </th>*@
                @if (IsSerialTracking)
                {
                    <th>
                        @ResToolAssetQuantityDetail.SerialNumber
                    </th>
                }
                @if (!IsSerialTracking)
                {
                <th>
                    @ResToolMaster.Quantity
                </th>
                }

                <th>
                    @ResToolMaster.Cost
                </th>
                 
                <th>
                    @ResToolAssetQuantityDetail.ReceivedDate
                </th>
                <th>
                    @ResToolAssetQuantityDetail.ReceiveBin
                </th>
                <th>
                    @ResToolAssetOrder.PackSlipNumber
                </th>
                <th>
                    @ResToolAssetQuantityDetail.Description
                </th>
                @Html.RenderColumnsHeader("ReceivedToolAssetOrderTransferDetail", typeof(eTurns.DTO.ResReceiveToolAssetOrderDetails), "")
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
            <tr>
                <td>
                    @item.ToolName
                    @Html.Hidden("ID", item.ID, new { @id = "ID" })
                    @Html.Hidden("GUID", item.GUID, new { @id = "GUID" })
                    @Html.Hidden("OrderDetailGUID", item.ToolAssetOrderDetailGUID, new { @id = "OrderDetailGUID" })
                    @Html.Hidden("ToolGUID", item.ToolGUID.GetValueOrDefault(Guid.Empty), new { @id = "ToolGUID" })
                    @Html.Hidden("ToolAssetQuantityDetailGUID", item.ToolAssetQuantityDetailGUID, new { @id = "ToolAssetQuantityDetailGUID" })
                    @Html.Hidden("SerialNumberTracking", IsSerialTracking, new { @id = "SerialNumberTracking" })
                    @Html.Hidden("hdnReceivedCost", item.Cost.GetValueOrDefault(0), new { @id = "hdnReceivedCost" })
                </td>
                @*<td>
                    @item.Serial
                </td>*@
                 @if (IsSerialTracking)
                 {
                    <td>
                        @Html.TextBox("txtSerialNumber", item.SerialNumber, new { @class = "text-boxinner", @style = "width:80px;" })
                        @Html.Hidden("Quantity", item.Quantity, new { @id = "Quantity" })
                    </td>
                 }
                 @if (!IsSerialTracking)
                 {
                    <td>
                        @Html.TextBox("txtCustomerOwnedQty", item.Quantity.GetValueOrDefault(0), new { @class = "text-boxinner numericinput", @style = "width:80px;" })
                    </td>
                 }

                    <td>
                        @Html.TextBox("txtReceivedCost", item.Cost.GetValueOrDefault(0), new { @class = "text-boxinner numericinput", @style = "width:80px;" })
                    </td>
                    
                <td>
                    @Html.TextBox("txtReceivedDate_" + item.ID, item.strReceivedDate, new { @class = "text-boxinner dateTextbox", @style = "width:80px;", @readonly = "readonly" })
                </td>
                <td>
                    <span style='position: relative'>
                        @Html.TextBox("txtReceiveBin", item.Location, new { @class = "text-boxinner ReciveEditAuto", @style = "width:90px;" })
                        <a id='lnkShowAllOptions' href='javascript:void(0);' style='position: absolute; right: 5px;
                                top: 0px;' class="ShowAllOptions">
                            <img src='/Content/images/arrow_down_black.png' alt='select' />
                        </a>
                        <input type="hidden" value="false" id="hdnIsLoadMoreLocations" />
                    </span>
                </td>
                <td>
                    @Html.TextBox("txtPackslip", item.PackSlipNumber, new { @class = "text-boxinner", @style = "width:80px;" })
                </td>
                <td>
                    @Html.TextBox("txtDescription" + item.ID, item.Description, new { @class = "text-boxinner txtDescription", @style = "width:100px;" ,@maxlength = "1024" })
                </td>
                @Html.RenderColumnsArrayEditableObjectForDOMWithValue("ReceivedToolAssetOrderTransferDetail", item)
            </tr>

            }
        </tbody>
    </table>
    <div style="width: 98%; float: left; text-align: center; margin: 10px;">
        @if (isUpdate)
        {
            <input type="button" class="CreateBtn" value="@ResCommon.Save" id="bntEditReceipt" style="text-align: center;
                float: left" />
        }
        <input type="button" class="CreateBtn" value="@ResCommon.Cancel" id="bntEditReceiptCancel" style="text-align: center;
            float: left" />
    </div>
</div>
<div id="divChnageReceivedRecord" title="Edit Confirmation" class="dialog" style="float: left;
    display: none; width: 500px;">
    <div class="inner" style="width: 500px;">
        <p class="text" style="float: left; width: 98%; text-align: left; padding: 0px 0px 5px 10px;">
            @ResOrder.MSGReceivedNotEditable
        </p>
        <p class="text" style="float: left; width: 98%; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="no" onclick="CloseModelNo()">
                <img src="~/Content/images/no.png" alt="No" />Ok
            </a>
        </p>
    </div>
</div>
<div class="dialog" id="OrdReceivedErrorDialog" style="display: none; width: 470px;">
    <div class="inner" style="width: 470px;">
        <p class="text" id="OrdReceivErrorMSG" style="text-align: left; padding-left: 10px;">
        </p>
        <p class="text btnA" style="text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="no" onclick="javascript:return closeErrorDialog()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a>
        </p>
    </div>
</div>
<script type="text/javascript" language="javascript">

    $('#bntEditReceiptCancel').on('click', function () {
        $('#divEditReceipt').dialog('close');
    });

    function closeErrorDialog() {
        $.modal.impl.close();
        return false;
    }

    $('#bntEditReceipt').click(function (e) {
        $('#DivLoading').show();
        var arrayReciept = new Array();
        $('#tblRecieptEdit tbody tr').each(function (i) {
            var obj = new Object();
            obj.ID = $(this).find('#ID').val();
            obj.GUID = $(this).find('#GUID').val();
            obj.ToolAssetOrderDetailGUID = $(this).find('#OrderDetailGUID').val();
            obj.OrderDetailGUID = $(this).find('#OrderDetailGUID').val();
            obj.ToolGUID = $(this).find('#ToolGUID').val();
            obj.ToolAssetQuantityDetailGUID = $(this).find('#ToolAssetQuantityDetailGUID').val();
            obj.SerialNumberTracking = $(this).find('#SerialNumberTracking').val();
            
            if (obj.SerialNumberTracking == 'True') {
                obj.SerialNumber = $(this).find('#txtSerialNumber').val();
                obj.Quantity = $(this).find('#Quantity').val();

            }

            else {

                if ($(this).find('#txtCustomerOwnedQty').length > 0) {
                    obj.Quantity = $(this).find('#txtCustomerOwnedQty').val();
                }
            }
            
            if ($(this).find('#txtReceivedCost').length > 0) {
                obj.Cost = $(this).find('#txtReceivedCost').val();
            }
            else if ($(this).find('#hdnReceivedCost').length > 0) {
                obj.Cost = $(this).find('#hdnReceivedCost').val();
            }

            obj.Received = $(this).find('#txtReceivedDate_' + obj.ID).val();
            //obj.ReceivedDate = $(this).find('#txtReceivedDate').val();
            obj.strReceivedDate = $(this).find('#txtReceivedDate_' + obj.ID).val();
            obj.Location = $(this).find('#txtReceiveBin').val();
            obj.PackSlipNumber = $(this).find('#txtPackslip').val();
            obj.Description = $(this).find('#txtDescription' + obj.ID).val();
            
            obj.IsOnlyFromUI = true;
            if ($(this).find('#UDF1').length > 0) {

                if ($(this).find("#UDF1")[0].nodeName === "SELECT")
                    obj.UDF1 = $(this).find("#UDF1 option:selected").text();
                else
                    obj.UDF1 = $(this).find('#UDF1').val();

                
            }
            if ($(this).find('#UDF2').length > 0) {
                if ($(this).find("#UDF2")[0].nodeName === "SELECT")
                    obj.UDF2 = $(this).find("#UDF2 option:selected").text();
                else
                    obj.UDF2 = $(this).find('#UDF2').val();
            }
            if ($(this).find('#UDF3').length > 0) {
                if ($(this).find("#UDF3")[0].nodeName === "SELECT")
                    obj.UDF3 = $(this).find("#UDF3 option:selected").text();
                else
                    obj.UDF3 = $(this).find('#UDF3').val();
            }
            if ($(this).find('#UDF4').length > 0) {
                if ($(this).find("#UDF4")[0].nodeName === "SELECT")
                    obj.UDF4 = $(this).find("#UDF4 option:selected").text();
                else
                    obj.UDF4 = $(this).find('#UDF4').val();
            }
            if ($(this).find('#UDF5').length > 0) {
                if ($(this).find("#UDF5")[0].nodeName === "SELECT")
                    obj.UDF5 = $(this).find("#UDF5 option:selected").text();
                else
                    obj.UDF5 = $(this).find('#UDF5').val();
            }

            arrayReciept.push(obj);

            // UDFInsertNewForGridNew($(this));
        });

        var ajaxURL = '@Url.Content("~/ReceiveToolAsset/EditReceiptRecordsTools")';
        if (arrayReciept.length > 0) {
            $.ajax({
                url: ajaxURL,
                data: JSON.stringify({ 'reciepts': arrayReciept }),
                type: 'POST',
                contentType: 'application/json',
                dataType: 'json',
                success: function (Result) {
                    $('#DivLoading').hide();

                    $('#tblRecieptEdit tbody tr').each(function (i) {
                        UDFInsertNewForGridNew($(this));
                    });



                    if (Result.Status) {
                        $('#divEditReceipt').data({ Success: true }).dialog('close');
                        return false;
                    }
                    else {
                        $('#OrdReceivedErrorDialog').find("#OrdReceivErrorMSG").html(Result.Message);
                        $('#DivLoading').hide();
                        $('#OrdReceivedErrorDialog').modal();
                        //return false;
                    }
                    return false;
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    return false;
                }
            });
        }
    });

    $(document).ready(function () {
        $('table.display td').css('border', '1px solid #ddd');

        UDFfillEditableOptionsForGrid();

        $('.ShowAllOptions').click(function () {
            $(this).siblings('.ReciveEditAuto').trigger("focus");
            $(this).siblings(".ReciveEditAuto").autocomplete("search", " ");
        });

        var cst = '@(costFormat.Replace("N", ""))';
        var qty = '@(qtyFormat.Replace("N", ""))';

        if (cst.length <= 0) {
            cst = 0;
        }
        if (qty.length <= 0) {
            qty = 0;
        }
        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt(cst, 10)
        });

        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt(qty, 10)
        });

        $("input.dateTextbox").datepicker({
            dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat', showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            clearText: 'Clear', onClose: function () { this.focus(); }
        });

        $('#tblRecieptEdit').on('focus', "input.ReciveEditAuto", function (e) {

            var ajaxURL = '/ReceiveToolAsset/GetToolLocations';
            var tr = $(this).parent().parent();
            var hdnIsLoadMoreLocations = $(tr).find("#hdnIsLoadMoreLocations").val();
            $(this).autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: ajaxURL,
                        type: 'POST',
                        data: JSON.stringify({ 'ToolAssetOrderGuid': '@(ToolAssetOrderGuid)', 'ToolGuid': '@(ToolGuid)', 'NameStartWith': request.term, 'IsLoadMoreLocations': hdnIsLoadMoreLocations }),
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data) {
                            response($.map(data, function (Items) {
                                return {
                                    label: Items.Value,
                                    value: Items.Key
                                }
                            }));
                        },
                        error: function (err) {
                            $('#DivLoading').hide();
                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {
                    if (ui.item.value == MoreLocation) {
                        $(tr).find("#hdnIsLoadMoreLocations").val("true");
                        $(this).trigger("focus");
                        $(this).autocomplete("search", " ");
                        return false;
                    }
                    else {
                        $(this).val(ui.item.value);
                    }
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    $('ul.ui-autocomplete').css('overflow-y', 'auto');
                    $('ul.ui-autocomplete').css('max-height', '300px');
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                change: function (event, ui) {
                }
            });
        });

    });
    function UDFInsertNewForGridNew(RowObject) {

        if ($("#chkUsePullCommonUDF").is(":checked")) {
            $("#tblPullCommonUDF").find('.udf-editable-autocomplete-dropdownbox').each(function () {

                var _UDFID = $(this).prev().val();
                var _UDFOption = $(this).val();

                if (_UDFID > 0) {
                    var actionURL;
                    var params;
                    actionURL = '/UDF/InsertUDFOptionNew';
                    params = { UDFID: _UDFID, UDFOption: _UDFOption }

                    $.ajax({
                        'url': actionURL,
                        data: params,
                        success: function (response) {
                        }
                    });
                }

            });
        }
        else {
            $(RowObject).find('.udf-editable-autocomplete-dropdownbox').each(function () {

                var _UDFID = $(this).prev().val();
                var _UDFOption = $(this).val();

                if (_UDFID > 0) {
                    var actionURL;
                    var params;
                    actionURL = '/UDF/InsertUDFOptionNew';
                    params = { UDFID: _UDFID, UDFOption: _UDFOption }

                    $.ajax({
                        'url': actionURL,
                        data: params,
                        success: function (response) {
                        }
                    });
                }

            });
        }
    }
    function CloseModelYes() {
        $('#divChnageReceivedRecord').parent().parent().find(".modalCloseImg").click();
        return false;
    }

    function CloseModelNo() {
        $('#divChnageReceivedRecord').parent().parent().find(".modalCloseImg").click();
        $('#divEditReceipt').dialog('close');
        return false;
    }

</script>
