@{
    ViewBag.Title = eTurns.DTO.ResReceiveOrderDetails.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayDeleteButton = false, DisplaySettings = true, DisplayContextMenu = false, DisplayColumnSetupButton = true, DisplayPrintBlock = false, ColumnSetupFor = "ToolMasterModelList" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ToolMasterNew", ToolModelCallFromPageName = "receive" };
    bool isCost = true;
    bool IsPackSlipReq = false;
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);
   
    bool isUpdate = false;
    bool isInsert = false;
    isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    string LoadDataCount = eTurns.DTO.SiteSettingHelper.LoadNarrowDataCount != string.Empty ? Convert.ToString(eTurns.DTO.SiteSettingHelper.LoadNarrowDataCount) : "0";
}
<div class="searchWrapper">
    <div class="searchBlock">
        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
        <div class="searchinputB">
            <input type="text" class="searchinput" id="searchInAllTools" />
            <a href="javascript:void(0);" class="xclose">
                <img src="~/Content/images/x.png" alt="X" id="clearsearchInAllTools" />
            </a>
        </div>
    </div>
</div>
@Html.ItemModelGridTopHeader(settings)
@Html.Partial("NarrowSearchForToolModel", modelCommon)
<div class="userContent ">
    <table id="ToolModeDataTable" class="display">
        <thead>
            <tr>
                <th>
                    @eTurns.DTO.Resources.ResCommon.RowNo
                </th>
                <th class="NotSortable NotHide">
                    @ResItemMaster.Expand
                </th>
                <th>
                    @eTurns.DTO.ResToolMaster.ToolName
                </th>
                <th>
                    @eTurns.DTO.ResToolMaster.Serial
                </th>
                <th>
                    @eTurns.DTO.ResToolMaster.Description
                </th>
                <th>
                    @eTurns.DTO.ResToolMaster.Quantity
                </th>
              
                <th>
                    @eTurns.DTO.ResCategoryMaster.Category
                </th>
               
                <th>
                    @eTurns.DTO.ResToolMaster.Cost
                </th>
                
                 
                <th>
                    @eTurns.DTO.ResToolMaster.SerialNumberTracking
                </th>
               
                
               
                <th>
                    @eTurns.DTO.ResToolMaster.Type
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ID
                </th>
                 
                <th>
                    @eTurns.DTO.Resources.ResCommon.RoomName
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                </th>
                
                @Html.RenderColumnsHeader("ToolMaster", typeof(eTurns.DTO.ResToolMaster))
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>
<div id="ToolQty">
</div>
<script type="text/javascript" language="javascript">
    var anToolOpen = [];
    var oToolsTable = null;
    var objColumnsNewReceive = {}
    var loadNarrowSearchDataCount = '@LoadDataCount';


    function GenerateColumnForNewRecieve() {
        $('#ColumnSortableTM li').each(function (index) {
            $(this).remove();
        });
        var div = document.createElement('div');
        div.id = "CheckAll";
        div.innerHTML = "<input type='hidden' value ='ColumnSortableTM' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
                        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
        $('div.sortableContainer').find("div#CheckAll").remove();
        $('div.sortableContainer').prepend(div);

        for (i = 0, iLen = $('#ToolModeDataTable').dataTable().fnSettings().aoColumns.length; i < iLen; i++) {
            var oColumn = $('#ToolModeDataTable').dataTable().fnSettings().aoColumns[i];
            var li = document.createElement('li');
            li.id = GetColumnIndexNewRecive(oColumn.sTitle.trim());
            li.innerHTML = oColumn.sTitle.trim();
            var LiClassName = 'ui-state-default'
            if (oColumn.sClass.indexOf('NotHide') >= 0 || (oColumn.nTh != null && oColumn.nTh.className.indexOf('NotHide') >= 0)) {
                LiClassName = LiClassName + ' HiddenLi';
            }
            li.className = LiClassName;

            if (oColumn.sClass.indexOf('NotHide') >= 0 || (oColumn.nTh != null && oColumn.nTh.className.indexOf('NotHide') >= 0)) {
                li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndexNewRecive(oColumn.sTitle.trim()) + '_" disabled="disabled" />' + oColumn.sTitle.trim();
            }
            else {
                if (oColumn.bVisible) {
                    li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndexNewRecive(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
                else
                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndexNewRecive(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            }
            $('#ColumnSortableTM').append(li);
        }
    }

    var GetColumnIndexNewRecive = function (ColumnName) {
        return objColumnsNewReceive[ColumnName];
    };

    function UpdateColumnOrderTM(_ListName) {
        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();
        var _Order = $('#ColumnSortableTM').sortable("toArray");
        var __Order = _Order.toString().split(",");
        for (var i = 0; i < __Order.length; i++) {
            __Order[i] = parseInt(__Order[i], 10);
        }

        $('#ToolModeDataTable').dataTable().fnSettings().oLoadedState.ColReorder = __Order;

        var _abVisCols = [];
        for (i = 0, iLen = $('#ToolModeDataTable').dataTable().fnSettings().aoColumns.length; i < iLen; i++) {
            var checked = $('#ColumnSortableTM').find('input.checkBox[id="' + i + '_"]').is(":checked");
            _abVisCols.push(checked);
        }
        $('#ToolModeDataTable').dataTable().fnSettings().oLoadedState.abVisCols = _abVisCols;

        $.ajax({
            "url": '@Url.Content("~/Master/SaveGridState")',
            data: { Data: JSON.stringify($('#ToolModeDataTable').dataTable().fnSettings().oLoadedState), ListName: 'ToolsListForNewReceive' },
            "dataType": "json",
            cache: false,
            "async": false,
            "success": function (json) {
                o = json;
                $("#ColumnSortableModalTM").dialog("close");
                callbacknew();
            }
        });
    }

    $("#ColumnOrderSetupTM").on('click', function () {
        $("#ColumnSortableModalTM").dialog("open");
        return false;
    });

    $(document).ready(function () {

        $("#ColumnSortableModalTM").dialog({
            autoOpen: false,
            modal: true,
            width: 500,
            height: dHeight,
            title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
            draggable: false,
            resizable: false,
            open: function () {
                GenerateColumnForNewRecieve();
                $("#ColumnSortableTM").sortable({ axis: "y", containment: "parent" });
            }
        });



        anToolOpen = [];
        objColumnsNewReceive = GetGridHeaderColumnsObject('ToolModeDataTable', 'New Receive Columns', 'ToolsListForNewReceive', 'callbacknew()');
        oToolsTable = $('#ToolModeDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "99%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[2, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";
                $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'ToolsListForNewReceive' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'ToolsListForNewReceive' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content("~/ReceiveToolAsset/NewReceiveToolsListAjax")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];

                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                else
                    aoData.push({ "name": "SortingField", "value": "0" });


                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#myDataTable').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        if ($("#global_filter").val() != '') {
                            $('#myDataTable').highlight($("#global_filter").val());
                        }
                        if ($("#searchInAllTools").val() != '') {
                            $('#ToolModeDataTable td').highlight($("#searchInAllTools").val());
                        }

                        $('#DivLoading').hide();
                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
            },
            "aoColumns": [
                { mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' },
                {
                    "mDataProp": null, "bSortable": false, "sClass": "read_only control center NotHide", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                         return '<img src="' + sImageUrl + 'drildown_open.jpg' + '">';
                    }
                },
			{
			    "mDataProp": "ToolName", "sClass": "read_only NotHide", "sDefaultContent": '', "bSortable": true, "bSearchable": false,
			    "fnRender": function (obj, val) {
			        return val; // "<a id='aEditLink' onclick='return ShowEditTabGUID(&quot;ItemEdit?ItemGUID=" + obj.aData.GUID.toString() + "&quot;,&quot;frmItem&quot;)' href='JavaScript:void(0);'>" + obj.aData.ItemNumber + "</a>" + " <input type='hidden' id='ItemGUID' value='" + obj.aData.GUID.toString() + "' />" + " <input type='hidden' id='hdnItemID' value='" + obj.aData.ID.toString() + "' />";
			    }
			},
			{
			    "mDataProp": "Serial", "sClass": "read_only NotHide", "sDefaultContent": '', "bSortable": true, "bSearchable": false,
			    "fnRender": function (obj, val) {
			        return val; // "<a id='aEditLink' onclick='return ShowEditTabGUID(&quot;ItemEdit?ItemGUID=" + obj.aData.GUID.toString() + "&quot;,&quot;frmItem&quot;)' href='JavaScript:void(0);'>" + obj.aData.ItemNumber + "</a>" + " <input type='hidden' id='ItemGUID' value='" + obj.aData.GUID.toString() + "' />" + " <input type='hidden' id='hdnItemID' value='" + obj.aData.ID.toString() + "' />";
			    }
			},
            { "mDataProp": "Description", "sClass": "read_only" },
            {
                "mDataProp": "Quantity", "sClass": "read_only NotHide", "sDefaultContent": '',
                "fnRender": function (obj, val) {
                    if (obj.aData.Quantity != null && obj.aData.Quantity != NaN)
                        return "<span id='spnOnHand_" + obj.aData.ID + "'>" + FormatedCostQtyValues(obj.aData.Quantity, 2) + "</span>";
                    else
                        return "<span id='spnOnHand_" + obj.aData.ID + "'>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            },

             { "mDataProp": "ToolCategory", "sClass": "read_only" },

             {
                 "mDataProp": "Cost", "sClass": "read_only isCost",
                 "fnRender": function (obj, val) {
                     if (obj.aData.Cost != null && obj.aData.Cost != NaN)
                         return FormatedCostQtyValues(obj.aData.Cost, 1);
                     else
                         return FormatedCostQtyValues(0, 1);
                 }
             },


             {
                 "mDataProp": "ToolTypeTracking", "sClass": "read_only"
                  , "fnRender": function (obj, val) {
                      if(val.indexOf("2") >= 0)
                      {
                          return "Yes";
                      }
                      else {
                          return "No";
                      }
                  }
             },


             {
                 "mDataProp": "Type", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        if (val == 1)
                                            return "Tool";
                                        else if (val == 2)
                                            return "Tool Kit";

                                        else
                                            return "";
                                    }
             },
             { "mDataProp": "ID", "sClass": "read_only" },

             { "mDataProp": "RoomName", "sClass": "read_only" },
			  {
			      "mDataProp": "Created", "sClass": "read_only",
			      "fnRender": function (obj, val) {
			          //return GetDateInFullFormat(val);
			          return obj.aData.CreatedDate;
			      }
			  },
			  {
			      "mDataProp": "Updated", "sClass": "read_only",
			      "fnRender": function (obj, val) {
			          //return GetDateInFullFormat(val);
			          return obj.aData.UpdatedDate;
			      }
			  },
             { "mDataProp": "UpdatedByName", "sClass": "read_only" },
             { "mDataProp": "CreatedByName", "sClass": "read_only" }

             @(Html.RenderColumnsArray("ToolMaster"))
            ]
        }).makeEditable();


        $('#refreshGridIM').live('click', function () {
            oToolsTable.fnDraw();
            //fillItemMaster(false);

        });

        $('.DTTT_container').css('z-index', '-1');
        //alert('@isCost');
        if ('@isCost' == '@Boolean.FalseString') {
            HideColumnUsingClassName("ToolModeDataTable");
        }
        /*Functions used for nasted data binding START*/
        $('#ToolModeDataTable').on('click', 'td.control', function (event) {

            if ($(this).find('img').length <= 0)
                return;

            $('#DivLoading').show();
            var nTr = this.parentNode;
            var i = $.inArray(nTr, anToolOpen);
            if (i === -1) {
                $('img', this).attr('src', sImageUrl + "drildown_close.jpg");
                oToolsTable.fnOpen(nTr, fnInnerGrid(oToolsTable, nTr), '');
                anToolOpen.push(nTr);
            }
            else {
                $('img', this).attr('src', sImageUrl + "drildown_open.jpg");
                oToolsTable.fnClose(nTr);
                anToolOpen.splice(i, 1);
                $('#DivLoading').hide();
            }
        });

        var timeouttc;
        $('#searchInAllTools').bind('textchange', function () {
            clearTimeout(timeouttc);
            var self = this;
            timeouttc = setTimeout(function () {
                var searchtext = $("#searchInAllTools").val().replace(/'/g, "''");
                $('#ToolModeDataTable').dataTable().fnFilter(searchtext, null, null, null);

            }, 500);
        });

        $("#clearsearchInAllTools").click(funClearFilterCIM);

        $("#ToolQty").dialog({
            autoOpen: false, modal: true, draggable: true, resizable: true, width: '60%', height: 450, title: 'Quantity Detail',
            open: function () {

                $('#DivLoading').show();
                var toolGuid = $(this).data("toolGuid");
                var strUrl = $(this).data("url");
                $.get(strUrl, { ToolGuid: toolGuid }, function (data) {
                    $('#DivLoading').hide();
                    $("#ToolQty").html(data);

                });
            },
            close: function () {
                $("#ToolQty").empty();
            }
        });
    });


    //Start Below is the New Recieve Withot order JS Function


    function funClearFilterCIM() {
        //Check length first
        if ($("#searchInAllTools").val().length > 0) {
            $("#searchInAllTools").val('');
            $('#ToolModeDataTable').dataTable().fnFilter($("#searchInAllTools").val(), null, null, null);
        }
        $("#searchInAllTools").focus();
        $('#ToolModeDataTable td').removeHighlight();
        return false;
    }

    function fnInnerGrid(oToolsTable, nTr) {
        var oData = oToolsTable.fnGetData(nTr);
        var sOut = '';
        $('#DivLoading').show();
        $.ajax({
            "url": '@Url.Content("~/ReceiveToolAsset/ReceiveNewToolWithoutOrderInnerGrid")',
            "type": 'GET',
            "data": { "ToolGuid": oData.GUID, "ToolType": oData.Type },
            "async": false,
            "cache": false,
            "dataType": "text",
            "success": function (json) {
                sOut = json;
                $('#DivLoading').hide();
            },
            error: function (response) {
                $('#DivLoading').hide();
            }
        });
        return sOut;
    }


    function NewSRReceiveWithoutOrder(itemID, obj) {
        //alert('serial');
        $("#DivLoading").show();
        var tr = $(obj).parent().parent();
        var id = $(tr).attr('id');
        var cnt = id.split("_")[2];

        var orderNumber = $("#txtSROrderNumber_" + itemID).val();
        var orderNumberforsort = $("#hdnordernumberforsort_" + itemID).val();
        if ($.trim(orderNumber).length <= 0) {
            $("#spanGlobalMessage").html("@ResReceiveOrderDetails.ReqOrderNumber");
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            showNotificationDialog();
            $("#DivLoading").hide();
            $("#txtSROrderNumber_" + itemID).focus();
            return false;
        }


        var orderDetailGUID = $("#hdnSROrderDetailGUID_" + itemID).val();
        var orderGUID = $("#hdnSROrderGUID_" + itemID).val();
        var reqQty = $("#txtSRReqQty_" + itemID).val();
        var itemGUID = $(tr).find("#hdnSRToolGuid_" + itemID + "_" + cnt).val();
        var isSerial = $(tr).find("#hdnSRIsSerial_" + itemID + "_" + cnt).val();
        var srNumber = "";


        var recvQty = 0;
        var recvDate = $(tr).find("#txtSRReceived_" + itemID + "_" + cnt).val();
        var recvcost = $(tr).find("#txtSRCostBox_" + itemID + "_" + cnt).val();
        if ($(tr).find("#txtSRCostBox_" + itemID + "_" + cnt).length > 0) {
            recvcost = $(tr).find("#txtSRCostBox_" + itemID + "_" + cnt).val();
        }
        else if ($(tr).find("#hdnSRCostBox_" + itemID + "_" + cnt).length > 0) {
            recvcost = $(tr).find("#hdnSRCostBox_" + itemID + "_" + cnt).val();
        }
        var binID = '0'; // $(tr).find("#ddlSRBin_" + itemID + "_" + cnt).val();
        var binName = $.trim($(tr).find('#txtSRLocation_' + itemID + '_' + cnt).val());
        var packSlipNmbr = $("#txtPackslip_" + itemID).val();
        srNumber = $(tr).find("#txtSRNumber_" + itemID + '_' + cnt).val();
        var description = $(tr).find("#txtDescription_" + itemID + "_" + cnt).val();

        var UDF1 = '';
        var UDF2 = '';
        var UDF3 = '';
        var UDF4 = '';
        var UDF5 = '';

        if ($('#NewSRReceiveEntry' + itemID).find('#UDF1_' + itemID + "_" + cnt).length > 0) {
            if ($('#NewSRReceiveEntry' + itemID).find('#UDF1_' + itemID + "_" + cnt)[0].nodeName === "SELECT")
                UDF1 = $('#NewSRReceiveEntry' + itemID).find('#UDF1_' + itemID + "_" + cnt).find("option:selected").text();
            else
                UDF1 = $('#NewSRReceiveEntry' + itemID).find('#UDF1_' + itemID + "_" + cnt).val();
        }

        if ($('#NewSRReceiveEntry' + itemID).find('#UDF2_' + itemID + "_" + cnt).length > 0) {
            if ($('#NewSRReceiveEntry' + itemID).find('#UDF2_' + itemID + "_" + cnt)[0].nodeName === "SELECT")
                UDF2 = $('#NewSRReceiveEntry' + itemID).find('#UDF2_' + itemID + "_" + cnt).find("option:selected").text();
            else
                UDF2 = $('#NewSRReceiveEntry' + itemID).find('#UDF2_' + itemID + "_" + cnt).val();
        }

        if ($('#NewReceiveEntry' + itemID).find('#UDF3_' + itemID + "_" + cnt).length > 0) {
            if ($('#NewSRReceiveEntry' + itemID).find('#UDF3_' + itemID + "_" + cnt)[0].nodeName === "SELECT")
                UDF3 = $('#NewSRReceiveEntry' + itemID).find('#UDF3_' + itemID + "_" + cnt).find("option:selected").text();
            else
                UDF3 = $('#NewReceiveEntry' + itemID).find('#UDF3_' + itemID + "_" + cnt).val();
        }

        if ($('#NewSRReceiveEntry' + itemID).find('#UDF4_' + itemID + "_" + cnt).length > 0) {
            if ($('#NewSRReceiveEntry' + itemID).find('#UDF4_' + itemID + "_" + cnt)[0].nodeName === "SELECT")
                UDF4 = $('#NewSRReceiveEntry' + itemID).find('#UDF4_' + itemID + "_" + cnt).find("option:selected").text();
            else
                UDF4 = $('#NewSRReceiveEntry' + itemID).find('#UDF4_' + itemID + "_" + cnt).val();
        }
        if ($('#NewSRReceiveEntry' + itemID).find('#UDF5_' + itemID + "_" + cnt).length > 0) {
            if ($('#NewSRReceiveEntry' + itemID).find('#UDF5_' + itemID + "_" + cnt)[0].nodeName === "SELECT")
                UDF5 = $('#NewSRReceiveEntry' + itemID).find('#UDF5_' + itemID + "_" + cnt).find("option:selected").text();
            else
                UDF5 = $('#NewSRReceiveEntry' + itemID).find('#UDF5_' + itemID + "_" + cnt).val();
        }

        if (isNaN(parseFloat(reqQty)) || reqQty <= 0) {

            $("#spanGlobalMessage").html("@ResReceiveOrderDetails.ReqRequestedQuantity");
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            showNotificationDialog();
            $("#DivLoading").hide();
            $("#txtSRReqQty_" + itemID + "_" + cnt).focus();
            return false;
        }

        if (srNumber.length <= 0) {

            $("#spanGlobalMessage").html("@ResReceiveOrderDetails.MsgSerialNumberValidation");
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            showNotificationDialog();
            $("#DivLoading").hide();
            $(tr).find("#txtSRNumber_" + itemID + "_" + cnt).focus();
            return false;
        }
        else {
            var txtSRNumber = $(tr).find("#txtSRNumber_" + itemID + "_" + cnt);
            if (txtSRNumber.css('background-color') === "rgb(247, 187, 196)") {
                $("#spanGlobalMessage").html("@ResReceiveOrderDetails.MsgDuplicateSerialNumberValidation");
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                showNotificationDialog();
                $("#DivLoading").hide();
                $(tr).find("#txtSRNumber_" + itemID + "_" + cnt).focus();
                return false;
            }
        }

        recvQty = 1;

        var arrObj = new Array();
        var objROTDDTO = {
            "ToolBinID": binID, "SerialNumber": $.trim(srNumber)
                            ,"Received": recvDate, "Cost": recvcost
                            , "ToolGUID": itemGUID, "ReceivedDate": recvDate
                            , "UDF1": UDF1, "UDF2": UDF2, "UDF3": UDF3, "UDF4": UDF4, "UDF5": UDF5, "IsOnlyFromUI": true
        };

        arrObj.push(objROTDDTO);
        var objRODDTO = {
            "ToolAssetOrderNumber": orderNumber, "ToolAssetOrderGUID": orderGUID, "ToolGUID": itemGUID
                        , "ReceiveBinID": binID, "ReceivedQuantity": recvQty, "RequestedQuantity": reqQty
                           , "OrderRequiredDateStr": recvDate, "ToolAssetOrderDetailGUID": orderDetailGUID
                           , "ReceiveBinName": binName, "Description": description
                           , "OrderNumber_ForSorting": orderNumberforsort
                        , "ReceivedToolDetail": arrObj, "IsOnlyFromUI": true
        };

        return SaveOrderFromNewReceive(objRODDTO, itemID, true, tr, cnt);

    }

    function NewNotSRReceiveWithoutOrder(itemID, obj) {

        //alert('test 1');

        $('#btnReceive_' + itemID).attr('disabled', 'disabled')
        $("#DivLoading").show();
        var tr = $(obj).parent().parent();

        var orderNumber = $(tr).find("#txtordernumber_" + itemID).val();
        var orderNumberforSort = $(tr).find("#hdnordernumberforsort_" + itemID).val();

        if ($.trim(orderNumber).length <= 0) {
            $("#spanGlobalMessage").html("@ResReceiveOrderDetails.ReqOrderNumber");
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            showNotificationDialog();
            $("#DivLoading").hide();
            $("#txtordernumber_" + itemID).focus();
            $('#btnReceive_' + itemID).removeAttr('disabled')
            return false;
        }

        //if ($.trim($(tr).find("#txtBin_" + itemID).val()).length <= 0) {
        //    $("#spanGlobalMessage").html("Please Enter Receive Bin Name.");
        //    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
        //    showNotificationDialog();
        //    $("#DivLoading").hide();
        //    $(tr).find("#txtBin_" + itemID).focus();
        //    $('#btnReceive_' + itemID).removeAttr('disabled')
        //    return false;
        //}

        var orderID = $(tr).find("#hdnOrderGUID_" + itemID).val();
        var orderGUID = $(tr).find("#hdnOrderID_" + itemID).val();

        var itemGUID = $(tr).find("#hdnToolGuid_" + itemID).val();
        var isLot = $(tr).find("#hdnIsLot_" + itemID).val();
        var isDCTrack = $(tr).find("#hdnIsDateCode_" + itemID).val();
        var expiredate = "";
        var lotNumber = "";
        var reqQty = 0;
        var recvQty = 0;
        var recvDate = $(tr).find("#txtReceived_" + itemID).val();
        var recvcost = 0;//$(tr).find("#txtCostBox_" + itemID).val();
        if ($(tr).find("#txtCostBox_" + itemID).length > 0) {
            recvcost = $(tr).find("#txtCostBox_" + itemID).val();
        }
        else if ($(tr).find("#hdnCostBox_" + itemID).length > 0) {
            recvcost = $(tr).find("#hdnCostBox_" + itemID).val();
        }
        var binID = '0'; //$(tr).find("#ddlBin_" + itemID).val();
        var binName = $.trim($(tr).find("#txtLocation_" + itemID).val());
        var description = $(tr).find("#txtDescription_" + itemID).val();

        var UDF1 = '';
        var UDF2 = '';
        var UDF3 = '';
        var UDF4 = '';
        var UDF5 = '';

        if ($('#NewReceiveEntry' + itemID).find('#UDF1_' + itemID).length > 0) {
            if ($('#NewReceiveEntry' + itemID).find('#UDF1_' + itemID)[0].nodeName === "SELECT")
                UDF1 = $('#NewReceiveEntry' + itemID).find('#UDF1_' + itemID).find("option:selected").text();
            else
                UDF1 = $('#NewReceiveEntry' + itemID).find('#UDF1_' + itemID).val();
        }

        if ($('#NewReceiveEntry' + itemID).find('#UDF2_' + itemID).length > 0) {
            if ($('#NewReceiveEntry' + itemID).find('#UDF2_' + itemID)[0].nodeName === "SELECT")
                UDF2 = $('#NewReceiveEntry' + itemID).find('#UDF2_' + itemID).find("option:selected").text();
            else
                UDF2 = $('#NewReceiveEntry' + itemID).find('#UDF2_' + itemID).val();
        }


        if ($('#NewReceiveEntry' + itemID).find('#UDF3_' + itemID).length > 0) {
            if ($('#NewReceiveEntry' + itemID).find('#UDF3_' + itemID)[0].nodeName === "SELECT")
                UDF3 = $('#NewReceiveEntry' + itemID).find('#UDF3_' + itemID).find("option:selected").text();
            else
                UDF3 = $('#NewReceiveEntry' + itemID).find('#UDF3_' + itemID).val();
        }


        if ($('#NewReceiveEntry' + itemID).find('#UDF4_' + itemID).length > 0) {
            if ($('#NewReceiveEntry' + itemID).find('#UDF4_' + itemID)[0].nodeName === "SELECT")
                UDF4 = $('#NewReceiveEntry' + itemID).find('#UDF4_' + itemID).find("option:selected").text();
            else
                UDF4 = $('#NewReceiveEntry' + itemID).find('#UDF4_' + itemID).val();
        }

        if ($('#NewReceiveEntry' + itemID).find('#UDF5_' + itemID).length > 0) {
            if ($('#NewReceiveEntry' + itemID).find('#UDF5_' + itemID)[0].nodeName === "SELECT")
                UDF5 = $('#NewReceiveEntry' + itemID).find('#UDF5_' + itemID).find("option:selected").text();
            else
                UDF5 = $('#NewReceiveEntry' + itemID).find('#UDF5_' + itemID).val();
        }

        recvQty = $(tr).find("#txtReceiveQuantity_" + itemID).val();
        reqQty = $(tr).find("#txtReceiveQuantity_" + itemID).val();
        var defaultReOrderQty = $(tr).find('#hdnDefaultReorderQty_' + itemID).val();
        var IsEnforceReorderQty = $(tr).find('#hdnIsEnforceReorderQty_' + itemID).val();

        if (isNaN(parseFloat(reqQty)) || reqQty <= 0) {

            $("#spanGlobalMessage").html("@ResReceiveOrderDetails.ReqReceiveQuantity");
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            showNotificationDialog();
            $("#DivLoading").hide();
            $(tr).find("#txtReceiveQuantity_" + itemID).focus();
            $('#btnReceive_' + itemID).removeAttr('disabled')
            return false;
        }
        else if (IsEnforceReorderQty == "True" && parseFloat(defaultReOrderQty) > 0) {
            var z = parseFloat(reqQty) % parseFloat(defaultReOrderQty);
            if (z != 0) {

                var devideval = parseInt(parseInt(reqQty) / parseInt(defaultReOrderQty)) + 1;
                reqQty = defaultReOrderQty * devideval;

            }
        }


        var arrObj = new Array();

        var objROTDDTO = {
            "ToolBinID": binID, "Received": recvDate, "Cost": recvcost
                            , "ToolGUID": itemGUID, "ReceivedDate": recvDate
                            , "UDF1": UDF1, "UDF2": UDF2, "UDF3": UDF3, "UDF4": UDF4, "UDF5": UDF5, "IsOnlyFromUI": true
        };

        arrObj.push(objROTDDTO);

        var objRODDTO = {
            "ToolAssetOrderNumber": orderNumber, "ToolAssetOrderGUID": orderGUID, "ToolGUID": itemGUID
                        , "ReceiveBinID": binID, "RequestedQuantity": reqQty, "ReceivedQuantity": recvQty
                        , "OrderRequiredDateStr": recvDate, 'ReceiveBinName': binName
                        , "OrderNumber_ForSorting": orderNumberforSort, "Description": description
                        , "ReceivedToolDetail": arrObj, "IsOnlyFromUI": true
        };


        return SaveOrderFromNewReceive(objRODDTO, itemID, false, tr, 0);
        $('#btnReceive_' + itemID).removeAttr('disabled')
    }

    function SaveOrderFromNewReceive(objRODDTO, itemID, IsSerial, tr, oldcnt) {
        //alert('test');
        var newtrID = '';
        $("#DivLoading").show();
        $.ajax({
            "url": '@Url.Content("~/ReceiveToolAsset/SaveNewReceiveWithoutOrder")'
            , "type": "POST"
            , "dataType": "json"
            , "contentType": "application/json"
            , "data": JSON.stringify(objRODDTO)
            , "async": false
            , "cache": false
            , "success": function (response) {

                $('#btnReceive_' + itemID).removeAttr('disabled')
                UDFInsertNewForGrid($('#NewReceiveEntry' + itemID));
                if (response.Status === "UDFError") {
                    $('#DivLoading').hide();

                    alert(response.Message);
                    return false;
                }
                if (response.Status === "Error") {
                    $('#DivLoading').hide();

                    alert(response.Message);
                    return false;
                }
                if (!IsSerial) {
                    $('#ToolModeDataTable').dataTable().fnStandingRedraw()
                    var onHandQty = parseFloat($('#ToolModeDataTable').find("#spnOnHand_" + itemID).text());
                    var ReceivedQty = parseFloat(response.ReceivedQty);
                    $('#ToolModeDataTable').find("#spnOnHand_" + itemID).text(onHandQty + ReceivedQty);
                    $("#DivLoading").hide();
                    $("#spanGlobalMessage").html('@(eTurns.DTO.Resources.ResMessage.SaveMessage)');
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    showNotificationDialog();
                    $('#ToolModeDataTable').find("#" + itemID).find("img").click();

                    return false;
                }
                else {

                    var reqQty = $("#txtSRReqQty_" + itemID).val();
                    var onHandQty = parseFloat($('#ToolModeDataTable').find("#spnOnHand_" + itemID).text());
                    $('#ToolModeDataTable').find("#spnOnHand_" + itemID).text(onHandQty + 1);
                    var onSuggestedQty = parseFloat($('#ToolModeDataTable').find("#spnSuggested_" + itemID).text());
                    if (!isNaN(onSuggestedQty) && parseFloat(onSuggestedQty) > 0) {
                        $('#ToolModeDataTable').find("#spnSuggested_" + itemID).text(onSuggestedQty - 1);
                    }

                    if (parseInt(reqQty) <= parseInt(response.ReceivedQty)) {
                        $("#spanGlobalMessage").html("@ResReceiveOrderDetails.MsgAllSerialsReceived");
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        showNotificationDialog();
                        $('#ToolModeDataTable').find("#" + itemID).find("img").click();
                        $('#ToolModeDataTable').dataTable().fnStandingRedraw();
                        $("#DivLoading").hide();
                        return false;
                    }
                    else {
                        $("#spanGlobalMessage").html('@(eTurns.DTO.Resources.ResMessage.SaveMessage)');
                    }

                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    showNotificationDialog();
                    $("#hdnSROrderGUID_" + itemID).val(response.OrderGUID);
                    $("#hdnSROrderDetailGUID_" + itemID).val(response.OrderDetailGUID);
                    $("#hdnSROrderDetailRecvQty_" + itemID).val(response.ReceivedQty);
                    $("#txtSROrderNumber_" + itemID).attr('readonly', 'readonly');
                    $("#txtSRReqQty_" + itemID).attr('readonly', 'readonly');
                    $("#txtSRRecvQty_" + itemID).val(response.ReceivedQty);

                    $(".myDatePicker").datepicker("destroy");
                    $(".DirectReciveSRAuto").autocomplete("destroy");

                    var id = $(tr).prop("id");
                    var splitId = id.split("_");
                    var cur_num = oldcnt;
                    var cloned = $(tr).clone(true, true).get(0);
                    ++cur_num;
                    cloned.id = splitId[0] + "_" + splitId[1] + "_" + cur_num;;
                    $(cloned).find("input,select,a").each(function (index, element) {
                        if (element.id) {
                            var matches = element.id.match(/(.+)_\d+/);
                            if (matches && matches.length >= 2) {
                                element.id = matches[1] + "_" + cur_num;
                            }
                        }
                        if (element.name) {
                            var matches = element.name.match(/(.+)_\d+/);
                            if (matches && matches.length >= 2) {
                                element.name = matches[1] + "_" + cur_num;
                            }
                        }
                    });

                    $(cloned).find("#hdnIsLoadMoreLocations").val("false");

                    $(cloned).appendTo('#NewSRReceiveEntry' + itemID);
                    $("#txtSRNumber_" + itemID + "_" + cur_num).val('');
                    $("#txtSRNumber_" + itemID + "_" + cur_num).focus();
                    $(tr).find("input[type='button'],select").attr("disabled", "disabled");
                    $(tr).find("input[type='text']").attr("disabled", "disabled");
                    $(tr).find("#btnSRReceive_" + itemID + "_" + oldcnt).css("display", "none");
                    $(".myDatePicker").datepicker({
                        dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat', showButtonPanel: true,
                        changeMonth: true,
                        changeYear: true,
                        clearText: 'Clear', onClose: function () { this.focus(); }
                    });
                    $("#txtSRNumber_" + itemID + "_" + cur_num).focus();
                    $("#DivLoading").hide();
                    isDirtyForm = false;
                    return false;
                }

            }
            , "error": function (xhr) {
                $('#btnReceive_' + itemID).removeAttr('disabled')
                $("#spanGlobalMessage").html("@ResCommon.ErrorInProcess");
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                showNotificationDialog();
                $("#DivLoading").hide();
                return false;
            }
        });
    }

    function GetToolAssetOrderNumber(toolID, isSerial) {
        $("#DivLoading").show();
        $.ajax({
            "url": '@Url.Content("~/ReceiveToolAsset/GetOrderNumber")'
            , "type": "GET"
            , "dataType": "json"
            , "contentType": "application/json"
            , "data": { 'ToolID': toolID}
            , "async": false
            , "cache": false
            , "success": function (response) {
                if (isSerial) {
                    $("#txtSROrderNumber_" + toolID).val(response.OrderNumber);
                }
                else {
                    $("#txtordernumber_" + toolID).val(response.OrderNumber);
                }

                $("#hdnordernumberforsort_" + toolID).val(response.OrderNumberForSort);

                $("#DivLoading").hide();
                return false;
            }
            , "error": function (xhr) {
                $("#DivLoading").hide();
                return false;
            }
        });
        return false;
    }


    function isDuplicateSR(obj, ordDetaiID) {

        var tr = $(obj).parent().parent();
        var tr = $(obj).parent().parent();
        var id = $(tr).attr('id');
        var cnt = id.split("_")[2];
        var txtsr = $(tr).find("#txtSRNumber_" + ordDetaiID + "_" + cnt);
        var itemGuid = $(tr).find("#hdnSRToolGuid_" + ordDetaiID + "_" + cnt).val();

        var returnResult = false;
        if ($(txtsr).val() != '') {
            var consign = $(tr).find("#hdnSRIsConsign_" + ordDetaiID + "_" + cnt).val();
            $.ajax({
                "url": '@Url.Content("~/ReceiveToolAsset/DuplicateCheckSrNumberTool")',
                data: { SrNumber: $(txtsr).val(), ID: 0, ToolGUID: itemGuid },
                "async": false,
                cache: false,
                "dataType": "text",
                "success": function (response) {
                    if (response == "duplicate") {
                        $(txtsr).css("background-color", "#F7BBC4");
                        //$(txtsr).select();
                        //$(txtsr).focus();
                        return false;
                        returnResult = false;
                    }
                    else {
                        $(txtsr).css("background-color", "");
                        returnResult = true;
                    }
                },
                error: function (response) {
                    $("#spanGlobalMessage").html(response);
                    returnResult = false;
                }
            });
        }
        else {
            returnResult = true;
        }
        if (returnResult == false) {
            // alert('Duplicate Serial Number Found');
            $("#spanGlobalMessage").html('@ResMessage.DuplicateSerialFound');
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            showNotificationDialog();
        }

        return returnResult;
    }

    function RegisterDatePicker() {
        $('.myDatePicker').live("focusin", function () {
            $(this).datepicker(
                        {
                            dateFormat: 'mm/dd/yy',
                            showButtonPanel: true,
                            clearText: 'Clear',
                            onClose: function () {
                                $(this).attr('val');
                                $(this).attr('id');
                            }
                        });
        });
    }

    function DisplayInTransitQty(obj) {
        $("#ToolQty").empty();
        var itemGuid = obj.id.split('_');
        //$('#ToolQty').data({ "itemGuid": itemGuid[1], "url": '@Url.Content("~/Inventory/ItemInTransitQty")' }).dialog('open');
        $('#ToolQty').data({ "itemGuid": itemGuid[1], "url": '@Url.Content("~/Inventory/ItemOnTransferInTransitQty")' }).dialog('open');
        return false;
    }

    function DisplayOnTransferQty(obj) {
        $("#ToolQty").empty();
        var itemGuid = obj.id.split('_');
        $('#ToolQty').data({ "itemGuid": itemGuid[1], "url": '@Url.Content("~/Inventory/ItemOnTransferQty")' }).dialog('open');
        return false;
    }
    _Common.setGloblaSearch('searchInAllTools', 'ToolModeDataTable');
</script>
