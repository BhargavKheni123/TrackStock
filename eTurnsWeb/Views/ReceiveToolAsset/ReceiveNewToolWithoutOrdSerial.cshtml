@model ToolMasterDTO
@{
    bool isCost = false;
    isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);
    bool isUpdate = false;
    bool isInsert = false;
    isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    eTurns.DAL.RegionSettingDAL objRegionSettingDAL = new eTurns.DAL.RegionSettingDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
}
<div class="innerGrid" id="SRInnerGrid_@Model.ID" style="background: none repeat scroll 0 0 #F8F8F8; padding: 20px 10px 20px 10px;float:left">
    <table class="display">
        <tr>
            <td>
                <b>@eTurns.DTO.ResToolAssetOrder.ToolAssetOrderNumber</b>
            </td>
            <td>
                @Html.TextBox("txtSROrderNumber_" + Model.ID, "", new { @class = "text-boxinner", @style = "width:100px;" })
                <input type="hidden" id="hdnordernumberforsort_@Model.ID" value="" />
                <input type="hidden" id="hdnSROrderGUID_@Model.ID" value="" />
                <input type="hidden" id="hdnSROrderDetailGUID_@Model.ID" value="" />
                <input type="hidden" id="hdnSROrderDetailRecvQty_@Model.ID" value="" />
                

            </td>
            <td>
                <b>@eTurns.DTO.ResOrder.RequestedQuantity</b>
            </td>
            <td>
                @Html.TextBox("txtSRReqQty_" + Model.ID, "", new { @class = "text-boxinner text-boxQuantityFormatSR", @style = "width:80px;" })
            </td>
            <td>
                <b>@eTurns.DTO.ResOrder.PackSlipNumber</b>
            </td>
            <td>
                @Html.TextBox("txtPackslip_" + Model.ID, "", new { @class = "text-boxinner", @style = "width:90px;" })
            </td>
            <td>
                <b>@eTurns.DTO.ResOrder.ReceivedQuantity</b>
            </td>
            <td>
                @Html.TextBox("txtSRRecvQty_" + Model.ID, "0", new { @class = "text-boxinner text-boxQuantityFormatSR", @onfocus = "this.blur();", @readOnly = "readOnly", @style = "width:80px;background:LightGray" })
            </td>
        </tr>
    </table>
    <br />
    <table id="NewSRReceiveEntry@(Model.ID)" class="display">
        <thead>
            <tr>
                <th>
                    &nbsp;
                </th>
                <th>
                    @eTurns.DTO.ResToolAssetQuantityDetail.SerialNumber
                </th>
                
                <th>
                    @eTurns.DTO.ResReceiveToolAssetOrderDetails.ReceiveBin
                </th>
                
                    <th>
                        @eTurns.DTO.ResToolAssetQuantityDetail.Cost
                    </th>
                
                <th>
                    @eTurns.DTO.ResReceiveToolAssetOrderDetails.ReceivedDate
                </th>
                <th>
                    @eTurns.DTO.ResReceiveToolAssetOrderDetails.Description
                </th>
                @Html.RenderColumnsHeader("ReceivedToolAssetOrderTransferDetail", typeof(eTurns.DTO.ResReceiveToolAssetOrderDetails), "")
            </tr>
        </thead>
        <tbody>
            <tr id="innerSR_@(Model.ID)_0">
                <td>
                 @if (isInsert)
                 {
                    <input type="button" id="btnSRReceive_@(Model.ID)_0" onclick="javascript:return NewSRReceiveWithoutOrder('@Model.ID',this)" class="GridBtnStyle inLineBtn" value="Receive" />
                 } 
                    
                    <input type="hidden" id="hdnSRIsSerial_@(Model.ID)_0" value="@Model.SerialNumberTracking.ToString()" />
                    <input type="hidden" id="hdnSRToolGuid_@(Model.ID)_0" value="@Model.GUID" />
                    <input type="hidden" id="hdnSRToolType_@(Model.ID)_0" value="@Model.Type" />
                    <input type="hidden" id="hdnSRCostBox_@(Model.ID)_0" value="@Model.Cost.GetValueOrDefault(0)" />
                    
                   
                </td>
                <td>
                    @Html.TextBox("txtSRNumber_" + Model.ID + "_0", "", new { @class = "text-boxinner", @onblur = "return isDuplicateSR(this,'" + Model.ID.ToString() + "')", @style = "width:150px;", maxlength = "1024" })
                </td>
                <td>
                    @if (HasOnTheFlyEntryRight)
                    {
                        <span style='position:relative'>
                        @Html.TextBoxFor(modelItem => modelItem.Location, new { @id = "txtSRLocation_" + Model.ID + "_0", @class = "text-boxinner DirectReciveSRAuto", @style = "width:130px;" })
                        <a id="lnkShowAllOptions_@(Model.ID)_0" href='javascript:void(0);' style='position:absolute; right:5px; top:0px;' class="ShowAllOptions" >
                                            <img src='/Content/images/arrow_down_black.png' alt='select' /></a>
                                            <input type="hidden" value="false" id="hdnIsLoadMoreLocations" />
                                            </span>
                    }
                    else
                    {
                        string slctID = Model.ID + "_" + "0";
                        List<BinMasterDTO> lstBinMaster = new List<BinMasterDTO>();
                        lstBinMaster.Add(new BinMasterDTO() { BinNumber = Model.Location });
                        @Html.DropDownList("slctBinNumber", new SelectList(lstBinMaster, "Location", "Location", Model.Location), new { @id = "slctReceiveLocation_" + slctID, @class = "selectBox slctbin" })
                        <input type="text" name="txtSRLocation_@(slctID)" id="txtSRLocation_@(slctID)" value="@Model.Location" style="display:none;" />
                    }

                </td>
                <td>
                       @Html.TextBoxFor(modelItem => Model.Cost, eTurnsWeb.Helper.SessionHelper.PriceFormat, new { @class = "text-boxinner numericinput", @id = "txtSRCostBox_" + Model.ID + "_0" })
                </td>
                <td>
                    @Html.TextBox("txtSRReceived_" + Model.ID + "_0", objRegionSettingDAL.GetCurrentDatetimebyTimeZone(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.UserID, eTurns.DTO.Resources.ResourceHelper.CurrentCult, eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture).ToString(eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture), new { @class = "text-boxinner myDatePicker", @style = "width:85px" })
                </td>
                <td>
                    
                    @Html.TextBox("txtDescription_" + Model.ID + "_0", "", new { @class = "text-boxinner", @style = "width:150px;", maxlength = "1024" })
                </td>
                @Html.RenderColumnsArrayEditableObjectForDOM("ReceivedToolAssetOrderTransferDetail", false, "_" + Model.ID + "_0")
            </tr>
        </tbody>
    </table>
</div>
<script type="text/javascript">
    $(document).ready(function () {

        UDFfillEditableOptionsForGrid();
        $('.ShowAllOptions').click(function () {
            if ($(this).siblings('.DirectReciveSRAuto').attr("disabled") != "disabled") {
                $(this).siblings('.DirectReciveSRAuto').trigger("focus");
                $(this).siblings(".DirectReciveSRAuto").autocomplete("search", " ");
            }
        });

        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormatSR").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 0
        });

        GetToolAssetOrderNumber("@Model.ID", true);

        $('#txtSRReqQty_@(Model.ID)').focus();

        $(".myDatePicker").datepicker({
            dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat', showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            clearText: 'Clear', onClose: function () { this.focus(); }
        });

        $('#NewSRReceiveEntry' + '@Model.ID').on({
            mouseover: function () {
                var tr = $(this).parent().parent();
                var itmGuid = '@Model.GUID';
                var orderGuid = '@Guid.Empty';
                getItemInventoryStagingLocation($(this), "", itmGuid, orderGuid);
            },
            focus: function () {
                var tr = $(this).parent().parent();
                var itmGuid = '@Model.GUID';
                var orderGuid = '@Guid.Empty';
                getItemInventoryStagingLocation($(this), "", itmGuid, orderGuid);
            },
            change: function () {
                var slctid = "txtSRLocation_" + '@Model.ID' + "_0";

                $(this).parent().find("input[id='" + slctid + "']").val($(this).val());
            }
        }, "select.slctbin");

        $('#NewSRReceiveEntry' + '@Model.ID').on('focus', "input.DirectReciveSRAuto", function (e) {

            var ajaxURL = '/ReceiveToolAsset/GetToolLocations';
            var tr = $(this).parent().parent().parent();
            var toolGuid = '@Model.GUID';
            var orderGuid = '@Guid.Empty';
            var hdnIsLoadMoreLocations = $(tr).find("#hdnIsLoadMoreLocations").val();

            $(this).autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: ajaxURL,
                        type: 'POST',
                        data: JSON.stringify({ 'ToolAssetOrderGuid': orderGuid, 'ToolGuid': toolGuid, 'NameStartWith': request.term, 'IsLoadMoreLocations': hdnIsLoadMoreLocations }),
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data) {
                            response($.map(data, function (Items) {
                                return {
                                    label: Items.Value,
                                    value: Items.Key
                                }
                            }));

                        },
                        error: function (err) {
                            $('#DivLoading').hide();
                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {
                    if (ui.item.value == MoreLocation) {
                        $(tr).find("#hdnIsLoadMoreLocations").val("true");
                        $(this).trigger("focus");
                        $(this).autocomplete("search", " ");
                        return false;
                    }
                    else {
                        $(this).val(ui.item.value);
                    }
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    $('ul.ui-autocomplete').css('overflow-y', 'auto');
                    $('ul.ui-autocomplete').css('max-height', '300px');
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                change: function (event, ui) {
                }
            });
        });
    });

</script>
