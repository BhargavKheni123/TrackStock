@model ReceivedOrderTransferDetailDTO
@{
    string costFormat = "N";
    string qtyFormat = "N";
    string dateFomat = "MM/dd/yyyy";
    //if (eTurnsWeb.Helper.SessionHelper.CompanyConfig != null)
    //{

    //    costFormat += eTurnsWeb.Helper.SessionHelper.CompanyConfig.CostDecimalPoints.GetValueOrDefault(0);

    //    qtyFormat += eTurnsWeb.Helper.SessionHelper.CompanyConfig.QuantityDecimalPoints.GetValueOrDefault(0);

    //    if (!string.IsNullOrEmpty(eTurnsWeb.Helper.SessionHelper.CompanyConfig.DateFormatCSharp))
    //    {
    //        dateFomat = eTurnsWeb.Helper.SessionHelper.CompanyConfig.DateFormatCSharp;
    //    }
    //}

    if (!string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits))
    {
        costFormat += eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits;
    }
    if (!string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.NumberDecimalDigits))
    {
        qtyFormat += eTurnsWeb.Helper.SessionHelper.NumberDecimalDigits;
    }
    if (!string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.DateTimeFormat))
    {
        dateFomat = eTurnsWeb.Helper.SessionHelper.DateTimeFormat;
    }

    bool isChange = (bool)ViewBag.IsChanged;
    Guid OrderGUID = (Guid)ViewBag.OrderGuid;
    bool isUpdate = false;
    bool isInsert = false;
    isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);    
}
<div class="innerGrid" id="InnerGrid_@Model.ID" style="background: none repeat scroll 0 0 #F8F8F8; padding: 10px;float:left;  width: 98%;">
    <table id="ReceiveEdit_@(Model.ID)" class="display" style="float:left;clear:both;width:98%;">
        <thead>
            <tr>
                <th>
                    @ResItemMaster.ItemMaster
                </th>
                @if (Model.SerialNumberTracking)
                {
                    <th>
                        @ResItemLocationDetails.SerialNumber
                    </th>
                }
                @if (Model.LotNumberTracking)
                {
                    <th>
                        @ResItemLocationDetails.LotNumber
                    </th>
                }
                @if (Model.DateCodeTracking)
                {
                    <th>
                        @ResItemLocationDetails.ExpirationDate
                    </th>
                }
                @if (!Model.SerialNumberTracking && Model.CustomerOwnedQuantity.GetValueOrDefault(0) > 0)
                {
                    <th>
                        @ResItemLocationDetails.CustomerOwnedQuantity
                    </th>
                }
                @if (!Model.SerialNumberTracking && Model.ConsignedQuantity.GetValueOrDefault(0) > 0)
                {
                    <th>
                        @ResItemLocationDetails.ConsignedQuantity
                    </th>
                }
                <th>
                    @ResItemLocationDetails.Cost
                </th>
                <th>
                    @ResItemLocationDetails.ReceivedDate
                </th>
                <th>
                    @ResReceiveOrderDetails.ReceiveBin
                </th>
                <th>
                    @ResOrder.PackSlipNumber
                </th>
                @Html.RenderColumnsHeader("ReceivedOrderTransferDetail", typeof(eTurns.DTO.ResReceiveOrderDetails), "")
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @Model.ItemNumber
                </td>
                @if (Model.SerialNumberTracking)
                {
                    <td>
                        @Html.TextBox("txtSerialNumber", Model.SerialNumber, new { @class = "text-boxinner", @style = "width:80px;" })
                    </td>
                }
                @if (Model.LotNumberTracking)
                {
                    <td>
                        @Html.TextBox("txtLotNumber", Model.LotNumber, new { @class = "text-boxinner", @style = "width:80px;" })
                    </td>
                }
                @if (Model.DateCodeTracking)
                {
                    <td>
                        @Html.TextBox("txtExpiration", Model.Expiration, new { @class = "text-boxinner dateTextbox", @style = "width:80px;", @readonly = "readonly" })
                    </td>
                }
                @if (!Model.SerialNumberTracking && Model.CustomerOwnedQuantity.GetValueOrDefault(0) > 0)
                {
                    <td>
                        @Html.TextBox("txtCustomerOwnedQty", Model.CustomerOwnedQuantity.GetValueOrDefault(0), new { @class = "text-boxinner numericinput", @style = "width:80px;" })
                    </td>
                }
                @if (!Model.SerialNumberTracking && Model.ConsignedQuantity.GetValueOrDefault(0) > 0)
                {
                    <td>
                        @Html.TextBox("txtConsignedQty", Model.ConsignedQuantity.GetValueOrDefault(0), new { @class = "text-boxinner text-boxQuantityFormat", @style = "width:80px;" })
                    </td>
                }
                <td>
                    @Html.TextBox("txtReceivedCost", Model.Cost.GetValueOrDefault(0), new { @class = "text-boxinner numericinput", @style = "width:80px;" })
                </td>
                <td>
                    @Html.TextBox("txtReceivedDate", Model.Received, new { @class = "text-boxinner dateTextbox", @style = "width:80px;", @readonly = "readonly" })
                </td>
                <td>
                    @Html.TextBox("txtReceiveBin", Model.BinNumber, new { @class = "text-boxinner ReciveEditAuto", @style = "width:90px;" })
                </td>
                <td>
                    @Html.TextBox("txtPackslip", Model.PackSlipNumber, new { @class = "text-boxinner", @style = "width:80px;" })
                </td>
                @Html.RenderColumnsArrayEditableObjectForDOMWithValue("ReceivedOrderTransferDetail", Model)
            </tr>
        </tbody>
    </table>
    <div style="width: 98%; float: left; text-align: center; margin: 10px;">
        @if (!isChange && isInsert)
        {
            <input type="button" class="CreateBtn" value="@ResCommon.Save" id="bntReceiveEdit" style="text-align: center;
                float: left" />
        }
        <input type="button" class="CreateBtn" value="@ResCommon.Cancel" id="bntReceiveEditCancel" style="text-align: center;
            float: left" />
    </div>
</div>
<div id="divChnageReceivedRecord" title="Edit Confirmation" class="dialog" style="float: left;
    display: none; width: 500px;">
    <div class="inner" style="width: 500px;">
        @*<p class="text" style="float: left; width: 98%; text-align: left; padding: 0px 0px 5px 10px;">
            Location detail not match with received detail, this will affect quantity mismatch.
        </p>*@ @*<p class="text" style="float: left; width: 98%; text-align: left; padding: 0px 0px 5px 10px;">
            Are you sure you want to edit received record?
        </p>*@
        <p class="text" style="float: left; width: 98%; text-align: left; padding: 0px 0px 5px 10px;">
            @ResOrder.MSGReceivedNotEditable
        </p>
        <p class="text" style="float: left; width: 98%; text-align: center; padding-left: 10px;">
            @*<a href="javascript:void(0)" class="yes" onclick="CloseModelYes()">
                <img src="~/Content/images/yes.png" alt="Yes" />Yes</a> &nbsp;&nbsp;&nbsp;*@
            <a href="javascript:void(0)" class="no" onclick="CloseModelNo()">
                <img src="~/Content/images/no.png" alt="No" />Ok</a></p>
    </div>
</div>
<script type="text/javascript" language="javascript">

    $('#bntReceiveEditCancel').on('click', function () {
        $('#divEditReceive').dialog('close');
    });

    $('#bntReceiveEdit').on('click', function () {
        $('#DivLoading').show();
        var obj = new Object();
        obj.ID = '@Model.ID';
        obj.GUID = '@Model.GUID';
        obj.OrderDetailGUID = '@Model.OrderDetailGUID';
        obj.ItemGUID = '@Model.ItemGUID';
        obj.ItemLocationDetailGUID = '@Model.ItemLocationDetailGUID';

        if ('@Model.LotNumberTracking' == 'True') {
            obj.LotNumber = $('#txtLotNumber').val();
        }

        if ('@Model.DateCodeTracking' == 'True') {
            obj.Expiration = $('#txtExpiration').val();
        }

        if ('@Model.SerialNumberTracking' == 'True') {
            obj.SerialNumber = $('#txtSerialNumber').val();
            obj.CustomerOwnedQuantity = '@Model.CustomerOwnedQuantity';
            obj.ConsignedQuantity = '@Model.ConsignedQuantity';
        }
        else {
            if ($('#txtCustomerOwnedQty').length > 0) {
                obj.CustomerOwnedQuantity = $('#txtCustomerOwnedQty').val();
            }
            if ($('#txtConsignedQty').length > 0) {
                obj.ConsignedQuantity = $('#txtConsignedQty').val();
            }
        }

        obj.Cost = $('#txtReceivedCost').val();
        obj.Received = $('#txtReceivedDate').val();
        obj.ReceivedDate = $('#txtReceivedDate').val();
        obj.BinNumber = $('#txtReceiveBin').val();
        obj.PackSlipNumber = $('#txtPackslip').val();
        obj.IsOnlyFromUI = true;
        if ($('#ReceiveEdit_' + '@(Model.ID)').find('#UDF1').length > 0) {
            obj.UDF1 = $('#ReceiveEdit_' + '@(Model.ID)').find('#UDF1').val();
        }
        if ($('#ReceiveEdit_' + '@(Model.ID)').find('#UDF2').length > 0) {
            obj.UDF2 = $('#ReceiveEdit_' + '@(Model.ID)').find('#UDF2').val();
        }
        if ($('#ReceiveEdit_' + '@(Model.ID)').find('#UDF3').length > 0) {
            obj.UDF3 = $('#ReceiveEdit_' + '@(Model.ID)').find('#UDF3').val();
        }
        if ($('#ReceiveEdit_' + '@(Model.ID)').find('#UDF4').length > 0) {
            obj.UDF4 = $('#ReceiveEdit_' + '@(Model.ID)').find('#UDF4').val();
        }
        if ($('#ReceiveEdit_' + '@(Model.ID)').find('#UDF5').length > 0) {
            obj.UDF5 = $('#ReceiveEdit_' + '@(Model.ID)').find('#UDF5').val();
        }
        var ajaxURL = '@Url.Content("~/Receive/EditReceivedRecord")';
        $.ajax({
            url: ajaxURL,
            data: JSON.stringify({ 'objDTO': obj }),
            type: 'POST',
            contentType: 'application/json',
            dataType: 'json',
            success: function (Result) {
                UDFInsertNewForGrid($('#ReceiveEdit_' + '@(Model.ID)'));
                $('#DivLoading').hide();
                if (Result.Status) {
                    $('#divEditReceive').data({ Success: true }).dialog('close');
                }
            },
            error: function (xhr) {
                $('#DivLoading').hide();
            }
        });

    });
    $(document).ready(function () {
        $('table.display td').css('border', '1px solid #ddd');

        UDFfillEditableOptionsForGrid();

        var cst = '@(costFormat.Replace("N", ""))';
        var qty = '@(qtyFormat.Replace("N", ""))';

        if (cst.length <= 0) {
            cst = 0;
        }
        if (qty.length <= 0) {
            qty = 0;
        }
        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt(cst, 10)
        });

        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt(qty, 10)
        });

        $("input.dateTextbox").datepicker({
            dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat', showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            clearText: 'Clear', onClose: function () { this.focus(); }
        });

        $('#ReceiveEdit_@(Model.ID)').on('focus', "input.ReciveEditAuto", function (e) {

            var ajaxURL = '/Receive/GetItemLocations';
            var tr = $(this).parent().parent();
            var itmGuid = '@Model.ItemGUID';

            $(this).autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: ajaxURL,
                        type: 'POST',
                        data: JSON.stringify({ 'OrderGuid': '@(OrderGUID)', 'ItemGuid': itmGuid, 'NameStartWith': request.term }),
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data) {
                            response($.map(data, function (Items) {
                                return {
                                    label: Items.Value,
                                    value: Items.Key
                                }
                            }));

                        },
                        error: function (err) {
                            $('#DivLoading').hide();
                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {
                    $(this).val(ui.item.value);
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                change: function (event, ui) {
                }
            });
        });

        if ('@isChange' == 'True') {
            $('#divChnageReceivedRecord').modal();
            $('#divChnageReceivedRecord').parent().parent().find(".modalCloseImg").css('display', 'none');
        }

    });

    function CloseModelYes() {
        $('#divChnageReceivedRecord').parent().parent().find(".modalCloseImg").click();
        return false;
    }

    function CloseModelNo() {
        $('#divChnageReceivedRecord').parent().parent().find(".modalCloseImg").click();
        $('#divEditReceive').dialog('close');
        return false;
    }
    
</script>
