@model eTurnsWeb.Models.ItemModelPerameter
@{    
    var settings = new GridHeaderSettings() { DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = false, dataViewType = DataViewType.None, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = false, ColumnSetupFor = "ItemMasterModelList" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ItemMaster" };
}
<div class="searchWrapper">
    <div class="searchBlock">
        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
        <div class="searchinputB">
            <input type="text" class="searchinput" id="ItemModel_filter" />
            <a href="" class="xclose">
                <img src="~/Content/images/x.png" alt="X" id="clear_QLItemModel_filter" /></a>
        </div>
    </div>
</div>
@Html.ItemModelGridTopHeader(settings)
@Html.Partial("NarrowSearchForItemModel", modelCommon)
<div class="userContent ">
    <table id="ItemModeDataTable" class="display">
        <thead>
            <tr>
                <th>
                    &nbsp;
                </th>
                <th>@eTurns.DTO.Resources.ResCommon.ID
                </th>
                <th>
                    @eTurns.DTO.ResPullMaster.PullCredit
                </th>
                <th>
                    Qty to Pull
                </th>
                <th>@eTurns.DTO.ResItemMaster.ItemNumber
                </th>
                <th>
                    Location
                </th>
                <th>
                    Project Spent
                </th>
                @Html.RenderColumnsHeader("PullMaster", typeof(eTurns.DTO.ResPullMaster))
                @*<th>
                    @eTurns.DTO.Resources.ResCommon.RoomName
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                </th>*@ @*<th>
                    @eTurns.DTO.Resources.ResCommon.IsDeleted
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.IsArchived
                </th>*@ @*<th>
                                @eTurns.DTO.ResItemMaster.ManufacturerID
                            </th>*@
                <th>
                    @eTurns.DTO.ResItemMaster.ManufacturerNumber
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ManufacturerName
                </th>
                @*<th>
                                @eTurns.DTO.ResItemMaster.SupplierID
                            </th>*@
                <th>
                    @eTurns.DTO.ResItemMaster.SupplierPartNo
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Supplier
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.UPC
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.UNSPSC
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Description
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LongDescription
                </th>
                @*<th>
                    @eTurns.DTO.ResItemMaster.CategoryID
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.GLAccountID
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.UOMID
                </th>*@
                <th>
                    @eTurns.DTO.ResItemMaster.PricePerTerm
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DefaultPullQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Cost
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Markup
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SellPrice
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ExtendedCost
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LeadTimeInDays
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Link1
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Link2
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Trend
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Taxable
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Consignment
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.StagedQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.InTransitquantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnOrderQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnTransferQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SuggestedOrderQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.RequisitionedQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.AverageUsage
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Turns
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnHandQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.CriticalQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.MinimumQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.MaximumQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.WeightPerPiece
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ItemUniqueNumber
                </th>
                <th>@eTurns.DTO.ResItemMaster.IsTransfer
                </th>
                <th>@eTurns.DTO.ResItemMaster.IsPurchase
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.InventoryClassification
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SerialNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LotNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DateCodeTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ItemType
                </th>
                @*<th>
                    @eTurns.DTO.ResItemMaster.ImagePath
                </th>*@
                <th>
                    @eTurns.DTO.ResItemMaster.IsLotSerialExpiryCost
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.RoomName
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                </th>
                <th>
                    @eTurns.DTO.ResCategoryMaster.Category
                </th>
                <th>
                    @eTurns.DTO.ResUnitMaster.Unit
                </th>
                <th>
                    @eTurns.DTO.ResGLAccount.GLAccount
                </th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <button id="btnAddNewCompany" value="Ok" style="display: none">
        Add New</button>
    <button id="btnDeleteCompany" value="Cancel" style="display: none">
        Delete Selected</button>
    <div id="processing_message" style="display: none" title="Processing">@eTurns.DTO.Resources.ResMessage.RequestProcessMessage</div>
</div>
<div class="editorForm">
    <input type="submit" value="Pull All" id="btnAddAll" class="CreateBtn" onclick="SaveAllClick();return false;"
        style="float: left; margin-left: 15px; margin-top: 1px;">
</div>
<script type="text/javascript">
    var objColumns = {
        '@MvcHtmlString.Create("&nbsp;")': 0,
        '@MvcHtmlString.Create("Qty")': 1,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ID)': 2,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.ItemNumber)': 3,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.ManufacturerName)': 4,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.ManufacturerNumber)': 5,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.SupplierID)': 6,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.SupplierPartNo)': 7,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.UPC)': 8,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.UNSPSC)': 9,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Description)': 10,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.LongDescription)': 11,        
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.PricePerTerm)': 12,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.DefaultReorderQuantity)': 13,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.DefaultPullQuantity)': 14,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Cost)': 15,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Markup)': 16,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.SellPrice)': 17,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.ExtendedCost)': 18,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.LeadTimeInDays)': 19,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Link1)': 20,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Link2)': 21,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Trend)': 22,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Taxable)': 23,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Consignment)': 24,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.StagedQuantity)': 25,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.InTransitquantity)': 26,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.OnOrderQuantity)': 27,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.OnTransferQuantity)': 28,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.SuggestedOrderQuantity)': 29,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.RequisitionedQuantity)': 30,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.AverageUsage)': 31,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Turns)': 32,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.OnHandQuantity)': 33,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.CriticalQuantity)': 34,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.MinimumQuantity)': 35,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.MaximumQuantity)': 36,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.WeightPerPiece)': 37,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.ItemUniqueNumber)': 38,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.IsTransfer)': 39,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.IsPurchase)': 40,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.InventoryClassification)': 41,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.SerialNumberTracking)': 42,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.LotNumberTracking)': 43,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.DateCodeTracking)': 44,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.ItemType)': 45,        
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.IsLotSerialExpiryCost)': 46,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedOn)': 47,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedOn)': 48,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedBy)': 49,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedBy)': 50,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.RoomName)': 51,
        '@MvcHtmlString.Create(eTurns.DTO.ResCategoryMaster.Category)': 52,
        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.Unit)': 53,
        '@MvcHtmlString.Create(eTurns.DTO.ResGLAccount.GLAccount)': 54,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.UDF1)': 55,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.UDF2)': 56,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.UDF3)': 57,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.UDF4)': 58,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.UDF5)': 59
    };
     
</script>
<script language="javascript" type="text/javascript">
    var oTableItemModel;
    var sImageUrl = "/Content/images/";
    var anOpen = [];
 
   $(document).ready(function(){
      fillItemMaster(false);
   });


   function AddSingleItemToPullList(obj){
    
        var txxt = $(obj).parent().parent().find('#txtQty');
        var vBinID = $(obj).parent().parent().find('#BinID')[0].value;
        var txtQty = txxt.val();
        if (txtQty != 'undefined' && txtQty.length > 0 && vBinID > 0 ) {
            var trimtxtVal = txtQty.replace(/ /g, '');
            if (trimtxtVal.length > 0) {
            
                var vItemID = $(obj).parent().find('#spnItemID').text();
                var vItemGUID = $(obj).parent().find('#spnItemGUID').text();
                var vProjectID = $(obj).parent().parent().find('#ProjectID')[0].value == "" ? 0 : $(obj).parent().parent().find('#ProjectID')[0].value;
                var vspnOn_HandQuantity = $(obj).parent().parent().find('#spnOn_HandQuantity').text() == "" ? 0 : $(obj).parent().parent().find('#spnOn_HandQuantity').text();
                var vPullCreditText = $(obj).parent().parent().find('input[name=colors'+vItemID+']:checked')[0].value;

                $('#DivLoading').show();
                
                var vUDF1 = '';
                var vUDF2 = '';
                var vUDF3 = '';
                var vUDF4 = '';
                var vUDF5 = '';

                
                if($(obj).parent().parent().find('#UDF1') != null)
                {
                    if($(obj).parent().parent().find('#UDF1').attr("class") == 'selectBox')
                    {
                        vUDF1 = $(obj).parent().parent().find('#UDF1 option:selected').text();
                    }
                    else{
                        vUDF1 = $(obj).parent().parent().find('#UDF1').val();
                    }
                }

                if($(obj).parent().parent().find('#UDF2') != null)
                {
                    if($(obj).parent().parent().find('#UDF2').attr("class") == 'selectBox')
                    {
                        vUDF2 = $(obj).parent().parent().find('#UDF2 option:selected').text();
                    }
                    else{
                        vUDF2 = $(obj).parent().parent().find('#UDF2').val();
                    }
                }

                if($(obj).parent().parent().find('#UDF3') != null)
                {
                    if($(obj).parent().parent().find('#UDF3').attr("class") == 'selectBox')
                    {
                        vUDF3 = $(obj).parent().parent().find('#UDF3 option:selected').text();
                    }
                    else{
                        vUDF3 = $(obj).parent().parent().find('#UDF3').val();
                    }
                }

                if($(obj).parent().parent().find('#UDF4') != null)
                {
                    if($(obj).parent().parent().find('#UDF4').attr("class") == 'selectBox')
                    {
                        vUDF4 = $(obj).parent().parent().find('#UDF4 option:selected').text();
                    }
                    else{
                        vUDF4 = $(obj).parent().parent().find('#UDF4').val();
                    }
                }

                if($(obj).parent().parent().find('#UDF5') != null)
                {
                    if($(obj).parent().parent().find('#UDF5').attr("class") == 'selectBox')
                    {
                        vUDF5 = $(obj).parent().parent().find('#UDF5 option:selected').text();
                    }
                    else{
                        vUDF5 = $(obj).parent().parent().find('#UDF5').val();
                    }
                }
                
                $.ajax({
                   "url": '@Url.Content("~/Pull/UpdatePullData")',
                    data: { ID: 0, ItemID: vItemID, ItemGUID: vItemGUID, ProjectID: vProjectID, BinID: vBinID, PullCreditQuantity: txtQty, PullCredit: vPullCreditText, TempPullQTY: txtQty, UDF1 : vUDF1, UDF2 : vUDF2, UDF3 : vUDF3, UDF4 : vUDF4, UDF5 : vUDF5},
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    success: function (response) {
                        $('#DivLoading').hide();
                        if (response.Status == "ok") {
                            if (response.LocationMSG != "") {
                                alert(response.LocationMSG);
                            }
                            else
                            {
                                $('div#target').fadeToggle();
                                $("div#target").delay(2000).fadeOut(200);
                                $("#spanGlobalMessage").text(response.Message);
                                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                                oTable.fnDraw();
                            }
                        }
                        else {
                            $("#spanGlobalMessage").text(response.Message);
                            $('div#target').fadeToggle();
                            $("div#target").delay(2000).fadeOut(200);
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                        }                        
                        txxt.val('');
                    },
                    error: function (response) {
                        $('#DivLoading').hide();
                        $("#spanGlobalMessage").text(response.message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(2000).fadeOut(200);
                    }
                });
            }
        }
        else
        {
            alert('Qty to Pull and Inventory Location are Mandatory.');
        }
    }


   function SaveAllClick()
   {
        var arrItems = new Array();
        $('#ItemModeDataTable tbody tr').each(function () 
        {
            var txxt = $(this).find('#txtQty');
            var txtQty = txxt.val();
            var tempBinID = $(this).find('#BinID')[0].value == "" ? 0 : $(this).find('#BinID')[0].value;
            

            if (txtQty != 'undefined') 
            {
                if (txtQty.length > 0 && tempBinID > 0) 
                {
                    var trimtxtVal = txtQty.replace(/ /g, '');
                    if (trimtxtVal.length > 0) 
                    {
                    
                        var tempItemID = $(this).find('#spnItemID').text();
                        var tempProjectID = $(this).find('#ProjectID')[0].value == "" ? 0 : $(this).find('#ProjectID')[0].value;
                        var itemGUID = $(this).find('#spnItemGUID').text();
                        var vspnOn_HandQuantity = $(this).find('#spnOn_HandQuantity').text() == "" ? 0 : $(this).find('#spnOn_HandQuantity').text();
                        var vPullCreditText = $(this).find('input[name=colors'+tempItemID+']:checked')[0].value;

                        var vUDF1 = '';
                        var vUDF2 = '';
                        var vUDF3 = '';
                        var vUDF4 = '';
                        var vUDF5 = '';

                
                        if($(this).find('#UDF1') != null)
                        {
                            if($(this).find('#UDF1').attr("class") == 'selectBox')
                            {
                                vUDF1 = $(this).find('#UDF1 option:selected').text();
                            }
                            else{
                                vUDF1 = $(this).find('#UDF1').val();
                            }
                        }

                        if($(this).find('#UDF2') != null)
                        {
                            if($(this).find('#UDF2').attr("class") == 'selectBox')
                            {
                                vUDF2 = $(this).find('#UDF2 option:selected').text();
                            }
                            else{
                                vUDF2 = $(this).find('#UDF2').val();
                            }
                        }

                        if($(this).find('#UDF3') != null)
                        {
                            if($(this).find('#UDF3').attr("class") == 'selectBox')
                            {
                                vUDF3 = $(this).find('#UDF3 option:selected').text();
                            }
                            else{
                                vUDF3 = $(this).find('#UDF3').val();
                            }
                        }

                        if($(this).find('#UDF4') != null)
                        {
                            if($(this).find('#UDF4').attr("class") == 'selectBox')
                            {
                                vUDF4 = $(this).find('#UDF4 option:selected').text();
                            }
                            else{
                                vUDF4 = $(this).find('#UDF4').val();
                            }
                        }

                        if($(this).find('#UDF5') != null)
                        {
                            if($(this).find('#UDF5').attr("class") == 'selectBox')
                            {
                                vUDF5 = $(this).find('#UDF5 option:selected').text();
                            }
                            else{
                                vUDF5 = $(this).find('#UDF5').val();
                            }
                        }

//                        if(parseInt(txtQty,10) >= parseInt(vspnOn_HandQuantity,10))
//                        {
//                            //alert('On Hand Quantity is less then Qty to Pull.');
//                            $(this).css('background-color', 'yellow');
//                            return true;
//                        }
//                        else
//                        {
                            var data = { "ID": 0, "ItemID": tempItemID, "ItemGUID": itemGUID, "ProjectID": tempProjectID, "BinID": tempBinID, "PullCreditQuantity": txtQty, "PullOrCredit": vPullCreditText, TempPullQTY: txtQty, UDF1 : vUDF1, UDF2 : vUDF2, UDF3 : vUDF3, UDF4 : vUDF4, UDF5 : vUDF5};
                            arrItems.push(data);
                        //}
                        txxt.val('');
                    }
                }
            }
        });
		if (arrItems.length > 0) 
		{
				$('#DivLoading').show();
				$.ajax({
					url: '@Url.Content("~/Pull/SubmitPulls")',
					data: { 'para': JSON.stringify(arrItems) },
					dataType: 'json',
					type: 'POST',
					async: false,
					cache: false,
					success: function (response) 
					{
						$('#DivLoading').hide();
						if (response.Status == "ok") 
						{
                            if(response.LocationMSG != "")
                            {
                                alert(response.LocationMSG);
                            }
                           else
                           {
							    $('div#target').fadeToggle();
							    $("div#target").delay(2000).fadeOut(200);
							    $("#spanGlobalMessage").text(response.Message);
							    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
							    oTableItemModel.fnDraw();
                                oTable.fnDraw();
                            }
						}
						else {
							$("#spanGlobalMessage").text(response.Message);
							$('div#target').fadeToggle();
							$("div#target").delay(2000).fadeOut(200);
							$("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
						}
					}
				});
		}
		else {
			$("#spanGlobalMessage").text('No Chnages');
			$('div#target').fadeToggle();
			$("div#target").delay(2000).fadeOut(200);
			$("#spanGlobalMessage").removeClass('succesIcon errorIcon').addClass('WarningIcon');
		}
   }
    


    function fillItemMaster(bDestroy) {
        var gaiSelected = [];
        oTableItemModel = $('#ItemModeDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "100%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[3, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";

                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    data: { Data: JSON.stringify(oData), ListName: 'ItemMasterModelList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    data: { ListName: 'ItemMasterModelList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                    if (json.jsonData != '')
                        o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content(Model.AjaxURLToFillItemGrid)',//'@Url.Content("~/Inventory/ItemMasterListAjax")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                //PostCount = PostCount + 1;
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting != null && oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                    
                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#ItemModeDataTable td').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });

                        if ($("#ItemModel_filter").val() != '') {
                            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
                        }

                        CallShowHideData();
                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
            },
            "aoColumns": [
                            { "mDataProp": null,
                                "sClass": "read_only control center",
                                "bSortable": false,
                                "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">'
                                , "fnRender": function (obj, val) {
                                    //return "<img id='imgQty' src=" + sImageUrl + 'drildown_open.jpg' + ">" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span>";
                                    return "<input type='button' value='Pull' onclick='return AddSingleItemToPullList(this)' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span><span id='spnOn_HandQuantity' style='display:none'>" + obj.aData.OnHandQuantity + "</span>";
                                }
                            },
                            { "mDataProp": "ID", "sClass": "read_only"},
                            { "mDataProp": null,
                                "bSortable": false,
                                "sClass": "read_only alignLeft",
                                "sDefaultContent": '',
                                "fnRender": function (obj, val) {
                                    return '<input type="radio" name="colors'+obj.aData.ID+'" value="pull" checked="checked">Pull<br><input type="radio" name="colors'+obj.aData.ID+'" value="credit">Credit';
                                }
                            },
                            { "mDataProp": null,
                                "bSortable": false,
                                "sClass": "read_only control center",
                                "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">',
                                "fnRender": function (obj, val) {
                                    if(obj.aData.DefaultPullQuantity != null)
                                    {
                                        return "<input type='text' value='"+ obj.aData.DefaultPullQuantity +"' class='text-boxinner' onkeypress='return onlyNumeric(event)'  id='txtQty' style='width:30px;' />";
                                    }
                                    else{
                                        return "<input type='text' value='' class='text-boxinner' onkeypress='return onlyNumeric(event)'  id='txtQty' style='width:30px;' />";
                                    }
                                }
                                },
		                    {
			                    "mDataProp": "ItemNumber",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false
			                },
                            {
			                    "mDataProp": null,
			                    "sClass": "read_only",
			                    "bSortable": true,
			                    "bSearchable": false,
                                "sDefaultContent": '',
			                    "fnRender": function (obj, val) {
			                        $.ajax({
			                            "url": '@Url.Content("~/Master/GetDropDownList")',
			                            data: { ID: obj.aData.ID, PageName: 'ItemLocationList', SelectedID: 0 },
			                            "async": false,
			                            cache: false,
			                            "dataType": "text",
			                            "success": function (json) {
			                                sOut = json;
			                                $('#DivLoading').hide();
			                            },
			                            error: function (response) {
			                                //debugger;
			                            }
			                        });
			                        return sOut;
			                    }
			                },
                            {
			                    "mDataProp": null,
			                    "sClass": "read_only",
			                    "bSortable": true,
			                    "bSearchable": false,
                                "sDefaultContent": '',
			                    "fnRender": function (obj, val) {
			                        $.ajax({
			                            "url": '@Url.Content("~/Master/GetDropDownList")',
			                            data: { ID: obj.aData.ID, PageName: 'ProjectList', SelectedID: 0 },
			                            "async": false,
			                            cache: false,
			                            "dataType": "text",
			                            "success": function (json) {
			                                sOut = json;
			                                $('#DivLoading').hide();
			                            },
			                            error: function (response) {
			                                //debugger;
			                            }
			                        });
			                        return sOut;
			                    }
			                },
			                @Html.RenderColumnsArrayEditable("PullMaster"),
//			                { "mDataProp": "RoomName", "sClass": "read_only" },
//			                { "mDataProp": "Created", "sClass": "read_only",
//			                    "fnRender": function (obj, val) {
//			                        return GetDateInFullFormat(val);
//			                    }
//			                },
//			                { "mDataProp": "Updated", "sClass": "read_only",
//			                    "fnRender": function (obj, val) {
//			                        return GetDateInFullFormat(val);
//			                    }
//			                },
//                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
//                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
//                            { "mDataProp": "ManufacturerID", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerNumber", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerName", "sClass": "read_only" },
//                            { "mDataProp": "SupplierID", "sClass": "read_only" },
                            { "mDataProp": "SupplierPartNo", "sClass": "read_only" },
                            { "mDataProp": "SupplierName", "sClass": "read_only" },
                            { "mDataProp": "UPC", "sClass": "read_only" },
                            { "mDataProp": "UNSPSC", "sClass": "read_only" },
                            { "mDataProp": "Description", "sClass": "read_only" },
                            { 
                                "mDataProp": "LongDescription", "sClass": "read_only","sDefaultContent": '',                                
                                "fnRender": function (obj, val) {
			                        return "<div class='comment more'>" + val + "</div>";
			                    }
                            },
//                            { "mDataProp": "CategoryID", "sClass": "read_only" },
//                            { "mDataProp": "GLAccountID", "sClass": "read_only" },
//                            { "mDataProp": "UOMID", "sClass": "read_only" },
                            { "mDataProp": "PricePerTerm", "sClass": "read_only" },
                            { "mDataProp": "DefaultReorderQuantity", "sClass": "read_only" },
                            { "mDataProp": "DefaultPullQuantity", "sClass": "read_only" },
                            { "mDataProp": "Cost", "sClass": "read_only" },
                            { "mDataProp": "Markup", "sClass": "read_only" },
                            { "mDataProp": "SellPrice", "sClass": "read_only" },
                            { "mDataProp": "ExtendedCost", "sClass": "read_only" },
                            { "mDataProp": "LeadTimeInDays", "sClass": "read_only" },
                            { "mDataProp": "Link1", "sClass": "read_only" },
                            { "mDataProp": "Link2", "sClass": "read_only" },
                            { "mDataProp": "Trend", "sClass": "read_only"
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "Taxable", "sClass": "read_only"
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                             },
                            { "mDataProp": "Consignment", "sClass": "read_only" 
                                ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "StagedQuantity", "sClass": "read_only" },
                            { "mDataProp": "InTransitquantity", "sClass": "read_only" },
                            { "mDataProp": "OnOrderQuantity", "sClass": "read_only" },
                            { "mDataProp": "OnTransferQuantity", "sClass": "read_only" },
                            { "mDataProp": "SuggestedOrderQuantity", "sClass": "read_only" },
                            { "mDataProp": "RequisitionedQuantity", "sClass": "read_only" },
                            { "mDataProp": "AverageUsage", "sClass": "read_only" },
                            { "mDataProp": "Turns", "sClass": "read_only" },
                            { "mDataProp": "OnHandQuantity", "sClass": "read_only" },
                            { "mDataProp": "CriticalQuantity", "sClass": "read_only" },
                            { "mDataProp": "MinimumQuantity", "sClass": "read_only" },
                            { "mDataProp": "MaximumQuantity", "sClass": "read_only" },
                            { "mDataProp": "WeightPerPiece", "sClass": "read_only" },
                            { "mDataProp": "ItemUniqueNumber", "sClass": "read_only" },
                            { "mDataProp": "IsTransfer", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                             { "mDataProp": "IsPurchase", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "InventoryClassification", "sClass": "read_only" },
                            { "mDataProp": "SerialNumberTracking", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "LotNumberTracking", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "DateCodeTracking", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "ItemType", "sClass": "read_only" 
                                    ,"fnRender": function (obj, val) {                                                                            
                                            if(val == 1)
                                                return "Item";
                                             else if (val == 2)
                                                return "Quick List";
                                             else if (val == 3)
                                                return "Kit";
                                             else if (val == 4)
                                                return "Labor";
                                            else
                                                return "";
                                    }
                            },
//                            { "mDataProp": "ImagePath", "sClass": "read_only" },
                            { "mDataProp": "IsLotSerialExpiryCost", "sClass": "read_only" },
                            { "mDataProp": "RoomName", "sClass": "read_only" },
			                { "mDataProp": "Created", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return GetDateInFullFormat(val);
			                    }
			                },
			                { "mDataProp": "Updated", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return GetDateInFullFormat(val);
			                    }
			                },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "CategoryName", "sClass": "read_only" },
                            { "mDataProp": "Unit", "sClass": "read_only" },
                            { "mDataProp": "GLAccount", "sClass": "read_only" }, 
                            

		    ]
        });

        $('.DTTT_container').css('z-index', '-1');
 
    }
    
    function onlyNumeric(event)
    {
            var charCode = (event.which) ? event.which : event.keyCode
            
            if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

         return true;

    }
    function fnFilterGlobalIM() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#ItemModel_filter") != 'undefined' && ($("#ItemModel_filter").val().length > 2 || $("#ItemModel_filter").val().length == 0)) {
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            $('#ItemModeDataTable').dataTable().fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
        }
        else {
            $('#ItemModeDataTable td').removeHighlight();
            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
        }
    }


    $("#ItemModel_filter").keyup(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
        }
        else {
            fnFilterGlobalIM();
        }
    });


    $("#ItemModel_filter").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            $('#ItemModeDataTable').dataTable().fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
            return false;
        }
    });


    $("#clear_QLItemModel_filter").click(funClearFilterIM);

    function funClearFilterIM() {
        //Check length first        
        if ($("#ItemModel_filter").val().length > 0) {
            $("#ItemModel_filter").val('');
            $('#ItemModeDataTable').dataTable().fnFilter(
                            $("#ItemModel_filter").val(),
                            null,
                            null,
                            null
                        );
        }
        $("#ItemModel_filter").focus();
        return false;
    }

    $('#PageNumberIM').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#GobtnIM").click();
            return false;
        }
    });

    $("#GobtnIM").click(function () {
        var pval = $('#PageNumberIM').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (pval == 0)
            return;
        oTableItemModel.fnPageChange(Number(pval - 1));
        $('#PageNumberIM').val('');
    });


   
    
    

    

    // used for refresh the grid manually...
    $('#refreshGridIM').live('click', function () {
        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

            oTableItemModel.fnDraw();
        //fillItemMaster(false);

    });
  

  //**************************** Not used Code *************************//

  $("#reordersettingIM").click(function () {
        $("#divRefreshBlockIM").toggle();
    });

  $("#ColumnSortableModalIM").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
        draggable: false,
        resizable: false,
        open: function () {

            GenerateColumnSortableIM();
            $("#ColumnSortableIM").sortable({ axis: "y", containment: "parent" });
        }
    });

    $("#ColumnOrderSetupIM").click(function () {
        $("#ColumnSortableModalIM").dialog("open");

        return false;
    });
    function GenerateColumnSortableIM() {
        $('#ColumnSortableIM li').each(function (index) {
            $(this).remove();
        });

        for (i = 0, iLen = oTableItemModel.fnSettings().aoColumns.length; i < iLen; i++) {
            var oColumn = oTableItemModel.fnSettings().aoColumns[i];
            var li = document.createElement('li');
            li.id = GetColumnIndex1(oColumn.sTitle.trim());
            li.className = 'ui-state-default';
            li.innerHTML = oColumn.sTitle.trim();
            if (oColumn.bVisible) {
                li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            }
            else
                li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            $('#ColumnSortableIM').append(li);
        }
    }



  function UpdateColumnOrderIM(_ListName) {

        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

        var _Order = $('#ColumnSortableIM').sortable("toArray");
        var __Order = _Order.toString().split(",");
        for (var i = 0; i < __Order.length; i++) {
            __Order[i] = parseInt(__Order[i], 10);
        }

        oTableItemModel.fnSettings().oLoadedState.ColReorder = __Order;

        var _abVisCols = [];
        for (i = 0, iLen = oTableItemModel.fnSettings().aoColumns.length; i < iLen; i++) {
            var checked = $("#" + i + "_").is(":checked");
            _abVisCols.push(checked);
        }
        oTableItemModel.fnSettings().oLoadedState.abVisCols = _abVisCols;

        $.ajax({
            "url": '@Url.Content("~/Master/SaveGridState")',
            data: { Data: JSON.stringify(oTableItemModel.fnSettings().oLoadedState), ListName: _ListName },
            "dataType": "json",
            cache: false,
            "async": false,
            "success": function (json) {
                o = json;
                oTableItemModel.fnDraw();
                $('.ui-dialog-titlebar-close').click();
            }
        });
        //fillItemMaster(false);
    }
   
</script>
