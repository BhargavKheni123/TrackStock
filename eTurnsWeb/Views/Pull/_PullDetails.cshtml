@model IEnumerable<eTurns.DTO.PullDetailsDTO>
@{
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    var settings = new GridHeaderSettings() { DisplaySaveButton = false, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "PullDetailsList" };
}
<div class="innerGrid borderblue" style="background: none repeat scroll 0 0 #F8F8F8;width:80%;
    padding: 10px 0 0 28px">
    <table style="width: 99%;">
        <tr>
            <td class="BtnBlock" style="float: none; border: 1px solid #F8F8F8; height: 2px;">
                <div class="innerHeadSec">
                    <div style="position: absolute; left: 470px; top: -11px; width: 350px; z-index: 10;">
                        @*<a href="javascript:void(null);" onclick="DeleteItemLocatino();" title="@ViewBag.ItemID" id="btnDeleteRecords">
                            <img src="~/Content/images/delete.png" />
                        </a>*@
                        <input type="button" id="InnerGridGobtn" class="go" value=@eTurns.DTO.Resources.ResGridHeader.Go />
                        <input type="text" id="InnerGridPageNumber" class="inputNum" />
                        <span class="label">@eTurns.DTO.Resources.ResGridHeader.GoToPage</span>
                        @Html.GridChildGridTopHeader(settings)
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top: 14px; padding-bottom: 35px; border: 1px solid #F8F8F8;">
                <div class="userContentInnerGrid">
                    <table id="PullDetails@(ViewBag.PullGUID)" class="display">
                        <thead>
                            <tr>
                                <th>@eTurns.DTO.ResItemMaster.ItemNumber
                                </th>
                                <th>@eTurns.DTO.ResItemMaster.ItemType
                                </th>
                                <th>@eTurns.DTO.ResProjectMaster.ProjectSpendName
                                </th>
                                <th>@eTurns.DTO.ResBin.BinNumber
                                </th>
                                <th>@eTurns.DTO.ResPullDetails.PullCredit
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.ItemCost
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.CustomerOwnedQuantity
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.ConsignedQuantity
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.PoolQuantity
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.SerialNumber
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.LotNumber
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.Expiration
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.Received
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.Created
                                </th>
                                <th>
                                    @eTurns.DTO.ResPullDetails.Updated
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.AddedFrom
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.EditedFrom
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </td>
        </tr>
    </table>
</div>
<div id="DIVPullDetails">
</div>
<script type="text/javascript">
    var objColumns;
    var DTName='PullDetails' + '@ViewBag.PullGUID'
    var PullDetailsChildGridTableColumns;
    $(function (event) {
        objColumns = GetGridChildGridColumnsObject('PullDetails' + '@(ViewBag.PullGUID)');
        PullDetailsChildGridTableColumns = objColumns;
        var ColumnObject = new Array();
        ColumnObject.push({ mDataProp: "ItemNumber", sClass: "read_only", sWidth: '6%' });
        ColumnObject.push({ "mDataProp": "ItemType",  sWidth: '6%' ,"sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        if (val == 1)
                                            return "Item";
                                        else if (val == 2)
                                            return "Quick List";
                                        else if (val == 3)
                                            return "Kit";
                                        else if (val == 4)
                                            return "Labor";
                                        else
                                            return "";
                                    }
                        });
        ColumnObject.push({ mDataProp: "ProjectSpendName", sWidth: '6%', sClass: "read_only" });
        ColumnObject.push({ mDataProp: "BinName", sWidth: '6%', sClass: "read_only" });
        ColumnObject.push({ mDataProp: "PullCredit", sWidth: '6%', sClass: "read_only" });
        ColumnObject.push({
            mDataProp: "ItemCost", sWidth: '6%', sClass: "read_only",
            "fnRender": function (obj, val) {
                if (obj.aData.ItemCost != null && obj.aData.ItemCost != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.ItemCost, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        });
        ColumnObject.push({mDataProp: "CustomerOwnedQuantity", sWidth: '6%', sClass: "read_only",
                            "fnRender": function (obj, val) {
                if (obj.aData.CustomerOwnedQuantity != null && obj.aData.CustomerOwnedQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.CustomerOwnedQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        });
        ColumnObject.push({
            mDataProp: "ConsignedQuantity", sWidth: '6%', sClass: "read_only",
            "fnRender": function (obj, val) {
                if (obj.aData.ConsignedQuantity != null && obj.aData.ConsignedQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.ConsignedQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        });
        ColumnObject.push({
            mDataProp: "PoolQuantity", sWidth: '6%', sClass: "read_only",
            "fnRender": function (obj, val) {
                if (obj.aData.PoolQuantity != null && obj.aData.PoolQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.PoolQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        });
        ColumnObject.push({ mDataProp: "SerialNumber", sWidth: '6%', sClass: "read_only" });
        ColumnObject.push({ mDataProp: "LotNumber", sWidth: '6%', sClass: "read_only" });
        //ColumnObject.push({ mDataProp: "Expiration", sWidth: '6%', sClass: "read_only", fnRender: function (obj, val) { return GetDateInFullFormatCustomizedOnlyDate(val); } });
        ColumnObject.push({ mDataProp: "Expiration", sWidth: '6%', sClass: "read_only" });
        ColumnObject.push({ mDataProp: "Received", sWidth: '6%', sClass: "read_only"});
        ColumnObject.push({ mDataProp: "CreatedDate", sWidth: '6%', sClass: "read_only"});
        ColumnObject.push({ mDataProp: "UpdatedDate", sWidth: '6%', sClass: "read_only"});
        //        ColumnObject.push({ mDataProp: "ReceivedOnDate", sClass: "read_only" });
        //        ColumnObject.push({ mDataProp: "ReceivedOnDateWeb", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "AddedFrom", sClass: "read_only", sWidth: '5%' });
        ColumnObject.push({ mDataProp: "EditedFrom", sClass: "read_only", sWidth: '5%' });
        PrepareDataTable("PullDetails", ItemUniqueID, '@Url.Content("~/Pull/PullDetailsListAjax")', 'PullDetailsList', ColumnObject);
        $('.ColVis_MasterButton').hide();
        $('.innerGrid .refresh').css("margin-top", "-27px");
        $('.innerGrid .refresh').css("left", "37px");

    });

    if ('@isCost' == '@Boolean.FalseString') {
        oTableGlobalTABLE.fnSetColumnVis(5, false);
    }

    //    function DeleteItemLocatino()
    //    {
    //        DeleteDynemicTableData($("#" + "PullDetails" + ItemUniqueID).DataTable(),'@Url.Content("~/Inventory/ItemLocationsDelete")');
    //    }
    function FillDetailGridDiv() {        
        if ($(".dtRequisitionItemsTable").length < 1 && typeof WorkOrderItemGUID != 'undefined' && $("#myDataTable").find("tbody tr").find("#spnPullGUID").text() == "") {
            $("#" + "WOItemsTable" + WorkOrderItemGUID).find("tbody tr").each(function (index, tr) {
                if ($(tr).find("#hdnID").val() == '@(ViewBag.PullGUID)') {
                    $(tr).find('td.read_only img').click();
                    $(tr).find('td.read_only img').click();
                    return;
                }
            });
        }
        else {
            $("#myDataTable").find("tbody tr").each(function (index, tr) {
                if ($(tr).find("#spnPullGUID").text() == '@(ViewBag.PullGUID)') {
                    $(tr).find('td.control').click();
                    $(tr).find('td.control').click();
                    return;
                }
            });
        }
        if ($(".dtRequisitionItemsTable").length > 0 && ItemUniqueID != undefined) {
            $(".dtRequisitionItemsTable").find("tbody tr.ExpandedNodeRequisitionpull").each(function (index, tr) {
                $(tr).find('td.read_only img').click();
                $(tr).find('td.read_only img').click();
                return;
            });
        }
        $("#divDetailGridReorderPopup").dialog("close");
    }
    $("a#ColumnOrderSetupChildGrid").on("click", function () {
        $("#divDetailGridReorderPopup").data({ 'DataTableName': DTName, 'ListName': 'PullDetailsList', 'ColumnObjectName': 'PullDetailsChildGridTableColumns' }).dialog("open");
        return false;
    });
</script>
