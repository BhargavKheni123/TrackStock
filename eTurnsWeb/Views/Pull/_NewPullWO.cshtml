@model eTurnsWeb.Models.ItemModelPerameter
@{    
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    var settings = new GridHeaderSettings() { DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = false, dataViewType = DataViewType.None, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "NewPullItemMaster", ModuleName = "NewPull" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ItemMaster", ListName="_NewPullWO" };
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
}
<div class="searchWrapper">
    <div class="searchBlock" style="margin: -1px auto; width: 700px;">
        <span class="label" style="color: #FFFFFF; float: left; font-size: 14px; font-weight: bold;
            line-height: 22px; padding: 2px 5px 0 0;">@eTurns.DTO.Resources.ResCommon.Search
        </span>
        <div class="searchinputB" style="float: left; position: relative; width: 486px;">
            <input type="text" class="searchinput" id="ItemModel_filter" />
            <a href="javascript:void(0);" class="xclose">
                <img src="~/Content/images/x.png" alt="X" id="clear_QLItemModel_filter" /></a>
        </div>
    </div>
</div>

@Html.ItemModelGridTopHeaderWithContextMenu(settings)
<script src="@Url.Content("~/Scripts/PageScripts/NarrowSearchForItemModel.js?v=" + version)" type="text/javascript"></script>
@Html.Partial("NarrowSearchForItemModel", modelCommon)
<div class="userContent ">
    <table id="ItemModeDataTable" class="display">
        <thead>
            <tr>
                <th> 
                </th>
                <th>@eTurns.DTO.Resources.ResCommon.ID
                </th>
                <th>
                    Qty to Pull
                </th>
                <th>@eTurns.DTO.ResItemMaster.ItemNumber
                </th>
                <th>
                    @eTurns.DTO.ResBin.BinNumber
                </th>
                <th>
                    @eTurns.DTO.ResProjectMaster.ProjectSpendName
                </th>
                <th>@eTurns.DTO.ResItemMaster.ManufacturerNumber
                </th>
                <th>@eTurns.DTO.ResItemMaster.ManufacturerName
                </th>
                <th>@eTurns.DTO.ResItemMaster.SupplierPartNo
                </th>
                <th>@eTurns.DTO.ResItemMaster.Supplier
                </th>
                <th>@eTurns.DTO.ResItemMaster.UPC
                </th>
                <th>@eTurns.DTO.ResItemMaster.UNSPSC
                </th>
                <th>@eTurns.DTO.ResItemMaster.Description
                </th>
                <th>@eTurns.DTO.ResItemMaster.LongDescription
                </th>
                <th>@eTurns.DTO.ResItemMaster.PricePerTerm
                </th>
                <th>@eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                </th>
                <th>@eTurns.DTO.ResItemMaster.DefaultPullQuantity
                </th>
                <th>@eTurns.DTO.ResItemMaster.Cost
                </th>
                <th>@eTurns.DTO.ResItemMaster.Markup
                </th>
                <th>@eTurns.DTO.ResItemMaster.SellPrice
                </th>
                <th>@eTurns.DTO.ResItemMaster.ExtendedCost
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LeadTimeInDays
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Trend
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Taxable
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Consignment
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.StagedQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.InTransitquantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnOrderQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnTransferQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SuggestedOrderQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.RequisitionedQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.AverageUsage
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Turns
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnHandQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.IsItemLevelMinMaxQtyRequired
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.CriticalQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.MinimumQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.MaximumQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.WeightPerPiece
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ItemUniqueNumber
                </th>
                <th>@eTurns.DTO.ResItemMaster.IsTransfer
                </th>
                <th>@eTurns.DTO.ResItemMaster.IsPurchase
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.InventoryClassification
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SerialNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LotNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DateCodeTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ItemType
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.IsLotSerialExpiryCost
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.RoomName
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                </th>
                <th>
                    @eTurns.DTO.ResCategoryMaster.Category
                </th>
                <th>
                    @eTurns.DTO.ResUnitMaster.Unit
                </th>
                <th>
                    @eTurns.DTO.ResGLAccount.GLAccount
                </th>
                @Html.RenderColumnsHeader("PullMaster", typeof(eTurns.DTO.ResPullMaster))
                @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster), "Item")
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <div style="clear: both; width: 90%; margin-top: 10px;">
        <input type="button" value="@ResPullMaster.BtnPullAll" id="btnPullAll" class="CreateBtn" style="float: left;" />
        <input type="button" value="Pull QL" id="btnPullAllQL" class="CreateBtn" style="float: left;
            display: none;" />
    </div>
    <div id="processing_message" style="display: none" title="Processing">@eTurns.DTO.Resources.ResMessage.RequestProcessMessage</div>
    @*START : QTY Legends*@
    @Html.Partial("_QTYLegends")
    @*END : QTY Legends*@
</div>
<div id="LocationDetails">
</div>
<div class="dialog" id="project-spend-limit-basic-modal-content" style="display: none;">
    <div class="inner">
        <p class="text" id="PSPlimit" style="text-align: left; padding-left: 10px;">
            <b>@ResPullMaster.SomeItemNotPulled</b><br />
            <b style="color: Olive;">1) @ResPullMaster.reqQtyToPull</b>
            <br />
            <b style="color: Olive;">2) @ResPullMaster.InventoryLocationMandatory</b>
            <br />
            <b style="color: Olive;">3) @ResPullMaster.MsgLabourItemRequiredHours</b>
            <br />
            <b style="color: Olive;">4) @ResPullMaster.QtyNotAvailableforItemLocation</b>
            <br />
            <b style="color: Yellow;">5) @ResPullMaster.msgProjectSpendLimitReached
                <br />
                @ResPullMaster.msgProjectSpendLimitConfirmation</b>
            <br />
            <b style="color: Red;">6) @ResCommon.msgServerError</b><br />
            <b style="color: Green;">7) @ResPullMaster.MsgPullDoneSuccess</b>
        </p>
        <a href="JavaScript:void{}" id="btnModelYesPSLimit" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes</a><a href="#" class="no" onclick="closeModalPSLimit()">
                <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo</a>
    </div>
</div>
<div class="dialog" id="noramal-global-msg-basic-modal-content" style="display: none;">
    <div class="inner">
        <p class="text" id="GloablMSG" style="text-align: left; padding-left: 10px;">
            <b>@ResPullMaster.SomeItemNotPulled</b><br />
            <b style="color: Olive;">1) @ResPullMaster.reqQtyToPull</b>
            <br />
            <b style="color: Olive;">2) @ResPullMaster.InventoryLocationMandatory</b>
            <br />
            <b style="color: Olive;">3) @ResPullMaster.MsgLabourItemRequiredHours</b>
            <br />
            <b style="color: Olive;">4) @ResPullMaster.QtyNotAvailableforItemLocation</b>
            <br />
            <b style="color: Red;">5) @ResCommon.msgServerError</b><br />
            <b style="color: Green;">6) @ResPullMaster.MsgPullDoneSuccess</b>
        </p>
        <p class="text" style="text-align: center; padding-left: 10px;">
            <a href="#" class="no" onclick="closeModalPSLimit()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a></p>
    </div>
</div>
<div class="dialog" id="noramal-global-msg-QL-basic-modal-content" style="display: none;">
    <div class="inner">
        <p class="text" id="GloablMSG" style="text-align: left; padding-left: 10px;">
            <b>@ResPullMaster.ErrorPullofQL</b><br />
            <b style="color: Olive;">1) @ResPullMaster.reqQtyToPull</b>
            <br />
            <b style="color: Olive;">2) @ResPullMaster.InventoryLocationMandatory</b>
            <br />
            <b style="color: Olive;">3) @ResPullMaster.MsgLabourItemRequiredHours</b>
            <br />
            <b style="color: Olive;">4) @ResPullMaster.QtyNotAvailableforItemLocation</b>
            <br />
        </p>
        <p class="text" style="text-align: center; padding-left: 10px;">
            <a href="#" class="no" onclick="closeModalPSLimit()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk</a></p>
    </div>
</div>
<div class="dialog" id="GlobalModalProcessing" style="display: none;">
    <div class="inner">
        <p class="text" id="GloablMSGWait" style="text-align: left; padding-left: 10px;">
            <b style="color: Red;">@*Kindly wait, pull transaction is going on.....*@ 
            @eTurns.DTO.Resources.ResMessage.PleaseWaitTransGoingOn
            </b>
        </p>
    </div>
</div>
<script language="javascript" type="text/javascript">
    var QuickListPULLQty = 0;
    var oTableItemModel;
    var sImageUrl = "/Content/images/";
    var anOpen = [];
    var AllowDeletePopup = false; 
    var AllowDeletePopupPSInPull = true;
    var IsQLLoaded = false;
    var IsStagingLocationOnly = false;
     var objColumns = {}


   $(document).ready(function(){

     objColumns = GetGridHeaderColumnsObject('ItemModeDataTable');
     $('#NewPullAction').die('change');
     $('#NewPullAction').live('change', function() { 
            oTableItemModel.fnDraw();
            if($(this).val() == "Pull")
            {
                $("#btnPullAll").show();
                $('#CtabNew').find('#actionSelectAll3').show();
                if($("#ItemTypeIM") != undefined && $("#ItemTypeIM").length > 0)
                {
                    $("[name=multiselect_ItemTypeIM]").each(function () {
                            $(this).parent().parent().show();
                    });
                }
                
            }
            else
            {
                $("#btnPullAll").hide();
                $('#CtabNew').find('#actionSelectAll3').hide();
                if($("#ItemTypeIM") != undefined && $("#ItemTypeIM").length > 0)
                {
                    $("[name=multiselect_ItemTypeIM]").each(function () {
                        if($(this)[0].value > 1)
                        {
                            $(this).parent().parent().hide();
                        }   
                    });
                }
            }
        });

   $('#btnPullAll').die('click');
   $('#btnPullAllQL').die('click');

      fillItemMaster(false);

      //Comment below line For Credit Functionality
      // $('#NewPullAction').hide();
        
        $("#ItemModeDataTable").on("tap click", "tbody tr", function (e) {
        if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text") {
                e.stopPropagation();
        } 
        else if (e.currentTarget.getElementsByTagName("input").btnLoad != undefined)
        {
            e.stopPropagation();
        }
        else {
            $(this).toggleClass('row_selected');
        }
        return false;
    });

        $('input[type=radio]').live('change', function() { 
               var selection=$(this).val(); // credit or pull 
               if(selection == "credit")
                    $(this).parent().parent().find('#btnAdd').val('Credit');
               else if (selection == "creditms")
                    $(this).parent().parent().find('#btnAdd').val('CreditMS');
                else
                    $(this).parent().parent().find('#btnAdd').val('Pull');
         });

         $("#btnPullAll").live('click', function() {                         
            $('#GlobalModalProcessing').modal();
            setTimeout('AddSingleItemToPullList($("#btnPullAll"))',1000);
         });           
         $("#btnPullAllQL").live('click', function() {                         
            $('#GlobalModalProcessing').modal();
            setTimeout('CheckValidPullData()',1000);
         });       

         $("#LocationDetails").dialog({
            autoOpen: false,
            show: "blind",
            hide: "explode",
            height: 700,
            title: "Item Locations",
            width: 900,
            modal: true,
            close: function() {                
                IsRefreshGrid = true;
                $('#DivLoading').hide();
                $('#LocationDetails').empty();
            }
        });                

        $("#project-spend-limit-basic-modal-content").on("click", "#btnModelYesPSLimit", function () {
            var url = '@Url.Action("RequisitionList", "Consume")';
            url = url + '?fromPull=' + 'yes'
            window.location.href = url;  
        });
   });
   function closeModalPSLimit() {
            $.modal.impl.close();
            setTimeout(function() {oTableItemModel.fnStandingRedraw();}, 10000);
        }
   function AddSingleItemToPullList(obj){

        if($(obj)[0].value == undefined)
            return false;
        
        if($(obj)[0].value == 'Pull QL')
        {
            var IsGlobalErrorMsgShow = false;            
            var IsPSRedirectToReq = false;
            var IsQLSuccessfullyDone = true;
            $('#ItemModeDataTable tbody tr').each(function () {
                if ($(this).attr('class').indexOf('row_selected') != -1) {
                $(this).toggleClass('row_selected');
                var RowObject = $(this);                                   
                /////////////////////////////////////////////////////////////////////////////////
                //////////////////////////////////////START//////////////////////////////////////
                /////////////////////////////////////////////////////////////////////////////////
                    var txxt = $(this).find('#txtQty');
                    var vBinID;
                    var vProjectID;
                    var ProjectSpendName;
                    var itemType = $(this).find('#spnOrderItemType').text();
                    var txtQty = txxt.val();
                    if(itemType != '4')
                    {
                       vBinID = $(this).find('#BinID')[0].value == '' ? 0 : $(this).find('#BinID')[0].value;
                       vProjectID = $(this).find('#ProjectID')[0].value == "" ? "" : $(this).find('#ProjectID')[0].value;
                       ProjectSpendName = $(this).find('#ProjectID')[0].value == "" ? "" : $(this).find('#txtProjectSpent').val();
                        if (txtQty == 'undefined' && txtQty.length == 0) {
                                //alert('@ResPullMaster.reqQtyToPull');
                                $(this).css('background-color', 'Olive');
                                IsGlobalErrorMsgShow = true;
                                IsQLSuccessfullyDone = false;
                                return;
                        }
                        if (parseFloat(txtQty) <= 0 ) {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                            return;
                        }
                        if(vBinID == 0)
                        {
                            //alert('@ResPullMaster.InventoryLocationMandatory');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                            return;
                        }
                    }
                    else
                    {
                        if (txtQty == 'undefined' || txtQty == '') {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                            return;
                        }
                        if (parseFloat(txtQty) <= 0 ) {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                            return;
                        }
                        if (parseFloat(txtQty) == NaN ) {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                            return;
                        }

                        vBinID = 0;
                        vProjectID = '';
                    }

            
                    var trimtxtVal = txtQty.replace(/ /g, '');
                    if (trimtxtVal.length > 0) {
                        var vItemID = $(this).find('#spnItemID').text();
                        var vItemGUID = $(this).find('#spnItemGUID').text();
                        var vspnOn_HandQuantity = $(this).find('#spnOn_HandQuantity').text() == "" ? 0 : $(this).find('#spnOn_HandQuantity').text();
                        var vPullCreditText = "pull";//$(obj)[0].value;//$(obj).parent().parent().find('input[name=colors'+vItemID+']:checked')[0].value;
                        var VspnDefaultPullQuantity =$(this).find('#spnDefaultPullQuantity').text() == "" ? 0 : $(this).find('#spnDefaultPullQuantity').text();
                        var vUDF1 = '';
                        var vUDF2 = '';
                        var vUDF3 = '';
                        var vUDF4 = '';
                        var vUDF5 = '';
                        if($(this).find('#UDF1') != null)
                        {
                            if($(this).find('#UDF1').attr("class") == 'selectBox')
                            {
                                vUDF1 = $(this).find('#UDF1 option:selected').text();
                            }
                            else{
                                vUDF1 = $(this).find('#UDF1').val();
                            }
                        }

                        if($(this).find('#UDF2') != null)
                        {
                            if($(this).find('#UDF2').attr("class") == 'selectBox')
                            {
                                vUDF2 =$(this).parent().find('#UDF2 option:selected').text();
                            }
                            else{
                                vUDF2 = $(this).find('#UDF2').val();
                            }
                        }

                        if($(this).find('#UDF3') != null)
                        {
                            if($(this).find('#UDF3').attr("class") == 'selectBox')
                            {
                                vUDF3 =$(this).find('#UDF3 option:selected').text();
                            }
                            else{
                                vUDF3 = $(this).find('#UDF3').val();
                            }
                        }

                        if($(this).find('#UDF4') != null)
                        {
                            if($(this).find('#UDF4').attr("class") == 'selectBox')
                            {
                                vUDF4 = $(this).find('#UDF4 option:selected').text();
                            }
                            else{
                                vUDF4 = $(this).find('#UDF4').val();
                            }
                        }

                        if($(this).find('#UDF5') != null)
                        {
                            if($(this).find('#UDF5').attr("class") == 'selectBox')
                            {
                                vUDF5 = $(this).find('#UDF5 option:selected').text();
                            }
                            else{
                                vUDF5 = $(this).find('#UDF5').val();
                            }
                        }
                
                        ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////START
                            $.ajax({
                                "url": '@Url.Content("~/Pull/UpdatePullData")',
                                data: { ID: 0, ItemGUID: vItemGUID, ProjectGUID: vProjectID, BinID: vBinID, PullCreditQuantity: (txtQty * QuickListPULLQty), PullCredit: vPullCreditText, TempPullQTY: (txtQty * QuickListPULLQty), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: '@TempData["WorkOrderGUID"]', ProjectSpendName: ProjectSpendName ,PullType = '@Convert.ToInt64(PullInsertTypeEnum.WebWo)'},
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {
                                    $('#DivLoading').hide();
                                    if (response.Status == "ok") {
                                        if (response.LocationMSG != "") {
                                            if(response.PSLimitExceed)
                                            {
                                                $(RowObject).css('background-color', 'Yellow');
                                                IsPSRedirectToReq = true;
                                                IsGlobalErrorMsgShow = true;
                                                IsQLSuccessfullyDone = false;
                                            }
                                            else
                                            {
                                                $(RowObject).css('background-color', 'Olive');
                                                IsPSRedirectToReq = false;
                                                IsGlobalErrorMsgShow = true;
                                                IsQLSuccessfullyDone = false;
                                            }
                                        }
                                        else
                                        {
                                            UDFInsertNewForGrid(RowObject);
                                            $(RowObject).css('background-color', 'Green');                                                
                                            $('div#target').css("z-index", 100000);
                                            $('div#target').fadeToggle();
                                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                            $("#spanGlobalMessage").html(response.Message);
                                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                                            oTable.fnDraw();          
                                            IsPSRedirectToReq = false;
                                            IsGlobalErrorMsgShow = true;  
                                            
                                        }
                                    }
                                    else {
                                          $(RowObject).css('background-color', 'Red');
                                          IsPSRedirectToReq = false;
                                          IsGlobalErrorMsgShow = true;
                                          IsQLSuccessfullyDone = false;                                
                                    }                        
                                    txxt.val(VspnDefaultPullQuantity);
                                },
                                error: function (response) {
                                        $(RowObject).css('background-color', 'Red');
                                        IsPSRedirectToReq = false;
                                        IsGlobalErrorMsgShow = true;
                                        IsQLSuccessfullyDone = false;                                
                                }
                            });
                        ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////END
                    }                      

                    /////////////////////////////////////////////////////////////////////////////////
                    //////////////////////////////////////END//////////////////////////////////////
                    /////////////////////////////////////////////////////////////////////////////////
                }
            });
            //$('#GlobalModalProcessing').dialog('close');
            //closeModalPSLimit();

            if(IsQLSuccessfullyDone)
            {
                $.modal.impl.close();
                LoadAllItemData();
            }
            else if(IsPSRedirectToReq)
            {
                closeModalPSLimit();
                $('#project-spend-limit-basic-modal-content').modal();
            }
            else if(IsGlobalErrorMsgShow)
            {
                closeModalPSLimit();
                $('#noramal-global-msg-basic-modal-content').modal();
            }
        }
        else if($(obj)[0].value == 'Pull ALL')
        {
            var IsGlobalErrorMsgShow = false;            
            var IsPSRedirectToReq = false;
            //$('#DivLoading').show();
            
            

            $('#ItemModeDataTable tbody tr').each(function () {
                if ($(this).attr('class').indexOf('row_selected') != -1) {
                $(this).toggleClass('row_selected');
                var RowObject = $(this);                                   
                /////////////////////////////////////////////////////////////////////////////////
                //////////////////////////////////////START//////////////////////////////////////
                /////////////////////////////////////////////////////////////////////////////////
                    var txxt = $(this).find('#txtQty');
                    var vBinID;
                    var vProjectID;
                    var ProjectSpendName;
                    var itemType = $(this).find('#spnOrderItemType').text();
                    var txtQty = txxt.val();
                    if(itemType != '4')
                    {
                       vBinID = $(this).find('#BinID')[0].value == '' ? 0 : $(this).find('#BinID')[0].value;
                       vProjectID = $(this).find('#ProjectID')[0].value == "" ? "" : $(this).find('#ProjectID')[0].value;
                       ProjectSpendName = $(this).find('#ProjectID')[0].value == "" ? "" : $(this).find('#txtProjectSpent').val();
                        if (txtQty == 'undefined' && txtQty.length == 0) {           
                                //alert('@ResPullMaster.reqQtyToPull');
                                $(this).css('background-color', 'Olive');                                
                                IsGlobalErrorMsgShow = true;
                                return;
                        }
                        if (parseFloat(txtQty) <= 0 ) {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            return;
                        }
                        if(vBinID == 0)
                        {
                            //alert('@ResPullMaster.InventoryLocationMandatory');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            return;
                        }
                    }
                    else
                    {
                        if (txtQty == 'undefined' || txtQty == '') {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            return;
                        }
                        if (parseFloat(txtQty) <= 0 ) {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            return;
                        }
                        if (parseFloat(txtQty) == NaN ) {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            $(this).css('background-color', 'Olive');
                            IsGlobalErrorMsgShow = true;
                            return;
                        }

                        vBinID = 0;
                        vProjectID = '';
                    }

            
                    var trimtxtVal = txtQty.replace(/ /g, '');
                    if (trimtxtVal.length > 0) {
            
                        var vItemID = $(this).find('#spnItemID').text();
                        var vItemGUID = $(this).find('#spnItemGUID').text();
                
                        var vspnOn_HandQuantity = $(this).find('#spnOn_HandQuantity').text() == "" ? 0 : $(this).find('#spnOn_HandQuantity').text();
                        var vPullCreditText = "pull";//$(obj)[0].value;//$(obj).parent().parent().find('input[name=colors'+vItemID+']:checked')[0].value;
                
                        var VspnDefaultPullQuantity =$(this).find('#spnDefaultPullQuantity').text() == "" ? 0 : $(this).find('#spnDefaultPullQuantity').text();

                        //var vProjectSpendName = $(obj).parent().parent().find('#ProjectID')[0].text;
                        //var vBinLocation = $(obj).parent().parent().find('#BinID')[0].value;                        
                
                        var vUDF1 = '';
                        var vUDF2 = '';
                        var vUDF3 = '';
                        var vUDF4 = '';
                        var vUDF5 = '';

                
                        if($(this).find('#UDF1') != null)
                        {
                            if($(this).find('#UDF1').attr("class") == 'selectBox')
                            {
                                vUDF1 = $(this).find('#UDF1 option:selected').text();
                            }
                            else{
                                vUDF1 = $(this).find('#UDF1').val();
                            }
                        }

                        if($(this).find('#UDF2') != null)
                        {
                            if($(this).find('#UDF2').attr("class") == 'selectBox')
                            {
                                vUDF2 =$(this).parent().find('#UDF2 option:selected').text();
                            }
                            else{
                                vUDF2 = $(this).find('#UDF2').val();
                            }
                        }

                        if($(this).find('#UDF3') != null)
                        {
                            if($(this).find('#UDF3').attr("class") == 'selectBox')
                            {
                                vUDF3 =$(this).find('#UDF3 option:selected').text();
                            }
                            else{
                                vUDF3 = $(this).find('#UDF3').val();
                            }
                        }

                        if($(this).find('#UDF4') != null)
                        {
                            if($(this).find('#UDF4').attr("class") == 'selectBox')
                            {
                                vUDF4 = $(this).find('#UDF4 option:selected').text();
                            }
                            else{
                                vUDF4 = $(this).find('#UDF4').val();
                            }
                        }

                        if($(this).find('#UDF5') != null)
                        {
                            if($(this).find('#UDF5').attr("class") == 'selectBox')
                            {
                                vUDF5 = $(this).find('#UDF5 option:selected').text();
                            }
                            else{
                                vUDF5 = $(this).find('#UDF5').val();
                            }
                        }
                
                        ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////START
                            $.ajax({
                                "url": '@Url.Content("~/Pull/UpdatePullData")',
                                data: { ID: 0, ItemGUID: vItemGUID, ProjectGUID: vProjectID, BinID: vBinID, PullCreditQuantity: txtQty, PullCredit: vPullCreditText, TempPullQTY: txtQty, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: '@TempData["WorkOrderGUID"]', ProjectSpendName: ProjectSpendName,PullType = '@Convert.ToInt64(PullInsertTypeEnum.WebWo)' },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {
                                    $('#DivLoading').hide();
                                    if (response.Status == "ok") {
                                        if (response.LocationMSG != "") {
                                            if(response.PSLimitExceed)
                                            {
                                                // write code to redirect to requisition with confirm box
                                                //$("#PSPlimit").text(response.LocationMSG + " " + "do you want to create new requisition for the same ?");
                                                //$('#project-spend-limit-basic-modal-content').modal();
                                                $(RowObject).css('background-color', 'Yellow');
                                                IsPSRedirectToReq = true;
                                                IsGlobalErrorMsgShow = true;
                                            }
                                            else
                                            {
                                                //alert(response.LocationMSG);
                                                $(RowObject).css('background-color', 'Olive');
                                                IsPSRedirectToReq = false;
                                                IsGlobalErrorMsgShow = true;
                                            }
                                        }
                                        else
                                        {
                                            UDFInsertNewForGrid(RowObject);
                                            $(RowObject).css('background-color', 'Green');                                                
                                            $('div#target').css("z-index", 100000);
                                            $('div#target').fadeToggle();
                                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                            $("#spanGlobalMessage").html(response.Message);
                                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                                            oTable.fnDraw();          
                                            IsPSRedirectToReq = false;
                                            IsGlobalErrorMsgShow = true;                                  
                                        }
                                    }
                                    else {
//                                        $("#spanGlobalMessage").html(response.Message);
//                                        $('div#target').fadeToggle();
//                                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
//                                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                                          $(RowObject).css('background-color', 'Red');
                                          IsPSRedirectToReq = false;
                                          IsGlobalErrorMsgShow = true;
                                    }                        
                                    txxt.val(VspnDefaultPullQuantity);
                                },
                                error: function (response) {
//                                    $('#DivLoading').hide();
//                                    $("#spanGlobalMessage").html(response.message);
//                                    $('div#target').fadeToggle();
                                    //                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                        $(RowObject).css('background-color', 'Red');
                                        IsPSRedirectToReq = false;
                                        IsGlobalErrorMsgShow = true;
                                }
                            });
                        ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////END
                    }                      

                    /////////////////////////////////////////////////////////////////////////////////
                    //////////////////////////////////////END//////////////////////////////////////
                    /////////////////////////////////////////////////////////////////////////////////
                }
            });
            //$('#GlobalModalProcessing').dialog('close');
            closeModalPSLimit();
            
            if(IsPSRedirectToReq)
            {
                $('#project-spend-limit-basic-modal-content').modal();
            }
            else if(IsGlobalErrorMsgShow)
            {
                $('#noramal-global-msg-basic-modal-content').modal();
            }
        }
        else if($(obj)[0].value == 'Pull')
        {
            /////////////////////////////////////////////////////////////////////////////////
            //////////////////////////////////////START//////////////////////////////////////
            /////////////////////////////////////////////////////////////////////////////////
            var txxt = $(obj).parent().parent().find('#txtQty');
            var vBinID;
            var vProjectID;
            var ProjectSpendName = '';
            var itemType = $(obj).parent().find('#spnOrderItemType').text();
            var txtQty = txxt.val();
            if(itemType != '4')
            {
               vBinID = $(obj).parent().parent().find('#BinID')[0].value == '' ? 0 : $(obj).parent().parent().find('#BinID')[0].value;
               vProjectID = $(obj).parent().parent().find('#ProjectID')[0].value == "" ? "" : $(obj).parent().parent().find('#ProjectID')[0].value;
               ProjectSpendName = $(obj).parent().parent().find('#txtProjectSpent').val();
                if (txtQty == 'undefined' && txtQty.length == 0) {           
                    alert('@ResPullMaster.reqQtyToPull');
                        return false;
                }
                if(vBinID == 0)
                {
                    alert('@ResPullMaster.InventoryLocationMandatory');
                    return false;
                }
            }
            else
            {
                if (txtQty == 'undefined' || txtQty == '') {
                    alert('@ResPullMaster.MsgLabourItemRequiredHours');
                    return false;
                }
                if (parseFloat(txtQty) <= 0 ) {
                    alert('@ResPullMaster.MsgLabourItemRequiredHours');
                    return false;
                }
                if (parseFloat(txtQty) == NaN ) {
                    alert('@ResPullMaster.MsgLabourItemRequiredHours');
                    return false;
                }

                vBinID = 0;
                vProjectID = '';
                ProjectSpendName = '';
            }

            
            var trimtxtVal = txtQty.replace(/ /g, '');
            if (trimtxtVal.length > 0) {
            
                var vItemID = $(obj).parent().find('#spnItemID').text();
                var vItemGUID = $(obj).parent().find('#spnItemGUID').text();
                
                var vspnOn_HandQuantity = $(obj).parent().parent().find('#spnOn_HandQuantity').text() == "" ? 0 : $(obj).parent().parent().find('#spnOn_HandQuantity').text();
                var vPullCreditText = "pull";//$(obj)[0].value;//$(obj).parent().parent().find('input[name=colors'+vItemID+']:checked')[0].value;
                
                var VspnDefaultPullQuantity =$(obj).parent().parent().find('#spnDefaultPullQuantity').text() == "" ? 0 : $(obj).parent().parent().find('#spnDefaultPullQuantity').text();

                //var vProjectSpendName = $(obj).parent().parent().find('#ProjectID')[0].text;
                //var vBinLocation = $(obj).parent().parent().find('#BinID')[0].value;

                $('#DivLoading').show();
                
                var vUDF1 = '';
                var vUDF2 = '';
                var vUDF3 = '';
                var vUDF4 = '';
                var vUDF5 = '';

                
                if($(obj).parent().parent().find('#UDF1') != null)
                {
                    if($(obj).parent().parent().find('#UDF1').attr("class") == 'selectBox')
                    {
                        vUDF1 = $(obj).parent().parent().find('#UDF1 option:selected').text();
                    }
                    else{
                        vUDF1 = $(obj).parent().parent().find('#UDF1').val();
                    }
                }

                if($(obj).parent().parent().find('#UDF2') != null)
                {
                    if($(obj).parent().parent().find('#UDF2').attr("class") == 'selectBox')
                    {
                        vUDF2 = $(obj).parent().parent().find('#UDF2 option:selected').text();
                    }
                    else{
                        vUDF2 = $(obj).parent().parent().find('#UDF2').val();
                    }
                }

                if($(obj).parent().parent().find('#UDF3') != null)
                {
                    if($(obj).parent().parent().find('#UDF3').attr("class") == 'selectBox')
                    {
                        vUDF3 = $(obj).parent().parent().find('#UDF3 option:selected').text();
                    }
                    else{
                        vUDF3 = $(obj).parent().parent().find('#UDF3').val();
                    }
                }

                if($(obj).parent().parent().find('#UDF4') != null)
                {
                    if($(obj).parent().parent().find('#UDF4').attr("class") == 'selectBox')
                    {
                        vUDF4 = $(obj).parent().parent().find('#UDF4 option:selected').text();
                    }
                    else{
                        vUDF4 = $(obj).parent().parent().find('#UDF4').val();
                    }
                }

                if($(obj).parent().parent().find('#UDF5') != null)
                {
                    if($(obj).parent().parent().find('#UDF5').attr("class") == 'selectBox')
                    {
                        vUDF5 = $(obj).parent().parent().find('#UDF5 option:selected').text();
                    }
                    else{
                        vUDF5 = $(obj).parent().parent().find('#UDF5').val();
                    }
                }                
                ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////START
                    $.ajax({
                        "url": '@Url.Content("~/Pull/UpdatePullData")',
                        data: { ID: 0, ItemGUID: vItemGUID, ProjectGUID: vProjectID, BinID: vBinID, PullCreditQuantity: txtQty, PullCredit: vPullCreditText, TempPullQTY: txtQty, UDF1 : vUDF1, UDF2 : vUDF2, UDF3 : vUDF3, UDF4 : vUDF4, UDF5 : vUDF5, RequisitionDetailID : "", WorkOrderDetailGUID :'@TempData["WorkOrderGUID"]',ProjectSpendName:ProjectSpendName,PullType = '@Convert.ToInt64(PullInsertTypeEnum.WebWo)'},
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        success: function (response) {
                            $('#DivLoading').hide();
                            if (response.Status == "ok") {
                                if (response.LocationMSG != "") {
                                    if(response.PSLimitExceed)
                                    {
                                        // write code to redirect to requisition with confirm box
                                        $("#PSPlimit").text(response.LocationMSG + " " + "do you want to create new requisition for the same ?");
                                        $('#project-spend-limit-basic-modal-content').modal();
                                    }
                                    else
                                    {
                                        alert(response.LocationMSG);
                                    }
                                }
                                else
                                {
                                    UDFInsertNewForGrid($(obj).parent().parent());
                                    $('div#target').css("z-index", 100000);
                                    $('div#target').fadeToggle();
                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                    $("#spanGlobalMessage").html(response.Message);
                                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                                    oTable.fnDraw();
                                }
                            }
                            else {
                                $("#spanGlobalMessage").html(response.Message);
                                $('div#target').css("z-index", 100000);
                                $('div#target').fadeToggle();
                                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                            }                        
                            txxt.val(VspnDefaultPullQuantity);
                        },
                        error: function (response) {
                            $('#DivLoading').hide();
                            $("#spanGlobalMessage").html(response.message);
                            $('div#target').css("z-index", 100000);
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
                    });
                ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////END
            }                      

            /////////////////////////////////////////////////////////////////////////////////
            //////////////////////////////////////END//////////////////////////////////////
            /////////////////////////////////////////////////////////////////////////////////
        }
        else if($(obj)[0].value == 'Credit')
        {
           var itemId = $(obj).parent().find('#spnItemGUID').text();
           var itemType = $(obj).parent().find('#spnOrderItemType').text();
           var vProjectID = $(obj).parent().parent().find('#ProjectID')[0].value == "" ? "" : $(obj).parent().parent().find('#ProjectID')[0].value;
         
            if('@Model.IsProjectSpendMandatoryInRoom'== "True" &&  (vProjectID == undefined || vProjectID == ""))
            {
                alert("For Credit back, Project spend is required ! Kindly select.");
//                $('div#target').fadeToggle();
//                $("div#target").delay(2000).fadeOut(200);
//                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                return false;
            }
            else
            {
                $('#LocationDetails').empty();
                var idtype = itemId + '%23' + itemType + '%23' +  'frompullcredit' + '%23'+ '@(TempData["WorkOrderGUID"])' ;
                $('#DivLoading').show();
                $('#LocationDetails').load('../Inventory/LocationDetailsNew?ItemID_ItemType=' + idtype + '&ProjectSpendGUID='+vProjectID+'', function () {
                    $('#LocationDetails').dialog('open');
                    $('#DivLoading').hide();
                    IsRefreshGrid = true;
                });
                return false;
            }
        }
        else if($(obj)[0].value == 'Credit MS')
        {
            var itemId = $(obj).parent().find('#spnItemGUID').text();
            var itemType = $(obj).parent().find('#spnOrderItemType').text();
            var vProjectID = $(obj).parent().parent().find('#ProjectID')[0].value == "" ? "" : $(obj).parent().parent().find('#ProjectID')[0].value;
          
            if('@Model.IsProjectSpendMandatoryInRoom'=="True" &&  (vProjectID == undefined || vProjectID == ""))
            {
                alert("For Credit back, Project spend is required ! Kindly select.");
//                $('div#target').fadeToggle();
//                $("div#target").delay(2000).fadeOut(200);
//                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                return false;
            }
            else
            {
                var idtype = itemId + '%23' + itemType + '%23' +  'WorkOrderGuid-' +'@(TempData["WorkOrderGUID"])';
                $('#DivLoading').show();
                $('#LocationDetails').load('../Inventory/LocationDetailsMS?ItemID_ItemType=' + idtype, function () {
                    $('#LocationDetails').dialog('open');
                    $('#DivLoading').hide();
                    IsRefreshGrid = true;
                });
            
                return false;
            }
        }
        else
            return false;
    }

    function fillItemMaster(bDestroy) {
        var gaiSelected = [];
        oTableItemModel = $('#ItemModeDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "100%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[3, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";
                    /*START : QTY Legends*/ 
                    aData.MinimumQuantity =  aData.MinimumQuantity ?  aData.MinimumQuantity : 0;
                    aData.CriticalQuantity =  aData.CriticalQuantity ? aData.CriticalQuantity : 0;
                    aData.OnHandQuantity =  aData.OnHandQuantity ? aData.OnHandQuantity : 0;
//                    if(aData.OnHandQuantity <= aData.CriticalQuantity)                        
//                        $(nRow).css('background-color','@eTurnsWeb.Helper.SessionHelper.CriticalQuantityBackColor' + '!Important');                        
//                    else if (aData.OnHandQuantity <= aData.MinimumQuantity)                        
//                        $(nRow).css('background-color','@eTurnsWeb.Helper.SessionHelper.MinimumQuantityBackColor' + '!Important');                           
                    /*END : QTY Legends*/

                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'NewPullItemMaster' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                     "type": "POST",
                    data: { ListName: 'NewPullItemMaster' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                    if (json.jsonData != '')
                        o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content(Model.AjaxURLToFillItemGrid)',//'@Url.Content("~/Inventory/ItemMasterListAjax")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                //PostCount = PostCount + 1;
                
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting != null && oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                aoData.push({ "name": "ActionFilter", "value": $('#NewPullAction').val() });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#ItemModeDataTable td').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });

                        if ($("#ItemModel_filter").val() != '') {
                            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
                        }
                        
                        $("input[type='radio']").filter('[value=pull]').attr('checked', 'checked');

                        CallShowHideData();

                        $(".text-boxQuantityFormat").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
                        });              

                        $(".text-boxQuantityFormatSR").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: 0
                        });  

                        UDFfillEditableOptionsForGrid();
                    }
                })
            },
            "fnInitComplete": function () {               

                $('.ColVis').detach().appendTo(".setting-arrow");
                $('#divQTYLegends').show(1000);
                                    
            },
            "aoColumns": [
                            { "mDataProp": null,
                                "sClass": "read_only control center",
                                "bSortable": false,
                                "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">'
                                , "fnRender": function (obj, val) {
                                    if (obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '')
                                    {
                                        if($('#NewPullAction').val() == "Pull")
                                            return "<input type='button' value='Pull' onclick='return AddSingleItemToPullList(this);' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span><span id='spnOn_HandQuantity' style='display:none'>" + obj.aData.OnHandQuantity + "</span>" + "<span id='spnOrderItemType'  style='display:none'>" + obj.aData.ItemType + "</span>";
                                        else if($('#NewPullAction').val() == "Credit")
                                            return "<input type='button' value='Credit' onclick='return AddSingleItemToPullList(this);' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span><span id='spnOn_HandQuantity' style='display:none'>" + obj.aData.OnHandQuantity + "</span>" + "<span id='spnOrderItemType'  style='display:none'>" + obj.aData.ItemType + "</span>"; 
                                        else if($('#NewPullAction').val() == "CreditMS")
                                            return "<input type='button' value='Credit MS'  onclick='return AddSingleItemToPullList(this);' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span><span id='spnOn_HandQuantity' style='display:none'>" + obj.aData.OnHandQuantity + "</span>" + "<span id='spnOrderItemType'  style='display:none'>" + obj.aData.ItemType + "</span>";
                                        else
                                            return "";
                                    }
                                    else
                                    {
                                        return "<input type='button' value='Pull' onclick='return LoadQuickListData(this)' id='btnLoad' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnQuickListGUID'  style='display:none'>" + obj.aData.QuickListGUID + "</span>";
                                    }
                                }
                            },
                            { "mDataProp": "ID", "sClass": "read_only"},
                            { "mDataProp": null,
                                "bSortable": false,
                                "sClass": "read_only control center",
                                "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">',
                                "fnRender": function (obj, val) {
                                if(obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '')
                                    {   
                                        if(obj.aData.SerialNumberTracking == true)
                                        {
                                            if(obj.aData.DefaultPullQuantity != null)
                                            {
                                                return "<input maxlength='10' type='text' value='" + parseFloat(obj.aData.DefaultPullQuantity).toFixed(0) +"' class='text-boxinner text-boxQuantityFormatSR' id='txtQty' onkeypress = 'return onlyNumeric(event);' style='width:93%;' />" + "<span id='spnDefaultPullQuantity'  style='display:none'>" + parseFloat(obj.aData.DefaultPullQuantity).toFixed(0) + "</span>";
                                            }
                                            else{
                                                return "<input maxlength='10' type='text' value='' class='text-boxinner text-boxQuantityFormatSR' id='txtQty' onkeypress = 'return onlyNumeric(event);' style='width:93%;' />";
                                            }
                                        }
                                        else{
                                            if(obj.aData.DefaultPullQuantity != null)
                                            {
                                                return "<input maxlength='10' type='text' value='" + parseFloat(obj.aData.DefaultPullQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) +"' class='text-boxinner text-boxQuantityFormat' id='txtQty' onkeypress = 'return onlyNumeric(event);' style='width:93%;' />" + "<span id='spnDefaultPullQuantity'  style='display:none'>" + parseFloat(obj.aData.DefaultPullQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + "</span>";
                                            }
                                            else{
                                                return "<input maxlength='10' type='text' value='' class='text-boxinner text-boxQuantityFormat' id='txtQty' onkeypress = 'return onlyNumeric(event);' style='width:93%;' />";
                                            }
                                        }
                                    }
                                    else
                                        return "<input maxlength='10' type='text' value='' class='text-boxinner' id='txtQty' onkeypress = 'return onlyNumeric(event);' style='width:93%;' />";
                                    }
                                },
		                    {
			                    "mDataProp": "ItemNumber",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false
			                },
                            {
			                    "mDataProp": null,
			                    "sClass": "read_only",
			                    "bSortable": false,
			                    "bSearchable": false,
                                "sDefaultContent": '',
			                    "fnRender": function (obj, val) {
                                    var sOut = '';
                                    var PageNameTemp = 'ItemLocationListPULL';
                                     if(obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '')
                                    {   

                                    if(IsStagingLocationOnly)
                                        {
                                            PageNameTemp = 'ItemLocationListPULLStaging';
                                        }
                                        else
                                        {
                                            PageNameTemp = 'ItemLocationListPULLBin';
                                        } 

                                        if(obj.aData.ItemType != 4)              
                                        {
			                                $.ajax({
			                                    "url": '@Url.Content("~/Master/GetDropDownList")',
			                                    data: { ItemGUID: obj.aData.GUID, PageName: PageNameTemp, SelectedID: 0 },
			                                    "async": false,
			                                    cache: false,
			                                    "dataType": "text",
			                                    "success": function (json) {
			                                        sOut = json;
			                                        $('#DivLoading').hide();
			                                    },
			                                    error: function (response) {
			                                        //
			                                    }
			                                });
                                        }
                                    }
			                        return sOut;
			                    }
			                },
                            {
			                    "mDataProp": null,
			                    "sClass": "read_only",
			                    "bSortable": false,
			                    "bSearchable": false,
                                "sDefaultContent": '',
			                    "fnRender": function (obj, val) {
                                var sOut = '';
                                 if(obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '')
                                    {   
                                        if(obj.aData.ItemType != 4)              
                                            {
			                                    $.ajax({
			                                        "url": '@Url.Content("~/Master/GetDropDownList")',
			                                        data: { ItemGUID: obj.aData.GUID, PageName: 'ProjectList', SelectedID: 0 },
			                                        "async": false,
			                                        cache: false,
			                                        "dataType": "text",
			                                        "success": function (json) {
			                                            sOut = json;
			                                            $('#DivLoading').hide();
			                                        },
			                                        error: function (response) {
			                                        }
			                                    });
                                            }
                                    }
			                        return sOut;
			                    }
			                },                            
                            { "mDataProp": "ManufacturerNumber", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerName", "sClass": "read_only" },
                            { "mDataProp": "SupplierPartNo", "sClass": "read_only" },
                            { "mDataProp": "SupplierName", "sClass": "read_only" },
                            { "mDataProp": "UPC", "sClass": "read_only" },
                            { "mDataProp": "UNSPSC", "sClass": "read_only" },
                            { "mDataProp": "Description", "sClass": "read_only" },
                            { 
                                "mDataProp": "LongDescription", "sClass": "read_only","sDefaultContent": '',                                
                                "fnRender": function (obj, val) {
			                        return "<div class='comment more'>" + val + "</div>";
			                    }
                            },
                            { "mDataProp": "PricePerTerm", "sClass": "read_only" ,
                                  "fnRender": function (obj, val) {
                                              if (obj.aData.PricePerTerm != null && obj.aData.PricePerTerm != NaN)
                                              return "<span>" + FormatedCostQtyValues(obj.aData.PricePerTerm, 1) + "</span>";
                                              else
                                              return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                                                                   }
                            },
                            { "mDataProp": "DefaultReorderQuantity", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                        if (obj.aData.DefaultReorderQuantity != null && obj.aData.DefaultReorderQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.DefaultReorderQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                                                }  },
                            { "mDataProp": "DefaultPullQuantity", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                        if (obj.aData.DefaultPullQuantity != null && obj.aData.DefaultPullQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.DefaultPullQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                                                }  },
                            { "mDataProp": "Cost", "sClass": "read_only isCost"  ,
                                  "fnRender": function (obj, val) {
                                              if (obj.aData.Cost != null && obj.aData.Cost != NaN)
                                              return "<span>" + FormatedCostQtyValues(obj.aData.Cost, 1) + "</span>";
                                              else
                                              return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                                                                   }},
                            { "mDataProp": "Markup", "sClass": "read_only isCost" },
                            { "mDataProp": "SellPrice", "sClass": "read_only isCost" ,
                                  "fnRender": function (obj, val) {
                                              if (obj.aData.SellPrice != null && obj.aData.SellPrice != NaN)
                                              return "<span>" + FormatedCostQtyValues(obj.aData.SellPrice, 1) + "</span>";
                                              else
                                              return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                                                                   } },
                            { "mDataProp": "ExtendedCost", "sClass": "read_only isCost"  ,
                                  "fnRender": function (obj, val) {
                                              if (obj.aData.ExtendedCost != null && obj.aData.ExtendedCost != NaN)
                                              return "<span>" + FormatedCostQtyValues(obj.aData.ExtendedCost, 1) + "</span>";
                                              else
                                              return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                                                                   }},
                            { "mDataProp": "LeadTimeInDays", "sClass": "read_only" },
                            { "mDataProp": "Trend", "sClass": "read_only"
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "Taxable", "sClass": "read_only"
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                             },
                            { "mDataProp": "Consignment", "sClass": "read_only" 
                                ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "StagedQuantity", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                        if (obj.aData.StagedQuantity != null && obj.aData.StagedQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.StagedQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                                                }  },
                            { "mDataProp": "InTransitquantity", "sClass": "read_only" ,
                                "fnRender": function (obj, val) {
                                        if (obj.aData.InTransitquantity != null && obj.aData.InTransitquantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.InTransitquantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                                                } },
                            { "mDataProp": "OnOrderQuantity", "sClass": "read_only" ,
                                "fnRender": function (obj, val) {
                                        if (obj.aData.OnOrderQuantity != null && obj.aData.OnOrderQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.OnOrderQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                                                } },
                            { "mDataProp": "OnTransferQuantity", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                        if (obj.aData.OnTransferQuantity != null && obj.aData.OnTransferQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.OnTransferQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                                                }  },
                            { "mDataProp": "SuggestedOrderQuantity", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                        if (obj.aData.SuggestedOrderQuantity != null && obj.aData.SuggestedOrderQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.SuggestedOrderQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                                                }  },
                            { "mDataProp": "RequisitionedQuantity", "sClass": "read_only" ,
                                "fnRender": function (obj, val) {
                                        if (obj.aData.RequisitionedQuantity != null && obj.aData.RequisitionedQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.RequisitionedQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                                                } },
                            { "mDataProp": "AverageUsage", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.AverageUsage != null && obj.aData.AverageUsage != NaN)
                                        return "<span>" + FormatedCostQtyValues(obj.aData.AverageUsage,4) + "</span>";
                                    else
                                        return "<span>" + FormatedCostQtyValues(0,4) + "</span>";
                                }
                            
                             },
                            { "mDataProp": "Turns", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.Turns != null && obj.aData.Turns != NaN)
                                        return "<span>" + FormatedCostQtyValues(obj.aData.Turns,4) + "</span>";
                                    else
                                        return "<span>" + FormatedCostQtyValues(0,4) + "</span>";
                                } },
                            { "mDataProp": "OnHandQuantity", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                        if (obj.aData.OnHandQuantity != null && obj.aData.OnHandQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.OnHandQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                                                }  },
                                    {
                                "mDataProp": "IsItemLevelMinMaxQtyRequired", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                }
                            },
                            { "mDataProp": "CriticalQuantity", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                if (obj.aData.IsItemLevelMinMaxQtyRequired == "No")
                                   {
                                      return "<span>" + 'N/A' + "</span>";
                                   }
                                   else
                                   {  
                                        if (obj.aData.CriticalQuantity != null && obj.aData.CriticalQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.CriticalQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                   }
                               }
                            },
                            { "mDataProp": "MinimumQuantity", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                if (obj.aData.IsItemLevelMinMaxQtyRequired == "No")
                                   {
                                      return "<span>" + 'N/A' + "</span>";
                                   }
                                   else
                                   {  
                                            if (obj.aData.MinimumQuantity != null && obj.aData.MinimumQuantity != NaN)
                                            return "<span>" + FormatedCostQtyValues(obj.aData.MinimumQuantity, 2) + "</span>";
                                            else
                                            return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                     }       
                                   } 
                            },
                            { "mDataProp": "MaximumQuantity", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                if (obj.aData.IsItemLevelMinMaxQtyRequired == "No")
                                   {
                                      return "<span>" + 'N/A' + "</span>";
                                   }
                                   else
                                   {  
                                        if (obj.aData.MaximumQuantity != null && obj.aData.MaximumQuantity != NaN)
                                         return "<span>" + FormatedCostQtyValues(obj.aData.MaximumQuantity, 2) + "</span>";
                                        else
                                         return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                                         }
                                                                }  },
                            { "mDataProp": "WeightPerPiece", "sClass": "read_only" },
                            { "mDataProp": "ItemUniqueNumber", "sClass": "read_only" },
                            { "mDataProp": "IsTransfer", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                             { "mDataProp": "IsPurchase", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "InventoryClassificationName", "sClass": "read_only" },
                            { "mDataProp": "SerialNumberTracking", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "LotNumberTracking", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "DateCodeTracking", "sClass": "read_only" 
                            ,"fnRender": function (obj, val) {                                                                            
                                        return GetBoolInFormat(obj, val);
                                 }
                            },
                            { "mDataProp": "ItemType", "sClass": "read_only" 
                                    ,"fnRender": function (obj, val) {                                                                            
                                            if(val == 1)
                                                return "Item";
                                             else if (val == 2)
                                                return "Quick List";
                                             else if (val == 3)
                                                return "Kit";
                                             else if (val == 4)
                                                return "Labor";
                                            else
                                                return "";
                                    }
                            },
                            { "mDataProp": "IsLotSerialExpiryCost", "sClass": "read_only" },
                            { "mDataProp": "RoomName", "sClass": "read_only" },
			                { "mDataProp": "Created", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        //return GetDateInFullFormat(val);
                                    return obj.aData.CreatedDate;
			                    }
			                },
			                { "mDataProp": "Updated", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        //return GetDateInFullFormat(val);
                                    return obj.aData.UpdatedDate;
			                    }
			                },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "CategoryName", "sClass": "read_only" },
                            { "mDataProp": "Unit", "sClass": "read_only" },
                            { "mDataProp": "GLAccount", "sClass": "read_only" }
                            @(Html.RenderColumnsArray("ItemMaster", true, "Item"))
                            @(Html.RenderColumnsArrayEditableObject("PullMaster",isUDFOrderRequire: true)) 
                            
                            
                ]
        });

        $('.DTTT_container').css('z-index', '-1');

        if ('@isCost' == '@Boolean.FalseString') {

                //ColumnsToHideinPopUp.push(12);
               // ColumnsToHideinPopUp.push(17);
               // ColumnsToHideinPopUp.push(18);
               // ColumnsToHideinPopUp.push(19);
        // ColumnsToHideinPopUp.push(20);
        
             HideColumnUsingClassName("ItemModeDataTable");
               // oTable.fnSetColumnVis(12, false);
               // oTableItemModel.fnSetColumnVis(17, false);
               // oTableItemModel.fnSetColumnVis(18, false);
               // oTableItemModel.fnSetColumnVis(19, false);
               // oTableItemModel.fnSetColumnVis(20, false);
                
           }


        if('@TempData["WorkOrderGUID"]' != "")
            $('.DTTT_container').hide();
 
    }
    
    function onlyNumeric(event)
    {
            var charCode = (event.which) ? event.which : event.keyCode
            
        if (charCode > 31 && (charCode < 48 || charCode > 57 || code == 86))
            return false;

         return true;

    }
    function fnFilterGlobalIM() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#ItemModel_filter") != 'undefined' && ($("#ItemModel_filter").val().length > 2 || $("#ItemModel_filter").val().length == 0)) {
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            //$('#ItemModeDataTable').dataTable().fnFilter(
            //                searchtext,
            //                null,
            //                null,
            //                null
            //            );
            DoNarrowSearchIM();
        }
        else {
            $('#ItemModeDataTable td').removeHighlight();
            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
        }
    }


    $("#ItemModel_filter").keyup(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
        }
        else {
            fnFilterGlobalIM();
        }
    });
    $(document).on('propertychange input', "#ItemModel_filter", function () {

        fnFilterGlobalIM();
        return false;
    });


    $("#ItemModel_filter").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            //$('#ItemModeDataTable').dataTable().fnFilter(
            //                searchtext,
            //                null,
            //                null,
            //                null
            //            );
            DoNarrowSearchIM();
            return false;
        }
    });


    $("#clear_QLItemModel_filter").click(funClearFilterIM);

    function funClearFilterIM() {
        //Check length first        
        if ($("#ItemModel_filter").val().length > 0) {
            $("#ItemModel_filter").val('');
            $('#ItemModeDataTable').dataTable().fnFilter(
                            $("#ItemModel_filter").val(),
                            null,
                            null,
                            null
                        );
        }
        $("#ItemModel_filter").focus();
        return false;
    }

    $('#PageNumberIM').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#GobtnIM").click();
            return false;
        }
    });

    $("#GobtnIM").click(function () {
        var pval = $('#PageNumberIM').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (pval == 0)
            return;
        oTableItemModel.fnPageChange(Number(pval - 1));
        $('#PageNumberIM').val('');
    });   

    $('#refreshGridIM').die('click');
    // used for refresh the grid manually...
    $('#refreshGridIM').live('click', function () {
        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

            oTableItemModel.fnDraw();
        //fillItemMaster(false);

    });
  

  //**************************** Not used Code *************************//

  $("#reordersettingIM").click(function () {
        $("#divRefreshBlockIM").toggle();
    });

  $("#ColumnSortableModalIM").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
        draggable: false,
        resizable: false,
        open: function () {

            GenerateColumnSortableIM();
            $("#ColumnSortableIM").sortable({ axis: "y", containment: "parent" });
        }
    });

    $("#ColumnOrderSetupIM").click(function () {
        $("#ColumnSortableModalIM").dialog("open");

        return false;
    });
    function GenerateColumnSortableIM() {
   
        $('#ColumnSortableIM li').each(function (index) {
            $(this).remove();
        });
        var div = document.createElement('div');
        div.id = "CheckAll";
        div.innerHTML = "<input type='hidden' value ='ColumnSortableIM' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>";
        $('div.sortableContainer').find("div#CheckAll").remove();
        $('div.sortableContainer').prepend(div);
        for (i = 0, iLen = oTableItemModel.fnSettings().aoColumns.length; i < iLen; i++) {
            var oColumn = oTableItemModel.fnSettings().aoColumns[i];
            var li = document.createElement('li');
            li.id = GetColumnIndex1(oColumn.sTitle.trim());
            li.className = 'ui-state-default';
            li.innerHTML = oColumn.sTitle.trim();
            if (oColumn.bVisible) {
                li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            }
            else
                li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            $('#ColumnSortableIM').append(li);
        }
    }

     var GetColumnIndex1 = function (ColumnName) {
           return objColumns[ColumnName];
    };

  function UpdateColumnOrderIM(_ListName) {
     
        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

        var _Order = $('#ColumnSortableIM').sortable("toArray");
        var __Order = _Order.toString().split(",");
        for (var i = 0; i < __Order.length; i++) {
            __Order[i] = parseFloat(__Order[i], 10);
        }
       
        oTableItemModel.fnSettings().oLoadedState.ColReorder = __Order;
      

        var _abVisCols = [];
        for (i = 0, iLen = oTableItemModel.fnSettings().aoColumns.length; i < iLen; i++) {
            var checked = $("#" + i + "_").is(":checked");
            _abVisCols.push(checked);
        }
        
        oTableItemModel.fnSettings().oLoadedState.abVisCols = _abVisCols;
       

        $.ajax({
            "url": '@Url.Content("~/Master/SaveGridState")',
            data: { Data: JSON.stringify(oTableItemModel.fnSettings().oLoadedState), ListName: _ListName },
            "dataType": "json",
            cache: false,
            "async": false,
            "success": function (json) {
             $("#ColumnSortableModalIM").dialog("close");
              $('#ItemModelTemp').dialog('close');
             OpenItemPopup();
                //o = json;
               // oTableItemModel.fnDraw();
                //$('.ui-dialog-titlebar-close').click();
            }
        });
        //fillItemMaster(false);
    }

    function LoadQuickListData(OBJGridRow)
    {        
        var vsQuickListGUID = $(OBJGridRow).parent().parent().find('#spnQuickListGUID').text() == "" ? "" : $(OBJGridRow).parent().parent().find('#spnQuickListGUID').text();
        QuickListPULLQty = parseInt($(OBJGridRow).parent().parent().find('#txtQty').val() == ''? 0 :$(OBJGridRow).parent().parent().find('#txtQty').val());
        if(QuickListPULLQty > 0)
        {
            alert('2');
            var searchText = "QLGuid=" + vsQuickListGUID;
            oTableItemModel.fnFilter(searchText,null,null,null);        
            IsQLLoaded = true;
        }
        else
        {
            $('div#target').css("z-index", 100000);
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("#spanGlobalMessage").html('@ResQuickListItems.msgProperQLQty');
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
        }
        return false;
    }    

    $(oTableItemModel).ajaxSuccess(function() {
        if(IsQLLoaded)
        {
        
            IsQLLoaded = false;
            setTimeout('CallForQLPull()',1000);
        }
    });

    function CallForQLPull()
    {
        IsQLLoaded = false;
        oTableItemModel.find("tbody tr").removeClass("row_selected").addClass("row_selected");
        $("#btnPullAllQL").click();
    }

    function LoadAllItemData()
    {
        oTableItemModel.fnFilter("",null,null,null);        
    }

      function CheckValidPullData()
    {
        
            var IsGlobalErrorMsgShow = false;            
            var IsPSRedirectToReq = false;
            var IsQLSuccessfullyDone = true;
            $('#ItemModeDataTable tbody tr').each(function () {
                if ($(this).attr('class').indexOf('row_selected') != -1) {
                $(this).toggleClass('row_selected');
                var RowObject = $(this);                                   
                /////////////////////////////////////////////////////////////////////////////////
                //////////////////////////////////////START//////////////////////////////////////
                /////////////////////////////////////////////////////////////////////////////////
                    var txxt = $(this).find('#txtQty');
                    var vBinID;
                    var vProjectID;
                    var itemType = $(this).find('#spnOrderItemType').text();
                    var txtQty = txxt.val();
                    if(itemType != '4')
                    {
                       vBinID = $(this).find('#BinID')[0].value == '' ? 0 : $(this).find('#BinID')[0].value;
                       vProjectID = $(this).find('#ProjectID')[0].value == "" ? "" : $(this).find('#ProjectID')[0].value;
                        if (txtQty == 'undefined' && txtQty.length == 0) {           
                                //alert('@ResPullMaster.reqQtyToPull');
                                IsGlobalErrorMsgShow = true;
                                IsQLSuccessfullyDone = false;
                                return true;
                        }
                        if (parseFloat(txtQty) <= 0 ) {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                           return true;
                        }
                        if(vBinID == 0)
                        {
                            //alert('@ResPullMaster.InventoryLocationMandatory');
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                           return true;
                        }
                    }
                    else
                    {
                        if (txtQty == 'undefined' || txtQty == '') {
                            //alert('@ResPullMaster.MsgLabourItemRequiredHours');
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                            return true;
                        }
                        if (parseFloat(txtQty) <= 0 ) {
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                           return true;
                        }
                        if (parseFloat(txtQty) == NaN ) {
                            IsGlobalErrorMsgShow = true;
                            IsQLSuccessfullyDone = false;
                           return true;
                        }

                        vBinID = 0;
                        vProjectID = '';
                    }
                    var trimtxtVal = txtQty.replace(/ /g, '');
                    if (trimtxtVal.length > 0) {
                        var vItemID = $(this).find('#spnItemID').text();
                        var vItemGUID = $(this).find('#spnItemGUID').text();
                        var vspnOn_HandQuantity = $(this).find('#spnOn_HandQuantity').text() == "" ? 0 : $(this).find('#spnOn_HandQuantity').text();
                        var vPullCreditText = "pull";//$(obj)[0].value;//$(obj).parent().parent().find('input[name=colors'+vItemID+']:checked')[0].value;
                        var VspnDefaultPullQuantity =$(this).find('#spnDefaultPullQuantity').text() == "" ? 0 : $(this).find('#spnDefaultPullQuantity').text();
                        var vUDF1 = '';
                        var vUDF2 = '';
                        var vUDF3 = '';
                        var vUDF4 = '';
                        var vUDF5 = '';
                        if($(this).find('#UDF1') != null)
                        {
                            if($(this).find('#UDF1').attr("class") == 'selectBox')
                            {
                                vUDF1 = $(this).find('#UDF1 option:selected').text();
                            }
                            else{
                                vUDF1 = $(this).find('#UDF1').val();
                            }
                        }

                        if($(this).find('#UDF2') != null)
                        {
                            if($(this).find('#UDF2').attr("class") == 'selectBox')
                            {
                                vUDF2 =$(this).parent().find('#UDF2 option:selected').text();
                            }
                            else{
                                vUDF2 = $(this).find('#UDF2').val();
                            }
                        }

                        if($(this).find('#UDF3') != null)
                        {
                            if($(this).find('#UDF3').attr("class") == 'selectBox')
                            {
                                vUDF3 =$(this).find('#UDF3 option:selected').text();
                            }
                            else{
                                vUDF3 = $(this).find('#UDF3').val();
                            }
                        }

                        if($(this).find('#UDF4') != null)
                        {
                            if($(this).find('#UDF4').attr("class") == 'selectBox')
                            {
                                vUDF4 = $(this).find('#UDF4 option:selected').text();
                            }
                            else{
                                vUDF4 = $(this).find('#UDF4').val();
                            }
                        }

                        if($(this).find('#UDF5') != null)
                        {
                            if($(this).find('#UDF5').attr("class") == 'selectBox')
                            {
                                vUDF5 = $(this).find('#UDF5 option:selected').text();
                            }
                            else{
                                vUDF5 = $(this).find('#UDF5').val();
                            }
                        }
                
                        ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////START
                            $.ajax({
                                "url": '@Url.Content("~/Pull/CheckValidPullData")',
                                data: { ID: 0, ItemGUID: vItemGUID, ProjectGUID: vProjectID, BinID: vBinID, PullCreditQuantity: (txtQty*QuickListPULLQty), PullCredit: vPullCreditText, TempPullQTY: (txtQty*QuickListPULLQty), UDF1 : vUDF1, UDF2 : vUDF2, UDF3 : vUDF3, UDF4 : vUDF4, UDF5 : vUDF5, RequisitionDetailID : "",WorkOrderDetailGUID :"@TempData["WorkOrderGUID"]"},
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {
                                    $('#DivLoading').hide();
                                    if (response.Status == "ok") {
                                        if (response.LocationMSG != "") {
                                            if(response.PSLimitExceed)
                                            {
                                                IsPSRedirectToReq = true;
                                                IsGlobalErrorMsgShow = true;
                                                IsQLSuccessfullyDone = false;
                                             return true;
                                            }
                                            else
                                            {
                                                IsPSRedirectToReq = false;
                                                IsGlobalErrorMsgShow = true;
                                                IsQLSuccessfullyDone = false;
                                               return true;
                                            }
                                        }                                        
                                    }
                                    else {
                                          IsPSRedirectToReq = false;
                                          IsGlobalErrorMsgShow = true;
                                          IsQLSuccessfullyDone = false;     
                                          return true;             
                                    }                        
                                    txxt.val(VspnDefaultPullQuantity);
                                },
                                error: function (response) {
                                        IsPSRedirectToReq = false;
                                        IsGlobalErrorMsgShow = true;
                                        IsQLSuccessfullyDone = false;      
                                       return true;                 
                                }
                            });
                        ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////END
                    }                      
                }
            });
            if(IsPSRedirectToReq)
            {
                $.modal.impl.close();
                $('#project-spend-limit-basic-modal-content').modal();
            }
            else if(IsGlobalErrorMsgShow)
            {
                $.modal.impl.close();
                $('#noramal-global-msg-QL-basic-modal-content').modal();
            }
            else
            {
                oTableItemModel.find("tbody tr").removeClass("row_selected").addClass("row_selected");
                setTimeout('AddSingleItemToPullList($("#btnPullAllQL"))',1000);
            }
    }
   
</script>
