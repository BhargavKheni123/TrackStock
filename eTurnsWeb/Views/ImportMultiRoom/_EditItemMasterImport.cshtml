@model ImportModuleModel
@{
    string[] arrcolumns = Model.arrcolumns;
    string CharCodeList = eTurnsWeb.Helper.CommonUtility.GetNotAllowCharList();
}
<tr>
    @if (arrcolumns.Count() > 0)
    {
        <th>
            @ResCommon.Status
        </th>
        <th>
            @ResCommon.Reason
        </th>
    }
    @if (arrcolumns.Contains("itemnumber"))
    {
        <th>
            <em>* </em>
            @ResItemMaster.ItemNumber
        </th>
    }
    @*@if (arrcolumns.Contains("link1"))
        {
            <th>
                @eTurns.DTO.ResItemMaster.Link1
            </th>
        }*@
    @if (arrcolumns.Contains("link2"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.Link2
        </th>
    }
    @if (arrcolumns.Contains("manufacturer"))
    {
        <th>
            @ResItemMaster.ManufacturerName
        </th>
    }
    @if (arrcolumns.Contains("manufacturernumber"))
    {
        <th>
            @ResItemMaster.ManufacturerNumber
        </th>
    }
    @if (arrcolumns.Contains("suppliername"))
    {
        <th>
            <em>* </em>
            @ResItemMaster.Supplier
        </th>
    }
    @if (arrcolumns.Contains("supplierpartno"))
    {
        <th>
            <em>* </em>
            @ResItemMaster.SupplierPartNo
        </th>
    }
    @if (arrcolumns.Contains("blanketordernumber"))
    {
        <th>
            @ResSupplierBlanketPODetails.BlanketPO
        </th>
    }
    @if (arrcolumns.Contains("upc"))
    {
        <th>
            @ResItemMaster.UPC
        </th>
    }
    @if (arrcolumns.Contains("unspsc"))
    {
        <th>
            @ResItemMaster.UNSPSC
        </th>
    }
    @if (arrcolumns.Contains("description"))
    {
        <th>
            @ResItemMaster.Description
        </th>
    }
    @if (arrcolumns.Contains("longdescription"))
    {
        <th>
            @ResItemMaster.LongDescription
        </th>
    }
    @if (arrcolumns.Contains("categoryname"))
    {
        <th>
            @ResCategoryMaster.Category
        </th>
    }
    @if (arrcolumns.Contains("glaccount"))
    {
        <th>
            @ResGLAccount.GLAccount
        </th>
    }
    @if (arrcolumns.Contains("uom"))
    {
        <th>
            <em>* </em>
            @ResUnitMaster.Unit
        </th>
    }
    @if (arrcolumns.Contains("costuom"))
    {
        <th>
            <em>* </em>
            @ResCostUOMMaster.CostUOM
        </th>
    }
    @if (arrcolumns.Contains("defaultreorderquantity"))
    {
        <th>
            <em>* </em>
            @ResItemMaster.DefaultReorderQuantity
        </th>

    }
    @if (arrcolumns.Contains("defaultpullquantity"))
    {
        <th>
            <em>* </em>
            @ResItemMaster.DefaultPullQuantity
        </th>
    }
    @if (arrcolumns.Contains("cost"))
    {
        <th>
            @ResItemMaster.Cost
        </th>
    }
    @if (arrcolumns.Contains("markup"))
    {
        <th>
            @ResItemMaster.Markup
        </th>
    }
    @if (arrcolumns.Contains("sellprice"))
    {
        <th>
            @ResItemMaster.SellPrice
        </th>
    }
    @if (arrcolumns.Contains("extendedcost"))
    {
        <th>
            @ResItemMaster.ExtendedCost
        </th>
    }
    @if (arrcolumns.Contains("leadtimeindays"))
    {
        <th>
            @ResItemMaster.LeadTimeInDays
        </th>
    }

    @*@if (arrcolumns.Contains("trend"))
        {
            <th>
                @ResItemMaster.Trend
            </th>
        }*@
    @if (arrcolumns.Contains("taxable"))
    {
        <th>
            @ResItemMaster.Taxable
        </th>
    }
    @if (arrcolumns.Contains("consignment"))
    {
        <th>
            @ResItemMaster.Consignment
        </th>
    }
    @if (arrcolumns.Contains("stagedquantity"))
    {
        <th>
            @ResItemMaster.StagedQuantity
        </th>
    }
    @if (arrcolumns.Contains("intransitquantity"))
    {
        <th>
            @ResItemMaster.InTransitquantity
        </th>
    }
    @if (arrcolumns.Contains("onorderquantity"))
    {
        <th>
            @ResItemMaster.OnOrderQuantity
        </th>
    }
    @if (arrcolumns.Contains("ontransferquantity"))
    {
        <th>
            @ResItemMaster.OnTransferQuantity
        </th>
    }
    @if (arrcolumns.Contains("suggestedorderquantity"))
    {
        <th>
            @ResItemMaster.SuggestedOrderQuantity
        </th>
    }
    @if (arrcolumns.Contains("requisitionedquantity"))
    {
        <th>
            @ResItemMaster.RequisitionedQuantity
        </th>
    }
    @if (arrcolumns.Contains("averageusage"))
    {
        <th>
            @ResItemMaster.AverageUsage
        </th>
    }
    @if (arrcolumns.Contains("turns"))
    {
        <th>
            @ResItemMaster.Turns
        </th>
    }
    @if (arrcolumns.Contains("onhandquantity"))
    {
        <th>
            @ResItemMaster.OnHandQuantity
        </th>
    }
    @if (arrcolumns.Contains("isitemlevelminmaxqtyrequired"))
    {
        <th>
            <em>* </em>
            @ResItemMaster.IsItemLevelMinMaxQtyRequired
        </th>
    }
    @if (arrcolumns.Contains("criticalquantity"))
    {
        <th>
            @ResItemMaster.CriticalQuantity
        </th>
    }
    @if (arrcolumns.Contains("minimumquantity"))
    {
        <th>
            @ResItemMaster.MinimumQuantity
        </th>
    }
    @if (arrcolumns.Contains("maximumquantity"))
    {
        <th>
            @ResItemMaster.MaximumQuantity
        </th>
    }
    @if (arrcolumns.Contains("weightperpiece"))
    {
        <th>
            @ResItemMaster.WeightPerPiece
        </th>
    }
    @if (arrcolumns.Contains("itemuniquenumber"))
    {
        <th>
            @ResItemMaster.ItemUniqueNumber
        </th>
    }
    @if (arrcolumns.Contains("istransfer"))
    {
        <th>
            @ResItemMaster.IsTransfer
        </th>
    }
    @if (arrcolumns.Contains("ispurchase"))
    {
        <th>
            @ResItemMaster.IsPurchase
        </th>
    }
    @if (arrcolumns.Contains("inventrylocation"))
    {
        <th>
            <em>* </em>
            @ResBin.BinNumber
        </th>
    }
    @if (arrcolumns.Contains("inventoryclassification"))
    {
        <th>
            @ResItemMaster.InventoryClassification
        </th>
    }
    @if (arrcolumns.Contains("serialnumbertracking"))
    {
        <th>
            @ResItemMaster.SerialNumberTracking
        </th>
    }
    @if (arrcolumns.Contains("lotnumbertracking"))
    {
        <th>
            @ResItemMaster.LotNumberTracking
        </th>
    }
    @if (arrcolumns.Contains("datecodetracking"))
    {
        <th>
            @ResItemMaster.DateCodeTracking
        </th>
    }
    @if (arrcolumns.Contains("itemtype"))
    {
        <th>
            <em>* </em>
            @ResItemMaster.ItemType
        </th>
    }
    @if (arrcolumns.Contains("imagepath"))
    {
        <th>
            @ResItemMaster.ImagePath
        </th>
    }
    @if (arrcolumns.Contains("udf1"))
    {
        <th>
            @ResItemMaster.UDF1
        </th>
    }
    @if (arrcolumns.Contains("udf2"))
    {
        <th>
            @ResItemMaster.UDF2
        </th>
    }
    @if (arrcolumns.Contains("udf3"))
    {
        <th>
            @ResItemMaster.UDF3
        </th>
    }
    @if (arrcolumns.Contains("udf4"))
    {
        <th>
            @ResItemMaster.UDF4
        </th>
    }
    @if (arrcolumns.Contains("udf5"))
    {
        <th>
            @ResItemMaster.UDF5
        </th>
    }
    @if (arrcolumns.Contains("islotserialexpirycost"))
    {
        <th>
            @ResItemMaster.IsLotSerialExpiryCost
        </th>
    }
    @if (arrcolumns.Contains("isbuildbreak"))
    {
        <th>
            @ResItemMaster.IsBuildBreak
        </th>
    }
    @if (arrcolumns.Contains("enforcedefaultpullquantity"))
    {
        <th>
            @ResItemMaster.PullQtyScanOverride
        </th>
    }
    @if (arrcolumns.Contains("enforcedefaultreorderquantity"))
    {
        <th>
            @ResItemMaster.IsEnforceDefaultReorderQuantity
        </th>
    }
    @if (arrcolumns.Contains("isautoinventoryclassification"))
    {
        <th>
            @ResItemMaster.IsAutoInventoryClassification
        </th>
    }
    @if (arrcolumns.Contains("trendingsetting"))
    {
        <th>
            @ResItemMaster.TrendingSetting
        </th>
    }
    @if (arrcolumns.Contains("ispackslipmandatoryatreceive"))
    {
        <th>
            @ResItemMaster.IsPackslipMandatoryAtReceive
        </th>
    }
    @if (arrcolumns.Contains("itemimageexternalurl"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.ItemImageExternalURL
        </th>
    }
    @if (arrcolumns.Contains("itemdocexternalurl"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.ItemDocExternalURL
        </th>
    }
    @if (arrcolumns.Contains("isdeleted"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.IsDeleted
        </th>
    }
    @if (arrcolumns.Contains("itemlink2externalurl"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.ItemLink2ExternalURL
        </th>
    }
    @if (arrcolumns.Contains("isactive"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.IsActive
        </th>
    }
    @if (arrcolumns.Contains("peritemcost"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.PerItemCost
        </th>
    }
    @if (arrcolumns.Contains("outtransferquantity"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.OutTransferQuantity
        </th>
    }
    @if (arrcolumns.Contains("udf6"))
    {
        <th>
            @ResItemMaster.UDF6
        </th>
    }
    @if (arrcolumns.Contains("udf7"))
    {
        <th>
            @ResItemMaster.UDF7
        </th>
    }
    @if (arrcolumns.Contains("udf8"))
    {
        <th>
            @ResItemMaster.UDF8
        </th>
    }
    @if (arrcolumns.Contains("udf9"))
    {
        <th>
            @ResItemMaster.UDF9
        </th>
    }
    @if (arrcolumns.Contains("udf10"))
    {
        <th>
            @ResItemMaster.UDF10
        </th>
    }
    @if (arrcolumns.Contains("isallowordercostuom"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.IsAllowOrderCostuom
        </th>
    }
    @if (arrcolumns.Contains("elabelkey"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.eLabelKey
        </th>
    }
    @if (arrcolumns.Contains("enrichedproductdata"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.EnrichedProductData
        </th>
    }
    @if (arrcolumns.Contains("enhanceddescription"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.EnhancedDescription
        </th>
    }
</tr>
<script type="text/javascript">


    if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.EditItemMaster)') {


        $(function (event) {
            //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
            if ('@arrcolumns.Count()' > 0) {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                        var forcol = "#000000";
                        var bodcol = "#DDD";
                        if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                            forcol = "Red";
                            bodcol = "Red";
                        }

                        else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                            forcol = "Green";
                            bodcol = "Green";
                        }

                        // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                        return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason;//.substring(0, 255);
                        return "<span id='Reason'  style='width:450px;'>" + tempUDF5 + "</span>"
                    }
                });
            }
            ColumnObject.push({
                "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                "fnRender": function (obj, val) {
                    var tempDataPullQnt = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 100);
                    return '<input type="text" value="' + tempDataPullQnt + '"  maxLength="100" onfocusout="return checkRestrictedSpecialCharacters(this);" onblur="return ValidateValueWithDataType();" class="importtext-box" id="aItemNumber_' + obj.aData.ID + '" style="width:300px;" />' + "<span id='ItemID' style='display:none'>" + obj.aData.ID + "</span>"
                }
            });
            @*if ('@arrcolumns.Contains("link1")') {

                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        return "<input type='text' maxLength='128'  value='" + obj.aData.Link1 + "'  class='importtext-box' id='aLink1_" + obj.aData.ID + "' />"
                    }
                });
            }*@
            if ('@arrcolumns.Contains("link2")') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        return "<input type='text' maxLength='128'  value='" + obj.aData.Link2 + "' class='importtext-box' id='aLink2_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("manufacturer")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempManufacturer = obj.aData.ManufacturerName == null ? "" : obj.aData.ManufacturerName.substring(0, 128);
                        return "<input type='text' value='" + tempManufacturer + "'  maxLength='128' onfocusout='return checkRestrictedSpecialCharacters(this);' onblur='return ValidateValueWithDataType(this);' class='importtext-box' id='aManufacturer_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("manufacturernumber")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempManufacturerNumber = obj.aData.ManufacturerNumber == null ? "" : obj.aData.ManufacturerNumber.substring(0, 50);
                        return "<input type='text' value='" + tempManufacturerNumber + "' onfocusout='return checkRestrictedSpecialCharacters(this);'  maxLength='50' onblur='return ValidateValueWithDataType(this);' class='importtext-box' id='aManufacturerNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("suppliername")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempSupplierName = obj.aData.SupplierName == null ? "" : obj.aData.SupplierName.substring(0, 150);
                        return "<input type='text' value='" + tempSupplierName + "'  maxLength='150' onfocusout='return checkRestrictedSpecialCharacters(this);'  onblur='return ValidateValueWithDataType(this);'  class='importtext-box' id='aSupplierName_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("supplierpartno")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempSupplierPartNo = obj.aData.SupplierPartNo == null ? "" : obj.aData.SupplierPartNo.substring(0, 50);
                        return "<input type='text' value='" + tempSupplierPartNo + "' onfocusout='return checkRestrictedSpecialCharacters(this);'  onblur='return ValidateValueWithDataType(this);' maxLength='50' class='importtext-box' id='aSupplierPartNo_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("blanketordernumber")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempBlanketOrderNumber = obj.aData.BlanketOrderNumber == null ? "" : obj.aData.BlanketOrderNumber.substring(0, 255);
                        return "<input type='text' value='" + tempBlanketOrderNumber + "'  maxLength='255'  onblur='return ValidateValueWithDataType(this);'  class='importtext-box' id='aBlanketOrderNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("upc")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUPC = obj.aData.UPC == null ? "" : obj.aData.UPC.substring(0, 20);
                        return "<input type='text' value='" + tempUPC + "'  maxLength='20' onfocusout='return checkRestrictedSpecialCharacters(this);' class='importtext-box' id='aUPC_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("unspsc")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUNSPSC = obj.aData.UNSPSC == null ? "" : obj.aData.UNSPSC.substring(0, 20);
                        return "<input type='text' value='" + tempUNSPSC + "'  maxLength='20' onfocusout='return checkRestrictedSpecialCharacters(this);' class='importtext-box' id='aUNSPSC_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("description")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempDescription = obj.aData.Description == null ? "" : obj.aData.Description.substring(0, 500);
                        return "<input type='text' value='" + tempDescription + "'  maxLength='500' class='importtext-box' id='aDescription_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("longdescription")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempLongDescription = obj.aData.LongDescription == null ? "" : obj.aData.LongDescription.substring(0, 2000);
                        return "<input type='text' value='" + tempLongDescription + "' maxLength='2000' onfocusout='return checkRestrictedSpecialCharacters(this);'  class='importtext-box' id='aLongDescription_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("categoryname")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempCategoryName = obj.aData.CategoryName == null ? "" : obj.aData.CategoryName.substring(0, 128);
                        return "<input type='text' value='" + tempCategoryName + "'  maxLength='128' onfocusout='return checkRestrictedSpecialCharacters(this);' class='importtext-box' id='aCategoryName_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("glaccount")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempGLAccount = obj.aData.GLAccount == null ? "" : obj.aData.GLAccount.substring(0, 128);
                        return "<input type='text' value='" + tempGLAccount + "'  maxLength='128' onfocusout='return checkRestrictedSpecialCharacters(this);' class='importtext-box' id='aGLAccount_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("uom")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUOM = obj.aData.Unit == null ? "" : obj.aData.Unit.substring(0, 128);
                        return "<input type='text' value='" + tempUOM + "' maxLength='128' onfocusout='return checkRestrictedSpecialCharacters(this);'  onblur='return ValidateValueWithDataType(this);' class='importtext-box' id='aUOM_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("costuom")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempCostUOM = obj.aData.CostUOMName == null ? "" : obj.aData.CostUOMName;
                        return "<input type='text' value='" + tempCostUOM + "' onfocusout='return checkRestrictedSpecialCharacters(this);' class='importtext-box' id='aCostUOM_" + obj.aData.ID + "' style='width:100px;'  />"
                    }

                });
            }
            if ('@arrcolumns.Contains("defaultreorderquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var DefaultReorderQuantity = obj.aData.DefaultReorderQuantity == null ? "" : obj.aData.DefaultReorderQuantity;
                        return "<input type='text' value='" + DefaultReorderQuantity + "'  onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aDefaultReorderQuantity_" + obj.aData.ID + "' style='width:100px;'  />"

                    }
                });

            }
            if ('@arrcolumns.Contains("defaultpullquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var DefaultPullQuantity = obj.aData.DefaultPullQuantity == null ? "" : obj.aData.DefaultPullQuantity;
                        return "<input type='text' value='" + DefaultPullQuantity + "'  onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aDefaultPullQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });

            }
            if ('@arrcolumns.Contains("cost")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var Cost = obj.aData.Cost == null ? "" : obj.aData.Cost;
                        return "<input type='text' value='" + Cost + "'    class='numericDecimalinput importtext-box' id='aCost_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });

            }
            if ('@arrcolumns.Contains("markup")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var Markup = obj.aData.Markup == null ? "" : obj.aData.Markup;
                        return "<input type='text' value='" + Markup + "'    class='numericDecimalinput importtext-box' id='aMarkup_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("sellprice")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var SellPrice = obj.aData.SellPrice == null ? "" : obj.aData.SellPrice;
                        return "<input type='text' value='" + SellPrice + "'   class='numericDecimalinput importtext-box' id='aSellPrice_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("extendedcost")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var ExtendedCost = obj.aData.DispExtendedCost == null ? "" : obj.aData.DispExtendedCost;
                        return "<span id='aExtendedCost_" + obj.aData.ID + "'>" + ExtendedCost + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("leadtimeindays")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var LeadTimeInDays = obj.aData.LeadTimeInDays == null ? "" : obj.aData.LeadTimeInDays;
                        return "<input type='text' value='" + LeadTimeInDays + "'  onkeypress='return isNumberKey(event);'  class='numericDecimalinput importtext-box' id='aLeadTimeInDays_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }

            @*if ('@arrcolumns.Contains("trend")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var Trend = obj.aData.Trend == null ? "false" : obj.aData.Trend;
                        if (Trend != "" || Trend == "true") {
                            Trend = "checked=\"checked\""
                        }
                        else { Trend = ""; }
                        return "<input type='checkbox' " + Trend + " id='aTrend_" + obj.aData.ID + "'  />"
                    }
                });
            }*@
            if ('@arrcolumns.Contains("taxable")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var Taxable = obj.aData.Taxable == null ? "false" : obj.aData.Taxable;
                        if (Taxable != "" || Taxable == "true") {
                            Taxable = "checked=\"checked\""
                        }
                        else { Taxable = ""; }
                        return "<input type='checkbox' " + Taxable + " id='aTaxable_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("consignment")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var Consignment = obj.aData.Consignment == null ? "false" : obj.aData.Consignment;
                        if (Consignment != "" || Consignment == "true") {
                            Consignment = "checked=\"checked\""
                        }
                        else { Consignment = ""; }
                        return "<input type='checkbox' " + Consignment + " id='aConsignment_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("stagedquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var StagedQuantity = obj.aData.DispStagedQuantity == null ? "" : obj.aData.DispStagedQuantity;
                        return "<span id='aStagedQuantity_" + obj.aData.ID + "'>" + StagedQuantity + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("intransitquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var InTransitquantity = obj.aData.DispInTransitquantity == null ? "" : obj.aData.DispInTransitquantity;
                        return "<span id='aIn_Transitquantity_" + obj.aData.ID + "'>" + InTransitquantity + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("onorderquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var OnOrderQuantity = obj.aData.DispOnOrderQuantity == null ? "" : obj.aData.DispOnOrderQuantity;
                        return "<span id='aOnOrderQuantity_" + obj.aData.ID + "'>" + OnOrderQuantity + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("ontransferquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var OnTransferQuantity = obj.aData.DispOnTransferQuantity == null ? "" : obj.aData.DispOnTransferQuantity;
                        return "<span id='aOnTransferQuantity_" + obj.aData.ID + "'>" + OnTransferQuantity + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("suggestedorderquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var SuggestedOrderQuantity = obj.aData.DispSuggestedOrderQuantity == null ? "" : obj.aData.DispSuggestedOrderQuantity;
                        return "<span id='aSuggestedOrderQuantity_" + obj.aData.ID + "'>" + SuggestedOrderQuantity + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("requisitionedquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var RequisitionedQuantity = obj.aData.DispRequisitionedQuantity == null ? "" : obj.aData.DispRequisitionedQuantity;
                        return "<span id='aRequisitionedQuantity_" + obj.aData.ID + "'>" + RequisitionedQuantity + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("averageusage")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var AverageUsage = obj.aData.DispAverageUsage == null ? "" : obj.aData.DispAverageUsage;
                        return "<span id='aAverageUsage_" + obj.aData.ID + "'>" + AverageUsage + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("turns")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var Turns = obj.aData.DispTurns == null ? "" : obj.aData.DispTurns;
                        return "<span id='aTurns_" + obj.aData.ID + "'>" + Turns + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("onhandquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var OnHandQuantity = obj.aData.OnHandQuantity == null ? "" : obj.aData.OnHandQuantity;
                        return "<input type='text' onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' value='" + OnHandQuantity + "' id='aOn_HandQuantity_" + obj.aData.ID + "' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("isitemlevelminmaxqtyrequired")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var ItemLevelMinMaxQtyRequired = obj.aData.IsItemLevelMinMaxQtyRequired == null ? "false" : obj.aData.IsItemLevelMinMaxQtyRequired;
                        if (ItemLevelMinMaxQtyRequired != "" || ItemLevelMinMaxQtyRequired == "true") {
                            ItemLevelMinMaxQtyRequired = "checked=\"checked\""
                        }
                        else { ItemLevelMinMaxQtyRequired = ""; }
                        return "<input type='checkbox' " + ItemLevelMinMaxQtyRequired + " id='aItemLevelMinMaxQtyRequired_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("criticalquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var CriticalQuantity = obj.aData.CriticalQuantity == null ? "" : obj.aData.CriticalQuantity;
                        return "<input type='text' value='" + CriticalQuantity + "' maxLength='10'  onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aCriticalQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("minimumquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var MinimumQuantity = obj.aData.MinimumQuantity == null ? "" : obj.aData.MinimumQuantity;
                        return "<input type='text' value='" + MinimumQuantity + "' maxLength='10' onkeypress='return isNumberKey(event);'   onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aMinimumQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("maximumquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var MaximumQuantity = obj.aData.MaximumQuantity == null ? "" : obj.aData.MaximumQuantity;
                        return "<input type='text' value='" + MaximumQuantity + "' maxLength='10' onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aMaximumQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("weightperpiece")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var WeightPerPiece = obj.aData.WeightPerPiece == null ? "" : obj.aData.WeightPerPiece;
                        return "<input type='text' value='" + WeightPerPiece + "' onkeypress='return isNumberKey(event);'   class='numericDecimalinput importtext-box' id='aWeightPerPiece_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("itemuniquenumber")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var ItemUniqueNumber = obj.aData.ItemUniqueNumber == null ? "" : obj.aData.ItemUniqueNumber.substring(0, 10);
                        return "<input type='text' value='" + ItemUniqueNumber + "'  maxLength='10' class='importtext-box' id='aItemUniqueNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("istransfer")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var IsTransfer = obj.aData.IsTransfer == null ? "" : obj.aData.IsTransfer;
                        if (IsTransfer != "" || IsTransfer == "true") {
                            IsTransfer = "checked=\"checked\""
                        }
                        else { IsTransfer = ""; }
                        return "<input type='checkbox'" + IsTransfer + "id='aIsTransfer_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("ispurchase")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var IsPurchase = obj.aData.IsPurchase == null ? "" : obj.aData.IsPurchase;
                        if (IsPurchase != "" || IsPurchase == "true") {
                            IsPurchase = "checked=\"checked\""
                        }
                        else { IsPurchase = ""; }
                        return "<input type='checkbox'" + IsPurchase + "id='aIsPurchase_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("inventrylocation")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var InventryLocation = obj.aData.InventryLocation == null ? "" : obj.aData.InventryLocation.substring(0, 128);
                        return "<input type='text' value='" + InventryLocation + "'  maxLength='128' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aInventryLocation_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("inventoryclassification")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var InventoryClassification = obj.aData.InventoryClassificationName == null ? "" : obj.aData.InventoryClassificationName;
                        return "<input type='text' value='" + InventoryClassification + "'    class='importtext-box' id='aInventoryClassification_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("serialnumbertracking")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var SerialNumberTracking = obj.aData.SerialNumberTracking == null ? "" : obj.aData.SerialNumberTracking;
                        if (SerialNumberTracking != "" || SerialNumberTracking == "true") {
                            SerialNumberTracking = "checked=\"checked\""
                        }
                        else { SerialNumberTracking = ""; }
                        return "<input type='checkbox'" + SerialNumberTracking + "id='aSerialNumberTracking_" + obj.aData.ID + "' onchange='CheckLotSerial(this);' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("lotnumbertracking")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var LotNumberTracking = obj.aData.LotNumberTracking == null ? "" : obj.aData.LotNumberTracking;
                        if (LotNumberTracking != "" || LotNumberTracking == "true") {
                            LotNumberTracking = "checked=\"checked\""
                        }
                        else { LotNumberTracking = ""; }
                        return "<input type='checkbox'" + LotNumberTracking + " id='aLotNumberTracking_" + obj.aData.ID + "' onchange='CheckLotSerial(this);'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("datecodetracking")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var DateCodeTracking = obj.aData.DateCodeTracking == null ? "" : obj.aData.DateCodeTracking;
                        if (DateCodeTracking != "" || DateCodeTracking == "true") {
                            DateCodeTracking = "checked=\"checked\""
                        }
                        else { DateCodeTracking = ""; }
                        return "<input type='checkbox'" + DateCodeTracking + "id='aDateCodeTracking_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("itemtype")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var ItemTypeName = obj.aData.ItemTypeName == null ? "" : obj.aData.ItemTypeName.substring(0, 10);
                        return "<input type='text' value='" + ItemTypeName + "'  onblur='return ValidateValueWithDataType(this);' maxLength='10' class='importtext-box' id='aItemType_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("imagepath")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var ImagePath = obj.aData.ImagePath == null ? "" : obj.aData.ImagePath.substring(0, 255);

                        return "<input type='text' value='" + ImagePath + "' maxLength='255'  class='importtext-box' id='aImagePath_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf1")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                        return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf2")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                        return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf3")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                        return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf4")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                        return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf5")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                        return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("islotserialexpirycost")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var IsLotSerialExpiryCost = obj.aData.IsLotSerialExpiryCost == null ? "" : obj.aData.IsLotSerialExpiryCost.substring(0, 10);
                        return "<input type='text' value='" + IsLotSerialExpiryCost + "'  maxLength='10' class='importtext-box' id='aIsLotSerialExpiryCost_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });

            }

            if ('@arrcolumns.Contains("isbuildbreak")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var Isbuildbreak = obj.aData.IsBuildBreak == null ? "" : obj.aData.IsBuildBreak;
                        if (Isbuildbreak != "" || Isbuildbreak == "true") {
                            Isbuildbreak = "checked=\"checked\""
                        }
                        else { Isbuildbreak = ""; }
                        return "<input type='checkbox'" + Isbuildbreak + "id='aIsBuildBreak_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("enforcedefaultpullquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var IsPullQtyScanOverride = obj.aData.PullQtyScanOverride == null ? "" : obj.aData.PullQtyScanOverride;
                        if (IsPullQtyScanOverride != "" || IsPullQtyScanOverride == "true") {
                            IsPullQtyScanOverride = "checked=\"checked\""
                        }
                        else { IsPullQtyScanOverride = ""; }
                        return "<input type='checkbox'" + IsPullQtyScanOverride + "id='aPullQtyScanOverride_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("enforcedefaultreorderquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var IsEnforceDefaultReorderQuantity = obj.aData.IsEnforceDefaultReorderQuantity == null ? "" : obj.aData.IsEnforceDefaultReorderQuantity;
                        if (IsEnforceDefaultReorderQuantity != "" || IsEnforceDefaultReorderQuantity == "true") {
                            IsEnforceDefaultReorderQuantity = "checked=\"checked\""
                        }
                        else { IsEnforceDefaultReorderQuantity = ""; }
                        return "<input type='checkbox'" + IsEnforceDefaultReorderQuantity + "id='aEnforceDefaultReorderQuantity_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("isautoinventoryclassification")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var IsAutoInventoryClassification = obj.aData.IsAutoInventoryClassification == null ? "" : obj.aData.IsAutoInventoryClassification;
                        if (IsAutoInventoryClassification != "" || IsAutoInventoryClassification == "true") {
                            IsAutoInventoryClassification = "checked=\"checked\""
                        }
                        else { IsAutoInventoryClassification = ""; }
                        return "<input type='checkbox'" + IsAutoInventoryClassification + "id='aIsAutoInventoryClassification_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("trendingsetting")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var TrendingSettingName = obj.aData.TrendingSettingName == null ? "" : obj.aData.TrendingSettingName.substring(0, 255);
                        return "<input type='text' value='" + TrendingSettingName + "'  maxLength='255'  class='importtext-box'  id='atrendingsetting_" + obj.aData.ID + "' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("ispackslipmandatoryatreceive")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var IsPackslipMandatoryAtReceive = obj.aData.IsPackslipMandatoryAtReceive == null ? "" : obj.aData.IsPackslipMandatoryAtReceive;
                        if (IsPackslipMandatoryAtReceive != "" || IsPackslipMandatoryAtReceive == "true") {
                            IsPackslipMandatoryAtReceive = "checked=\"checked\""
                        }
                        else { IsPackslipMandatoryAtReceive = ""; }
                        return "<input type='checkbox'" + IsPackslipMandatoryAtReceive + "id='aIsPackslipMandatoryAtReceive_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("itemimageexternalurl")') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        return "<input type='text' maxLength='500'  value='" + obj.aData.ItemImageExternalURL + "' class='importtext-box' id='aItemImageExternalURL_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("itemdocexternalurl")') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        return "<input type='text' maxLength='500'  value='" + obj.aData.ItemDocExternalURL + "' class='importtext-box' id='aItemDocExternalURL_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("isdeleted")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var ItemIsDeleted = obj.aData.IsDeleted == null ? "" : obj.aData.IsDeleted;
                        if (ItemIsDeleted != "" || ItemIsDeleted == "true") {
                            ItemIsDeleted = "checked=\"checked\""
                        }
                        else { ItemIsDeleted = ""; }
                        return "<input type='checkbox'" + ItemIsDeleted + "id='aItemIsDeleted_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("itemlink2externalurl")') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        return "<input type='text' maxLength='128'  value='" + obj.aData.ItemLink2ExternalURL + "' class='importtext-box' id='aItemLink2ExternalURL_" + obj.aData.ID + "'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("isactive")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var ItemIsActive = obj.aData.IsActive == null ? "" : obj.aData.IsActive;
                        if (ItemIsActive != "" || ItemIsActive == "true") {
                            ItemIsActive = "checked=\"checked\""
                        }
                        else { ItemIsActive = ""; }
                        return "<input type='checkbox'" + ItemIsActive + "id='aItemIsActive_" + obj.aData.ID + "'  />"
                    }
                });
            }

            if ('@arrcolumns.Contains("peritemcost")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var PerItemCost = obj.aData.PerItemCost == null ? "" : obj.aData.PerItemCost;
                        return "<input type='text' value='" + PerItemCost + "' onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aPerItemCost_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("outtransferquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var OutTransferQuantity = obj.aData.OutTransferQuantity == null ? "" : obj.aData.OutTransferQuantity;
                        return "<input type='text' value='" + OutTransferQuantity + "' onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aOutTransferQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf6")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF6 = obj.aData.UDF6 == null ? "" : obj.aData.UDF6.substring(0, 255);
                        return "<input type='text' value='" + tempUDF6 + "'  maxLength='255'  class='importtext-box' id='aUDF6' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf7")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF7 = obj.aData.UDF7 == null ? "" : obj.aData.UDF7.substring(0, 255);
                        return "<input type='text' value='" + tempUDF7 + "'  maxLength='255'  class='importtext-box'  id='aUDF7' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf8")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF8 = obj.aData.UDF8 == null ? "" : obj.aData.UDF8.substring(0, 255);
                        return "<input type='text' value='" + tempUDF8 + "'  maxLength='255'  class='importtext-box'  id='aUDF8' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf9")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF9 = obj.aData.UDF9 == null ? "" : obj.aData.UDF9.substring(0, 255);
                        return "<input type='text' value='" + tempUDF9 + "'  maxLength='255'  class='importtext-box'  id='aUDF9' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf10")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF10 = obj.aData.UDF10 == null ? "" : obj.aData.UDF10.substring(0, 255);
                        return "<input type='text' value='" + tempUDF10 + "'  maxLength='255'  class='importtext-box'  id='aUDF10' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("isallowordercostuom")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {

                        var ItemIsAllowOrderCostuom = obj.aData.IsAllowOrderCostuom == null ? "" : obj.aData.IsAllowOrderCostuom;
                        if (ItemIsAllowOrderCostuom != "" || ItemIsAllowOrderCostuom == "true") {
                            ItemIsAllowOrderCostuom = "checked=\"checked\""
                        }
                        else { ItemIsAllowOrderCostuom = ""; }
                        return "<input type='checkbox'" + ItemIsAllowOrderCostuom + "id='aItemIsAllowOrderCostuom_" + obj.aData.ID + "'  />"
                    }
                });
            }
             if ('@arrcolumns.Contains("elabelkey")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var eLabelKey = obj.aData.eLabelKey == null ? "" : obj.aData.eLabelKey.substring(0, 255);
                        return "<input type='text' value='" + eLabelKey + "'  maxLength='255'  class='importtext-box'  id='aeLabelKey_" + obj.aData.ID + "' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("enrichedproductdata")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var EnrichedProductData = obj.aData.EnrichedProductData == null ? "" : obj.aData.EnrichedProductData.substring(0, 255);
                        return "<input type='text' value='" + EnrichedProductData + "'  maxLength='255'  class='importtext-box'  id='aEnrichedProductData_" + obj.aData.ID + "' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("enhanceddescription")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var EnhancedDescription = obj.aData.EnhancedDescription == null ? "" : obj.aData.EnhancedDescription.substring(0, 255);
                        return "<input type='text' value='" + EnhancedDescription + "'  maxLength='255'  class='importtext-box'  id='aEnhancedDescription_" + obj.aData.ID + "' style='width:100px;' />"
                    }
                });
            }
            UpdateURL = '@Url.Content("~/ImportMultiRoom/UpdateDataItemSession")';
        });

    }

     $(document).ready(function () {

    var charCode = '@CharCodeList';
    var intNotAllowededCode = charCode.split(',');
    if (intNotAllowededCode != null && intNotAllowededCode.length > 0) {
        specialKeys = new Array();
        for (i = 0; i < intNotAllowededCode.length; i++) {
            specialKeys.push(parseInt(intNotAllowededCode[i])); //Backspace
        }
        }

    });


    function checkRestrictedCharchterList() {
        if ($("#myImportDataTable") !== 'undefined') {
            var i = 0;
            $("#myImportDataTable tbody tr").each(function () {
                if ($(this).find("#aItemNumber_" + i) != undefined && $(this).find("#aItemNumber_" + i).length > 0 && $(this).find("#aItemNumber_" + i).val().length > 0) {
                    RestrictedSpecialCharacters($(this).find("#aItemNumber_" + i));
                }
                if ($(this).find("#aUPC_" + i) != undefined && $(this).find("#aUPC_" + i).length > 0 && $(this).find("#aUPC_" + i).val().length > 0) {
                    RestrictedSpecialCharacters($(this).find("#aUPC_" + i));
                }
                if ($(this).find("#aUNSPSC_" + i) != undefined && $(this).find("#aUNSPSC_" + i).length > 0 && $(this).find("#aUNSPSC_" + i).val().length > 0) {
                    RestrictedSpecialCharacters($(this).find("#aUNSPSC_" + i));
                }
                if ($(this).find("#aDescription_" + i) != undefined && $(this).find("#aDescription_" + i).length > 0 && $(this).find("#aDescription_" + i).val().length > 0) {
                    RestrictedSpecialCharacters($(this).find("#aDescription_" + i));
                }
                if ($(this).find("#aLongDescription_" + i) != undefined && $(this).find("#aLongDescription_" + i).length > 0 && $(this).find("#aLongDescription_" + i).val().length > 0) {
                    RestrictedSpecialCharacters($(this).find("#aLongDescription_" + i));
                }
                if ($(this).find("#aManufacturer_" + i) != undefined && $(this).find("#aManufacturer_" + i).length > 0 && $(this).find("#aManufacturer_" + i).val().length > 0) {
                    RestrictedSpecialCharacters($(this).find("#aManufacturer_" + i));
                }
                if ($(this).find("#aManufacturerNumber_" + i) != undefined && $(this).find("#aManufacturerNumber_" + i).length > 0 && $(this).find("#aManufacturerNumber_" + i).val().length > 0) {
                    RestrictedSpecialCharacters($(this).find("#aManufacturerNumber_" + i));
                }
                if ($(this).find("#aSupplierName_" + i) != undefined && $(this).find("#aSupplierName_" + i).length > 0 && $(this).find("#aSupplierName_" + i).val().length > 0) {
                    RestrictedSpecialCharacters($(this).find("#aSupplierName_" + i));
                }
            });
        }
    }

    function checkRestrictedSpecialCharacters(ctrl) {
        RestrictedSpecialCharacters(ctrl);
    }


</script>