@model eTurns.DTO.UserMasterDTO
@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";   
    
}
<div class="userHead">
    @{  
        bool isUpdate = true;// eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        bool isInsert = true;//eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        bool DisableControl = false;
        if (Model != null && Model.ID == eTurnsWeb.Helper.SessionHelper.UserID)
        {
            DisableControl = true;
        }
    }
    @using (Ajax.BeginForm("UserSave", "EturnsMaster", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmUser" }))
    {
        @Html.ValidationSummary(true)                     
        @Html.AntiForgeryToken()
        if (Model.ID != 0)
        {
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.CreatedDate)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    : <span>@(Model.UpdatedDate)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        } 
        
        <div class="mainForm">
            @Html.Hidden("hdnDisableControl", DisableControl)
            <div class="editorForm">
                <h4>
                    @ResUserMaster.UserDetails</h4>
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.UserName)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.UserName, new { id = "txtUserName", @class = "text-box", maxlength = 128 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UserName)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.RoleID, new { id = "hdnRoleID" })
                            @Html.HiddenFor(model => model.SelectedModuleIDs, new { id = "hdnSelectedModuleList" })
                            @Html.HiddenFor(model => model.SelectedNonModuleIDs, new { id = "hdnSelectedNonModuleList" })
                            @Html.HiddenFor(model => model.SelectedDefaultSettings, new { id = "hdnSelectedDefaultSettings" })
                            @Html.HiddenFor(model => model.SelectedRoomAccessValue, new { id = "hdnSelectedRoomAccessValue" })
                            @Html.HiddenFor(model => model.SelectedRoomReplanishmentValue, new { id = "hdnSelectedRoomReplanishmentValue" })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Password)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.PasswordFor(model => model.Password, new { id = "txtPassword", @class = "text-box", maxlength = 50 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Password)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ConfirmPassword)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.PasswordFor(model => model.ConfirmPassword, new { id = "txtConfirmPassword", @class = "text-box", maxlength = 50 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ConfirmPassword)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Phone)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Phone, new { id = "txtPhone", @class = "text-box", maxlength = 50 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Phone)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Email)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Email, new { id = "txtEmail", @class = "text-box", maxlength = 50 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Email)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @ResUserMaster.Role
                        </div>
                        <div class="editor-field">
                            <select id="ddlRole" name="example-basic" size="1" class="text-box" style="width: 250px;">
                            </select>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                            @if (isInsert == true && Model.ID == 0)
                            {                            
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />                            
                            }
                            else if (isUpdate == true && Model.ID != eTurnsWeb.Helper.SessionHelper.UserID)
                            {
                            
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                            }
                        </div>
                    </li>
                </ul>
            </div>
        </div>              
        <div id="CreateRolePermissionDIV">
            @Html.Partial("EturnsMaster/_CreateUserPermission", Model.UserwiseRoomsAccessDetail)
        </div>
        <br />
          
    }
</div>
@Html.Partial("_RequiredMessages")

<script language="javascript" type="text/javascript">
    //--------- Variables ----------
    var hdnSelectedRoomReplanishmentValue = $("#hdnSelectedRoomReplanishmentValue");
    var hdnSelectedRoomAccessValue = $("#hdnSelectedRoomAccessValue");
    var hdnRoleID = $("#hdnRoleID")
    var hiddenID = $("#hiddenID")

    var SelectedModuleList = new Array();
    var SelectedNonModuleList = new Array();
    var SelectedDefaultSettings = new Array();
    var SelectedRooms = new Array();

    var hdnSelectedModuleList = $("#hdnSelectedModuleList");
    var hdnSelectedNonModuleList = $("#hdnSelectedNonModuleList");
    var hdnSelectedDefaultSettings = $("#hdnSelectedDefaultSettings");

    var ddlDefaultPermissionRooms = $("#ddlDefaultPermissionRooms");
    var hdnCurrentSelectedRoom = 0;  //= $("#hdnCurrentSelectedRoom");


    //--------- ----------
    $("form").submit(function (e) {

        if (RoleValidation() == false) {
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("#spanGlobalMessage").html('@ResUserMaster.ReqRoleAccess');
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            return false;
        }
        //-----Set control when direct click without room selection ------\
        //        var SelectedRoomReplanishment = '';
        //        $("#hdnSelectedRoomReplanishmentValue").val('');
        //        $("#hdnSelectedRoomReplanishmentValue").val(SelectedRoomReplanishment);

        SetSelectedModule_NonModulePermissions();

        $.ajax({
            type: "POST",
            url: "/EturnsMaster/SaveToUserPermissionsToSession",
            data: "{'RoleID':'" + hdnRoleID.val() + "','SelectedModuleList':'" + hdnSelectedModuleList.val() + "','SelectedNonModuleList':'" + hdnSelectedNonModuleList.val() + "','SelectedDefaultSettings':'" + hdnSelectedDefaultSettings.val() + "'}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (message) {
            },
            error: function (response) {
                // through errror message
            }
        });


        //------------

        $.validator.unobtrusive.parse("#frmUser");
        if ($(this).valid()) {
        }
        e.preventDefault();
    });

    function RoleValidation() {
        var RoleAvailable = false;
        var SelectedRoleID = 0;
        $("#ddlRole > option").each(function () {
            if (this.selected == true) {
                SelectedRoleID = this.value;
            }
        });
        if (SelectedRoleID != 0)
            RoleAvailable = true;

        return RoleAvailable;
    }

    function onSuccess(response) {
        IsRefreshGrid = true;
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            clearControls('frmUser');
            ClearAllRolesDropdown();

            $('input:checkbox').removeAttr('checked');
            // $("#txtDescription").val("");

            $("#txtUserName").val("");
            $("#txtUserName").focus();
        }
        else if (idValue == 0) {
            //clearControls('frmRole');
            $("#txtUserName").val("");
            $("#txtUserName").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                clearControls('frmUser');
                ClearAllRolesDropdown();
            }
        }
        else if (idValue > 0) {

            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#txtUserName").val("");
                $("#txtUserName").focus();
            }
            else {
                clearControls('frmUser');
                ClearAllRolesDropdown();
                SwitchTextTab(0, 'UserCreate', 'frmUser');
            }
        }
    }

    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#txtUserName").focus();
    }

    $(document).ready(function () {
        if ($("#hdnDisableControl").val() != '') {
            if ($("#hdnDisableControl").val().toLowerCase() == "true") {
                $(':input', '#frmUser')
                            .not('#btnCancel')
                            .attr('disabled', 'disabled');
            }


        }
        if ($("#hdnSelectedModuleList").val() != '') {
            SelectedModuleList = $("#hdnSelectedModuleList").val().split(',');
        }

        if ($("#hdnSelectedNonModuleList").val() != '') {
            SelectedNonModuleList = $("#hdnSelectedNonModuleList").val().split(',');
        }
        if ($("#hdnSelectedDefaultSettings").val() != '') {
            SelectedDefaultSettings = $("#hdnSelectedDefaultSettings").val().split(',');
        }


        $('#btnCancel').click(function (e) {
            SwitchTextTab(0, 'UserCreate', 'frmUser');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();
            }
        });

        $('#ddlRole').change(function (e) {
            ClearAllRolesDropdown();
            RoleChanged();
        });

        $("#ddlRole > option").remove();
        $.ajax({ 'url': '/EturnsMaster/GetRoleList',
            data: { CompanyID: 1 },
            success: function (response) {
                var s = '';
                $.each(response.DDData, function (i, val) {
                    s += '<option value="' + val.ID + '"  >' + val.RoleName + '</option>';
                });
                $("#ddlRole").append(s);
                EditModeSetData();
            },
            error: function (response) {
                // through errror message
            }
        });

        EnableDisableRoomsControls();

    });

    $(function () {
        $("#tabs").tabs();
    });
    //-----------------------------------------------
    function GetSelectedRoleID() {
        var SelectedRoleID = 0; // $("#ddlSelectedRooms").val();
        $("#ddlRole > option").each(function () {
            if (this.selected == true) {
                SelectedRoleID = this.value;
            }
        });
        $("#hdnRoleID").val(SelectedRoleID);
        return SelectedRoleID;
    }


    function GetUserID() {
        var UserID = 0;
        if ($("#hiddenID").val() != '') {
            UserID = $("#hiddenID").val();
        }
        return UserID;
    }


    function ClearAllRolesDropdown() {

        $("#CreateRolePermissionDIV input:checkbox").each(function () {
            this.checked = false;
        });

        $("#CreateRolePermissionDIV input:text").each(function () {
            this.value = '';
        });
    }
    function RoleChanged() {

        var SelectedRoleID = GetSelectedRoleID();

        SetSelectedModule_NonModulePermissions();

        $.ajax({
            type: "POST",
            url: "/EturnsMaster/SaveToUserPermissionsToSession",
            data: "{'RoleID':'" + SelectedRoleID + "','SelectedModuleList':'" + hdnSelectedModuleList.val() + "','SelectedNonModuleList':'" + hdnSelectedNonModuleList.val() + "','SelectedDefaultSettings':'" + hdnSelectedDefaultSettings.val() + "'}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (message) {
            },
            error: function (response) {
                // through errror message
            }
        });
        ClearRoomAccessHidden();
        ResetRoomAccessSelection();
        EnableDisableRoomsControls();
    }

    function SetSelectedModule_NonModulePermissions() {
        hdnSelectedModuleList.val('');
        hdnSelectedNonModuleList.val('');
        hdnSelectedDefaultSettings.val('');

        SelectedNonModuleList = [];
        SelectedModuleList = [];
        SelectedDefaultSettings = [];

        $("#CreateRolePermissionDIV input:checkbox").each(function () {
            var ControlID = this.id.toLowerCase();
            if (ValidateCheckBox(ControlID) == true) {
                if (this.checked == true) {
                    if (ControlID.toLowerCase().indexOf("_ischecked") != -1) {
                        SelectedNonModuleList.push(ControlID);
                    }
                    else {
                        SelectedModuleList.push(ControlID);
                    }
                }
            }
        });

        $("#CreateRolePermissionDIV input:text").each(function () {
            if (this.value != '') {
                var txtcnt = this.id + '#' + this.value;
                SelectedDefaultSettings.push(txtcnt);
            }
        });
        //alert(SelectedNonModuleList.toString());
        if (SelectedModuleList.toString() != '') {
            hdnSelectedModuleList.val(SelectedModuleList.toString());
        }
        if (SelectedNonModuleList.toString() != '') {
            $("#hdnSelectedNonModuleList").val(SelectedNonModuleList.toString());
        }
        if (SelectedDefaultSettings.toString() != '') {
            $("#hdnSelectedDefaultSettings").val(SelectedDefaultSettings.toString());
        }

    }

    function ClearRoomAccessHidden() {
        hdnSelectedModuleList.val('');
        hdnSelectedNonModuleList.val('');
        SelectedModuleList = [];
        SelectedNonModuleList = [];
    }

    function ResetRoomAccessSelection() {
        var SelectedRoleID = GetSelectedRoleID();
        var SelecteUserID = GetUserID();
        var FirstRoomID = 0;
        if (SelectedRoleID > 0) {
            $("#CreateRolePermissionDIV").load("/EturnsMaster/UserRolePermissionCreate", {
                RoleID: SelectedRoleID, UserID: SelecteUserID
            }, function () {
                hdnCurrentSelectedRoom = FirstRoomID;
                SetSelectedModule_NonModulePermissions();
            });
        }
    }

    function EditModeSetData() {
        if ($("#hdnRoleID").val() != '') {
            $("#ddlRole > option").each(function () {
                if (this.value == $("#hdnRoleID").val()) {
                    this.selected = true;
                }
            });
        }
        ClearAllRolesDropdown();
        ResetRoomAccessSelection();
        EnableDisableRoomsControls();
    }

    function EnableDisableRoomsControls() {
        //var SelectedRoomscnt = $("#ddlSelectedRooms > option").length;

        //        if (SelectedRoomscnt == 0) {
        //            $('#CreateRolePermissionDIV :input').attr('disabled', true);
        //        }
        //        else {
        $('#CreateRolePermissionDIV :input').removeAttr('disabled');
        //        }
    }

    function ValidateCheckBox(Chked) {
        var result = true;
        if (Chked.toLowerCase().indexOf("rowall") != -1) {
            result = false;
        }
        else if (Chked.toLowerCase().indexOf("allview") != -1) {
            result = false;
        }
        else if (Chked.toLowerCase().indexOf("allinsert") != -1) {
            result = false;
        }
        else if (Chked.toLowerCase().indexOf("alldelete") != -1) {
            result = false;
        }
        else if (Chked.toLowerCase().indexOf("allupdate") != -1) {
            result = false;
        }
        return result;

    }
</script>
