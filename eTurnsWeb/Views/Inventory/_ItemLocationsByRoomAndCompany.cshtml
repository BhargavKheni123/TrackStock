@model IEnumerable<eTurns.DTO.ItemLocationDetailsDTO>
<script type="text/javascript" src="@Url.Content("~/Scripts/DynemicDataTable.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>
@{
    bool isUpdate;
    bool isInsert;
    bool isDelete;
    bool onlyView = false;

    isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    isDelete = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Delete);
    var settings = new GridHeaderSettings() { DisplaySaveButton = false, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "ItemLocationList" };
    if ((isUpdate == false) && (isInsert == false))
    {
        onlyView = true;
    }
    if (ViewBag.ViewOnly)
    {
        onlyView = true;
    }
}
<div class="innerGrid" style="background: none repeat scroll 0 0 #F8F8F8; padding: 10px 0 0 28px">
    <table style="width: 880px;">
        <tr>
            <td class="BtnBlock" style="float: none; border: 1px solid #F8F8F8; height: 2px;">
                <div class="innerHeadSec">
                    <div style="position: absolute; left: 470px; top: -11px; width: 350px; z-index: 10;">
                        @if (isDelete == true)
                        {
                            <a href="javascript:void(null);" title="Delete" id="btnDeleteRecords@(ViewBag.ItemGUID)" style="float:right">
                                <img src="~/Content/images/delete.png" />
                            </a>
                        }
                        <input type="button" id="InnerGridGobtn@(ViewBag.BinID)" class="go" value=@eTurns.DTO.Resources.ResGridHeader.Go />
                        <input type="text" id="InnerGridPageNumber@(ViewBag.BinID)" class="inputNum" />
                        <span class="label">@eTurns.DTO.Resources.ResGridHeader.GoToPage</span>
                        @Html.GridChildGridTopHeader(settings)
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top: 14px; padding-bottom: 35px; border: 1px solid #F8F8F8;">
                <div class="userContentInnerGrid">
                    <table id="ItemLocationTable@(ViewBag.BinID)" class="display">
                        <thead>
                            <tr>
                                @*<th>
                                        @eTurns.DTO.ResItemMaster.ItemNumber
                                    </th>*@ @*<th>
                                        Move button
                                    </th>*@
                                    @*<th>
                                    </th>*@
                                    <th>
                                        @eTurns.DTO.Resources.ResCommon.RowNo
                                    </th>
                                    <th>
                                        @eTurns.DTO.ResBin.BinNumber
                                    </th>
                                    @if (ViewBag.IsSerialNumberTracking)
                                    {
                                        <th>
                                            @eTurns.DTO.ResItemLocationDetails.SerialNumber
                                    </th>
                                    }
                                    @if (ViewBag.IsLotNumberTracking)
                                    {
                                        <th>
                                            @eTurns.DTO.ResItemLocationDetails.LotNumber
                                    </th>
                                    }
                                    @if (ViewBag.IsDateCodeTracking)
                                    {
                                        <th>
                                            @eTurns.DTO.ResItemLocationDetails.ExpirationDate
                                    </th>
                                    }
                                    <th>
                                        @eTurns.DTO.ResItemLocationDetails.ReceivedDate
                                </th>
                                <th>
                                    @eTurns.DTO.ResItemLocationDetails.CustomerOwnedQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemLocationDetails.ConsignedQuantity
                        </th>
                        @if (ViewBag.IsItemLevelMinMaxQtyRequired != true)
                        {
                            <th>
                                @eTurns.DTO.ResItemMaster.MinimumQuantity
                        </th>
                                    <th>
                                        @eTurns.DTO.ResItemMaster.MaximumQuantity
                                </th>
                                    <th>
                                        @eTurns.DTO.ResItemMaster.CriticalQuantity
                                </th>
                        }
                        <th>
                            @eTurns.DTO.ResItemLocationDetails.Cost
                    </th>
                    <th>
                        @eTurns.DTO.ResItemMaster.Markup
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SellPrice
            </th>
            <th>
                @eTurns.DTO.ResItemLocationDetails.Created
        </th>
        <th>
            @eTurns.DTO.ResItemLocationDetails.Updated
    </th>
    <th>
        @eTurns.DTO.ResItemLocationDetails.CreatedBy
</th>
<th>
    @eTurns.DTO.ResItemLocationDetails.LastUpdatedBy
</th>
<th>
    @eTurns.DTO.Resources.ResCommon.AddedFrom
</th>
<th>
    @eTurns.DTO.Resources.ResCommon.EditedFrom
</th>
<th>
    @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
</th>
<th>
    @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
</th>
</tr>
</thead>
<tbody></tbody>
</table>
</div>
</td>
</tr>
</table>
</div>
<div id="LocationDetails@(ViewBag.ItemGUID)">
</div>
<script type="text/javascript">
    var ItemChildGridTableColumns
    $(document).ready(function () {
        objColumns = GetGridHeaderColumnsObject('ItemLocationTable' + '@(ViewBag.BinID)');
        ItemChildGridTableColumns = objColumns;
        BindReorderChildGridPopUpAndEvents(true);
    });
    $(function (event) {

        AllowDeletePopup = false;

        function OpenLocationDetailPopUP() {
            $("#btnNewLocations@(ViewBag.ItemGUID)").click();
            return false;
        }


        var ColumnObject = new Array();
        //ColumnObject.push({
        //    mDataProp: null, "bSortable": false, sClass: "read_only controlHistory NotHide", sDefaultContent: "",
        //    fnRender: function (obj, val) {
        //        return "<input type='hidden' name='hdnGUID' value='" + obj.aData.GUID + "' />" + "<img  src='/Content/images/history.png' alt='no' style='cursor:pointer;'/>"
        //    }
        //});
        ColumnObject.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });
        ColumnObject.push({
            mDataProp: "BinNumber", sClass: "read_only",
            fnRender: function (obj, val) {
                if ('@onlyView' == 'False') {
                    return "<span>" + obj.aData.BinNumber + "</span>";
                    //return "<a class='controlEditLoc' href='JavaScript:void(0);'>" + obj.aData.BinNumber + "</a>" + " <input type='hidden' id='LocationGUID' value='" + obj.aData.GUID.toString() + "' />"
                }
                else {
                    return obj.aData.BinNumber + " <input type='hidden' id='LocationGUID' value='" + obj.aData.GUID.toString() + "' />"
                }
                // return "<a id='controlEditLoc' onclick='return ShowEditTabGUID(&quot;ItemEdit?ItemGUID=" + obj.aData.ItemGUID.toString() + "&quot;,&quot;frmItem&quot;)' href='JavaScript:void(0);'>" + obj.aData.ItemNumber + "</a>" + " <input type='hidden' id='ItemGUID' value='" + obj.aData.ItemGUID.toString() + "' />";
            }
        });

        if ('@ViewBag.IsSerialNumberTracking' == 'True') {
            ColumnObject.push({ mDataProp: "SerialNumber", sClass: "read_only" });
        }
        if ('@ViewBag.IsLotNumberTracking' == 'True') {
            ColumnObject.push({ mDataProp: "LotNumber", sClass: "read_only" });
        }
        if ('@ViewBag.IsDateCodeTracking' == 'True') {

            ColumnObject.push({ mDataProp: "ExpirationStr", sClass: "read_only" });
        }
        ColumnObject.push({ mDataProp: "ReceivedDateStr", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "CustomerOwnedQuantity", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "ConsignedQuantity", sClass: "read_only" });

        if (!('@ViewBag.IsItemLevelMinMaxQtyRequired' == 'True')) {
            ColumnObject.push({ mDataProp: "MinimumQuantity", sClass: "read_only" });
            ColumnObject.push({ mDataProp: "MaximumQuantity", sClass: "read_only" });
            ColumnObject.push({ mDataProp: "CriticalQuantity", sClass: "read_only" });
        }

        // ColumnObject.push({mDataProp : "SuggestedOrderQuantity",sClass : "read_only"});
        //        ColumnObject.push({mDataProp : "Cost",sClass : "read_only"});
        //        ColumnObject.push({mDataProp : "Markup",sClass : "read_only"});
        //        ColumnObject.push({mDataProp : "SellPrice",sClass : "read_only"});

        ColumnObject.push({
            mDataProp: "Cost", sClass: "read_only", "fnRender": function (obj, val) {

                if (obj.aData.Cost != null && obj.aData.Cost != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.Cost, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + " </span>";

            }
        });

        ColumnObject.push({
            mDataProp: "Markup", sClass: "read_only", "fnRender": function (obj, val) {
                if (obj.aData.Markup != null && obj.aData.Markup != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.Markup, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + " </span>";

            }
        });

        ColumnObject.push({
            mDataProp: "SellPrice", sClass: "read_only", "fnRender": function (obj, val) {
                if (obj.aData.SellPrice != null && obj.aData.SellPrice != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.SellPrice, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + " </span>";

            }
        });
        ColumnObject.push({
            mDataProp: "Created",
            sClass: "read_only",
            fnRender: function (obj, val) {
                return obj.aData.CreatedDate;
            }
        });
        ColumnObject.push({ mDataProp: "Updated", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.UpdatedDate; } });
        ColumnObject.push({ mDataProp: "CreatedByName", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "UpdatedByName", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "AddedFrom", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "EditedFrom", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "ReceivedOn", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDate; } });
        ColumnObject.push({ mDataProp: "ReceivedOnWeb", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDateWeb; } });
        //        ColumnObject.push({mDataProp : "ReceivedOnDate",sClass : "read_only"});
        //        ColumnObject.push({mDataProp : "ReceivedOnDateWeb",sClass : "read_only"});

        // parameter details for the " PrepareItemLocationDataTable " function call ...
        // 1) TableName prefix (it must match with your table object of current Page)
        // 2) Unique ID(i.e. Primary Key)
        // 3) Ajax Data Source Link (i.e. which binds the records)
        // 4) Page name which required to get User wise saved data for Datatable
        // 5) ColumnObject which required to pass dynemic column Array Object.
        var paramsMS = [];
        paramsMS.push({ "name": "ItemGUID", "value": '@ViewBag.ItemGUID' });
        paramsMS.push({ "name": "BinID", "value": '@ViewBag.BinID' });
        var scrollx = "";

        PrepareMyDynatable("ItemLocationTable@(ViewBag.BinID)", '@Url.Content("~/Inventory/ItemLocationsListByRoomAndCompanyAjax")', 'ItemLocationList', ColumnObject, paramsMS, scrollx);

        $("#LocationDetails@(ViewBag.ItemGUID)").dialog({
            autoOpen: false,
            show: "blind",
            hide: "explode",
            height: 700,
            title: "Item Locations",
            width: 900,
            modal: true,
            beforeClose: function () {
                if (isDirtyForm) {
                    if (confirm(SaveConfirmationMSG)) {
                        //isDirtyForm = false;
                        return false;
                    }
                    isDirtyForm = false;
                }
            },
            close: function () {
                $("#LocationDetails@(ViewBag.ItemGUID)").empty();
                AllowDeletePopup = true;
                $("#ItemLocationTable@(ViewBag.BinID)").DataTable().fnDraw();
                $('#DivLoading').hide();
            }
        });

        $("#btnNewLocations@(ViewBag.ItemGUID)").click(function () {
            $('#DivLoading').show();
            $('#LocationDetails@(ViewBag.BinID)').load("@Url.Action("LocationDetailsNew", new { ItemID_ItemType = ViewBag.ItemGUID_ItemType })", function () {
                $('#LocationDetails@(ViewBag.BinID)').dialog('open');
                $('#DivLoading').hide();
            });
            return false;
        });

        $("#aEditLocation@(ViewBag.ItemGUID)").click(function () {
            $("#btnNewLocations@(ViewBag.ItemGUID)").click();
            return false;
        });
        $("#btnDeleteRecords@(ViewBag.ItemGUID)").click(function () {

            DeleteDynemicTableData_New($("#ItemLocationTable@(ViewBag.BinID)").DataTable(), '@Url.Content("~/Inventory/ItemLocationsDelete")', 'UpdateQtyDetailOfParentGrid');

            //setTimeout(function () { UpdateQtyDetailOfParentGrid(); }, 10000);

        });

        if ($('#IsDeletedRecords').is(':checked') || $('#IsArchivedRecords').is(':checked') || $("body").hasClass('DTTT_Print')) {
            $('#btnDeleteRecords@(ViewBag.ItemGUID)').css({ 'display': 'none' });
            $('#btnNewLocations@(ViewBag.ItemGUID)').css({ 'display': 'none' });
        }


        $("#ItemLocationTable@(ViewBag.BinID)").on("click", "td.controlHistory img", function (event) {
            var nTrLocHistory = this.parentNode.parentNode;
            var oDataLocHistory = $("#ItemLocationTable@(ViewBag.BinID)").DataTable().fnGetData(nTrLocHistory);
            //alert(oDataLocHistory.GUID);
            $('#divItemLocationHistoryView').data("cid", oDataLocHistory.GUID).dialog('open')
            //return false;
            event.preventDefault();
            return false;
        });

        $("#ItemLocationTable@(ViewBag.BinID)").on("click", "a.controlEditLoc", function (event) {

            var LocGUID = $(this.parentNode).find("#LocationGUID")
            var strUrl = '@Url.Action("LocationDetailsEdit")';
            strUrl = strUrl + '?LocationGUID=' + $(LocGUID).val();

            $('#DivLoading').show();
            $('#LocationDetails@(ViewBag.ItemGUID)').load(strUrl, function () {
                $('#LocationDetails@(ViewBag.ItemGUID)').dialog('open');
                $('#DivLoading').hide();
                //$("#frmLocationDetails").find("table tbody").find("input[type='text']")[0].focus();
                //setTimeout('setTextboxFocus()',2000);
            });
            IsPopUpOpenOrNot = true;
            event.preventDefault();
            return false;
        });

        $("#divItemLocationHistoryView").dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '95%',
            height: 720,
            title: 'Inventory Location History',
            open: function () {
                $('#DivLoading').show();
                $("#divItemLocationHistoryView").empty();
                $.get('ItemLocationHistoryView', { LGUID: $(this).data("cid") }, function (data) {
                    $("#divItemLocationHistoryView").html(data);
                });
                $('#DivLoading').hide();
            },
            close: function () {
                $("#divItemLocationHistoryView").empty();
            }
        });
        $('.ColVis_MasterButton').hide();
        $('.innerGrid .BtnBlock').css("margin-top", "-8.3%");
        $('.innerGrid .refresh').css("margin-right", "-45px");
    });
    //    function setTextboxFocus()
    //    {
    //        if ($("#frmLocationDetails").find("table tbody").find("input[type='text']:visible").length > 0) {
    //                $("#frmLocationDetails").find("table tbody td").find("input[type='text']:visible")[0].focus();
    //           }
    //    }
    function DeleteItemLocatino() {
        DeleteDynemicTableData_New($("#ItemLocationTable@(ViewBag.ItemGUID)").DataTable(), '@Url.Content("~/Inventory/ItemLocationsDelete")');
    }

    function UpdateQtyDetailOfParentGrid() {
        $.ajax({
            "url": '@Url.Content("~/Inventory/GetLatestQTYfromItem")',
            data: { ItemGUID: '@(ViewBag.ItemGUID)' },
            "async": false,
            cache: false,
            "dataType": "json",
            "success": function (response) {
                if ($('#spnOnHand@(ViewBag.ItemGUID)') != undefined)
                    $('#spnOnHand@(ViewBag.ItemGUID)').text(response.OnHand);

                if ($('#OnHandQuantityHidden@(ViewBag.ItemGUID)') != undefined)
                    $('#OnHandQuantityHidden@(ViewBag.ItemGUID)').val(response.OnHand);

                if ($('#spnSuggested@(ViewBag.ItemGUID)') != undefined)
                    $('#spnSuggested@(ViewBag.ItemGUID)').text(response.SuggestedQTY);

                if ($('#spnAverageCost@(ViewBag.ItemGUID)') != undefined)
                    $('#spnAverageCost@(ViewBag.ItemGUID)').text(response.AverageCost);

                if ($('#spnExtendedCost@(ViewBag.ItemGUID)') != undefined)
                    $('#spnExtendedCost@(ViewBag.ItemGUID)').text(response.ExtendedCost);

                if ($('#aOnOrderQty_@(ViewBag.ItemGUID)') != undefined)
                    $('#aOnOrderQty_@(ViewBag.ItemGUID)').text(response.OnOrderQty);

                if ($('#spnAverageUsage@(ViewBag.ItemGUID)') != undefined)
                    $('#spnAverageUsage@(ViewBag.ItemGUID)').text(response.AverageUsage);

                if ($('#myDataTable') != undefined) {

                    if (DrillDownItemGuid != null && DrillDownItemGuid != undefined)
                        DrillDownItemGuid = '@ViewBag.ItemGUID';

                    if (DrillDownBinId != null && DrillDownBinId != undefined)
                        DrillDownBinId = '@ViewBag.BinID';

                    $("#myDataTable").DataTable().fnDraw();
                }
                else if ($('#ItemBinWiseSummaryTable@(ViewBag.ItemGUID)') != undefined)
                    $("#ItemBinWiseSummaryTable@(ViewBag.ItemGUID)").DataTable().fnDraw();

                if ($('#spnUpdated@(ViewBag.ItemGUID)') != undefined)
                    $('#spnUpdated@(ViewBag.ItemGUID)').text(GetDateInFullFormat(response.UpdatedDate));
            },
            error: function (response) {
                $("#spanGlobalMessage").html(response);
            }
        });
    }
    function ChildGridReloadAfterReorder() {
        $("#" + "ItemBinWiseSummaryTable" + '@ViewBag.ItemGUID').find("tbody tr").each(function (index, tr) {
            if ($(tr).find('#ItemGUID').val() == '@(ViewBag.ItemGUID)'
                && $($(tr).find('td.control img'))[0].id == '@(ViewBag.BinID)') {
                $(tr).find('td.control img').click(); //$(tr).find('img.ExpandLocationSerials').click();
                $(tr).find('td.control img').click();
                return;
            }
        });
    }

    function ChildGridColumnAndTableRebinding() {
        oTableGlobalTABLE = $("#" + "ItemLocationTable" + '@ViewBag.BinID').dataTable();
        objColumns = ItemChildGridTableColumns;
    }

    $("#InnerGridGobtn"+'@(ViewBag.BinID)').click(function () {
        var pval = $('#InnerGridPageNumber'+'@(ViewBag.BinID)').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (pval == 0)
            return;
        $("#" + "ItemLocationTable" + '@ViewBag.BinID').dataTable().fnPageChange(Number(pval - 1));
        $('#InnerGridPageNumber'+'@(ViewBag.BinID)').val('');
    });

</script>
<div id="divItemLocationHistoryView">
</div>
<script type="text/javascript">
    var objColumnsLocation = {
        '@MvcHtmlString.Create(eTurns.DTO.ResBin.BinNumber)': 1,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.SerialNumber)': 2,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.LotNumber)': 3,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.ExpirationDate)': 4,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.ReceivedDate)': 5,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.CustomerOwnedQuantity)': 6,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.ConsignedQuantity)': 7,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.MinimumQuantity)': 8,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.MaximumQuantity)': 9,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.CriticalQuantity)': 10,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.Cost)': 11,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Markup)': 12,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.SellPrice)': 13,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.Created)': 14,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.Updated)': 15,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.CreatedBy)': 16,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemLocationDetails.LastUpdatedBy)': 17,
        //        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.AddedFrom)': 18,
        //        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.EditedFrom)': 19,
        //        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ReceivedOnDate)': 20,
        //        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate)': 21,
    };
</script>
