@model InventoryCountDTO
@{
    //var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowLocationCombo = true, ShowSelectAll = true, ShowApplyButton = false, DisplaySaveButton = true, DisplayUDFButton = false, UDFSetupFor = "CountLineItems", DisplaySettings = true, DisplayColumnSetupButton = false, DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = true, ColumnSetupFor = "GetIcLineItems" + Model.ID };
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowLocationCombo = true, ShowSelectAll = true, ShowApplyButton = false, DisplaySaveButton = true, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = false, DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = true, ColumnSetupFor = "GetIcLineItems" + Model.ID };
    bool IsAppliedCount = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Allowapplyoncounts);

    string ViewNewCountApplyButtons = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["ViewNewCountApplyButtons"]);
    
    if (string.IsNullOrWhiteSpace(ViewNewCountApplyButtons))
    {
        ViewNewCountApplyButtons = "no";
    }

    string commonControlType = "Textbox";
    var objPOMaster = new eTurns.DAL.UDFDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetSinglePullPOPlain(eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.RoomID);

    if (objPOMaster != null)
    {
        commonControlType = objPOMaster.UDFControlType;
    }
}
<style type="text/css">
    .pull-count .dataTables_length {
        top: -79px;
    }

    .pull-count .dataTables_paginate {
        top: -69px;
    }

    .pull-count .td-udfs {
        padding: 3px;
    }

    #tblPullCommonUDF .selectBox {
        width: 90% !important;
    }

    #tblPullCommonUDF .text-boxinner {
        width: 90% !important;
    }

    .tblPullCommonUDFthead {
        padding-right: 5px;
        padding-left: 5px;
    }
</style>
<div class="userListingWrapper">
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99.5%">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search</span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="MSLItem_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_MSLItem_filter" />
                        </a>
                    </div>
                </div>
                <input type="button" id="btnDiv" value="Div" style="visibility: hidden" />
            </div>
            @Html.QuickListItemsGridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Count)
            <div class="userContent pull-count" style="width: 99% !important; margin-left: 5px !important;
                float: left;">
                <table style="margin-bottom: 1px; margin-top: 1px;" id="tblPullCommonUDF">
                    <thead>
                        <tr>
                            <th>
                            </th>
                            <th id="THPullOrderNumber">@eTurns.DTO.ResPullMaster.PullOrderNumber</th>
                            @Html.RenderColumnsHeaderByName("PullMaster", typeof(eTurns.DTO.ResPullMaster))
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="td-udfs">
                                <b style="font-size: 13px;">@ResCommon.Usethis</b>
                                <input type="checkbox" id="chkUsePullCommonUDF" />
                            </td>
                            <td id="TDPullOrderNumber">
                                <span style="position:relative">
                                    @if (commonControlType == "Textbox")
                                    {
                                        <input type="text" id="txtPullOrderNumberCommon" class="text-boxinner" maxlength="128" style="width:93%;" />
                                    }
                                    else if (commonControlType == "Dropdown")
                                    {
                                        @Html.RenderColumnsArrayForPullOrderMaster("PullPoMaster")
                                    }
                                    else
                                    {
                                        <input type="text" id="txtPullOrderNumberCommon" class="text-boxinner AutoPullOrderNumber" maxlength="128" style="width:93%;" autocomplete="off" />
                                        <a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;" class="ShowAllOptionsOrderNumber">
                                            <img src="/Content/images/arrow_down_black.png" alt="select" />
                                        </a>
                                    }

                                </span>
                            </td>
                            @Html.RenderColumnsArrayEditableObjectForDOMByName("PullMaster", controlIDPostfix: "PullCommon")
                        </tr>
                    </tbody>
                </table>
                @Html.HiddenFor(model => model.CountType)
                <table id="CountLineItem@(Model.ID)" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ExpandCollapse
                            </th>

                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.Apply
                            </th>

                            <th class="NotHide">
                                @eTurns.DTO.ResInventoryCountDetail.CountCustomerOwnedQuantity
                            </th>
                            <th class="NotHide">
                                @eTurns.DTO.ResInventoryCountDetail.CountConsignedQuantityEntry
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.CusOwnedDifference
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.ConsignedDifference
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.ItemNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.BinNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.PrevCustOwnedQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.PrevConsignedQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.CountLineItemDescription
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.IsApplied
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.ItemTypeCategory
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.IsStagingLocationCount
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Description
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.SupplierAccountNumber
                            </th>
                            <th class="NotHide">
                                @eTurns.DTO.ResPullMaster.PullOrderNumber
                            </th>
                            @*@Html.RenderColumnsHeader("InventoryCountLineItem", typeof(eTurns.DTO.ResInventoryCountDetail))*@
                            @Html.RenderColumnsHeader("PullMaster", typeof(eTurns.DTO.ResPullMaster))
                            @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster), "Item")
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.Created
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.Updated
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                @if (Model != null && IsAppliedCount == true && !Model.IsClosed && Model.IsApplyAllDisable)
                {
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.ApplyAll" id="btnApplyAll" class="CreateBtn" style="float: left; margin-left: 20px;" />
                    </div>
                }
                <div class="dialog" id="ApplyCountErrorDialog" style="display: none; width: 470px;">
                    <div class="inner" style="width: 470px;">
                        <p class="text" id="ApplyCountErrorMSG" style="text-align: left; padding-left: 10px;">
                        </p>
                        <p class="text btnA" style="text-align: center; padding-left: 10px;">
                            <a href="javascript:void(0)" class="no" onclick="javascript:return closeErrorDialog()">
                                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
                            </a>
                        </p>
                    </div>
                </div>
                <div class="dialog" id="ApplyCountInfoDialog" style="display: none; width: 470px;">
                    <div class="inner" style="width: 470px;">
                        <p class="text" id="ApplyCountMSG" style="text-align: left; padding-left: 10px;">
                        </p>
                        <p class="text btnA" style="text-align: center; padding-left: 10px;">
                            <a href="javascript:void(0)" class="no" onclick="closeFromOk()">
                                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
                            </a>
                        </p>
                    </div>
                </div>
                <div class="dialog" id="ApplyCountProcessing" style="display: none;">
                    <div class="inner">
                        <p class="text" id="ApplyCountGWait" style="text-align: left; padding-left: 10px;">
                            <b style="color: Red;">@*Kindly wait, Apply count effect is going on.....*@ 
                            @eTurns.DTO.Resources.ResMessage.PleaseWaitTransGoingOn
                            </b>
                        </p>
                        <p class="text" id="ApplyCountGWaitImg" style="text-align: center; padding-left: 10px;">
                            <img src="@Url.Content("~/Content/images/ajax.gif")" alt="loding" />
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="dialog" id="mdlMSLIYesNo" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.DeleteConfirm
        </p>
        <a href="JavaScript:void{}" id="btnMSLIYes" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no" onclick="closeConfirmModal()">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div id="DivCountApplyPopup">
</div>
<div id="PopupForSerialLotItemContainer" style="display: none;">

</div>
@*@if (false)
    {
        <script src="../../Scripts/jquery-1.9.1-vsdoc.js" type="text/javascript"></script>
    }*@
<script type="text/javascript">
    var CountLineItemDataTable = 'CountLineItem' + '@Model.ID';
    var ColumnObject = new Array();
    var oTableMSItem;
    var IsDeleteKLIPopupOpen = false;
    var AllowKLIDeletePopup = true;
    var anOpenMS = [];
    var anOpen = [];
    var ApplyAllCountErrorMessage = "";
    var FromApplyAll = false;
    var errorIndex = 0;
    var TotalRowSelectedForApplyCount = 0;
    var ApplyProcessedRowCount = 0;
    var PosArr = new Array();
    var selectedRows = new Array();
    var FinalErr = '';
    var objInventoryCountDetailDTO = '';
    var CntColumnObject = {};
    var AppliedLineItemGuids = new Array();
    var QuantityMissingInRow = '@ResInventoryCountDetail.QuantityMissingInRow';
    var QuantityValidationSerialItem = '@ResInventoryCountDetail.QuantityValidationSerialItem';
    var BinnumberMissingRow = '@ResInventoryCountDetail.BinnumberMissingRow';
    var LotSerialnumberMissingRow = '@ResInventoryCountDetail.LotSerialnumberMissingRow';
    var ExpirationDateMissingRow = '@ResInventoryCountDetail.ExpirationDateMissingRow';

    $(document).ready(function () {

        $('form').areYouSure();
        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormatSR").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 0
        });

        $("#project-spend-limit-basic-modal-content").on("click", "#btnModelYesPSLimit", function () {
            var url = '@Url.Action("RequisitionList", "Consume")';
            url = url + '?fromPull=' + 'yes'
            window.location.href = url;
        });



        //$("#actionSelectAllLI").click(function () {
        //    $("#" + CountLineItemDataTable).find("tbody tr").removeClass("row_selected").addClass("row_selected");
        //});

        $('#actionSelectAllLI').on('click', function (e) {
            $("#" + CountLineItemDataTable).find("tbody tr").each(function (e) {
                if ($(this).hasClass('row_selected') == false)
                    $(this).addClass('row_selected');
            });

            $(this).css('display', 'none');
            $('#actionDeSelectAllLI').css('display', 'block');
            return false;
        });

        $('#actionDeSelectAllLI').on('click', function (e) {
            $("#" + CountLineItemDataTable).find("tbody tr").each(function (e) {
                if ($(this).hasClass('row_selected'))
                    $(this).removeClass('row_selected');
            });
            $(this).css('display', 'none');
            $('#actionSelectAllLI').css('display', 'block');
            return false;
        });

        $("#" + CountLineItemDataTable).on('focus', "input.AutoSupplierAccountNumber", function (e) {
            var ajaxURL = '/Pull/GetSupplierAccountNumbersforPull';
            var tr = $(this).parent().parent().parent();
            var itmGuid = $(tr).find('#hdnItemGUID').val();
            $(this).autocomplete({
                source: function (request, response) {
                    $('#DivLoading').show()
                    $.ajax({
                        url: ajaxURL,
                        type: 'POST',
                        data: JSON.stringify({ 'ItemGuid': itmGuid, 'NameStartWith': request.term }),
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data) {
                            $('#DivLoading').hide()

                            response($.map(data, function (Items) {
                                return {
                                    label: Items.Value,
                                    value: Items.Value,
                                    selval: Items.GUID
                                }
                            }));
                        },
                        error: function (err) {
                            $('#DivLoading').hide();
                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {

                    $(tr).find("#hdnSupplierAccountNumber").val(ui.item.selval);
                    $(this).val(ui.item.value);
                    $(tr).find("input[type='hidden'][name='hdnRowState']").val("1");
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    $(this).autocomplete('widget').css('z-index', 9000);
                    $('ul.ui-autocomplete').css('overflow-y', 'auto');
                    $('ul.ui-autocomplete').css('max-height', '300px');
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                change: function (event, ui) {

                }
            });
        });



        //vat Dtname = "#CountLineItem@(Model.ID)"; CountLineItemDataTable
        $("#CountLineItem@(Model.ID)").die('tap click');
        var lastChecked1;
        var starttrvalue1 = "";
       $("#CountLineItem@(Model.ID)").on("tap click", "tbody tr", function (e) {
	        if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text" || e.target.type == "button" || e.target.type == "textarea") {
		        e.stopPropagation();
	        } else {
		        if (IsDeleteItemPictureViewRecord)
			        $(this).parent().parent().parent().parent().parent().toggleClass('row_selected');
		        else {
			        //$(this).toggleClass('row_selected');
			        if (lastChecked1 !== undefined && lastChecked1 != null && !lastChecked1) {
				        lastChecked1 = this;
			        }

			        if (e.shiftKey) {
				        var start = $('#' + CountLineItemDataTable+' tbody tr').index(this);
				        var end = $('#' + CountLineItemDataTable +' tbody tr').index(lastChecked1);

				        var stringval1 = readCookieforshift("selectstartindex");
				        if (stringval1 != null) {
					        var endindex = $(this).closest('tr').attr('id');
					        createCookieforshift("selectendindex", endindex, 1);
					        if ($("#hdnPageName").val() !== undefined) {
						        var pagename = '';
						        pagename = $("#hdnPageName").val();
						        GetOnlyIdsForPassPagesForshift(pagename, true);
					        }
				        }

				        for (i = Math.min(start, end); i <= Math.max(start, end); i++) {
					        if (!$('#' + CountLineItemDataTable +' tbody tr').eq(i).hasClass('row_selected')) {
						        $('#' + CountLineItemDataTable +' tbody tr').eq(i).addClass("row_selected");
					        }
				        }
				        if (window.getSelection) {
					        if (window.getSelection().empty) {  // Chrome
						        window.getSelection().empty();
					        } else if (window.getSelection().removeAllRanges) {  // Firefox
						        window.getSelection().removeAllRanges();
					        }
				        } else if (document.selection) {  // IE?
					        document.selection.empty();
				        }
			        } else if ((e.metaKey || e.ctrlKey)) {
				        $(this).toggleClass('row_selected');
			        } else {
				        $(this).toggleClass('row_selected');


				        if ($(this).hasClass('row_selected')) {
					        (starttrvalue1 == "") ? starttrvalue1 = $(this).closest('tr').attr('id') : starttrvalue1 = starttrvalue1 + "," + $(this).closest('tr').attr('id');
					        createCookieforshift("selectstartindex", starttrvalue1, 1);
				        } else {

					        var stringval = readCookieforshift("selectstartindex");
					        if (stringval != "undefined") {
						        if (stringval != null) {
							        var tmp = stringval.split(',');
							        var index = tmp.indexOf($(this).closest('tr').attr('id'));
							        if (index !== -1) {
								        tmp.splice(index, 1);
								        stringval = tmp.join(',');
								        createCookieforshift("selectstartindex", stringval, 1);
							        }
						        }
					        }

				        }
			        }

			        lastChecked1 = this;
		        }

		        return false;
	        }
        });

        ColumnObject.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });
        ColumnObject.push({
            "sClass": "read_only control center NotHide",
            "sDefaultContent": '',
            "bSortable": false,
            "fnRender": function (obj, val) {
                if (obj.aData.SerialNumberTracking == true || obj.aData.LotNumberTracking == true || obj.aData.DateCodeTracking == true) {
                    return '<img id="imgPlusMinus_' + obj.aData.GUID + '" src="/Content/images/drildown_open.jpg' + '" onclick="return OpenLineItemDetails(this);">' +
                           '<input type="hidden" id="hdnInventoryCountDetailGUID" value="' + obj.aData.GUID.toString() + '" />' +
                           '<input type="hidden" id="hdnLotNumberTracking" value="' + obj.aData.LotNumberTracking.toString() + '" />' +
                           '<input type="hidden" id="hdnSerialNumberTracking" value="' + obj.aData.SerialNumberTracking.toString() + '" />' +
                           '<input type="hidden" id="hdnDateCodeTracking" value="' + obj.aData.DateCodeTracking.toString() + '" />' +
                           '<input type="hidden" id="hdnIsApplied" value="' + obj.aData.IsApplied.toString() + '" />' +
                           '<input type="hidden" id="hdnBinNumber" value="' + obj.aData.BinNumber.toString() + '" />' +
                           '<input type="hidden" id="hdnItemGUID" value="' + obj.aData.ItemGUID.toString() + '" />'+
                           '<input type="hidden" id="hdnIsStage" value="' + obj.aData.IsStagingLocationCount.toString() + '" />' +
                           '<span id="spnPullOrderNumber" style="display: none">' + obj.aData.PullOrderNumber + '</span>' +
                           '<span id="hdnSpnPullOrderNumber" style="display: none"></span>';
                }
                else {
                    return '<input type="hidden" id="hdnInventoryCountDetailGUID" value="' + obj.aData.GUID.toString() + '" />' +
                           '<input type="hidden" id="hdnLotNumberTracking" value="' + obj.aData.LotNumberTracking.toString() + '" />' +
                           '<input type="hidden" id="hdnSerialNumberTracking" value="' + obj.aData.SerialNumberTracking.toString() + '" />' +
                           '<input type="hidden" id="hdnDateCodeTracking" value="' + obj.aData.DateCodeTracking.toString() + '" />' +
                           '<input type="hidden" id="hdnIsApplied" value="' + obj.aData.IsApplied.toString() + '" />' +
                           '<input type="hidden" id="hdnBinNumber" value="' + obj.aData.BinNumber.toString() + '" />' +
                           '<input type="hidden" id="hdnItemGUID" value="' + obj.aData.ItemGUID.toString() + '" />'+
                           '<input type="hidden" id="hdnIsStage" value="' + obj.aData.IsStagingLocationCount.toString() + '" />' +
                           '<span id="spnPullOrderNumber" style="display: none">' + obj.aData.PullOrderNumber + '</span>' +
                           '<span id="hdnSpnPullOrderNumber" style="display: none"></span>';
                }
            }
        }
        );
        if ('@IsAppliedCount' == 'True' && '@Model.IsClosed' == 'False') {
            ColumnObject.push({
                mDataProp: null, bSortable: false, sClass: "read_only", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                    if (obj.aData.IsApplied == true || obj.aData.IsApplied == 'Yes') {
                        var strReturn = "<input id='btnApplyCount' type='button' class='CreateBtndisabled' style='float:none; padding: 2px 6px; margin-left: 5px;' value='@ResCommon.Apply' disabled='disabled' /><input type='hidden' name='hdnRowState' value='0' />";
                        strReturn = strReturn + "<input type='hidden' id='hdnLotNumberTracking' name='hdnLotNumberTracking' value='" + obj.aData.LotNumberTracking + "' />";
                        strReturn = strReturn + "<input type='hidden' id='hdnSerialNumberTracking' name='hdnSerialNumberTracking' value='" + obj.aData.SerialNumberTracking + "' />";
                        return strReturn;
                    }
                    else {
                        if ('@ViewNewCountApplyButtons' == 'yes' && (obj.aData.SerialNumberTracking == true || obj.aData.LotNumberTracking == true)) {
                            var strReturn = "<input id='btnApplyCount' type='button' class='CreateBtn ApplyBtn' style='float:none; padding: 2px 6px; margin-left: 5px;' value='@ResCommon.Apply' onclick='ApplyOnSingleItemNewFlow(this);' /><input type='hidden' name='hdnRowState' value='0' />";
                            strReturn = strReturn + "<input type='hidden' id='hdnLotNumberTracking' name='hdnLotNumberTracking' value='" + obj.aData.LotNumberTracking + "' />";
                            strReturn = strReturn + "<input type='hidden' id='hdnSerialNumberTracking' name='hdnSerialNumberTracking' value='" + obj.aData.SerialNumberTracking + "' />";
                            return strReturn;
                        }
                        else {
                            var strReturn = "<input id='btnApplyCount' type='button' class='CreateBtn ApplyBtn' style='float:none; padding: 2px 6px; margin-left: 5px;' value='@ResCommon.Apply' onclick='ApplyOnSingleItem(this);' /><input type='hidden' name='hdnRowState' value='0' />";
                            strReturn = strReturn + "<input type='hidden' id='hdnLotNumberTracking' name='hdnLotNumberTracking' value='" + obj.aData.LotNumberTracking + "' />";
                            strReturn = strReturn + "<input type='hidden' id='hdnSerialNumberTracking' name='hdnSerialNumberTracking' value='" + obj.aData.SerialNumberTracking + "' />";
                            return strReturn;
                        }
                    }

                }
            });
        }
        else {
            ColumnObject.push({
                mDataProp: null, bSortable: false, sClass: "read_only", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                    return '';
                }
            });
        }
        //else {
        //    ColumnObject.push({
        //        mDataProp: null, bSortable: false, sClass: "read_only", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
        //            var strReturn = "<input type='button' class='CreateBtndisabled' style='float:none; padding: 2px 6px; margin-left: 5px;' value='Apply' disabled='disabled' /><input type='hidden' name='hdnRowState' value='0' />";
        //            strReturn = strReturn + "<input type='hidden' name='hdnLotNumberTracking' value='" + obj.aData.LotNumberTracking + "' />";
        //            strReturn = strReturn + "<input type='hidden' name='hdnSerialNumberTracking' value='" + obj.aData.SerialNumberTracking + "' />";
        //            return strReturn;
        //        }
        //    });
        //}
        ColumnObject.push({
            mDataProp: "CountCustomerOwnedQuantity", bSortable: false, sClass: "read_only numericalign NotHide", sDefaultContent: '', fnRender: function (obj, val) {

                var CountCustomerOwnedQuantity = isNaN(parseFloat(obj.aData.CountCustomerOwnedQuantity)) ? "NA" : FormatedCostQtyValues(obj.aData.CountCustomerOwnedQuantity, 2);
                if (obj.aData.IsApplied  ==  true || obj.aData.IsApplied == 'Yes') {
                    if (obj.aData.SerialNumberTracking == true) {
                        return "<span>" + (!isNaN(CountCustomerOwnedQuantity) ? (CountCustomerOwnedQuantity) : "NA") + "</span><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                    else {
                        return "<span>" + (!isNaN(CountCustomerOwnedQuantity) ? (CountCustomerOwnedQuantity) : "NA") + "</span><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                }
                else if (obj.aData.SerialNumberTracking == true || obj.aData.LotNumberTracking == true || obj.aData.DateCodeTracking == true) {
                    if (obj.aData.SerialNumberTracking == true) {
                        return "<input type='text' value='" + (!isNaN(CountCustomerOwnedQuantity) ? (CountCustomerOwnedQuantity) : "NA") + "' class='numericinput text-boxinner numericsonly disableBack'  maxlength='10' onblur='CustownedCountLI(this);' name='txtCountConQty' style='width:90%;' readonly='readonly' /><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                    else {
                        return "<input type='text' value='" + (!isNaN(CountCustomerOwnedQuantity) ? (CountCustomerOwnedQuantity) : "NA") + "' class='numericinput text-boxinner numericsonly disableBack' maxlength='10' onblur='CustownedCountLI(this);' name='txtCountConQty' style='width:90%;' readonly='readonly' /><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                }
                else {
                    //                return "<input type='text' class='text-boxinner' onchange='CustownedCount(this);' style='width:90%;' name='txtCountCOQty' value='" + CountCustomerOwnedQuantity + "' class='text-boxinner' />
                    if (obj.aData.SerialNumberTracking == true) {
                        return "<input type='text' value='" + (!isNaN(CountCustomerOwnedQuantity) ? (CountCustomerOwnedQuantity) : "NA") + "' class='numericinput text-boxinner numericsonly'  maxlength='10' onblur='CustownedCountLI(this);' name='txtCountConQty' style='width:90%;' /><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                    else {
                        return "<input type='text' value='" + (!isNaN(CountCustomerOwnedQuantity) ? (CountCustomerOwnedQuantity) : "NA") + "' class='numericinput text-boxinner numericsonly' maxlength='10' onblur='CustownedCountLI(this);' name='txtCountConQty' style='width:90%;' /><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                }
            }
        });

        ColumnObject.push({
            mDataProp: "CountConsignedQuantity", bSortable: false, sClass: "read_only numericalign NotHide", sDefaultContent: '', fnRender: function (obj, val) {

                var CountConsignedQuantity = isNaN(parseFloat(obj.aData.CountConsignedQuantity)) ? "NA" : FormatedCostQtyValues(obj.aData.CountConsignedQuantity,2);
                if (obj.aData.IsApplied == true || obj.aData.IsApplied == 'Yes') {
                    if (obj.aData.SerialNumberTracking == true) {
                        return "<span>" + (!isNaN(CountConsignedQuantity) ? CountConsignedQuantity : "NA") + "</span>";
                    }
                    else {
                        return "<span>" + (!isNaN(CountConsignedQuantity) ? CountConsignedQuantity : "NA") + "</span>";
                    }
                }
                else if (obj.aData.Consignment != true) {
                    return "<input type='text' readonly='readonly' value='NA' class='numericinput text-boxinner numericsonly disableBack'  maxlength='10' onblur='ConsignedCountLI(this);' name='txtCountConQty' style='width:90%;' />";
                }
                else {
                    if (obj.aData.SerialNumberTracking == true || obj.aData.LotNumberTracking == true || obj.aData.DateCodeTracking == true) {
                        if (obj.aData.SerialNumberTracking == true) {
                            return "<input type='text' value='" + (!isNaN(CountConsignedQuantity) ? CountConsignedQuantity : "NA") + "' class='numericinput text-boxinner numericsonly disableBack' maxlength='10' onblur='ConsignedCountLI(this);' name='txtCountConQty' style='width:90%;' readonly='readonly' />";
                        }
                        else {
                            return "<input type='text' value='" + (!isNaN(CountConsignedQuantity) ? CountConsignedQuantity : "NA") + "'  maxlength='10' class='numericinput text-boxinner numericsonly disableBack' onblur='ConsignedCountLI(this);' name='txtCountConQty' style='width:90%;' readonly='readonly' />";
                        }
                    }
                    else {
                        if (obj.aData.SerialNumberTracking == true) {
                            return "<input type='text' value='" + (!isNaN(CountConsignedQuantity) ? CountConsignedQuantity : "NA") + "' class='numericinput text-boxinner numericsonly' maxlength='10' onblur='ConsignedCountLI(this);' name='txtCountConQty' style='width:90%;' />";
                        }
                        else {
                            return "<input type='text' value='" + (!isNaN(CountConsignedQuantity) ? CountConsignedQuantity : "NA") + "'  maxlength='10' class='numericinput text-boxinner numericsonly' onblur='ConsignedCountLI(this);' name='txtCountConQty' style='width:90%;' />";
                        }
                    }
                    //return "<input type='text' class='text-boxinner' style='width:90%;' onchange='ConsignedCount(this);' name='txtCountConQty' value='" + CountConsignedQuantity + "' />";
                }
            }
        });

        ColumnObject.push({
            mDataProp: "CusOwnedDifference", sClass: "read_only", sClass: "read_only numericalign", sDefaultContent: '', fnRender: function (obj, val) {
                var CusOwnedDifference = isNaN(parseFloat(obj.aData.CusOwnedDifference)) ? "NA" : FormatedCostQtyValues(obj.aData.CusOwnedDifference, 2);
                return "<span name='spnCusOwnedDifference'>" + CusOwnedDifference + "</span>";
            }
        });
        ColumnObject.push({
            mDataProp: "ConsignedDifference", sClass: "read_only", sClass: "read_only numericalign", sDefaultContent: '', fnRender: function (obj, val) {
                var ConsignedDifference = isNaN(parseFloat(obj.aData.ConsignedDifference)) ? "NA" : FormatedCostQtyValues(obj.aData.ConsignedDifference, 2);
                return "<span name='spnConsignedDifference'>" + ConsignedDifference + "</span>";
            }
        });
        ColumnObject.push({ mDataProp: "ItemNumber", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "BinNumber", sClass: "read_only", bSortable: true });
        ColumnObject.push({
            mDataProp: "CustomerOwnedQuantity", sClass: "read_only", sClass: "read_only numericalign", sDefaultContent: '', fnRender: function (obj, val) {
                if (obj.aData.SerialNumberTracking == true) {
                    return "<span name='spnCustomerOwnedQuantity'>" + parseFloat(obj.aData.CustomerOwnedQuantity).toFixed(0) + "</span>";
                }
                else {
                    return "<span name='spnCustomerOwnedQuantity'>" + parseFloat(obj.aData.CustomerOwnedQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + "</span>";
                }
            }
        });
        ColumnObject.push({
            mDataProp: "ConsignedQuantity", sClass: "read_only numericalign", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                if (obj.aData.SerialNumberTracking == true) {
                    return "<span name='spnConsignedQuantity'>" + parseFloat(obj.aData.ConsignedQuantity).toFixed(0) + "</span>";
                }
                else {
                    return "<span name='spnConsignedQuantity'>" + parseFloat(obj.aData.ConsignedQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + "</span>";
                }
            }
        });


        ColumnObject.push({
            mDataProp: "CountLineItemDescription", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                return "<textarea name='txtCountLineItemDescription' id='txtCountLineItemDescription' onchange='DescriptionChnagesLI(this);' maxlength='1024' style='width:90%;' class='text-boxinner' cols='20'>" + obj.aData.CountLineItemDescription + "</textarea>";
            }
        });


        ColumnObject.push({ mDataProp: "IsApplied", sClass: "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } });
        ColumnObject.push({ mDataProp: "ItemType", sClass: "read_only", "fnRender": function (obj, val) { if (val == 1) return "Item"; else if (val == 3) { return "Kit"; } else if (val == 4) { return "Labor"; } } });
        ColumnObject.push({ mDataProp: "IsStagingLocationCount", sClass: "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } });
        ColumnObject.push({ mDataProp: "ItemDescription", sClass: "read_only" });
        ColumnObject.push({
            "mDataProp": null,
            "sClass": "read_only NotHide",
            "bSortable": false,
            "bSearchable": false,
            "sDefaultContent": '',
            "fnRender": function (obj, val) {
                 if (obj.aData.IsApplied == true || obj.aData.IsApplied == 'Yes') {
                     var strReturn = "";
                     strReturn = strReturn + " <input type='hidden' id='hdnSupplierAccountNumber' value='" + obj.aData.SupplierAccountGuid + "'/>";
                     strReturn = strReturn + "<span name='spnSupplierAccountNo'>" + obj.aData.SupplierAccountNo + "</span>";
                     //strReturn = strReturn + "<span id='hdnSpnPullOrderNumber' style='display: none'></span>";
                     return strReturn;
                }
                 else {
                     var strReturn = "";
                     strReturn = strReturn + " <input type='hidden' id='hdnSupplierAccountNumber' value='" + obj.aData.SupplierAccountGuid + "'/>";
                     strReturn = strReturn + "<span style='position:relative'><input type='text' id='txtSupplierAccountNumber' class='text-boxinner AutoSupplierAccountNumber' style='width:120px;' value='" + obj.aData.SupplierAccountNo + "' />";
                     strReturn = strReturn + " <a id='lnkShowAllOptions' href='javascript:void(0);' style='position:absolute; right:5px; top:0px;' class='ShowAllOptionsSupplierAccountNumber' ><img src='/Content/images/arrow_down_black.png' alt='select' /></a></span>";
                     //strReturn = strReturn + "<span id='hdnSpnPullOrderNumber' style='display: none'></span>";
                     return strReturn;
                }
            }
        });

        ColumnObject.push(@(Html.RenderColumnsArrayForPullPO("PullPoMaster", FixedName: "txtPullOrderNumber", PrependComma: false)));
        ColumnObject.push(@Html.RenderColumnsArrayOnDemandEditableObject("PullMaster", false, isUDFOrderRequire: true));

        ColumnObject.push(@(Html.RenderColumnsArray("ItemMaster", false,"Item")))
        ColumnObject.push({mDataProp: "Created", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {return obj.aData.CreatedDate;}});
        ColumnObject.push({ mDataProp: "Updated", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) { return obj.aData.UpdatedDate; } });

        CntColumnObject = GetGridCountLineItemChildGridColumnsObject(CountLineItemDataTable);
        oTableMSItem = $('#' + CountLineItemDataTable).dataTable({
            "bJQueryUI": true,
            "sScrollX": "100%",
            "bScrollCollapse": true,
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>',
            "aaSorting": [[2, "asc"]],
            "oColReorder": {},
            "bAutoWidth": true,
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "bServerSide": true,
             "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'CountLineItem' },
                    "async": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);


                return nRow;
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": "/Master/LoadGridState",
                    "type": "POST",
                    data: { ListName: 'CountLineItem' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "sAjaxSource": '@Url.Content("~/Inventory/GetCountLineItems")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                aoData.push({ "name": "IcGuid", "value": '@Model.GUID' });
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        SetUDFSelectedCountLines(oSettings);
                        if ($("#MSLItem_filter").val() != '') {
                            $("#" + CountLineItemDataTable).find("td").highlight($("#MSLItem_filter").val());
                        }

                        $(".text-boxQuantityFormat").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
                        });
                        $(".text-boxQuantityFormatSR").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: 0
                        });

                        UDFfillEditableOptionsForGrid();

                        $('.ShowAllOptionsSupplierAccountNumber').click(function () {
                            $(this).siblings('.AutoSupplierAccountNumber').trigger("focus");
                            $(this).siblings(".AutoSupplierAccountNumber").autocomplete("search", " ");
                        });

                        $('.ShowAllOptionsOrderNumber').off("click");
                        $('.ShowAllOptionsOrderNumber').on("click", function () {
                            $(this).siblings('.AutoPullOrderNumber').trigger("focus");
                            $(this).siblings(".AutoPullOrderNumber").autocomplete("search", " ");
                        });

                        $("#pullOrdernumberLI #PullOrderNumber").on("change", function () {
                            if ($(this).val().length > 0) {
                                $("#txtPullOrderNumberCommon").attr("disabled", "disabled");
                                if ($("#TDPullOrderNumber a#lnkShowAllOptions") != undefined && $("#TDPullOrderNumber a#lnkShowAllOptions").length > 0) {
                                    $("#TDPullOrderNumber a#lnkShowAllOptions").attr("disabled", "disabled");
                                    $("#TDPullOrderNumber a#lnkShowAllOptions").off('click');
                                }
                                $("#txtPullOrderNumberCommon").css("background-color", "Silver");

                                //Inline items
                                if ($("#" + CountLineItemDataTable).length > 0) {
                                    if ($("#" + CountLineItemDataTable).find("#txtPullOrderNumber").length > 0) {
                                        $("#" + CountLineItemDataTable).find("#txtPullOrderNumber").attr("disabled", "disabled");
                                        $("#" + CountLineItemDataTable).find("#txtPullOrderNumber").css("background-color", "Silver");
                                        $("#" + CountLineItemDataTable).find("a#lnkShowAllOptions").off('click');

                                    }
                                }

                            } else {
                                $("#txtPullOrderNumberCommon").removeAttr("disabled");
                                if ($("#TDPullOrderNumber a#lnkShowAllOptions") != undefined && $("#TDPullOrderNumber a#lnkShowAllOptions").length > 0) {
                                    $("#TDPullOrderNumber a#lnkShowAllOptions").removeAttr("disabled");
                                    $("#TDPullOrderNumber a#lnkShowAllOptions").off('click').on('click', function () {
                                        $(this).siblings('.AutoPullOrderNumber').trigger("focus");
                                        $(this).siblings(".AutoPullOrderNumber").autocomplete("search", " ");
                                    });
                                }
                                $("#txtPullOrderNumberCommon").css("background-color", "White");

                                //Inline items
                                if ($("#" + CountLineItemDataTable).length > 0) {
                                    if ($("#" + CountLineItemDataTable).find("#txtPullOrderNumber").length > 0) {
                                        $("#" + CountLineItemDataTable).find("#txtPullOrderNumber").removeAttr("disabled");
                                        $("#" + CountLineItemDataTable).find("#txtPullOrderNumber").css("background-color", "White");
                                        $("#" + CountLineItemDataTable).find("a#lnkShowAllOptions").off('click');
                                        $("#" + CountLineItemDataTable).find("a#lnkShowAllOptions").on("click", function () {
                                            $(this).siblings('.AutoPullOrderNumber').trigger("focus");
                                            $(this).siblings(".AutoPullOrderNumber").autocomplete("search", " ");
                                        });
                                    }
                                }
                            }
                        });

                        $("#pullOrdernumberLI #PullOrderNumber").width("35%");
                        $("#pullOrdernumberLI #PullOrderNumber").trigger("change");

                    }
                })
            },
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis').detach().appendTo(".setting-arrow");
            },
            "aoColumns": ColumnObject
        }).makeEditable({
            fnShowError: function (errorText, action) {
            },
            sUpdateURL: function (value, settings) {

            }
        });
        $('.DTTT_container').css('z-index', '-1');

        $('#btnblock').css({ 'margin-right': '45px' });


        //$("#" + CountLineItemDataTable).on("click", "td.control", function (event) {
        //    var nTr = this.parentNode;
        //    var i = $.inArray(nTr, anOpenMS);
        //
        //    if (i === -1) {
        //        $('img', this).attr('src', sImageUrl + "drildown_close.jpg");
        //        oTableMSItem.fnOpen(nTr, fnFormatDetailsLI(oTableMSItem, nTr), '');
        //        anOpenMS.push(nTr);
        //    }
        //    else {
        //        $('img', this).attr('src', sImageUrl + "drildown_open.jpg");
        //        oTableMSItem.fnClose(nTr);
        //        anOpenMS.splice(i, 1);
        //    }
        //});

        $('#deleteRows1').click(function () {
            var tbl = $("#" + CountLineItemDataTable).dataTable();
            var anSelected = fnGetSelected1(tbl);
            var stringIDs = "";
            for (var i = 0; i <= anSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anSelected[i]).find("input[type='hidden'][name='hdnitmID']").val() + "_" + $(anSelected[i]).find("input[type='hidden'][name='hdnStagBinID']").val() + ",";
            }
            if (anSelected.length !== 0) {
                $('#mdlMSLIYesNo').modal();
                IsDeleteKLIPopupOpen = true;
            }

        });

        $("#btnMSLIYes").click(function () {
            //
            var tbl = $("#" + CountLineItemDataTable).dataTable();
            var anSelected = fnGetSelected1(tbl);
            var stringIDs = "";
            var stringGUIDs = "";
            for (var i = 0; i <= anSelected.length - 1; i++) {
                var aData = oTableMSItem.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + ",";
                stringGUIDs = stringGUIDs + aData.GUID + ",";
            }
            if (anSelected.length !== 0) {
                $.ajax({
                    url: '@Url.Content("~/Inventory/DeleteCountLineItems")',
                    type: "POST",
                    data: { ids: stringIDs, guids: stringGUIDs, CountGUId: '@Model.GUID' },
                    success: function (response) {

                        if (response.Status == "ok") {
                            for (var i = 0; i <= anSelected.length - 1; i++) {
                                tbl.fnDeleteRow(anSelected[i]);
                            }
                            if (anSelected.length > 0) {
                                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("@ResCommon.RecordDeletedSuccessfully".replace("{0}", "(" + anSelected.length + ")"));
                            }
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
                    },
                    error: function (response) {
                        //
                    }
                });
                QLcloseModal();
                IsDeleteKLIPopupOpen = false;
            }
        });

        $("#DivCountApplyPopup").dialog({
            autoOpen: false,
            show: "blind",
            hide: "explode",
            height: 700,
            title: "Count Apply Details",
            width: 900,
            modal: true,
            open: function () {
            },
            beforeClose: function () {
            },
            close: function () {
                //$('.ui-widget-overlay').css('position', 'absolute');
                //IsRefreshGrid = true;
                $('#DivLoading').hide();
                $("#DivCountApplyPopup").empty();
                $('#' + CountLineItemDataTable).dataTable().fnStandingRedraw();
            }
        });

        PopupForSerialLotItemContainer = $("#PopupForSerialLotItemContainer").dialog({
            autoOpen: false,
            modal: true,
            width: 1000,
            title: '',
            draggable: false,
            resizable: false,
            open: function () {
                setTimeout(function () {
                    LoadLotDetailPopupForCountAjax();
                }, 500);
                var titleBar = $("#PopupForSerialLotItemContainer").siblings(".ui-dialog-titlebar");
                titleBar.css("z-index", "999999")
                titleBar.css("background","#fff");
            },
            close: function () {
                //$('#PopupForSerialLotItemContainer').html('');
                $('#PopupForSerialLotItemContainer')[0].innerHTML = '';
                SelectedItemGuid = '';
                SelectedBinID = '';
                SelectedCountDetailGUID = null;
                SelectedDateCodeTracking = false;
                SelectedItemType = 0;
                SelectedCost = 0;
                SelectedSerialNumberTracking = false;
                SelectedLotNumberTracking = false;
                SelectedReceivedDate = null;
                SelectedBinNumber = null;
                SelectedMode = null;
            }
        });

        //$('.ShowAllOptionsOrderNumber').off("click");
        //$('.ShowAllOptionsOrderNumber').on("click", function () {
        //    $(this).siblings('.AutoPullOrderNumber').trigger("focus");
        //    $(this).siblings(".AutoPullOrderNumber").autocomplete("search", " ");
        //});

        $('#' + CountLineItemDataTable + ', #tblPullCommonUDF').off('focus', "input.AutoPullOrderNumber");
        $('#' + CountLineItemDataTable + ', #tblPullCommonUDF').on('focus', "input.AutoPullOrderNumber", function (e) {
            var ajaxURL = '/Pull/GetPullOrderNumberForNewPullGrid';
            var tr = $(this).parent().parent().parent();
            //var itmGuid = _NewConsumePull.getItemDataFromRow($(tr)).spnItemGUID; //$(tr).find('#spnItemGUID').text();

            var $this = $(this);

            _AutoCompleteWrapper.init($this
                , ajaxURL
                , function (request) {
                    var obj = JSON.stringify({ 'NameStartWith': request.term });
                    return obj;
                },
                function (data) {
                    return $.map(data, function (Items) {
                        return {
                            label: Items.Value,
                            value: Items.Value
                        }
                    })
                }
                , function (curVal, selectedItem) {
                    //        $(this).val(ui.item.value);
                    $(tr).addClass("RowChanged");
                    $(tr).find("input[type='hidden'][name='hdnRowState']").val("1");
                }
                , function (selectedItem) {

                }
                , true, true);
        });

        setTimeout(function () {
            $("#" + CountLineItemDataTable).on("change", "input,select,textarea", function () {
                $(this).parent().parent().find("input[type='hidden'][name='hdnRowState']").val("1");
                $(this).parent().parent().parent().find("input[type='hidden'][name='hdnRowState']").val("1");
            });
        }, 5000);
    });

    function ApplyOnSingleItem(btn) {
        ApplyCountToSingleItemNew(btn, 'NORMAL', true, true);
        setTimeout(function () {
            FnSendMailForApplyCount();
            AppliedLineItemGuids = new Array();
        }, 200);
    }

    function FnSendMailForApplyCount() {
        if (AppliedLineItemGuids != null && AppliedLineItemGuids.length > 0) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("SendMailForApplyCount", "Inventory")',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(AppliedLineItemGuids),
                "async": false,
                success: function (response) {
                }
            });
        }
    }

    function ApplyOnSingleItemNewFlow(btnobj) {
        ApplyCountToSingleItemNew(btnobj, 'LOT_SERIAL', true, true);
        setTimeout(function () {
            FnSendMailForApplyCount();
            AppliedLineItemGuids = new Array();
        }, 200);
        //$('#DivLoading').show();
        //
        //var aaritems = new Array();
        //var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';
        //
        //var aPos = oTableMSItem.fnGetPosition($(btnobj).parent()[0]);
        //var aData = oTableMSItem.fnGetData(aPos[0]);
        //var currentId = aData.ID;
        //var tbrow = $(btnobj).parent().parent();
        //
        //if ($(tbrow).find('#UDF1') != null) {
        //    if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
        //        vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
        //    }
        //    else {
        //        vUDF1 = $(tbrow).find('#UDF1').val();
        //    }
        //}
        //
        //if ($(tbrow).find('#UDF2') != null) {
        //    if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
        //        vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
        //    }
        //    else {
        //        vUDF2 = $(tbrow).find('#UDF2').val();
        //    }
        //}
        //
        //if ($(tbrow).find('#UDF3') != null) {
        //    if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
        //        vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
        //    }
        //    else {
        //        vUDF3 = $(tbrow).find('#UDF3').val();
        //    }
        //}
        //
        //if ($(tbrow).find('#UDF4') != null) {
        //    if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
        //        vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
        //    }
        //    else {
        //        vUDF4 = $(tbrow).find('#UDF4').val();
        //    }
        //}
        //
        //if ($(tbrow).find('#UDF5') != null) {
        //    if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
        //        vUDF4 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
        //    }
        //    else {
        //        vUDF5 = $(tbrow).find('#UDF5').val();
        //    }
        //}
        //if (typeof (vUDF1) == "undefined") {
        //    vUDF1 = '';
        //}
        //if (typeof (vUDF2) == "undefined") {
        //    vUDF2 = '';
        //}
        //if (typeof (vUDF3) == "undefined") {
        //    vUDF3 = '';
        //}
        //if (typeof (vUDF4) == "undefined") {
        //    vUDF4 = '';
        //}
        //if (typeof (vUDF5) == "undefined") {
        //    vUDF5 = '';
        //}
        //var isstageLoca = false;
        //if (aData.IsStagingLocationCount == "Yes") {
        //    isstageLoca = true;
        //}
        //
        //
        //if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
        //    aaritems.push({
        //        ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry
        //    , CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry)
        //    , UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true
        //    , IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, ItemNumber: aData.ItemNumber, LotNumberTracking: aData.LotNumberTracking
        //    , SerialNumberTracking: aData.SerialNumberTracking, BinNumber: aData.BinNumber, CountType: escape($("#CountType").val())
        //    });
        //}
        //else {
        //    aaritems.push({
        //        ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry
        //    , CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry)
        //    , UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false
        //    , IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, ItemNumber: aData.ItemNumber, LotNumberTracking: aData.LotNumberTracking
        //    , SerialNumberTracking: aData.SerialNumberTracking, BinNumber: aData.BinNumber, CountType: escape($("#CountType").val())
        //    });
        //}
        //
        //$.ajax({
        //    type: "POST",
        //    url: '@Url.Action("OpenApplyCountOnLineItemsPopup", "Inventory")',
        //    contentType: 'application/json',
        //    dataType: 'html',
        //    data: JSON.stringify(aaritems),
        //    success: function (RetData) {
        //        $("#DivCountApplyPopup").html("");
        //        $("#DivCountApplyPopup").html(RetData);
        //
        //        $("#DivCountApplyPopup").dialog('open');
        //        $('#DivLoading').hide();
        //    },
        //    error: function (err) {
        //        alert(err);
        //        $('#DivLoading').hide();
        //    }
        //});

    }

    function closeModalPSLimit() {
        $.modal.impl.close();
    }

    function GetUdfVal($udf) {
        var val = "";
        if ($udf != null) {
            if ($udf.attr("class") == 'selectBox') {
                val = $udf.find("option:selected").text(); //$("#UDF1PullCommon option:selected").text();
            }
            else {
                val = $udf.val();
            }
        }
        return val;
    }

    function ApplyCountToSingleItemNew(btnobj, ItemType, ShowLoading, HideLoding) {
        var callIsApplied = true;
        //var errorId = new Array();
        var errorIndex = 1;
        ApplyAllCountErrorMessage = '';
        $('#ApplyCountProcessing').modal();
        $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

        var aaritems = new Array();
        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '', vProjectSpendGUID='';

        var aPos = oTableMSItem.fnGetPosition($(btnobj).parent()[0]);
        var aData = oTableMSItem.fnGetData(aPos[0]);
        var currentId = aData.ID;
        var tbrow = $(btnobj).parent().parent();
        var vPullOrderNumber = "";
        var _ItemGUID = $(tbrow).find('#hdnItemGUID').val();

        if ($("#chkUsePullCommonUDF").is(":checked")) {
            vUDF1 = GetUdfVal($('#UDF1PullCommon'));
            vUDF2 = GetUdfVal($('#UDF2PullCommon'));
            vUDF3 = GetUdfVal($('#UDF3PullCommon'));
            vUDF4 = GetUdfVal($('#UDF4PullCommon'));
            vUDF5 = GetUdfVal($('#UDF5PullCommon'));

            if ($('#txtPullOrderNumberCommon') != null) {
                if ($('#txtPullOrderNumberCommon').attr("class") == 'selectBox') {
                    vPullOrderNumber = $('#txtPullOrderNumberCommon option:selected').text();
                }
                else {
                    vPullOrderNumber = $('#txtPullOrderNumberCommon').val();
                }
            }

            $(tbrow).find("input[type='hidden'][name='hdnRowState']").val("1");
        }
        else {
            if ($(tbrow).find('#UDF1') != null) {
                if ($(tbrow).find('#UDF1').attr("class") == 'selectBox' || $(tbrow).find('#UDF1').attr("class") == 'selectBox loadondemandudf') {
                    vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF1 = $(tbrow).find('#UDF1').val();
                }
            }

            if ($(tbrow).find('#UDF2') != null) {
                if ($(tbrow).find('#UDF2').attr("class") == 'selectBox' || $(tbrow).find('#UDF2').attr("class") == 'selectBox loadondemandudf') {
                    vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF2 = $(tbrow).find('#UDF2').val();
                }
            }

            if ($(tbrow).find('#UDF3') != null) {
                if ($(tbrow).find('#UDF3').attr("class") == 'selectBox' || $(tbrow).find('#UDF3').attr("class") == 'selectBox loadondemandudf') {
                    vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF3 = $(tbrow).find('#UDF3').val();
                }
            }

            if ($(tbrow).find('#UDF4') != null) {
                if ($(tbrow).find('#UDF4').attr("class") == 'selectBox' || $(tbrow).find('#UDF4').attr("class") == 'selectBox loadondemandudf') {
                    vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF4 = $(tbrow).find('#UDF4').val();
                }
            }

            if ($(tbrow).find('#UDF5') != null) {
                if ($(tbrow).find('#UDF5').attr("class") == 'selectBox' || $(tbrow).find('#UDF5').attr("class") == 'selectBox loadondemandudf') {
                    vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF5 = $(tbrow).find('#UDF5').val();
                }
            }

            if ($(tbrow).find('#txtPullOrderNumber') != null) {
                if ($(tbrow).find('#txtPullOrderNumber').attr("class") == 'selectBox') {
                    vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber option:selected').text();
                }
                else {
                    vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber').val();
                }
            }
        }

        if (vUDF1 == null || vUDF1 == undefined) {
            vUDF1 = "";
        }
        if (vUDF2 == null || vUDF2 == undefined) {
            vUDF2 = "";
        }
        if (vUDF3 == null || vUDF3 == undefined) {
            vUDF3 = "";
        }
        if (vUDF4 == null || vUDF4 == undefined) {
            vUDF4 = "";
        }
        if (vUDF5 == null || vUDF5 == undefined) {
            vUDF5 = "";
        }
        if (vPullOrderNumber == null || vPullOrderNumber == undefined)
        {
            vPullOrderNumber = "";
        }

        vProjectSpendGUID = $("#dlProjects").val();

        if ($("#dlCountType").val() == "M" && $("#pullOrdernumberLI #PullOrderNumber") != undefined && $("#pullOrdernumberLI #PullOrderNumber").val() != "" && $("#pullOrdernumberLI #PullOrderNumber").val().length > 0) {
            vPullOrderNumber = $("#pullOrdernumberLI #PullOrderNumber").val().trim();
        }

        var isstageLoca = false;
        if (aData.IsStagingLocationCount == "Yes") {
            isstageLoca = true;
        }

        var vPullSupplierAccountNumber = "";
        if ($(tbrow).find('#hdnSupplierAccountNumber') != null) {
            vPullSupplierAccountNumber = $(tbrow).find('#hdnSupplierAccountNumber').val();
        }

        if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
            aaritems.push({ ID: aData.ID, CountDetailGUID: aData.GUID, ItemGUID: _ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, InventoryCountGUID: '@Model.GUID', ItemLotSerialType: ItemType, LotNumberTracking: aData.LotNumberTracking, SerialNumberTracking: aData.SerialNumberTracking, ProjectSpendGUID: vProjectSpendGUID, SupplierAccountGuid: vPullSupplierAccountNumber, PullOrderNumber: vPullOrderNumber });
        }
        else {
            aaritems.push({ ID: aData.ID, CountDetailGUID: aData.GUID, ItemGUID: _ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, InventoryCountGUID: '@Model.GUID', ItemLotSerialType: ItemType, LotNumberTracking: aData.LotNumberTracking, SerialNumberTracking: aData.SerialNumberTracking, ProjectSpendGUID: vProjectSpendGUID, SupplierAccountGuid: vPullSupplierAccountNumber, PullOrderNumber: vPullOrderNumber });
        }

        var BinNum = '';
        BinNum = aData.BinNumber;
        var myDate = new Date();
        var prettyDate = (myDate.getMonth() + 1) + '/' + myDate.getDate() + '/' + myDate.getFullYear();

        if (ShowLoading == true)
            $('div#DivLoading').show();

        if (aaritems.length > 0) {
            if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("IcLineItemsSave", "Inventory")',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(aaritems),
                    success: function (responce) {

                        if (responce.Status == "ok") {
                            $.ajax({
                                type: "POST",
                                url: '@Url.Action("ApplyCountOnLineItemsNew", "Inventory")',
                                contentType: 'application/json',
                                dataType: 'json',
                                data: JSON.stringify(aaritems),
                                "async": false,
                                success: function (responce) {
                                    if (responce.Status == 'ok') {
                                        AppliedLineItemGuids.push({GUID: aData.GUID, CountName: aData.CountName});
                                    }
                                    //PostApplyAction(responce.CurrentObj);
                                    if (HideLoding == true) {

                                        if (responce.Status == 'ok') {
                                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text('@ResInventoryCountDetail.ApplyCountSuccessfully');
                                            $('div#target').fadeToggle();
                                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                        }
                                        else {
                                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                            $('div#target').fadeToggle();
                                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                        }

                                        closeCountInfoModel();
                                        oTableMSItem.fnDraw();

                                        $.ajax({
                                            "url": '@Url.Content("~/Inventory/CheckUnappliedLineItem")',
                                            data: { 'CountLineItem': '@Model.GUID' },
                                            //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                                            "async": false,
                                            type: "POST",
                                            cache: false,
                                            "dataType": "json",
                                            success: function (response) {
                                                if (!response.Result) {
                                                    $("div.userContent").find("input#btnApplyAll").hide();
                                                }
                                                else {
                                                    $("div.userContent").find("input#btnApplyAll").show();
                                                }
                                            }
                                        });
                                    }

                                    if (responce.IsCountClosed == true) {
                                        ShowEditTabGUID("InventoryCountEdit?IcGuid=@Model.GUID", "frmInventoryCount")
                                    }

                                    //objInventoryCountDetailDTO = responce.CurrentObj;
                                    //$.ajax({
                                    //    type: "POST",
                                    //    url: '@Url.Action("ApplyOnCountLineItem", "Inventory")',
                                    //    contentType: 'application/json',
                                    //    dataType: 'json',
                                    //    data: JSON.stringify(objInventoryCountDetailDTO),
                                    //    "async": false,
                                    //    success: function (responce) {
                                    //
                                    //        PostApplyAction(responce.CurrentObj);
                                    //        closeCountInfoModel();
                                    //        oTableMSItem.fnDraw();
                                    //    },
                                    //    error: function (err) {
                                    //        closeCountInfoModel();
                                    //        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                    //        $('div#target').fadeToggle();
                                    //        $("div#target").delay(2000).fadeOut(200);
                                    //    }
                                    //});

                                },
                                error: function (err) {
                                    closeCountInfoModel();
                                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                    $('div#target').fadeToggle();
                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                }
                            });
                        }
                        else {
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
                    },
                    error: function (err) {
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                });

            }
            else {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ApplyCountOnLineItemsNew", "Inventory")',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(aaritems),
                    "async": false,
                    success: function (responce) {
                        if (responce.Status == 'ok') {
                            AppliedLineItemGuids.push({ GUID: aData.GUID, CountName: aData.CountName });
                        }
                        //PostApplyAction(responce.CurrentObj);
                        if (HideLoding == true) {

                            if (responce.Status == 'ok') {
                                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text('@ResInventoryCountDetail.ApplyCountSuccessfully');
                                $('div#target').fadeToggle();
                                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            }
                            else {
                                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                $('div#target').fadeToggle();
                                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            }

                            closeCountInfoModel();
                            oTableMSItem.fnDraw();

                            $.ajax({
                                "url": '@Url.Content("~/Inventory/CheckUnappliedLineItem")',
                                data: { 'CountLineItem': '@Model.GUID' },
                                //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                                "async": false,
                                type: "POST",
                                cache: false,
                                "dataType": "json",
                                success: function (response) {
                                    if (!response.Result) {
                                        $("div.userContent").find("input#btnApplyAll").hide();
                                    }
                                    else {
                                        $("div.userContent").find("input#btnApplyAll").show();
                                    }
                                }
                            });
                        }

                        if (responce.IsCountClosed == true) {
                            ShowEditTabGUID("InventoryCountEdit?IcGuid=@Model.GUID", "frmInventoryCount")
                        }

                        //objInventoryCountDetailDTO = responce.CurrentObj;
                        //$.ajax({
                        //    type: "POST",
                        //    url: '@Url.Action("ApplyOnCountLineItem", "Inventory")',
                        //    contentType: 'application/json',
                        //    dataType: 'json',
                        //    data: JSON.stringify(objInventoryCountDetailDTO),
                        //    "async": false,
                        //    success: function (responce) {
                        //
                        //        PostApplyAction(responce.CurrentObj);
                        //        closeCountInfoModel();
                        //        oTableMSItem.fnDraw();
                        //    },
                        //    error: function (err) {
                        //        closeCountInfoModel();
                        //        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        //        $('div#target').fadeToggle();
                        //        $("div#target").delay(2000).fadeOut(200);
                        //    }
                        //});

                    },
                    error: function (err) {
                        closeCountInfoModel();
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                });
            }
        }

        //$.each(errorId, function (index, value) {
        //    $.ajax({
        //        "url": '@Url.Content("~/Inventory/UnApplieIDbyID")',
        //        data: { ID: value, IsApplied: false },
        //        //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
        //        "async": false,
        //        cache: false,
        //        "dataType": "json",
        //        success: function (response) {
        //
        //        }
        //    });
        //});
    }
    function ApplyCountToSingleItemNew1(btnobj) {
        var callIsApplied = true;
        var errorId = new Array(); var errorIndex = 1;
        ApplyAllCountErrorMessage = '';
        $('#ApplyCountProcessing').modal();
        $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

        var aaritems = new Array();
        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';

        var aPos = oTableMSItem.fnGetPosition($(btnobj).parent()[0]);
        var aData = oTableMSItem.fnGetData(aPos[0]);
        var currentId = aData.ID;
        var tbrow = $(btnobj).parent().parent();
        if ($("#chkUsePullCommonUDF").is(":checked")) {
            vUDF1 = GetUdfVal($('#UDF1PullCommon'));
            vUDF2 = GetUdfVal($('#UDF2PullCommon'));
            vUDF3 = GetUdfVal($('#UDF3PullCommon'));
            vUDF4 = GetUdfVal($('#UDF4PullCommon'));
            vUDF5 = GetUdfVal($('#UDF5PullCommon'));
            $(tbrow).find("input[type='hidden'][name='hdnRowState']").val("1");
        }
        else {
            if ($(tbrow).find('#UDF1') != null) {
                if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF1 = $(tbrow).find('#UDF1').val();
                }
            }

            if ($(tbrow).find('#UDF2') != null) {
                if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF2 = $(tbrow).find('#UDF2').val();
                }
            }

            if ($(tbrow).find('#UDF3') != null) {
                if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF3 = $(tbrow).find('#UDF3').val();
                }
            }

            if ($(tbrow).find('#UDF4') != null) {
                if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF4 = $(tbrow).find('#UDF4').val();
                }
            }

            if ($(tbrow).find('#UDF5') != null) {
                if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF5 = $(tbrow).find('#UDF5').val();
                }
            }
        }


        if (vUDF1 == null || vUDF1 == undefined) {
            vUDF1 = "";
        }
        if (vUDF2 == null || vUDF2 == undefined) {
            vUDF2 = "";
        }
        if (vUDF3 == null || vUDF3 == undefined) {
            vUDF3 = "";
        }
        if (vUDF4 == null || vUDF4 == undefined) {
            vUDF4 = "";
        }
        if (vUDF5 == null || vUDF5 == undefined) {
            vUDF5 = "";
        }


        var isstageLoca = false;
        if (aData.IsStagingLocationCount == "Yes") {
            isstageLoca = true;
        }

        var vPullSupplierAccountNumber = "";
        if ($(tbrow).find('#hdnSupplierAccountNumber') != null) {
            vPullSupplierAccountNumber = $(tbrow).find('#hdnSupplierAccountNumber').val();
        }

        if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
            aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber });
        }
        else {
            aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber });
        }

        var BinNum = '';
        BinNum = aData.BinNumber;
        var myDate = new Date();
        var prettyDate = (myDate.getMonth() + 1) + '/' + myDate.getDate() + '/' + myDate.getFullYear();
        $('div#DivLoading').show();

        if (aaritems.length > 0) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("IcLineItemsSave", "Inventory")',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(aaritems),
                success: function (responce) {

                    if (responce.Status == "ok") {
                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("ApplyCountOnLineItemsNew", "Inventory")',
                            contentType: 'application/json',
                            dataType: 'json',
                            data: JSON.stringify(aaritems),
                            "async": false,
                            success: function (responce) {

                                if (responce.Status == 'ok') {
                                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text('@ResInventoryCountDetail.ApplyCountSuccessfully');
                                    $('div#target').fadeToggle();
                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                }
                                else {
                                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                    $('div#target').fadeToggle();
                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                }

                                objInventoryCountDetailDTO = responce.CurrentObj;
                                var arrResponce = responce.Status;
                                var arrResult = arrResponce.split(',');
                                var Status1 = '';
                                var Status2 = '';
                                var Status1Proceed = false;
                                var Status2Proceed = false;

                                if (arrResult.length > 1) {
                                    Status1 = arrResult[0];
                                    Status2 = arrResult[1];

                                    if (Status1 == "pull") {
                                        Status1Proceed = true;
                                        var PullCreditType = "pull";
                                        closeCountInfoModel();
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "adjustpull";
                                        }

                                        $.ajax({
                                            "url": '@Url.Content("~/Pull/UpdatePullDataForCountNew")',
                                            data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.ConsignedDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.ConsignedDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID, IsConsinedPull: true, CountType: $("select#dlCountType").val() },
                                            "async": false,
                                            cache: false,
                                            "dataType": "json",
                                            success: function (response) {
                                                $('div#DivLoading').hide();

                                                if (response.Status == "ok") {
                                                    if (response.LocationMSG != "") {
                                                        //                                            if (response.PSLimitExceed) {
                                                        //                                                $("#PSPlimit").text(response.LocationMSG + " " + "do you want to create new requisition for the same ?");
                                                        //                                                $('#project-spend-limit-basic-modal-content').modal();
                                                        //                                            }
                                                        //                                            else {
                                                        ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.locationMSG + " </b>";
                                                        //alert(response.LocationMSG);
                                                        // }
                                                    }
                                                    UDFInsertNewForGrid(tbrow);
                                                }
                                                else {
                                                    //                                        $("#spanGlobalMessage").text(response.Message);
                                                    //                                        $('div#target').fadeToggle();
                                                    //                                        $("div#target").delay(2000).fadeOut(200);
                                                    //                                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                                                    Status1Proceed = false;
                                                    ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                                    errorId.push(currentId);
                                                }
                                            },
                                            error: function (response) {
                                                //                                    $('div#DivLoading').hide();
                                                //                                    $("#spanGlobalMessage").text(response.message);
                                                //                                    $('div#target').fadeToggle();
                                                //                                    $("div#target").delay(2000).fadeOut(200);
                                                Status1Proceed = false;
                                                ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                                errorId.push(currentId);
                                            }
                                        });
                                    }

                                    if (Status1 == "ok") {
                                        Status1Proceed = true;
                                    }

                                    if (Status2 == "pull") {
                                        Status2Proceed = true;
                                        var PullCreditType = "pull";
                                        closeCountInfoModel();
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "adjustpull";
                                        }

                                        $.ajax({
                                            "url": '@Url.Content("~/Pull/UpdatePullDataForCountNew")',
                                            data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.CusOwnedDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.CusOwnedDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID, IsConsinedPull: false, CountType: $("select#dlCountType").val() },
                                            "async": false,
                                            cache: false,
                                            "dataType": "json",
                                            success: function (response) {
                                                $('div#DivLoading').hide();

                                                if (response.Status == "ok") {
                                                    if (response.LocationMSG != "") {
                                                        //                                            if (response.PSLimitExceed) {
                                                        //                                                $("#PSPlimit").text(response.LocationMSG + " " + "do you want to create new requisition for the same ?");
                                                        //                                                $('#project-spend-limit-basic-modal-content').modal();
                                                        //                                            }
                                                        //                                            else {
                                                        ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.locationMSG + " </b>";
                                                        //alert(response.LocationMSG);
                                                        //}
                                                    }
                                                    UDFInsertNewForGrid(tbrow);
                                                }
                                                else {
                                                    //                                        $("#spanGlobalMessage").text(response.Message);
                                                    //                                        $('div#target').fadeToggle();
                                                    //                                        $("div#target").delay(2000).fadeOut(200);
                                                    errorIndex = errorIndex + 1;
                                                    //$("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                                                    ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                                    Status2Proceed = false;
                                                    errorId.push(currentId);
                                                }
                                            },
                                            error: function (response) {
                                                //                                    $('div#DivLoading').hide();
                                                //                                    $("#spanGlobalMessage").text(response.message);
                                                //                                    $('div#target').fadeToggle();
                                                //                                    $("div#target").delay(2000).fadeOut(200);
                                                errorIndex = errorIndex + 1;
                                                Status2Proceed = false;
                                                ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                                errorId.push(currentId);
                                            }
                                        });
                                    }
                                    if (Status2 == "ok") {
                                        Status2Proceed = true;
                                    }
                                    if ((Status1 == "credit") || (Status2 == "credit") || (Status1 == "credit" && Status2 == "credit")) {
                                        callIsApplied = false;
                                        if (Status1 == "credit") {
                                            Status1Proceed = true;
                                        }
                                        if (Status2 == "credit") {
                                            Status2Proceed = true;
                                        }

                                        // open credit popup
                                        var itemId = responce.CurrentObj.ItemGUID;
                                        var itemType = responce.CurrentObj.ItemType;
                                        var BinId = responce.CurrentObj.BinID;
                                        var TotalCountQty = responce.CurrentObj.CusOwnedDifference;
                                        var TotalCountQty1 = responce.CurrentObj.ConsignedDifference;
                                        var CountedConsQty = responce.CurrentObj.CountConsignedQuantity;//Value of Count user input Consinged Qty
                                        var CountedCustQty = responce.CurrentObj.CountCustomerOwnedQuantity;//Value Of Count User input CustomerOwned Qty
                                        var ActualConsQty = responce.CurrentObj.ConsignedQuantity;//Actual Item's Consined Qty Value
                                        var ActualCustQty = responce.CurrentObj.CustomerOwnedQuantity;//Actual Item's Customer Qty Value
                                        var idtype = itemId + '#' + itemType.toString() + '#' + ' ' + ' #' + BinId.toString() + "#frompullcredit_forcount" + "#" + responce.CurrentObj.TotalDifference + "#" + responce.CurrentObj.GUID + "#" + TotalCountQty + "#" + TotalCountQty1 + "#" + CountedConsQty + "#" + CountedCustQty + "#" + ActualConsQty + "#" + ActualCustQty + "#" + Status1Proceed + "#" + Status2Proceed; // + "#" + response.CurrentObj.CountConsignedQuantity;
                                        closeCountInfoModel();

                                        var PullCreditType = "credit";
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "adjcredit";
                                        }

                                        //ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                        var arr = new Array();
                                        arr.push({
                                            ItemGUID: itemId, BinID: BinId, BinNumber: BinNum, Received: prettyDate, SerialNumberTracking: false, LotNumberTracking: false
                                        , CountCustOrConsQty: TotalCountQty + TotalCountQty1, ConsignedQuantity: TotalCountQty1, CustomerOwnedQuantity: TotalCountQty, IsCreditPull: true
                                        , CountLineItemDtlGUID: responce.CurrentObj.GUID
                                        });
                                        //for general item credit will occur in backgrond no need to open popup
                                        $('div#DivLoading').show();
                                        $.ajax({
                                            "url": '@Url.Content("~/Inventory/ItemLocationDetailsSaveForCreditPull")',
                                            data: "{ 'objData': " + JSON.stringify(arr) + ", 'PullCreditType': '" + PullCreditType + "' }",
                                            type: 'Post',
                                            "async": false,
                                            contentType: 'application/json',
                                            cache: false,
                                            "dataType": "json",
                                            success: function (responce1) {
                                                $('div#DivLoading').hide();
                                                if (responce1.Status == 'OK') {
                                                    if (Status2 == "credit")
                                                        Status2Proceed = true;
                                                    if (Status1 == "credit")
                                                        Status1Proceed = true;
                                                    IscallApplied = true;
                                                    if (Status1Proceed == true && Status2Proceed == true && IscallApplied) {
                                                        PostApplyAction(responce.CurrentObj);
                                                    }

                                                }
                                            }, complete: function () {

                                                $('div#DivLoading').show();
                                            }
                                        });


                                        //                            var PullCreditType = "credit";
                                        //                            if ($("#CountType").val() == "A") {
                                        //                                PullCreditType = "adjcredit";
                                        //                            }
                                        //                            idtype = idtype + '#' + PullCreditType;
                                        //                            $('div#DivLoading').show();
                                        //                            $('#LocationDetails').load('../Inventory/LocationDetailsNew', { ItemID_ItemType: idtype }, function () {

                                        //                                $('#LocationDetails').dialog('open');
                                        //                                $('div#DivLoading').hide();
                                        //                            });
                                    }
                                    if ((Status1 == "creditms") || (Status2 == "creditms") || (Status1 == "creditms" && Status2 == "creditms")) {
                                        // open credit MS popup
                                        callIsApplied = false;
                                        var itemId = aData.ItemGUID;
                                        var itemType = aData.ItemType;

                                        var idtype = itemId + '%23' + itemType; //+ '%23' +  'frompullcreditMS' ;
                                        var PullCreditType = "MS Credit";
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "AdMSCredit";
                                        }
                                        idtype = idtype + '%23' + PullCreditType;
                                        closeCountInfoModel();
                                        $('div#DivLoading').show();
                                        $('#LocationDetails').load('../Inventory/LocationDetailsMS?ItemID_ItemType=' + idtype, function () {

                                            $('#LocationDetails').dialog('open');
                                            $('div#DivLoading').hide();
                                            IsRefreshGrid = true;
                                        });
                                        // return false;

                                    }
                                    if (ApplyAllCountErrorMessage != '') {
                                        FinalErr = "<b>Please select row </b>";
                                        FinalErr = FinalErr + ApplyAllCountErrorMessage;
                                        $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(FinalErr);
                                        closeCountInfoModel();
                                        $('#ApplyCountInfoDialog').modal();
                                    }
                                    else if (Status1Proceed == true && Status2Proceed == true && callIsApplied == true) {
                                        closeCountInfoModel();
                                        $('div#target').fadeToggle();
                                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                        $("#spanGlobalMessage").html("@ResInventoryCountDetail.AllCountAppliedonItems".replace("({0})",""));
                                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                                        ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                        PostApplyAction(responce.CurrentObj);
                                    }
                                }

                                if (responce.IsCountClosed == true) {
                                    ShowEditTabGUID("InventoryCountEdit?IcGuid=@Model.GUID", "frmInventoryCount")
                                }
                            },
                            error: function (err) {
                                closeCountInfoModel();
                                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                $('div#target').fadeToggle();
                                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            }
                        });
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                },
                error: function (err) {

                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
            });
        }

        $.each(errorId, function (index, value) {
            $.ajax({
                "url": '@Url.Content("~/Inventory/UnApplieIDbyID")',
                data: { ID: value, IsApplied: false },
                //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                "async": false,
                cache: false,
                "dataType": "json",
                success: function (response) {
                }
            });
        });
    }
    function ApplyCountToSingleItem(btnobj) {
        $('#ApplyCountProcessing').modal();
        $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

        var aaritems = new Array();
        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';

        var aPos = oTableMSItem.fnGetPosition($(btnobj).parent()[0]);
        var aData = oTableMSItem.fnGetData(aPos[0]);
        var tbrow = $(btnobj).parent().parent();
        if ($("#chkUsePullCommonUDF").is(":checked")) {
            vUDF1 = GetUdfVal($('#UDF1PullCommon'));
            vUDF2 = GetUdfVal($('#UDF2PullCommon'));
            vUDF3 = GetUdfVal($('#UDF3PullCommon'));
            vUDF4 = GetUdfVal($('#UDF4PullCommon'));
            vUDF5 = GetUdfVal($('#UDF5PullCommon'));
            $(tbrow).find("input[type='hidden'][name='hdnRowState']").val("1");
        }
        else {
            if ($(tbrow).find('#UDF1') != null) {
                if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF1 = $(tbrow).find('#UDF1').val();
                }
            }

            if ($(tbrow).find('#UDF2') != null) {
                if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF2 = $(tbrow).find('#UDF2').val();
                }
            }

            if ($(tbrow).find('#UDF3') != null) {
                if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF3 = $(tbrow).find('#UDF3').val();
                }
            }

            if ($(tbrow).find('#UDF4') != null) {
                if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF4 = $(tbrow).find('#UDF4').val();
                }
            }

            if ($(tbrow).find('#UDF5') != null) {
                if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF5 = $(tbrow).find('#UDF5').val();
                }
            }
        }


        if (vUDF1 == null || vUDF1 == undefined) {
            vUDF1 = "";
        }
        if (vUDF2 == null || vUDF2 == undefined) {
            vUDF2 = "";
        }
        if (vUDF3 == null || vUDF3 == undefined) {
            vUDF3 = "";
        }
        if (vUDF4 == null || vUDF4 == undefined) {
            vUDF4 = "";
        }
        if (vUDF5 == null || vUDF5 == undefined) {
            vUDF5 = "";
        }


        var isstageLoca = false;
        if (aData.IsStagingLocationCount == "Yes") {
            isstageLoca = true;
        }

        var vPullSupplierAccountNumber = "";
        if ($(tbrow).find('#hdnSupplierAccountNumber') != null) {
            vPullSupplierAccountNumber = $(tbrow).find('#hdnSupplierAccountNumber').val();
        }

        if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
            aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber });
        }
        else {
            aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber });
        }



        if (aaritems.length > 0) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("IcLineItemsSave", "Inventory")',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(aaritems),
                success: function (responce) {

                    if (responce.Status == "ok") {
                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("ApplyCountOnLineItemsNew", "Inventory")',
                            //                url: '@Url.Action("ApplyCountOnLineItems", "Inventory")',
                            contentType: 'application/json',
                            dataType: 'json',
                            data: JSON.stringify(aaritems),
                            "async": false,
                            success: function (responce) {

                                if (responce.Status == 'ok') {
                                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text('@ResInventoryCountDetail.ApplyCountSuccessfully');
                                    $('div#target').fadeToggle();
                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                }
                                else {
                                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                    $('div#target').fadeToggle();
                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                }

                                var arrResponce = responce.Status;
                                var arrResult = arrResponce.split(',');
                                for (var i1 = 0; i1 < arrResult.length; i1++) {
                                    var StatusType = '';
                                    StatusType = arrResult[i1];
                                    // if (responce.Status == "pull") {
                                    if (StatusType == "pull") {
                                        closeCountInfoModel();
                                        // call the update pull

                                        ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////START
                                        var PullCreditType = "pull";
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "adjustpull";
                                        }
                                        $.ajax({
                                            "url": '@Url.Content("~/Pull/UpdatePullDataForCount")',
                                            data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                                            //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: "pull", TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: "", UDF2: "", UDF3: "", UDF4: "", UDF5: "", RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                                            "async": false,
                                            cache: false,
                                            "dataType": "json",
                                            success: function (response) {

                                                //alert(response.Status);
                                                $('div#DivLoading').hide();
                                                if (response.Status == "ok") {
                                                    if (response.LocationMSG != "") {
                                                        if (response.PSLimitExceed) {
                                                            // write code to redirect to requisition with confirm box
                                                            $("#PSPlimit").text(response.LocationMSG + " " + "do you want to create new requisition for the same ?");
                                                            $('#project-spend-limit-basic-modal-content').modal();
                                                        }
                                                        else {
                                                            alert(response.LocationMSG);

                                                        }
                                                    }
                                                    else {
                                                        $('div#target').fadeToggle();
                                                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                                        $("#spanGlobalMessage").html(response.Message);
                                                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                                                        PostApplyAction(responce.CurrentObj);
                                                    }
                                                }
                                                else {
                                                    $("#spanGlobalMessage").html(response.Message);
                                                    $('div#target').fadeToggle();
                                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                                                }
                                                //txxt.val(VspnDefaultPullQuantity);
                                            },
                                            error: function (response) {
                                                $('div#DivLoading').hide();
                                                $("#spanGlobalMessage").html(response.message);
                                                $('div#target').fadeToggle();
                                                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                            }
                                        });
                                        ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////END
                                    }
                                    else if (StatusType == "credit") {
                                        // open credit popup
                                        var itemId = responce.CurrentObj.ItemGUID;
                                        var itemType = responce.CurrentObj.ItemType;
                                        var BinId = responce.CurrentObj.BinID;
                                        var TotalCountQty = responce.CurrentObj.CusOwnedDifference;
                                        var TotalCountQty1 = responce.CurrentObj.ConsignedDifference;
                                        var CountedConsQty = responce.CurrentObj.CountConsignedQuantity;//Value of Count user input Consinged Qty
                                        var CountedCustQty = responce.CurrentObj.CountCustomerOwnedQuantity;//Value Of Count User input CustomerOwned Qty
                                        var ActualConsQty = responce.CurrentObj.ConsignedQuantity;//Actual Item's Consined Qty Value
                                        var ActualCustQty = responce.CurrentObj.CustomerOwnedQuantity;//Actual Item's Customer Qty Value
                                        var idtype = itemId + '#' + itemType.toString() + '#' + ' ' + ' #' + BinId.toString() + "#frompullcredit_forcount" + "#" + responce.CurrentObj.TotalDifference + "#" + responce.CurrentObj.GUID + "#" + TotalCountQty + "#" + TotalCountQty1 + "#" + CountedConsQty + "#" + CountedCustQty + "#" + ActualConsQty + "#" + ActualCustQty; // + "#" + response.CurrentObj.CountConsignedQuantity;
                                        closeCountInfoModel();
                                        //                        var idtype = itemId + '%23' + itemType + '%23' + 'frompullcredit';
                                        var PullCreditType = "credit";
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "adjcredit";
                                        }
                                        idtype = idtype + '#' + PullCreditType;
                                        $('div#DivLoading').show();
                                        //$('#LocationDetails').load('../Inventory/LocationDetails?ItemID_ItemType=' + idtype, function () {
                                        $('#LocationDetails').load('../Inventory/LocationDetailsNew', { ItemID_ItemType: idtype }, function () {

                                            $('#LocationDetails').dialog('open');
                                            $('div#DivLoading').hide();
                                            IsRefreshGrid = true;
                                        });
                                        return false;

                                    }
                                    else if (StatusType == "creditms") {
                                        // open credit MS popup

                                        var itemId = aData.ItemGUID;
                                        var itemType = aData.ItemType;

                                        var idtype = itemId + '%23' + itemType; //+ '%23' +  'frompullcreditMS' ;
                                        var PullCreditType = "MS Credit";
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "AdMSCredit";
                                        }
                                        idtype = idtype + '%23' + PullCreditType;
                                        closeCountInfoModel();
                                        $('div#DivLoading').show();
                                        $('#LocationDetails').load('../Inventory/LocationDetailsMS?ItemID_ItemType=' + idtype, function () {

                                            $('#LocationDetails').dialog('open');
                                            $('div#DivLoading').hide();
                                            IsRefreshGrid = true;
                                        });
                                        return false;

                                    }
                                    else if (StatusType == "ok") {
                                        //                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("Count is applied on (" + aaritems.length + ") items successfully.");
                                        //                        $('div#target').fadeToggle();
                                        //                        $("div#target").delay(2000).fadeOut(200);
                                        //                        oTableMSItem.fnDraw();
                                        //                        PostApplyAction(responce.CurrentObj);
                                        closeCountInfoModel();
                                        $('div#target').fadeToggle();
                                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                        $("#spanGlobalMessage").html("@ResInventoryCountDetail.AllCountAppliedonItems".replace("{0}",aaritems.length ));
                                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                                        ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                        PostApplyAction(responce.CurrentObj);


                                    }
                                    else {
                                        closeCountInfoModel();
                                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                        $('div#target').fadeToggle();
                                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                    }
                                }

                                if (responce.IsCountClosed == true) {
                                    ShowEditTabGUID("InventoryCountEdit?IcGuid=@Model.GUID", "frmInventoryCount")
                                }
                            },
                            error: function (err) {
                                closeCountInfoModel();
                                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                $('div#target').fadeToggle();
                                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            }
                        });
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                },
                error: function (err) {

                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
            });
        }
    }
    function CountDifference(ID, CountConsignedQty, CountCutOwnedQty) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("UpdateCountCalculations", "Inventory")',
            contentType: 'application/json',
            dataType: 'json',
            data: "{ID:'" + ID + "',CountConsignedQty:'" + CountConsignedQty + "' , CountCutOwnedQty: '" + CountCutOwnedQty + "'}",
            success: function (responce) {

            },
            error: function (err) {
                //
                //                alert("There is some Error");
            }
        });
    }

    function PostApplyAction(objdtl) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("PostApplyAction", "Inventory")',
            contentType: 'application/json',
            dataType: 'json',
            data: JSON.stringify(objdtl),
            success: function (responce) {
                oTableMSItem.fnDraw();
            },
            error: function (responce) {

            }
        });
    }
    function CustownedCountLI(obj) {

        if (oTableMSItem != undefined) {
            var aPos = oTableMSItem.fnGetPosition($(obj).parent()[0]);
            var aData = oTableMSItem.fnGetData(aPos[0]);
            aData.CountCustomerOwnedQuantityEntry = $(obj).val();



        }
    }
    function ConsignedCountLI(obj) {

        if (oTableMSItem != undefined) {
            var aPos = oTableMSItem.fnGetPosition($(obj).parent()[0]);
            var aData = oTableMSItem.fnGetData(aPos[0]);
            aData.CountConsignedQuantityEntry = $(obj).val();
            //            $(obj).parent().parent().find("input[type='hidden'][name='hdnRowState']").val("1");
        }
    }

    function DescriptionChnagesLI(obj) {

        if (oTableMSItem != undefined) {
            var aPos = oTableMSItem.fnGetPosition($(obj).parent()[0]);
            var aData = oTableMSItem.fnGetData(aPos[0]);
            aData.CountLineItemDescriptionEntry = $(obj).val();
            //            $(obj).parent().parent().find("input[type='hidden'][name='hdnRowState']").val("1");
        }
    }
    function openLocPop(itemid) {
        var selectedStagBin = $(curobj).parent().parent().find("input[type='hidden'][name='hdnStagingBin']").val();
        if (selectedStagBin != undefined && selectedStagBin != "") {

            $('#dvItemLocations').data("data", itemid + "~" + '@Model.ID').dialog('open');
        }
    }
    //    function SetChangedData(curobj) {

    //        var aPos = oTableMSItem.fnGetPosition($(curobj).parent()[0]);
    //        var aData = oTableMSItem.fnGetData(aPos[0]);
    //        setTimeout(function () { alert(curobj.value); }, 50)
    //    }
    function CallThisFunctionFromModel(msg) {
        if (msg == 'success') {
            $("#" + CountLineItemDataTable).DataTable().fnDraw();
        }
        else if (msg.Status == 'fail') {
            alert(json.Message);
            return false;
        }
    }

    function updateMSLineItem(itmId, curobj) {
        if (itmId != undefined) {
            var aPos = $('#' + CountLineItemDataTable).dataTable().fnGetPosition($(curobj).parent()[0]);
            var aData = $('#' + CountLineItemDataTable).dataTable().fnGetData(aPos[0]);
            var msbinID = $(curobj).parent().parent().find("input[type='hidden'][name='hdnStagingBin']").val();
            var msbinName = $(curobj).parent().parent().find("input[type='text'][name='txtLineItemStagingBin']").val();
            if (msbinName != "") {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("UpdateStagingLineItem", "Inventory")',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: "{MsID:'" + parseInt('@Model.ID') + "' , ItmID: '" + itmId + "', msbinID: '" + aData.StagingBinID + "', StagingBinName: '" + msbinName + "'}",
                    success: function (retdt) {
                        $("#" + CountLineItemDataTable).DataTable().fnDraw();
                    },
                    error: function (err) {
                        //
                        alert("There is some Error");
                    }
                });
            }
            else {
                alert("Enter staging location");
            }
        }
        else {
            alert("there is some error.");
        }
    }

    //    function setnametohidden(curobj) {
    //        $(curobj).parent().find("input[type='hidden'][name='hdnStagingBinName']").val(curobj.value);

    //    }

    var NotAllowedCharCodes = [9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40];
    var bIsFilter = false;
    var timeoutsc11;

    $("#MSLItem_filter").bind("textchange", function () {
        clearTimeout(timeoutsc11);
        var self = this;
        timeoutsc11 = setTimeout(function () {
            fnFilterMS();
        }, 200);
    });

    $(".searchBlock").on({
        keydown: function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                var searchtext = $("#MSLItem_filter").val().replace(/'/g, "''");
                oTableMSItem.fnFilter(searchtext,
                                        null,
                                        null,
                                        null
                                    );
                return false;
            }
        }

    }, "#MSLItem_filter");

    $("#clear_MSLItem_filter").click(function () {
        if ($("#MSLItem_filter").val().length > 0) {
            $("#MSLItem_filter").val("");
            $("#MSLItem_filter").change();
        }
        return false;
    });

    function fnFilterMS() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#MSLItem_filter") != 'undefined' && ($("#MSLItem_filter").val().length > 2 || $("#MSLItem_filter").val().length == 0)) {
            var searchtext = $("#MSLItem_filter").val().replace(/'/g, "''");
            oTableMSItem.fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
        }
        else {
            $("#" + CountLineItemDataTable).find("td").removeHighlight();
            $("#" + CountLineItemDataTable).find("td").highlight($("#MSLItem_filter").val());
        }
    }

    $("#saveRows").click(function () {
        SaveAllClick($(this));
    });


    $("#ApplyAction").click(function () {
        ApplyCountToSelectedItems();
    });


    function ApplyCountToSelectedItems(datarow) {

        var aaritems = new Array();
        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';
        var vPullCommonUDF1 = '', vPullCommonUDF2 = '', vPullCommonUDF3 = '', vPullCommonUDF4 = '', vPullCommonUDF5 = '';
        var vPullOrderNumber = "";
        var vPullCommonOrderNumber = ''

        if ($("#chkUsePullCommonUDF").is(":checked")) {
            vPullCommonUDF1 = GetUdfVal($('#UDF1PullCommon'));
            vPullCommonUDF2 = GetUdfVal($('#UDF2PullCommon'));
            vPullCommonUDF3 = GetUdfVal($('#UDF3PullCommon'));
            vPullCommonUDF4 = GetUdfVal($('#UDF4PullCommon'));
            vPullCommonUDF5 = GetUdfVal($('#UDF5PullCommon'));

            if ($('#txtPullOrderNumberCommon') != null) {
                if ($('#txtPullOrderNumberCommon').attr("class") == 'selectBox') {
                    vPullCommonOrderNumber = $('#txtPullOrderNumberCommon option:selected').text();
                }
                else {
                    vPullCommonOrderNumber = $('#txtPullOrderNumberCommon').val();
                }
            }
        }

        $('#' + CountLineItemDataTable).find("tbody tr.row_selected").each(function (indx, tbrow) {
            vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', vPullOrderNumber = '';
            var aPos = oTableMSItem.fnGetPosition($(tbrow).find("td:first")[0]);
            var aData = oTableMSItem.fnGetData(aPos[0]);
            if (!$("#chkUsePullCommonUDF").is(":checked")) {
                if ($(tbrow).find('#UDF1') != null) {
                    if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                        vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF1 = $(tbrow).find('#UDF1').val();
                    }
                }

                if ($(tbrow).find('#UDF2') != null) {
                    if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                        vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF2 = $(tbrow).find('#UDF2').val();
                    }
                }

                if ($(tbrow).find('#UDF3') != null) {
                    if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                        vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF3 = $(tbrow).find('#UDF3').val();
                    }
                }

                if ($(tbrow).find('#UDF4') != null) {
                    if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                        vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF4 = $(tbrow).find('#UDF4').val();
                    }
                }

                if ($(tbrow).find('#UDF5') != null) {
                    if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                        vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF5 = $(tbrow).find('#UDF5').val();
                    }
                }

                if ($(tbrow).find('#txtPullOrderNumber') != null) {
                    if ($(tbrow).find('#txtPullOrderNumber').attr("class") == 'selectBox') {
                        vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber option:selected').text();
                    }
                    else {
                        vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber').val();
                    }
                }
            }
            else {
                vUDF1 = vPullCommonUDF1;
                vUDF2 = vPullCommonUDF2;
                vUDF3 = vPullCommonUDF3;
                vUDF4 = vPullCommonUDF4;
                vUDF5 = vPullCommonUDF5;
                vPullOrderNumber = vPullCommonOrderNumber;

                $(tbrow).find("input[type='hidden'][name='hdnRowState']").val("1");
            }

            var vPullSupplierAccountNumber = "";
            if ($(tbrow).find('#hdnSupplierAccountNumber') != null) {
                vPullSupplierAccountNumber = $(tbrow).find('#hdnSupplierAccountNumber').val();
            }

            if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {

                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber, PullOrderNumber: vPullOrderNumber});
            }
            else {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber, PullOrderNumber: vPullOrderNumber});
            }
        });

        if (aaritems.length > 0) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("ApplyCountOnLineItemsSelected", "Inventory")',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(aaritems),
                success: function (responce) {
                    if (responce.Status == "ok") {
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("@ResInventoryCountDetail.AllCountAppliedonItems".replace("{0}", aaritems.length));
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        oTableMSItem.fnDraw();
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                },
                error: function (err) {
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
            });
        }
    }

    function SaveAllClick() {

        var aaritems = new Array();

        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '', vProjectSpendGUID = '';
        var vPullCommonUDF1 = '', vPullCommonUDF2 = '', vPullCommonUDF3 = '', vPullCommonUDF4 = '', vPullCommonUDF5 = '';
        var vPullOrderNumber = "", vPullCommonOrderNumber = '';

        if ($("#chkUsePullCommonUDF").is(":checked")) {
            vPullCommonUDF1 = GetUdfVal($('#UDF1PullCommon'));
            vPullCommonUDF2 = GetUdfVal($('#UDF2PullCommon'));
            vPullCommonUDF3 = GetUdfVal($('#UDF3PullCommon'));
            vPullCommonUDF4 = GetUdfVal($('#UDF4PullCommon'));
            vPullCommonUDF5 = GetUdfVal($('#UDF5PullCommon'));

            if ($('#txtPullOrderNumberCommon') != null) {
                if ($('#txtPullOrderNumberCommon').attr("class") == 'selectBox') {
                    vPullCommonOrderNumber = $('#txtPullOrderNumberCommon option:selected').text();
                }
                else {
                    vPullCommonOrderNumber = $('#txtPullOrderNumberCommon').val();
                }
            }
        }
        $('#' + CountLineItemDataTable).find("tbody tr").each(function (indx, tbrow) {
            vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', vPullOrderNumber = '';
            if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1" || $("#chkUsePullCommonUDF").is(":checked")) {
                var aPos = oTableMSItem.fnGetPosition($(tbrow).find("td:first")[0]);
                var aData = oTableMSItem.fnGetData(aPos[0]);
                if (!$("#chkUsePullCommonUDF").is(":checked")) {
                    if ($(tbrow).find('#UDF1') != null) {
                        if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                            vUDF1 = $(tbrow).find('#UDF1 option:selected').text();
                        }
                        else {
                            vUDF1 = $(tbrow).find('#UDF1').val();
                        }
                    }

                    if ($(tbrow).find('#UDF2') != null) {
                        if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                            vUDF2 = $(tbrow).find('#UDF2 option:selected').text();
                        }
                        else {
                            vUDF2 = $(tbrow).find('#UDF2').val();
                        }
                    }

                    if ($(tbrow).find('#UDF3') != null) {
                        if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                            vUDF3 = $(tbrow).find('#UDF3 option:selected').text();
                        }
                        else {
                            vUDF3 = $(tbrow).find('#UDF3').val();
                        }
                    }

                    if ($(tbrow).find('#UDF4') != null) {
                        if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                            vUDF4 = $(tbrow).find('#UDF4 option:selected').text();
                        }
                        else {
                            vUDF4 = $(tbrow).find('#UDF4').val();
                        }
                    }

                    if ($(tbrow).find('#UDF5') != null) {
                        if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                            vUDF5 = $(tbrow).find('#UDF5 option:selected').text();
                        }
                        else {
                            vUDF5 = $(tbrow).find('#UDF5').val();
                        }
                    }

                    if ($(tbrow).find('#txtPullOrderNumber') != null) {
                        if ($(tbrow).find('#txtPullOrderNumber').attr("class") == 'selectBox') {
                            vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber option:selected').text();
                        }
                        else {
                            vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber').val();
                        }
                    }
                }
                else {
                    vUDF1 = vPullCommonUDF1;
                    vUDF2 = vPullCommonUDF2;
                    vUDF3 = vPullCommonUDF3;
                    vUDF4 = vPullCommonUDF4;
                    vUDF5 = vPullCommonUDF5;
                    vPullOrderNumber = vPullCommonOrderNumber;
                    $(tbrow).find("input[type='hidden'][name='hdnRowState']").val("1");
                }

                if (vUDF1 == null || vUDF1 == undefined) {
                    vUDF1 = "";
                }
                if (vUDF2 == null || vUDF2 == undefined) {
                    vUDF2 = "";
                }
                if (vUDF3 == null || vUDF3 == undefined) {
                    vUDF3 = "";
                }
                if (vUDF4 == null || vUDF4 == undefined) {
                    vUDF4 = "";
                }
                if (vUDF5 == null || vUDF5 == undefined) {
                    vUDF5 = "";
                }
                if (vPullOrderNumber == null || vPullOrderNumber == undefined) {
                    vPullOrderNumber = "";
                }
                vProjectSpendGUID = $("#dlProjects").val();

                if ($("#dlCountType").val() == "M" && $("#pullOrdernumberLI #PullOrderNumber") != undefined && $("#pullOrdernumberLI #PullOrderNumber").val() != "" && $("#pullOrdernumberLI #PullOrderNumber").val().length > 0) {
                    vPullOrderNumber = $("#pullOrdernumberLI #PullOrderNumber").val().trim();
                }

                var isstageLoca = false;
                if (aData.IsStagingLocationCount == "Yes") {
                    isstageLoca = true;
                }


                var vPullSupplierAccountNumber = "";
                if ($(tbrow).find('#hdnSupplierAccountNumber') != null) {
                    vPullSupplierAccountNumber = $(tbrow).find('#hdnSupplierAccountNumber').val();
                }
                var isCountLineITemIsApplied = false;
                 if ($(tbrow).find('#hdnIsApplied') != null) {
                    isCountLineITemIsApplied = $(tbrow).find('#hdnIsApplied').val();
                }

                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), IsOnlyFromItemUI: true, ProjectSpendGUID: vProjectSpendGUID, IsStagingLocationCount: isstageLoca, SupplierAccountGuid: vPullSupplierAccountNumber, isLineItemAlreadyApplied: isCountLineITemIsApplied, PullOrderNumber: vPullOrderNumber});
            }
        });

        if (aaritems.length > 0) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("IcLineItemsSave", "Inventory")',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(aaritems),
                success: function (responce) {

                    if (responce.Status == "ok") {
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("@ResCommon.RecordUpdatedSuccessfully".replace("{0}",aaritems.length));
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        oTableMSItem.fnDraw();
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                },
                error: function (err) {

                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
            });
        }

    }


    function SetUDFSelectedCountLines(objParams) {

        $("#" + objParams.sInstance).find("tbody").find("tr").each(function () {

            var $objUdf1 = $(this).find("#UDF1");
            var $spnUDF1 = $(this).find("#spnUDF1");
            var $objUdf2 = $(this).find("#UDF2");
            var $spnUDF2 = $(this).find("#spnUDF2");
            var $objUdf3 = $(this).find("#UDF3");
            var $spnUDF3 = $(this).find("#spnUDF3");
            var $objUdf4 = $(this).find("#UDF4");
            var $spnUDF4 = $(this).find("#spnUDF4");
            var $objUdf5 = $(this).find("#UDF5");
            var $spnUDF5 = $(this).find("#spnUDF5");
            var $objPullOrderNo = $(this).find("#txtPullOrderNumber");
            var $spnPullOrderNo = $(this).find("#spnPullOrderNumber");
            if ($objUdf1 != undefined && $spnUDF1 != undefined) {
                if ($objUdf1.is("select")) {
                    if ($objUdf1.find("option").length > 0) {
                        var udf1defaultvalue = $objUdf1.data('udfdefaultvalue');
                        $($objUdf1.find("option")).each(function () {
                            if (this.value == $spnUDF1.text()) {
                                //if exist do nothing
                            } else {
                                $objUdf1.append("<option value='" + $spnUDF1.text() + "'>" + $spnUDF1.text() + "</option>");
                            }
                        });
                    } else if ($objUdf1.find("option").length < 1) {
                        $objUdf1.append("<option value='" + $spnUDF1.text() + "'>" + $spnUDF1.text() + "</option>");
                    }
                    $objUdf1.find("option").filter(function () {
                        if ($spnUDF1.text() == '' && udf1defaultvalue != '') {
                            return this.text == udf1defaultvalue;
                        } else {
                            return this.text == $spnUDF1.text();
                        }
                    }).attr('selected', true);
                }
                else if ($objUdf1.is("input[type='text']")) {
                    $objUdf1.val($spnUDF1.text());
                }
            }
            if ($objUdf2 != undefined && $spnUDF2 != undefined) {
                if ($objUdf2.is("select")) {
                    if ($objUdf2.find("option").length > 0) {
                        var udf2defaultvalue = $objUdf2.data('udfdefaultvalue');
                        $($objUdf2.find("option")).each(function () {
                            if (this.value == $spnUDF2.text()) {
                                //if exist do nothing
                            } else {
                                $objUdf2.append("<option value='" + $spnUDF2.text() + "'>" + $spnUDF2.text() + "</option>");
                            }
                        });
                    } else if ($objUdf2.find("option").length < 1) {
                        $objUdf2.append("<option value='" + $spnUDF2.text() + "'>" + $spnUDF2.text() + "</option>");
                    }
                    $objUdf2.find("option").filter(function () {
                        if ($spnUDF2.text() == '' && udf2defaultvalue != '') {
                            return this.text == udf2defaultvalue;
                        } else {
                            return this.text == $spnUDF2.text();
                        }
                    }).attr('selected', true);
                }
                else if ($objUdf2.is("input[type='text']")) {
                    $objUdf2.val($spnUDF2.text());
                }
            }
            if ($objUdf3 != undefined && $spnUDF3 != undefined) {
                if ($objUdf3.is("select")) {
                    if ($objUdf3.find("option").length > 0) {
                        var udf3defaultvalue = $objUdf3.data('udfdefaultvalue');
                        $($objUdf3.find("option")).each(function () {
                            if (this.value == $spnUDF3.text()) {
                                //if exist do nothing
                            } else {
                                $objUdf3.append("<option value='" + $spnUDF3.text() + "'>" + $spnUDF3.text() + "</option>");
                            }
                        });
                    } else if ($objUdf3.find("option").length < 1) {
                        $objUdf3.append("<option value='" + $spnUDF3.text() + "'>" + $spnUDF3.text() + "</option>");
                    }
                    $objUdf3.find("option").filter(function () {
                        if ($spnUDF3.text() == '' && udf3defaultvalue != '') {
                            return this.text == udf3defaultvalue;
                        } else {
                            return this.text == $spnUDF3.text();
                        }
                    }).attr('selected', true);
                }
                else if ($objUdf3.is("input[type='text']")) {
                    $objUdf3.val($spnUDF3.text());
                }
            }
            if ($objUdf4 != undefined && $spnUDF4 != undefined) {
                if ($objUdf4.is("select")) {
                    if ($objUdf4.find("option").length > 0) {
                        var udf4defaultvalue = $objUdf4.data('udfdefaultvalue');
                        $($objUdf4.find("option")).each(function () {
                            if (this.value == $spnUDF4.text()) {
                                //if exist do nothing
                            } else {
                                $objUdf4.append("<option value='" + $spnUDF4.text() + "'>" + $spnUDF4.text() + "</option>");
                            }
                        });
                    } else if ($objUdf4.find("option").length < 1) {
                        $objUdf4.append("<option value='" + $spnUDF4.text() + "'>" + $spnUDF4.text() + "</option>");
                    }
                    $objUdf4.find("option").filter(function () {
                        if ($spnUDF4.text() == '' && udf4defaultvalue != '') {
                            return this.text == udf4defaultvalue;
                        } else{
                            return this.text == $spnUDF4.text();
                        }
                    }).attr('selected', true);
                }
                else if ($objUdf4.is("input[type='text']")) {
                    $objUdf4.val($spnUDF4.text());
                }
            }

            if ($objUdf5 != undefined && $spnUDF5 != undefined) {
                if ($objUdf5.is("select")) {
                    if ($objUdf5.find("option").length > 0) {
                        var udf5defaultvalue = $objUdf5.data('udfdefaultvalue');
                        $($objUdf5.find("option")).each(function () {
                            if (this.value == $spnUDF5.text()) {
                                //if exist do nothing
                            } else {
                                $objUdf5.append("<option value='" + $spnUDF5.text() + "'>" + $spnUDF5.text() + "</option>");
                            }
                        });
                    } else if ($objUdf5.find("option").length < 1) {
                        $objUdf5.append("<option value='" + $spnUDF5.text() + "'>" + $spnUDF5.text() + "</option>");
                    }
                    $objUdf5.find("option").filter(function () {
                        if ($spnUDF5.text() == '' && udf5defaultvalue != '') {
                            return this.text == udf5defaultvalue;
                        } else {
                            return this.text == $spnUDF5.text();
                        }
                    }).attr('selected', true);
                }
                else if ($objUdf5.is("input[type='text']")) {
                    $objUdf5.val($spnUDF5.text());
                }
            }

            if ($objPullOrderNo != undefined && $spnPullOrderNo != undefined) {
                if ($objPullOrderNo.is("select")) {
                    $objPullOrderNo.find("option").filter(function () {
                        return this.text == $spnPullOrderNo.text();
                    }).attr('selected', true);
                }
                else if ($objPullOrderNo.is("input[type='text']")) {
                    $objPullOrderNo.val($spnPullOrderNo.text());
                }
            }
        });
    }

    function fnFormatDetailsLI(oTable, nTr) {
        var oData = oTableMSItem.fnGetData(nTr);
        var sOut = '';
        var stgbinName = $(nTr).find("input[type='hidden'][name='hdnStagingBinName']").val();
        $('div#DivLoading').show();
        $.ajax({
            "url": '@Url.Content("~/Inventory/ItemLocDet")',
            data: { ItemGUID: oData.ItemGUID, MSGUID: oData.MaterialStagingGUID, StageBinId: oData.StagingBinID, staLocName: stgbinName },
            "async": false,
            cache: false,
            "dataType": "text",
            "success": function (json) {
                sOut = json;
                $('div#DivLoading').hide();
            },
            error: function (response) {

                //
            }
        });

        return sOut;
    }
    function closeConfirmModal() {
        $.modal.impl.close();
    }

    function ApplyForAllCountNew(arrrows) {
        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';
        $('div#DivLoading').show();
        var IscallApplied = true;
        var errorDataIDs = new Array();
        objInventoryCountDetailDTO = '';
        var vPullOrderNumber = "", vPullCommonOrderNumber = '';

        if (!isNaN(arrrows.length) && arrrows.length > 0) {
            $('div#DivLoading').show();
            $('#ApplyCountProcessing').modal();
            $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

            var objrow = null;
            $('div#DivLoading').show();
            if (ApplyProcessedRowCount <= arrrows.length - 1)
                tbrow = arrrows[ApplyProcessedRowCount];
            else {
                if (ApplyAllCountErrorMessage != '') {
                    FinalErr = "<b>Please select row </b>";
                    FinalErr = FinalErr + ApplyAllCountErrorMessage;
                    $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(FinalErr);
                    closeCountInfoModel();
                    $('#ApplyCountInfoDialog').modal();
                }
                else {
                    // $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html("<b style='color:green'>Count Applied successfully.</b>");
                    closeCountInfoModel();
                    // $('#ApplyCountInfoDialog').modal();
                }
                return;
            }
            $('div#DivLoading').show();
            var aaritems = new Array();
            var aData = oTableMSItem.fnGetData(tbrow);

            if ($("#chkUsePullCommonUDF").is(":checked")) {
                vUDF1 = GetUdfVal($('#UDF1PullCommon'));
                vUDF2 = GetUdfVal($('#UDF2PullCommon'));
                vUDF3 = GetUdfVal($('#UDF3PullCommon'));
                vUDF4 = GetUdfVal($('#UDF4PullCommon'));
                vUDF5 = GetUdfVal($('#UDF5PullCommon'));

                if ($('#txtPullOrderNumberCommon') != null) {
                    if ($('#txtPullOrderNumberCommon').attr("class") == 'selectBox') {
                        vPullOrderNumber = $('#txtPullOrderNumberCommon option:selected').text();
                    }
                    else {
                        vPullOrderNumber = $('#txtPullOrderNumberCommon').val();
                    }
                }
                $(tbrow).find("input[type='hidden'][name='hdnRowState']").val("1");
            }
            else {
                if ($(tbrow).find('#UDF1') != null) {
                    if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                        vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF1 = $(tbrow).find('#UDF1').val();
                    }
                }
                $('div#DivLoading').show();
                if ($(tbrow).find('#UDF2') != null) {
                    if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                        vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF2 = $(tbrow).find('#UDF2').val();
                    }
                }
                $('div#DivLoading').show();
                if ($(tbrow).find('#UDF3') != null) {
                    if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                        vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF3 = $(tbrow).find('#UDF3').val();
                    }
                }
                $('div#DivLoading').show();
                if ($(tbrow).find('#UDF4') != null) {
                    if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                        vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF4 = $(tbrow).find('#UDF4').val();
                    }
                }
                $('div#DivLoading').show();
                if ($(tbrow).find('#UDF5') != null) {
                    if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                        vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF5 = $(tbrow).find('#UDF5').val();
                    }
                }
                $('div#DivLoading').show();
                if ($(tbrow).find('#txtPullOrderNumber') != null) {
                    if ($(tbrow).find('#txtPullOrderNumber').attr("class") == 'selectBox') {
                        vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber option:selected').text();
                    }
                    else {
                        vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber').val();
                    }
                }
            }
            var isstageLoca = false;
            if (aData.IsStagingLocationCount == "Yes") {
                isstageLoca = true;
            }

            var vPullSupplierAccountNumber = "";
            if ($(tbrow).find('#hdnSupplierAccountNumber') != null) {
                vPullSupplierAccountNumber = $(tbrow).find('#hdnSupplierAccountNumber').val();
            }

            if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber, PullOrderNumber: vPullOrderNumber });
            }
            else {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber, PullOrderNumber: vPullOrderNumber});
            }

            $('div#DivLoading').show();
            var BinNum = '';
            BinNum = aData.BinNumber;
            var myDate = new Date();
            var prettyDate = (myDate.getMonth() + 1) + '/' + myDate.getDate() + '/' + myDate.getFullYear();
            $('div#DivLoading').show();
            if (aaritems.length > 0) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("IcLineItemsSave", "Inventory")',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(aaritems),
                    success: function (responce) {

                        if (responce.Status == "ok") {
                            $.ajax({
                                type: "POST",
                                url: '@Url.Action("ApplyCountOnLineItemsNew", "Inventory")',
                                contentType: 'application/json',
                                dataType: 'json',
                                data: JSON.stringify(aaritems),
                                "async": false,
                                success: function (responce) {

                                    if (responce.Status == 'ok') {
                                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text('@ResInventoryCountDetail.ApplyCountSuccessfully');
                                        $('div#target').fadeToggle();
                                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                    }
                                    else {
                                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                        $('div#target').fadeToggle();
                                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                    }

                                    ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                    ApplyForAllCountNew(arrrows);
                                    oTableMSItem.fnDraw();
                                    //objInventoryCountDetailDTO = responce.CurrentObj;
                                    //$.ajax({
                                    //    type: "POST",
                                    //    url: '@Url.Action("ApplyOnCountLineItem", "Inventory")',
                                    //    contentType: 'application/json',
                                    //    dataType: 'json',
                                    //    data: JSON.stringify(objInventoryCountDetailDTO),
                                    //    "async": false,
                                    //    success: function (responce) {
                                    //        PostApplyAction(responce.CurrentObj);
                                    //        ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                    //        ApplyForAllCountNew(arrrows);
                                    //        oTableMSItem.fnDraw();
                                    //    },
                                    //    error: function (err) {
                                    //        closeCountInfoModel();
                                    //        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                    //        $('div#target').fadeToggle();
                                    //        $("div#target").delay(2000).fadeOut(200);
                                    //    }
                                    //});

                                    if (responce.IsCountClosed == true) {
                                        ShowEditTabGUID("InventoryCountEdit?IcGuid=@Model.GUID", "frmInventoryCount")
                                    }
                                },
                                error: function (err) {
                                    closeCountInfoModel();
                                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                                    $('div#target').fadeToggle();
                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                }
                            });
                        }
                        else {
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
                    },
                    error: function (err) {

                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                });
            }
        }
        $.each(errorDataIDs, function (index, value) {
            $.ajax({
                "url": '@Url.Content("~/Inventory/UnApplieIDbyID")',
                data: { ID: value, IsApplied: false },
                //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                "async": false,
                cache: false,
                "dataType": "json",
                success: function (response) {
                }
            });
        });

        $.ajax({
            "url": '@Url.Content("~/Inventory/CheckUnappliedLineItem")',
            data: { 'CountLineItem': '@Model.GUID' },
            //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
            "async": false,
            type: "POST",
            cache: false,
            "dataType": "json",
            success: function (response) {

                if (!response.Result) {
                    $("div.userContent").find("input#btnApplyAll").hide();
                }
                else {
                    $("div.userContent").find("input#btnApplyAll").show();
                }
            }
        });

    }

    function ApplyForAllCount(arrrows) {

        if (!isNaN(arrrows.length) && arrrows.length > 0) {
            $('#ApplyCountProcessing').modal();
            $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

            var objrow = null;

            if (ApplyProcessedRowCount <= arrrows.length - 1)
                tbrow = arrrows[ApplyProcessedRowCount];
            else {
                if (ApplyAllCountErrorMessage != '') {
                    FinalErr = "<b>Please select row </b>";
                    FinalErr = FinalErr + ApplyAllCountErrorMessage;
                    $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(FinalErr);
                    closeCountInfoModel();
                    $('#ApplyCountInfoDialog').modal();
                }
                else {
                    $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html("<b style='color:green'>Count Applied successfully.</b>");
                    closeCountInfoModel();
                    $('#ApplyCountInfoDialog').modal();
                }
                return;
            }

            var vPullOrderNumber = "", vPullCommonOrderNumber = '';
            var aaritems = new Array();
            var aData = oTableMSItem.fnGetData(tbrow);

            if ($("#chkUsePullCommonUDF").is(":checked")) {
                vUDF1 = GetUdfVal($('#UDF1PullCommon'));
                vUDF2 = GetUdfVal($('#UDF2PullCommon'));
                vUDF3 = GetUdfVal($('#UDF3PullCommon'));
                vUDF4 = GetUdfVal($('#UDF4PullCommon'));
                vUDF5 = GetUdfVal($('#UDF5PullCommon'));

                if ($('#txtPullOrderNumberCommon') != null) {
                    if ($('#txtPullOrderNumberCommon').attr("class") == 'selectBox') {
                        vPullOrderNumber = $('#txtPullOrderNumberCommon option:selected').text();
                    }
                    else {
                        vPullOrderNumber = $('#txtPullOrderNumberCommon').val();
                    }
                }
                $(tbrow).find("input[type='hidden'][name='hdnRowState']").val("1");
            }
            else {
                if ($(tbrow).find('#UDF1') != null) {
                    if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                        vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF1 = $(tbrow).find('#UDF1').val();
                    }
                }

                if ($(tbrow).find('#UDF2') != null) {
                    if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                        vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF2 = $(tbrow).find('#UDF2').val();
                    }
                }

                if ($(tbrow).find('#UDF3') != null) {
                    if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                        vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF3 = $(tbrow).find('#UDF3').val();
                    }
                }

                if ($(tbrow).find('#UDF4') != null) {
                    if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                        vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF4 = $(tbrow).find('#UDF4').val();
                    }
                }

                if ($(tbrow).find('#UDF5') != null) {
                    if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                        vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF5 = $(tbrow).find('#UDF5').val();
                    }
                }

                if ($(tbrow).find('#txtPullOrderNumber') != null) {
                    if ($(tbrow).find('#txtPullOrderNumber').attr("class") == 'selectBox') {
                        vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber option:selected').text();
                    }
                    else {
                        vPullOrderNumber = $(tbrow).find('#txtPullOrderNumber').val();
                    }
                }
            }

            var isstageLoca = false;
            if (aData.IsStagingLocationCount == "Yes") {
                isstageLoca = true;
            }


            var vPullSupplierAccountNumber = "";
            if ($(tbrow).find('#hdnSupplierAccountNumber') != null) {
                vPullSupplierAccountNumber = $(tbrow).find('#hdnSupplierAccountNumber').val();
            }

            if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber, PullOrderNumber: vPullOrderNumber});
            }
            else {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, SupplierAccountGuid: vPullSupplierAccountNumber, PullOrderNumber: vPullOrderNumber});
            }

            var BinNum = '';
            BinNum = aData.BinNumber;
            var myDate = new Date();
            var prettyDate = (myDate.getMonth() + 1) + '/' + myDate.getDate() + '/' + myDate.getFullYear();

            if (aaritems.length > 0) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ApplyCountOnLineItems", "Inventory")',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(aaritems),
                    "async": false,
                    success: function (responce) {
                        if (responce.Status == "pull") {
                            var PullCreditType = "pull";
                            if ($("#CountType").val() == "A") {
                                PullCreditType = "adjustpull";
                            }
                            $.ajax({
                                "url": '@Url.Content("~/Pull/UpdatePullDataForCount")',
                                data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {



                                    if (response.Status == "ok") {
                                        if (response.locationMSG != "" && response.locationMSG != undefined) {
                                            ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                            errorIndex = errorIndex + 1;
                                            ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.locationMSG + " </b>";
                                            ApplyForAllCount(arrrows);
                                        }
                                        else {
                                            PostApplyAction(responce.CurrentObj);
                                            ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                            ApplyForAllCount(arrrows);
                                        }
                                    }
                                    else {
                                        ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                        errorIndex = errorIndex + 1;

                                        if (response.Message != undefined) {
                                            ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                        }
                                        ApplyForAllCount(arrrows);
                                    }
                                },
                                error: function (response) {
                                    ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                    errorIndex = errorIndex + 1;
                                    if (response.Message != undefined) {
                                        ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                    }
                                    ApplyForAllCount(arrrows);
                                }
                            });
                        } //pull End
                        else if (responce.Status == "credit") {
                            var itemId = responce.CurrentObj.ItemGUID;
                            var itemType = responce.CurrentObj.ItemType;
                            var BinId = responce.CurrentObj.BinID;
                            var TotalCountQty = responce.CurrentObj.CusOwnedDifference;
                            var TotalCountQty1 = responce.CurrentObj.ConsignedDifference;
                            var idtype = itemId + '#' + itemType.toString() + '#' + ' ' + ' #' + BinId.toString() + "#frompullcredit_forcount" + "#" + responce.CurrentObj.TotalDifference + "#" + responce.CurrentObj.GUID + "#" + TotalCountQty + "#" + TotalCountQty1; // + "#" + response.CurrentObj.CountConsignedQuantity;
                            var CountDtlGUID = responce.CurrentObj.GUID;
                            $.ajax({
                                "url": '@Url.Content("~/Inventory/GetItemIsSerialOrLot")',
                                data: { ItemGUID: itemId },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {

                                    if (response == "serial" || response == "lot") {
                                        //for serial or lot type item , credit popup will open
                                        var PullCreditType = "credit";
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "adjcredit";
                                        }
                                        idtype = idtype + '#' + PullCreditType;
                                        FromApplyAll = true;
                                        $('div#DivLoading').show();
                                        $('#LocationDetails').load('../Inventory/LocationDetailsNew', { ItemID_ItemType: idtype }, function () {
                                            closeCountInfoModel();

                                            $('#LocationDetails').dialog('open');
                                            $('div#DivLoading').hide();
                                            IsRefreshGrid = true;

                                        });

                                    }
                                    else {
                                        var PullCreditType = "credit";
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "adjcredit";
                                        }
                                        var arr = new Array();
                                        arr.push({ ItemGUID: itemId, BinID: BinId, BinNumber: BinNum, Received: prettyDate, SerialNumberTracking: false, LotNumberTracking: false, CountCustOrConsQty: TotalCountQty + TotalCountQty1, ConsignedQuantity: TotalCountQty1, CustomerOwnedQuantity: TotalCountQty, LotNumberTracking: false, IsCreditPull: true, CountLineItemDtlGUID: responce.CurrentObj.GUID });
                                        //for general item credit will occur in backgrond no need to open popup
                                        $.ajax({
                                            "url": '@Url.Content("~/Inventory/ItemLocationDetailsSaveForCreditPull")',
                                            data: "{ 'objData': " + JSON.stringify(arr) + ", 'PullCreditType': '" + PullCreditType + "' }",
                                            type: 'Post',
                                            "async": false,
                                            contentType: 'application/json',
                                            cache: false,
                                            "dataType": "json",
                                            success: function (responce1) {
                                                if (responce1.Status == 'OK') {
                                                    PostApplyAction(responce.CurrentObj);
                                                    ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                                    ApplyForAllCount(arrrows);
                                                }
                                            }
                                        });
                                    }
                                }
                            });
                        } //Credit End
                        else if (responce.Status == "ok") {
                            PostApplyAction(responce.CurrentObj);
                            ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                            ApplyForAllCount(arrrows);
                        }
                    } //success method end
                });             //ajax method end
            } // aaritems.lenght if end
        }
    }



    //Apply All Effect  as per WI-848 issue
    $("#btnApplyAll").on("click", function (e) {
        AppliedLineItemGuids = new Array();
        $('div#DivLoading').show();
        var tbl = $("#" + CountLineItemDataTable).dataTable();
        var anSelected = fnGetSelected1(tbl);
        if ((!isNaN(anSelected.length) && anSelected.length == 0) || (anSelected.find("td").find("input.ApplyBtn").length == 0)) {
            var ApplyAllCountErrorMessage = "<b>Please select row to Apply count </b>";
            $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(ApplyAllCountErrorMessage);
            closeCountInfoModel();
            $('#ApplyCountInfoDialog').modal();
            $('div#DivLoading').hide();
            return false;
        }
        else {
            var isLotorSerialItem = false;

            $("#" + CountLineItemDataTable + ' tbody tr.row_selected').each(function (indx, currow) {
                if (!$(this).find('input.CreateBtndisabled').is(":disabled") && ($(this).find("td").find("input.ApplyBtn").length > 0)) {
                    var hdnLotNumberTracking = $(currow).find("input[name='hdnLotNumberTracking']").val();
                    var hdnSerialNumberTracking = $(currow).find("input[name='hdnSerialNumberTracking']").val();
                    //if (hdnLotNumberTracking == "true" || hdnSerialNumberTracking == "true") {
                    //    isLotorSerialItem = true;
                    //}
                }
            });

            if ('@ViewNewCountApplyButtons' == 'yes' && isLotorSerialItem == true) {
                PopupApplyAllSelectedNewFlow();
            }
            else {
                $('div#DivLoading').show();
                $('div#DivLoading').show();
                $('div#DivLoading').show();
                setTimeout(function () { $('div#DivLoading').show(); }, 3);

                $('#ApplyCountProcessing').modal();
                $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');
                var tbl = $("#" + CountLineItemDataTable).dataTable();
                var anSelected = fnGetSelected1(tbl);
                $('div#DivLoading').show();
                errorIndex = 0;
                ApplyAllCountErrorMessage = '';
                FinalErr = '';
                FromApplyAll = false;
                selectedRows = new Array();
                //Validation if none of row is selected for apply
                if (!isNaN(anSelected.length) && anSelected.length == 0) {
                    ApplyAllCountErrorMessage = "<b>Please select row to Apply count </b>";
                    $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(ApplyAllCountErrorMessage);
                    closeCountInfoModel();
                    $('#ApplyCountInfoDialog').modal();
                    $('div#DivLoading').hide();
                    $('div#DivLoading').hide();
                    $('div#DivLoading').hide();
                    return false;
                }
                $('div#DivLoading').show();
                //create an array of selected rows
                $("#" + CountLineItemDataTable + ' tbody tr.row_selected').each(function (indx, currow) {
                    if (!$(this).find('input.CreateBtndisabled').is(":disabled") && ($(this).find("td").find("input.ApplyBtn").length > 0)) {
                        $('div#DivLoading').show();
                        selectedRows.push(currow);
                    }
                });

                ApplyProcessedRowCount = 0;
                TotalRowSelectedForApplyCount = anSelected.length;

                //ApplyForAllCount(selectedRows);
                setTimeout(function () {
                    //ApplyForAllCountNew(selectedRows);
                    for (var i = 0; i < selectedRows.length; i++) {

                        var btnApplyCount = $(selectedRows[i]).find('#btnApplyCount')[0];
                        var LotNumberTracking = $(selectedRows[i]).find('#hdnLotNumberTracking').val();
                        var SerialNumberTracking = $(selectedRows[i]).find('#hdnSerialNumberTracking').val();

                        if (LotNumberTracking == 'true' || SerialNumberTracking == 'true')
                            ApplyCountToSingleItemNew(btnApplyCount, 'LOT_SERIAL', true, (i == (selectedRows.length - 1) ? true : false));
                        else
                            ApplyCountToSingleItemNew(btnApplyCount, 'NORMAL', true, (i == (selectedRows.length - 1) ? true : false));

                    }
                }, 200);
                setTimeout(function () {
                    FnSendMailForApplyCount();
                    AppliedLineItemGuids = new Array();
                }, 400);

                // if (ApplyProcessedRowCount == (TotalRowSelectedForApplyCount + 1)) {
                //        $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html("<b style='color:green'>Count Applied successfully.</b>");
                //        closeCountInfoModel();
                //        $('#ApplyCountInfoDialog').modal();
                //        }
                //        else {
                //            ApplyAllCountErrorMessage = '<b>Some of the Item(s) is(are) not able to apply , due to following reasons.</b><br />' + ApplyAllCountErrorMessage;
                //            $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(ApplyAllCountErrorMessage);
                //            closeCountInfoModel();
                //            $('#ApplyCountInfoDialog').modal();
                //        }
            }
        }
    });


    function PopupApplyAllSelectedNewFlow() {
        var aaritems = new Array();
        var vPullCommonUDF1 = '', vPullCommonUDF2 = '', vPullCommonUDF3 = '', vPullCommonUDF4 = '', vPullCommonUDF5 = '';
        if ($("#chkUsePullCommonUDF").is(":checked")) {
            vPullCommonUDF1 = GetUdfVal($('#UDF1PullCommon'));
            vPullCommonUDF2 = GetUdfVal($('#UDF2PullCommon'));
            vPullCommonUDF3 = GetUdfVal($('#UDF3PullCommon'));
            vPullCommonUDF4 = GetUdfVal($('#UDF4PullCommon'));
            vPullCommonUDF5 = GetUdfVal($('#UDF5PullCommon'));
        }
        $("#" + CountLineItemDataTable + ' tbody tr.row_selected').each(function (indx, tbrow) {
            if (!$(this).find('input.CreateBtndisabled').is(":disabled")) {

                var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '';
                var aPos = oTableMSItem.fnGetPosition(tbrow);
                var aData = oTableMSItem.fnGetData(aPos);
                if (!$("#chkUsePullCommonUDF").is(":checked")) {
                    if ($(tbrow).find('#UDF1') != null) {
                        if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                            vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                        }
                        else {
                            vUDF1 = $(tbrow).find('#UDF1').val();
                        }
                    }

                    if ($(tbrow).find('#UDF2') != null) {
                        if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                            vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                        }
                        else {
                            vUDF2 = $(tbrow).find('#UDF2').val();
                        }
                    }

                    if ($(tbrow).find('#UDF3') != null) {
                        if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                            vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                        }
                        else {
                            vUDF3 = $(tbrow).find('#UDF3').val();
                        }
                    }

                    if ($(tbrow).find('#UDF4') != null) {
                        if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                            vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                        }
                        else {
                            vUDF4 = $(tbrow).find('#UDF4').val();
                        }
                    }

                    if ($(tbrow).find('#UDF5') != null) {
                        if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                            vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                        }
                        else {
                            vUDF5 = $(tbrow).find('#UDF5').val();
                        }
                    }
                }
                else {
                    vUDF1 = vPullCommonUDF1;
                    vUDF2 = vPullCommonUDF2;
                    vUDF3 = vPullCommonUDF3;
                    vUDF4 = vPullCommonUDF4;
                    vUDF5 = vPullCommonUDF5;
                    $(tbrow).find("input[type='hidden'][name='hdnRowState']").val("1");
                }
                if (typeof (vUDF1) == "undefined") {
                    vUDF1 = '';
                }
                if (typeof (vUDF2) == "undefined") {
                    vUDF2 = '';
                }
                if (typeof (vUDF3) == "undefined") {
                    vUDF3 = '';
                }
                if (typeof (vUDF4) == "undefined") {
                    vUDF4 = '';
                }
                if (typeof (vUDF5) == "undefined") {
                    vUDF5 = '';
                }
                var isstageLoca = false;
                if (aData.IsStagingLocationCount == "Yes") {
                    isstageLoca = true;
                }

                var isstageLoca = false;
                if (aData.IsStagingLocationCount == "Yes") {
                    isstageLoca = true;
                }


                if ($(tbrow).find('#hdnSupplierAccountNumber') != null) {
                    vPullSupplierAccountNumber = $(tbrow).find('#hdnSupplierAccountNumber').val();
                }

                if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
                    aaritems.push({
                        ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry
                    , CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry)
                    , UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true
                    , IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, ItemNumber: aData.ItemNumber, LotNumberTracking: aData.LotNumberTracking
                        , SerialNumberTracking: aData.SerialNumberTracking, BinNumber: aData.BinNumber, CountType: escape($("#CountType").val()), SupplierAccountGuid: vPullSupplierAccountNumber
                    });
                }
                else {
                    aaritems.push({
                        ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry
                    , CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry)
                    , UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false
                    , IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, ItemNumber: aData.ItemNumber, LotNumberTracking: aData.LotNumberTracking
                        , SerialNumberTracking: aData.SerialNumberTracking, BinNumber: aData.BinNumber, CountType: escape($("#CountType").val()), SupplierAccountGuid: vPullSupplierAccountNumber
                    });
                }

            }
        });

        if (aaritems.length > 0) {

            $.ajax({
                type: "POST",
                url: '@Url.Action("OpenApplyCountOnLineItemsPopup", "Inventory")',
                contentType: 'application/json',
                dataType: 'html',
                data: JSON.stringify(aaritems),
                success: function (RetData) {
                    $("#DivCountApplyPopup").html("");
                    $("#DivCountApplyPopup").html(RetData);

                    $("#DivCountApplyPopup").dialog('open');
                    $('#DivLoading').hide();
                },
                error: function (err) {
                    alert(err);
                    $('#DivLoading').hide();
                }
            });

        }
        else {
            $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html("<b>Please select unapplied row to Apply count </b>");
            closeCountInfoModel();
            $('#ApplyCountInfoDialog').modal();
            $('div#DivLoading').hide();
        }
    }

    function fnGetSelected(oTableLocal) {
        return oTableLocal.$('tr.row_selected');
    }

    //#endregion
    function closeCountInfoModel() {
        $.modal.impl.close();
    }

    function closeFromOk() {
        $.modal.impl.close();
    }

    function closeErrorDialog() {
        $.modal.impl.close();
        return false;
    }

    $("#ColumnOrderSetup1").off('click')
    $("#ColumnOrderSetup1").on('click', function () {
        var dtName = CountLineItemDataTable
        $("#divDetailGridReorderPopup").data({ 'DataTableName': dtName, 'ListName': 'CountLineItem', 'ColumnObjectName': 'CntColumnObject' }).dialog("open");
        return false;
    });

    function FillDetailGridDiv() {

        $('#DivLoading').show();
        $('#InventoryCountLineItems').empty();
        $("#InventoryCountLineItems").html("");
        var url = '@Url.Action("GetCountLineItemspartial", "Inventory")';
        $.get(url, { 'CountGUID': '@Model.GUID' }, function (data) {
            $("#divDetailGridReorderPopup").dialog("close");
            $('#InventoryCountLineItems').html(data);
            $('#DivLoading').hide();
        });

    }

    function OpenLineItemDetails(CallingControl) {
        var nTd = $(CallingControl).closest("td");
        var nTr = nTd[0].parentNode;
        var i = $.inArray(nTr, anOpen);
        if (i === -1) {
            $('img', nTd).attr('src', sImageUrl + "drildown_close.jpg");
            oTableMSItem.fnOpen(nTr, fnFormatDetails(oTableMSItem, nTr), '');
            anOpen.push(nTr);
        }
        else {
            $('img', nTd).attr('src', sImageUrl + "drildown_open.jpg");
            oTableMSItem.fnClose(nTr);
            anOpen.splice(i, 1);
        }

        return false;
    }

    //$('#' + CountLineItemDataTable).on('click', 'td.control', function (event) {
    //    var nTr = this.parentNode;
    //    var i = $.inArray(nTr, anOpen);
    //    if (i === -1) {
    //        $('img', this).attr('src', sImageUrl + "drildown_close.jpg");
    //        oTableMSItem.fnOpen(nTr, fnFormatDetails(oTableMSItem, nTr), '');
    //        anOpen.push(nTr);
    //    }
    //    else {
    //        $('img', this).attr('src', sImageUrl + "drildown_open.jpg");
    //        oTableMSItem.fnClose(nTr);
    //        anOpen.splice(i, 1);
    //    }
    //});

    function fnFormatDetails(oTable, nTr) {
        var _InventoryCountGUID = $(nTr).find("input[type='hidden'][id='hdnInventoryCountDetailGUID']").val();
        var _LotNumberTracking = $(nTr).find("input[type='hidden'][id='hdnLotNumberTracking']").val();
        var _SerialNumberTracking = $(nTr).find("input[type='hidden'][id='hdnSerialNumberTracking']").val();
        var _DateCodeTracking = $(nTr).find("input[type='hidden'][id='hdnDateCodeTracking']").val();
        var _IsApplied = $(nTr).find("input[type='hidden'][id='hdnIsApplied']").val();
        var _BinNumber = $(nTr).find("input[type='hidden'][id='hdnBinNumber']").val();
        var _Description = $(nTr).find("#txtCountLineItemDescription").val().trim();
        var _IsStage = $(nTr).find("input[type='hidden'][id='hdnIsStage']").val();

        if (_IsStage == "No" || _IsStage == false) {
            _IsStage = false;
        }
        else if (_IsStage == "Yes" || _IsStage == true) {
            _IsStage = true;
        }

        var oData = oTable.fnGetData(nTr);
        var sOut = '';


        $('div#DivLoading').show();
        $.ajax({
            "type": "POST",
            "url": '@Url.Content("~/Inventory/GetCountLineItemDetailList")',
            data: "{'InventoryCountGUID': '" + _InventoryCountGUID + "'," +
                   "'LotNumberTracking': '" + (_LotNumberTracking == 'true' || _LotNumberTracking == 'True' ? true : false) + "'," +
                   "'SerialNumberTracking': '" + (_SerialNumberTracking == 'true' || _SerialNumberTracking == 'True' ? true : false) + "'," +
                   "'DateCodeTracking': '" + (_DateCodeTracking == 'true' || _DateCodeTracking == 'True' ? true : false) + "'," +
                   "'IsApplied': '" + (_IsApplied == 'true' || _IsApplied == 'True' || _IsApplied == 'yes' || _IsApplied == 'Yes' ? true : false) + "'," +
                   "'BinNumber': '" + _BinNumber + "'," +
                   "'Description': '" + _Description + "'," +
                   "'IsStage': " + _IsStage + "}",
            "async": false,
            cache: false,
            "dataType": "text",
            contentType: "application/json; charset=utf-8",
            "success": function (json) {
                sOut = json;
                $('div#DivLoading').hide();
            },
            error: function (response) {

            }
        });

        return sOut;
    }

    var SelectedItemGuid = '';
    var SelectedBinID = '';
    var SelectedCountDetailGUID = null;
    var SelectedDateCodeTracking = false;
    var SelectedItemType = 0;
    var SelectedCost = 0;
    var SelectedSerialNumberTracking = false;
    var SelectedLotNumberTracking = false;
    var SelectedReceivedDate = null;
    var SelectedBinNumber = null;
    var SelectedMode = null;
    var SelectedConsignment = false;
    var SelectedIsStage = false;

    function OpenPopupForSerialLotItem(_ItemGuid, _BinID, _CountDetailGUID, _Descriotion, Mode,_IsStage) {

        SelectedMode = Mode;
        SelectedItemGuid = _ItemGuid;
        SelectedBinID = _BinID;
        SelectedCountDetailGUID = _CountDetailGUID;
        var vIsStage = (_IsStage.toLowerCase() == "true") ? true : false;
        SelectedIsStage = vIsStage;


        if (_CountDetailGUID == null)
            _CountDetailGUID = '00000000-0000-0000-0000-000000000000';

        $.ajax({
            url: '@Url.Action("LoadLotDetailPopupForCount", "Inventory")',
            type: "POST",
            data: JSON.stringify({ ItemGUID: _ItemGuid, BinId: _BinID, CountDetailGUID: _CountDetailGUID, Descriotion: _Descriotion, IsStage: vIsStage }),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                $('#PopupForSerialLotItemContainer')[0].innerHTML = data;
                $('#PopupForSerialLotItemContainer').dialog('open');
            },
            error: function (data) {

            }
        });

        return false;
    }

    function LoadLotDetailPopupForCountAjax() {

        SelectedDateCodeTracking = false;
        SelectedItemType = 0;
        SelectedCost = 0;
        SelectedSerialNumberTracking = false;
        SelectedLotNumberTracking = false;
        SelectedReceivedDate = null;
        SelectedBinNumber = null;
        //SelectedMode = null;

        $('div#DivLoading').show();
        $.ajax({
            type: "POST",
            url: '@Url.Action("LoadLotDetailPopupForCountAjax", "Inventory")',
            contentType: 'application/json',
            dataType: 'json',
            data: "{ItemGUID:'" + SelectedItemGuid + "',BinId:" + SelectedBinID + ",CountDetailGUID:'" + SelectedCountDetailGUID + "',IsStage:"+SelectedIsStage+"}",
            success: function (response) {
                if (response != null && response != undefined && response.length > 0) {

                    $('#tblSelectedItemData').find('#lblItemNumber').text(response[0].ItemNumber);
                    //$('#tblSelectedItemData').find('#lblItemDescription').text(response[0].ItemDescription);

                    SelectedDateCodeTracking = response[0].DateCodeTracking;
                    SelectedItemType = response[0].ItemType;
                    SelectedCost = response[0].Cost;
                    SelectedSerialNumberTracking = response[0].SerialNumberTracking;
                    SelectedLotNumberTracking = response[0].LotNumberTracking;
                    SelectedReceivedDate = response[0].ReceivedDate;
                    SelectedBinNumber = response[0].BinNumber;
                    SelectedConsignment = response[0].Consignment;

                    //if (SelectedCountDetailGUID != null && SelectedCountDetailGUID != undefined && SelectedCountDetailGUID != '00000000-0000-0000-0000-000000000000')
                    //    SelectedMode = 'EDIT';
                    //else
                    //    SelectedMode = 'ADD';

                    var i = 0;
                    for (i = 0; i < response.length; i++) {
                        if (response[i].LotSerialNumber != '' && response[i].LotSerialNumber != null)
                            AddRowToLotDetail(response[i]);
                    }

                    if (SelectedDateCodeTracking == false) {
                        $('#thExpiryDate').hide();
                    }

                    if (SelectedSerialNumberTracking != true && SelectedLotNumberTracking != true) {
                        $('#thLotSerialNumber').hide();
                    }

                    //-------------Add Additional Row If Last Row Bin Exists-------------
                    //
                    if ($('#ItemModeDataTableForLots tbody tr').length <= 0 ||
                            $('#ItemModeDataTableForLots tbody tr:last').find("[id^='ddlItemSourceBins_']").val().trim() != '') {
                        var NewRow = {
                            GUID: '00000000-0000-0000-0000-000000000000',
                            BinNumber: (SelectedMode == 'EDIT' ? SelectedBinNumber : ''),
                            BinID: (SelectedMode == 'EDIT' ? SelectedBinID : ''),
                            ItemGUID: SelectedItemGuid,
                            Comment: '',
                            LotSerialNumber: '',
                            CountCustomerOwnedQuantity: null,
                            CountConsignedQuantity: null,
                            Expiration: null,
                            ItemType: SelectedItemType,
                            Cost: SelectedCost,
                            Consignment: SelectedConsignment,
                            AvailableQuantity: (SelectedSerialNumberTracking == true ? 1 : null)
                        };
                        AddRowToLotDetail(NewRow);
                    }
                }

                $('div#DivLoading').hide();
            },
            error: function (err) {
            }
        });
    }

    var index = -1;
    function AddRowToLotDetail(data) {
        //var index = $('#ItemModeDataTableForLots tbody tr').length; // - 1;
        index = index + 1;
        var Disabled = '';
        if ((  data.LotSerialNumber != ""))
        {
            Disabled = '  class="DisableBackNumericInput" readonly="readonly" ';
        }
        var strTR = '<tr>' +
                    '    <td>' +
                    (SelectedMode == 'ADD' ?
                    '        <input type="text" id="ddlItemSourceBins_${Index}" maxlength="128" name="ddlItemSourceBins" value="${BinNumber}" autocomplete="off" role="textbox" aria-autocomplete="list" aria-haspopup="true" style="width:100px;" class="ItemPopupLoc text-boxinner95 udf-editable-dropdownbox" onfocusout="ddlItemSourceBinsFocusOut(this)"/>' :
                    '        <input type="text" id="ddlItemSourceBins_${Index}" maxlength="128" name="ddlItemSourceBins" value="${BinNumber}" autocomplete="off" role="textbox" aria-autocomplete="list" aria-haspopup="true" style="width:100px;" class="ItemPopupLoc text-boxinner95 udf-editable-dropdownbox disableBack" onfocusout="ddlItemSourceBinsFocusOut(this)" readonly="readonly"/>'
                    ) +
                    '        <input type="hidden" id="hdnItemGuid" value="${ItemGUID}" />' +
                    '        <input type="hidden" id="hdnGuid" value="${GUID}" />' +
                    '        <input type="hidden" id="hdnLocationId" value="${BinID}" />' +
                    '        <input type="hidden" id="hdnIsLoadMoreLocations" value="false" />' +
                    '        <input type="hidden" id="hdnselectedIDs" value="false" />' +
                    '        <input type="hidden" id="hdnIsDateCodeTracking_${Index}" value="${DateCodeTracking}" />' +
                    '        <input type="hidden" id="hdnCost_${Index}" value="${Cost}" />' +
                    '        <input type="hidden" id="hdnItemType_${Index}" value="${ItemType}" />' +
                    '        <input type="hidden" id="hdnReceivedDate_${Index}" value="${ReceivedDate}" />' +
                    '        <input type="hidden" id="hdnSerialNumberTracking_${Index}" value="${SerialNumberTracking}" />' +
                    '        <input type="hidden" id="hdnLotNumberTracking_${Index}" value="${LotNumberTracking}" />' +
                    '        <a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:1px;z-index:9999 !important;" class="show-all-options">' +
                    '           <img src="/Content/images/arrow_down_black.png" alt="select">' +
                    '        </a>' +
                    '    </td>' +
                    ((SelectedSerialNumberTracking == true || SelectedLotNumberTracking == true) ?
                    '    <td>' +
                    '        <input type="text" ' + Disabled + ' id="ddlLotSerialNumber_${Index}" maxlength="128" value="${LotSerialNumber}" autocomplete="off" role="textbox" aria-autocomplete="list" aria-haspopup="true" style="width:100px;" class="ItemPopupLoc text-boxinner95 udf-editable-dropdownbox"  onfocusout="ddlLotSerialNumberFocusOut(this)"/>' +
                    '    </td>'
                    : '') +
                    '    <td>' +
                    '        <input type="text" id="txtComment" maxlength="250" value="${Comment}" class="text-boxinner95" />' +
                    '    </td>';


        if (SelectedSerialNumberTracking == true) {
            strTR = strTR + '    <td>' +
                            '        <input type="text" id="txtQuantity_${Index}" value="${CountQuantity}" class="numericinput" maxlength="10" style="width:90%;" onfocusout="txtCustOwnQtyFocusOut(this)"/>' +
                            '    </td>';
        }
        else {
            strTR = strTR + '    <td>' +
                            '        <input type="text" id="txtQuantity_${Index}" value="${CountQuantity}" class="numericinput" maxlength="10" style="width:90%;" onfocusout="txtCustOwnQtyFocusOut(this)"/>' +
                            '    </td>';
        }

        if (SelectedConsignment == true) {
            strTR = strTR + '    <td>' +
                            '        <input type="checkbox" ${IsConsigned} id="chkIsConsigned_${Index}" class="check-box" ${ConsignedCheck} />' +
                            '    </td>';

            $('#thQty1')[0].innerHTML = '@ResItemMaster.Quantity';
            $('#thQty2')[0].innerHTML = '@ResItemMaster.IsConsigned';
        }
        else {
            $('#thQty1')[0].innerHTML = '@ResItemMaster.Quantity';
            $('#thQty2').hide();
        }

        strTR = strTR + (SelectedDateCodeTracking == true ?
                    '    <td>' +
                    '        <input type="text" id="txtExpirationDate_${Index}" value="${ExpirationDate}" class="text-box" readonly="readonly" style="background:white" maxlength="128" onchange="txtExpirationDateFocusOut(this)" />' +
                    '    </td>'
                    : '') +
                    '    <td>' +
                    '        <img src="/content/images/delete.png" alt="Delete" style="cursor: pointer;" onclick="return DeleteLineItemCount(this);"">' +
                    '    </td>' +
                    '</tr>';

        //if (SelectedSerialNumberTracking == true) {

        //    if (SelectedConsignment == true) {
        //        strTR = strTR + '    <td>' +
        //                        '        <input type="text" id="txtQuantity_${Index}" value="${CountQuantity}" class="DisableBackNumericInput" maxlength="10" onblur="CustownedCount(this);" style="width:90%;" readonly="readonly"/>' +
        //                        '    </td>' +
        //                        '    <td>' +
        //                        '        <input type="checkbox" id="chkIsConsigned_${Index}" class="check-box" ${ConsignedCheck} />' +
        //                        '    </td>';

        //        $('#thQty1')[0].innerHTML = 'Qty.';
        //        $('#thQty2')[0].innerHTML = 'Is Consigned';
        //    }
        //    else {
        //        strTR = strTR + '    <td>' +
        //                        '        <input type="text" id="txtQuantity_${Index}" value="${CountQuantity}" class="DisableBackNumericInput" maxlength="10" onblur="CustownedCount(this);" style="width:90%;" readonly="readonly"/>' +
        //                        '    </td>';

        //        $('#thQty1')[0].innerHTML = 'Qty.';
        //        $('#thQty2').hide();
        //    }
        //}
        //else {

        //    if (SelectedConsignment == true) {
        //        strTR = strTR + '   <td>' +
        //                        '       <input type="text" id="txtCustOwnQty_${Index}" value="${CountCustomerOwnedQuantity}" class="numericinput text-boxinner95 numericalign numericsonly" maxlength="10" onblur="CustownedCount(this);" style="width:90%;"  onfocusout="txtCustOwnQtyFocusOut(this)"/>' +
        //                        '   </td>' +
        //                        '   <td>' +
        //                        '       <input type="text" id="txtConsignedQuantity_${Index}" value="${CountConsignedQuantity}" class="numericinput" maxlength="10" onblur="ConsignedCount(this);" style="width:90%;" />' +
        //                        '   </td>';
        //    }
        //    else {
        //        strTR = strTR + '   <td>' +
        //                        '       <input type="text" id="txtCustOwnQty_${Index}" value="${CountCustomerOwnedQuantity}" class="numericinput text-boxinner95 numericalign numericsonly" maxlength="10" onblur="CustownedCount(this);" style="width:90%;"  onfocusout="txtCustOwnQtyFocusOut(this)"/>' +
        //                        '   </td>' +
        //                        '   <td>' +
        //                        '       <input type="text" id="txtConsignedQuantity_${Index}" value="NA" class="DisableBackNumericInput" maxlength="10" style="width:90%;" readonly="readonly"/>' +
        //                        '   </td>';
        //    }
        //    $('#thQty1')[0].innerHTML = 'Customer Owned Qty.';
        //    $('#thQty2')[0].innerHTML = 'Consigned Qty.';

        //}

        //strTR = strTR + (SelectedDateCodeTracking == true ?
        //            '    <td>' +
        //            '        <input type="text" id="txtExpirationDate_${Index}" value="${ExpirationDate}" class="text-box" readonly="readonly" style="background:white" maxlength="128" />' +
        //            '    </td>'
        //            : '') +
        //            '    <td>' +
        //            '        <img src="/content/images/delete.png" alt="Delete" style="cursor: pointer;" onclick="return DeleteLineItemCount(this);"">' +
        //            '    </td>' +
        //            '</tr>';

        strTR = strTR.split('${Index}').join(index);
        strTR = strTR.split('${BinNumber}').join((data.BinNumber == null || data.BinNumber == undefined ? '' : data.BinNumber));
        strTR = strTR.split('${ItemGUID}').join((data.ItemGUID == null || data.ItemGUID == undefined ? '' : data.ItemGUID));
        strTR = strTR.split('${BinID}').join((data.BinID == null || data.BinID == undefined ? '' : data.BinID));
        strTR = strTR.split('${Comment}').join((data.Comment == null || data.Comment == undefined ? '' : data.Comment));
        strTR = strTR.split('${LotSerialNumber}').join((data.LotSerialNumber == null || data.LotSerialNumber == undefined ? '' : data.LotSerialNumber));
        strTR = strTR.split('${GUID}').join((data.GUID == null || data.GUID == undefined ? '' : data.GUID));
        strTR = strTR.split('${IsConsigned}').join((data.Consignment == null || data.Consignment == undefined || data.Consignment == false ? '' : ' checked= "checked" '));
        if (SelectedMode == 'EDIT') {
            strTR = strTR.split('${CountQuantity}').join((data.AvailableQuantity == null || data.AvailableQuantity == undefined ? '' : data.AvailableQuantity));
        }
        else if (SelectedSerialNumberTracking == true) {
            strTR = strTR.split('${CountQuantity}').join('');
        }
        else {
            strTR = strTR.split('${CountQuantity}').join('');
        }

        if (SelectedConsignment == true && data.IsConsigned == true) {
            strTR = strTR.split('${ConsignedCheck}').join('checked="checked"');
        }
        else {
            strTR = strTR.split('${ConsignedCheck}').join('');
        }

        //if (SelectedSerialNumberTracking == true) {
        //    if (SelectedMode == 'EDIT') {
        //        strTR = strTR.split('${CountQuantity}').join((data.AvailableQuantity == null || data.AvailableQuantity == undefined ? '' : data.AvailableQuantity));
        //    }
        //    else {
        //        strTR = strTR.split('${CountQuantity}').join('1');
        //    }

        //    if (SelectedConsignment == true && data.IsConsigned == true) {
        //        strTR = strTR.split('${ConsignedCheck}').join('checked="checked"');
        //    }
        //    else
        //    {
        //        strTR = strTR.split('${ConsignedCheck}').join('');
        //    }
        //}
        //else {

        //    if (SelectedMode == 'EDIT') {
        //        strTR = strTR.split('${CountCustomerOwnedQuantity}').join((data.CountCustomerOwnedQuantity == null || data.CountCustomerOwnedQuantity == undefined ? '' : data.CountCustomerOwnedQuantity));
        //    }
        //    else {
        //        strTR = strTR.split('${CountCustomerOwnedQuantity}').join((data.AvailableQuantity == null || data.AvailableQuantity == undefined ? '' : data.AvailableQuantity));
        //    }

        //    if (SelectedMode == 'EDIT') {
        //        strTR = strTR.split('${CountConsignedQuantity}').join((data.CountConsignedQuantity == null || data.CountConsignedQuantity == undefined ? '' : data.CountConsignedQuantity));
        //    }
        //    else {
        //        strTR = strTR.split('${CountConsignedQuantity}').join((data.ConsignedQuantity == null || data.ConsignedQuantity == undefined ? '' : data.ConsignedQuantity));
        //    }

        //}

        strTR = strTR.split('${ExpirationDate}').join((data.Expiration == null || data.Expiration == undefined ? '' : data.Expiration));
        strTR = strTR.split('${ReceivedDate}').join((SelectedReceivedDate == null || SelectedReceivedDate == undefined ? '' : SelectedReceivedDate));
        strTR = strTR.split('${DateCodeTracking}').join((SelectedDateCodeTracking == null || SelectedDateCodeTracking == undefined ? false : SelectedDateCodeTracking));
        strTR = strTR.split('${SerialNumberTracking}').join((SelectedSerialNumberTracking == null || SelectedSerialNumberTracking == undefined ? false : SelectedSerialNumberTracking));
        strTR = strTR.split('${LotNumberTracking}').join((SelectedLotNumberTracking == null || SelectedLotNumberTracking == undefined ? false : SelectedLotNumberTracking));
        strTR = strTR.split('${Cost}').join((data.Cost == null || data.Cost == undefined ? 0 : data.Cost));
        strTR = strTR.split('${ItemType}').join((data.ItemType == null || data.ItemType == undefined ? 0 : data.ItemType));

        $('#ItemModeDataTableBody').append(strTR);

        //-----------------------------------------
        //
        ItemLocationfillEditableOptions(1, 'ddlItemSourceBins_' + index.toString(), 0, SelectedItemGuid, 'ItemModeDataTableForLots', 'IMM');

        if (SelectedSerialNumberTracking == true) {
            ItemLotSerialfillEditableOptions('ddlLotSerialNumber_' + index.toString(), SelectedItemGuid, 'ItemModeDataTableForLots', 'txtCustOwnQty_' + index.toString(), 'txtExpirationDate_' + index.toString());
        }

        if (SelectedDateCodeTracking == true) {
            $("#txtExpirationDate_" + index.toString()).datepicker({
                changeMonth: true,
                changeYear: true, dateFormat: RoomDateJSFormat
            });
        }

        SetItemModeDataTableForLotsTableClass();
    }


    function ddlItemSourceBinsFocusOut(ddlItemSourceBins) {
        var Tr = $(ddlItemSourceBins).closest("tr");
        if (Tr.is(":last-child")) {
            AddNewRow(Tr);
        }
    }

    function ddlLotSerialNumberFocusOut(ddlLotSerialNumber) {
        var Tr = $(ddlLotSerialNumber).closest("tr");
        if (Tr.is(":last-child")) {
            AddNewRow(Tr);
        }
    }

    function txtCustOwnQtyFocusOut(txtCustOwnQty) {
        var Tr = $(txtCustOwnQty).closest("tr");
        if (Tr.is(":last-child")) {
            AddNewRow(Tr);
        }
    }

    function txtExpirationDateFocusOut(txtExpirationDate) {
        var Tr = $(txtExpirationDate).closest("tr");
        if (Tr.is(":last-child")) {
            AddNewRow(Tr);
        }
    }

    function AddNewRow(Tr) {
        var _BinNumber = $(Tr).find("input[id^='ddlItemSourceBins_']").val();
        var _LotSerialNumber = $.trim($(Tr).find("input[id^='ddlLotSerialNumber_']").val());
        var _CustOwnQty = null;

        if (SelectedSerialNumberTracking == true) {
            _CustOwnQty = $(Tr).find("input[id^='txtQuantity_']").val();
        }
        else {
            _CustOwnQty = $(Tr).find("input[id^='txtCustOwnQty_']").val();
        }

        var AddRow = true;

        if (SelectedMode == 'ADD' && (_BinNumber == null || _BinNumber == undefined || _BinNumber.trim() == '')) {
            AddRow = false;
        }

        if (SelectedSerialNumberTracking == true || SelectedLotNumberTracking == true) {
            if (_LotSerialNumber == null || _LotSerialNumber == undefined || _LotSerialNumber.trim() == '') {
                AddRow = false;
            }
        }

        if (SelectedSerialNumberTracking == false && SelectedLotNumberTracking == false && SelectedDateCodeTracking == true) {
            var _ExpirationDate = $('#' + $(Tr).find("input[id^='txtExpirationDate_']")[0].id).datepicker('getDate');
            if (_ExpirationDate == null || _ExpirationDate == undefined) {
                AddRow = false;
            }
        }

        //if (_CustOwnQty == null || _CustOwnQty == undefined || _CustOwnQty.trim() == '') {
        //    AddRow = false;
        //}

        if (AddRow == true) {
            var NewRow = {
                GUID: '00000000-0000-0000-0000-000000000000',
                BinNumber: (SelectedMode == 'EDIT' ? SelectedBinNumber : ''),
                BinID: (SelectedMode == 'EDIT' ? SelectedBinID : ''),
                ItemGUID: SelectedItemGuid,
                Comment: '',
                LotSerialNumber: '',
                CountCustomerOwnedQuantity: null,
                CountConsignedQuantity: null,
                Expiration: null,
                ItemType: SelectedItemType,
                Cost: SelectedCost,
                Consignment: SelectedConsignment,
                AvailableQuantity: (SelectedSerialNumberTracking == true ? 1 : null)
            };
            AddRowToLotDetail(NewRow);
        }
    }

    function CloseLotDetailPopupForCount() {
        $('#PopupForSerialLotItemContainer').dialog('close');
        return;
    }

    function DeleteLineItemCount(imgDelete) {
        var Tr = $(imgDelete).closest("tr");

        if (!Tr.is(":last-child")) {

            var _BinNumber = $(Tr).find("input[id^='ddlItemSourceBins_']").val();
            var _LotSerialNumber = $.trim($(Tr).find("input[id^='ddlLotSerialNumber_']").val());
            var _CustOwnQty = $(Tr).find("input[id^='txtCustOwnQty_']").val();
            var _ConsignedQuantity = $(Tr).find("input[id^='txtConsignedQuantity_']").val();

            var _ExpirationDate = null;
            if (SelectedDateCodeTracking == true)
                _ExpirationDate = $('#' + $(Tr).find("input[id^='txtExpirationDate_']")[0].id).datepicker('getDate');

            var AskConfirmation = false;

            if (SelectedMode == 'ADD' && _BinNumber != null && _BinNumber != undefined && _BinNumber.trim() != '') {
                AskConfirmation = true;
            }

            if ((SelectedSerialNumberTracking == true || SelectedLotNumberTracking == true)
                && (_LotSerialNumber != null && _LotSerialNumber != undefined && _LotSerialNumber.trim() != '')) {
                AskConfirmation = true;
            }

            if (SelectedDateCodeTracking == true && _ExpirationDate != null && _ExpirationDate != undefined) {
                AskConfirmation = true;
            }

            if (_CustOwnQty != null && _CustOwnQty != undefined && _CustOwnQty.trim() != '' && parseFloat(_CustOwnQty) > 0) {
                AskConfirmation = true;
            }

            if (SelectedConsignment == true && _ConsignedQuantity != null && _ConsignedQuantity != undefined && _ConsignedQuantity.trim() != '' && parseFloat(_ConsignedQuantity) > 0) {
                AskConfirmation = true;
            }

            if (AskConfirmation == true) {
                if (confirm("Are you sure you want to delete entry?")) {
                    Tr.remove();
                    SetItemModeDataTableForLotsTableClass();
                }
            }
            else {
                Tr.remove();
                SetItemModeDataTableForLotsTableClass();
            }
        }

        return false;
    }

    function SetItemModeDataTableForLotsTableClass() {
        var ClassIndex = 0;
        $('#ItemModeDataTableForLots tbody tr').each(function () {
            if ((ClassIndex % 2) == 0) {
                $(this).removeClass('odd').addClass('even');
            }
            else {
                $(this).removeClass('even').addClass('odd');
            }
            ClassIndex++;
        });
    }

    function DeleteLineItemCountByGUID(ctrlDelete, Guid) {
        //$('.clsDeleteLineItem').hide();
        HideShowDeleteLineItem('none');
        setTimeout(function () {
            if ($(ctrlDelete).closest('table').find('tr').length <= 2) {
                alert('@ResInventoryCountDetail.ReqLotOrSerialEntry');
                //$('.clsDeleteLineItem').show();
                HideShowDeleteLineItem('block');
            }
            else if (confirm("Are you sure you want to delete entry?")) {

                $('div#DivLoading').show();

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("DeleteLineItemCountByGUID", "Inventory")',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify({ CountLineItemGuid: Guid }),
                    success: function (response) {
                        if (response.Status == "ok") {
                            ShowSuccessMessage(response.Message);
                            oTableMSItem.fnDraw();
                            //$('#PopupForSerialLotItemContainer').dialog('close');
                        }
                        else {
                            ShowErrorMessage(response.Message)
                            //$('.clsDeleteLineItem').show();
                            HideShowDeleteLineItem('block');
                        }

                        $('div#DivLoading').hide();
                    },
                    error: function (err) {
                        //$('.clsDeleteLineItem').show();
                        HideShowDeleteLineItem('block');
                    }
                });

            }
            else {
                //$('.clsDeleteLineItem').show();
                HideShowDeleteLineItem('block');
            }
        }, 250);
        return false;
    }

    function HideShowDeleteLineItem(DisplayType) {
        var divsToHide = document.getElementsByClassName("clsDeleteLineItem"); //divsToHide is an array
        for (var i = 0; i < divsToHide.length; i++) {
            divsToHide[i].style.display = DisplayType;
        }
    }

    function SaveAndCloseLotDetailPopupForCount() {

        $('div#DivLoading').show();
        var ArrLots = new Array();
        var i = 0;

        $("table#ItemModeDataTableForLots tbody tr").each(function () {

            if (!$(this).is(":last-child")) {

                i++;

                var _ItemGuid = $(this).find("input#hdnItemGuid").val();
                var _Guid = $(this).find("input#hdnGuid").val();
                var _ItemNumber = $('#tblSelectedItemData').find('#lblItemNumber').val();
                var _ItemDescription = $('#tblSelectedItemData').find('#lblItemDescription').text();
                var _ItemType = parseInt($(this).find("input[id^='hdnItemType_']").val());
                var _Comment = $(this).find("input#txtComment").val();
                var _BinID = ($(this).find("input#hdnLocationId").val().trim() == '' ? 0 : parseInt($(this).find("input#hdnLocationId").val().trim()));
                var _BinNumber = $(this).find("input[id^='ddlItemSourceBins_']").val();


                var _CountConsignedQuantity = null;
                var _CountCustomerOwnedQuantity = null;
                var _IsConsigned = null;

                _CountConsignedQuantity = ($(this).find("input[id^='txtQuantity_']").val().trim() == '' ? null : parseFloat($(this).find("input[id^='txtQuantity_']").val().trim()));
                if (SelectedConsignment == true)
                    _IsConsigned = $(this).find("input[id^='chkIsConsigned_']").is(':checked');
                else
                    _IsConsigned = false;

                //if (SelectedSerialNumberTracking == true) {

                //    _CountConsignedQuantity = ($(this).find("input[id^='txtQuantity_']").val().trim() == '' ? null : parseFloat($(this).find("input[id^='txtQuantity_']").val().trim()));

                //    if (SelectedConsignment == true)
                //        _IsConsigned = $(this).find("input[id^='chkIsConsigned_']").is(':checked');
                //    else
                //        _IsConsigned = false;
                //}
                //else {
                //    _CountCustomerOwnedQuantity = ($(this).find("input[id^='txtCustOwnQty_']").val().trim() == '' ? null : parseFloat($(this).find("input[id^='txtCustOwnQty_']").val().trim()));

                //    if (SelectedConsignment == true)
                //        _CountConsignedQuantity = ($(this).find("input[id^='txtConsignedQuantity_']").val().trim() == '' ? null : parseFloat($(this).find("input[id^='txtConsignedQuantity_']").val().trim()));
                //}

                var _SerialNumberTracking = ($(this).find("input[id^='hdnSerialNumberTracking_']").val() == 'true' ? true : false);
                var _LotNumberTracking = ($(this).find("input[id^='hdnLotNumberTracking_']").val() == 'true' ? true : false);

                var _LotSerialNumber = '';
                if (SelectedSerialNumberTracking == true || SelectedLotNumberTracking == true) {
                    var _LotSerialNumber = $.trim($(this).find("input[id^='ddlLotSerialNumber_']").val());
                }

                var _Cost = ($(this).find("input[id^='hdnCost_']").val().trim() == '' ? 0 : parseFloat($(this).find("input[id^='hdnCost_']").val().trim()));
                var _DateCodeTracking = ($(this).find("input[id^='hdnIsDateCodeTracking_']").val() == 'true' ? true : false);
                var _ExpirationDate = (_DateCodeTracking == true ? $('#' + $(this).find("input[id^='txtExpirationDate_']")[0].id).datepicker('getDate') : null);
                var _ReceivedDate = ($(this).find("input[id^='hdnReceivedDate_']").val().trim() != '' ?
                                        new Date(parseInt($(this).find("input[id^='hdnReceivedDate_']").val().replace('/Date(', '').replace(')/', ''))) : null);

                var _IsStagingLocationCount = false;
                if ($("input[type='radio'][name='ShowStagingLocation']:checked").val() == "2")
                    _IsStagingLocationCount = true;
                else
                    _IsStagingLocationCount = false;

                //--------------------VALIDATIONS--------------------
                //
                if ((_CountConsignedQuantity == null || _CountConsignedQuantity == undefined || _CountConsignedQuantity == '') && (_CountConsignedQuantity != '0')) {
                    ArrLots = null;

                    ShowErrorMessage(QuantityMissingInRow.replace("{0}", i.toString()));
                    return false;
                }
                if (_SerialNumberTracking)
                {
                    if(_CountConsignedQuantity != '1' && _CountConsignedQuantity != '0')
                    {
                        ArrLots = null;
                        ShowErrorMessage(QuantityValidationSerialItem.replace("{0}", i.toString()));
                        return false;
                    }
                }
                if (_BinNumber == null || _BinNumber == undefined || _BinNumber.trim() == '') {
                    ArrLots = null;
                    ShowErrorMessage(BinnumberMissingRow.replace("{0}", i.toString()));
                    return false;
                }

                if ((SelectedSerialNumberTracking == true || SelectedLotNumberTracking == true) &&
                        (_LotSerialNumber == null || _LotSerialNumber == undefined || _LotSerialNumber.trim() == '')) {
                    ArrLots = null;
                    ShowErrorMessage(LotSerialnumberMissingRow.replace("{0}", i.toString()));
                    return false;
                }

                if (_DateCodeTracking == true && (_ExpirationDate == null || _ExpirationDate == undefined || _ExpirationDate == '')) {
                    ArrLots = null;
                    ShowErrorMessage(ExpirationDateMissingRow.replace("{0}", i.toString()));
                    return false;
                }

                //if (SelectedSerialNumberTracking == true) {
                //    if (_CountConsignedQuantity == null || _CountConsignedQuantity == undefined || _CountConsignedQuantity === '') {
                //        ArrLots = null;
                //        ShowErrorMessage("Consigned quantity is missing in row " + i.toString());
                //        return false;
                //    }
                //}
                //else {
                //    if (_CountCustomerOwnedQuantity == null || _CountCustomerOwnedQuantity == undefined || _CountCustomerOwnedQuantity === '') {
                //        ArrLots = null;
                //        ShowErrorMessage("Customer owned quantity is missing in row " + i.toString());
                //        return false;
                //    }
                //
                //    if (SelectedConsignment == true && (_CountConsignedQuantity == null || _CountConsignedQuantity == undefined || _CountConsignedQuantity === '')) {
                //        ArrLots = null;
                //        ShowErrorMessage("Consigned quantity is missing in row " + i.toString());
                //        return false;
                //    }
                //}

                var _ExpirationDateStr = null;
                if (_ExpirationDate != null && _ExpirationDate != undefined && _ExpirationDate.toString() != '') {
                    _ExpirationDate = new Date(_ExpirationDate - (_ExpirationDate.getTimezoneOffset() * 60000));
                    var ExpirationDateDay = _ExpirationDate.getUTCDate();
                    var ExpirationDateMonth = _ExpirationDate.getUTCMonth() + 1;
                    var ExpirationDateYear = _ExpirationDate.getUTCFullYear();
                    _ExpirationDateStr = ExpirationDateYear.toString()
                                         + '-' + (ExpirationDateMonth.toString().length == 1 ? '0' + ExpirationDateMonth.toString() : ExpirationDateMonth.toString())
                                         + '-' + (ExpirationDateDay.toString().length == 1 ? '0' + ExpirationDateDay.toString() : ExpirationDateDay.toString());
                }

                //---------------------------------------------------
                //
                if (_BinNumber != null && _BinNumber != undefined && _BinNumber.trim() != '') {
                    var NewRow = {
                        ID: 0,
                        ItemGUID: _ItemGuid,
                        ItemNumber: _ItemNumber,
                        ItemDescription: _ItemDescription,
                        ItemType: _ItemType,
                        Comment: _Comment,
                        BinID: _BinID,
                        BinNumber: _BinNumber,
                        CustomerOwnedQuantity: '',
                        CountCustomerOwnedQuantity: _CountCustomerOwnedQuantity,
                        ConsignedQuantity: '',
                        CountConsignedQuantity: _CountConsignedQuantity,
                        SerialNumberTracking: _SerialNumberTracking,
                        LotNumberTracking: _LotNumberTracking,
                        LotSerialNumber: _LotSerialNumber,
                        LotNumber: _LotSerialNumber,
                        SerialNumber: _LotSerialNumber,
                        Expiration: '',
                        Received: '',
                        DateCodeTracking: _DateCodeTracking,
                        ExpirationDate: _ExpirationDateStr,
                        ReceivedDate: _ReceivedDate,
                        Cost: _Cost,
                        GUID: _Guid,
                        IsStagingLocationCount: _IsStagingLocationCount,
                        CountGUID: '@Model.GUID',
                        CountDetailGUID: SelectedCountDetailGUID,
                        Consignment: SelectedConsignment,
                        IsConsigned: _IsConsigned
                    };

                    ArrLots.push(NewRow);
                }
            }
            else {
                if (i == 0) {
                    i++;
                    var _BinNumber = $(this).find("input[id^='ddlItemSourceBins_']").val();
                    var _LotSerialNumber = '';
                    if (SelectedSerialNumberTracking == true || SelectedLotNumberTracking == true) {
                        var _LotSerialNumber = $.trim($(this).find("input[id^='ddlLotSerialNumber_']").val());
                    }
                    var _DateCodeTracking = ($(this).find("input[id^='hdnIsDateCodeTracking_']").val() == 'true' ? true : false);
                    var _ExpirationDate = (_DateCodeTracking == true ? $('#' + $(this).find("input[id^='txtExpirationDate_']")[0].id).datepicker('getDate') : null);

                    //--------------------VALIDATIONS--------------------
                    //
                    if (_BinNumber == null || _BinNumber == undefined || _BinNumber.trim() == '') {
                        ArrLots = null;
                        ShowErrorMessage(BinnumberMissingRow.replace("{0}", i.toString()));
                        return false;
                    }

                    if ((SelectedSerialNumberTracking == true || SelectedLotNumberTracking == true) &&
                            (_LotSerialNumber == null || _LotSerialNumber == undefined || _LotSerialNumber.trim() == '')) {
                        ArrLots = null;
                        ShowErrorMessage(LotSerialnumberMissingRow.replace("{0}", i.toString()));
                        return false;
                    }

                    if (_DateCodeTracking == true && (_ExpirationDate == null || _ExpirationDate == undefined || _ExpirationDate == '')) {
                        ArrLots = null;
                        ShowErrorMessage(ExpirationDateMissingRow.replace("{0}", i.toString()));
                        return false;
                    }
                }
            }
        });

        if (ArrLots != null && ArrLots != undefined && ArrLots.length > 0) {

            var AjaxUrl = '';
            @*if (SelectedMode == 'ADD')
                AjaxUrl = '@Url.Action("SaveLotDetailPopupForCountAdd", "Inventory")';
            else
                AjaxUrl = '@Url.Action("SaveLotDetailPopupForCountUpdate", "Inventory")';*@

            AjaxUrl = '@Url.Action("AddUpdateLotDetailPopupForCount", "Inventory")';

            $.ajax({
                type: "POST",
                url: AjaxUrl,
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify({ lstCountLineItemDetail: ArrLots }),
                success: function (response) {

                    if (response.Status == "ok") {

                        ShowSuccessMessage(response.Message);

                        if (SelectedMode == 'EDIT')
                            oTableMSItem.fnDraw();
                        else
                            oTableItemModel.fnDraw();

                        $('#PopupForSerialLotItemContainer').dialog('close');
                        if ($("#btnAddAll") != undefined && $("#btnAddAll").length > 0) {
                            $("#btnAddAll").show();
                        }
                    }
                    else {
                        ShowErrorMessage(response.Message)
                    }

                    $('div#DivLoading').hide();

                },
                error: function (err) {
                }
            });
        }
        else {
            $('div#DivLoading').hide();
        }
        return false;
    }

    function ShowSuccessMessage(message) {
        $('div#target').css("z-index", 100000);
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#spanGlobalMessage").html(message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
    }

    function ShowErrorMessage(message) {
        $('div#target').css("z-index", 100000);
        $("#spanGlobalMessage").html(message);
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
    }

    $('#' + CountLineItemDataTable).on("focus", ".loadondemandudf", function (e) {
        var currentselectUDF = $(this);
        if ($(currentselectUDF).find('option').length <= 2) {
            var udfId = $(this).data('value');
            var UDFdefaultvalue = $(this).data('udfdefaultvalue');
            $.ajax({
                'url': '/UDF/GetUDFOptionsByUDF',
                data: { 'UDFID': udfId, 'UDFTableName': 'PullMaster' },
                success: function (response) {
                    // start code
                    var s = '';
                    s += '<option></option>';
                    var selectedvaluetext = $(currentselectUDF).find(":selected").text();
                    $.each(response.DDData, function (i, val) {
                        if (selectedvaluetext != "") {
                            if (val.UDFOption === selectedvaluetext) {
                                s += '<option value="' + val.ID + '" selected="selected">' + val.UDFOption + '</option>';
                            } else {
                                s += '<option value="' + val.ID + '">' + val.UDFOption + '</option>';
                            }
                        } else {
                            if (val.UDFOption == UDFdefaultvalue) {
                                s += '<option value="' + val.ID + '" selected="selected">' + val.UDFOption + '</option>';
                            } else {
                                s += '<option value="' + val.ID + '">' + val.UDFOption + '</option>';
                            }
                        }
                     //s += '<option value="' + val.ID + '">' + val.UDFOption + '</option>';
                    });
                    $(currentselectUDF).empty();
                    $(currentselectUDF).append(s);

                    $(currentselectUDF).trigger('change');
                    //End code
                }, error: function () {

                }
            });
        }
    });

    //


    //function fnFormatDetailsLI(oTable, nTr) {
    //    var oData = oTableMSItem.fnGetData(nTr);
    //    var sOut = '';
    //    var _InventoryCountGUID = $(nTr).find("input[type='hidden'][name='hdnInventoryCountDetailGUID']").val();
    //    $('div#DivLoading').show();
    //    $.ajax({
    //        "url": '@Url.Content("~/Inventory/GetCountLineItemDetailList")',
    //        data: { InventoryCountGUID: _InventoryCountGUID },
    //        "async": false,
    //        cache: false,
    //        "dataType": "text",
    //        "success": function (json) {
    //            sOut = json;
    //            $('div#DivLoading').hide();
    //        },
    //        error: function (response) {
    //
    //            //
    //        }
    //    });
    //
    //    return sOut;
    //}
    $('#PageNumber1').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#Gobtn1").click();
            return false;
        }
    });

    $("#Gobtn1").click(function () {
        var pval = $('#PageNumber1').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (pval == 0)
            return;
        $('#' + CountLineItemDataTable).dataTable().fnPageChange(Number(pval - 1));
        $('#PageNumber1').val('');
    });
</script>
