@model eTurnsWeb.Models.ItemModelPerameter
@{
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    var settings = new GridHeaderSettings() { DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = false, dataViewType = DataViewType.None, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "ItemMasterModelListMS" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ItemMaster" , ListName= "_ItemMaster", ItemModelCallFromPageName = "materialstaging" };
    if (Model.ModelHeader.ToLower().Contains("add items to Stagging"))
    {
        modelCommon.Text = "Order";
    }
    else
    {
        modelCommon.Text = "eTurns";
    }
    MaterialStagingDTO objMaterialStagingDTO = ViewBag.MatStagDTO;

    bool ShowStagSelection = false;
    if (string.IsNullOrWhiteSpace(objMaterialStagingDTO.StagingLocationName) || objMaterialStagingDTO.StagingLocationName == "[|EmptyStagingBin|]")
    {
        ShowStagSelection = true;
    }
    string StageHeaderName = objMaterialStagingDTO.StagingName;
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);

}
@*<h2>
        @Model.ModelHeader
    </h2>*@
<div class="userListBlock">
    <div id="tab7" class="tabContener" style="width: 99%">
        <div class="searchWrapper">
            <div class="searchBlock">
                <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                <div class="searchinputB">
                    <input type="text" class="searchinput" id="ItemModel_filter" />
                    <a href="javascript:void(0);" class="xclose">
                        <img src="~/Content/images/x.png" alt="X" id="clear_QLItemModel_filter" />
                    </a>
                </div>
                &nbsp;<span class="label" onclick="LoadAllItemData();" style="text-decoration: underline;
                    cursor: pointer;padding-left:15px">@ResCommon.LoadAllItems</span>
            </div>
        </div>
        @Html.ItemModelGridTopHeader(settings)
        <script src="@Url.Content("~/Scripts/PageScripts/NarrowSearchForItemModel.js?v=" + version)" type="text/javascript"></script>
        @Html.Partial("NarrowSearchForItemModel", modelCommon)
        <div class="userContent ">
            <table id="ItemModeDataTable" class="display">
                <thead>
                    <tr>
                        @*<th>
                        </th>*@
                        <th class="NotHide">
                            @ResCommon.Add
                        </th>
                        <th class="NotHide" id="tdAddQty">
                            @ResItemMaster.QtyToAdd
                        </th>
                        <th class="NotHide">
                            @ResMaterialStaging.SourceBin
                        </th>
                        <th>
                            @ResItemMaster.DestStageBin @*eTurns.DTO.ResMaterialStagingDetail.StagingBinName*@
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.ID
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Cost
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.RoomName
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.CreatedOn
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.UpdatedOn
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.UpdatedBy
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.CreatedBy
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ManufacturerName
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ManufacturerNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Supplier
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SupplierPartNo
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.UPC
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.UNSPSC
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Description
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.LongDescription
                        </th>
                        <th>
                            @eTurns.DTO.ResCategoryMaster.Category
                        </th>
                        <th>
                            @eTurns.DTO.ResGLAccount.GLAccount
                        </th>
                        <th>
                            @eTurns.DTO.ResUnitMaster.Unit
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.PricePerTerm
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.DefaultPullQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Markup
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SellPrice
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ExtendedCost
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.LeadTimeInDays
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Trend
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Taxable
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Consignment
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.StagedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.InTransitquantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnOrderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnTransferQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SuggestedOrderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.RequisitionedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.AverageUsage
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Turns
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnHandQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.CriticalQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.MinimumQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.MaximumQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.WeightPerPiece
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemUniqueNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsTransfer
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsPurchase
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.InventoryClassification
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SerialNumberTracking
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.LotNumberTracking
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.DateCodeTracking
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemType
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ImagePath
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsLotSerialExpiryCost
                        </th>
                        @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster))
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <div style="clear: both; width: 90%; margin-top: 10px;">
                <input type="button" value="@ResCommon.AddAll" id="btnAddAllNew" class="CreateBtn" style="float: left;" />
                <input type="button" value="@ResCommon.Close" id="btnModelCancle" class="CreateBtn" style="float: left;" />
            </div>
        </div>
        @Html.Partial("_QTYLegends")
    </div>
</div>
<script type="text/javascript">
    var IsQLLoaded = false;
    var oTableItemModelMS;
    var sImageUrl = "/Content/images/";
    var anOpen = [];
    var MSITEMColumnObject = new Array();
    //            MSITEMColumnObject.push({
    //                "mDataProp": null, "sClass": "read_only control center", "sDefaultContent": '', "fnRender": function (obj, val) {
    //                    if (obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '') {
    //                        if (obj.aData.OnHandQuantity != null && obj.aData.OnHandQuantity > 0) {
    //                            return "<img id='imgQty' src='" + sImageUrl + "drildown_open.jpg' />";
    //                        }
    //                        else {
    //                            return "<img id='imgQty' src='" + sImageUrl + "drildown_open_greyed.jpg' />";
    //                        }
    //                    }
    //                    else {
    //                        return "<input type='button' value='Load' onclick='return LoadQuickListData(this)' id='btnLoad' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnQuickListGUID'  style='display:none'>" + obj.aData.QuickListGUID + "</span>";
    //                    }
    //                }
    //            });

    MSITEMColumnObject.push({
        "mDataProp": null, "bSortable": false,
        "sClass": "read_only center nosort",
        "sDefaultContent": '',
        "fnRender": function (obj, val) {
            var strReturn = ' <input type="hidden" id="hdQuickListGUID" value="' + obj.aData.QuickListGUID + '" />';
            if (obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '') {
                strReturn = strReturn + "<input type='button' name='btnInLineAdd' id='btnInLineAdd'  value='@ResCommon.Add' style='float: none;width:60px;margin: 5px -3px 2px 2px;' class='CreateBtn' /><span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span>";
            }
            else {
                strReturn = strReturn + "<input type='button' value='@ResCommon.Add' onclick='return LoadQuickListData(this);enablePullbutton();' id='btnLoad' class='CreateBtn pullbutton' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnQuickListGUID'  style='display:none'>" + obj.aData.QuickListGUID + "</span>" + "<span id='spnOrderItemType'  style='display:none'>" + obj.aData.ItemType + "</span>" + "<input type='hidden' id='itemWisePONumber' value='" + obj.aData.ItemBlanketPO + "' />";
            }

            return strReturn;
        }
    });

    MSITEMColumnObject.push({
        "mDataProp": null, "bSortable": false,
        "sClass": "read_only center nosort",
        "sDefaultContent": '',
        "fnRender": function (obj, val) {
            var DefaultPullQTy = obj.aData.DefaultPullQuantity;
            if (IsQLLoaded == true && DefaultPullQTy > 0) {
                return "<input type='text' value='" + DefaultPullQTy + "' name='txtQtyToAdd' id='txtQtyToAdd' value='' style='width:85%;min-width:100px;' class='numericinput' />";
            }
            else {
                return "<input type='text'  name='txtQtyToAdd' id='txtQtyToAdd' value='' style='width:85%;min-width:100px;' class='numericinput' />";
            }
        }
    });

    MSITEMColumnObject.push({
        "mDataProp": "DefaultLocationName",
        "sClass": "read_only center",
        "sDefaultContent": '',
        "fnRender": function (obj, val) {
            if (obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '') {
                var vDefaultLocationName = '';
                if (obj.aData.ItemType != 4) {
                    vDefaultLocationName = obj.aData.DefaultLocationName;
                }

                var strReturn = '<span style="display:none">"' + vDefaultLocationName + '"</span> <span style="position:relative"><input type="text" id="txtBinNumber" class="text-boxinner AutoPullBins bin-input-readonly" style = "width:85%;min-width:100px;" value="' + vDefaultLocationName + '" />';
                var binID = obj.aData.DefaultLocation;
                if (isNaN(parseInt(binID)) || parseInt(binID) <= 0)
                    binID = '';

                strReturn = strReturn + ' <input type="hidden" id="BinID" value="' + binID + '" />';
                strReturn = strReturn + ' <a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;" class="ShowAllOptionsBin" ><img src="/Content/images/arrow_down_black.png" alt="select" /></a></span>';
                return strReturn
            }
            else {
                return "";
            }
        }
    });

    MSITEMColumnObject.push({
        "mDataProp": "",
        "bSortable": false,
        "sClass": "read_only center nosort",
        "sDefaultContent": '',
        "fnRender": function (obj, val) {
            if (obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '') {
                if ('@ShowStagSelection' == '@Boolean.TrueString') {
                    var strReturn = "<span style='position: relative'>";
                    strReturn = strReturn + "<input type='text' id='txtLineItemStagingBin' name='txtLineItemStagingBin' value='' style='width:85%;min-width:100px;' class='text-boxinner' /><input type='hidden' name='hdnStagingBin' id='hdnStagingBin' value='' /><input type='hidden' name='hdnStagingBinName' id='hdnStagingBinName' value='' />";
                    strReturn = strReturn + "<a id='lnkShowAllOptionsItemStagingBin' href='javascript:void(0);' style='position: absolute; right: 5px; top: 0px;' class='ShowAllOptionsItemStagingBin'>";
                    strReturn = strReturn + "<img src='/Content/images/arrow_down_black.png' alt='select' /></a></span>";
                    return strReturn;
                }
                else {
                    if ('@objMaterialStagingDTO.StagingLocationName' == "[|EmptyStagingBin|]") {
                        return "<span></span><input type='hidden' name='hdnStagingBin' id='hdnStagingBin' value='@objMaterialStagingDTO.BinID' /><input type='hidden' name='hdnStagingBinName' id='hdnStagingBinName' value='@objMaterialStagingDTO.StagingLocationName' />";
                    }
                    else {
                        return "<span>@objMaterialStagingDTO.StagingLocationName</span><input type='hidden' name='hdnStagingBin' id='hdnStagingBin' value='@objMaterialStagingDTO.BinID' /><input type='hidden' name='hdnStagingBinName' id='hdnStagingBinName' value='@objMaterialStagingDTO.StagingLocationName' />";
                    }
                }
            }
            else {
                return "";
            }
        }
    });


    MSITEMColumnObject.push({ "mDataProp": "ID", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "ItemNumber", "sClass": "read_only", "sDefaultContent": '' });
    MSITEMColumnObject.push({
        "mDataProp": "Cost", "sClass": "read_only numericalign isCost",
        "fnRender": function (obj, val) {
            if (obj.aData.Cost != null && obj.aData.Cost != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.Cost, 1) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
        }
    });
    MSITEMColumnObject.push({ "mDataProp": "RoomName", "sClass": "read_only" });
    MSITEMColumnObject.push({
        "mDataProp": "Created", "sClass": "read_only",
        "fnRender": function (obj, val) {
            return obj.aData.CreatedDate;
            // return GetDateInFullFormat(val);
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "Updated", "sClass": "read_only",
        "fnRender": function (obj, val) {
            return obj.aData.UpdatedDate;
            //return GetDateInFullFormat(val);
        }
    });

    MSITEMColumnObject.push({ "mDataProp": "UpdatedByName", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "CreatedByName", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "ManufacturerName", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "ManufacturerNumber", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "SupplierName", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "SupplierPartNo", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "UPC", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "UNSPSC", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "Description", "sClass": "read_only", "sDefaultContent": '', "fnRender": function (obj, val) { return "<div class='comment more'>" + obj.aData.Description + "</div>"; } });
    MSITEMColumnObject.push({ "mDataProp": "LongDescription", "sClass": "read_only", "sDefaultContent": '', "fnRender": function (obj, val) { return "<div class='comment more'>" + obj.aData.LongDescription + "</div>"; } });
    MSITEMColumnObject.push({ "mDataProp": "CategoryName", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "GLAccount", "sClass": "read_only" });
    MSITEMColumnObject.push({ "mDataProp": "Unit", "sClass": "read_only" });
    MSITEMColumnObject.push({
        "mDataProp": "PricePerTerm", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.PricePerTerm != null && obj.aData.PricePerTerm != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.PricePerTerm, 1) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "DefaultReorderQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.DefaultReorderQuantity != null && obj.aData.DefaultReorderQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.DefaultReorderQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "DefaultPullQuantity", "sClass": "read_only numericalign isCost",
        "fnRender": function (obj, val) {
            if (obj.aData.DefaultPullQuantity != null && obj.aData.DefaultPullQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.DefaultPullQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({ "mDataProp": "Markup", "sClass": "read_only isCost" });
    MSITEMColumnObject.push({
        "mDataProp": "SellPrice", "sClass": "read_only numericalign  isCost",
        "fnRender": function (obj, val) {
            if (obj.aData.SellPrice != null && obj.aData.SellPrice != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.SellPrice, 1) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "ExtendedCost", "sClass": "read_only numericalign isCost",
        "fnRender": function (obj, val) {
            if (obj.aData.ExtendedCost != null && obj.aData.ExtendedCost != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.ExtendedCost, 1) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
        }
    });
    MSITEMColumnObject.push({ "mDataProp": "LeadTimeInDays", "sClass": "read_only" });
    MSITEMColumnObject.push({
        "mDataProp": "Trend", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
    });
    MSITEMColumnObject.push({
        "mDataProp": "Taxable", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
    });
    MSITEMColumnObject.push({
        "mDataProp": "Consignment", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
    });


    MSITEMColumnObject.push({
        "mDataProp": "StagedQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.StagedQuantity != null && obj.aData.StagedQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.StagedQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "InTransitquantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.InTransitquantity != null && obj.aData.InTransitquantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.InTransitquantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "OnOrderQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.OnOrderQuantity != null && obj.aData.OnOrderQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.OnOrderQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "OnTransferQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.OnTransferQuantity != null && obj.aData.OnTransferQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.OnTransferQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "SuggestedOrderQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.SuggestedOrderQuantity != null && obj.aData.SuggestedOrderQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.SuggestedOrderQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "RequisitionedQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.RequisitionedQuantity != null && obj.aData.RequisitionedQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.RequisitionedQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "AverageUsage", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.AverageUsage != null && obj.aData.AverageUsage != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.AverageUsage, 4) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "Turns", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.Turns != null && obj.aData.Turns != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.Turns, 4) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "OnHandQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.OnHandQuantity != null && obj.aData.OnHandQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.OnHandQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "CriticalQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.CriticalQuantity != null && obj.aData.CriticalQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.CriticalQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "MinimumQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.MinimumQuantity != null && obj.aData.MinimumQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.MinimumQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "MaximumQuantity", "sClass": "read_only numericalign",
        "fnRender": function (obj, val) {
            if (obj.aData.MaximumQuantity != null && obj.aData.MaximumQuantity != NaN)
                return "<span>" + FormatedCostQtyValues(obj.aData.MaximumQuantity, 2) + "</span>";
            else
                return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
    });
    MSITEMColumnObject.push({ "mDataProp": "WeightPerPiece", "sClass": "read_only numericalign" });
    MSITEMColumnObject.push({ "mDataProp": "ItemUniqueNumber", "sClass": "read_only" });


    MSITEMColumnObject.push({
        "mDataProp": "IsTransfer", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
    });
    MSITEMColumnObject.push({
        "mDataProp": "IsPurchase", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
    });
    MSITEMColumnObject.push({ "mDataProp": "InventoryClassificationName", "sClass": "read_only" });

    //MSITEMColumnObject.push({
    //    "mDataProp": "InventoryClassification", "sClass": "read_only"
    //                                , "fnRender": function (obj, val) {
    //                                    return GetBoolInFormat(obj, val);
    //                                }
    //});
    MSITEMColumnObject.push({
        "mDataProp": "SerialNumberTracking", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
    });
    MSITEMColumnObject.push({
        "mDataProp": "LotNumberTracking", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
    });
    MSITEMColumnObject.push({
        "mDataProp": "DateCodeTracking", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
    });
    MSITEMColumnObject.push({
        "mDataProp": "ItemType", "sClass": "read_only", "fnRender": function (obj, val) {
            if (obj.aData.ItemType == 1)
                return "Item";
            else if (obj.aData.ItemType == 2)
                return "Quick List";
            else if (obj.aData.ItemType == 3)
                return "Kit";
            else if (obj.aData.ItemType == 4)
                return "Labor";
            else
                return "";
        }
    });
    MSITEMColumnObject.push({
        "mDataProp": "ImagePath", "sClass": "read_only", "fnRender": function (obj, val) {

            if ((obj.aData.ImagePath != '' && obj.aData.ImagePath != null) || (obj.aData.ItemImageExternalURL != '' && obj.aData.ItemImageExternalURL != null)) {

                if (obj.aData.ImageType != '' && obj.aData.ImageType != null && obj.aData.ImageType == 'ImagePath' && obj.aData.ImagePath != '' && obj.aData.ImagePath != null) {
                     var path = '/Uploads/InventoryPhoto/';
                        var entid = '@eTurnsWeb.Helper.SessionHelper.EnterPriceID.ToString()';
                        var companyid = '@eTurnsWeb.Helper.SessionHelper.CompanyID.ToString()';
                        var roomid = '@eTurnsWeb.Helper.SessionHelper.RoomID.ToString()';
                    return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + path + entid + "/" + companyid + "/" + roomid + "/" + obj.aData.ID + "/" + obj.aData.ImagePath + '">';
                }
                else if (obj.aData.ImageType != '' && obj.aData.ImageType != null && obj.aData.ImageType == "ExternalImage" && obj.aData.ItemImageExternalURL != '' && obj.aData.ItemImageExternalURL != null) {
                    return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + obj.aData.ItemImageExternalURL + '">';
                }
                else {
                    return "<img src='../Content/images/no-image.jpg' />";
                }
            }
            else {
                return "<img src='../Content/images/no-image.jpg' />";
            }
        }
    });
    MSITEMColumnObject.push({ "mDataProp": "IsLotSerialExpiryCost", "sClass": "read_only" });
    MSITEMColumnObject.push(@Html.RenderColumnsArray("ItemMaster", false));

    var objColumns = {};

    $(document).ready(function () {
        fillItemMaster(false);
        $('#DivLoading').hide();



        $('#ItemModeDataTable').on('focus', "input.AutoPullBins", function (e) {
            var tr = $(this).parent().parent().parent();
            var itmGuid = $(tr).find('#spnItemGUID').text();
            var stagName = '';
            var hdnIsLoadMoreLocations = $(tr).find("#hdnIsLoadMoreLocations").val();

            $(this).autocomplete({
                source: function (request, response) {
                    $('#DivLoading').show();
                    var qtyRequired = true;

                    $.ajax({
                        url: '@Url.Content("~/Master/GetBinsOfItem")',
                        //type: 'POST',
                        data: { 'StagingName': '', 'NameStartWith': request.term, 'ItemGUID': itmGuid, 'QtyRequired': qtyRequired, 'OnlyHaveQty': true },
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data) {
                            $('#DivLoading').hide();
                            response($.map(data, function (Items) {
                                return {
                                    label: Items.Key,
                                    value: Items.Key,
                                    id: Items.ID
                                }
                            }));
                        },
                        error: function (err) {
                            $('#DivLoading').hide();
                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {
                    $(this).val(ui.item.value);
                    if (ui.item != null && ui.item != undefined && $.trim(ui.item.id).length > 0 && $.trim(ui.item.value).length > 0) {
                        $(this).parent().find('#BinID').val(ui.item.id);
                    }
                    else {
                        $(this).parent().find('#BinID').val('');
                    }

                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                change: function (event, ui) {
                    //                    if (ui.item != null && ui.item != undefined && $.trim(ui.item.id).length > 0) {
                    //                        $(this).parent().find('#BinID').val(ui.item.id);
                    //                    }
                    //                    else {
                    //                        $(this).parent().find('#BinID').val('');
                    //                    }
                }
            });
        });

    });
    function fillItemMaster(bDestroy) {
        var gaiSelected = [];
        objColumns = GetGridHeaderColumnsObject('ItemModeDataTable');
        oTableItemModelMS = $('#ItemModeDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "bAutoWidth": false,
            //"sScrollX": "8000px",
            "sScrollX": "130%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[3, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.OnHandQuantity == null) {
                    $('td:eq(0)', nRow).removeClass("control");
                }
                else if (aData.OnHandQuantity <= 0) {
                    $('td:eq(0)', nRow).removeClass("control");
                }
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";

               @*if ($(nRow).find('#ddlItemSourceBins').length > 0) {
                    var staLocName = $(nRow).find("input[type='hidden'][name='hdnStagingBinName']").val();
                    $.ajax({
                        "url": '@Url.Content("~/Master/GetBinsOfItem")',
                        "data": { 'StagingName': '', NameStartWith: '', ItemGUID: aData.GUID, QtyRequired: true, OnlyHaveQty: true },
                        "async": false,
                        "cache": false,
                        "dataType": "json",
                        "success": function (result) {
                            if (result.length > 0) {
                                $(nRow).find('#ddlItemSourceBins').empty();
                                for (var i = 0; i < result.length; i++) {
                                    if (result[i].OtherInfo1 == "DefaultLocation") {
                                        $(nRow).find('#ddlItemSourceBins').append('<option value="' + result[i].ID + '" selected="selected" >' + result[i].Key + '</options>');
                                    }
                                    else {
                                        $(nRow).find('#ddlItemSourceBins').append('<option value="' + result[i].ID + '">' + result[i].Key + '</options>');
                                    }
                                }
                            }
                        }
                    });
                }*@
                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'ItemMasterModelListMS' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'ItemMasterModelListMS' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content(Model.AjaxURLToFillItemGrid)',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                //PostCount = PostCount + 1;
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting != null && oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });
                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                aoData.push({ "name": "SupplierID", "value": '@Model.SupplierID' });
                //aoData.push({ "name": "msstaginID", "value": '@objMaterialStagingDTO.ID' });
                aoData.push({ "name": "MSGUID", "value": '@objMaterialStagingDTO.GUID' });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#ItemModeDataTable td').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });

                        if ($("#ItemModel_filter").val() != '') {
                            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
                        }
                        CallThisFunctionFromModel('success');

                        $('.ShowAllOptionsItemStagingBin').click(function () {
                            $(this).siblings("input[type='text'][name='txtLineItemStagingBin']").trigger("focus");
                            $(this).siblings("input[type='text'][name='txtLineItemStagingBin']").autocomplete("search", " ");
                        });

                        $('.ShowAllOptionsBin').click(function () {
                            $(this).siblings('.AutoPullBins').trigger("focus");
                            $(this).siblings(".AutoPullBins").autocomplete("search", " ");
                        });
                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
                $('#divQTYLegends').show(1000);
            },
            "aoColumns": MSITEMColumnObject

        });

        $('.DTTT_container').css('z-index', '-1');

        if ('@isCost' == '@Boolean.FalseString') {

            HideColumnUsingClassName("ItemModeDataTable");
            //ColumnsToHideinPopUp.push(12);
            // ColumnsToHideinPopUp.push(3);
            // ColumnsToHideinPopUp.push(22);
            // ColumnsToHideinPopUp.push(23);
            //ColumnsToHideinPopUp.push(24);

            // oTable.fnSetColumnVis(12, false);
            // oTableItemModelMS.fnSetColumnVis(3, false);
            // oTableItemModelMS.fnSetColumnVis(22, false);
            // oTableItemModelMS.fnSetColumnVis(23, false);
            // oTableItemModelMS.fnSetColumnVis(24, false);

        }
    }

    function onlyNumeric(event) {
        var charCode = (event.which) ? event.which : event.keyCode

        if (charCode > 31 && (charCode < 48 || charCode > 57 || code == 86))
            return false;

        return true;

    }


    function fnFilterGlobalIM() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#ItemModel_filter") != 'undefined' && ($("#ItemModel_filter").val().length > 2 || $("#ItemModel_filter").val().length == 0)) {
            //clearNarrowSearchFilterIM();
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            DoNarrowSearchIM();
            //$('#ItemModeDataTable').dataTable().fnFilter(
            //                searchtext,
            //                null,
            //                null,
            //                null
            //            );
        }
        else {
            $('#ItemModeDataTable td').removeHighlight();
            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
        }
    }
    function fnFilterGlobalIM_OnEnter(KeyCode) {

        if (typeof $("#ItemModel_filter") != 'undefined' && (KeyCode == 13 || $("#ItemModel_filter").val().length == 0)) {

            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            DoNarrowSearchIM();

        }
        else {
            $('#ItemModeDataTable td').removeHighlight();
            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
        }
    }

    //$("#ItemModel_filter").keyup(function (e) {
    //    var code = (e.keyCode ? e.keyCode : e.which);
    //    if (code == 13) {
    //    }
    //    else {
    //        fnFilterGlobalIM();
    //    }
    //});


    //$("#ItemModel_filter").keydown(function (e) {
    //    var code = (e.keyCode ? e.keyCode : e.which);
    //    if (code == 13) {
    //        var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
    //        //$('#ItemModeDataTable').dataTable().fnFilter(
    //        //                searchtext,
    //        //                null,
    //        //                null,
    //        //                null
    //        //            );
    //        DoNarrowSearchIM();
    //        return false;
    //    }
    //});
    var timeoutsc2;
    $('#ItemModel_filter').on('keyup', function (e) {
        $('#ItemModeDataTable').removeHighlight();
        var keycode = (e.keyCode ? e.keyCode : e.which);
        var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
        clearTimeout(timeoutsc2);
        var self = this;
        timeoutsc2 = setTimeout(function () {
            if (SearchPattern == 2 || SearchPattern == "2") {
                fnFilterGlobalIM();
            }
            else if ((SearchPattern == 1 || SearchPattern == "1") && e.keyCode == 13) {
                fnFilterGlobalIM_OnEnter(keycode);
            }
            else if (searchtext.length <= 0) {
                $('#ItemModeDataTable').dataTable().fnFilter(
                    searchtext,
                    null,
                    null,
                    null
                );
            }
        }, 300);
        if (searchtext.length > 0)
            $('#ItemModeDataTable').highlight(searchtext);
    });

    $("#clear_QLItemModel_filter").click(funClearFilterIM);

    function funClearFilterIM() {
        //Check length first
        if ($("#ItemModel_filter").val().length > 0) {
            $("#ItemModel_filter").val('');
            $('#ItemModeDataTable').dataTable().fnFilter(
                            $("#ItemModel_filter").val(),
                            null,
                            null,
                            null
                        );
        }
        $("#ItemModel_filter").focus();
        return false;
    }

    $('#PageNumberIM').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#GobtnIM").click();
            return false;
        }
    });

    $("#GobtnIM").click(function () {
        var pval = $('#PageNumberIM').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }

        if (pval == 0)
            return;

        oTableItemModelMS.fnPageChange(Number(pval - 1));
        $('#PageNumberIM').val('');
    });

    //$('#ItemModeDataTable td.control input[type="button"]').click(function () {
    function AddSingleItemToQuickList(obj) {
        var txxt = $(obj).parent().parent().find('#txtQty');
        var txtQty = txxt.val();
        if (txtQty != 'undefined' && txtQty.length > 0) {
            var trimtxtVal = txtQty.replace(/ /g, '');
            if (trimtxtVal.length > 0) {
                var ItemID = $(obj).parent().find('#spnItemID').text();
                var ItemGUID = $(obj).parent().find('#spnItemGUID').text();

                $.ajax({
                    url: '@Url.Content(Model.AjaxURLAddItemToSession)',
                    data: { 'pItemID': ItemID, 'pItemGUID': ItemGUID, 'pQuentity': trimtxtVal },
                    dataType: 'json',
                    type: 'POST',
                    async: false,
                    cache: false,
                    success: function (json) {
                        txxt.val('');
                        oTableItemModelMS.fnDraw();
                        CallThisFunctionFromModel(json.Status);
                    }
                });
            }
        }
    }

    $('#btnAddAll').click(function () {
        var arrItems = new Array();
        $('#ItemModeDataTable tbody tr').each(function () {
            var txxt = $(this).find('#txtQty');
            var txtQty = txxt.val();
            if (txtQty != 'undefined') {
                if (txtQty.length > 0) {
                    var trimtxtVal = txtQty.replace(/ /g, '');
                    if (trimtxtVal.length > 0) {
                        var itemID = $(this).find('#spnItemID').text();
                        var itemGUID = $(this).find('#spnItemGUID').text();
                        var data = { "ID": itemID, "GUID": itemGUID, "Qty": trimtxtVal };
                        arrItems.push(data);
                        txxt.val('');
                    }
                }
            }
        });

        $.ajax({
            url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
            data: { 'para': JSON.stringify(arrItems) },
            dataType: 'json',
            type: 'POST',
            async: false,
            cache: false,
            success: function (json) {
                oTableItemModelMS.fnDraw();
                CallThisFunctionFromModel(json.Status);
            }
        });

    });

    $("#btnModelCancle").click(function () {
        //$('.modalCloseImg').click();
        //$('.ui-dialog-titlebar-close').click();
        $("#ItemModelForMS").dialog("close");
        //CallThisFunctionFromModel('success');
    });

    // used for refresh the grid manually...
    $('#refreshGridIM').live('click', function () {
        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

        oTableItemModelMS.fnDraw();
        //fillItemMaster(false);

    });

    //**************************** Not used Code *************************//

    $("#reordersettingIM").click(function () {
        $("#divRefreshBlockIM").toggle();
    });

    $("#ColumnSortableModalIM").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        height: dHeight,
        title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
        draggable: false,
        resizable: false,
        stack: true,
        open: function () {
            GenerateColumnSortableIM();
            $("#ColumnSortableIM").sortable({ axis: "y", containment: "parent" });
            $('[aria-labelledby="ui-dialog-title-ColumnSortableModalIM"]').focus();
        }
    });

    $("#ColumnOrderSetupIM").click(function () {
        $("#ColumnSortableModalIM").dialog("open");
        return false;
    });

    function GenerateColumnSortableIM() {
        $('#ColumnSortableIM li').each(function (index) {
            $(this).remove();
        });
        var div = document.createElement('div');
        div.id = "CheckAll";
        div.innerHTML = "<input type='hidden' value ='ColumnSortableIM' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
                        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
        $('div.sortableContainer').find("div#CheckAll").remove();
        $('div.sortableContainer').prepend(div);

        for (i = 0, iLen = oTableItemModelMS.fnSettings().aoColumns.length; i < iLen; i++) {
            var oColumn = oTableItemModelMS.fnSettings().aoColumns[i];
            var li = document.createElement('li');
            li.id = GetColumnIndex1(oColumn.sTitle.trim());
            li.innerHTML = oColumn.sTitle.trim();
            var LiClassName = 'ui-state-default'
            if (oColumn.sClass.indexOf('NotHide') >= 0 || (oColumn.nTh != null && oColumn.nTh.className.indexOf('NotHide') >= 0)) {
                LiClassName = LiClassName + ' HiddenLi';
            }
            li.className = LiClassName;

            if (oColumn.sClass.indexOf('NotHide') >= 0 || (oColumn.nTh != null && oColumn.nTh.className.indexOf('NotHide') >= 0)) {
                li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" disabled="disabled" />' + oColumn.sTitle.trim();
            }
            else {
                if (oColumn.bVisible) {
                    li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
                else
                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            }
            $('#ColumnSortableIM').append(li);
        }
    }

    var GetColumnIndex1 = function (ColumnName) {
        return objColumns[ColumnName];
    };

    function UpdateColumnOrderIM(_ListName) {

        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();
        var _Order = $('#ColumnSortableIM').sortable("toArray");
        var __Order = _Order.toString().split(",");
        for (var i = 0; i < __Order.length; i++) {
            __Order[i] = parseInt(__Order[i], 10);
        }

        oTableItemModelMS.fnSettings().oLoadedState.ColReorder = __Order;

        var _abVisCols = [];
        for (i = 0, iLen = oTableItemModelMS.fnSettings().aoColumns.length; i < iLen; i++) {
            var checked = $("#" + i + "_").is(":checked");
            _abVisCols.push(checked);
        }
        oTableItemModelMS.fnSettings().oLoadedState.abVisCols = _abVisCols;

        $.ajax({
            "url": '@Url.Content("~/Master/SaveGridState")',
            data: { Data: JSON.stringify(oTableItemModelMS.fnSettings().oLoadedState), ListName: _ListName },
            "dataType": "json",
            cache: false,
            "async": false,
            "success": function (json) {
                o = json;
                $("#ColumnSortableModalIM").dialog("close");
                $("#ItemModelForMS").dialog("close");
                OpenItemPopup();
            }
        });
    }

    $("#ItemModeDataTable").on("click", "img", function (event) {

        if($(this).attr("src") == "/Content/images/arrow_down_black.png")
        {
            return;
        }
        else
        {
            var nTr = this.parentNode;
            var staLocId = $(nTr).find("input[type='hidden'][name='hdnStagingBin']").val();
            var staLocName = $(nTr).find("input[type='hidden'][name='hdnStagingBinName']").val();

            if (staLocName != undefined) {
                var i = $.inArray(nTr, anOpenMS);
                if (i === -1) {
                    $('img', this).attr('src', sImageUrl + "drildown_close.jpg");
                    oTableItemModelMS.fnOpen(nTr, fnFormatDetailsIM(oTableItemModelMS, nTr), '');
                    anOpenMS.push(nTr);
                }
                else {
                    $('img', this).attr('src', sImageUrl + "drildown_open.jpg");
                    oTableItemModelMS.fnClose(nTr);
                    anOpenMS.splice(i, 1);
                }
            }
            else {
                alert("Please enter the satging name");
            }
        }
    });

    function setnametohiddenpop(curobj) {
        $(curobj).parent().find("input[type='hidden'][name='hdnStagingBinName']").val(curobj.value);
    }
    function fnFormatDetailsIM(oTable, nTr) {
        var staLocId = $(nTr).find("input[type='hidden'][name='hdnStagingBin']").val();
        var staLocName = $(nTr).find("input[type='hidden'][name='hdnStagingBinName']").val();
        var oData = oTableItemModelMS.fnGetData(nTr);
        var sOut = '';
        $('#DivLoading').show();
        $.ajax({
            "url": '@Url.Content("~/Inventory/ItemLocDet")',
            data: { ItemGUID: oData.GUID, MSGUID: '@Model.PerentGUID', StageBinId: 0, staLocName: staLocName },
            "async": false,
            cache: false,
            "dataType": "text",
            "success": function (json) {
                sOut = json;
                $('#DivLoading').hide();
            },
            error: function (response) {
            }
        });

        return sOut;
    }

    var lastCheckedNewPull;
    $("#ItemModeDataTable").on("tap click", "tbody tr", function (e) {
        var QuickListGUID = $(this).find("#hdQuickListGUID").val();

        if (QuickListGUID != null && QuickListGUID != "") {
            if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text") {
                e.stopPropagation();
            }
            else if (e.currentTarget.getElementsByTagName("input").btnLoad != undefined) {
                e.stopPropagation();
            }
            else {
                //$(this).toggleClass('row_selected');
                if (!lastCheckedNewPull) {
                    lastCheckedNewPull = this;
                }

                if (e.shiftKey) {
                    var start = $('#ItemModeDataTable tbody tr').index(this);
                    var end = $('#ItemModeDataTable tbody tr').index(lastCheckedNewPull);

                    for (i = Math.min(start, end) ; i <= Math.max(start, end) ; i++) {
                        if (!$('#ItemModeDataTable tbody tr').eq(i).hasClass('row_selected')) {
                            $('#ItemModeDataTable tbody tr').eq(i).addClass("row_selected");
                        }
                    }
                    if (window.getSelection) {
                        if (window.getSelection().empty) {  // Chrome
                            window.getSelection().empty();
                        } else if (window.getSelection().removeAllRanges) {  // Firefox
                            window.getSelection().removeAllRanges();
                        }
                    } else if (document.selection) {  // IE?
                        document.selection.empty();
                    }
                } else if ((e.metaKey || e.ctrlKey)) {
                    $(this).toggleClass('row_selected');
                } else {
                    $(this).toggleClass('row_selected');
                }

                lastCheckedNewPull = this;
            }
            return false;
        }
        else
        {
            if (!lastCheckedNewPull) {
                lastCheckedNewPull = this;
            }

            if (e.shiftKey) {
                var start = $('#ItemModeDataTable tbody tr').index(this);
                var end = $('#ItemModeDataTable tbody tr').index(lastCheckedNewPull);

                for (i = Math.min(start, end); i <= Math.max(start, end); i++) {
                    if (!$('#ItemModeDataTable tbody tr').eq(i).hasClass('row_selected')) {
                        $('#ItemModeDataTable tbody tr').eq(i).addClass("row_selected");
                    }
                }
                if (window.getSelection) {
                    if (window.getSelection().empty) {  // Chrome
                        window.getSelection().empty();
                    } else if (window.getSelection().removeAllRanges) {  // Firefox
                        window.getSelection().removeAllRanges();
                    }
                } else if (document.selection) {  // IE?
                    document.selection.empty();
                }
            } else if ((e.metaKey || e.ctrlKey)) {
                $(this).toggleClass('row_selected');
            } else {
                $(this).toggleClass('row_selected');
            }

            lastCheckedNewPull = this;
        }
    });

    function LoadQuickListData(OBJGridRow) {
        var vsQuickListGUID = $(OBJGridRow).parent().parent().find('#spnQuickListGUID').text() == "" ? "" : $(OBJGridRow).parent().parent().find('#spnQuickListGUID').text();
        QuickListstgQty = parseInt($(OBJGridRow).parent().parent().find('#txtQtyToAdd').val() == '' ? 0 : $(OBJGridRow).parent().parent().find('#txtQtyToAdd').val());

        if (QuickListstgQty > 0) {
            var searchText = "QLGuid=" + vsQuickListGUID + "#Qty=" + QuickListstgQty.toString();
            oTableItemModelMS.fnFilter(searchText, null, null, null);
            IsQLLoaded = true;
        }
        else {
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("#spanGlobalMessage").html('@ResQuickListItems.msgProperQLQty');
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
        }
        return false;
    }

    $(oTableItemModelMS).ajaxSuccess(function () {
        if (IsQLLoaded == true) {
            IsQLLoaded = false;
        }
    });

    function LoadAllItemData() {
        oTableItemModelMS.fnFilter("", null, null, null);
    }


</script>
