@model IEnumerable<eTurns.DTO.ItemMasterDTO>
@using eTurns.DTO
@using eTurns.DTO.Resources
@{    
    //Layout = "~/Views/Shared/_PopupMaster.cshtml";
    var settingsNew = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayDeleteButton=false, DisplayColumnSetupButton = true, DisplayPrintBlock = true , DataTableName = "HistoryTable", ColumnSetupFor="ItemMasterChangeLog" };
    Guid itemGuid = ViewBag.ItemGuid;
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
}
<div class="searchWrapper">
    <div class="searchBlock">
        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
        <div class="searchinputB">
            <input type="text" class="searchinput" id="ItemHistoryText" />
            <a href="javascript:void(0);" class="xclose">
                <img src="~/Content/images/x.png" alt="X" id="ItemHistoryClear" /></a>
        </div>
    </div>
</div>
@*@Html.GridTopHeaderForHistory(settings)*@
@Html.GridTopHeader(settingsNew)
<div style="margin: 0 0.4% 1%; width: 99%;" class="userContent">
    <table id="HistoryTable" class="display">
        <thead>
            <tr>
                @*<th>
                    @eTurns.DTO.Resources.ResCommon.RowNo
                </th>*@
                <th>
                    @eTurns.DTO.Resources.ResCommon.HistoryID
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.HistoryAction
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ItemType
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ItemNumber
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Description
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnHandQuantity
                </th>
                 <th>
                    @eTurns.DTO.ResItemMaster.OnOrderQuantity
                </th>
                @*<th>
                    @eTurns.DTO.ResItemMaster.SuggestedOrderQuantity
                </th>*@

                <th>
                    @eTurns.DTO.ResItemMaster.OnOrderInTransitQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OrderedDate
                </th>

                <th>
                    @eTurns.DTO.ResItemMaster.IsItemLevelMinMaxQtyRequired
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.MinimumQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.MaximumQuantity
                </th>
                <th>
                    @eTurns.DTO.ResCategoryMaster.Category
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.InventoryClassification
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.AverageUsage
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Cost
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Markup
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SellPrice
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ExtendedCost
                </th>
                <th>@eTurns.DTO.ResItemMaster.LongDescription
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Supplier
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SupplierPartNo
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ManufacturerName
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.ManufacturerNumber
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.UPC
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.UNSPSC
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LeadTimeInDays
                </th>
                @*<th>
                    @eTurns.DTO.ResItemMaster.InTransitquantity
                </th>
                <th>@eTurns.DTO.ResItemMaster.OnTransferQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.RequisitionedQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Turns
                </th>*@
                <th>
                    @eTurns.DTO.ResItemMaster.CriticalQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.SerialNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.LotNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DateCodeTracking
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.IsLotSerialExpiryCost
                </th>
                <th>
                    @eTurns.DTO.ResGLAccount.GLAccount
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ID
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.PricePerTerm
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DefaultPullQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.DefaultLocation
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Trend
                </th>
                 <th>
                    @eTurns.DTO.ResItemMaster.QtyToMeetDemand
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Taxable
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Consignment
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.StagedQuantity
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.WeightPerPiece
                </th>
                @*<th>
                    @eTurns.DTO.ResItemMaster.ItemUniqueNumber
                </th>*@
                <th>
                    @eTurns.DTO.ResItemMaster.IsTransfer
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.IsPurchase
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.RoomName
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                </th>
                <th>
                    @eTurns.DTO.ResUnitMaster.Unit
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.AverageCost
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.Link2
                </th>
                @*<th>
                    @eTurns.DTO.ResItemMaster.BondedInventory
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.OnReturnQuantity
                </th>*@
                <th>
                    @eTurns.DTO.ResItemMaster.TrendingSetting
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.PullQtyScanOverride
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.AddedFrom
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.EditedFrom
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                </th>
                <th>
                    @eTurns.DTO.ResItemMaster.IsActive
                </th>
                @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster))
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
<script language="javascript" type="text/javascript">
        var oHistoryTable;
        var objHistoryColumns = {}
        var wHeight = $(window).height();
        var historyDTName = 'HistoryTable';
        var bIsIHFilter = false;

        $(document).ready(function () {
            var dHeight = wHeight * 0.8;
            objHistoryColumns = GetGridHeaderColumnsObject('HistoryTable');
             
            oHistoryTable = $('#HistoryTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "350%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[1, "desc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable', //+ "&nbsp; This barcode text is not assing to any item.<br>Would you like to assing it?<br><a id='aBarcodeYes'href='javascript:void(0)' onclick='javascript:return OpenItemInPopup(this);' >Yes</a> ",
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    compareHistoryRows(this);
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    if (!bIsIHFilter) {
                        $.ajax({
                            "url": '@Url.Content("~/Master/SaveGridState")',
                            "type": "POST",
                            data: { Data: JSON.stringify(oData), ListName: 'ItemMasterHistoryList' },
                            "async": false,
                            cache: false,
                            "dataType": "json",
                            "success": function (json) {
                                if (json.jsonData != '')
                                    o = json;
                            }
                        });
                    }
                    bIsIHFilter = false;
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                         "type": "POST",
                        data: { ListName: 'ItemMasterHistoryList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Inventory/ItemMaster_ChangeLogListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                         
                    //PostCount = PostCount + 1;
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    aoData.push({ "name": "ItemGuid", "value": '@(itemGuid.ToString())' });
                    if (oSettings.aaSorting.length != 0) {
                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "cache": false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        "beforeSend": function () {
                           // $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        "error": function(xhr, status, error) {
                            console.log(xhr);
                        },
                        "complete": function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                            CallShowHideData();
                            if ($('#global_filter').val().length > 0) {
                            }
                           if (ItemIDToOpen.length > 0) {
                               $('#myDataTable tr').each(function(i){
                                    if($(this).find('#ItemGUID').val()== ItemIDToOpen){
                                        $(this).find('img.ItemMasterImage').click();
                                        ItemIDToOpen = '';
                                        return;
                                    }
                                });
                            }
                     }
                   })
                },
                "fnInitComplete": function () {
                    compareHistoryRows(this);
                },
                "aoColumns": [
                            //{ "mDataProp": null, "sClass": "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' },
                            { "mDataProp": "HistoryID", "sClass": "read_only" },
                            { "mDataProp": "Action", "sClass": "read_only" },
                            {
                                "mDataProp": "ItemType", "sClass": "read_only"
                                    ,"sDefaultContent": '', "fnRender": function (obj, val) {
                                        if (val == 1)
                                            return "Item";
                                        else if (val == 2)
                                            return "Quick List";
                                        else if (val == 3)
                                            return "Kit";
                                        else if (val == 4)
                                            return "Labor";
                                        else
                                            return "";
                                    }
                            },
			                {
			                    "mDataProp": "ItemNumber",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false,
			                    "fnRender": function (obj, val) {
                                    var strVal = val;//.replace(/ /g, "&nbsp;");
                                    return strVal;
			                        //return "<a id='aEditLink' onclick='return ShowEditTabGUID(&quot;ItemEdit?ItemGUID=" + obj.aData.GUID.toString() + "&quot;,&quot;frmItem&quot;)' href='JavaScript:void(0);'>" + strVal + "</a>" + " <input type='hidden' id='ItemGUID' value='" + obj.aData.GUID.toString() + "' />" + " <input type='hidden' id='ItemLevelMinMaxQtyRequiredHidden' value='" + obj.aData.IsItemLevelMinMaxQtyRequired + "' />" +  " <input type='hidden' id='CriticalQuantityHidden' value='" + obj.aData.CriticalQuantity + "' />" +  " <input type='hidden' id='MinimumQuantityHidden' value='" + obj.aData.MinimumQuantity + "' />" + " <input type='hidden' id='OnHandQuantityHidden" + obj.aData.GUID + "' value='" + obj.aData.OnHandQuantity + "' />"
                                    ;
			                    }
			                },

                            { "mDataProp": "Description", "sClass": "read_only" },
                            {
                                "mDataProp": "OnHandQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
                                "fnRender": function (obj, val) {
                                    if (obj.aData.OnHandQuantity != null && obj.aData.OnHandQuantity != NaN)
                                        return "<span id='spnOnHand" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.OnHandQuantity,2) + "</span>";
                                    else
                                        return "<span id='spnOnHand" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0,2) + "</span>";
                                }
                            },
                            
//                            {
//                                "mDataProp": "OnOrderQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
//                                "fnRender": function (obj, val) {
//                                    if (isNaN(parseFloat(val)))
//                                        val = 0;
//                                    if (val > 0) {
//                                        return "<a id='aOnOrderQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayOnOrderQty(this)' >" + FormatedCostQtyValues(val,2) + "</span>";
//                                    }
//                                    else {
//                                        return FormatedCostQtyValues(val,2);
//                                    }
//                                }
//                            },
//                            {
//                                "mDataProp": "SuggestedOrderQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
//                                "fnRender": function (obj, val) {
//                                    if (obj.aData.SuggestedOrderQuantity != null && obj.aData.SuggestedOrderQuantity != NaN)
//                                        return "<span id='spnSuggested" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.SuggestedOrderQuantity,2) + "</span>";
//                                    else
//                                        return "<span id='spnSuggested" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0,2) + "</span>";
//                                }
//                            },
 {
     "mDataProp": "OnOrderQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
     "fnRender": function (obj, val) {
         if (obj.aData.OnOrderQuantity != null && obj.aData.OnOrderQuantity != NaN)
             return "<span id='spnOnOrderQuantity" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.OnOrderQuantity, 2) + "</span>";
         else
             return "<span id='spnOnOrderQuantity" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 2) + "</span>";
     }
 },
                              {
                                  "mDataProp": "OnOrderInTransitQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
                                  "fnRender": function (obj, val) {
                                      if (obj.aData.OnOrderInTransitQuantity != null && obj.aData.OnOrderInTransitQuantity != NaN)
                                          return "<span id='spnOnOrderInTransitQuantity" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.OnOrderInTransitQuantity, 2) + "</span>";
                                      else
                                          return "<span id='spnOnOrderInTransitQuantity" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 2) + "</span>";
                                  }
                              },

                           {
                               "mDataProp": "OrderedDate", "sClass": "read_only",
                               "fnRender": function (obj, val) {
                                   return obj.aData.OrderedDateStr;
                               }
                           },
                            {
                                "mDataProp": "IsItemLevelMinMaxQtyRequired", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                }
                            },
                            { "mDataProp": "MinimumQuantity", "sClass": "read_only numericalign",
	                            "fnRender": function (obj, val) {
                                   if (obj.aData.IsItemLevelMinMaxQtyRequired == "No")
                                   {
                                      return "<span>" + 'N/A' + "</span>";
                                   }
                                   else
                                   {  
		                            if (obj.aData.MinimumQuantity != null && obj.aData.MinimumQuantity != NaN)
			                            return "<span>" + FormatedCostQtyValues(obj.aData.MinimumQuantity,2) + "</span>";
		                            else
			                            return "<span>" + FormatedCostQtyValues(0,2) + "</span>";
                                    }
	                          }
                            },
                            { "mDataProp": "MaximumQuantity", "sClass": "read_only numericalign",
	                            "fnRender": function (obj, val) {
                                 if (obj.aData.IsItemLevelMinMaxQtyRequired == "No")
                                   {
                                       return "<span>" + 'N/A' + "</span>";
                                   }
                                   else
                                   {  
		                               if (obj.aData.MaximumQuantity != null && obj.aData.MaximumQuantity != NaN)
			                               return "<span>" + FormatedCostQtyValues(obj.aData.MaximumQuantity,2) + "</span>";
		                               else
			                               return "<span>" + FormatedCostQtyValues(0,2) + "</span>";
                                    }
	                            }
                            },
                            { "mDataProp": "CategoryName", "sClass": "read_only" },
                            { "mDataProp": "InventoryClassificationName", "sClass": "read_only" },

                             {
                                "mDataProp": "AverageUsage", "sClass": "read_only numericalign", "sDefaultContent": '',
                                "fnRender": function (obj, val) {
                                    if (isNaN(parseFloat(val)))
                                        val = 0;
                                    if (val > 0) {
                                        return "<a id='aOnAverageUsageQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayAverageUsageQty(this)' >" + FormatedCostQtyValues(val,4) + "</span>";
                                    }
                                    else {
                                        return FormatedCostQtyValues(val,4);
                                    }
                                }
                            },
                             
                            { "mDataProp": "Cost", "sClass": "read_only numericalign isCost","sType": "decimal" ,
                                "fnRender": function (obj, val) {
                                    if (obj.aData.Cost != null && obj.aData.Cost != NaN)
                                        return "<span id='spnCost" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.Cost,1) + "</span>";
                                    else
                                        return "<span id='spnCost" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0,1) + "</span>";
                                }
                            },
                            {
                                "mDataProp": "Markup", "sClass": "read_only numericalign isCost",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.Markup != null && obj.aData.Markup != NaN)
                                        return "<span>" + FormatedCostQtyValues(obj.aData.Markup,1) + "</span>";
                                    else
                                        return "<span>" + FormatedCostQtyValues(0,1) + "</span>";
                                }
                            },
                            {
                                "mDataProp": "SellPrice", "sClass": "read_only numericalign isCost",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.SellPrice != null && obj.aData.SellPrice != NaN)
                                        return "<span id='spnSellPrice" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.SellPrice,1) + "</span>";
                                    else
                                        return "<span id='spnSellPrice" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0,1) + "</span>";
                                }
                            },
                            {
                                "mDataProp": "ExtendedCost", "sClass": "read_only numericalign isCost",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.ExtendedCost != null && obj.aData.ExtendedCost != NaN)
                                        return "<span id='spnExtendedCost" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.ExtendedCost,1) + "</span>";
                                    else
                                        return "<span id='spnExtendedCost" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0,1) + "</span>";
                                }
                            },

                            { "mDataProp": "LongDescription", "sClass": "read_only" },
                            { "mDataProp": "SupplierName", "sClass": "read_only" },
                            { "mDataProp": "SupplierPartNo", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerName", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerNumber", "sClass": "read_only" },
                            { "mDataProp": "UPC", "sClass": "read_only" },
                            { "mDataProp": "UNSPSC", "sClass": "read_only" },
                            { "mDataProp": "LeadTimeInDays", "sClass": "read_only" },
//                            {
//                                "mDataProp": "InTransitquantity", "sClass": "read_only numericalign", "sDefaultContent": '',
//                                "fnRender": function (obj, val) {
//                                    if (isNaN(parseFloat(val)))
//                                        val = 0;
//                                    if (val > 0) {
//                                        return "<a id='aInTransitQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayInTransitQty(this)' >" + FormatedCostQtyValues(val,2) + "</span>";
//                                    }
//                                    else {
//                                        return FormatedCostQtyValues(val,2);
//                                    }
//                                }
//                            },

//                        { "mDataProp": "OnTransferQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
//                            "fnRender": function (obj, val) {
//                               if(isNaN(parseFloat(val)))
//                                    val=0;
//                                if(val>0){
//                                return "<a id='aOnTransferQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayOnTransferQty(this)' >" + val + "</span>";
//                                }
//                                else{
//                                    return val;
//                                }
//                            }
//                        },

//                            {
//                                "mDataProp": "RequisitionedQuantity", "sClass": "read_only numericalign",
//                                "fnRender": function (obj, val) {
//                                    if (isNaN(parseFloat(val)))
//                                        val = 0;
//                                    if (val > 0) {
//                                        return "<a id='aRequisitionedQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayRequisitionedQty(this)' >" + FormatedCostQtyValues(val,2) + "</span>";
//                                    }
//                                    else {
//                                        return FormatedCostQtyValues(val,2);
//                                    }
//                                }

//                            },
//                            {
//                                "mDataProp": "Turns", "sClass": "read_only numericalign", "sDefaultContent": '',
//                                "fnRender": function (obj, val) {
//                                    if (isNaN(parseFloat(val)))
//                                        val = 0;
//                                    if (val > 0) {
//                                        return "<a id='aTurnsQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayTurnsQty(this)' >" + FormatedCostQtyValues(val,4) + "</span>";
//                                    }
//                                    else {
//                                        return FormatedCostQtyValues(val,4);
//                                    }
//                                }
//                            },
                            { "mDataProp": "CriticalQuantity", "sClass": "read_only numericalign",
	                            "fnRender": function (obj, val) {
                                 if (obj.aData.IsItemLevelMinMaxQtyRequired == "No")
                                   {
                                       return "<span>" + 'N/A' + "</span>";
                                   }
                                   else
                                   {  
		                            if (obj.aData.CriticalQuantity != null && obj.aData.CriticalQuantity != NaN)
			                            return "<span>" + FormatedCostQtyValues(obj.aData.CriticalQuantity,2) + "</span>";
		                            else
			                            return "<span>" + FormatedCostQtyValues(0,2) + "</span>";
                                        }
	                            }
                            },
                            {
                                "mDataProp": "SerialNumberTracking", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
                            },
                            {
                                "mDataProp": "LotNumberTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            {
                                "mDataProp": "DateCodeTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            { "mDataProp": "IsLotSerialExpiryCost", "sClass": "read_only" },
                            { "mDataProp": "GLAccount", "sClass": "read_only" },
                            { "mDataProp": "ID", "sClass": "read_only" },
                            { "mDataProp": "CostUOMName", "sClass": "read_only" },
                            { "mDataProp": "DefaultReorderQuantity", "sClass": "read_only numericalign"  ,
	                            "fnRender": function (obj, val) {
		                            if (obj.aData.DefaultReorderQuantity != null && obj.aData.DefaultReorderQuantity != NaN)
			                            return "<span>" + FormatedCostQtyValues(obj.aData.DefaultReorderQuantity,2) + "</span>";
		                            else
			                            return "<span>" + FormatedCostQtyValues(0,2) + "</span>";
	                            }
                            },
                            { "mDataProp": "DefaultPullQuantity", "sClass": "read_only numericalign"  ,
	                            "fnRender": function (obj, val) {
		                            if (obj.aData.DefaultPullQuantity != null && obj.aData.DefaultPullQuantity != NaN)
			                            return "<span>" + FormatedCostQtyValues(obj.aData.DefaultPullQuantity,2) + "</span>";
		                            else
			                            return "<span>" + FormatedCostQtyValues(0,2) + "</span>";
	                            }
                            },
                            { "mDataProp": "DefaultLocationName", "sClass": "read_only" },
                            {
                                "mDataProp": "Trend", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            {
                                "mDataProp": "QtyToMeetDemand", "sClass": "read_only numericalign", "sDefaultContent": '',
                                "fnRender": function (obj, val) {
                                    if (obj.aData.QtyToMeetDemand != null && obj.aData.QtyToMeetDemand != NaN)
                                        return "<span id='spnQtyToMeetDemand" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.QtyToMeetDemand, 2) + "</span>";
                                    else
                                        return "<span id='spnQtyToMeetDemand" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 2) + "</span>";
                                }
                            },
                            {
                                "mDataProp": "Taxable", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            {
                                "mDataProp": "Consignment", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            { "mDataProp": "StagedQuantity", "sClass": "read_only numericalign"  ,
	                            "fnRender": function (obj, val) {
		                            if (obj.aData.StagedQuantity != null && obj.aData.StagedQuantity != NaN)
			                            return "<span>" + FormatedCostQtyValues(obj.aData.StagedQuantity,2) + "</span>";
		                            else
			                            return "<span>" + FormatedCostQtyValues(0,2) + "</span>";
	                            }
                            },
                            { "mDataProp": "WeightPerPiece", "sClass": "read_only numericalign" ,
	                            "fnRender": function (obj, val) {
		                            if (obj.aData.WeightPerPiece != null && obj.aData.WeightPerPiece != NaN)
			                            return "<span>" + FormatedCostQtyValues(obj.aData.WeightPerPiece,1) + "</span>";
		                            else
			                            return "<span>" + FormatedCostQtyValues(0,1) + "</span>";
	                            }
                            },
//                            { "mDataProp": "ItemUniqueNumber", "sClass": "read_only" },
                            {
                                "mDataProp": "IsTransfer", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
                            },
                              {
                                  "mDataProp": "IsPurchase", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
                              },
                            { "mDataProp": "RoomName", "sClass": "read_only" },
                            {
                                  "mDataProp": "Created", "sClass": "read_only",
                                   "fnRender": function (obj, val) {
                                   return obj.aData.CreatedDate;
                                   }
                            },
                             {
                                "mDataProp": "Updated", "sClass": "read_only", "sDefaultContent": '',
                                "fnRender": function (obj, val) {
                                        return obj.aData.UpdatedDate;
                                 }
                            },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "Unit", "sClass": "read_only" },
                            {
                                "mDataProp": "AverageCost", "sClass": "read_only numericalign isCost",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.AverageCost != null && obj.aData.AverageCost != NaN)
                                        return "<span id='spnAverageCost" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.AverageCost,1) + "</span>";
                                    else
                                        return "<span id='spnAverageCost" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0,1) + "</span>";
                                }

                            },
                            {
                                "mDataProp": "Link2", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.Link2 != null && obj.aData.Link2 != NaN)
                                        return "<a class='addNewLink' onclick='return OpenImg(this);' href='/InventoryPhoto/Link2/" + obj.aData.ID + "/" + obj.aData.Link2 + "' target='_blank' >" + obj.aData.Link2 + "</a>";
                                    else
                                        return "<span id='spnAverageCost33" + obj.aData.GUID + "'>" + "" + "</span>";
                                }
                            },
                           // { "mDataProp": "BondedInventory", "sClass": "read_only numericalign" },
//                            {
//                                "mDataProp": "OnReturnQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
//                                "fnRender": function (obj, val) {
//                                    if (isNaN(parseFloat(val)))
//                                        val = 0;
//                                    if (val > 0) {
//                                        return "<a id='aOnReturnQty_" + obj.aData.GUID + "' href='javascript:void(0)' onclick='javascript:return DisplayOnRetunQty(this)' >" + FormatedCostQtyValues(val,2) + "</a>";
//                                    }
//                                    else {
//                                        return FormatedCostQtyValues(val,2);
//                                    }
//                                }
//                            },
                            {
                                "mDataProp": "TrendingSetting", "sClass": "read_only"
                                    ,"sDefaultContent": '', "fnRender": function (obj, val) {
                                        if (val == 0)
                                            return "@eTurns.DTO.ResItemMaster.TrendingSettingNone";
                                        else if (val == 1)
                                            return "@eTurns.DTO.ResItemMaster.TrendingSettingManual";
                                        else if (val == 2)
                                            return "@eTurns.DTO.ResItemMaster.TrendingSettingAutomatic";
                                        else
                                            return "";
                                    }
                            },
                            {
                                "mDataProp": "PullQtyScanOverride", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                }
                            },
                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "EditedFrom", "sClass": "read_only" },
                            { "mDataProp": "ReceivedOn", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                                                             return obj.aData.ReceivedOnDate;
			                    }
			                },
			                { "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
                                   return obj.aData.ReceivedOnDateWeb;
			                    }
			                },
                            { "mDataProp": "IsActive", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                }
                             }
//                            { "mDataProp": "ReceivedOnDate", "sClass": "read_only" },
//                            { "mDataProp": "ReceivedOnDateWeb", "sClass": "read_only" }
                            @Html.RenderColumnsArray("ItemMaster")
                    ]
            });

            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');

            function getParameterByName(name) {
                name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
                var regexS = "[\\?&]" + name + "=([^&#]*)";
                var regex = new RegExp(regexS);
                var results = regex.exec(window.location.search);
                if (results == null)
                    return "";
                else
                    return decodeURIComponent(results[1].replace(/\+/g, " "));
            }
           
            // DoNarrowSearch() ;
             //$('#HistoryTable').dataTable().fnFilter(FilterStringGlobalUse, null, null, null);

             if ('@isCost' == '@Boolean.FalseString') {
                 HideColumnUsingClassName("HistoryTable");
                 ColumnsToHideinPopUp.push(15);
                 ColumnsToHideinPopUp.push(16);
                 ColumnsToHideinPopUp.push(17);
                 ColumnsToHideinPopUp.push(18);
                 ColumnsToHideinPopUp.push(51);
                 
                 oHistoryTable.fnSetColumnVis(15, false);
                 oHistoryTable.fnSetColumnVis(16, false);
                 oHistoryTable.fnSetColumnVis(17, false);
                 oHistoryTable.fnSetColumnVis(18, false);
                 oHistoryTable.fnSetColumnVis(51, false);
             }
        });
         
    /* global search function */
    function fnFilterGlobalPS() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#ItemHistoryText") != 'undefined' && ($("#ItemHistoryText").val().length > 2 || $("#ItemHistoryText").val().length == 0)) {
        //if (typeof $("#ItemHistoryText") != 'undefined') {
            bIsIHFilter = true;
            var searchtext = $("#ItemHistoryText").val().replace(/'/g, "''");

            $('#' + historyDTName + ' td').removeHighlight();

            $('#' + historyDTName).dataTable().fnFilter(
                searchtext,
                null,
                null,
                null
            );

            if (searchtext.length > 0)
                $('#' + historyDTName + ' td').highlight($("#ItemHistoryText").val());
        }
    }

    $("#ItemHistoryText").keyup(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
        }
        else {
            fnFilterGlobalPS();
        }
    });

    //Keydown event is required to handle ENTER KEY to work in IE
    $("#ItemHistoryText").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            fnFilterGlobalPS();
        }
    });

    //Clear Filter
    $("#ItemHistoryClear").click(function () {
        $("#ItemHistoryText").val('');
        fnFilterGlobalPS();
        $("#ItemHistoryText").focus();
        return false;
    });

    var timeoutscheduler;
    $(document).on('propertychange input', "#ItemHistoryText", function () {
        clearTimeout(timeoutscheduler);
        var self = this;
        timeoutscheduler = setTimeout(function () {
            if (SearchPattern == 2 || SearchPattern == "2") {
                fnFilterGlobalPS();
            }
            else {
                $('#ItemHistoryText').unbind("keypress");
                $('#ItemHistoryText').keypress(function (event) {
                    var keycode = (event.keyCode ? event.keyCode : event.which);
                    if (keycode == 13) {
                        fnFilterGlobalPS();
                    }
                });
                if ($("#ItemHistoryText").val().length == 0) {
                    setTimeout(function () { fnFilterGlobalPS(); }, 200);
                }
            }
        }, 500);
    });
        //oHistoryTable.fnSetColumnVis(0, false);
        $('#CtabCL').off("click");
        $('#CtabCL').on("click", "a#ColumnOrderSetupICL", function () {
            $(".sortableContainer").attr("style", "clear: both;min-height: 347px;overflow: scroll;overflow-x: hidden;height: 90%;")
            $("#ColumnSortableModalICL").dialog("open");
            
        });

        $("#ColumnSortableModalICL").dialog({
            autoOpen: false,
            modal: true,
            width: 500,
            height: dHeight,
            //title: "ReOrder Columns",
            title: strReorderColumnPopupHeader,
            draggable: true,
            resizable: true,
            open: function () {

                GenerateColumnSortableICL();
                $("#ColumnSortableICL").sortable({ axis: "y", containment: "parent" });
            },
            close: function () {

            }
        });


        function GetColumnIndexICL(ColumnName) {
            if (typeof (objHistoryColumns) != "undefined") {
                return objHistoryColumns[ColumnName];
            }
        }

        function GenerateColumnSortableICL() {


            //clear the old elements
            var blankNUmber = 0;
            $('#ColumnSortableICL li').each(function (index) {
                $(this).remove();
            });
            var div = document.createElement('div');
            div.id = "CheckAll";

            div.innerHTML = "<input type='hidden' value ='ColumnSortableICL' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >@ResCommon.CheckALL</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >@ResCommon.UnCheckALL</a>" +
                "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />@ResCommon.ShowAllHidden";
            $('div.sortableContainer').find("div#CheckAll").remove();
            $('div.sortableContainer').prepend(div);
            //get current columns order and generate li sortable accordingly

            var oTableReorder = $("#HistoryTable").dataTable();

            for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                var oColumn = oTableReorder.fnSettings().aoColumns[i];
                var style = '';
                var LiStyle = 'display:block';
                var LiClassName = 'ui-state-default'
                if (oColumn.sClass.indexOf('NotHide') >= 0) {
                    style = ' disabled="disabled" ';
                    LiClassName = LiClassName + ' HiddenLi';
                }

                var colindxbyname = '';
                if (oColumn.sTitle.trim() != '') {
                    colindxbyname = GetColumnIndexICL(oColumn.sTitle.trim());
                }
                else {
                    colindxbyname = GetColumnIndexICL('blankFieldName' + blankNUmber);
                }

                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                li.style = LiStyle;
                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexICL(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexICL('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                        blankNUmber++;
                    }
                }
                else {

                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndexICL(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {

                        li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndexICL('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                        blankNUmber++;
                    }
                }
                $('#ColumnSortableICL').append(li);

            }

        }


        function UpdateColumnOrderItemChangeLog(_ListName) {

            var oTableReorder = $("#HistoryTable").dataTable();
            $.ajax({
                "url": '/Master/LoadGridState',
                data: { ListName: _ListName },
                cache: false,
                "dataType": "json",
                "success": function (json) {

                    if (json.jsonData != '') {
                        o = JSON.parse(json.jsonData);
                        oTableReorder.fnSettings().oLoadedState = $.extend(true, {}, o);
                        //update the order of columns
                        var _Order = SortableArrayICL($('#ColumnSortableICL')); // $('#ColumnSortable').sortable("toArray");
                        var __Order = _Order.toString().split(",");

                        for (var i = 0; i < __Order.length; i++) {
                            __Order[i] = parseInt(__Order[i], 10);
                        }

                        oTableReorder.fnSettings().oLoadedState.ColReorder = __Order;

                        //update the visibility of columns
                        var _abVisCols = [];

                        for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                            //var checked = $("#" + i + "_").is(":checked");
                            var checked = $('#ColumnSortableICL').find('input.checkBox[id="' + i + '_"]').is(":checked");
                            _abVisCols.push(checked);
                        }

                        oTableReorder.fnSettings().oLoadedState.abVisCols = _abVisCols;


                        //update the state to the database
                        $.ajax({
                            "url": '/Master/SaveGridState',
                            "type": "POST",
                            //data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: 'ToolList' },
                            data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: _ListName },
                            "dataType": "json",
                            cache: false,
                            "success": function (json) {

                                o = json;

                                //refresh the page
                                // window.location.reload(true);
                                $("#ColumnSortableModalICL").dialog("close");
                                $('#CtabCL').empty();
                                GetItemHistoryData();
                                //$("#THLDataTable").dataTable().fnDraw();
                            }
                        });


                    }
                }
            });


        }
        function GetItemHistoryData()
        {
            $('#DivLoading').show();
            $("#CTab").hide();
            $("#CtabCL").show();
            //$('#CtabCL').load('/Master/ItemHistory', function () { $('#DivLoading').hide(); });
            $('#CtabCL').load('/Inventory/ItemHistory?ItemGUID=' + '@itemGuid' + '', function () { $('#DivLoading').hide(); });
        }
        function SortableArrayICL(ulColumnsOrder) {
            var sortableArray = '';
            $(ulColumnsOrder).children("li").each(function () {
                if (sortableArray != '') {
                    sortableArray = sortableArray + "," + $(this).attr("id");
                }
                else {
                    sortableArray = $(this).attr("id");
                }
            });
            return sortableArray;
    }

    function ExportHistoryData(ModuleName, Exporttype) {
        var stringIDs = '@itemGuid';
        var ReqCount = 0;

        //Get Current Sorting info of table.
        var aa_SortingInfo = $("#myDataTable").dataTable().fnSettings().aaSorting;
        var objCols = $("#myDataTable").dataTable().fnSettings().aoColumns;

        var arrCols = new Array();
        for (var i = 0; i <= objCols.length - 1; i++) {
            arrCols.push(objCols[i].mDataProp);
        }

        var sortValue = "";
        if (aa_SortingInfo.length != 0) {
            for (var k = 0; k <= aa_SortingInfo.length - 1; k++) {
                if (sortValue.length > 0)
                    sortValue += ", "
                sortValue += arrCols[aa_SortingInfo[k][0]] + ' ' + aa_SortingInfo[k][1];
            }
        }

        //Get Current Sorting info of table.
        var shiftselectedarray = readCookieforshift("finalselectedarray");
        if (shiftselectedarray != null) {
            stringIDs = shiftselectedarray;
        }
    
        if (stringIDs.length > 0) {
            $.ajax({
                "url": '/Export/ExportModuleInfo',
                "data": { ExportModuleName: ModuleName, Ids: stringIDs, Type: Exporttype, SortNameString: sortValue, 'Isdeleted': null, 'TableName': '' },
                "dataType": "json",
                "type": "POST",
                "success": function (response) {
                    if (response.rStatus == "Fail") {

                        alert(response.rMessage);
                    }
                    else
                        window.open("../../Downloads/" + response, "_self");

                },
                "error": function (response) {

                    window.open("../../Downloads/" + response, "_self");

                }
            });
        }
        else {
            alert("Please select record to export.");
        }
    }
    _Common.setGloblaSearch('ItemHistoryText', 'HistoryTable');
</script>
