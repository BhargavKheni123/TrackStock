@{
    ViewBag.Title = ResMoveMaterial.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = false, DataTableName = "myDataTable", DisplayUDFButton = false, DisplaySettings = true, DisplayColumnSetupButton = true, DisplayDeleteButton = false, DisplayPrintBlock = false, ColumnSetupFor = "MoveMaterialList" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "MoveMaterial" };
    string MoveMaterialPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/MoveMaterial.pdf", DateTime.Now.Ticks);
    //HelpDocumentMasterDTO objHelpDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentMaster("MoveMaterial");
    //string MoveMaterialBasicVideo = "";
    //if (objHelpDTO != null)
    //{
    //    MoveMaterialBasicVideo = objHelpDTO.ModuleVideoPath.Replace("../Uploads/HelpVideo/", "");
    //}
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("MoveMaterial", (int)HelpDocType.Module);
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>
    <script language="javascript" type="text/javascript">
        var oTable;
        var IsRefreshGrid = false;
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var SelectedTechnicianID = 0;
        var HistorySelected;
        var HistorySelectedID = 0;
        var bIsFilter = true;
        var isTabClick = false;
        var objColumns = {};

        $(document).ready(function () {
            LoadTabs();
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                //"bAutoWidth": false,
                "sScrollX": "350%",
                //"sScrollX": "8000px",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[1, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable', //+ "&nbsp; This barcode text is not assing to any item.<br>Would you like to assing it?<br><a id='aBarcodeYes'href='javascript:void(0)' onclick='javascript:return OpenItemInPopup(this);' >Yes</a> ",
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'MoveMaterialList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = json;
                        }
                    });
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'MoveMaterialList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Inventory/MoveMaterialListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {

                    //PostCount = PostCount + 1;
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }

                    if (oSettings.aaSorting.length != 0) {
                        var sortValue = "";
                        for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];

                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "cache": false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        "beforeSend": function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        "error": function (xhr, status, error) {
                            // Boil the ASP.NET AJAX error down to JSON.
                            console.log(xhr);

                        },
                        "complete": function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }

                            if ($('#global_filter').val().length > 0) {

                            }
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");

                },
                "aoColumns": [
                            { "mDataProp": null, "sClass": "read_only center NotHide RowNo", "bSortable": false, "sDefaultContent": '' },
                            { "mDataProp": "ItemNumber", "sClass": "read_only" },
                            { "mDataProp": "SourceLocation", "sClass": "read_only" },
                            { "mDataProp": "SourceStagingHeader", "sClass": "read_only" },
                            {
                                "mDataProp": "MoveQuanity", "sClass": "read_only", "fnRender": function (obj, val) {
                                    if (!isNaN(parseFloat(val))) {
                                        return FormatedCostQtyValues(val, 2);
                                    }
                                    else {
                                        return FormatedCostQtyValues(0, 2);
                                    }
                                }
                            },
                            { "mDataProp": "DestinationLocation", "sClass": "read_only" },
                            { "mDataProp": "DestinationStagingHeader", "sClass": "read_only" },
                            {
                                "mDataProp": "MoveType", "sClass": "read_only"
                                    , "sDefaultContent": '', "fnRender": function (obj, val) {
                                        if (val == 1)
                                            return "@ResMoveMaterial.MoveTypeItemInvtoInv";
                                        else if (val == 2)
                                            return "@ResMoveMaterial.MoveTypeItemInvtoStage";
                                        else if (val == 3)
                                            return "@ResMoveMaterial.MoveTypeItemStageToInv";
                                        else if (val == 4)
                                            return "@ResMoveMaterial.MoveTypeItemStageToStage";
                                        else
                                            return "";
                                    }
                            },
                            { "mDataProp": "CreatedOnDate", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "ReceivedOnDateWeb", "sClass": "read_only" }
                ]
            });
            //            .makeEditable({
            //                sUpdateURL: '@Url.Content("~/Master/UpdateBinMasterData")'
            //            });

            //HIDE PRINT CONTAINER

            $('.DTTT_container').css('z-index', '-1');

            

            $(window).on('hashchange', function () {
                if (isTabClick == false) {
                    SetTabView();
                }
                else {
                    isTabClick = false;
                }
            });
            
            //SetTabView();
            

        });
    </script>
}
<div class="userListingWrapper">
    <h2>
        @ResMoveMaterial.PageHeader
    </h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        <ul class='tabs'></ul>
        @*<div id="Ctab" class="tabContener" style="min-height: 1020px;">
            </div>*@
        <div id="CtabNew" class="tabContener">
            <div id="divHeadMoveType" style="width: 100%; float: left">
                <div class="editorForm">
                    <ul>
                        <li>
                            <div class="editor-label">
                                @ResMoveMaterial.LabelMoveType:
                            </div>
                            <div class="editor-field">
                                @Html.DropDownList("ddlMoveType", new SelectList(ViewBag.MoveTypeList, "ID", "Text"), new { @id = "ddlMoveType", @class = "selectBox", @style = "width:200px;" })
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
            <div id="divVspace" style="width: 100%; float: left; height: 15px;">
                &nbsp;
            </div>
            <div id="divItems" style="width: 100%; float: left;">
            </div>
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings)
            @*@Html.Partial("NarrowSearchLayout", modelCommon)*@
            @{ Html.RenderPartial("NarrowSearchLayout", modelCommon);}
            <div class="userContent ">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ItemNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.LabelSourceLacation
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.LabelSourceStagingHeader
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.MoveQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.LabelDestinationLocation
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.DestinationStagingHeader
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.LabelMoveType
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.CreatedFrom
                            </th>
                            <th>
                                @eTurns.DTO.ResMoveMaterial.ReceivedOnServer
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div id="divMoveMaterialPopup">
</div>
<script type="text/javascript" language="javascript">
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tabMMHistory', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistoryNew();', true, true)
    ];

    function callbacknew() {
       //isTabClick = true;
        window.location.hash = '#new'
        $('#DivLoading').show();
        $('#divItems').empty();
        //  setTimeout(function () {
        $.get('LoadItemMaster', { 'MoveType': $('#ddlMoveType').val() }, function (result) {
            $('#divItems').html(result);
            $('#DivLoading').hide();
            $('#btnAddAll,#btnModelCancle').hide();
        });

        //}, 5000);
    }

    function callbackhistoryNew() {
        //isTabClick = true;
        window.location.hash = '#hist'
        $('#myDataTable').dataTable().fnDraw();
        $("#CtabNew").hide();
        $("#Ctab").show();
    }

    $('#ddlMoveType').on('change', function () {
        callbacknew();
    });

    $(document).ready(function () {
        
        if (window.location.hash.toLowerCase() == "#hist") {
            $("#tabMMHistory").click();
        }
        else //if (window.location.hash.toLowerCase() == "#new") 
        {
            $("#tab1").click();
        }

        $("#divMoveMaterialPopup").dialog(
          {
              autoOpen: false, show: "blind", hide: "explode", height: 700, width: 900
            , modal: true, title: '@ResMoveMaterial.DailogTitle',
              open: function () {
                  $('#DivLoading').show();
                  var obj = $(this).data("objData");
                  if (obj.LotNumberTracking == 'Yes' || obj.LotNumberTracking == 'yes')
                  {
                      obj.LotNumberTracking = 'true';
                  }
                  if (obj.SerialNumberTracking == 'Yes' || obj.SerialNumberTracking == 'yes') {
                      obj.SerialNumberTracking = 'true';
                  }
                  if (obj.LotNumberTracking == 'No' || obj.LotNumberTracking == 'no') {
                      obj.LotNumberTracking = 'false';
                  }
                  if (obj.SerialNumberTracking == 'No' || obj.SerialNumberTracking == 'no') {
                      obj.SerialNumberTracking = 'false';
                  }
                  if (obj.LotNumberTracking == 'true' || obj.SerialNumberTracking == 'true') {
                      OpenMoveMaterialPopupByItemGuidForLotSerial(obj);
                  }
                  else {
                      OpenMoveMaterialPopupByItemGuid(obj);
                  }
              },
              close: function () {
                  $("#divMoveMaterialPopup").empty();
                  // $('#ItemModeDataTable').dataTable().fnDraw();
                  $('#DivLoading').hide();
              }
          });
    });

    function OpenMoveMaterialPopup(btn) {
        var tr = $(btn).parent().parent();
        $("#divMoveMaterialPopup").empty();
        var itemGUID = $(tr).find('#spnItemGUID').text();
        var movType = $('#ddlMoveType').val();
        var openFrom = '@MoveDialogOpenFrom.FromMove';
        var spnSerialNumberTracking = $(tr).find('#spnSerialNumberTracking').text();
        var spnLotNumberTracking = $(tr).find('#spnLotNumberTracking').text();
        var objData = { "ItemGUID": itemGUID, "MoveType": movType, "OpenFrom": openFrom, "SerialNumberTracking": spnSerialNumberTracking, "LotNumberTracking": spnLotNumberTracking };
        $('#divMoveMaterialPopup').data({ "objData": objData }).dialog('open');
    }

    function MoveTypeNarroSearch(SSDDLObject) {
        if ($(SSDDLObject).val() != "") {
            MoveTypeNarroValues = $(SSDDLObject).val();
            DoNarrowSearch();
        }
        else {
            MoveTypeNarroValues = '';
            DoNarrowSearch();
        }
    }

    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#hist":
                $("#tabMMHistory").click();
                break;
            case "#new":
                $("#tab1").click();
                break;
            default:
                $("#tab1").click();
                break;
        }
    }

</script>
