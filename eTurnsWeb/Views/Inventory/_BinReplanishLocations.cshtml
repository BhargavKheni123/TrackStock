@model IList<eTurns.DTO.BinMasterDTO>
@{
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);


}
<div id="divitemlocationbinreplanish" style="width: 99.5%; min-height: 140px">
    <div>
        <div>
            <div style="text-align: center; float: left; width: 80%;">
                <span id="spanErrorMsg" style="color: Green;"></span>
            </div>
            <div>
                <div style="text-align: right; float: left; width: 85%;">
                    <span style="color: Red;">*</span>
                </div>
                <div style="text-align: center; bottom: auto; float: right; width: 10%; padding-bottom: 5px;">
                    <input type="button" value="@ResCommon.AddLocation" class="CreateBtn" onclick="return AddNewBinReplanish()" />
                </div>
            </div>
        </div>
    </div>
    <div class="userContentInnerGrid" style="width: 99% !important; margin-left: 5px !important;
        float: left;">
        <table id="ItemLocationLevelQuanity" class="display">
            <thead>
                <tr>
                    <th>
                        @eTurns.DTO.ResItemManufacturerDetails.IsDefault
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.BinNumber
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.CriticalQuantity
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.MinimumQuantity
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.MaximumQuantity
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.CustomerOwnedQuantity
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.ConsignedQuantity
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.eVMISensorPort
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.eVMISensorID
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.IsEnforceDefaultPullQuantity
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.DefaultPullQuantity
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.IsEnforceDefaultReorderQuantity
                    </th>
                    <th>
                        @eTurns.DTO.ResBin.DefaultReorderQuantity
                    </th>

                    @Html.RenderColumnsHeader("BinUDF", typeof(eTurns.DTO.ResBinUDF), "Bin")
                    <th>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    foreach (var item in Model)
                    {
                <tr>
                    <td>
                        @if (item.IsDefault == true)
                        {
                            @Html.CheckBox("IsDefault", true, new { @data_id = "txtLoc", onclick = "return updateDefaultLocation(this);" })
                        }
                        else
                        {
                            @Html.CheckBox("IsDefault", false, new { @data_id = "txtLoc", onclick = "return updateDefaultLocation(this);" })
                        }
                    </td>
                    @if (HasOnTheFlyEntryRight)
                    {
                        if (item.ID > 0)
                        {

                            <td>
                                @* @Html.DropDownList("dlLocation", new SelectList(ViewBag.DefaultLocationBag, "ID", "BinNumber", item.BinID), "", new { @class = "selectBox" }) *@
                                @Html.TextBox("txtLocation", item.BinNumber, new { @style = "width:93%;", @maxlength = "200", @class = "text-box " })
                                @Html.Hidden("BinID", item.ID, new { @id = "SubBinID" })
                                @Html.HiddenFor(model => item.BinNumber)
                            </td>
                        }
                        else
                        {
                            <td>
                                <span style='position:relative'>
                                    @* @Html.DropDownList("dlLocation", new SelectList(ViewBag.DefaultLocationBag, "ID", "BinNumber", item.BinID), "", new { @class = "selectBox" }) *@
                                    @Html.TextBox("txtLocation", item.BinNumber, new { @style = "width:93%;", @maxlength = "200", @class = "text-box ", onkeypress = "return NotAllowCharacter(event);", ondrop = "return false;", onblur = "return NotAllowedSpecialCharacters(this);" })
                                    @Html.Hidden("BinID", item.ID, new { @id = "SubBinID" })
                                    <a id='lnkShowAllOptionsBin' href='javascript:void(0);' style='position:absolute; right:5px; top:0px;' class="ShowAllOptionsBin">
                                        <img src='/Content/images/arrow_down_black.png' alt='select' />
                                    </a>
                                </span>
                            </td>
                        }
                    }
                    else
                    {
                        List<BinMasterDTO> lstBins = new List<BinMasterDTO>();
                        lstBins.Add(new BinMasterDTO() { BinNumber = item.BinNumber ?? string.Empty });
                        if (item.ID > 0)
                        {
                            <td>
                                @Html.DropDownList("dlLocation", new SelectList(lstBins, "BinNumber", "BinNumber", item.BinNumber), new { @style = "width:93%;", @readonly = "readonly", @disabled = "disabled", @class = "selectBox disableBack " })
                                @Html.Hidden("BinID", item.ID, new { @id = "SubBinID" })
                                @Html.HiddenFor(model => item.BinNumber)
                                @Html.HiddenFor(model => item.IsOnlyFromItemUI)
                                <input type="hidden" id="txtLocation" value="@item.BinNumber" />
                            </td>
                        }
                        else
                        {
                            <td>
                                @Html.DropDownList("dlLocation", new SelectList(lstBins, "BinNumber", "BinNumber", item.BinNumber), new { @style = "width:93%;", @class = "selectBox" })
                                @Html.Hidden("BinID", item.ID, new { @id = "SubBinID" })
                                <input type="hidden" id="txtLocation" value="@item.BinNumber" />
                            </td>
                        }
                    }
                    <td>
                        @Html.TextBox("txtCriticalQuantity", item.CriticalQuantity, eTurnsWeb.Helper.SessionHelper.QuantityFormat, new { @style = "width:50px;", @maxlength = "10", @class = "text-boxinner numericinput " })
                    </td>
                    <td>
                        @Html.TextBox("txtMinimumQuantity", item.MinimumQuantity, eTurnsWeb.Helper.SessionHelper.QuantityFormat, new { @style = "width:50px;", @maxlength = "10", @class = " numericinput  text-boxinner" })
                    </td>
                    <td>
                        @Html.TextBox("txtMaximumQuantity", item.MaximumQuantity, eTurnsWeb.Helper.SessionHelper.QuantityFormat, new { @style = "width:50px;", @maxlength = "10", @class = "numericinput text-boxinner" })
                    </td>
                    <td>
                        @Html.TextBox("txtCustomerOwnedQuantity", item.CustomerOwnedQuantity, eTurnsWeb.Helper.SessionHelper.QuantityFormat, new { @style = "width:50px;", @maxlength = "10", @class = "numericinput text-boxinner", onblur = "return updateOnHandQuantity();", @data_calc = "OHQ", @data_binId = item.ID })
                        @*@item.CustomerOwnedQuantity*@
                    </td>
                    <td>
                        @Html.TextBox("txtConsignedQuantity", item.ConsignedQuantity, eTurnsWeb.Helper.SessionHelper.QuantityFormat, new { @style = "width:50px;", @maxlength = "10", @class = "numericinput text-boxinner consignedQtyInput", onblur = "return updateOnHandQuantity();", @data_calc = "OHQ", @data_binId = item.ID })
                        @*@item.ConsignedQuantity*@
                    </td>
                    <td>
                        @*@Html.DropDownList("drpComPort", ViewBag.RoomCOMMappings, "", new { @class = "selectBox" });*@
                        @Html.DropDownList("dlComPort", new SelectList(ViewBag.RoomCOMMappings, "Value", "Text", item.eVMISensorPort), "", new { @style = "width:93%;", @class = "selectBox" })
                        @*@Html.TextBox("txteVMISensorPort", item.eVMISensorPort, new { @style = "width:100px;", @maxlength = "200", @class = "text-box" })*@
                    </td>
                    <td>
                        @Html.TextBox("txteVMISensorID", item.eVMISensorID, "{0:0.0}", new { @style = "width:50px;", @maxlength = "10", @class = "text-boxPriceFixedFormat text-boxinner numericinput" })
                    </td>

                    <td>
                        @if (item.IsEnforceDefaultPullQuantity == true)
                        {
                            @Html.CheckBox("chkIsEnforceDefaultPullQuantity", true, new { @data_id = "txtLocIDP" })
                        }
                        else
                        {
                            @Html.CheckBox("chkIsEnforceDefaultPullQuantity", false, new { @data_id = "txtLocIDP" })
                        }
                    </td>

                    <td>
                        @Html.TextBox("txtDefaultPullQuantity", item.DefaultPullQuantity, eTurnsWeb.Helper.SessionHelper.QuantityFormat, new { @style = "width:50px;", @maxlength = "10", @class = "numericinput text-boxinner" })
                    </td>
                    <td>
                        @if (item.IsEnforceDefaultReorderQuantity == true)
                        {
                            @Html.CheckBox("chkIsEnforceDefaultReorderQuantity", true, new { @data_id = "txtLocIDR" })
                        }
                        else
                        {
                            @Html.CheckBox("chkIsEnforceDefaultReorderQuantity", false, new { @data_id = "txtLocIDR" })
                        }
                    </td>
                    <td>
                        @Html.TextBox("txtDefaultReorderQuantity", item.DefaultReorderQuantity, eTurnsWeb.Helper.SessionHelper.QuantityFormat, new { @style = "width:50px;", @maxlength = "10", @class = "numericinput text-boxinner bindefqty" })

                    </td>
                    @Html.RenderColumnsArrayEditableObjectForDOMWithValueBinUDF("BinUDF", item, "Bin", "Bin")
                    <td>
                        @*<a href="JavaScript:void{0}" onclick="return SavetoSeesionBinReplanish(this)">
            <img alt="Save" src="/Content/images/save.png"></a> *@
                        @if (item.GUID != Guid.Empty)
                        {
                            <a href="JavaScript:void{0}" onclick="return DeletetoSeesionBinReplanishSingle(this)">
                                <img alt="@ResCommon.Save" src="/Content/images/delete.png">
                            </a>
                        }
                        <input id="hdnID" type="hidden" value="@item.ID" />
                        <input id="hdnGUID" type="hidden" value="@item.GUID" />
                        <input id="hdnItemGUID" type="hidden" value="@item.ItemGUID" />
                        <input id="hdnSessionSr" type="hidden" value="@item.SessionSr" />
                        <input id="hdnBinID" type="hidden" value="@item.ID" />
                    </td>
                </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
<div class="dialog" id="mdlQLYesNo" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.DeleteConfirm
        </p>
        <a href="JavaScript:void{}" id="btnQLModelYesSP" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no" onclick="QLcloseModal()">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<script type="text/javascript">
    var oTableProjectItems;
    var deleteURL1 = "/Inventory/ItemLocationLvelQuantityDelete";
    var NotAllowedCharCodes = [9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40];
    var DTName = 'ItemLocationLevelQuanity' + '@ViewBag.ProjectGUID';
    var bIsFilter = false;

    //    $(".autocompleteSup").autocomplete({
    //        source: function (request, response) {
    //            $.ajax({
    //                url: '/Master/GetBinLocation',
    //                contentType: 'application/json',
    //                dataType: 'json',
    //                data: {
    //                    maxRows: 1000,
    //                    name_startsWith: request.term
    //                },
    //                success: function (data) {
    //                    response($.map(data, function (item) {
    //                        return {
    //                            label: item.BinNumber,
    //                            value: item.BinNumber,
    //                            selval: item.ID
    //                        }
    //                    }));
    //                },
    //                error: function (err) {
    //                    alert(err);
    //                }
    //            });
    //        },
    //        autoFocus: false,
    //        select: function (event, ui) {
    //            $(this).next().val(ui.item.selval);
    //        },
    //        minLength: 0,
    //        open: function () {
    //            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
    //            $(this).autocomplete('widget').css('z-index', 100);
    //        },
    //        close: function () {
    //            $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
    //        }
    //    });



    $(document).ready(function () {
        $('form').areYouSure();
        //        $(".autocompleteSup").focus(function () {
        //            $(this).autocomplete("search", $(this).val());
        //        });

        $('.ShowAllOptionsBin').click(function () {
            //$(this).siblings(".autocompleteSup").autocomplete("search", "");
            $(this).siblings('#txtLocation').trigger("focus");
        });

        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });
        $(".text-boxPriceFixedFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 1
        });

        //        $("#saveRows").click(function () {
        //            SaveAllClick();
        //        });

        var gaiSelected = [];
        oTableProjectItems = $('#' + DTName).dataTable({
            "bJQueryUI": true,
            "bRetrieve": true,
            "bDestroy": true,
            "bScrollCollapse": true,
            "sScrollX": "100%",
            "sDom": 'R<"top"lp<"clear">>rt<"bottom"i<"clear">>',
            "oColVis": {},
            "aaSorting": [[1, "desc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "ordering": true,
            "bStateSave": true,
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'ItemDetailBinList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'ItemDetailBinList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "aoColumns": [
                 {
                     "mDataProp": "IsDefault", "bSortable": false

                 },
                 {
                     "mDataProp": "BinNumber", "bSortable": false
                 },
                 {
                     "mDataProp": "CriticalQuantity", "bSortable": false
                 },
                 {
                     "mDataProp": "MinimumQuantity", "bSortable": false
                 },
                 {
                     "mDataProp": "MaximumQuantity", "bSortable": false
                 },
                 {
                     "mDataProp": "CustomerOwnedQuantity"
                 },
                 {
                     "mDataProp": "ConsignedQuantity"
                }
                ,
                {
                    "mDataProp": "eVMISensorPort", "bSortable": false
                },
                 {
                     "mDataProp": "eVMISensorID", "bSortable": false
                 },
                  {
                      "mDataProp": "IsEnforceDefaultPullQuantity", "bSortable": false
                  },
                   {
                       "mDataProp": "DefaultPullQuantity", "bSortable": false
                   },
                    {
                        "mDataProp": "IsEnforceDefaultReorderQuantity", "bSortable": false
                    },
                     {
                         "mDataProp": "DefaultReorderQuantity", "bSortable": false
                }
                @Html.RenderColumnsArray("BinUDF")
                ,
                 {
                     "mDataProp": null,
                     "bSortable": false
                 }]



        });
        $('.DTTT_container').css('z-index', '-1');

        UDFfillEditableOptionsForGrid();
    });


    $('#' + DTName + ' tbody tr').die('tap click');
    $('#deleteRows1').unbind("click");
    $('#Gobtn1').unbind("click");
    $('#clear_QLItem_filter').unbind("click");
    $('#saveRows').die('click');
    $('#PageNumber1').unbind("keydown");
    $('#btnModelYesInnerGrid').die('click');

    // To adjust the print block next to colvis button
    $('#btnblock').css({ 'margin-right': '45px' });

    //    $('#' + DTName + ' tbody tr').live('tap click', function () {
    //        $(this).toggleClass('row_selected');
    //        return false;
    //    });

    /* Add a click handler for the delete rows multiple rows */


    $('#deleteRows1').click(function () {
        /* IF PRINT PREVIEW DONT SHOW CONTEXT MENU */
        if ($("body").hasClass('DTTT_Print')) {
            return false;
        }
        /* IF PRINT PREVIEW DONT SHOW CONTEXT MENU */

        var anSelected = fnGetSelected(oTableProjectItems);
        var stringIDs = "";
        for (var i = 0; i <= anSelected.length - 1; i++) {
            //anSelected[0].cells[0].innerHTML
            stringIDs = stringIDs + $(anSelected[i]).find("#hdnID").val() + ",";
        }
        if (anSelected.length !== 0) {
            $('#Inner-Grid-basic-modal-content').modal();
            IsDeletePopupOpen = false;
        }

    });

    $(".bindefqty").change(function (e) {

        if ($("#IsAllowOrderCostuom").attr('checked') == 'checked') {
            var vCostUOMData = $("#CostUOMData").val();
            var currRQ = $(this).val();
            var vCUOMVal = $('#CostUOMID option:selected').html();

            $("#IsEnforceDefaultReorderQuantity").attr('checked', 'checked');
            var vCostUOMVal = GetCostUOMValue(vCostUOMData, vCUOMVal);

            if (currRQ.length > 0) {
                if (parseInt(vCostUOMVal) > parseInt(currRQ)) {
                    $(this).val(vCostUOMVal);
                }
                else {

                    var actValue = vCostUOMVal;
                    if ((currRQ % vCostUOMVal) == 0) {
                        actValue = currRQ;
                    }
                    else {
                        //actValue = parseInt(currRQ) + (parseInt(vCostUOMVal) - (parseInt(currRQ) % parseInt(vCostUOMVal)));
                    }
                    $(this).val(actValue);
                }
            }
            else {
                $(this).val(vCostUOMVal);
            }
        }

    });

    $("#divitemlocationbinreplanish").on("change", "input[type='checkbox'][name='IsDefault']", function () {
        if ($(this).prop("checked")) {
            $("#divitemlocationbinreplanish").find("input[type='checkbox'][name='IsDefault']").prop("checked", false);
            $(this).prop("checked", true);
        }
    });
    $("#divitemlocationbinreplanish").on({
        mouseover: function () {
            FillLocations($(this), "");
        },
        focus: function () {
            FillLocations($(this), "");
        },
        change: function () {
            $(this).parent().find("input[id='txtLocation']").val($(this).val());

        }
    }, "#dlLocation");

    $("#divitemlocationbinreplanish").on({
        focus: function () {
            SetAutoCompleteOpenOnFocus($(this), '@Url.Action("GetAllLocationOfRoom", "Master")', null, " ");
        }

    }, "input[type='text'][id='txtLocation']");
    //$("#divitemlocationbinreplanish").on("mouseover", "#dlLocation", function () {
    //    FillLocations($(this), "");
    //});
    //$("#divitemlocationbinreplanish").on("change", "#dlLocation", function () {
    //    $(this).parent().find("input[id='txtLocation']").val($(this).val());
    //});
    $("#btnModelYesInnerGrid").live("click", function () {

        var anSelected = fnGetSelected(oTableProjectItems);
        var stringIDs = "";
        for (var i = 0; i <= anSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anSelected[i]).find("#hdnID").val() + ",";
        }

        if (anSelected.length !== 0) {
            $.ajax({
                'url': deleteURL1,
                data: { ids: stringIDs },
                success: function (response) {

                    if (response == "ok") {


                        for (var i = 0; i <= anSelected.length - 1; i++) {
                            oTableProjectItems.fnDeleteRow(anSelected[i]);
                        }

                        if (anSelected.length > 0) {
                            $("#spanGlobalMessage").html("@ResCommon.RecordDeletedSuccessfully".replace("{0}", "(" + anSelected.length + ")"));
                        }
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        //CallThisFunctionFromModel('success');
                        //oTableProjectItems.fnDraw();
                    }
                },
                error: function (response) {
                    // through errror message
                }
            });
            $.modal.impl.close();
        }
    });

    var inputs = $('[id*="UDF"]');
    for (var i = 0; i< inputs.length; i++) {
        if (inputs[i].type == 'text') {
            inputs[i].setAttribute("onkeypress", "return NotAllowCharacter(event)");
            inputs[i].setAttribute("onblur", "return NotAllowedSpecialCharacters(this)");
        }
    }
</script>
