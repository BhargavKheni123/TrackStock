@{

    ViewBag.Title = eTurns.DTO.ResInventoryCount.PageTitle;
    var settings = new GridHeaderSettings() { DataTableName = "myDataTable", ShowCloseButton = true, ShowSelectAll = true, DisplayUDFButton = true, UDFSetupFor = "InventoryCount&UDFHeader=" + @eTurns.DTO.ResInventoryCount.InventoryCountHeader, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "InventoryCountList", DisplayDeleteButton = true, DisplayArchiveButton = true };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "InventoryCountList", ListName = "InventoryCount" };

    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Count, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Count, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    string CountPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Count.pdf", DateTime.Now.Ticks);
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Count, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    //HelpDocumentMasterDTO objHelpDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentMaster("Count");
    //string CountBasicVideo = "";
    //if (objHelpDTO != null)
    //{
    //    CountBasicVideo = objHelpDTO.ModuleVideoPath.Replace("../Uploads/HelpVideo/", "");
    //    //CountPDFURL = string.Format("{0}?t={1}", objHelpDTO.ModuleDocPath.Replace("..", ""), DateTime.Now.Ticks);
    //}
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Count", (int)HelpDocType.Module);

}
@section head{
    @if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
    <style type="text/css">
        .dataTables_scrollBody {
            max-height: 410px;
            overflow-y: scroll;
        }

        .paginationBlock {
            float: left;
            position: absolute;
            right: 290px;
            top: -4px;
        }
    </style>
    @*<script type='text/javascript' src="@Url.Content("~/Content/OpenAccess/jquery.cookie.js")"></script>*@
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" +version)"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/SiteScripts.js?v=" +version)"></script>
    <script type="text/javascript">
        var CountListColumnsArr = new Array();
        CountListColumnsArr.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });
        CountListColumnsArr.push({ mDataProp: "CountName", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) { return "<a class='aEditLink' id='lnkEditMs_" + obj.aData.GUID + "' onclick='BlankSessionIC(); return ShowEditTabGUID(&quot;InventoryCountEdit?IcGuid=" + obj.aData.GUID + "&quot;,&quot;frmInventoryCount&quot;)' href='JavaScript:void(0);'>" + val + "</a> <span id='spnIsCountClosed' style='display: none'>" + obj.aData.IsClosed + "</span><input type='hidden' id='hdnUniqueID' value='" + obj.aData.GUID.toString() + "' />"; } });
        //        CountListColumnsArr.push({ mDataProp: "CountDate", sClass: "read_only", fnRender: function (obj, val) { return GetDateInShortFormat(val); } });
        CountListColumnsArr.push({ "mDataProp": "ReleaseNumber", "sClass": "read_only" });
        CountListColumnsArr.push({ mDataProp: "CountDate", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.CountDateDisplay; } });
        CountListColumnsArr.push({ mDataProp: "CountItemDescription", sClass: "read_only" });
        CountListColumnsArr.push({ mDataProp: "CountType", sClass: "read_only" });
        CountListColumnsArr.push({ mDataProp: "IsApplied", sClass: "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } });
        CountListColumnsArr.push({ mDataProp: "TotalItemsWithinCount", sClass: "read_only" });
        CountListColumnsArr.push({ mDataProp: "IsClosed", sClass: "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } });
        CountListColumnsArr.push({ mDataProp: "Created", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.CreatedDate ; } });
        CountListColumnsArr.push({ mDataProp: "Updated", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.UpdatedDate ; } });
        CountListColumnsArr.push({ mDataProp: "UpdatedByName", sClass: "read_only" });
        CountListColumnsArr.push({ mDataProp: "CreatedByName", sClass: "read_only" });
        CountListColumnsArr.push({ mDataProp: "AddedFrom", sClass: "read_only"});
        CountListColumnsArr.push({ mDataProp: "EditedFrom", sClass: "read_only"});
        CountListColumnsArr.push({ mDataProp: "ReceivedOn", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDate; } });
        CountListColumnsArr.push({ mDataProp: "ReceivedOnWeb", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDateWeb; } });
//        CountListColumnsArr.push({ mDataProp: "ReceivedOnDate", sClass: "read_only"});
//        CountListColumnsArr.push({ mDataProp: "ReceivedOnDateWeb", sClass: "read_only"});
        CountListColumnsArr.push(@Html.RenderColumnsArray("InventoryCount", false));

        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Inventory/DeleteInventoryCountRecords";
        //var PostCount = 0;
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var HistorySelected;
        var SelectedID = 0;
        var objColumns = {}
        var counttyperesourcename = '@eTurns.DTO.Resources.ResNarrowSearch.CountType';
        var countstatusresourcename = '@eTurns.DTO.Resources.ResNarrowSearch.CountStatus';

        $(document).ready(function () {
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "sScrollX": "120%",
                "bScrollCollapse": true,
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[1, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "aoColumns": CountListColumnsArr,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if ($(aData.IsDeleted).text() == 'Yes' && $(aData.IsArchived).text() == 'Yes')

                    if (aData.IsDeleted == true && aData.IsArchived == true)
                    $(nRow).css('background-color','#B9BCBF');
                        //nRow.className = "GridDeleatedArchivedRow";
                    else if (aData.IsDeleted == true)
                    $(nRow).css('background-color','#FFCCCC');
                    //    nRow.className = "GridDeletedRow";
                    else if (aData.IsArchived == true)
                    $(nRow).css('background-color','#CCFFCC');
                        //nRow.className = "GridArchivedRow";
                    if (aData.IsDeleted || aData.IsArchived) {
                        $(nRow).find("input,select").attr("disabled", "disabled");
                        $("#thUpdate").css("display", 'none');
                        $(nRow).find("input[type='button'][id^='btnUpdateCartItem']").parent("td").hide();
                    }
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                         "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'InventoryCountList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'InventoryCountList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '') {
                                o = JSON.parse(json.jsonData);
                            }
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Action("InventoryCountListAjax", "Inventory")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    if (oSettings.aaSorting != null && oSettings.aaSorting.length != 0 )
                    {
                        var sortValue = "";
                        for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];
                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
//                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });
                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,

                        cache: false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                            if ($('#IsDeletedRecords').is(':checked')) {
                                $("#deleteRows").css("display", "none");
                                $("#aArchiveRows").css("display", "none");
                                $("#undeleteRows").css("display", "inline");
                            }
                            setCloseButton();
                            //                            SetUDFSelected(oSettings);
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                }
            }).makeEditable({
                sUpdateURL: '@Url.Content("~/Master/UpdateData")'
            });

            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');

            $('#deleteRows').click(function () {
                /* IF PRINT PREVIEW DONT SHOW CONTEXT MENU */
                if ($("body").hasClass('DTTT_Print')) {
                    return false;
                }
                /* IF PRINT PREVIEW DONT SHOW CONTEXT MENU */
                deleteURL = "/Inventory/DeleteInventoryCountRecords";
                var anSelectedReq = fnGetSelected(oTable);
                var stringIDs = "";
                for (var i = 0; i <= anSelectedReq.length - 1; i++) {
                    var aData = oTable.fnGetData(anSelectedReq[i]);
                    stringIDs = stringIDs + aData.ID + ",";
                    //stringIDs = stringIDs + $(anSelectedReq[i]).find('#hdnUniqueID').val() + ",";
                }
                if (stringIDs.length > 0) {
                    $('#basic-modal-content').modal();
                    IsDeletePopupOpen = true;
                }
            });
            /* HISTORY related data deleated and archived START */
            //$('#IsDeletedRecords').live('click', function () {
            //    NarrowSearchInGrid('');
            //});
            //$('#IsArchivedRecords').live('click', function () {
            //    NarrowSearchInGrid('');
            //});

            $('#ViewHistory').live('click', function () {
                HistorySelected = fnGetSelected(oTable);
                if (HistorySelected != undefined && HistorySelected.length == 1) {
                    $("#atab5").click();
                }
                else {
                    $('#tab5').html('');
                    $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    return false;
                }
            });
            var QueryStringParam1 = getParameterByName('fromdashboard');
            var QueryStringParam2 = getParameterByName('InventoryCountGUID');
            if (QueryStringParam1 == 'yes' && QueryStringParam2 != '') {
                ShowEditTabGUID("InventoryCountEdit?IcGuid=" + QueryStringParam2, "frmInventoryCount");
                IsReloadItemList = true;
            }
            /* HISTORY related data deleated and archived END */

            $('#myDataTable').on('tap click', 'a[id^="lnkEditMs"]', function () {
                var tr = $(this).parent().parent();
                IsCountClosed = $(tr).find('#spnIsCountClosed').text();
                $("#myDataTable").find("tbody tr").removeClass("row_selected");
                $(tr).addClass('row_selected');

            });

        });
        /* HISTORY related data deleated and archived START */
        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }

        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.search);
            if (results == null)
                return "";
            else
                return decodeURIComponent(results[1].replace(/\+/g, " "));
        }
        function HistoryTabClick() {
            GetHistoryData();
        }
        //        function GetHistoryData() {
        //            var trselected = oTable.$('tr.row_selected');
        //            if (trselected != undefined && trselected.length == 1) {
        //                var aData = oTable.fnGetData(trselected[0]);
        //                //if (SelectedID != aData.ID) {
        //                //SelectedID = aData.ID;
        //                $('#DivLoading').show();
        //                $("#CTab").hide();
        //                $("#CtabCL").show();
        //                $('#CtabCL').load('InventoryCountListHistory/' + SelectedID, function () { $('#DivLoading').hide(); });
        //                //$('#tab5').load('MaterialStagingHistory', function () { $('#DivLoading').hide(); });
        //                //}
        //            }
        //            else {
        //                $('#CtabCL').html('');
        //                $("#spanGlobalMessage").text("@ResCommon.msgSelectForViewHistory");
        //                $('div#target').fadeToggle();
        //                $("div#target").delay(2000).fadeOut(200);
        //                return false;
        //            }
        //        }
        function GetHistoryData() {
            HistorySelected = fnGetSelected(oTable);
            if (HistorySelected != undefined && HistorySelected.length == 1) {
                //SelectedHistoryRecordID = HistorySelected[0].id;
                var CartGUID = $(HistorySelected).find('#hdnUniqueID')[0].value;
                SelectedID = CartGUID;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabCL").show();
                $('#CtabCL').load('InventoryCountListHistory/?GUID=' + SelectedID, function () { $('#DivLoading').hide(); });
            }
            else {
                $('#CtabCL').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                return false;
            }
        }
        /* HISTORY related data deleated and archived END */
    </script>
    <script type="text/javascript">
        var isTabClick = false;
        var MsgCloseNotAppliedCount = '@ResInventoryCount.MsgCloseNotAppliedCount';
        var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.History', 'callbackhistory();', true, true),


        ];
        if ('@IsShowChangeLog.ToString().ToUpper()' == 'TRUE') {
            TabsArry.push(new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true));
        }


        TabsArry.push(new TabClass('tab22', '@ResCycleCountSetting.SettingTabName', 'callbackSetup();', true, true));
        function SetTabView() {
            var tabname = window.location.hash.toLowerCase();

            switch (tabname) {
                case "#list":
                    $("#tab5").click();
                    break
                case "#new":
                    $("#tab1").click();
                    break
                case "#invcountsetup":
                    $("#tab22").click();
                    break
            }

        }
        $(document).ready(function () {
            $(window).on('hashchange', function () {
                if (isTabClick == false) {
                    SetTabView();
                }
                else {
                    isTabClick = false;
                }
            });
            //SetTabView();
        });
        function callbacknew() {
            window.location.hash = '#new';
            ShowNewTab('InventoryCountCreate', 'frmInventoryCount');
        }
        function callbackhistory() {
            window.location.hash = '#list';
            RefressFilterICount("InventoryCountList", counttyperesourcename, countstatusresourcename);
            FillCommonNarrowSearch("InventoryCountList", '@eTurnsWeb.Helper.SessionHelper.CompanyID', '@eTurnsWeb.Helper.SessionHelper.RoomID', false, false, "");
            GetNarroHTMLForUDF("InventoryCountList",'@eTurnsWeb.Helper.SessionHelper.CompanyID', '@eTurnsWeb.Helper.SessionHelper.RoomID', false, false, "", "", "");
        }
        function callbackCL() {
            HistoryTabClick();
            //hide undelete icon if only del checkbox is not tick
            if ($('#IsDeletedRecords').is(':checked')) {
                $('#undeleteRows').css('display', '');
                $('#deleteRows').css('display', 'none');
            }
            else {
                $('#undeleteRows').css('display', 'none');
                $('#deleteRows').css('display', '');
            }
        }
        function callbackSetup() {
            window.location.hash = '#InvCountSetup';
            if (IsEditMode) {
                IsEditMode = false;
            }
            ShowNewTab('InventoryCountSetUp', 'frmInventoryCountSetup');
            //            ShowNewTab('InventoryCountCreate', 'frmInventoryCount');
        }
    </script>
}
<div class="userListingWrapper">
    <h2>
        @eTurns.DTO.ResInventoryCount.InventoryCountHeader
    </h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <input type="hidden" id="hdnModuleName" name="hdnModuleName" value="Count" />
        <ul class='tabs'>
        </ul>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Count)
            @Html.Partial("NarrowSearchLayout", modelCommon)
            <div class="userContent ">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @ResInventoryCount.CountName
                            </th>
                            <th>
                                @ResInventoryCount.ReleaseNumber
                            </th>
                            <th>
                                @ResInventoryCount.CountDate
                            </th>
                            <th>
                                @ResInventoryCount.CountItemDescription
                            </th>
                            <th>
                                @ResInventoryCount.CountType
                            </th>
                            <th>
                                @ResInventoryCount.IsApplied
                            </th>
                            <th>
                                @ResInventoryCount.TotalItemsWithinCount
                            </th>
                            <th>
                                @ResInventoryCount.IsClosed
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.LastUpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                            </th>
                            @Html.RenderColumnsHeader("InventoryCount", typeof(eTurns.DTO.ResInventoryCount))
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
                <br />
                <div class="BtnBlockform" id="divEditInventoryCount" style="display:none">
                    @*<input type="button" value="@eTurns.DTO.ResOrder.EditReceipts" id="btnEditOrderRecieptFromList" class="CreateBtn" /><span>&nbsp;
                        &nbsp;</span>*@

                    <input type="button" value="@ResInventoryCount.UncloseInventoryCount" id="bntUnclosedCount" class="CreateBtn" />
                </div>

                <div id="processing_message" style="display: none" title="Processing">
                    @eTurns.DTO.Resources.ResMessage.RequestProcessMessage
                </div>
            </div>
        </div>
        <div id="CtabCL" class="tabContener">
        </div>
        <div id="CtabNew" class="tabContener">
        </div>
    </div>
</div>
<div class="dialog" id="IcCloseConfirm" style="display: none;">
    <div class="inner">
        <p class="text" id="msgClosedCount">
            @eTurns.DTO.ResInventoryCount.IsClosed
        </p>
        <a href="JavaScript:void{}" id="btnModelYesClose" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="#" class="no" onclick="closeModal();">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>

<div class="dialog" id="IcUnCloseConfirm" style="display: none;">
    <div class="inner">
        <p class="text" id="msgUnClosedCount">
            @eTurns.DTO.ResInventoryCount.UncloseInventoryCount
        </p>
        <a href="JavaScript:void{}" id="btnModelUnCloseYesClose" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="#" class="no" onclick="closeModal();">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
@*@if (false)
    {
        <script src="../../Scripts/jquery-1.9.1-vsdoc.js" type="text/javascript"></script>
    }*@
<script type="text/javascript">

    jQuery(function () {
        $('#actionCloseItems').click(function () {

            /* IF PRINT PREVIEW DONT SHOW CONTEXT MENU */
            if ($("body").hasClass('DTTT_Print')) {
                return false;
            }
            /* IF PRINT PREVIEW DONT SHOW CONTEXT MENU */
            var isAnyNonAppliedCount = false;
            var anSelected = fnGetSelected(oTable);
            var stringIDs = "";

            for (var i = 0; i <= anSelected.length - 1; i++) {
                var aData = oTable.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + ",";
                if (aData.IsApplied !== undefined && aData.IsApplied != null && aData.IsApplied.toLowerCase() == "no") {
                    isAnyNonAppliedCount = true;
                }
            }

            if (isAnyNonAppliedCount) {
                $("#msgClosedCount").text(MsgCloseNotAppliedCount);
            }
            else {
                $("#msgClosedCount").text('@ResInventoryCount.IsClosed');
            }
            if (anSelected.length !== 0) {
                $('#IcCloseConfirm').modal();
                IsDeletePopupOpen = true;
            }
        });

        $("#btnModelYesClose").click(function () {
            var anSelected = fnGetSelected(oTable);
            var stringIDs = "", stringGUIDs = "";

            if (anSelected.length !== 0) {
                for (var i = 0; i <= anSelected.length - 1; i++) {
                    var aData = oTable.fnGetData(anSelected[i]);
                    stringIDs = stringIDs + aData.ID + ",";
                    stringGUIDs = stringGUIDs + aData.GUID + ",";
                }

                $.ajax({
                    url: '@Url.Action("CloseCountItems", "Inventory")',
                    type: "POST",
                    data: { ids: stringIDs, guids: stringGUIDs },
                    success: function (responce) {
                        if (responce.Status == "ok") {
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("@ResCommon.RecordClosedSuccessfully".replace("{0}", anSelected.length));                            $('div#target').fadeToggle();
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            oTable.fnDraw();
                        }
                        else {
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text("@ResInventoryCountDetail.ErrortoPerformOperation");
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
                        closeModal();
                    },
                    error: function (err) {
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                });
            }
        });

        if (window.location.hash.toLowerCase() == "#invcountsetup") {
            $("#tab22").click();
        }
    });



    $('#amnuInvCountNewLink').click(function () {
        $("#tab1").click();
    });

    $('#amnuInvCountSetup').click(function () {
        $("#tab22").click();
    });

    $('#amnuInvCountHistoryLink').click(function () {
        $("#tab5").click();
    });

    function BlankSessionIC() {
        $.ajax({
            url: '@Url.Content("~/Inventory/BlankSession")'
                                    , type: 'POST'
            //, contentType: "application/json"
                                    , success: function (result) {
                                    },
            error: function (msg) {
            }
        });
    }


    var lastChecked;
    $("#myDataTable").on("tap click", "tbody tr", function (e) {

        if (e.target.type == "checkbox" || e.target.type == "select" || e.target.type == "radio" || e.target.type == "button") {
            e.stopPropagation();
        } else {
            if (IsDeleteItemPictureViewRecord)
                $(this).parent().parent().parent().parent().parent().toggleClass('row_selected');
            else {

                if (!lastChecked) {
                    lastChecked = this;
                }
                if (e.shiftKey) {
                    var start = $('#myDataTable tbody tr').index(this);
                    var end = $('#myDataTable tbody tr').index(lastChecked);

                    for (i = Math.min(start, end); i <= Math.max(start, end); i++) {
                        if (!$('#myDataTable tbody tr').eq(i).hasClass('row_selected')) {
                            $('#myDataTable tbody tr').eq(i).addClass("row_selected");
                        }
                    }
                    if (window.getSelection) {
                        if (window.getSelection().empty) {  // Chrome
                            window.getSelection().empty();
                        } else if (window.getSelection().removeAllRanges) {  // Firefox
                            window.getSelection().removeAllRanges();
                        }
                    } else if (document.selection) {  // IE?
                        document.selection.empty();
                    }
                } else if ((e.metaKey || e.ctrlKey)) {
                    $(this).toggleClass('row_selected');
                } else {
                    $(this).toggleClass('row_selected');
                }

                lastChecked = this;
            }
            setCurrentRow();
            return false;
        }
    });

    function setCloseButton() {
        $('#divEditInventoryCount').css('display', 'none');
    }
    function setCurrentRow() {
        var anSelectedRows = fnGetSelected(oTable);
        $('#divEditInventoryCount').css('display', 'none');
        if (anSelectedRows.length == 1) {
            var IsShowUnclosedCountButton = false;
            for (var i = 0; i <= anSelectedRows.length - 1; i++) {
                var aData = oTable.fnGetData(anSelectedRows[i]);
                if (aData.IsClosed == 'Yes' && aData.IsDeleted == false && aData.IsArchived == false) {
                    IsShowUnclosedCountButton = true;
                }
            }
            if (IsShowUnclosedCountButton) {
                $('#divEditInventoryCount').css('display', '');
            }
        }
    }

    $('#bntUnclosedCount').off('click');
    $('#bntUnclosedCount').click(function () {
        $("#msgUnClosedCount").text('@ResInventoryCount.UncloseInventoryCount');
            $('#IcUnCloseConfirm').modal();
    });

    $("#btnModelUnCloseYesClose").click(function () {
            var anSelected = fnGetSelected(oTable);
            var stringIDs = "";

            if (anSelected.length == 1) {
                for (var i = 0; i <= anSelected.length - 1; i++) {
                    var aData = oTable.fnGetData(anSelected[i]);
                    stringIDs = stringIDs + aData.ID + ",";
                }
                $.ajax({
                    url: '@Url.Action("UnclosedInventoryCount", "Inventory")',
                    type: "POST",
                    data: { ids: stringIDs},
                    success: function (responce) {
                        if (responce.Status == "ok") {
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("@ResCommon.RecordUnClosedSuccessfully".replace("{0}", anSelected.length));                            $('div#target').fadeToggle();
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            oTable.fnDraw();
                        }
                        else {
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text("@ResInventoryCountDetail.ErrortoPerformOperation");
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
                        closeModal();
                    },
                    error: function (err) {
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                });
            }
        });
</script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" +version)"></script>
