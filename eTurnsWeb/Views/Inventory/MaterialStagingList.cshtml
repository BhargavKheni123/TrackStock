@{
    ViewBag.Title = eTurns.DTO.ResMaterialStaging.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayUDFButton = true, UDFSetupFor = "MaterialStaging&UDFHeader=" + @eTurns.DTO.ResMaterialStaging.MaterialStagingHeader, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "MaterialStaging" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "MaterialStaging" };
    string NewTaburl = Url.Action("MaterialStagingCreate", "Inventory");

    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Materialstaging, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Materialstaging, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    Session["IsInsert"] = "";
    string MaterialStagingPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/MaterialStaging.pdf", DateTime.Now.Ticks);
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Materialstaging, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    //HelpDocumentMasterDTO objHelpDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentMaster("MaterialStaging");
    //string MSBasicVideo = "";
    //if (objHelpDTO != null)
    //{
    //    MSBasicVideo = objHelpDTO.ModuleVideoPath.Replace("../Uploads/HelpVideo/", "");
    //    //MaterialStagingPDFURL = string.Format("{0}?t={1}", objHelpDTO.ModuleDocPath.Replace("..", ""), DateTime.Now.Ticks);
    //}
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("MaterialStaging", (int)HelpDocType.Module);
    
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script type="text/javascript">

        var MSMasterListColumnsArr = new Array();
        //        MSMasterListColumnsArr.push({ mDataProp: null, sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) { return "<input type='checkbox' /> "; } });
        //MSMasterListColumnsArr.push({ mDataProp: "ID", sClass: "read_only" });
        MSMasterListColumnsArr.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });
        MSMasterListColumnsArr.push({ mDataProp: "StagingName", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) { return "<a class='aEditLink' id='lnkEditMs_" + obj.aData.GUID + "' onclick='BlankSession(); return ShowEditTabGUID(&quot;MaterialStagingEdit?MSGUID=" + obj.aData.GUID + "&quot;,&quot;frmMaterialStaging&quot;)' href='JavaScript:void(0);'>" + val + "</a><input type='hidden' id='hdnUniqueID' value='" + obj.aData.GUID.toString() + "' />"; } });
        MSMasterListColumnsArr.push({ mDataProp: "Description", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) { return "<div class='comment more'>" + val + "</div>"; } });
        MSMasterListColumnsArr.push({ mDataProp: "StagingLocationName", sClass: "read_only" });
        MSMasterListColumnsArr.push({ mDataProp: "Created", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.CreatedDate; } });
        MSMasterListColumnsArr.push({ mDataProp: "Updated", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.UpdatedDate; } });
        MSMasterListColumnsArr.push({ mDataProp: "UpdatedByName", sClass: "read_only" });
        MSMasterListColumnsArr.push({ mDataProp: "CreatedByName", sClass: "read_only" });
        MSMasterListColumnsArr.push({ mDataProp: "AddedFrom", sClass: "read_only" });
        MSMasterListColumnsArr.push({ mDataProp: "EditedFrom", sClass: "read_only" });
        MSMasterListColumnsArr.push({ mDataProp: "ReceivedOn", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDate; } });
        MSMasterListColumnsArr.push({ mDataProp: "ReceivedOnWeb", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDateWeb; } });
        MSMasterListColumnsArr.push(@Html.RenderColumnsArray("MaterialStaging",false));
        //        MSMasterListColumnsArr.push({ mDataProp: "ReceivedOnDate", sClass: "read_only" });
        //        MSMasterListColumnsArr.push({ mDataProp: "ReceivedOnDateWeb", sClass: "read_only" });

        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Inventory/DeleteMaterialStagingRecords";
        //var PostCount = 0;
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var SelectedTechnicianID = 0;
        var SelectedHistoryRecordID = 0;
        var HistorySelected;
        var objColumns = {};
        var resStagingLocation = '@eTurns.DTO.Resources.ResNarrowSearch.StagingLocation';
        //var MaterialChildGridTableColumns;
        $(document).ready(function () {
            
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            //MaterialChildGridTableColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                //                "sScrollX": "100%",
                "bScrollCollapse": true,
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[1, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "sScrollX": '100%',
                //"iDeferLoading": 1,
                "aoColumns": MSMasterListColumnsArr,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (aData.IsDeleted == true && aData.IsArchived == true)
                        $(nRow).css('background-color', '#B9BCBF');
                        // nRow.className = "GridDeleatedArchivedRow";
                    else if (aData.IsDeleted == true)
                        $(nRow).css('background-color', '#FFCCCC');
                        //nRow.className = "GridDeletedRow";
                    else if (aData.IsArchived == true)
                        $(nRow).css('background-color', '#CCFFCC');
                    //nRow.className = "GridArchivedRow";
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'MaterialStaging' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                },
                "fnStateLoad": function (oSettings) {

                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'MaterialStaging' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '') {
                                o = JSON.parse(json.jsonData);
                            }
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Action("MaterialStagingListAjax", "Inventory")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    if (oSettings.aaSorting.length != 0) {
                        var sortValue = "";
                        for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];

                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
                    else {
                        aoData.push({ "name": "SortingField", "value": "0" });
                    }

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "cache": false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        "beforeSend": function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        "complete": function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                            CallShowHideData();
                            if ($('#IsDeletedRecords').is(':checked')) {
                                $('#undeleteRows').css('display', '');
                                $('#deleteRows').css('display', 'none');
                            }
                            else {
                                $('#undeleteRows').css('display', 'none');
                                $('#deleteRows').css('display', '');
                            }
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                }
        }).makeEditable({
            sUpdateURL: '@Url.Content("~/Master/UpdateData")'
        });

        //HIDE PRINT CONTAINER
        $('.DTTT_container').css('z-index', '-1');

        $('#deleteRows').click(function () {
            //                     /* IF PRINT PREVIEW DONT SHOW CONTEXT MENU */
            //                    if ($("body").hasClass('DTTT_Print')) {
            //                        return false;
            //                    }
            //                    /* IF PRINT PREVIEW DONT SHOW CONTEXT MENU */

            //                var anSelectedReq = fnGetSelected(oTable);
            //                var stringIDs = "";
            //                for (var i = 0; i <= anSelectedReq.length - 1; i++) {
            //                    stringIDs = stringIDs + $(anSelectedReq[i]).find('#hdnUniqueID').val() + ",";
            //                }
            //                     if (stringIDs.length > 0) {
            //                    $('#basic-modal-content').modal();
            //                    IsDeletePopupOpen = true;
            //                }
            if ($('#IsDeletedRecords').is(':checked')) {
                $('#undeleteRows').css('display', '');
                $('#deleteRows').css('display', 'none');
            }
            else {
                $('#undeleteRows').css('display', 'none');
                $('#deleteRows').css('display', '');
            }
        });


        /* HISTORY related data deleated and archived START */
        $('#IsDeletedRecords').live('click', function () {
            NarrowSearchInGrid('');
        });
        $('#IsArchivedRecords').live('click', function () {
            NarrowSearchInGrid('');
        });
        /* HISTORY related data deleated and archived END */

        $('#myDataTable').on('tap click', 'a[id^="lnkEditMs"]', function () {
            var tr = $(this).parent().parent();
            $("#myDataTable").find("tbody tr").removeClass("row_selected");
            $(tr).addClass('row_selected');

        });
        });
        /* HISTORY related data deleated and archived START */
        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }
        function HistoryTabClick() {
            GetHistoryData();
        }
        function GetHistoryData() {
            if ($('#IsDeletedRecords').is(':checked')) {
                $('#undeleteRows').css('display', '');
                $('#deleteRows').css('display', 'none');
            }
            else {
                $('#undeleteRows').css('display', 'none');
                $('#deleteRows').css('display', '');
            }
            HistorySelected = fnGetSelected(oTable);
            if (HistorySelected != undefined && HistorySelected.length == 1) {
                //SelectedHistoryRecordID = HistorySelected[0].id;
                var MateStagGUID = $(HistorySelected).find('#hdnUniqueID')[0].value;
                SelectedHistoryRecordID = MateStagGUID;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabCL").show();
                $('#CtabCL').load('/Master/MaterialStagingHistory', function () { $('#DivLoading').hide(); });
            }
            else {
                $('#CtabCL').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                return false;
            }
        }
        //function GenerateColumnSortable() {
        //    if (gblActionName == 'WorkOrderList' && typeof (objDummyColums) != 'undefined' && typeof (objDummyColums) != undefined) {
        //        objColumns = objDummyColums;
        //    }


        //    //clear the old elements
        //    var blankNUmber = 0;
        //    $('#ColumnSortable li').each(function (index) {
        //        $(this).remove();
        //    });
        //    var div = document.createElement('div');
        //    div.id = "CheckAll";
        //    //li.className = 'ui-state-default';
        //    //    li.innerHTML = oColumn.sTitle.trim();
        //    div.innerHTML = "<input type='hidden' value ='ColumnSortable' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
        //                    "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
        //    $('div.sortableContainer').find("div#CheckAll").remove();
        //    $('div.sortableContainer').prepend(div);
        //    //get current columns order and generate li sortable accordingly

        //    var oTableReorder = null;

        //    if ((typeof oTable) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        //        return false;

        //    if ((typeof oTable) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        //        oTableReorder = $('#' + oTableReorderId).dataTable();
        //    else
        //        oTableReorder = oTable;

        //    for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {

        //        var oColumn = oTableReorder.fnSettings().aoColumns[i];
        //        var style = '';
        //        var LiStyle = 'display:block';
        //        var LiClassName = 'ui-state-default'
        //        if (oColumn.sClass.indexOf('NotHide') >= 0) {
        //            //style = ' style="display:none" ';
        //            style = ' disabled="disabled" ';
        //            //LiStyle = 'display:none';
        //            LiClassName = LiClassName + ' HiddenLi';
        //        }

        //        var colindxbyname = '';
        //        if (oColumn.sTitle.trim() != '') {
        //            colindxbyname = MaterialSGetColumnIndex(oColumn.sTitle.trim());
        //        }
        //        else {
        //            colindxbyname = MaterialSGetColumnIndex('blankFieldName' + blankNUmber);
        //        }


        //        if (gblColumnsToHideinPopUp == 'True') {

        //            var li = document.createElement('li');
        //            li.id = colindxbyname;
        //            li.className = LiClassName;
        //            li.innerHTML = oColumn.sTitle.trim();
        //            li.style = LiStyle;
        //            if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
        //                if (oColumn.sTitle.trim() != '') {
        //                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + MaterialSGetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                }
        //                else {
        //                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + MaterialSGetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                    blankNUmber++;
        //                }
        //            }
        //            else {

        //                if (oColumn.sTitle.trim() != '') {
        //                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + MaterialSGetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                }
        //                else {

        //                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + MaterialSGetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                    blankNUmber++;
        //                }
        //            }
        //            $('#ColumnSortable').append(li);
        //        }
        //        else {

        //            if (jQuery.inArray(colindxbyname, ColumnsToHideinPopUp) < 0) {

        //                var li = document.createElement('li');
        //                li.id = colindxbyname;
        //                li.className = LiClassName;
        //                li.innerHTML = oColumn.sTitle.trim();
        //                li.style = LiStyle;
        //                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
        //                    if (oColumn.sTitle.trim() != '') {
        //                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + MaterialSGetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                    }
        //                    else {
        //                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + MaterialSGetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                    }
        //                }

        //                else {
        //                    if (oColumn.sTitle.trim() != '') {
        //                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + MaterialSGetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                    }
        //                    else {
        //                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + MaterialSGetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                    }
        //                }

        //                $('#ColumnSortable').append(li);
        //            }
        //            else {
        //                var li = document.createElement('li');
        //                li.id = colindxbyname;
        //                li.className = LiClassName;
        //                li.innerHTML = oColumn.sTitle.trim();
        //                if (oColumn.sTitle.trim() != '') {
        //                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + MaterialSGetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                }
        //                else {
        //                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + MaterialSGetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                }
        //                $(li).hide();
        //                $('#ColumnSortable').append(li);
        //            }
        //        }

        //    }

        //}
        //var MaterialSGetColumnIndex = function (ColumnName) {
        //    if (typeof (MaterialChildGridTableColumns) != "undefined") {
        //        return MaterialChildGridTableColumns[ColumnName];
        //    }
        //};
        /* HISTORY related data deleated and archived END */
    </script>
}
<script type="text/javascript">
    var isTabClick = false;
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.History', 'callbackhistory();', true, true),

    ];
    if ('@IsShowChangeLog.ToString().ToUpper()' == 'TRUE') {
        TabsArry.push(new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true));
    }

    function callbacknew() { window.location.hash = '#new'; ShowNewTab('MaterialStagingCreate', 'frmMaterialStaging'); }
    function callbackhistory() { window.location.hash = '#list'; $('#MSLineItems').empty(); } //HistoryTabClick();  }
    function callbackCL() { HistoryTabClick(); }
    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
        }

    }

    $(document).ready(function () {
        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
        //SetTabView();
    });
</script>
<div class="userListingWrapper">
    <h2>
        @eTurns.DTO.ResMaterialStaging.MaterialStagingHeader
    </h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'>
            @*  <li class="tab1"><a id="atab1" href='#tab1' onclick="TabItemClicked('MaterialStagingCreate','frmMaterialStaging')">
                </a></li>
                <li class="tab7"><a id="atab7" class="active" href='#tab7' onclick="javascript:ChangeEditToNew('MaterialStagingCreate','frmMaterialStaging');">
                </a></li>*@ @*<li class="tab5" style="display: none;"><a id="atab5" href='#tab5' onclick="javascript:HistoryTabClick();">
                </a></li>*@
            </ul>
            <div id="CtabNew" class="tabContener">
            </div>
            <div id="Ctab" class="tabContener">
                <div class="searchWrapper">
                    <div class="searchBlock">
                        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                        <div class="searchinputB">
                            <input type="text" class="searchinput" id="global_filter" />
                            <a href="javascript:void(0);" class="xclose">
                                <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                            </a>
                        </div>
                    </div>
                </div>
                @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Materialstaging)
                @Html.Partial("NarrowSearchLayout", modelCommon)
                <div class="userContent ">
                    <table id="myDataTable" class="display">
                        <thead>
                            <tr>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.RowNo
                                </th>
                                <th>
                                    @eTurns.DTO.ResMaterialStaging.StagingName
                                </th>
                                <th>
                                    @eTurns.DTO.ResMaterialStaging.Description
                                </th>
                                <th>
                                    @eTurns.DTO.ResMaterialStaging.BinName
                                </th>                                    
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.LastUpdatedBy
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.AddedFrom
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.EditedFrom
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                                </th>
                                @Html.RenderColumnsHeader("MaterialStaging", typeof(eTurns.DTO.ResMaterialStaging))
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                        @* <button id="btnAddNewCompany" value="Ok" style="display: none">
                                Add New</button>
                            <button id="btnDeleteCompany" value="cancel" style="display: none">
                                Delete Selected</button>*@
                        <div id="processing_message" style="display: none" title="Processing">
                            @eTurns.DTO.Resources.ResMessage.RequestProcessMessage
                        </div>
                    </div>
                </div>
                <div id='CtabCL' class="tabContener">
                </div>
            </div>
        </div>
        <script type="text/javascript">
            @*var objColumns = {
                '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ID)': 0,
                '@MvcHtmlString.Create(eTurns.DTO.ResMaterialStaging.StagingName)': 0,
                '@MvcHtmlString.Create(eTurns.DTO.ResMaterialStaging.Description)': 1,
                '@MvcHtmlString.Create(eTurns.DTO.ResMaterialStaging.BinName)': 2,
                '@MvcHtmlString.Create(eTurns.DTO.ResMaterialStaging.UDF1)': 3,
                '@MvcHtmlString.Create(eTurns.DTO.ResMaterialStaging.UDF2)': 4,
                '@MvcHtmlString.Create(eTurns.DTO.ResMaterialStaging.UDF3)': 5,
                '@MvcHtmlString.Create(eTurns.DTO.ResMaterialStaging.UDF4)': 6,
                '@MvcHtmlString.Create(eTurns.DTO.ResMaterialStaging.UDF5)': 7,
                '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedOn)': 8,
                '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedOn)': 9,
                '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.LastUpdatedBy)': 10,
                '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedBy)': 11

            };*@

            function BlankSession() {
                $.ajax({
                    url: '@Url.Content("~/Inventory/BlankSession")'
                                            , type: 'GET'
                                            , contentType: "application/json"
                                            , success: function (result) {
                                            },
                    error: function (msg) {
                    }
                });
            }
        </script>
        <script type="text/javascript">

            if ($.trim($('#tab1').html()) == "") {
                $('#tab1').load('@NewTaburl', function () { $('#DivLoading').hide(); });
            }
            $(document).ready(function () {
                //oTable.fnDraw();
            });

        </script>
        <script type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
