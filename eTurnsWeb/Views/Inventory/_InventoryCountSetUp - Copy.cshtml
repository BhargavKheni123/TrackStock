@model CycleCountSettingDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    string currentYear = eTurns.DAL.DateTimeUtility.DateTimeNow.Year.ToString();
}
<script type='text/javascript' src="@Url.Content("~/Scripts/jquery.watermark.js")"></script>
@{
    bool isUpdate;
    bool isInsert;
    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
    }
    else
    {
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Count, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Count, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    }
    if (Model != null && Model.ID > 0 && ((Model.IsArchived) || (Model.IsDeleted)))
    {
        isUpdate = false;
        isInsert = false;
    }
}
@using (Ajax.BeginForm("SaveInventoryCountSettings", "Inventory", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmInventoryCountSetup" }))
{
    <div class="userHead">
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
        @Html.HiddenFor(model => model.GUID, new { id = "hiddenGUID" })
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.CreatedDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.UpdatedDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="mainForm">
            <div class="editorForm">
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.AClassFrequency)<em>*</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.AClassFrequency, new { @class = "text-box", maxlength = 256 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.AClassFrequency)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CClassFrequency)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.CClassFrequency, new { @class = "text-box", maxlength = 1024 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.CClassFrequency)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EClassFrequency)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.EClassFrequency, new { @class = "text-box", maxlength = 1024 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.EClassFrequency)</span>
                        </div>
                    </li>
                    <li style="border-right: none;">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.YearStartDate)<em>*</em>
                        </div>
                        @Html.TextBoxFor(model => model.YearStartDateStr, new { @class = "text-box", @readonly = "readonly", @style = "background:white", maxlength = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.YearStartDate)</span>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EmailAddressesDailyCycle)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.EmailAddressesDailyCycle, new { id = "txtEmailAddressesDailyCycle", @class = "text-box", maxlength = 1024 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.EmailAddressesDailyCycle)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        </div>
                    </li>
                </ul>
            </div>
            <div class="editorForm padRightNone">
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.BClassFrequency)<em>*</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.BClassFrequency, new { @class = "text-box", maxlength = 256 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.BClassFrequency)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.DClassFrequency)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.DClassFrequency, new { @class = "text-box", maxlength = 1024 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DClassFrequency)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.FClassFrequency)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.FClassFrequency, new { @class = "text-box", maxlength = 1024 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.FClassFrequency)</span>
                        </div>
                    </li>
                    <li style="border-right: none;">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.YearEndDate)<em>*</em>
                        </div>
                        @Html.TextBoxFor(model => model.YearEndDateStr, new { @class = "text-box", @readonly = "readonly", @style = "background:white", maxlength = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.YearEndDate)</span>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EmailAddressesPreCountNotification)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.EmailAddressesPreCountNotification, new { id = "txtEmailAddressesPreCountNotification", @class = "text-box", maxlength = 1024 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.EmailAddressesPreCountNotification)</span>
                        </div>
                    </li>
                    @*<li>
                            <div class="editor-label">
                                &nbsp;
                            </div>
                            <div class="BtnBlockform">
                                <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                            </div>
                        </li>*@
                </ul>
            </div>
        </div>
    </div>
}
@Html.Partial("_RequiredMessages")
@*@if (false)
    {
        <script src="../../Scripts/jquery-1.9.1-vsdoc.js" type="text/javascript"></script>
    }*@
<script type="text/javascript">

    $(document).ready(function () {
        $('form').areYouSure();
    });
    //#region [Document ready]

    jQuery(function () {

        $("#YearStartDateStr").datepicker({ dateFormat: RoomDateJSFormat });
        $("#YearEndDateStr").datepicker({ dateFormat: RoomDateJSFormat });
        //$("#YearStartDate").datepicker(
        //{
        //    changeYear: true
        //});


        //$("#YearEndDate").datepicker(
        //{
        //    changeYear: true
        //});

        $("#frmInventoryCountSetup").submit(function (e) {
            $.validator.unobtrusive.parse("#frmInventoryCountSetup");
            if ($(this).valid()) {
                rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
            }
            e.preventDefault();
        });

        $("#btnCancel").click(function (e) {
            SwitchTextTab(0, 'InventoryCountCreate', 'frmInventoryCountSetup');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();
            }
        });



    });

    //#endregion

    //#region [Page functions]

    function onSuccess(response) {

        var retstat;
        IsRefreshGrid = true;
        $('div#target').fadeToggle();
        $("div#target").delay(2000).fadeOut(200);
        $("#spanGlobalMessage").text(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();
        if (idValue < 1 || idValue == "") {
            retstat = response.Status;
            switch (retstat) {
                case "fail":
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    break;
                case "duplicate":
                    $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                    break;
                case "ok":
                    if (oTable !== undefined && oTable != null) {
                        oTable.fnDraw();
                        //                        RefressFilterIC("InventoryCount");
                    }
                    //                    ShowEditTabGUID("InventoryCountEdit?IcGuid=" + response.UpdatedDTO.GUID, "frmInventoryCountSetup");
                    break;
            }
        }
        else if (idValue > 0) {
            retstat = response.Status;
            switch (retstat) {
                case "fail":
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    break;
                case "duplicate":
                    $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                    break;
                case "ok":
                    if (oTable !== undefined && oTable != null) {
                        oTable.fnDraw();
                        //                        RefressFilterIC("InventoryCount");
                    }
                    //                    TabItemClickedEditMatStag("MaterialStagingEdit/" + response.UpdatedDTO.ID, "frmMaterialStaging");
                    break;
            }
        }
    }

    function onFailure(message) {
        $("#spanGlobalMessage").text(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(2000).fadeOut(200);
        $("#txtStagingName").focus();
    }
    //#endregion

</script>
