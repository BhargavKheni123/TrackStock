@model eTurns.DTO.ItemMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    string menufURL = Url.Action("ManufacturerCreate", "Master", new { isforbom = false, ITEMGUID = Model.GUID });
    string supURL = Url.Action("SupplierCreate", "Master", new { ITEMGUID = Model.GUID });

    //string UNCPathRootLink2 = System.Configuration.ConfigurationManager.AppSettings["ItemImageLink2"].ToString();
    System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));
    string UNCPathRootLink2 = Settinfile.Element("InventoryLink2").Value;
    string UNCPathRootImage = Settinfile.Element("InventoryPhoto").Value;

    Int64 EnterpriseId = eTurnsWeb.Helper.SessionHelper.EnterPriceID;
    Int64 CompanyID = eTurnsWeb.Helper.SessionHelper.CompanyID;
    Int64 RoomID = eTurnsWeb.Helper.SessionHelper.RoomID;
    UNCPathRootLink2 = UNCPathRootLink2.Replace("~", string.Empty);
    UNCPathRootImage = UNCPathRootImage.Replace("~", string.Empty);
    string LogoPathImage = (UNCPathRootLink2 + EnterpriseId + "/" + CompanyID + "/" + RoomID);
    string LogoPathItemImage = (UNCPathRootImage + EnterpriseId + "/" + CompanyID + "/" + RoomID);
}
<script type='text/javascript' src="@Url.Content("~/Scripts/ajaxfileupload.js")"></script>


<style>
    .ui-autocomplete {
        max-height: 100px;
        overflow-y: auto; /* prevent horizontal scrollbar */
        overflow-x: hidden; /* add padding to account for vertical scrollbar */
        padding-right: 20px;
    }
    /* IE 6 doesn't support max-heightf
    * we use height instead, but this forces the menu to always be this tall
    */
    * html .ui-autocomplete {
        height: 100px;
    }
</style>
@{

    bool isUpdate;
    bool isInsert;
    bool onlyView = false;
    bool isCost = false;
    bool isSupplierInsert;
    bool isBOMItem = false;

    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
        onlyView = true;
        isSupplierInsert = false;
    }
    else
    {
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        isSupplierInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    }

    ItemSupplierDetailsDTO objItemSupplierDetailsDTO = ViewBag.strItemSupplierDetailsDTO;
    ItemManufacturerDetailsDTO objItemManufacturerDetailsDTO = ViewBag.strItemManufacturerDetailsDTO;
    if (objItemSupplierDetailsDTO == null)
    {
        objItemSupplierDetailsDTO = new ItemSupplierDetailsDTO();
    }
    if (objItemManufacturerDetailsDTO == null)
    {
        objItemManufacturerDetailsDTO = new ItemManufacturerDetailsDTO();
    }
    double weihggh = Model.WeightPerPiece ?? 0;
    int ActualWeightLength = 0;
    string DecimalValueLength = string.Format("{0:#,#.#############################}", (weihggh - (int)weihggh));
    ActualWeightLength = Convert.ToInt32(DecimalValueLength.Length) - 1;
    string weightPieceFormat = "{0:0.";
    for (int i = 0; i < ActualWeightLength; i++)
    {
        weightPieceFormat += "0";
    }
    weightPieceFormat += "}";
    string strDecimalFormat = eTurnsWeb.Helper.SessionHelper.QuantityFormat;
    string strPriceFormat = eTurnsWeb.Helper.SessionHelper.PriceFormat;
    string WeightPerPieceFormat = weightPieceFormat;// eTurnsWeb.Helper.SessionHelper.WeightFormat;
    string strTurnUsageFormat = eTurnsWeb.Helper.SessionHelper.TurnUsageFormat;

    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);



}
@using (Ajax.BeginForm("ItemSave", "Inventory", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", OnBegin = "onBegin", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmItemMaster" }))
{
    <div class="userHead" data-ng-controller="ItemDetailsController">
        @Html.ValidationSummary(true)
        @*&& Model.IsBOMItem != null*@
        @if (Model.ID != 0 && Model.IsBOMItem == false && Model.RefBomId != null && Model.RefBomId > 0)
        {
            isBOMItem = true;
        }
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : @*@(eTurnsWeb.Helper.CommonUtility.ToClientDateTime(Model.Created))*@ <span>@Model.CreatedDate</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : @*@(eTurnsWeb.Helper.CommonUtility.ToClientDateTime(Model.Updated))*@ <span>@Model.ReceivedOnDate</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
                @if (Convert.ToInt64(Model.OnHandQuantity) < Convert.ToInt64(Model.CriticalQuantity))
                {
                    <span class="SpanCritical" style="background-color:@eTurnsWeb.Helper.SessionHelper.CriticalQuantityBackColor">
                        &nbsp;Critical&nbsp;
                    </span>
                }
                else if (Convert.ToInt64(Model.OnHandQuantity) < Convert.ToInt64(Model.MinimumQuantity))
                {
                    <span class="SpanMinimum" style="background-color:@eTurnsWeb.Helper.SessionHelper.MinimumQuantityBackColor">
                        &nbsp;Minimum&nbsp;
                    </span>
                }
            </div>
        }
        @*else { if (ViewBag.DestinationModule != "CartItemMaster" && ViewBag.DestinationModule != "OrderMaster")
            {
            <div class="infoBlock">
                <ul>
                    <li style="border: none">@(Html.Partial("SupplierCatalog", new SupplierCatalogItemDTO()
                        { SourcePageName = "ItemMaster", OpenPopup = true, ButtonText = "Add from Catalog"
                        })) </li>
                    <li style="border: none">@(Html.Partial("BOM", new BOMItemDTO() { SourcePageName = "ItemMaster",
                        OpenPopup = true, ButtonText = "Add from BOM" })) </li>
                </ul>
            </div>
            } }*@
        <div class="mainForm">
            <div class="editorForm">
                <h4>@eTurns.DTO.ResItemMaster.GeneralDetails</h4>
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ItemType)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @if (isBOMItem == true)
                            {
                                @Html.DropDownListFor(model => model.ItemType, new SelectList(ViewBag.ItemTypeBag, "ID", "Text", Model.ItemType), "", new { @class = "selectBox disableBack js-example-basic-single", @id = "dlItemType", @disabled = "disabled" })
                                @Html.HiddenFor(model => model.ItemType)
                            }
                            else
                            {  @Html.DropDownListFor(model => model.ItemType, new SelectList(ViewBag.ItemTypeBag, "ID", "Text", Model.ItemType), "", new { @class = "selectBox js-example-basic-single", @id = "dlItemType" })}
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ItemType)</span>
                        </div>
                    </li>
                    
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ItemNumber)<em> *</em>
                        </div>
                        <div class="editor-field" id="dvhdns">
                            @if (isBOMItem == true)
                            {
                                @Html.TextBoxFor(model => model.ItemNumber, new { id = "ItemNumber", @disabled = "disabled", @class = "text-box disableBack", @autocomplete = "off", maxlength = 100 })
                                @Html.HiddenFor(model => model.ItemNumber)
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.ItemNumber, new { id = "ItemNumber", @class = "text-box", @autocomplete = "off", maxlength = 100 })

                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ItemNumber)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.ManufacturerName)
                            @Html.HiddenFor(model => model.SupplierName)
                            @Html.HiddenFor(model => model.CategoryID)
                            @Html.HiddenFor(model => model.Unit)
                            @Html.HiddenFor(model => model.DefaultLocation)
                            @Html.HiddenFor(model => model.GLAccount)
                            @Html.HiddenFor(model => model.ItemUniqueNumber)
                            @Html.HiddenFor(model => model.ItemType)
                            @Html.HiddenFor(model => model.SupplierID)
                            @Html.HiddenFor(model => model.ManufacturerID)
                            @Html.HiddenFor(model => model.SupplierPartNo)
                            @Html.HiddenFor(model => Model.ManufacturerNumber)
                            @Html.HiddenFor(model => Model.RefBomId)
                            @Html.HiddenFor(model => Model.RefBomI)
                            @Html.HiddenFor(model => Model.IsBOMItem)
                            @Html.HiddenFor(model => Model.DefaultLocationName, new { id = "hiddenDefaultLocationName" })
                            @Html.HiddenFor(model => Model.IsOnlyFromItemUI)
                            @*@Html.HiddenFor(model => Model.Markup)*@
                            <input type="hidden" name="DestinationModule" value="@ViewBag.DestinationModule" />
                            <input type="hidden" name="SupplierCatalogQty" value="@ViewBag.SupplierCatalogQty" />
                            <input type="hidden" name="SupplierCatalogOrderGUID" value="@ViewBag.SupplierCatalogOrderGUID" />
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsActive)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsActive)
                        </div>
                    </li>
                </ul>
                <ul id="ulkitdetails" style="display: none;">
                    <li>
                        <h4>
                            @eTurns.DTO.ResItemMaster.KitDetails
                        </h4>
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.IsBuildBreak)
                                </div>
                                <div class="editor-field">
                                    @if (Model.ID > 0)
                                    {
                                        @Html.CheckBox("IsBuildBreak", (Model.IsBuildBreak.HasValue ? Convert.ToBoolean(Model.IsBuildBreak) : false), new { @class = "check-box", @style = "display:none" })
                                        @Html.Label(((Model.IsBuildBreak.HasValue ? Convert.ToBoolean(Model.IsBuildBreak) : false) ? "Yes" : "No"), new { @style = "display:block" })
                                    }
                                    else
                                    {
                                        @Html.CheckBox("IsBuildBreak", (Model.IsBuildBreak.HasValue ? Convert.ToBoolean(Model.IsBuildBreak) : false), new { @class = "check-box", @style = "display:block" })
                                        @Html.Label(((Model.IsBuildBreak.HasValue ? Convert.ToBoolean(Model.IsBuildBreak) : false) ? "Yes" : "No"), new { @style = "display:none" })
                                    }
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsBuildBreak)</span>
                                </div>
                            </li>
                            <li id="liKitDetails">
                                <div id="divKitDetails">
                                </div>
                            </li>
                        </ul>
                    </li>
                </ul>
                <h4>
                    @eTurns.DTO.ResItemMaster.ManufacturerDetails
                    @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ManufacturerMaster,
eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                    {
                        <label>
                            <a onclick="AddNewFromPopup('Manufacturer');" id="btnAddNewManufacturer" class="addNewLink">
                                (Add New)
                            </a>
                        </label>
                    }
                </h4>
                <ul>
                    <li id="liManufacturerListInline">
                        <div id="divItemManufacturer">
                        </div>
                    </li>
                </ul>
                <ul id="ulSupplierDetails">
                    <li>
                        <h4>
                            @eTurns.DTO.ResItemMaster.SupplierDetails <em style="color: Red;">*</em> @* @if
                                (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster,
                                eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false) {
                                <label>
                                    <a onclick="AddNewFromPopup('Supplier');" id="btnAddNewSupplier" class="addNewLink">
                                        (Add New)</a>
                                </label>
                                }*@
                        </h4>
                    <li id="liSupplierListInline">
                        <div id="divItemSupplier">
                        </div>
                    </li>
                    </li>
                </ul>
                <h4>
                    @eTurns.DTO.ResItemMaster.Prices
                </h4>
                <ul>
                    @*<li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.PricePerTerm)<em> *</em>
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.PricePerTerm, eTurnsWeb.Helper.SessionHelper.PriceFormat,
                                new { @class = "text-boxPriceFormat", @name = "costdata" }) <span class="ErrorMessage">
                                    @Html.ValidationMessageFor(model => model.PricePerTerm)</span>
                            </div>
                        </li>*@
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CostUOMID)
                            <em>*</em>
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.CostUOMID, new SelectList(ViewBag.CostUOMBag, "ID", "Text", Model.CostUOMID), "", new { @class = "selectBox" })
                            @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.CostUOMMaster,
eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                            {
                                <label>
                                    <a onclick="AddNewFromPopup('CostUOM');" id="btnAddNewCostUOM" class="addNewLink">
                                        (Add
                                        New)
                                    </a>
                                </label>
                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.CostUOMID)</span>
                        </div>
                    </li>
                    @if (isCost)
                    {
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Cost)
                                @*<em> *</em>*@
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Cost, new { @class = "numericinput", @name = "costdata", @autocomplete = "off", maxlength = 20 })
                                @*<span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Cost)</span>*@
                                <input type="hidden" value="@Model.Cost" id="hdnOldCost" />
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Markup)
                            </div>
                            <div class="editor-field">
                                @Html.HiddenFor(model => model.Markup)
                                @Html.TextBoxFor(model => model.Markup, new { @class = "numericinput", @name = "costdata", @autocomplete = "off", maxlength = 20 })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Markup)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.SellPrice)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.SellPrice, new { @class = "numericinput", @name = "costdata", @autocomplete = "off", maxlength = 20 })
                                @*<span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SellPrice)</span>*@
                                <input type="hidden" value="@Model.SellPrice" id="hdnOldSellPrise" />
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.ExtendedCost)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.ExtendedCost, new { @class = "numericinput disableBack", @readonly = "readonly", @name = "costdata" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ExtendedCost)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.AverageCost)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.AverageCost, new { @class = "numericinput disableBack", @readonly = "readonly", @name = "costdata" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.AverageCost)</span>
                            </div>
                        </li>
                    }
                    else
                    {
                        <li>
                            @Html.HiddenFor(t => t.Cost)
                            @Html.HiddenFor(t => t.Markup)
                            @Html.HiddenFor(t => t.SellPrice)
                            @Html.HiddenFor(t => t.ExtendedCost)
                            @Html.HiddenFor(t => t.AverageCost)
                        </li>
                    }
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.AverageUsage)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.AverageUsage, new { @class = "text-box disableBack", @disabled = "disabled", @autocomplete = "off", @name = "costdata" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.AverageUsage)</span>
                            @Html.HiddenFor(model => model.AverageUsage)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.WeightPerPiece)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.WeightPerPiece, WeightPerPieceFormat, new { @class = "text-box text-boxWeightPerPieceFormat", @autocomplete = "off", @name = "costdata", maxlength = 10 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WeightPerPiece)</span>
                        </div>
                    </li>
                </ul>
                <h4>
                    @eTurns.DTO.ResItemMaster.OtherDetails
                </h4>
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.UPC)
                        </div>
                        <div class="editor-field">
                            @if (isBOMItem == true)
                            {
                                @Html.TextBoxFor(model => model.UPC, new { @class = "text-box disableBack", @disabled = "disabled" })
                                @Html.HiddenFor(model => model.UPC)
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.UPC, new { @class = "text-box" })
                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UPC)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.UNSPSC)
                        </div>
                        <div class="editor-field">
                            @if (isBOMItem == true)
                            {

                                @Html.TextBoxFor(model => model.UNSPSC, new { @class = "text-box disableBack", @disabled = "disabled" })
                                @Html.HiddenFor(model => model.UNSPSC)
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.UNSPSC, new { @class = "text-box" })
                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UNSPSC)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Description)
                        </div>
                        <div class="editor-field">
                            @if (isBOMItem == true)
                            {
                                @Html.TextBoxFor(model => model.Description, new { @class = "text-box disableBack", @disabled = "disabled" })
                                @Html.HiddenFor(model => model.Description)
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.Description, new { @class = "text-box" })
                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Description)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.LongDescription)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.LongDescription, 10, 100, new { @class = "text-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.LongDescription)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CategoryID)
                        </div>
                        <div class="editor-field">
                            @if (isBOMItem == true)
                            {
                                @Html.TextBoxFor(model => model.CategoryName, new { @class = "text-box disableBack ", @disabled = "disabled", @id = "CategoryName", maxlength = 50 })
                                @Html.HiddenFor(model => model.CategoryName)
                            }
                            else
                            {
                                if (HasOnTheFlyEntryRight)
                                {
                                    <span style='position: relative'>
                                        @Html.TextBoxFor(model => model.CategoryName, new { @class = "text-box", @id = "CategoryName", maxlength = 50 })
                                        <a id='lnkShowAllOptionsCat' href='javascript:void(0);' style='position: absolute;
                                        right: 5px; top: 0px;' class="ShowAllOptionsCat">
                                            <img src='/Content/images/arrow_down_black.png' alt='select' />
                                        </a>
                                    </span>
                                }
                                else
                                {
                                    //@Html.HiddenFor(model => model.CategoryName, new { @id = "CategoryName" })
                                    @Html.DropDownListFor(model => model.CategoryName, new SelectList(ViewBag.CategoryIDBag, "Text", "Text", Model.CategoryID), "", new { @id = "CategoryName", @maxlength = "200", @class = "text-boxinner" })
                                }
                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.CategoryName)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.GLAccountID)
                        </div>
                        <div class="editor-field">
                            @if (isBOMItem == true)
                            {
                                @Html.DropDownListFor(model => model.GLAccountID, new SelectList(ViewBag.GLAccountIDBag, "ID", "Text", Model.GLAccountID), "", new { @class = "selectBox disableBack", @disabled = "disabled", @onchange = "SetNames();" })
                                @Html.HiddenFor(model => model.GLAccountID)
                            }
                            else
                            {  @Html.DropDownListFor(model => model.GLAccountID, new SelectList(ViewBag.GLAccountIDBag, "ID", "Text", Model.GLAccountID), "", new { @class = "selectBox", @onchange = "SetNames();" }) }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.GLAccountID)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.UOMID)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @if (isBOMItem == true)
                            {
                                @Html.DropDownListFor(model => model.UOMID, new SelectList(ViewBag.UOMIDBag, "ID", "Text", Model.UOMID), "", new { @class = "selectBox disableBack", @disabled = "disabled", @onchange = "SetNamesUOM();" })
                                @Html.HiddenFor(model => model.UOMID)
                            }
                            else
                            {  @Html.DropDownListFor(model => model.UOMID, new SelectList(ViewBag.UOMIDBag, "ID", "Text", Model.UOMID), "", new { @class = "selectBox", @onchange = "SetNamesUOM();" })

                                if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster,
                                        eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                                {
                                    <label>
                                        <a onclick="AddNewFromPopup('UOMUnit');" id="btnAddNewUOMUnit" class="addNewLink">
                                            (Add
                                            New)
                                        </a>
                                    </label>
                                }
                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UOMID)</span>
                            @* @if (isBOMItem == true) { @Html.TextBoxFor(model => model.Unit, new { @class
                                = "text-box disableBack", @disabled = "disabled", @id = "txtUnit" }) @Html.HiddenFor(model
                                => model.Unit) } else { @Html.TextBoxFor(model => model.Unit, new { @class = "text-box",
                                @id = "txtUnit" }) } <span class="ErrorMessage">@Html.ValidationMessageFor(model =>
                                    model.Unit)</span> *@
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.LeadTimeInDays)
                        </div>
                        <div class="editor-field">
                            @if (isBOMItem == true)
                            {
                                @Html.TextBoxFor(model => model.LeadTimeInDays, new { @class = "text-box disableBack", @disabled = "disabled", @onkeypress = "return onlyNumeric(event)", maxlength = 10 })
                                @Html.HiddenFor(model => model.LeadTimeInDays)
                            }
                            else
                            { @Html.TextBoxFor(model => model.LeadTimeInDays, new { @class = "text-box", @onkeypress = "return onlyNumeric(event)", maxlength = 10 }) }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.LeadTimeInDays)</span>
                        </div>
                    </li>

                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ItemDocExternalURL)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ItemDocExternalURL, new { @class = "text-box", maxlength = 500, width = 100, @onblur = "return is_valid_url(this);" })
                            @if (!string.IsNullOrEmpty(Model.ItemDocExternalURL))
                            {
                                string varURL = Model.ItemDocExternalURL;
                                if (!string.IsNullOrEmpty(varURL) && !varURL.Contains("http"))
                                {
                                    varURL = "http://" + varURL;
                                }
                                <label>
                                    <a class="addNewLinkForDOC" href="@(varURL)" target="_blank">View </a>
                                </label>
                            }
                        </div>
                        @Html.HiddenFor(model => Model.ItemDocExternalURL)
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Trend)
                        </div>
                        <div class="editor-field">
                            @*@if (Model.Trend == null)
                                {
                                    Model.Trend = false;
                                }*@
                            @Html.CheckBoxFor(model => model.Trend, new { @class = "check-box", @id = "Trend" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Trend)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.TrendingSetting)
                        </div>
                        <div class="editor-field">
                            @if (isBOMItem == true)
                            {
                                @Html.DropDownListFor(model => model.TrendingSetting, new SelectList(ViewBag.TrendingSettingBag, "ID", "Text", Model.TrendingSetting), "", new { @class = "selectBox disableBack", @id = "dlTrendingSetting", @disabled = "disabled" })
                                @Html.HiddenFor(model => model.TrendingSetting)
                            }
                            else
                            {  @Html.DropDownListFor(model => model.TrendingSetting, new SelectList(ViewBag.TrendingSettingBag, "ID", "Text", Model.TrendingSetting), "", new { @class = "selectBox", @id = "dlTrendingSetting" })}
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Taxable)
                        </div>
                        <div class="editor-field">
                            @*@if (Model.Taxable == null)
                                {
                                    Model.Taxable = false;
                                }*@
                            @if (isBOMItem == true)
                            {
                                @Html.CheckBoxFor(model => model.Taxable, new { @class = "check-box disableBack", @disabled = "disabled" })
                                @Html.HiddenFor(model => model.Taxable)
                            }

                            else
                            { @Html.CheckBoxFor(model => model.Taxable, new { @class = "check-box" }) }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Taxable)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Consignment)
                        </div>
                        <div class="editor-field">
                            @*@if (Model.Consignment == null)
                                {
                                    Model.Consignment = false;
                                }*@ @* @if (isBOMItem == true)
                                {
                                    @Html.CheckBoxFor(model => model.Consignment, new { @class = "check-box disableBack", @disabled = "disabled" })
                                    @Html.HiddenFor(model => model.Consignment)

                                }

                                else*@ @*    { *@@Html.CheckBoxFor(model => model.Consignment, new { @class = "check-box" })
                                @*  }*@ <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Consignment)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Turns)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Turns, new { @class = "text-box disableBack", @readonly = "readonly" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Turns)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsTransfer) AND/OR @Html.LabelFor(model => model.IsPurchase)
                                <em>*</em>
                            </div>
                            <div class="editor-field">
                                @*@if (Model.IsTransfer == null)
                                    {
                                        Model.IsTransfer = false;
                                    }*@
                                @Html.LabelFor(model => model.IsTransfer)
                                @* @if (isBOMItem == true)
                                    {

                                        @Html.CheckBoxFor(model => model.IsTransfer, new { @class = "check-box disableBack", @readonly = "readonly" })
                                         @Html.HiddenFor(model => model.IsTransfer)
                                    }
                                    else*@ @*  { *@
                                    @Html.CheckBoxFor(model => model.IsTransfer, new { @class = "check-box" })
                                    @*    }*@ <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsTransfer)</span>
                                    <span>&nbsp;&nbsp;&nbsp;</span> @*@if (Model.IsPurchase == null)
                                        {
                                            Model.IsPurchase = false;
                                        }*@
                                    @Html.LabelFor(model => model.IsPurchase)
                                    @*  @if (isBOMItem == true)
                                        {

                                            @Html.CheckBoxFor(model => model.IsPurchase, new { @class = "check-box disableBack", @readonly = "readonly" })
                                            @Html.HiddenFor(model => model.IsPurchase)
                                        }
                                        else*@ @*  { *@
                                        @Html.CheckBoxFor(model => model.IsPurchase, new { @class = "check-box" })
                                        @* }*@ <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsPurchase)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.BondedInventory)
                                    </div>
                                    <div class="editor-field">
                                        @Html.TextBoxFor(model => model.BondedInventory, new { @class = "text-box disableBack", @readonly = "readonly" })
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.BondedInventory)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.IsAutoInventoryClassification)
                                    </div>
                                    <div class="editor-field">
                                        @*@if (Model.IsAutoInventoryClassification == null)
                                            {
                                                Model.IsAutoInventoryClassification = false;
                                            }*@
                                        @Html.CheckBoxFor(model => model.IsAutoInventoryClassification, new { @class = "check-box", @id = "chkIsAutoInventoryClassification" })
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.InventoryClassification)
                                    </div>
                                    <div class="editor-field">
                                        @if (isBOMItem == true)
                                        {
                                            @Html.DropDownListFor(model => model.InventoryClassification, new SelectList(ViewBag.InventoryClassificationBag, "ID", "Text", Model.InventoryClassification), "", new { @class = "selectBox disableBack", @disabled = "disabled", @id = "drpInventoryClassification" })
                                            @Html.HiddenFor(model => model.InventoryClassification)
                                        }
                                        @*  else if (Model.IsAutoInventoryClassification == true)
                                            {
                                                @Html.DropDownListFor(model => model.InventoryClassification, new SelectList(ViewBag.InventoryClassificationBag, "ID", "Text", Model.InventoryClassification), "", new { @class = "selectBox disableBack", @disabled = "disabled", @id = "drpInventoryClassification" })
                                                @Html.HiddenFor(model => model.InventoryClassification)
                                            }*@
                                        else
                                        {
                                            @Html.DropDownListFor(model => model.InventoryClassification, new SelectList(ViewBag.InventoryClassificationBag, "ID", "Text", Model.InventoryClassification), "", new { @class = "selectBox", @id = "drpInventoryClassification" })
                                        }
                                        @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster,
eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                                        {
                                            <label>
                                                <a onclick="AddNewFromPopup('InventoryClassification');" id="btnAddNewInventoryClassification"
                                                   class="addNewLink">(Add New)</a>
                                            </label>
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.InventoryClassification)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        &nbsp;
                                    </div>
                                    <div class="BtnBlockform">
                                        <input type="button" value="Cancel" id="btnCancel" class="CreateBtn" />
                                        @if (isInsert == true && Model.ID == 0)
                                        {
                                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                                        }
                                        else if (isUpdate == true)
                                        {
                                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                                        }
                                        else if (isUpdate == false && isInsert == false)
                                        {
                                            <script>
                                                //This is the case when archived or deleted record is being viewed..
                                                disableControls('frmItemMaster');
                                            </script>
                                        }
                                    </div>
                                </li>
                            </ul>
                        </div>
                        <div class="editorForm padRightNone">
                            <h4>
                                @eTurns.DTO.ResItemMaster.QuantityDetails
                            </h4>
                            <ul id="ulQuantity">
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.IsItemLevelMinMaxQtyRequired)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0)
                                        {
                                            @(Model.IsItemLevelMinMaxQtyRequired == true ? "Yes" : "No")
                                            @Html.HiddenFor(model => model.IsItemLevelMinMaxQtyRequired)
                                        }
                                        else
                                        {
                                            bool IsItemLevelMinMaxQtyRequired = false;
                                            if (Model.IsItemLevelMinMaxQtyRequired == null)
                                            {
                                                IsItemLevelMinMaxQtyRequired = false;
                                            }
                                            else
                                            {
                                                IsItemLevelMinMaxQtyRequired = (Model.IsItemLevelMinMaxQtyRequired == true ? true : false);
                                            }
                                            if (ViewBag.LockReplenishmentType)
                                            {
                                                @Html.CheckBox("dummy", IsItemLevelMinMaxQtyRequired, new { @class = "check-box", @disabled = "disabled" })
                                                @Html.HiddenFor(model => model.IsItemLevelMinMaxQtyRequired)
                                            }
                                            else
                                            {
                                                @Html.CheckBox("IsItemLevelMinMaxQtyRequired", IsItemLevelMinMaxQtyRequired, new { @class = "check-box", @id = "IsItemLevelMinMaxQtyRequired" })
                                            }
                                        }
                                    </div>
                                </li>
                                <li id="liCriticalQuantity">
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.CriticalQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.CriticalQuantity, new { @class = "numericinput", @autocomplete = "off"})
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.CriticalQuantity, new { @class = "numericinput", @autocomplete = "off" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.CriticalQuantity)</span>
                                    </div>
                                </li>
                                <li id="liMinimumQuantity">
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.MinimumQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.MinimumQuantity, new { @class = "numericinput", @autocomplete = "off", ondragstart = "return false", draggable = "false" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.MinimumQuantity, new { @class = "numericinput", @autocomplete = "off", ondragstart = "return false", draggable = "false" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MinimumQuantity)</span>
                                    </div>
                                </li>
                                <li id="liMaximumQuantity">
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.MaximumQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.MaximumQuantity, new { @class = "numericinput", @autocomplete = "off" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.MaximumQuantity, new { @class = "numericinput", @autocomplete = "off"})
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaximumQuantity)</span>
                                    </div>
                                </li>
                                <li id="liLocationListInline">
                                    <div id="divBinReplanish">
                                    </div>
                                </li>
                                <li></li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.OnHandQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.OnHandQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.OnHandQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.OnHandQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.SuggestedOrderQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.SuggestedOrderQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.SuggestedOrderQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SuggestedOrderQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.SuggestedTransferQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.SuggestedTransferQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.SuggestedTransferQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SuggestedTransferQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.OnOrderQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.OnOrderQuantity, "{0:0}", new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.OnOrderQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.OnOrderQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.OnOrderInTransitQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.OnOrderInTransitQuantity, "{0:0}", new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.OnOrderInTransitQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.OnOrderInTransitQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.OnReturnQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.OnReturnQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.OnReturnQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.OnReturnQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.OnTransferQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.OnTransferQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.OnTransferQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.OnTransferQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.RequisitionedQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.RequisitionedQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.RequisitionedQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequisitionedQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.StagedQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.StagedQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.StagedQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.StagedQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.InTransitquantity)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.InTransitquantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.InTransitquantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.InTransitquantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.QtyToMeetDemand)
                                    </div>
                                    <div class="editor-field">
                                        @Html.TextBoxFor(model => model.QtyToMeetDemand, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.QtyToMeetDemand)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.OutTransferQuantity)
                                    </div>
                                    <div class="editor-field">
                                        @Html.TextBoxFor(model => model.OutTransferQuantity, new { @class = "numericinput disableBack", @readonly = "readonly" })
                                    </div>
                                </li>
                                <li id="liDefaultPullQuantity">
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.DefaultPullQuantity)<em> *</em>
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.DefaultPullQuantity, new { @class = "numericinput", @autocomplete = "off", maxlength = 10 })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.DefaultPullQuantity, new { @class = "numericinput", @autocomplete = "off", maxlength = 10 })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DefaultPullQuantity)</span>
                                    </div>
                                </li>
                                <li id="liDefaultReorderQuantity">
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.DefaultReorderQuantity)<em> *</em>
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0 && Model.SerialNumberTracking)
                                        {
                                            @Html.TextBoxFor(model => model.DefaultReorderQuantity, new { @class = "numericinput", @autocomplete = "off", maxlength = 10 })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.DefaultReorderQuantity, new { @class = "numericinput", @autocomplete = "off", maxlength = 10 })
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DefaultReorderQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        &nbsp;
                                    </div>
                                    <div class="editor-field">
                                        @Html.CheckBox("IsEnforceDefaultReorderQuantity", (Model.IsEnforceDefaultReorderQuantity == null ? false : Model.IsEnforceDefaultReorderQuantity.Value), new { @id = "IsEnforceDefaultReorderQuantity", @class = "check-box" })
                                        &nbsp;
                                        @Html.LabelFor(model => model.IsEnforceDefaultReorderQuantity)
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsEnforceDefaultReorderQuantity)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        &nbsp;
                                    </div>
                                    <div class="editor-field">
                                        @Html.CheckBox("PullQtyScanOverride", (Model.PullQtyScanOverride), new { @id = "PullQtyScanOverride", @class = "check-box" })@*Model.PullQtyScanOverride == null ? false :*@
                                        &nbsp;
                                        @Html.LabelFor(model => model.PullQtyScanOverride)
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        &nbsp;
                                    </div>
                                    <div class="editor-field">
                                        @Html.CheckBox("IsPackslipMandatoryAtReceive", (Model.IsPackslipMandatoryAtReceive), new { @id = "IsPackslipMandatoryAtReceive", @class = "check-box" })@*Model.IsPackslipMandatoryAtReceive == null ? false :*@
                                        &nbsp;
                                        @Html.LabelFor(model => model.IsPackslipMandatoryAtReceive)
                                    </div>
                                </li>
                                @*<li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.PackingQuantity)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.PackingQuantity, eTurnsWeb.Helper.SessionHelper.QuantityFormat,
                                            new { @class = "text-boxQuantityFormat" }) <span class="ErrorMessage">@Html.ValidationMessageFor(model
                                                => model.PackingQuantity)</span>
                                        </div>
                                    </li>*@
                            </ul>
                            <h4>
                                @eTurns.DTO.ResItemMaster.TrackingDetails
                            </h4>
                            <ul id="ulTracking">
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.SerialNumberTracking)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0)
                                        {
                                            @(Model.SerialNumberTracking == true ? "Yes" : "No")
                                            @Html.HiddenFor(model => model.SerialNumberTracking)
                                        }
                                        else
                                        {
                                            //if (Model.SerialNumberTracking == null)
                                            //{
                                            //    Model.SerialNumberTracking = false;
                                            //}
                                            @*@Html.CheckBoxFor(model => model.SerialNumberTracking, new { @class = "check-box", @id = "chkSerialNumberTracking" })
                                                @Html.RadioButtonFor(model => model.ItemTraking, "2", new { @id = "rdoSerialTracking" })*@
                                            <input type="radio" name="ItemTraking" id="rdoSerialTracking" value="2" />
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SerialNumberTracking)</span>
                                        <input type="hidden" name="ItemTraking" id="hdnItmTracking" value="13" />
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.LotNumberTracking)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0)
                                        {
                                            @(Model.LotNumberTracking == true ? "Yes" : "No")
                                            @Html.HiddenFor(model => model.LotNumberTracking)
                                        }
                                        else
                                        {
                                            //if (Model.LotNumberTracking == null)
                                            //{
                                            //    Model.LotNumberTracking = false;
                                            //}
                                            <input type="radio" name="ItemTraking" id="rdoLotTracking" value="1" />
                                            @*                @Html.RadioButtonFor(model => model.ItemTraking, "1", new { @id = "rdoLotTracking" })
                                                @Html.CheckBoxFor(model => model.LotNumberTracking, new { @class = "check-box", @id = "chkLotNumberTracking" })*@
                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.LotNumberTracking)</span>
                                    </div>
                                </li>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.DateCodeTracking)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0)
                                        {
                                            @(Model.DateCodeTracking == true ? "Yes" : "No")
                                            @Html.HiddenFor(model => model.DateCodeTracking)
                                        }
                                        else
                                        {
                                            //if (Model.DateCodeTracking == null)
                                            //{
                                            //    Model.DateCodeTracking = false;
                                            //}
                                            @Html.CheckBoxFor(model => model.DateCodeTracking, new { @class = "check-box", @id = "chkDateCodeTracking" })

                                        }
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DateCodeTracking)</span>
                                    </div>
                                </li>
                            </ul>
                            <h4>
                                @eTurns.DTO.ResItemMaster.UDFDetails
                            </h4>
                            <ul>
                                @Html.Partial("UDFLayout", new eTurns.DTO.ResItemMaster())
                            </ul>
                            @*<ul>
                                    <li>
                                        @Html.RadioButtonFor(e => e.ImageType, "ImagePath", new { id = "ImagePath", onchange = "ShowImage(this);" })
                                        @Html.Label("ImageType", "Local Image")
                                        @Html.RadioButtonFor(e => e.ImageType, "ExternalImage", new { id = "ExternalImage", onchange = "ShowImage(this);" })
                                        @Html.Label("ExternalImage", "External Url")
                                    </li>
                                </ul>
                                <h4>
                                    @eTurns.DTO.ResItemMaster.ImagePath
                                </h4>
                                <ul>
                                    <li>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.ImagePath)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.ImagePath, new { @id = "txtImagePath", @style = "display:none;" })
                                            <div style="float: left;">
                                                @if (!string.IsNullOrEmpty(Model.ImagePath))
                                                {
                                                    <img id="ItemImageBox" style="width:120px;height:120px;" src="@( "/InventoryPhoto/" + eTurnsWeb.Helper.SessionHelper.CompanyID.ToString() + "/" + Model.ImagePath)">
                                                }
                                                else
                                                {
                                                    <img id="ItemImageBox" style="width: 120px; height: 120px;" alt="No Image" src="~/Content/images/no-image.jpg" />
                                                }
                                            </div>
                                            <div style="padding-left: 10px;">
                                                <a href="javascript:void(0);" class="btn" onclick="OpenFile('@(Model.ID)','@(Model.ID)', 'txtfileupload');return false;">
                                                    Upload </a>
                                            </div>
                                        </div>
                                    </li>
                                    <li id="ExternalURL">
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.ItemImageExternalURL)
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBoxFor(model => model.ItemImageExternalURL, new { @class = "text-box", maxlength = 500, @onblur = "return CheckValidURLForImage(this);" })
                                        </div>
                                        @Html.HiddenFor(model => Model.ItemImageExternalURL)
                                    </li>
                                    <li>
                                        <div class="editor-label">
                                            <label>
                                                Preview
                                            </label>
                                        </div>
                                        <div style="float: left;">
                                            @if (!string.IsNullOrEmpty(Model.ItemImageExternalURL))
                                            {
                                                string imgURL = Model.ItemImageExternalURL;
                                                <img id="ItemExternalImageURL" style="width: 120px; height: 120px;" src="@(imgURL)" alt=""/>
                                            }
                                            else
                                            {
                                                <img id="ItemExternalImageURL" style="width: 120px; height: 120px;" alt="No Image"
                                                    src="~/Content/images/no-image.jpg" />
                                            }
                                        </div>
                                    </li>*@


                            <h4>
                                @eTurns.DTO.ResItemMaster.ImagePath
                            </h4>
                            <ul>
                                <li>
                                    @Html.RadioButtonFor(e => e.ImageType, "ImagePath", new { id = "ImagePath", onchange = "ShowImage(this);" })
                                    @Html.Label("ImagePath", "Local Image");
                                    @Html.RadioButtonFor(e => e.ImageType, "ExternalImage", new { id = "ExternalImage", onchange = "ShowImage(this);" })
                                    @Html.Label("ExternalImage", "External Url")
                                </li>

                                <li id="ExternalURL">
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.ItemImageExternalURL)
                                    </div>
                                    <div class="editor-field">
                                        @Html.TextBoxFor(model => model.ItemImageExternalURL, new { @class = "text-box", maxlength = 500, @onblur = "return CheckValidURLForImage(this);" })
                                    </div>
                                    @Html.HiddenFor(model => Model.ItemImageExternalURL)
                                </li>
                                <li>
                                    <ul>
                                        <li>
                                            <div class="editor-label">
                                                @Html.LabelFor(model => model.ImagePath)@*<em> *</em>*@
                                            </div>
                                            <div class="editor-field" style="width: 1000px;">
                                                <input name="ItemImage" id="ItemImage" type="file" />
                                                <input type="hidden" value="~/Content/images/no-image.jpg" id="currentpath" />
                                                <div style="float: left;">
                                                    @if (!string.IsNullOrEmpty(Model.ImagePath) && Model.ImageType.Trim().ToLower() == "imagepath")
                                                    {
                                                        //string Imagepath = "/Uploads/InventoryPhoto/";
                                                        //string Enterpriseid = eTurnsWeb.Helper.SessionHelper.EnterPriceID.ToString();
                                                        //string CompanyId = eTurnsWeb.Helper.SessionHelper.CompanyID.ToString();
                                                        //string Roomid = eTurnsWeb.Helper.SessionHelper.RoomID.ToString();
                                                        <img id="previewHolder" style="width:120px;height:120px;" src="@(LogoPathItemImage+ "/" + Model.ID+ "/" + Model.ImagePath)">
                                                    }
                                                    else if (!string.IsNullOrEmpty(Model.ItemImageExternalURL) && Model.ImageType.Trim().ToLower() == "externalimage")
                                                    {
                                                        <img id="previewHolder" style="width:120px;height:120px;" src="@( Model.ItemImageExternalURL)">
                                                    }
                                                    else
                                                    {
                                                        <img id="previewHolder" style="width: 120px; height: 120px;" alt="No Image" src="~/Content/images/no-image.jpg" />
                                                    }
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </li>
                            </ul>

                            <h4>
                                @eTurns.DTO.ResItemMaster.Link2
                            </h4>
                            <ul>
                                <li>
                                    @Html.RadioButtonFor(e => e.ItemLink2ImageType, "InternalLink", new { id = "InternalLink", onchange = "ShowLink2Image(this);" })
                                    @Html.Label("InternalLink", "Internal Link")
                                    @Html.RadioButtonFor(e => e.ItemLink2ImageType, "ExternalURL", new { id = "Link2ExternalURL", onchange = "ShowLink2Image(this);" })
                                    @Html.Label("Link2ExternalURL", "External Url")
                                </li>

                                <li id="ExternalURL">
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.ItemLink2ExternalURL)
                                    </div>
                                    <div class="editor-field">
                                        @Html.TextBoxFor(model => model.ItemLink2ExternalURL, new { @class = "text-box", maxlength = 500 })
                                    </div>
                                    @Html.HiddenFor(model => Model.ItemLink2ExternalURL)
                                </li>
                                <li>
                                    <ul>
                                        <li>
                                            <div class="editor-label">
                                                @Html.LabelFor(model => model.Link2)@*<em> *</em>*@
                                               
                                            </div>
                                            <div class="editor-field" style="width: 1000px;">
                                                 <input name="Link2" id="Link2" type="file" />
                                                <input type="hidden" value="~/Content/images/no-image.jpg" id="currentpathLink2" />
                                                <div style="float: left;">
                                                    @*@if (!string.IsNullOrEmpty(Model.Link2) && Model.ItemLink2ImageType.Trim().ToLower() == "internallink")
                                                        {
                                                            <img id="previewHolderLink2" style="width:120px;height:120px;" src="@("/InventoryPhoto/Link2/" + Model.ID + "/" + Model.Link2)">
                                                        }
                                                        else if (!string.IsNullOrEmpty(Model.ItemLink2ExternalURL) && Model.ItemLink2ImageType.Trim().ToLower() == "externalurl")
                                                        {
                                                            <img id="previewHolderLink2" style="width:120px;height:120px;" src="@( Model.ItemLink2ExternalURL)">
                                                        }
                                                        else
                                                        {
                                                            <img id="previewHolderLink2" style="width: 120px; height: 120px;" alt="No Image" src="~/Content/images/no-image.jpg" />
                                                        }*@
                                                    @*@if (Model.Link2 != null && Model.ItemLink2ImageType == 'InternalLink')
                                                        {
                                                            <a class='addNewLink' onclick='return OpenImg(this);' href="@("/InventoryPhoto/Link2/" + Model.ID + "/" + Model.Link2)" target='_blank'>'@Model.Link2'</a>
                                                        }*@
                                                    @if ((!string.IsNullOrWhiteSpace(Model.ItemLink2ImageType)) && !string.IsNullOrEmpty(Model.Link2) && Model.ItemLink2ImageType.Trim().ToLower() == "internallink")
                                                    {
                                                        //string ImagepathLink2 = "/Uploads/InventoryLink2/";
                                                        //string Enterpriseid = eTurnsWeb.Helper.SessionHelper.EnterPriceID.ToString();
                                                        //string CompanyId = eTurnsWeb.Helper.SessionHelper.CompanyID.ToString();
                                                        //string Roomid = eTurnsWeb.Helper.SessionHelper.RoomID.ToString();

                                                        <a id="previewHolderLink2" style="width:120px;height:120px;" href="@( LogoPathImage+ "/" + Model.ID+ "/" + Model.Link2)" target='_blank'> View</a>
                                                    }
                                                    else if (!string.IsNullOrEmpty(Model.ItemLink2ExternalURL) && Model.ItemLink2ImageType.Trim().ToLower() == "externalurl")
                                                    {
                                                        <a id="previewHolderLink2" style="width:120px;height:120px;" href="@( Model.ItemLink2ExternalURL)" target='_blank'>View</a>
                                                    }
                                                    else
                                                    {
                                                        <span></span>
                                                    }
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

}
@Html.Partial("_RequiredMessages")
<div id="ItemModelPS">
</div>
<div id="NewMasterPopUP">
</div>
<script type="text/javascript">
    var sImageUrl = "/Content/images/";
    var giCount = 1;
    var oTableLocations;
    var GlobalFileUpload = '';
    var GlobalID = '';
    var GlobalURLID = '';
    var GlobalItemNumber = '';
    var newGuid = '';
    var ItemID = '@Model.ID';
    var ItemGUID = '@Model.GUID';
    var ItemImageType = '@Model.ImageType';
    var ItemLink2ImageType = '@Model.ItemLink2ImageType';
    var IsItemLevelMinMaxQtyRequired = '@Model.IsItemLevelMinMaxQtyRequired';
    var ItemType = '@Model.ItemType';
    var OnedefaultSupplierisRequired = '@ResItemMaster.OnedefaultSupplierisRequired';
    var IsBOMItem = '@Model.IsBOMItem';
    var RefBomId = '@Model.RefBomId';
    var ViewBag_LockReplenishmentType = '@ViewBag.LockReplenishmentType';
    var ViewBag_LockConsignment = '@ViewBag.LockConsignment';
    var Inventory_LoadKitComponentofItem = '@Url.Action("LoadKitComponentofItem", "Inventory")';
    var Inventory_LoadItemKitModel = '@Url.Action("LoadItemKitModel", "Inventory")';
    var Inventory_SavetoSeesionItemKitComponent = '@Url.Action("SavetoSeesionItemKitComponent", "Inventory")';
    var Inventory_DeletetoSeesionItemKitComponentSingle = '@Url.Action("DeletetoSeesionItemKitComponentSingle", "Inventory")';
    var Inventory_SaveKitQty = '@Url.Action("SaveKitQty", "Inventory")';
    var Inventory_LoadLocationsofItem = '@Url.Action("LoadLocationsofItem", "Inventory")';
    var Inventory_SavetoSeesionBinReplanishSingleNew = '@Url.Action("SavetoSeesionBinReplanishSingleNew", "Inventory")';
    var Inventory_SavetoSeesionBinReplanishSingle = '@Url.Action("SavetoSeesionBinReplanishSingle", "Inventory")';
    var Inventory_CheckifanyCartEntryExist = '@Url.Action("CheckifanyCartEntryExist", "Inventory")';
    var Inventory_DeletetoSeesionBinReplanishSingle = '@Url.Action("DeletetoSeesionBinReplanishSingle", "Inventory")';
    var Inventory_LoadManufaturerofItem = '@Url.Action("LoadManufaturerofItem", "Inventory")';
    var Inventory_SavetoSeesionItemManufacture = '@Url.Action("SavetoSeesionItemManufacture", "Inventory")';
    var Inventory_DeletetoSeesionItemManufactureSingle = '@Url.Action("DeletetoSeesionItemManufactureSingle", "Inventory")';
    var Inventory_checkInventoryclassification = '@Url.Action("checkInventoryclassification", "Inventory")';
    var Inventory_LoadSupplierofItem = '@Url.Action("LoadSupplierofItem", "Inventory")';
    var Inventory_SavetoSeesionItemSupplier = '@Url.Action("SavetoSeesionItemSupplier", "Inventory")';
    var Inventory_DeletetoSeesionItemSupplierSingle = '@Url.Action("DeletetoSeesionItemSupplierSingle", "Inventory")';
    var MethodOfValuingInventory = '@ViewBag.MethodOfValuingInventory';
    var menufURL = '@menufURL';
    var supURL = '@supURL';
    var Master_UnitCreate = '@Url.Action("UnitCreate", "Master")';
    var Master_CategoryCreate = '@Url.Action("CategoryCreate", "Master")';
    var Master_BinCreate = '@Url.Action("BinCreate", "Master")';
    var Master_CostUOMCreate = '@Url.Action("CostUOMCreate", "Master")';
    var Master_UnitCreate = '@Url.Action("UnitCreate", "Master", new { isforbom = false })';
    var Master_InventoryClassificationCreate = '@Url.Action("InventoryClassificationCreate", "Master", new { isforbom = false })';
</script>
<script src="@Url.Content("~/Scripts/PageScripts/ItemDetails.js")" type="text/javascript"></script>