@model InventoryCountDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
<script type="text/javascript" src="@Url.Content("~/Scripts/SiteScripts.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>
<script type='text/javascript' src="@Url.Content("~/Scripts/jquery.watermark.js")"></script>
<div class="userHead">
    @{             
        bool isUpdate;
        bool isInsert;
        if (ViewBag.ViewOnly == true)
        {
            isUpdate = false;
            isInsert = false;
        }
        else
        {
            isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Count, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
            isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Count, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        }
        if (Model != null && Model.ID > 0 && ((Model.IsArchived) || (Model.IsDeleted)))
        {
            isUpdate = false;
            isInsert = false;
        }
    }
    @using (Ajax.BeginForm("SaveInventoryCount", "Inventory", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmInventoryCount" }))
    {               
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)   
        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
        @Html.HiddenFor(model => model.GUID, new { id = "hiddenGUID" })
        if (Model.ID != 0)
        { 
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.ReceivedOnDateWeb)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    : <span>@(Model.ReceivedOnDate)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>        
        }
        <div class="mainForm">
            <div class="editorForm">
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CountName)<em>*</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.CountName, new { @class = "text-box", maxlength = 256 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.CountName)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ReleaseNumber)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ReleaseNumber, new { id = "txtReleaseNumber", @class = "text-box", @style = "background:white", maxlength = 255, @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.ReleaseNumber)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CountItemDescription)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.CountItemDescription, new { id = "txtDescription", @class = "text-box", maxlength = 1024 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.CountItemDescription)</span>
                        </div>
                    </li>
                    <li style="border-right: none;">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CountDate)<em>*</em>
                        </div>
                        @if (Model != null && Model.CountType.ToLower() == "c")
                        {
                            
                            @Html.TextBoxFor(model => model.CountDate, "{0:MM/dd/yyyy}", new { @disabled = "disabled", @class = "text-box", @readonly = "readonly", @style = "background:white", maxlength = 128 })    
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.CountDate, "{0:MM/dd/yyyy}", new { @class = "text-box", @readonly = "readonly", @style = "background:white", maxlength = 128 })
                        }
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.CountDate)</span>
                    </li>
                   @* <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        </div>
                    </li>
                    @if (Model.ID > 0)
                    {
                        <li>
                            <div class="BtnBlockform">
                                @if (Model != null && Model.CountType.ToLower() != "c")
                                {
                                    <input type="button" value="@eTurns.DTO.Resources.ResCommon.AddNew" id="btnAddNewItem" class="CreateBtn" style="float: left; margin-left: 20px;" />
                                }
                            </div>
                        </li>
                    }*@
                </ul>
            </div>
            <div class="editorForm padRightNone">
                <ul>
                    @Html.Partial("UDFLayout", new eTurns.DTO.ResInventoryCount())
                </ul>
            </div>
        </div>
    }
</div>
<div id="WOLineItemsHistory">
</div>
<script type="text/javascript">
    var HinstoryID = '@Model.HistoryID';
    $(document).ready(function () {
        CallThisFunctionFromModel('success');
    });

    function CallThisFunctionFromModel(msg) {
        if (msg == 'success') {
            $('#DivLoading').show();
            $('#WOLineItemsHistory').empty();
            var url = '@Url.Action("GetCountLineItemsHistory")'; // + '?orderID=' + OrderID;
            $.get(url, { 'HistoryID': HinstoryID }, function (data) {
                $('#WOLineItemsHistory').html(data);
                $('#DivLoading').hide();
            });
        }
        else if (json.Status == 'fail') {
            alert(json.Message);
            return false;
        }
    }

    disableControls('frmMaterialStaging');
    $('#btnCancelInHistory').removeAttr('disabled');
    $('#btnCancelInHistory').unbind('click');
    $('#btnCancelInHistory').click(function (e) {
        $('#divWOLineItemHistory').dialog('close');
    });
    
</script>
