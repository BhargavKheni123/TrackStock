@model InventoryCountDTO
@{
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowLocationCombo = true, ShowSelectAll = true, ShowApplyButton = false, DisplaySaveButton = true, DisplayUDFButton = true, UDFSetupFor = "CountLineItems", DisplaySettings = false, DisplayColumnSetupButton = true, DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = true, ColumnSetupFor = "GetIcLineItems" + Model.ID };
    bool IsAppliedCount = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Allowapplyoncounts);

    string ViewNewCountApplyButtons = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["ViewNewCountApplyButtons"]);
    if (string.IsNullOrWhiteSpace(ViewNewCountApplyButtons))
    {
        ViewNewCountApplyButtons = "no";
    }
}
<div class="userListingWrapper">
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99.5%">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search</span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="MSLItem_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_MSLItem_filter" />
                        </a>
                    </div>
                </div>
                <input type="button" id="btnDiv" value="Div" style="visibility: hidden" />
            </div>
            @Html.QuickListItemsGridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Count)
            <div class="userContent" style="width: 99% !important; margin-left: 5px !important;
                float: left;">
                @Html.HiddenFor(model => model.CountType)
                <table id="CountLineItem@(Model.ID)" class="display">
                    <thead>
                        <tr>
                            <th>
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.CountCustomerOwnedQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.CountConsignedQuantityEntry
                            </th>
                            @*<th>
                                    @eTurns.DTO.ResInventoryCountDetail.CusOwnedDifference
                                </th>
                                <th>
                                    @eTurns.DTO.ResInventoryCountDetail.ConsignedDifference
                                </th>*@
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.ItemNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.BinNumber
                            </th>
                            @*<th>
                                    @eTurns.DTO.ResInventoryCountDetail.PrevCustOwnedQuantity
                                </th>
                                <th>
                                    @eTurns.DTO.ResInventoryCountDetail.PrevConsignedQuantity
                                </th>*@
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.CountLineItemDescription
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.IsApplied
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.ItemTypeCategory
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryCountDetail.IsStagingLocationCount
                            </th>
                            @*@Html.RenderColumnsHeader("InventoryCountLineItem", typeof(eTurns.DTO.ResInventoryCountDetail))*@
                            @Html.RenderColumnsHeader("PullMaster", typeof(eTurns.DTO.ResPullMaster))
                            @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster), "Item")
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div class="BtnBlockform">
                    <input type="button" value="@eTurns.DTO.Resources.ResCommon.ApplyAll" id="btnApplyAll" class="CreateBtn" style="float: left; margin-left: 20px;" />
                </div>
                <div class="dialog" id="ApplyCountErrorDialog" style="display: none; width: 470px;">
                    <div class="inner" style="width: 470px;">
                        <p class="text" id="ApplyCountErrorMSG" style="text-align: left; padding-left: 10px;">
                        </p>
                        <p class="text btnA" style="text-align: center; padding-left: 10px;">
                            <a href="javascript:void(0)" class="no" onclick="javascript:return closeErrorDialog()">
                                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
                            </a>
                        </p>
                    </div>
                </div>
                <div class="dialog" id="ApplyCountInfoDialog" style="display: none; width: 470px;">
                    <div class="inner" style="width: 470px;">
                        <p class="text" id="ApplyCountMSG" style="text-align: left; padding-left: 10px;">
                        </p>
                        <p class="text btnA" style="text-align: center; padding-left: 10px;">
                            <a href="javascript:void(0)" class="no" onclick="closeFromOk()">
                                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
                            </a>
                        </p>
                    </div>
                </div>
                <div class="dialog" id="ApplyCountProcessing" style="display: none;">
                    <div class="inner">
                        <p class="text" id="ApplyCountGWait" style="text-align: left; padding-left: 10px;">
                            <b style="color: Red;">@*Kindly wait, Apply count effect is going on.....*@ 
                            @eTurns.DTO.Resources.ResMessage.PleaseWaitTransGoingOn
                            </b>
                        </p>
                        <p class="text" id="ApplyCountGWaitImg" style="text-align: center; padding-left: 10px;">
                            <img src="@Url.Content("~/Content/images/ajax.gif")" alt="loding" />
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="dialog" id="mdlMSLIYesNo" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.DeleteConfirm
        </p>
        <a href="JavaScript:void{}" id="btnMSLIYes" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no" onclick="closeConfirmModal()">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div id="DivCountApplyPopup">
</div>
@*@if (false)
    {
        <script src="../../Scripts/jquery-1.9.1-vsdoc.js" type="text/javascript"></script>
    }*@
<script type="text/javascript">
    var CountLineItemDataTable = 'CountLineItem' + '@Model.ID';
    var ColumnObject = new Array();
    var oTableMSItem;
    var IsDeleteKLIPopupOpen = false;
    var AllowKLIDeletePopup = true;
    var anOpenMS = [];
    var ApplyAllCountErrorMessage = "";
    var FromApplyAll = false;
    var errorIndex = 0;
    var TotalRowSelectedForApplyCount = 0;
    var ApplyProcessedRowCount = 0;
    var PosArr = new Array();
    var selectedRows = new Array();
    var FinalErr = '';
    var objInventoryCountDetailDTO = '';
    $(document).ready(function () {

        $('form').areYouSure();
        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormatSR").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 0
        });

        $("#project-spend-limit-basic-modal-content").on("click", "#btnModelYesPSLimit", function () {
            var url = '@Url.Action("RequisitionList", "Consume")';
            url = url + '?fromPull=' + 'yes'
            window.location.href = url;
        });



        $("#actionSelectAllLI").click(function () {
            $("#" + CountLineItemDataTable).find("tbody tr").removeClass("row_selected").addClass("row_selected");
        });
        $("#" + CountLineItemDataTable).on("change", "input,select,textarea", function () {

            $(this).parent().parent().find("input[type='hidden'][name='hdnRowState']").val("1");
        });

        $("#CountLineItem@(Model.ID)").on("tap click", "tbody tr", function (e) {
            if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text" || e.target.type == "button" || e.target.type == "textarea") {
                e.stopPropagation();
            } else {
                if (IsDeleteItemPictureViewRecord)
                    $(this).parent().parent().parent().parent().parent().toggleClass('row_selected');
                else
                    $(this).toggleClass('row_selected');
                return false;
            }
        });
        if ('@IsAppliedCount' == 'True') {
            ColumnObject.push({
                mDataProp: null, bSortable: false, sClass: "read_only", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                    if (obj.aData.IsApplied) {
                        var strReturn = "<input type='button' class='CreateBtndisabled' style='float:none; padding: 2px 6px; margin-left: 5px;' value='Apply' disabled='disabled' /><input type='hidden' name='hdnRowState' value='0' />";
                        strReturn = strReturn + "<input type='hidden' name='hdnLotNumberTracking' value='" + obj.aData.LotNumberTracking + "' />";
                        strReturn = strReturn + "<input type='hidden' name='hdnSerialNumberTracking' value='" + obj.aData.SerialNumberTracking + "' />";
                        return strReturn;
                    }
                    else {
                        if ('@ViewNewCountApplyButtons' == 'yes' && (obj.aData.SerialNumberTracking == true || obj.aData.LotNumberTracking == true)) {
                            var strReturn = "<input type='button' class='CreateBtn ApplyBtn' style='float:none; padding: 2px 6px; margin-left: 5px;' value='Apply' onclick='ApplyOnSingleItemNewFlow(this);' /><input type='hidden' name='hdnRowState' value='0' />";
                            strReturn = strReturn + "<input type='hidden' name='hdnLotNumberTracking' value='" + obj.aData.LotNumberTracking + "' />";
                            strReturn = strReturn + "<input type='hidden' name='hdnSerialNumberTracking' value='" + obj.aData.SerialNumberTracking + "' />";
                            return strReturn;
                        }
                        else {
                            var strReturn = "<input type='button' class='CreateBtn ApplyBtn' style='float:none; padding: 2px 6px; margin-left: 5px;' value='Apply' onclick='ApplyOnSingleItem(this);' /><input type='hidden' name='hdnRowState' value='0' />";
                            strReturn = strReturn + "<input type='hidden' name='hdnLotNumberTracking' value='" + obj.aData.LotNumberTracking + "' />";
                            strReturn = strReturn + "<input type='hidden' name='hdnSerialNumberTracking' value='" + obj.aData.SerialNumberTracking + "' />";
                            return strReturn;
                        }
                    }

                }
            });
        }
        else {
            ColumnObject.push({
                mDataProp: null, bSortable: false, sClass: "read_only", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                    var strReturn = "<input type='button' class='CreateBtndisabled' style='float:none; padding: 2px 6px; margin-left: 5px;' value='Apply' disabled='disabled' /><input type='hidden' name='hdnRowState' value='0' />";
                    strReturn = strReturn + "<input type='hidden' name='hdnLotNumberTracking' value='" + obj.aData.LotNumberTracking + "' />";
                    strReturn = strReturn + "<input type='hidden' name='hdnSerialNumberTracking' value='" + obj.aData.SerialNumberTracking + "' />";
                    return strReturn;
                }
            });
        }
        ColumnObject.push({
            mDataProp: "CountCustomerOwnedQuantity", bSortable: false, sClass: "read_only numericalign", sDefaultContent: '', fnRender: function (obj, val) {
                if (obj.aData.IsApplied) {
                    if (obj.aData.SerialNumberTracking == true) {
                        return "<span>" + parseFloat(obj.aData.CountCustomerOwnedQuantity).toFixed(0) + "</span><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                    else {
                        return "<span>" + parseFloat(obj.aData.CountCustomerOwnedQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + "</span><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                }
                else {
                    //                return "<input type='text' class='text-boxinner' onchange='CustownedCount(this);' style='width:90%;' name='txtCountCOQty' value='" + obj.aData.CountCustomerOwnedQuantity + "' class='text-boxinner' />
                    if (obj.aData.SerialNumberTracking == true) {
                        return "<input type='text' value='" + obj.aData.CountCustomerOwnedQuantity + "' class='numericinput text-boxinner numericsonly'  maxlength='10' onblur='CustownedCountLI(this);' name='txtCountConQty' style='width:90%;' /><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                    else {
                        return "<input type='text' value='" + obj.aData.CountCustomerOwnedQuantity + "' class='numericinput text-boxinner numericsonly' maxlength='10' onblur='CustownedCountLI(this);' name='txtCountConQty' style='width:90%;' /><span style='display:none;' id='spnUDF1'>" + obj.aData.UDF1 + "</span><span style='display:none;' id='spnUDF2'>" + obj.aData.UDF2 + "</span><span style='display:none;' id='spnUDF3'>" + obj.aData.UDF3 + "</span><span style='display:none;' id='spnUDF4'>" + obj.aData.UDF4 + "</span><span style='display:none;' id='spnUDF5'>" + obj.aData.UDF5 + "</span>";
                    }
                }
            }
        });

        ColumnObject.push({
            mDataProp: "CountConsignedQuantity", bSortable: false, sClass: "read_only numericalign", sDefaultContent: '', fnRender: function (obj, val) {
                if (obj.aData.IsApplied) {
                    if (obj.aData.SerialNumberTracking == true) {
                        return "<span>" + obj.aData.CountConsignedQuantity + "</span>";
                    }
                    else {
                        return "<span>" + obj.aData.CountConsignedQuantity + "</span>";
                    }
                }
                else {
                    if (obj.aData.Consignment == true) {
                        if (obj.aData.SerialNumberTracking == true) {
                            return "<input type='text' value='" + obj.aData.CountConsignedQuantity + "' class='numericinput text-boxinner numericsonly' maxlength='10' onblur='ConsignedCountLI(this);' name='txtCountConQty' style='width:90%;' />";
                        }
                        else {
                            return "<input type='text' value='" + obj.aData.CountConsignedQuantity + "'  maxlength='10' class='numericinput text-boxinner numericsonly' onblur='ConsignedCountLI(this);' name='txtCountConQty' style='width:90%;' />";
                        }
                    }
                    else {
                        if (obj.aData.SerialNumberTracking == true) {
                            return "<input type='text' readonly='readonly' value='NA' class='numericinput text-boxinner numericsonly disableBack'  maxlength='10' onblur='ConsignedCountLI(this);' name='txtCountConQty' style='width:90%;' />";
                        }
                        else {
                            return "<input type='text' readonly='readonly' value='NA' class='numericinput text-boxinner numericsonly disableBack'  maxlength='10' onblur='ConsignedCountLI(this);' name='txtCountConQty' style='width:90%;' />";
                        }
                    }

                    //return "<input type='text' class='text-boxinner' style='width:90%;' onchange='ConsignedCount(this);' name='txtCountConQty' value='" + obj.aData.CountConsignedQuantity + "' />";
                }
            }
        });

        //ColumnObject.push({
        //    mDataProp: "CusOwnedDifference", sClass: "read_only", sClass: "read_only numericalign", sDefaultContent: '', fnRender: function (obj, val) {
        //        return "<span name='spnCusOwnedDifference'>" + obj.aData.CusOwnedDifference + "</span>";
        //    }
        //});
        //ColumnObject.push({
        //    mDataProp: "ConsignedDifference", sClass: "read_only", sClass: "read_only numericalign", sDefaultContent: '', fnRender: function (obj, val) {
        //        return "<span name='spnConsignedDifference'>" + obj.aData.ConsignedDifference + "</span>";
        //    }
        //});
        ColumnObject.push({ mDataProp: "ItemNumber", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "BinNumber", bSortable: true, sClass: "read_only" });
        //ColumnObject.push({
        //    mDataProp: "CustomerOwnedQuantity", sClass: "read_only", sClass: "read_only numericalign", sDefaultContent: '', fnRender: function (obj, val) {
        //        if (obj.aData.SerialNumberTracking == true) {
        //            return "<span name='spnCustomerOwnedQuantity'>" + parseFloat(obj.aData.CustomerOwnedQuantity).toFixed(0) + "</span>";
        //        }
        //        else {
        //            return "<span name='spnCustomerOwnedQuantity'>" + parseFloat(obj.aData.CustomerOwnedQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + "</span>";
        //        }
        //    }
        //});
        //ColumnObject.push({
        //    mDataProp: "ConsignedQuantity", sClass: "read_only numericalign", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
        //        if (obj.aData.SerialNumberTracking == true) {
        //            return "<span name='spnConsignedQuantity'>" + parseFloat(obj.aData.ConsignedQuantity).toFixed(0) + "</span>";
        //        }
        //        else {
        //            return "<span name='spnConsignedQuantity'>" + parseFloat(obj.aData.ConsignedQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + "</span>";
        //        }
        //    }
        //});


        ColumnObject.push({
            mDataProp: "CountLineItemDescription", sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                return "<textarea name='txtCountLineItemDescription' onchange='DescriptionChnagesLI(this);' maxlength='1024' style='width:90%;' class='text-boxinner' cols='20'>" + obj.aData.CountLineItemDescription + "</textarea>";
            }
        });


        ColumnObject.push({ mDataProp: "IsApplied", sClass: "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } });
        ColumnObject.push({ mDataProp: "ItemType", sClass: "read_only", "fnRender": function (obj, val) { if (val == 1) return "Item"; else if (val == 3) { return "Kit"; } else if (val == 4) { return "Labor"; } } });
        ColumnObject.push({ mDataProp: "IsStagingLocationCount", sClass: "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } });

        ColumnObject.push(@Html.RenderColumnsArrayEditableObject("PullMaster", false, isUDFOrderRequire: true));

        ColumnObject.push(@(Html.RenderColumnsArray("ItemMaster", false,"Item")))


        oTableMSItem = $('#' + CountLineItemDataTable).dataTable({
            "bJQueryUI": true,
            "sScrollX": "100%",
            "bScrollCollapse": true,
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>',
            "aaSorting": [[1, "asc"]],
            "oColReorder": {},
            "bAutoWidth": true,
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "bServerSide": true,
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'CountLineItem' },
                    "async": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": "/Master/LoadGridState",
                    "type": "POST",
                    data: { ListName: 'CountLineItem' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "sAjaxSource": '@Url.Content("~/Inventory/GetCountLineItems")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                aoData.push({ "name": "IcGuid", "value": '@Model.GUID' });
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        SetUDFSelectedCountLines(oSettings);
                        if ($("#MSLItem_filter").val() != '') {
                            $('#MstagingLineItem@(Model.ID) td').highlight($("#MSLItem_filter").val());
                        }

                        $(".text-boxQuantityFormat").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
                        });
                        $(".text-boxQuantityFormatSR").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: 0
                        });

                        UDFfillEditableOptionsForGrid();
                    }
                })
            },
            "aoColumns": ColumnObject
        }).makeEditable({
            fnShowError: function (errorText, action) {
            },
            sUpdateURL: function (value, settings) {

            }
        });
        $('.DTTT_container').css('z-index', '-1');

        $('#btnblock').css({ 'margin-right': '45px' });


        $("#" + CountLineItemDataTable).on("click", "td.control", function (event) {
            var nTr = this.parentNode;
            var i = $.inArray(nTr, anOpenMS);

            if (i === -1) {
                $('img', this).attr('src', sImageUrl + "drildown_close.jpg");
                oTableMSItem.fnOpen(nTr, fnFormatDetailsLI(oTableMSItem, nTr), '');
                anOpenMS.push(nTr);
            }
            else {
                $('img', this).attr('src', sImageUrl + "drildown_open.jpg");
                oTableMSItem.fnClose(nTr);
                anOpenMS.splice(i, 1);
            }
        });

        $('#deleteRows1').click(function () {
            var tbl = $("#" + CountLineItemDataTable).dataTable();
            var anSelected = fnGetSelected1(tbl);
            var stringIDs = "";
            for (var i = 0; i <= anSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anSelected[i]).find("input[type='hidden'][name='hdnitmID']").val() + "_" + $(anSelected[i]).find("input[type='hidden'][name='hdnStagBinID']").val() + ",";
            }
            if (anSelected.length !== 0) {
                $('#mdlMSLIYesNo').modal();
                IsDeleteKLIPopupOpen = true;
            }

        });

        $("#btnMSLIYes").click(function () {
            //
            var tbl = $("#" + CountLineItemDataTable).dataTable();
            var anSelected = fnGetSelected1(tbl);
            var stringIDs = "";
            var stringGUIDs = "";
            for (var i = 0; i <= anSelected.length - 1; i++) {
                var aData = oTableMSItem.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + ",";
                stringGUIDs = stringGUIDs + aData.GUID + ",";
            }
            if (anSelected.length !== 0) {
                $.ajax({
                    url: '@Url.Content("~/Inventory/DeleteCountLineItems")',
                    type: "POST",
                    data: { ids: stringIDs, guids: stringGUIDs, CountGUId: '@Model.GUID' },
                    success: function (response) {

                        if (response.Status == "ok") {
                            for (var i = 0; i <= anSelected.length - 1; i++) {
                                tbl.fnDeleteRow(anSelected[i]);
                            }
                            if (anSelected.length > 0) {
                                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("@ResCommon.RecordDeletedSuccessfully".replace("{0}","(" + anSelected.length + ")"));
                            }
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
                    },
                    error: function (response) {
                        //
                    }
                });
                QLcloseModal();
                IsDeleteKLIPopupOpen = false;
            }
        });

        $("#DivCountApplyPopup").dialog({
            autoOpen: false,
            show: "blind",
            hide: "explode",
            height: 700,
            title: "Count Apply Details",
            width: 900,
            modal: true,
            open: function () {
            },
            beforeClose: function () {
            },
            close: function () {
                //$('.ui-widget-overlay').css('position', 'absolute');
                //IsRefreshGrid = true;
                $('#DivLoading').hide();
                $("#DivCountApplyPopup").empty();
                $('#' + CountLineItemDataTable).dataTable().fnStandingRedraw();
            }
        });

    });

    function ApplyOnSingleItem(btn) {        
        //        ApplyCountToSingleItem(btn);
        ApplyCountToSingleItemNew(btn);
    }

    function ApplyOnSingleItemNewFlow(btnobj) {
         
        $('#DivLoading').show();

        var aaritems = new Array();
        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';

        var aPos = oTableMSItem.fnGetPosition($(btnobj).parent()[0]);
        var aData = oTableMSItem.fnGetData(aPos[0]);
        var currentId = aData.ID;
        var tbrow = $(btnobj).parent().parent();
        if ($(tbrow).find('#UDF1') != null) {
            if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF1 = $(tbrow).find('#UDF1').val();
            }
        }

        if ($(tbrow).find('#UDF2') != null) {
            if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF2 = $(tbrow).find('#UDF2').val();
            }
        }

        if ($(tbrow).find('#UDF3') != null) {
            if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF3 = $(tbrow).find('#UDF3').val();
            }
        }

        if ($(tbrow).find('#UDF4') != null) {
            if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF4 = $(tbrow).find('#UDF4').val();
            }
        }

        if ($(tbrow).find('#UDF5') != null) {
            if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF5 = $(tbrow).find('#UDF5').val();
            }
        }

        var isstageLoca = false;
        if (aData.IsStagingLocationCount == "Yes") {
            isstageLoca = true;
        }


        if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
            aaritems.push({
                ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry
            , CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry)
            , UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true
            , IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, ItemNumber: aData.ItemNumber, LotNumberTracking: aData.LotNumberTracking
            , SerialNumberTracking: aData.SerialNumberTracking, BinNumber: aData.BinNumber, CountType: escape($("#CountType").val())
            });
        }
        else {
            aaritems.push({
                ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry
            , CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry)
            , UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false
            , IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, ItemNumber: aData.ItemNumber, LotNumberTracking: aData.LotNumberTracking
            , SerialNumberTracking: aData.SerialNumberTracking, BinNumber: aData.BinNumber, CountType: escape($("#CountType").val())
            });
        }

        $.ajax({
            type: "POST",
            url: '@Url.Action("OpenApplyCountOnLineItemsPopup", "Inventory")',
            contentType: 'application/json',
            dataType: 'html',
            data: JSON.stringify(aaritems),
            success: function (RetData) {
                $("#DivCountApplyPopup").html("");
                $("#DivCountApplyPopup").html(RetData);

                $("#DivCountApplyPopup").dialog('open');
                $('#DivLoading').hide();
            },
            error: function (err) {
                alert(err);
                $('#DivLoading').hide();
            }
        });

    }

    function closeModalPSLimit() {
        $.modal.impl.close();
    }

    function ApplyCountToSingleItemNew(btnobj) {
         
        var callIsApplied = true;
        var errorId = new Array(); var errorIndex = 1;
        ApplyAllCountErrorMessage = '';
        $('#ApplyCountProcessing').modal();
        $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

        var aaritems = new Array();
        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';

        var aPos = oTableMSItem.fnGetPosition($(btnobj).parent()[0]);
        var aData = oTableMSItem.fnGetData(aPos[0]);
        var currentId = aData.ID;
        var tbrow = $(btnobj).parent().parent();
        if ($(tbrow).find('#UDF1') != null) {
            if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF1 = $(tbrow).find('#UDF1').val();
            }
        }

        if ($(tbrow).find('#UDF2') != null) {
            if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF2 = $(tbrow).find('#UDF2').val();
            }
        }

        if ($(tbrow).find('#UDF3') != null) {
            if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF3 = $(tbrow).find('#UDF3').val();
            }
        }

        if ($(tbrow).find('#UDF4') != null) {
            if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF4 = $(tbrow).find('#UDF4').val();
            }
        }

        if ($(tbrow).find('#UDF5') != null) {
            if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF5 = $(tbrow).find('#UDF5').val();
            }
        }

        if (vUDF1 == null || vUDF1 == undefined) {
            vUDF1 = "";
        }
        if (vUDF2 == null || vUDF2 == undefined) {
            vUDF2 = "";
        }
        if (vUDF3 == null || vUDF3 == undefined) {
            vUDF3 = "";
        }
        if (vUDF4 == null || vUDF4 == undefined) {
            vUDF4 = "";
        }
        if (vUDF5 == null || vUDF5 == undefined) {
            vUDF5 = "";
        }

        var isstageLoca = false;
        if (aData.IsStagingLocationCount == "Yes") {
            isstageLoca = true;
        }
        if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
            aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true });
        }
        else {
            aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true });
        }
        if (aaritems.length > 0) {

            $.ajax({
                type: "POST",
                url: '@Url.Action("ApplyCountOnLineItemsNew", "Inventory")',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(aaritems),
                "async": false,
                success: function (responce) {
                    objInventoryCountDetailDTO = responce.CurrentObj;
                    var arrResponce = responce.Status;
                    var arrResult = arrResponce.split(',');
                    var Status1 = '';
                    var Status2 = '';
                    var Status1Proceed = false;
                    var Status2Proceed = false;

                    if (arrResult.length > 1) {
                        Status1 = arrResult[0];
                        Status2 = arrResult[1];

                        if (Status1 == "pull") {
                            Status1Proceed = true;
                            var PullCreditType = "pull";
                            closeCountInfoModel();
                            if ($("#CountType").val() == "A") {
                                PullCreditType = "adjustpull";
                            }

                            $.ajax({
                                "url": '@Url.Content("~/Pull/UpdatePullDataForCountNew")',
                                data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.ConsignedDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.ConsignedDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID, IsConsinedPull: true, CountType: $("select#dlCountType").val() },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {
                                    $('div#DivLoading').hide();

                                    if (response.Status == "ok") {
                                        if (response.LocationMSG != "") {
                                            //                                            if (response.PSLimitExceed) {
                                            //                                                $("#PSPlimit").text(response.LocationMSG + " " + "do you want to create new requisition for the same ?");
                                            //                                                $('#project-spend-limit-basic-modal-content').modal();
                                            //                                            }
                                            //                                            else {
                                            ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.locationMSG + " </b>";
                                            //alert(response.LocationMSG);
                                            // }
                                        }
                                        UDFInsertNewForGrid(tbrow);
                                    }
                                    else {
                                        //                                        $("#spanGlobalMessage").text(response.Message);
                                        //                                        $('div#target').fadeToggle();
                                        //                                        $("div#target").delay(2000).fadeOut(200);
                                        //                                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                                        Status1Proceed = false;
                                        ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                        errorId.push(currentId);
                                    }
                                },
                                error: function (response) {
                                    //                                    $('div#DivLoading').hide();
                                    //                                    $("#spanGlobalMessage").text(response.message);
                                    //                                    $('div#target').fadeToggle();
                                    //                                    $("div#target").delay(2000).fadeOut(200);
                                    Status1Proceed = false;
                                    ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                    errorId.push(currentId);
                                }
                            });
                        }

                        if (Status1 == "ok") {
                            Status1Proceed = true;
                        }

                        if (Status2 == "pull") {
                            Status2Proceed = true;
                            var PullCreditType = "pull";
                            closeCountInfoModel();
                            if ($("#CountType").val() == "A") {
                                PullCreditType = "adjustpull";
                            }

                            $.ajax({
                                "url": '@Url.Content("~/Pull/UpdatePullDataForCountNew")',
                                data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.CusOwnedDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.CusOwnedDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID, IsConsinedPull: false, CountType: $("select#dlCountType").val() },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {
                                    $('div#DivLoading').hide();

                                    if (response.Status == "ok") {
                                        if (response.LocationMSG != "") {
                                            //                                            if (response.PSLimitExceed) {
                                            //                                                $("#PSPlimit").text(response.LocationMSG + " " + "do you want to create new requisition for the same ?");
                                            //                                                $('#project-spend-limit-basic-modal-content').modal();
                                            //                                            }
                                            //                                            else {
                                            ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.locationMSG + " </b>";
                                            //alert(response.LocationMSG);
                                            //}
                                        }
                                        UDFInsertNewForGrid(tbrow);
                                    }
                                    else {
                                        //                                        $("#spanGlobalMessage").text(response.Message);
                                        //                                        $('div#target').fadeToggle();
                                        //                                        $("div#target").delay(2000).fadeOut(200);
                                        errorIndex = errorIndex + 1;
                                        //$("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                                        ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                        Status2Proceed = false;
                                        errorId.push(currentId);
                                    }
                                },
                                error: function (response) {
                                    //                                    $('div#DivLoading').hide();
                                    //                                    $("#spanGlobalMessage").text(response.message);
                                    //                                    $('div#target').fadeToggle();
                                    //                                    $("div#target").delay(2000).fadeOut(200);
                                    errorIndex = errorIndex + 1;
                                    Status2Proceed = false;
                                    ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                    errorId.push(currentId);
                                }
                            });
                        }
                        if (Status2 == "ok") {
                            Status2Proceed = true;
                        }
                        if ((Status1 == "credit") || (Status2 == "credit") || (Status1 == "credit" && Status2 == "credit")) {
                            callIsApplied = false;
                            if (Status1 == "credit") {
                                Status1Proceed = true;
                            }
                            if (Status2 == "credit") {
                                Status2Proceed = true;
                            }

                            // open credit popup
                            var itemId = responce.CurrentObj.ItemGUID;
                            var itemType = responce.CurrentObj.ItemType;
                            var BinId = responce.CurrentObj.BinID;
                            var TotalCountQty = responce.CurrentObj.CusOwnedDifference;
                            var TotalCountQty1 = responce.CurrentObj.ConsignedDifference;
                            var CountedConsQty = responce.CurrentObj.CountConsignedQuantity;//Value of Count user input Consinged Qty
                            var CountedCustQty = responce.CurrentObj.CountCustomerOwnedQuantity;//Value Of Count User input CustomerOwned Qty
                            var ActualConsQty = responce.CurrentObj.ConsignedQuantity;//Actual Item's Consined Qty Value
                            var ActualCustQty = responce.CurrentObj.CustomerOwnedQuantity;//Actual Item's Customer Qty Value
                            var idtype = itemId + '#' + itemType.toString() + '#' + ' ' + ' #' + BinId.toString() + "#frompullcredit_forcount" + "#" + responce.CurrentObj.TotalDifference + "#" + responce.CurrentObj.GUID + "#" + TotalCountQty + "#" + TotalCountQty1 + "#" + CountedConsQty + "#" + CountedCustQty + "#" + ActualConsQty + "#" + ActualCustQty + "#" + Status1Proceed + "#" + Status2Proceed; // + "#" + response.CurrentObj.CountConsignedQuantity;
                            closeCountInfoModel();
                            var PullCreditType = "credit";
                            if ($("#CountType").val() == "A") {
                                PullCreditType = "adjcredit";
                            }
                            idtype = idtype + '#' + PullCreditType;
                            $('div#DivLoading').show();
                            $('#LocationDetails').load('../Inventory/LocationDetailsNew', { ItemID_ItemType: idtype }, function () {

                                $('#LocationDetails').dialog('open');
                                $('div#DivLoading').hide();
                            });
                        }
                        if ((Status1 == "creditms") || (Status2 == "creditms") || (Status1 == "creditms" && Status2 == "creditms")) {
                            // open credit MS popup
                            callIsApplied = false;
                            var itemId = aData.ItemGUID;
                            var itemType = aData.ItemType;

                            var idtype = itemId + '%23' + itemType; //+ '%23' +  'frompullcreditMS' ;
                            var PullCreditType = "MS Credit";
                            if ($("#CountType").val() == "A") {
                                PullCreditType = "AdMSCredit";
                            }
                            idtype = idtype + '%23' + PullCreditType;
                            closeCountInfoModel();
                            $('div#DivLoading').show();
                            $('#LocationDetails').load('../Inventory/LocationDetailsMS?ItemID_ItemType=' + idtype, function () {

                                $('#LocationDetails').dialog('open');
                                $('div#DivLoading').hide();
                                IsRefreshGrid = true;
                            });
                            // return false;

                        }
                        if (ApplyAllCountErrorMessage != '') {
                            FinalErr = "<b>Please select row </b>";
                            FinalErr = FinalErr + ApplyAllCountErrorMessage;
                            $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(FinalErr);
                            closeCountInfoModel();
                            $('#ApplyCountInfoDialog').modal();
                        }
                        else if (Status1Proceed == true && Status2Proceed == true && callIsApplied == true) {
                            closeCountInfoModel();
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            $("#spanGlobalMessage").html("@ResInventoryCountDetail.AllCountAppliedonItems".replace("{0}",""));
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                            ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                            PostApplyAction(responce.CurrentObj);
                        }
                    }
                },
                error: function (err) {
                    closeCountInfoModel();
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
            });
        }

        $.each(errorId, function (index, value) {
            $.ajax({
                "url": '@Url.Content("~/Inventory/UnApplieIDbyID")',
                data: { ID: value, IsApplied: false },
                //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                "async": false,
                cache: false,
                "dataType": "json",
                success: function (response) {
                }
            });
        });
    }
    function ApplyCountToSingleItem(btnobj) {
         
        $('#ApplyCountProcessing').modal();
        $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

        var aaritems = new Array();
        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';

        var aPos = oTableMSItem.fnGetPosition($(btnobj).parent()[0]);
        var aData = oTableMSItem.fnGetData(aPos[0]);
        var tbrow = $(btnobj).parent().parent();
        if ($(tbrow).find('#UDF1') != null) {
            if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF1 = $(tbrow).find('#UDF1').val();
            }
        }

        if ($(tbrow).find('#UDF2') != null) {
            if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF2 = $(tbrow).find('#UDF2').val();
            }
        }

        if ($(tbrow).find('#UDF3') != null) {
            if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF3 = $(tbrow).find('#UDF3').val();
            }
        }

        if ($(tbrow).find('#UDF4') != null) {
            if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF4 = $(tbrow).find('#UDF4').val();
            }
        }

        if ($(tbrow).find('#UDF5') != null) {
            if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
            }
            else {
                vUDF5 = $(tbrow).find('#UDF5').val();
            }
        }


        if (vUDF1 == null || vUDF1 == undefined) {
            vUDF1 = "";
        }
        if (vUDF2 == null || vUDF2 == undefined) {
            vUDF2 = "";
        }
        if (vUDF3 == null || vUDF3 == undefined) {
            vUDF3 = "";
        }
        if (vUDF4 == null || vUDF4 == undefined) {
            vUDF4 = "";
        }
        if (vUDF5 == null || vUDF5 == undefined) {
            vUDF5 = "";
        }


        var isstageLoca = false;
        if (aData.IsStagingLocationCount == "Yes") {
            isstageLoca = true;
        }
        if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
            aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true });
        }
        else {
            aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true });
        }



        if (aaritems.length > 0) {

            $.ajax({
                type: "POST",
                url: '@Url.Action("ApplyCountOnLineItemsNew", "Inventory")',
                //                url: '@Url.Action("ApplyCountOnLineItems", "Inventory")',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(aaritems),
                "async": false,
                success: function (responce) {
                    var arrResponce = responce.Status;
                    var arrResult = arrResponce.split(',');
                    for (var i1 = 0; i1 < arrResult.length; i1++) {
                        var StatusType = '';
                        StatusType = arrResult[i1];
                        // if (responce.Status == "pull") {
                        if (StatusType == "pull") {
                            closeCountInfoModel();
                            // call the update pull

                            ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////START
                            var PullCreditType = "pull";
                            if ($("#CountType").val() == "A") {
                                PullCreditType = "adjustpull";
                            }
                            $.ajax({
                                "url": '@Url.Content("~/Pull/UpdatePullDataForCount")',
                                data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                                //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: "pull", TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: "", UDF2: "", UDF3: "", UDF4: "", UDF5: "", RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {

                                    //alert(response.Status);
                                    $('div#DivLoading').hide();
                                    if (response.Status == "ok") {
                                        if (response.LocationMSG != "") {
                                            if (response.PSLimitExceed) {
                                                // write code to redirect to requisition with confirm box
                                                $("#PSPlimit").text(response.LocationMSG + " " + "do you want to create new requisition for the same ?");
                                                $('#project-spend-limit-basic-modal-content').modal();
                                            }
                                            else {
                                                alert(response.LocationMSG);

                                            }
                                        }
                                        else {
                                            $('div#target').fadeToggle();
                                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                            $("#spanGlobalMessage").html(response.Message);
                                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                                            PostApplyAction(responce.CurrentObj);
                                        }
                                    }
                                    else {
                                        $("#spanGlobalMessage").html(response.Message);
                                        $('div#target').fadeToggle();
                                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                                    }
                                    //txxt.val(VspnDefaultPullQuantity);
                                },
                                error: function (response) {
                                    $('div#DivLoading').hide();
                                    $("#spanGlobalMessage").html(response.message);
                                    $('div#target').fadeToggle();
                                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                }
                            });
                            ///////////////////////////////////// UPDATE PULL DATA CALL//////////////////////////////////////////END
                        }
                        else if (StatusType == "credit") {
                            // open credit popup
                            var itemId = responce.CurrentObj.ItemGUID;
                            var itemType = responce.CurrentObj.ItemType;
                            var BinId = responce.CurrentObj.BinID;
                            var TotalCountQty = responce.CurrentObj.CusOwnedDifference;
                            var TotalCountQty1 = responce.CurrentObj.ConsignedDifference;
                            var CountedConsQty = responce.CurrentObj.CountConsignedQuantity;//Value of Count user input Consinged Qty
                            var CountedCustQty = responce.CurrentObj.CountCustomerOwnedQuantity;//Value Of Count User input CustomerOwned Qty
                            var ActualConsQty = responce.CurrentObj.ConsignedQuantity;//Actual Item's Consined Qty Value
                            var ActualCustQty = responce.CurrentObj.CustomerOwnedQuantity;//Actual Item's Customer Qty Value
                            var idtype = itemId + '#' + itemType.toString() + '#' + ' ' + ' #' + BinId.toString() + "#frompullcredit_forcount" + "#" + responce.CurrentObj.TotalDifference + "#" + responce.CurrentObj.GUID + "#" + TotalCountQty + "#" + TotalCountQty1 + "#" + CountedConsQty + "#" + CountedCustQty + "#" + ActualConsQty + "#" + ActualCustQty; // + "#" + response.CurrentObj.CountConsignedQuantity;
                            closeCountInfoModel();
                            //                        var idtype = itemId + '%23' + itemType + '%23' + 'frompullcredit';
                            var PullCreditType = "credit";
                            if ($("#CountType").val() == "A") {
                                PullCreditType = "adjcredit";
                            }
                            idtype = idtype + '#' + PullCreditType;
                            $('div#DivLoading').show();
                            //$('#LocationDetails').load('../Inventory/LocationDetails?ItemID_ItemType=' + idtype, function () {
                            $('#LocationDetails').load('../Inventory/LocationDetailsNew', { ItemID_ItemType: idtype }, function () {

                                $('#LocationDetails').dialog('open');
                                $('div#DivLoading').hide();
                                IsRefreshGrid = true;
                            });
                            return false;

                        }
                        else if (StatusType == "creditms") {
                            // open credit MS popup

                            var itemId = aData.ItemGUID;
                            var itemType = aData.ItemType;

                            var idtype = itemId + '%23' + itemType; //+ '%23' +  'frompullcreditMS' ;
                            var PullCreditType = "MS Credit";
                            if ($("#CountType").val() == "A") {
                                PullCreditType = "AdMSCredit";
                            }
                            idtype = idtype + '%23' + PullCreditType;
                            closeCountInfoModel();
                            $('div#DivLoading').show();
                            $('#LocationDetails').load('../Inventory/LocationDetailsMS?ItemID_ItemType=' + idtype, function () {

                                $('#LocationDetails').dialog('open');
                                $('div#DivLoading').hide();
                                IsRefreshGrid = true;
                            });
                            return false;

                        }
                        else if (StatusType == "ok") {
                            //                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("Count is applied on (" + aaritems.length + ") items successfully.");
                            //                        $('div#target').fadeToggle();
                            //                        $("div#target").delay(2000).fadeOut(200);
                            //                        oTableMSItem.fnDraw();
                            //                        PostApplyAction(responce.CurrentObj);
                            closeCountInfoModel();
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            $("#spanGlobalMessage").html("@ResInventoryCountDetail.AllCountAppliedonItems".replace("{0}",aaritems.length));
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                            ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                            PostApplyAction(responce.CurrentObj);


                        }
                        else {
                            closeCountInfoModel();
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
                    }
                },
                error: function (err) {
                    closeCountInfoModel();
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
            });
        }
    }
    function CountDifference(ID, CountConsignedQty, CountCutOwnedQty) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("UpdateCountCalculations", "Inventory")',
            contentType: 'application/json',
            dataType: 'json',
            data: "{ID:'" + ID + "',CountConsignedQty:'" + CountConsignedQty + "' , CountCutOwnedQty: '" + CountCutOwnedQty + "'}",
            success: function (responce) {

            },
            error: function (err) {
                //
                //                alert("There is some Error");
            }
        });
    }

    function PostApplyAction(objdtl) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("PostApplyAction", "Inventory")',
            contentType: 'application/json',
            dataType: 'json',
            data: JSON.stringify(objdtl),
            success: function (responce) {
                oTableMSItem.fnDraw();
            },
            error: function (responce) {

            }
        });
    }
    function CustownedCountLI(obj) {

        if (oTableMSItem != undefined) {
            var aPos = oTableMSItem.fnGetPosition($(obj).parent()[0]);
            var aData = oTableMSItem.fnGetData(aPos[0]);
            aData.CountCustomerOwnedQuantityEntry = $(obj).val();



        }
    }
    function ConsignedCountLI(obj) {

        if (oTableMSItem != undefined) {
            var aPos = oTableMSItem.fnGetPosition($(obj).parent()[0]);
            var aData = oTableMSItem.fnGetData(aPos[0]);
            aData.CountConsignedQuantityEntry = $(obj).val();
            //            $(obj).parent().parent().find("input[type='hidden'][name='hdnRowState']").val("1");
        }
    }

    function DescriptionChnagesLI(obj) {

        if (oTableMSItem != undefined) {
            var aPos = oTableMSItem.fnGetPosition($(obj).parent()[0]);
            var aData = oTableMSItem.fnGetData(aPos[0]);
            aData.CountLineItemDescriptionEntry = $(obj).val();
            //            $(obj).parent().parent().find("input[type='hidden'][name='hdnRowState']").val("1");
        }
    }
    function openLocPop(itemid) {
        var selectedStagBin = $(curobj).parent().parent().find("input[type='hidden'][name='hdnStagingBin']").val();
        if (selectedStagBin != undefined && selectedStagBin != "") {

            $('#dvItemLocations').data("data", itemid + "~" + '@Model.ID').dialog('open');
        }
    }
    //    function SetChangedData(curobj) {

    //        var aPos = oTableMSItem.fnGetPosition($(curobj).parent()[0]);
    //        var aData = oTableMSItem.fnGetData(aPos[0]);
    //        setTimeout(function () { alert(curobj.value); }, 50)
    //    }
    function CallThisFunctionFromModel(msg) {
        if (msg == 'success') {
            $("#" + CountLineItemDataTable).DataTable().fnDraw();
        }
        else if (msg.Status == 'fail') {
            alert(json.Message);
            return false;
        }
    }

    function updateMSLineItem(itmId, curobj) {
        if (itmId != undefined) {
            var aPos = $('#' + CountLineItemDataTable).dataTable().fnGetPosition($(curobj).parent()[0]);
            var aData = $('#' + CountLineItemDataTable).dataTable().fnGetData(aPos[0]);
            var msbinID = $(curobj).parent().parent().find("input[type='hidden'][name='hdnStagingBin']").val();
            var msbinName = $(curobj).parent().parent().find("input[type='text'][name='txtLineItemStagingBin']").val();
            if (msbinName != "") {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("UpdateStagingLineItem", "Inventory")',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: "{MsID:'" + parseInt('@Model.ID') + "' , ItmID: '" + itmId + "', msbinID: '" + aData.StagingBinID + "', StagingBinName: '" + msbinName + "'}",
                    success: function (retdt) {
                        $("#" + CountLineItemDataTable).DataTable().fnDraw();
                    },
                    error: function (err) {
                        //
                        alert("There is some Error");
                    }
                });
            }
            else {
                alert("Enter staging location");
            }
        }
        else {
            alert("there is some error.");
        }
    }

    //    function setnametohidden(curobj) {
    //        $(curobj).parent().find("input[type='hidden'][name='hdnStagingBinName']").val(curobj.value);

    //    }

    var NotAllowedCharCodes = [9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40];
    var bIsFilter = false;
    var timeoutsc11;

    $("#MSLItem_filter").bind("textchange", function () {
        clearTimeout(timeoutsc11);
        var self = this;
        timeoutsc11 = setTimeout(function () {
            fnFilterMS();
        }, 200);
    });

    $(".searchBlock").on({
        keydown: function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                var searchtext = $("#MSLItem_filter").val().replace(/'/g, "''");
                oTableMSItem.fnFilter(searchtext,
                                        null,
                                        null,
                                        null
                                    );
                return false;
            }
        }

    }, "#MSLItem_filter");

    $("#clear_MSLItem_filter").click(function () {
        if ($("#MSLItem_filter").val().length > 0) {
            $("#MSLItem_filter").val("");
            $("#MSLItem_filter").change();
        }
        return false;
    });

    function fnFilterMS() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#MSLItem_filter") != 'undefined' && ($("#MSLItem_filter").val().length > 2 || $("#MSLItem_filter").val().length == 0)) {
            var searchtext = $("#MSLItem_filter").val().replace(/'/g, "''");
            oTableMSItem.fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
        }
        else {
            $("#" + CountLineItemDataTable).find("td").removeHighlight();
            $("#" + CountLineItemDataTable).find("td").highlight($("#MSLItem_filter").val());
        }
    }

    $("#saveRows").click(function () {
        SaveAllClick($(this));
    });


    $("#ApplyAction").click(function () {
        ApplyCountToSelectedItems();
    });


    function ApplyCountToSelectedItems(datarow) {

        var aaritems = new Array();
        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';
        $('#' + CountLineItemDataTable).find("tbody tr.row_selected").each(function (indx, tbrow) {

            var aPos = oTableMSItem.fnGetPosition($(tbrow).find("td:first")[0]);
            var aData = oTableMSItem.fnGetData(aPos[0]);
            if ($(tbrow).find('#UDF1') != null) {
                if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF1 = $(tbrow).find('#UDF1').val();
                }
            }

            if ($(tbrow).find('#UDF2') != null) {
                if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF2 = $(tbrow).find('#UDF2').val();
                }
            }

            if ($(tbrow).find('#UDF3') != null) {
                if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF3 = $(tbrow).find('#UDF3').val();
                }
            }

            if ($(tbrow).find('#UDF4') != null) {
                if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF4 = $(tbrow).find('#UDF4').val();
                }
            }

            if ($(tbrow).find('#UDF5') != null) {
                if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF5 = $(tbrow).find('#UDF5').val();
                }
            }
            if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {

                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsOnlyFromItemUI: true });
            }
            else {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsOnlyFromItemUI: true });
            }
        });

        if (aaritems.length > 0) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("ApplyCountOnLineItemsSelected", "Inventory")',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(aaritems),
                success: function (responce) {
                    if (responce.Status == "ok") {
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("@ResInventoryCountDetail.AllCountAppliedonItems".replace("{0}",aaritems.length));
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        oTableMSItem.fnDraw();
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                },
                error: function (err) {
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
            });
        }
    }

    function SaveAllClick() {
        var aaritems = new Array();

        var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '', trimtxtValQ = '', CountLineItemDescription = '';

        $('#' + CountLineItemDataTable).find("tbody tr").each(function (indx, tbrow) {

            if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
                var aPos = oTableMSItem.fnGetPosition($(tbrow).find("td:first")[0]);
                var aData = oTableMSItem.fnGetData(aPos[0]);
                if ($(tbrow).find('#UDF1') != null) {
                    if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                        vUDF1 = $(tbrow).find('#UDF1 option:selected').text();
                    }
                    else {
                        vUDF1 = $(tbrow).find('#UDF1').val();
                    }
                }

                if ($(tbrow).find('#UDF2') != null) {
                    if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                        vUDF2 = $(tbrow).find('#UDF2 option:selected').text();
                    }
                    else {
                        vUDF2 = $(tbrow).find('#UDF2').val();
                    }
                }

                if ($(tbrow).find('#UDF3') != null) {
                    if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                        vUDF3 = $(tbrow).find('#UDF3 option:selected').text();
                    }
                    else {
                        vUDF3 = $(tbrow).find('#UDF3').val();
                    }
                }

                if ($(tbrow).find('#UDF4') != null) {
                    if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                        vUDF4 = $(tbrow).find('#UDF4 option:selected').text();
                    }
                    else {
                        vUDF4 = $(tbrow).find('#UDF4').val();
                    }
                }

                if ($(tbrow).find('#UDF5') != null) {
                    if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                        vUDF5 = $(tbrow).find('#UDF5 option:selected').text();
                    }
                    else {
                        vUDF5 = $(tbrow).find('#UDF5').val();
                    }
                }

                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), IsOnlyFromItemUI: true });
            }
        });

        if (aaritems.length > 0) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("IcLineItemsSave", "Inventory")',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(aaritems),
                success: function (responce) {

                    if (responce.Status == "ok") {
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').text("@ResCommon.RecordUpdatedSuccessfully".replace("{0}",aaritems.length));
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        oTableMSItem.fnDraw();
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    }
                },
                error: function (err) {

                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').text(responce.Message);
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
            });
        }

    }


    function SetUDFSelectedCountLines(objParams) {

        $("#" + objParams.sInstance).find("tbody").find("tr").each(function () {

            var $objUdf1 = $(this).find("#UDF1");
            var $spnUDF1 = $(this).find("#spnUDF1");
            var $objUdf2 = $(this).find("#UDF2");
            var $spnUDF2 = $(this).find("#spnUDF2");
            var $objUdf3 = $(this).find("#UDF3");
            var $spnUDF3 = $(this).find("#spnUDF3");
            var $objUdf4 = $(this).find("#UDF4");
            var $spnUDF4 = $(this).find("#spnUDF4");
            var $objUdf5 = $(this).find("#UDF5");
            var $spnUDF5 = $(this).find("#spnUDF5");

            if ($objUdf1 != undefined && $spnUDF1 != undefined) {
                if ($objUdf1.is("select")) {
                    $objUdf1.find("option").filter(function () {
                        return this.text == $spnUDF1.text();
                    }).attr('selected', true);
                }
                else if ($objUdf1.is("input[type='text']")) {
                    $objUdf1.val($spnUDF1.text());
                }
            }
            if ($objUdf2 != undefined && $spnUDF2 != undefined) {
                if ($objUdf2.is("select")) {
                    $objUdf2.find("option").filter(function () {
                        return this.text == $spnUDF2.text();
                    }).attr('selected', true);
                }
                else if ($objUdf2.is("input[type='text']")) {
                    $objUdf2.val($spnUDF2.text());
                }
            }
            if ($objUdf3 != undefined && $spnUDF3 != undefined) {
                if ($objUdf3.is("select")) {
                    $objUdf3.find("option").filter(function () {
                        return this.text == $spnUDF3.text();
                    }).attr('selected', true);
                }
                else if ($objUdf3.is("input[type='text']")) {
                    $objUdf3.val($spnUDF3.text());
                }
            }
            if ($objUdf4 != undefined && $spnUDF4 != undefined) {
                if ($objUdf4.is("select")) {
                    $objUdf4.find("option").filter(function () {
                        return this.text == $spnUDF4.text();
                    }).attr('selected', true);
                }
                else if ($objUdf4.is("input[type='text']")) {
                    $objUdf4.val($spnUDF4.text());
                }
            }

            if ($objUdf5 != undefined && $spnUDF5 != undefined) {
                if ($objUdf5.is("select")) {
                    $objUdf5.find("option").filter(function () {
                        return this.text == $spnUDF5.text();
                    }).attr('selected', true);
                }
                else if ($objUdf5.is("input[type='text']")) {
                    $objUdf5.val($spnUDF5.text());
                }
            }
        });
    }

    function fnFormatDetailsLI(oTable, nTr) {
        var oData = oTableMSItem.fnGetData(nTr);
        var sOut = '';
        var stgbinName = $(nTr).find("input[type='hidden'][name='hdnStagingBinName']").val();
        $('div#DivLoading').show();
        $.ajax({
            "url": '@Url.Content("~/Inventory/ItemLocDet")',
            data: { ItemGUID: oData.ItemGUID, MSGUID: oData.MaterialStagingGUID, StageBinId: oData.StagingBinID, staLocName: stgbinName },
            "async": false,
            cache: false,
            "dataType": "text",
            "success": function (json) {
                sOut = json;
                $('div#DivLoading').hide();
            },
            error: function (response) {

                //
            }
        });

        return sOut;
    }
    function closeConfirmModal() {
        $.modal.impl.close();
    }

    function ApplyForAllCountNew(arrrows) {
         
        $('div#DivLoading').show();
        var IscallApplied = true;
        var errorDataIDs = new Array();
        objInventoryCountDetailDTO = '';
        if (!isNaN(arrrows.length) && arrrows.length > 0) {
            $('div#DivLoading').show();
            $('#ApplyCountProcessing').modal();
            $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

            var objrow = null;
            $('div#DivLoading').show();
            if (ApplyProcessedRowCount <= arrrows.length - 1)
                tbrow = arrrows[ApplyProcessedRowCount];
            else {
                if (ApplyAllCountErrorMessage != '') {
                    FinalErr = "<b>Please select row </b>";
                    FinalErr = FinalErr + ApplyAllCountErrorMessage;
                    $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(FinalErr);
                    closeCountInfoModel();
                    $('#ApplyCountInfoDialog').modal();
                }
                else {
                    // $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html("<b style='color:green'>Count Applied successfully.</b>");
                    closeCountInfoModel();
                    // $('#ApplyCountInfoDialog').modal();
                }
                return;
            }
            $('div#DivLoading').show();
            var aaritems = new Array();
            var aData = oTableMSItem.fnGetData(tbrow);
            if ($(tbrow).find('#UDF1') != null) {
                if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF1 = $(tbrow).find('#UDF1').val();
                }
            }
            $('div#DivLoading').show();
            if ($(tbrow).find('#UDF2') != null) {
                if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF2 = $(tbrow).find('#UDF2').val();
                }
            }
            $('div#DivLoading').show();
            if ($(tbrow).find('#UDF3') != null) {
                if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF3 = $(tbrow).find('#UDF3').val();
                }
            }
            $('div#DivLoading').show();
            if ($(tbrow).find('#UDF4') != null) {
                if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF4 = $(tbrow).find('#UDF4').val();
                }
            }
            $('div#DivLoading').show();
            if ($(tbrow).find('#UDF5') != null) {
                if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF5 = $(tbrow).find('#UDF5').val();
                }
            }


            if (vUDF1 == null || vUDF1 == undefined) {
                vUDF1 = "";
            }
            if (vUDF2 == null || vUDF2 == undefined) {
                vUDF2 = "";
            }
            if (vUDF3 == null || vUDF3 == undefined) {
                vUDF3 = "";
            }
            if (vUDF4 == null || vUDF4 == undefined) {
                vUDF4 = "";
            }
            if (vUDF5 == null || vUDF5 == undefined) {
                vUDF5 = "";
            }


            var isstageLoca = false;
            if (aData.IsStagingLocationCount == "Yes") {
                isstageLoca = true;
            }
            if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true });
            }
            else {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true });
            }
            $('div#DivLoading').show();
            var BinNum = '';
            BinNum = aData.BinNumber;
            var myDate = new Date();
            var prettyDate = (myDate.getMonth() + 1) + '/' + myDate.getDate() + '/' + myDate.getFullYear();
            $('div#DivLoading').show();
            if (aaritems.length > 0) {

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ApplyCountOnLineItemsNew", "Inventory")',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(aaritems),
                    "async": false,
                    timeout: 36000000,
                    success: function (responce) {

                        $('#DivLoading').show();

                        objInventoryCountDetailDTO = responce.CurrentObj;

                        var arrResponce = responce.Status;
                        var arrResult = arrResponce.split(',');
                        var Status1 = '';
                        var Status2 = '';
                        var Status1Proceed = false;
                        var Status2Proceed = false;
                        if (arrResult.length > 1) {
                            Status1 = arrResult[0];
                            Status2 = arrResult[1];
                            //if (responce.Status == "pull") {

                            if (Status1 == "pull") {
                                var PullCreditType = "pull";
                                if ($("#CountType").val() == "A") {
                                    PullCreditType = "adjustpull";
                                }
                                $('#DivLoading').show();

                                $.ajax({
                                    "url": '@Url.Content("~/Pull/UpdatePullDataForCountNew")',
                                    data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.ConsignedDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.ConsignedDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID, IsConsinedPull: true, CountType: $("select#dlCountType").val() },
                                    //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                                    "async": false,
                                    cache: false,
                                    "dataType": "json",
                                    success: function (response) {
                                        $('#DivLoading').show();

                                        if (response.Status == "ok") {
                                            UDFInsertNewForGrid(tbrow);
                                            if (response.locationMSG != "" && response.locationMSG != undefined) {
                                                //  Status1Proceed = true;
                                                errorIndex = errorIndex + 1;
                                                ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.locationMSG + " </b>";
                                                errorDataIDs.push(aData.ID);
                                            }
                                            //                                            else {
                                            //                                                Status1Proceed = true;
                                            //                                            }
                                            Status1Proceed = true;
                                        }
                                        else {
                                            errorIndex = errorIndex + 1;
                                            if (response.Message != undefined) {
                                                Status1Proceed = false;
                                                ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                                errorDataIDs.push(aData.ID);
                                            }
                                            //Some Error or Validation message fire so selected line item can not be applied
                                            //Status1Proceed = true;
                                        }
                                    },
                                    error: function (response) {
                                        errorIndex = errorIndex + 1;
                                        //Some Error or Validation message fire so selected line item can not be applied
                                        Status1Proceed = false;
                                        if (response.Message != undefined) {
                                            ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                            errorDataIDs.push(aData.ID);
                                        }
                                    }, complete: function () {

                                        $('#DivLoading').show();
                                    }
                                });
                            } //pull End
                            $('div#DivLoading').show();
                            if (Status1 == "ok") {
                                Status1Proceed = true;
                            }

                            if (Status2 == "pull") {
                                Status2Proceed = true;
                                var PullCreditType = "pull";
                                closeCountInfoModel();
                                if ($("#CountType").val() == "A") {
                                    PullCreditType = "adjustpull";
                                }
                                $('div#DivLoading').show();

                                $.ajax({
                                    "url": '@Url.Content("~/Pull/UpdatePullDataForCountNew")',
                                    data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.CusOwnedDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.CusOwnedDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID, IsConsinedPull: false, CountType: $("select#dlCountType").val() },
                                    "async": false,
                                    cache: false,
                                    "dataType": "json",
                                    success: function (response) {
                                        if (response.Status == "ok") {
                                            UDFInsertNewForGrid(tbrow);
                                            if (response.locationMSG != "" && response.locationMSG != undefined) {
                                                //Status2Proceed = true;
                                                errorIndex = errorIndex + 1;
                                                ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.locationMSG + " </b>";
                                                errorDataIDs.push(aData.ID);
                                            }
                                            //                                            else {
                                            //                                                Status2Proceed = true;
                                            //                                            }
                                            Status2Proceed = true;
                                        }
                                        else {
                                            errorIndex = errorIndex + 1;
                                            if (response.Message != undefined) {
                                                Status2Proceed = false;
                                                ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                                errorDataIDs.push(aData.ID);
                                            }
                                            //Status2Proceed = true;
                                        }
                                    },
                                    error: function (response) {
                                        errorIndex = errorIndex + 1;
                                        //Some Error or Validation message fire so selected line item can not be applied
                                        Status2Proceed = false;
                                        if (response.Message != undefined) {
                                            ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                            errorDataIDs.push(aData.ID);
                                        }
                                    }, complete: function () {
                                        $('div#DivLoading').show();
                                    }
                                });
                            }
                            if (Status2 == "ok") {

                                Status2Proceed = true;
                            }

                            if ((Status1 == "credit") || (Status2 == "credit") || (Status1 == "credit" && Status2 == "credit")) {
                                $('div#DivLoading').show();
                                IscallApplied = false;
                                var itemId = responce.CurrentObj.ItemGUID;
                                var itemType = responce.CurrentObj.ItemType;
                                var BinId = responce.CurrentObj.BinID;
                                var TotalCountQty = responce.CurrentObj.CusOwnedDifference;
                                var TotalCountQty1 = responce.CurrentObj.ConsignedDifference;
                                var CountedConsQty = responce.CurrentObj.CountConsignedQuantity;//Value of Count user input Consinged Qty
                                var CountedCustQty = responce.CurrentObj.CountCustomerOwnedQuantity;//Value Of Count User input CustomerOwned Qty
                                var ActualConsQty = responce.CurrentObj.ConsignedQuantity;//Actual Item's Consined Qty Value
                                var ActualCustQty = responce.CurrentObj.CustomerOwnedQuantity;//Actual Item's Customer Qty Value
                                var idtype = itemId + '#' + itemType.toString() + '#' + ' ' + ' #' + BinId.toString() + "#frompullcredit_forcount" + "#" + responce.CurrentObj.TotalDifference + "#" + responce.CurrentObj.GUID + "#" + TotalCountQty + "#" + TotalCountQty1 + "#" + CountedConsQty + "#" + CountedCustQty + "#" + ActualConsQty + "#" + ActualCustQty; // + "#" + response.CurrentObj.CountConsignedQuantity;
                                var CountDtlGUID = responce.CurrentObj.GUID;

                                $.ajax({
                                    "url": '@Url.Content("~/Inventory/GetItemIsSerialOrLot")',
                                    data: { ItemGUID: itemId },
                                    "async": false,
                                    cache: false,
                                    "dataType": "json",
                                    success: function (response) {
                                        if (response == "serial" || response == "lot") {
                                            Status2Proceed = true;
                                            Status1Proceed = true;
                                            $('div#DivLoading').show();
                                            //for serial or lot type item , credit popup will open
                                            var PullCreditType = "credit";
                                            if ($("#CountType").val() == "A") {
                                                PullCreditType = "adjcredit";
                                            }
                                            idtype = idtype + '#' + PullCreditType;
                                            FromApplyAll = true;
                                            closeCountInfoModel();
                                            $('div#DivLoading').show();
                                            $('#LocationDetails').load('../Inventory/LocationDetailsNew', { ItemID_ItemType: idtype }, function () {

                                                $('#LocationDetails').dialog('open');

                                                IsRefreshGrid = true;
                                            });
                                        }
                                        else {
                                            var PullCreditType = "credit";
                                            if ($("#CountType").val() == "A") {
                                                PullCreditType = "adjcredit";
                                            }
                                            //ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                            var arr = new Array();
                                            arr.push({ ItemGUID: itemId, BinID: BinId, BinNumber: BinNum, Received: prettyDate, SerialNumberTracking: false, LotNumberTracking: false, CountCustOrConsQty: TotalCountQty + TotalCountQty1, ConsignedQuantity: TotalCountQty1, CustomerOwnedQuantity: TotalCountQty, LotNumberTracking: false, IsCreditPull: true, CountLineItemDtlGUID: responce.CurrentObj.GUID });
                                            //for general item credit will occur in backgrond no need to open popup
                                            $('div#DivLoading').show();
                                            $.ajax({
                                                "url": '@Url.Content("~/Inventory/ItemLocationDetailsSaveForCreditPull")',
                                                data: "{ 'objData': " + JSON.stringify(arr) + ", 'PullCreditType': '" + PullCreditType + "' }",
                                                type: 'Post',
                                                "async": false,
                                                contentType: 'application/json',
                                                cache: false,
                                                "dataType": "json",
                                                success: function (responce1) {
                                                    if (responce1.Status == 'OK') {
                                                        if (Status2 == "credit")
                                                            Status2Proceed = true;
                                                        if (Status1 == "credit")
                                                            Status1Proceed = true;
                                                        IscallApplied = true;
                                                        if (Status1Proceed == true && Status2Proceed == true && IscallApplied) {
                                                            PostApplyAction(responce.CurrentObj);
                                                        }
                                                        ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                                        ApplyForAllCountNew(arrrows);
                                                    }
                                                }, complete: function () {

                                                    $('div#DivLoading').show();
                                                }
                                            });
                                        }
                                    }, complete: function () {

                                        $('div#DivLoading').show();
                                    }
                                });
                            } //Credit End

                            else {
                                if (Status1Proceed == true && Status2Proceed == true && IscallApplied) {
                                    PostApplyAction(responce.CurrentObj);
                                }
                                ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                ApplyForAllCountNew(arrrows);
                            }


                        }
                    },//success method end
                    complete: function () {
                        // $('div#DivLoading').hide();
                    }
                });             //ajax method end
            } // aaritems.lenght if end
        }
        $.each(errorDataIDs, function (index, value) {
            $.ajax({
                "url": '@Url.Content("~/Inventory/UnApplieIDbyID")',
                data: { ID: value, IsApplied: false },
                //data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                "async": false,
                cache: false,
                "dataType": "json",
                success: function (response) {
                }
            });
        });
    }

    function ApplyForAllCount(arrrows) {

        if (!isNaN(arrrows.length) && arrrows.length > 0) {
            $('#ApplyCountProcessing').modal();
            $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

            var objrow = null;

            if (ApplyProcessedRowCount <= arrrows.length - 1)
                tbrow = arrrows[ApplyProcessedRowCount];
            else {
                if (ApplyAllCountErrorMessage != '') {
                    FinalErr = "<b>Please select row </b>";
                    FinalErr = FinalErr + ApplyAllCountErrorMessage;
                    $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(FinalErr);
                    closeCountInfoModel();
                    $('#ApplyCountInfoDialog').modal();
                }
                else {
                    $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html("<b style='color:green'>Count Applied successfully.</b>");
                    closeCountInfoModel();
                    $('#ApplyCountInfoDialog').modal();
                }
                return;
            }

            var aaritems = new Array();
            var aData = oTableMSItem.fnGetData(tbrow);
            if ($(tbrow).find('#UDF1') != null) {
                if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF1 = $(tbrow).find('#UDF1').val();
                }
            }

            if ($(tbrow).find('#UDF2') != null) {
                if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF2 = $(tbrow).find('#UDF2').val();
                }
            }

            if ($(tbrow).find('#UDF3') != null) {
                if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF3 = $(tbrow).find('#UDF3').val();
                }
            }

            if ($(tbrow).find('#UDF4') != null) {
                if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF4 = $(tbrow).find('#UDF4').val();
                }
            }

            if ($(tbrow).find('#UDF5') != null) {
                if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                }
                else {
                    vUDF5 = $(tbrow).find('#UDF5').val();
                }
            }
            var isstageLoca = false;
            if (aData.IsStagingLocationCount == "Yes") {
                isstageLoca = true;
            }
            if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true });
            }
            else {
                aaritems.push({ ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry, CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry), UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false, IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true });
            }

            var BinNum = '';
            BinNum = aData.BinNumber;
            var myDate = new Date();
            var prettyDate = (myDate.getMonth() + 1) + '/' + myDate.getDate() + '/' + myDate.getFullYear();

            if (aaritems.length > 0) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ApplyCountOnLineItems", "Inventory")',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(aaritems),
                    "async": false,
                    success: function (responce) {
                        if (responce.Status == "pull") {
                            var PullCreditType = "pull";
                            if ($("#CountType").val() == "A") {
                                PullCreditType = "adjustpull";
                            }
                            $.ajax({
                                "url": '@Url.Content("~/Pull/UpdatePullDataForCount")',
                                data: { ID: 0, ItemGUID: responce.CurrentObj.ItemGUID, ProjectGUID: "", BinID: responce.CurrentObj.BinID, PullCreditQuantity: (responce.CurrentObj.TotalDifference * (-1)), PullCredit: PullCreditType, TempPullQTY: (responce.CurrentObj.TotalDifference * (-1)), UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, RequisitionDetailID: "", WorkOrderDetailGUID: "", ICDtlGUID: responce.CurrentObj.GUID },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {



                                    if (response.Status == "ok") {
                                        if (response.locationMSG != "" && response.locationMSG != undefined) {
                                            ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                            errorIndex = errorIndex + 1;
                                            ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.locationMSG + " </b>";
                                            ApplyForAllCount(arrrows);
                                        }
                                        else {
                                            PostApplyAction(responce.CurrentObj);
                                            ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                            ApplyForAllCount(arrrows);
                                        }
                                    }
                                    else {
                                        ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                        errorIndex = errorIndex + 1;

                                        if (response.Message != undefined) {
                                            ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                        }
                                        ApplyForAllCount(arrrows);
                                    }
                                },
                                error: function (response) {
                                    ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                    errorIndex = errorIndex + 1;
                                    if (response.Message != undefined) {
                                        ApplyAllCountErrorMessage += "<br/><b style='color:Olive'>" + errorIndex + ") " + response.Message + " </b>";
                                    }
                                    ApplyForAllCount(arrrows);
                                }
                            });
                        } //pull End
                        else if (responce.Status == "credit") {
                            var itemId = responce.CurrentObj.ItemGUID;
                            var itemType = responce.CurrentObj.ItemType;
                            var BinId = responce.CurrentObj.BinID;
                            var TotalCountQty = responce.CurrentObj.CusOwnedDifference;
                            var TotalCountQty1 = responce.CurrentObj.ConsignedDifference;
                            var idtype = itemId + '#' + itemType.toString() + '#' + ' ' + ' #' + BinId.toString() + "#frompullcredit_forcount" + "#" + responce.CurrentObj.TotalDifference + "#" + responce.CurrentObj.GUID + "#" + TotalCountQty + "#" + TotalCountQty1; // + "#" + response.CurrentObj.CountConsignedQuantity;
                            var CountDtlGUID = responce.CurrentObj.GUID;
                            $.ajax({
                                "url": '@Url.Content("~/Inventory/GetItemIsSerialOrLot")',
                                data: { ItemGUID: itemId },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                success: function (response) {

                                    if (response == "serial" || response == "lot") {
                                        //for serial or lot type item , credit popup will open
                                        var PullCreditType = "credit";
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "adjcredit";
                                        }
                                        idtype = idtype + '#' + PullCreditType;
                                        FromApplyAll = true;
                                        $('div#DivLoading').show();
                                        $('#LocationDetails').load('../Inventory/LocationDetailsNew', { ItemID_ItemType: idtype }, function () {
                                            closeCountInfoModel();

                                            $('#LocationDetails').dialog('open');
                                            $('div#DivLoading').hide();
                                            IsRefreshGrid = true;

                                        });

                                    }
                                    else {
                                        var PullCreditType = "credit";
                                        if ($("#CountType").val() == "A") {
                                            PullCreditType = "adjcredit";
                                        }
                                        var arr = new Array();
                                        arr.push({ ItemGUID: itemId, BinID: BinId, BinNumber: BinNum, Received: prettyDate, SerialNumberTracking: false, LotNumberTracking: false, CountCustOrConsQty: TotalCountQty + TotalCountQty1, ConsignedQuantity: TotalCountQty1, CustomerOwnedQuantity: TotalCountQty, LotNumberTracking: false, IsCreditPull: true, CountLineItemDtlGUID: responce.CurrentObj.GUID });
                                        //for general item credit will occur in backgrond no need to open popup
                                        $.ajax({
                                            "url": '@Url.Content("~/Inventory/ItemLocationDetailsSaveForCreditPull")',
                                            data: "{ 'objData': " + JSON.stringify(arr) + ", 'PullCreditType': '" + PullCreditType + "' }",
                                            type: 'Post',
                                            "async": false,
                                            contentType: 'application/json',
                                            cache: false,
                                            "dataType": "json",
                                            success: function (responce1) {
                                                if (responce1.Status == 'OK') {
                                                    PostApplyAction(responce.CurrentObj);
                                                    ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                                                    ApplyForAllCount(arrrows);
                                                }
                                            }
                                        });
                                    }
                                }
                            });
                        } //Credit End
                        else if (responce.Status == "ok") {
                            PostApplyAction(responce.CurrentObj);
                            ApplyProcessedRowCount = ApplyProcessedRowCount + 1;
                            ApplyForAllCount(arrrows);
                        }
                    } //success method end
                });             //ajax method end
            } // aaritems.lenght if end
        }
    }



    //Apply All Effect  as per WI-848 issue
    $("#btnApplyAll").on("click", function (e) {

        $('div#DivLoading').show();
        var tbl = $("#" + CountLineItemDataTable).dataTable();
        var anSelected = fnGetSelected1(tbl);

        if ((!isNaN(anSelected.length) && anSelected.length == 0) || (anSelected.find("td").find("input.ApplyBtn").length == 0)) {
            var ApplyAllCountErrorMessage = "<b>Please select row to Apply count </b>";
            $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(ApplyAllCountErrorMessage);
            closeCountInfoModel();
            $('#ApplyCountInfoDialog').modal();
            $('div#DivLoading').hide();
            return false;
        }
        else {
            var isLotorSerialItem = false;
            $("#" + CountLineItemDataTable + ' tbody tr.row_selected').each(function (indx, currow) {
                if (!$(this).find('input.CreateBtndisabled').is(":disabled")) {
                    var hdnLotNumberTracking = $(currow).find("input[name='hdnLotNumberTracking']").val();
                    var hdnSerialNumberTracking = $(currow).find("input[name='hdnSerialNumberTracking']").val();
                    if (hdnLotNumberTracking == "true" || hdnSerialNumberTracking == "true") {
                        isLotorSerialItem = true;
                    }
                }
            });

            if ('@ViewNewCountApplyButtons' == 'yes' && isLotorSerialItem == true) {
                PopupApplyAllSelectedNewFlow();
            }
            else {
                $('div#DivLoading').show();
                $('div#DivLoading').show();
                $('div#DivLoading').show();
                setTimeout(function () { $('div#DivLoading').show(); }, 3);

                $('#ApplyCountProcessing').modal();
                $('#ApplyCountProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');
                var tbl = $("#" + CountLineItemDataTable).dataTable();
                var anSelected = fnGetSelected1(tbl);
                $('div#DivLoading').show();
                errorIndex = 0;
                ApplyAllCountErrorMessage = '';
                FinalErr = '';
                FromApplyAll = false;
                selectedRows = new Array();
                //Validation if none of row is selected for apply
                if (!isNaN(anSelected.length) && anSelected.length == 0) {
                    ApplyAllCountErrorMessage = "<b>Please select row to Apply count </b>";
                    $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(ApplyAllCountErrorMessage);
                    closeCountInfoModel();
                    $('#ApplyCountInfoDialog').modal();
                    $('div#DivLoading').hide();
                    $('div#DivLoading').hide();
                    $('div#DivLoading').hide();
                    return false;
                }
                $('div#DivLoading').show();
                //create an array of selected rows
                $("#" + CountLineItemDataTable + ' tbody tr.row_selected').each(function (indx, currow) {
                    if (!$(this).find('input.CreateBtndisabled').is(":disabled")) {
                        $('div#DivLoading').show();
                        selectedRows.push(currow);
                    }
                });

                ApplyProcessedRowCount = 0;
                TotalRowSelectedForApplyCount = anSelected.length;

                //ApplyForAllCount(selectedRows);
                setTimeout(function () { ApplyForAllCountNew(selectedRows); }, 200);

                // if (ApplyProcessedRowCount == (TotalRowSelectedForApplyCount + 1)) {
                //        $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html("<b style='color:green'>Count Applied successfully.</b>");
                //        closeCountInfoModel();
                //        $('#ApplyCountInfoDialog').modal();
                //        }
                //        else {
                //            ApplyAllCountErrorMessage = '<b>Some of the Item(s) is(are) not able to apply , due to following reasons.</b><br />' + ApplyAllCountErrorMessage;
                //            $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html(ApplyAllCountErrorMessage);
                //            closeCountInfoModel();
                //            $('#ApplyCountInfoDialog').modal();
                //        }
            }
        }
    });


    function PopupApplyAllSelectedNewFlow() {
        var aaritems = new Array();
        $("#" + CountLineItemDataTable + ' tbody tr.row_selected').each(function (indx, tbrow) {
            if (!$(this).find('input.CreateBtndisabled').is(":disabled")) {

                var vUDF1 = '', vUDF2 = '', vUDF3 = '', vUDF4 = '', vUDF5 = '';
                var aPos = oTableMSItem.fnGetPosition(tbrow);
                var aData = oTableMSItem.fnGetData(aPos);

                if ($(tbrow).find('#UDF1') != null) {
                    if ($(tbrow).find('#UDF1').attr("class") == 'selectBox') {
                        vUDF1 = $(tbrow).find('#UDF1 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF1 = $(tbrow).find('#UDF1').val();
                    }
                }

                if ($(tbrow).find('#UDF2') != null) {
                    if ($(tbrow).find('#UDF2').attr("class") == 'selectBox') {
                        vUDF2 = $(tbrow).find('#UDF2 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF2 = $(tbrow).find('#UDF2').val();
                    }
                }

                if ($(tbrow).find('#UDF3') != null) {
                    if ($(tbrow).find('#UDF3').attr("class") == 'selectBox') {
                        vUDF3 = $(tbrow).find('#UDF3 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF3 = $(tbrow).find('#UDF3').val();
                    }
                }

                if ($(tbrow).find('#UDF4') != null) {
                    if ($(tbrow).find('#UDF4').attr("class") == 'selectBox') {
                        vUDF4 = $(tbrow).find('#UDF4 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF4 = $(tbrow).find('#UDF4').val();
                    }
                }

                if ($(tbrow).find('#UDF5') != null) {
                    if ($(tbrow).find('#UDF5').attr("class") == 'selectBox') {
                        vUDF5 = $(tbrow).find('#UDF5 option:selected').text().replace(/'/g, "''");
                    }
                    else {
                        vUDF5 = $(tbrow).find('#UDF5').val();
                    }
                }

                var isstageLoca = false;
                if (aData.IsStagingLocationCount == "Yes") {
                    isstageLoca = true;
                }


                if ($(tbrow).find("input[type='hidden'][name='hdnRowState']").val() == "1") {
                    aaritems.push({
                        ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry
                    , CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry)
                    , UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: true
                    , IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, ItemNumber: aData.ItemNumber, LotNumberTracking: aData.LotNumberTracking
                    , SerialNumberTracking: aData.SerialNumberTracking, BinNumber: aData.BinNumber, CountType: escape($("#CountType").val())
                    });
                }
                else {
                    aaritems.push({
                        ID: aData.ID, ItemGUID: aData.ItemGUID, BinID: aData.BinID, CountCustomerOwnedQuantity: aData.CountCustomerOwnedQuantityEntry
                    , CountConsignedQuantity: aData.CountConsignedQuantityEntry, CountLineItemDescription: escape(aData.CountLineItemDescriptionEntry)
                    , UDF1: escape(vUDF1), UDF2: escape(vUDF2), UDF3: escape(vUDF3), UDF4: escape(vUDF4), UDF5: escape(vUDF5), SaveAndApply: false
                    , IsStagingLocationCount: isstageLoca, IsOnlyFromItemUI: true, ItemNumber: aData.ItemNumber, LotNumberTracking: aData.LotNumberTracking
                    , SerialNumberTracking: aData.SerialNumberTracking, BinNumber: aData.BinNumber, CountType: escape($("#CountType").val())
                    });
                }

            }
        });

        if (aaritems.length > 0) {

            $.ajax({
                type: "POST",
                url: '@Url.Action("OpenApplyCountOnLineItemsPopup", "Inventory")',
                contentType: 'application/json',
                dataType: 'html',
                data: JSON.stringify(aaritems),
                success: function (RetData) {
                    $("#DivCountApplyPopup").html("");
                    $("#DivCountApplyPopup").html(RetData);

                    $("#DivCountApplyPopup").dialog('open');
                    $('#DivLoading').hide();
                },
                error: function (err) {
                    alert(err);
                    $('#DivLoading').hide();
                }
            });

        }
        else {
            $('#ApplyCountInfoDialog').find("#ApplyCountMSG").html("<b>Please select unapplied row to Apply count </b>");
            closeCountInfoModel();
            $('#ApplyCountInfoDialog').modal();
            $('div#DivLoading').hide();
        }
    }

    function fnGetSelected(oTableLocal) {
        return oTableLocal.$('tr.row_selected');
    }

    //#endregion
    function closeCountInfoModel() {
        $.modal.impl.close();
    }

    function closeFromOk() {
        $.modal.impl.close();
    }

    function closeErrorDialog() {
        $.modal.impl.close();
        return false;
    }
</script>
