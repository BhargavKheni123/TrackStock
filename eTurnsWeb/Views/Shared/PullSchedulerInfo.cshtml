@model eTurns.DTO.PullSchedulerDTO
<script type='text/javascript' src="@Url.Content("~/Scripts/jquery-ui-timepicker-addon.js")"></script>
@{


    List<SelectListItem> lstItems = new List<SelectListItem>();

    SelectListItem objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.First;
    objSelectListItem.Value = "1";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Second;
    objSelectListItem.Value = "2";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Third;
    objSelectListItem.Value = "3";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Fourth;
    objSelectListItem.Value = "4";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Fifth;
    objSelectListItem.Value = "5";
    lstItems.Add(objSelectListItem);

    SelectList lstScheduledays = new SelectList(lstItems, "Value", "Text");

    lstItems = new List<SelectListItem>();

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Monday;
    objSelectListItem.Value = "2";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Tuesday;
    objSelectListItem.Value = "3";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Wednesday;
    objSelectListItem.Value = "4";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Thursday;
    objSelectListItem.Value = "5";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Friday;
    objSelectListItem.Value = "6";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Saturday;
    objSelectListItem.Value = "7";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Sunday;
    objSelectListItem.Value = "1";
    lstItems.Add(objSelectListItem);

    SelectList lstWeekdays = new SelectList(lstItems, "Value", "Text");

    lstItems = new List<SelectListItem>();
    for (int i = 0; i < 60; i++)
    {
        objSelectListItem = new SelectListItem();
        string optionText = string.Empty;
        switch (i)
        {
            case 0:
                optionText = ResSchedulerReportList.Zero;
                break;
            case 1:
                optionText = ResSchedulerReportList.One;
                break;
            case 2:
                optionText = ResSchedulerReportList.Two;
                break;
            case 3:
                optionText = ResSchedulerReportList.Three;
                break;
            case 4:
                optionText = ResSchedulerReportList.Four;
                break;
            case 5:
                optionText = ResSchedulerReportList.Five;
                break;
            case 6:
                optionText = ResSchedulerReportList.Six;
                break;
            case 7:
                optionText = ResSchedulerReportList.Seven;
                break;
            case 8:
                optionText = ResSchedulerReportList.Eight;
                break;
            case 9:
                optionText = ResSchedulerReportList.Nine;
                break;
            case 10:
                optionText = ResSchedulerReportList.Ten;
                break;
            case 11:
                optionText = ResSchedulerReportList.Eleven;
                break;
            case 12:
                optionText = ResSchedulerReportList.Twelve;
                break;
            case 13:
                optionText = ResSchedulerReportList.Thirteen;
                break;
            case 14:
                optionText = ResSchedulerReportList.Fourteen;
                break;
            case 15:
                optionText = ResSchedulerReportList.Fifteen;
                break;
            case 16:
                optionText = ResSchedulerReportList.Sixteen;
                break;
            case 17:
                optionText = ResSchedulerReportList.Seventeen;
                break;
            case 18:
                optionText = ResSchedulerReportList.Eighteen;
                break;
            case 19:
                optionText = ResSchedulerReportList.Nineteen;
                break;
            case 20:
                optionText = ResSchedulerReportList.Twenty;
                break;
            case 21:
                optionText = ResSchedulerReportList.TwentyOne;
                break;
            case 22:
                optionText = ResSchedulerReportList.TwentyTwo;
                break;
            case 23:
                optionText = ResSchedulerReportList.TwentyThree;
                break;
            case 24:
                optionText = ResSchedulerReportList.TwentyFour;
                break;
            case 25:
                optionText = ResSchedulerReportList.TwentyFive;
                break;
            case 26:
                optionText = ResSchedulerReportList.TwentySix;
                break;
            case 27:
                optionText = ResSchedulerReportList.TwentySeven;
                break;
            case 28:
                optionText = ResSchedulerReportList.TwentyEight;
                break;
            case 29:
                optionText = ResSchedulerReportList.TwentyNine;
                break;
            case 30:
                optionText = ResSchedulerReportList.Thirty;
                break;
            case 31:
                optionText = ResSchedulerReportList.ThirtyOne;
                break;
            case 32:
                optionText = ResSchedulerReportList.ThirtyTwo;
                break;
            case 33:
                optionText = ResSchedulerReportList.ThirtyThree;
                break;
            case 34:
                optionText = ResSchedulerReportList.ThirtyFour;
                break;
            case 35:
                optionText = ResSchedulerReportList.ThirtyFive;
                break;
            case 36:
                optionText = ResSchedulerReportList.ThirtySix;
                break;
            case 37:
                optionText = ResSchedulerReportList.ThirtySeven;
                break;
            case 38:
                optionText = ResSchedulerReportList.ThirtyEight;
                break;
            case 39:
                optionText = ResSchedulerReportList.ThirtyNine;
                break;
            case 40:
                optionText = ResSchedulerReportList.Forty;
                break;
            case 41:
                optionText = ResSchedulerReportList.FortyOne;
                break;
            case 42:
                optionText = ResSchedulerReportList.FortyTwo;
                break;
            case 43:
                optionText = ResSchedulerReportList.FortyThree;
                break;
            case 44:
                optionText = ResSchedulerReportList.FortyFour;
                break;
            case 45:
                optionText = ResSchedulerReportList.FortyFive;
                break;
            case 46:
                optionText = ResSchedulerReportList.FortySix;
                break;
            case 47:
                optionText = ResSchedulerReportList.FortySeven;
                break;
            case 48:
                optionText = ResSchedulerReportList.FortyEight;
                break;
            case 49:
                optionText = ResSchedulerReportList.FortyNine;
                break;
            case 50:
                optionText = ResSchedulerReportList.Fifty;
                break;
            case 51:
                optionText = ResSchedulerReportList.FiftyOne;
                break;
            case 52:
                optionText = ResSchedulerReportList.FiftyTwo;
                break;
            case 53:
                optionText = ResSchedulerReportList.FiftyThree;
                break;
            case 54:
                optionText = ResSchedulerReportList.FiftyFour;
                break;
            case 55:
                optionText = ResSchedulerReportList.FiftyFive;
                break;
            case 56:
                optionText = ResSchedulerReportList.FiftySix;
                break;
            case 57:
                optionText = ResSchedulerReportList.FiftySeven;
                break;
            case 58:
                optionText = ResSchedulerReportList.FiftyEight;
                break;
            case 59:
                optionText = ResSchedulerReportList.FiftyNine;
                break;

        }
        objSelectListItem.Text = optionText;
        //objSelectListItem.Text = i.ToString();
        objSelectListItem.Value = i.ToString();
        lstItems.Add(objSelectListItem);
    }
    SelectList lstMinuts = new SelectList(lstItems, "Value", "Text");
    if (Model.Pull_LoadSheduleFor == 4)
    {
        Model.Pull_ScheduleMode = 1;
    }

    var autoSettingMsg = string.Format(ResSchedulerReportList.AutoSettings, Model.Pull_ModuleNameResource);
}
@if (Model.Pull_LoadSheduleFor != 4)
{
    <h4>
        @(Model.Pull_ModuleNameResource + " " + ResSchedulerReportList.ScheduleDetails)
    </h4>
}
<div id="dvPullSchedulePara">
    <ul>
        <li>
            <div class="editor-label">
                @if (Model.Pull_LoadSheduleFor != 4)
                {
                    <text>@autoSettingMsg</text>
                }
            </div>
            <div class="editor-field">
                @Html.HiddenFor(model => model.Pull_SupplierId)
                @Html.HiddenFor(model => model.Pull_RoomId)
                @Html.HiddenFor(model => model.Pull_ScheduleID)

                @Html.RadioButtonFor(model => model.Pull_ScheduleMode, 6, new { @id = "rdoScheduleModeManual" })
                @Html.Label(ResSchedulerReportList.Manual, new { @for = "rdoScheduleModeManual" })

                @Html.RadioButtonFor(model => model.Pull_ScheduleMode, 5, new { @id = "rdoPullScheduleModeImmediate" })
                @Html.Label(ResSchedulerReportList.Immediate, new { @for = "rdoPullScheduleModeImmediate" })

                @Html.RadioButtonFor(model => model.Pull_ScheduleMode, 4, new { @id = "rdoPullScheduleModeHourly" })
                @Html.Label(ResSchedulerReportList.Hourly, new { @for = "rdoPullScheduleModeHourly" })

                @Html.RadioButtonFor(model => model.Pull_ScheduleMode, 1, new { @id = "rdoPullScheduleModeDaily" })
                @Html.Label(ResSchedulerReportList.Daily, new { @for = "rdoPullScheduleModeDaily" })
                &nbsp;&nbsp;
                @Html.RadioButtonFor(model => model.Pull_ScheduleMode, 2, new { @id = "rdoPullScheduleModeWeekly" })
                @Html.Label(ResSchedulerReportList.Weekly, new { @for = "rdoPullScheduleModeWeekly" })
                &nbsp;&nbsp;
                @Html.RadioButtonFor(model => model.Pull_ScheduleMode, 3, new { @id = "rdoPullScheduleModeMonthly" })
                @Html.Label(ResSchedulerReportList.Monthly, new { @for = "rdoPullScheduleModeMonthly" })
                &nbsp;&nbsp;
            </div>
        </li>
        <li>
            <div class="editor-label">
                &nbsp;
            </div>
            <div class="editor-field">
                <div style="padding-left: 20px; display: block;" class="editor-field" id="PullHourlyDIV">
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.Label(ResSchedulerReportList.Every)
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Pull_HourlyRecurringHours, new { @maxlength = "2", @class = "Smalltext-box" })
                                    @Html.Label(ResSchedulerReportList.HoursAtEvery)
                                    @Html.DropDownListFor(model => model.Pull_HourlyAtWhatMinute, lstMinuts, new { @class = "selectBox", @id = "ddlPullHourlyAtWhatMinute" })
                                    @ResSchedulerReportList.Minutes
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Pull_HourlyRecurringHours)</span>
                                    ,<span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Pull_HourlyAtWhatMinute)</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div style="padding-left: 20px; display: block;" class="editor-field" id="PullDailyDIV">
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Pull_DailyRecurringType, 1, new { @class = "checkbox", @id = "rbtnPullDailyRecurringTypeOne" })
                                    @Html.Label(ResSchedulerReportList.Every, new { @for = "rbtnPullDailyRecurringTypeOne" })
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Pull_DailyRecurringDays, new { @maxlength = "1", @class = "Smalltext-box" })
                                    @Html.Label(ResSchedulerReportList.Days, new { @for = "Pull_DailyRecurringDays" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Pull_DailyRecurringDays)</span>
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Pull_DailyRecurringType)</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Pull_DailyRecurringType, 2, new { @class = "checkbox", @id = "rbtnPullDailyRecurringTypeTwo" })
                                    @Html.Label(ResSchedulerReportList.EveryWeekDays, new { @for = "rbtnPullDailyRecurringTypeTwo" })
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div style="padding-left: 20px; display: block;" class="editor-field" id="PullWeeklyDIV">
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.Label(ResSchedulerReportList.Recurevery, new { @for = "Pull_WeeklyRecurringWeeks" })
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Pull_WeeklyRecurringWeeks, new { @class = "Smalltext-box", @maxlength = "1" })
                                    @Html.Label(ResSchedulerReportList.WeeksOn)
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Pull_WeeklyRecurringWeeks)</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.CheckBoxFor(model => model.Pull_WeeklyOnMonday, new { @class = "checkbox", @id = "chkPullWeeklyOnMonday" })
                                    @Html.Label(ResSchedulerReportList.Monday, new { @for = "chkPullWeeklyOnMonday" })
                                    &nbsp;
                                    @Html.CheckBoxFor(model => model.Pull_WeeklyOnTuesday, new { @class = "checkbox", @id = "chkPullWeeklyOnTuesday" })
                                    @Html.Label(ResSchedulerReportList.Tuesday, new { @for = "chkPullWeeklyOnTuesday" })
                                    &nbsp;
                                    @Html.CheckBoxFor(model => model.Pull_WeeklyOnWednesday, new { @class = "checkbox", @id = "chkPullWeeklyOnWednesday" })
                                    @Html.Label(ResSchedulerReportList.Wednesday, new { @for = "chkPullWeeklyOnWednesday" })
                                    &nbsp;
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.CheckBoxFor(model => model.Pull_WeeklyOnThursday, new { @class = "checkbox", @id = "chkPullWeeklyOnThursday" })
                                    @Html.Label(ResSchedulerReportList.Thursday, new { @for = "chkPullWeeklyOnThursday" })
                                    &nbsp;
                                    @Html.CheckBoxFor(model => model.Pull_WeeklyOnFriday, new { @class = "checkbox", @id = "chkPullWeeklyOnFriday" })
                                    @Html.Label(ResSchedulerReportList.Friday, new { @for = "chkPullWeeklyOnFriday" })
                                    &nbsp;
                                    @Html.CheckBoxFor(model => model.Pull_WeeklyOnSaturday, new { @class = "checkbox", @id = "chkPullWeeklyOnSaturday" })
                                    @Html.Label(ResSchedulerReportList.Saturday, new { @for = "chkPullWeeklyOnSaturday" })
                                    &nbsp;
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.CheckBoxFor(model => model.Pull_WeeklyOnSunday, new { @class = "checkbox", @id = "chkPullWeeklyOnSunday" })
                                    @Html.Label(ResSchedulerReportList.Sunday, new { @for = "chkPullWeeklyOnSunday" })
                                    &nbsp;
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div style="padding-left: 20px; display: block;" class="editor-field" id="PullMonthlyDIV">
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Pull_MonthlyRecurringType, 1, new { @class = "checkbox", @id = "rbtnPullMonthlyRecurringTypeOne" })
                                    @Html.Label(ResSchedulerReportList.Days, new { @for = "rbtnPullMonthlyRecurringTypeOne" })
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Pull_MonthlyDateOfMonth, new { @maxlength = "2", @class = "Smalltext-box", @id = "txtPullMonthlyDateOfMonth" })
                                    @Html.Label(ResSchedulerReportList.OfEvery, new { @for = "txtPullMonthlyDateOfMonth" })
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Pull_MonthlyRecurringMonths, new { @maxlength = "2", @class = "Smalltext-box", @id = "txtPullMonthlyRecurringMonthsOne" })
                                    @Html.Label(ResSchedulerReportList.Months, new { @for = "txtPullMonthlyRecurringMonthsOne" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Pull_MonthlyRecurringType)</span>
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Pull_MonthlyDateOfMonth)</span>
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Pull_MonthlyRecurringMonths)</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Pull_MonthlyRecurringType, 2, new { @class = "checkbox", @id = "rbtnPullMonthlyRecurringTypeTwo" })
                                    @Html.Label(ResSchedulerReportList.The, new { @for = "rbtnPullMonthlyRecurringTypeTwo" })
                                    @Html.DropDownListFor(model => model.Pull_MonthlyDateOfMonth, lstScheduledays, new { @class = "selectBox", @id = "ddlPullMonthlyDateOfMonth" })
                                    @Html.DropDownListFor(model => model.Pull_MonthlyDayOfMonth, lstWeekdays, new { @class = "selectBox" })
                                    @Html.Label(ResSchedulerReportList.OfEvery) &nbsp;
                                    @Html.TextBoxFor(model => model.Pull_MonthlyRecurringMonths, new { @maxlength = "2", @class = "Smalltext-box", @id = "txtPullMonthlyRecurringMonthsTwo" })
                                    @Html.Label(ResSchedulerReportList.Months, new { @for = "txtPullMonthlyRecurringMonthsTwo" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Pull_MonthlyDayOfMonth)</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </li>
        <li>
            <div class="editor-label">
                &nbsp;
            </div>
            <div class="editor-field">
                &nbsp;
            </div>
        </li>
        <li id="PulllisubmissionTime">
            <div class="editor-label">
                @Html.LabelFor(model => model.Pull_ScheduleRunTime)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Pull_ScheduleRunTime, new { @class = "text-box", maxlength = 128, onkeypress = "javascript:return false;" })
                @Html.ValidationMessageFor(model => model.Pull_ScheduleRunTime)
            </div>
        </li>
        <li id="PullliIsScheduleActive">
            <div class="editor-label">
                &nbsp;
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Pull_IsScheduleActive, new { @class = "check-box" })
                @Html.LabelFor(model => model.Pull_IsScheduleActive)
            </div>
        </li>
        <li id="PullliNextExecDate">
            <div class="editor-label">
                @Html.LabelFor(model => model.Pull_NextRunDate)
            </div>
            <div class="editor-field">
                @Html.DisplayFor(model => model.Pull_NextRunDateTime)
                @Html.HiddenFor(model => model.Pull_IsScheduleChanged)
                @Html.HiddenFor(model => Model.Pull_LoadSheduleFor)
                @Html.HiddenFor(model => Model.Pull_CompanyId)
            </div>
        </li>
    </ul>
</div>
<script type="text/javascript">

    $(document).ready(function () {
        setTimeout(function () {
            $("div#dvPullSchedulePara").on("change", "input,select,textarea", function () {
                $("#Pull_IsScheduleChanged").val("1");
            });

            if ('@Model.Pull_ScheduleID' <= 0) {
                $("#Pull_IsScheduleChanged").val("1");
            }

            $('#Pull_ScheduleRunTime').timepicker(
                {
                    timeFormat: 'HH:mm'
                });

            PullSetScheduleMode('@Model.Pull_ScheduleMode', '@Model.Pull_DailyRecurringType', '@Model.Pull_MonthlyRecurringType');

            $("input[type='radio'][name='Pull_ScheduleMode']").change(function () {
                PullSetScheduleMode($(this).val(), 0, 0);
            });

            $("input[type='radio'][name='Pull_DailyRecurringType']").change(function () {
                PullSetDailyModeControls($(this).val());
            });

            $("input[type='radio'][name='Pull_MonthlyRecurringType']").change(function () {
                PullSetMonthlyModeControls($(this).val());
            });

            ShowHideNextRunDate("Pull_IsScheduleActive", "PullliNextExecDate");

        }, 300);
        DoNGbootstrapSS();
    });

    function PullSetScheduleMode(selectedMode, dailyRecurringType, monthlyRecurringType) {
     
        switch (selectedMode) {
            case "0":
                $("#PullDailyDIV").hide();
                $("#PullWeeklyDIV").hide();
                $("#PullMonthlyDIV").hide();
                $("div#PullHourlyDIV").hide();
                $("#PullisubmissionMethod,#PulllisubmissionTime,#PullliIsScheduleActive,#PullliDataSelectionTyp,#PullliReportDataSince").hide();

                break;
            case "1":
                $("div#PullDailyDIV").show();
                $("div#PullWeeklyDIV").hide();
                $("div#PullMonthlyDIV").hide();
                $("div#PullHourlyDIV").hide();
                $("#PullisubmissionMethod,#PulllisubmissionTime,#PullliIsScheduleActive,#PullliDataSelectionTyp,#PullliReportDataSince").show();
                PullSetDailyModeControls(dailyRecurringType);
                break;
            case "2":
                $("div#PullDailyDIV").hide();
                $("div#PullWeeklyDIV").show();
                $("div#PullMonthlyDIV").hide();
                $("div#PullHourlyDIV").hide();
                $("#PullisubmissionMethod,#PulllisubmissionTime,#PullliIsScheduleActive,#PullliDataSelectionTyp,#PullliReportDataSince").show();
                break;
            case "3":
                $("div#PullDailyDIV").hide();
                $("div#PullWeeklyDIV").hide();
                $("div#PullMonthlyDIV").show();
                $("div#PullHourlyDIV").hide();
                $("#PullisubmissionMethod,#PulllisubmissionTime,#PullliIsScheduleActive,#PullliDataSelectionTyp,#PullliReportDataSince").show();
                PullSetMonthlyModeControls(monthlyRecurringType);
                break;
            case "4":
                $("div#PullDailyDIV").hide();
                $("div#PullWeeklyDIV").hide();
                $("div#PullMonthlyDIV").hide();
                $("div#PullHourlyDIV").show();
                $("#PullisubmissionMethod,#PulllisubmissionTime,#PullliIsScheduleActive,#PullliDataSelectionTyp,#PullliReportDataSince").show();
                SetPullHourlyModeControls(monthlyRecurringType);
                break;
            case "5":
                $("div#PullDailyDIV").hide();
                $("div#PullWeeklyDIV").hide();
                $("div#PullMonthlyDIV").hide();
                $("div#PullHourlyDIV").hide();
                $("#PullisubmissionMethod,#PulllisubmissionTime,#PullliIsScheduleActive,#PullliDataSelectionTyp,#PullliReportDataSince").show();
                SetPullHourlyModeControls(monthlyRecurringType);
                break;
            default:
                $("div#PullDailyDIV").hide();
                $("div#PullWeeklyDIV").hide();
                $("div#PullMonthlyDIV").hide();
                $("div#PullHourlyDIV").hide();
                $("#PullisubmissionMethod,#PulllisubmissionTime,#PullliIsScheduleActive,#PullliDataSelectionTyp,#PullliReportDataSince").hide();
                break;
        }
    }
    function PullSetDailyModeControls(dailyRecurringType) {
        if (dailyRecurringType == "1") {
            $("#Pull_DailyRecurringDays").removeProp("disabled").removeClass("disableBack").focus();
        }
        else if (dailyRecurringType == "2") {
            $("#Pull_DailyRecurringDays").prop("disabled", "disabled").addClass("disableBack").val("");
            //$("#Pull_DailyRecurringDays").removeClass('error-highlighted');
        }
        //        else {
        //            $("#Pull_DailyRecurringDays").prop("disabled", "disabled").addClass("disableBack").val("");
        //        }
    }
    function SetPullWeeklyModeControls() {
        $("#Pull_WeeklyRecurringWeeks").removeProp("disabled").removeClass("disableBack").focus();
    }
    function SetPullHourlyModeControls() {
        $("#PulllisubmissionTime").hide();
    }
    function PullSetMonthlyModeControls(monthlyRecurringType) {

        if (monthlyRecurringType == "1") {
            $("#txtPullMonthlyDateOfMonth").removeProp("disabled").removeClass("disableBack").focus();
            $("#txtPullMonthlyRecurringMonthsOne").removeProp("disabled").removeClass("disableBack");
            $("#ddlPullMonthlyDateOfMonth").val("1").prop("disabled", "disabled").addClass("disableBack");
            $("#Pull_MonthlyDayOfMonth").val("1").prop("disabled", "disabled").addClass("disableBack");
            $("#txtPullMonthlyRecurringMonthsTwo").val("").prop("disabled", "disabled").addClass("disableBack");
        }
        else if (monthlyRecurringType == "2") {
            $("#txtPullMonthlyDateOfMonth").val("").prop("disabled", "disabled").addClass("disableBack");
            $("#txtPullMonthlyRecurringMonthsOne").val("").prop("disabled", "disabled").addClass("disableBack");
            $("#ddlPullMonthlyDateOfMonth").val("1").removeProp("disabled").removeClass("disableBack").focus();
            $("#Pull_MonthlyDayOfMonth").val("1").removeProp("disabled").removeClass("disableBack");
            $("#txtPullMonthlyRecurringMonthsTwo").removeProp("disabled").removeClass("disableBack");
        }
        else {
            $("#txtPullMonthlyDateOfMonth").val("").prop("disabled", "disabled").addClass("disableBack");
            $("#txtPullMonthlyRecurringMonthsOne").val("").prop("disabled", "disabled").addClass("disableBack");
            $("#ddlPullMonthlyDateOfMonth").val("1").prop("disabled", "disabled").addClass("disableBack");
            $("#Pull_MonthlyDayOfMonth").val("1").prop("disabled", "disabled").addClass("disableBack");
            $("#txtPullMonthlyRecurringMonthsTwo").val("").prop("disabled", "disabled").addClass("disableBack");
        }
    }
    function DoNGbootstrapSS() {
        var scope = angular.element($("#dvSupplierSchedules")).scope();
        if (scope != undefined) {
            var injector = $('[ng-app]').injector();
            var $compile = injector.get('$compile');
            $('#dvSupplierSchedules').html($compile($('#dvSupplierSchedules').html())(scope));
            //$('#liSupplierBlanketPODetails').html($compile($('li#liSupplierBlanketPODetails').html())(scope));
            //$('#liSupplierAccountDetails').html($compile($('li#liSupplierAccountDetails').html())(scope));
        }
    }
</script>
