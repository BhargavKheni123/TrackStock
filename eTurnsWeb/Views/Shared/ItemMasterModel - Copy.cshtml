@model eTurnsWeb.Models.ItemModelPerameter
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    string strColumnSetupFor = "ItemMasterModelList";
    if (!string.IsNullOrEmpty(Model.CallingFromPageName))
    {
        strColumnSetupFor = "ItemMasterModelList" + "_" + Model.CallingFromPageName;
    }
    var settings = new GridHeaderSettings() { DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = false, dataViewType = DataViewType.None, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = strColumnSetupFor };
    //var settings = new GridHeaderSettings() { dataViewType = DataViewType.Both, DataTableName = "myDataTable", ListViewhref = "#", PictureViewhref = "ItemMasterPictureView", DisplayUDFButton = true, UDFSetupFor = "ItemMaster", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "ItemMasterList", DisplayDeleteButton = true };
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);

    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ItemMaster" };
    if (Model.ModelHeader.ToLower().Contains("add items to order"))
    {
        modelCommon.Text = "Order";
    }
    else if (Model.ModelHeader.ToLower().Contains("add kit component to kit"))
    {
        modelCommon.Text = "Kit";
    }
    else
    {
        modelCommon.Text = "eTurns";
    }

    modelCommon.ControlID = Model.CallingFromPageName;

}
@*<h2>
        @Model.ModelHeader
    </h2>*@
<div class="userListBlock">
    <div id="tab7" class="tabContener" style="width: 99%">
        <div class="searchWrapper">
            <div class="searchBlock">
                <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                <div class="searchinputB">
                    <input type="text" class="searchinput" id="ItemModel_filter" />
                    <a href="" class="xclose">
                        <img src="~/Content/images/x.png" alt="X" id="clear_QLItemModel_filter" />
                    </a>
                </div>
            </div>
        </div>
        @Html.ItemModelGridTopHeader(settings)
        @Html.Partial("NarrowSearchForItemModel", modelCommon)
        <div class="userContent ">
            <table id="ItemModeDataTable" class="display">
                <thead>
                    <tr>
                        <th>
                        </th>
                       
                        <th id="tdAddQty">
                            Qty
                        </th>
                        <th>
                            Image
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.ID
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Cost
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.RoomName
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.CreatedOn
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.UpdatedOn
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.UpdatedBy
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.CreatedBy
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ManufacturerNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ManufacturerName
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SupplierPartNo
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Supplier
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.UPC
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.UNSPSC
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Description
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.LongDescription
                        </th>
                        <th>
                            @eTurns.DTO.ResCategoryMaster.Category
                        </th>
                        <th>
                            @eTurns.DTO.ResGLAccount.GLAccount
                        </th>
                        <th>
                            @eTurns.DTO.ResUnitMaster.Unit
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.PricePerTerm
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.DefaultPullQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Markup
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SellPrice
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ExtendedCost
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.LeadTimeInDays
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Trend
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Taxable
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Consignment
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.StagedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.InTransitquantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnOrderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnTransferQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SuggestedOrderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.RequisitionedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.AverageUsage
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Turns
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnHandQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsItemLevelMinMaxQtyRequired
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.CriticalQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.MinimumQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.MaximumQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.WeightPerPiece
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemUniqueNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsTransfer
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsPurchase
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.InventoryClassification
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SerialNumberTracking
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.LotNumberTracking
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.DateCodeTracking
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemType
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ImagePath
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsLotSerialExpiryCost
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnReturnQuantity
                        </th>
                        @if (Model.CallingFromPageName == "RQ")
                        {
                            @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster), "Item")
                            @Html.RenderColumnsHeader("PullMaster", typeof(eTurns.DTO.ResPullMaster), "Pull")
                        }
                        else
                        {
                            @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster))
                        }
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
        <div class="editorForm" style="width: 80%">
            <input type="button" value="Add" id="btnAddAll" class="CreateBtn" style="float: left;
                margin-left: 15px; margin-top: 1px;" />
            <input type="button" value="Close" id="btnModelCancle" class="CreateBtn" style="float: left;
                margin-left: 5px; margin-top: 1px;" />
        </div>
        @*START : QTY Legends*@
        @Html.Partial("_QTYLegends")
        @*END : QTY Legends*@
    </div>
</div>
@*</div>*@
<div class="popBlock" id="targetItemModel">
    <div class="popBlockinner">
        <span id="spanGlobalMSGIM" class="WarningIcon"></span><a href="#" id="close" class="close">
            <img src="~/Content/images/popup-close.png" alt="" />
        </a>
    </div>
</div>
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />
<script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js")"></script>
<script type="text/javascript">
    var oTableItemModel;
    var sImageUrl = "/Content/images/";
    var anOpen = [];
    var IsSaveStateCalled = false;
    var aoTempData = null;
    var objColumnsMI = {};

    $(document).ready(function () {
        objColumnsMI = GetGridHeaderColumnsObject('ItemModeDataTable');

        AllowDeletePopup = false;

        $('#DivLoading').hide();

        $.ajaxSetup({ cache: false });
        var gaiSelected = [];
        var objaoColumns = new Array();
        objaoColumns.push({
            "mDataProp": null, "sClass": "read_only control center", "bSortable": false, "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">'
                                , "fnRender": function (obj, val) {
                                    if (obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '') {
                                        if ('@Model.CallingFromPageName.Contains("MOVEMTR")' == 'True') {
                                            return "<input type='button' value='@ResMoveMaterial.GridButtonMove' onclick='return OpenMoveMaterialPopup(this)' id='btnMoveItemStock' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' tabindex='-1'  />"
                                                            + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span>"
                                                           + "<span id='spnItemType' style='display:none'>" + obj.aData.ItemType + "</span>"
                                                           + "<span id='spnSerialNumberTracking' style='display:none'>" + obj.aData.SerialNumberTracking + "</span>";
                                        }
                                        else if ('@Model.CallingFromPageName.Contains("AddNewBarCode")' == 'True') {
                                            return "<input type='button' value='Assign' onclick='return AddNewBarcodeOfItem(this)' id='btnAssign' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' tabindex='-1'  />"
                                                           + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span>"
                                                           + "<span id='spnItemType' style='display:none'>" + obj.aData.ItemType + "</span>"
                                                           + "<span id='spnSerialNumberTracking' style='display:none'>" + obj.aData.SerialNumberTracking + "</span>";
                                        } else {
                                            return "<input type='button' value='Add' onclick='return AddSingleItemToQuickList(this)' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' tabindex='-1'  />" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span><span id='spnItemNumber' style='display:none'>" + obj.aData.ItemNumber + "</span><span id='spnDescription' style='display:none'>" + obj.aData.Description + "</span><span id='spnCost' style='display:none'>" + obj.aData.Cost + "</span>"
                                                + "<span id='spnIsEnforce' style='display:none'>" + obj.aData.IsEnforceDefaultReorderQuantity + "</span>"
                                                + "<span id='spnItemType' style='display:none'>" + obj.aData.ItemType + "</span>"
                                                + "<span id='spnReOrderQty' style='display:none'>" + obj.aData.DefaultReorderQuantity + "</span>"
                                                + "<span id='spnSerialNumberTracking' style='display:none'>" + obj.aData.SerialNumberTracking + "</span>";
                                        }
                                    }
                                    else {

                                        //var value = 'Load';
                                        var value = 'Add';
                                        //                                        if (gblActionName.toLowerCase() == "orderlist") {
                                        //                                            value = 'Add';
                                        //                                        }
                                        return "<input type='button' value='" + value + "' onclick='return AddQuickListToSelectedModule(this)' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' tabindex='-1'  />" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span><span id='spnItemNumber' style='display:none'>" + obj.aData.ItemNumber + "</span><span id='spnDescription' style='display:none'>" + obj.aData.Description + "</span><span id='spnCost' style='display:none'>" + obj.aData.Cost + "</span><span id='spnQLID' style='display:none'>" + obj.aData.QuickListGUID + "</span><span id='spnItemType' style='display:none'>" + obj.aData.ItemType + "</span>"
                                        + "<span id='spnSerialNumberTracking' style='display:none'>" + obj.aData.SerialNumberTracking + "</span>";

                                    }
                                }
        })
        
        objaoColumns.push({
            "mDataProp": null,
            "bSortable": false,
            "sClass": "read_only control center",
            "sDefaultContent": '',
            "fnRender": function (obj, val) {
                //                                    if (obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '') {
                if ('@Model.CallingFromPageName' == 'ORD') {
                    if (obj.aData.SerialNumberTracking == true) {
                        return '<input type="text" value="' + parseFloat(obj.aData.DefaultReorderQuantity).toFixed(0) + '" id="txtQty" class="numericinput text-boxinner" maxlength="10" style="width:60px;" />';
                    }
                    else {
                        return '<input type="text" value="' + parseFloat(obj.aData.DefaultReorderQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + '" id="txtQty" class="numericinput text-boxinner" maxlength="10" style="width:60px;" />';
                    }
                }
                else {
                    if (obj.aData.SerialNumberTracking == true) {
                        return '<input type="text" id="txtQty" class="numericinput text-boxinner" maxlength="10" style="width:60px;" />';
                    }
                    else {
                        return '<input type="text" id="txtQty" class="numericinput text-boxinner" maxlength="10" style="width:60px;" />';
                    }
                }
            }
        })
        objaoColumns.push({
            "bSortable": false,
            "fnRender": function (obj, val) {
                return '<img  id="ItemImageBox" width="120px" height="120px" alt="No Image" src="../Content/images/no-image.jpg" />';
            }

        })
        objaoColumns.push({ "mDataProp": "ID", "sClass": "read_only", "bVisible": false })
        objaoColumns.push({ "mDataProp": "ItemNumber", "sClass": "read_only", "sDefaultContent": '', "bSortable": true, "bSearchable": false })
        objaoColumns.push({
            "mDataProp": "Cost", "sClass": "read_only numericalign", "fnRender": function (obj, val) {
                if (obj.aData.Cost != null && obj.aData.Cost != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.Cost, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        })
        objaoColumns.push({ "mDataProp": "RoomName", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "Created", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.CreatedDate;
            }
        })
        objaoColumns.push({
            "mDataProp": "Updated", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.UpdatedDate;
            }
        })
        objaoColumns.push({ "mDataProp": "UpdatedByName", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "CreatedByName", "sClass": "read_only" })


        objaoColumns.push({ "mDataProp": "ManufacturerNumber", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "ManufacturerName", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "SupplierPartNo", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "SupplierName", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "UPC", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "UNSPSC", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "Description", "sClass": "read_only", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                if (obj.aData.Description == null || obj.aData.Description == undefined || obj.aData.Description == 'null')
                    obj.aData.Description = '';

                return "<div class='comment more'>" + obj.aData.Description + "</div>";
            }
        })
        objaoColumns.push({
            "mDataProp": "LongDescription", "sClass": "read_only", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                return "<div class='comment more'>" + obj.aData.LongDescription + "</div>";
            }
        })
        objaoColumns.push({ "mDataProp": "CategoryName", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "GLAccount", "sClass": "read_only numericalign" })
        objaoColumns.push({ "mDataProp": "Unit", "sClass": "read_only numericalign" })
        objaoColumns.push({ "mDataProp": "PricePerTerm", "sClass": "read_only numericalign" })
        objaoColumns.push({
            "mDataProp": "DefaultReorderQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.DefaultReorderQuantity != null && obj.aData.DefaultReorderQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.DefaultReorderQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "DefaultPullQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.DefaultPullQuantity != null && obj.aData.DefaultPullQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.DefaultPullQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })

        objaoColumns.push({ "mDataProp": "Markup", "sClass": "read_only numericalign" })
        objaoColumns.push({
            "mDataProp": "SellPrice", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.SellPrice != null && obj.aData.SellPrice != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.SellPrice, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "ExtendedCost", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.ExtendedCost != null && obj.aData.ExtendedCost != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.ExtendedCost, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        })
        objaoColumns.push({ "mDataProp": "LeadTimeInDays", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "Trend", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "Taxable", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "Consignment", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "StagedQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.StagedQuantity != null && obj.aData.StagedQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.StagedQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "InTransitquantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.InTransitquantity != null && obj.aData.InTransitquantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.InTransitquantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "OnOrderQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                if (isNaN(parseFloat(val)))
                    val = 0;
                return val;
            }
        })
        objaoColumns.push({
            "mDataProp": "OnTransferQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.OnTransferQuantity != null && obj.aData.OnTransferQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.OnTransferQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "SuggestedOrderQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.SuggestedOrderQuantity != null && obj.aData.SuggestedOrderQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.SuggestedOrderQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "RequisitionedQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.RequisitionedQuantity != null && obj.aData.RequisitionedQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.RequisitionedQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "AverageUsage", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.AverageUsage != null && obj.aData.AverageUsage != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.AverageUsage, 4) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 4) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "Turns", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.Turns != null && obj.aData.Turns != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.Turns, 4) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 4) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "OnHandQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.OnHandQuantity != null && obj.aData.OnHandQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.OnHandQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "IsItemLevelMinMaxQtyRequired", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
        })
        objaoColumns.push({
            "mDataProp": "CriticalQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.IsItemLevelMinMaxQtyRequired == "No") {
                    return "<span>" + 'N/A' + "</span>";
                }
                else {
                    if (obj.aData.CriticalQuantity != null && obj.aData.CriticalQuantity != NaN)
                        return "<span>" + FormatedCostQtyValues(obj.aData.CriticalQuantity, 2) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            }
        })
        objaoColumns.push({
            "mDataProp": "MinimumQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.IsItemLevelMinMaxQtyRequired == "No") {
                    return "<span>" + 'N/A' + "</span>";
                }
                else {
                    if (obj.aData.MinimumQuantity != null && obj.aData.MinimumQuantity != NaN)
                        return "<span>" + FormatedCostQtyValues(obj.aData.MinimumQuantity, 2) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            }
        })
        objaoColumns.push({
            "mDataProp": "MaximumQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.IsItemLevelMinMaxQtyRequired == "No") {
                    return "<span>" + 'N/A' + "</span>";
                }
                else {
                    if (obj.aData.MaximumQuantity != null && obj.aData.MaximumQuantity != NaN)
                        return "<span>" + FormatedCostQtyValues(obj.aData.MaximumQuantity, 2) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            }
        })
        objaoColumns.push({ "mDataProp": "WeightPerPiece", "sClass": "read_only numericalign" })
        objaoColumns.push({ "mDataProp": "ItemUniqueNumber", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "IsTransfer", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "IsPurchase", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "InventoryClassification", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "SerialNumberTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "LotNumberTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "DateCodeTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "ItemType", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        if (val == 1)
                                            return "Item";
                                        else if (val == 2)
                                            return "Quick List";
                                        else if (val == 3)
                                            return "Kit";
                                        else if (val == 4)
                                            return "Labor";
                                        else
                                            return "";
                                    }
        })
        objaoColumns.push({ "mDataProp": "ImagePath", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "IsLotSerialExpiryCost", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "OnReturnQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                if (isNaN(parseFloat(val)))
                    val = 0;
                return val;
            }
        })
                        if ('@(Model.CallingFromPageName)' == "RQ") {
                            objaoColumns.push(@(Html.RenderColumnsArray("ItemMaster", false, "Item")))
                            objaoColumns.push(@(Html.RenderColumnsArrayEditableObject("PullMaster", false)))
                        }
                        else {
                            objaoColumns.push(@(Html.RenderColumnsArray("ItemMaster", false)))
                        }
        //alert(objaoColumns.length);

        oTableItemModel = $('#ItemModeDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "350%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[3, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";
                /*START : QTY Legends*/

                if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'KIT') {
                    aData.MinimumQuantity = aData.MinimumQuantity ? aData.MinimumQuantity : 0;
                    aData.CriticalQuantity = aData.CriticalQuantity ? aData.CriticalQuantity : 0;
                    aData.OnHandQuantity = aData.CriticalQuantity ? aData.OnHandQuantity : 0;
                    if (aData.OnHandQuantity < aData.CriticalQuantity)
                        $(nRow).attr({ 'style': 'background-color:@eTurnsWeb.Helper.SessionHelper.CriticalQuantityBackColor !Important' });
                    else if (aData.OnHandQuantity < aData.MinimumQuantity)
                        $(nRow).attr({ 'style': 'background-color:@eTurnsWeb.Helper.SessionHelper.MinimumQuantityBackColor !Important' });
                }
                /*END : QTY Legends*/

                if ('@Model.CallingFromPageName.Contains("AddNewBarCode")' == 'True') {
                    $(nRow).find('#txtQty').parent().css('display', 'none');
                }
                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    "data": { Data: JSON.stringify(oData), ListName: '@strColumnSetupFor' },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                        if (oSettings.oLoadedState == null) {
                            oSettings.oLoadedState = $.extend(true, {}, oData);
                        }

                    }
                });

            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    "data": { ListName: '@strColumnSetupFor' },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '') {
                            o = JSON.parse(json.jsonData);
                        }
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content(Model.AjaxURLToFillItemGrid)',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }

                if (oSettings.aaSorting != null && oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];
                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                //                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                aoData.push({ "name": "SupplierID", "value": '@Model.SupplierID' });
                aoData.push({ "name": "ParentID", "value": '@Model.PerentID' });
                aoData.push({ "name": "ParentGUID", "value": '@Model.PerentGUID' });
                if ($('#ddlMoveType') !== undefined) {
                    aoData.push({ "name": "MoveType", "value": $('#ddlMoveType').val() });
                }
                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#ItemModeDataTable td').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });

                        if ($("#ItemModel_filter").val() != '') {
                            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
                        }
                        if ('@Model.CallingFromPageName.Contains("AddNewBarCode")' == 'True') {
                            $('#tdAddQty').css('display', 'none');
                        }
                        CallShowHideData();
                        //CallThisFunctionFromModel('success');

                        $(".text-boxQuantityFormat").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
                        });

                        $(".text-boxQuantityFormatSR").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: 0
                        });
                        var cols = $('#ItemModeDataTable').dataTable().fnSettings().aoColumns;
                        var colIdx = -1;
                        var bvisbl = true;
                        for (var i = 0; i < cols.length; i++) {
                            if ($.trim(cols[i].sTitle) === 'Qty') {
                                colIdx = i;
                                bvisbl = cols[i].bVisible;
                                break;
                            }
                        }
                        if ('@Model.CallingFromPageName.Contains("MOVEMTR")' == 'True' && bvisbl) {
                            $('#ItemModeDataTable').dataTable().fnSetColumnVis(colIdx, false, true);
                        }
                        else if ('@Model.CallingFromPageName.Contains("MOVEMTR")' == 'False' && !bvisbl) {
                            $('#ItemModeDataTable').dataTable().fnSetColumnVis(colIdx, true, true);
                        }
                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
                setTimeout(function () {
                    $('#ItemModelPS').find('#divQTYLegends').show(1000);
                }, 100);

            },
            "aoColumns": objaoColumns
        });

        $('.DTTT_container').css('z-index', '-1');

        if ('@isCost' == '@Boolean.FalseString') {
            ColumnsToHideinPopUp.push(4);
            ColumnsToHideinPopUp.push(22);
            ColumnsToHideinPopUp.push(23);
            ColumnsToHideinPopUp.push(24);

            // oTable.fnSetColumnVis(12, false);
            $('#ItemModeDataTable').dataTable().fnSetColumnVis(4, false);
            $('#ItemModeDataTable').dataTable().fnSetColumnVis(22, false);
            $('#ItemModeDataTable').dataTable().fnSetColumnVis(23, false);
            $('#ItemModeDataTable').dataTable().fnSetColumnVis(24, false);
        }





        $("#ColumnSortableModalIM22").dialog(
            {
                autoOpen: false,
                modal: true,
                width: 500,
                //title: "ReOrder Columns",
                title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
                draggable: true,
                resizable: true,
                open: function () {
                    GenerateColumnSortableIM();
                    $("#ColumnSortableIM").sortable({ axis: "y", containment: "parent" });
                }
            });

        $("#ColumnOrderSetupIM").click(function () {
            $("#ColumnSortableModalIM22").dialog("open");
            return false;
        });

        $("#ColumnOrderSetupIM22_Context").click(function () {
            $("#ColumnSortableModalIM22").dialog("open");
            return false;
        });

    });


    function GetOrderDetailObject(tr, PageName) {

        var txtQty = $(tr).find('#txtQty');
        var Qty = parseFloat($(txtQty).val());
        var apprQty = 0;
        if (Qty !== NaN && Qty !== undefined && Qty > 0 && parseInt('@Model.PerentID') > 0) {
            var itemID = $(tr).find('#spnItemID').text();
            var itemGUID = $(tr).find('#spnItemGUID').text();
            var vItemNumber = $(tr).find('#spnItemNumber').text();
            var vDescription = $(tr).find('#spnDescription').text();
            var isEnforce = $(tr).find('#spnIsEnforce').text();
            var reOrderQty = $(tr).find('#spnReOrderQty').text();
            var itemtype = $(tr).find('#spnItemType').text();
            var vSerialNumberTracking = $(tr).find('#spnSerialNumberTracking').text();
            var vCost = $(tr).find('#spnCost').text();
            if (vCost == null || vCost == "null")
                vCost = 0;

            var DetailData = {};

            var modulo = parseInt(Qty) % parseInt(reOrderQty);
            if (isEnforce == 'true' && modulo > 0) {
                var devideval = parseInt(parseInt(Qty) / parseInt(reOrderQty)) + 1;
                var newQty = reOrderQty * devideval;

                $('div#targetItemModel').fadeToggle();
                $("div#targetItemModel").delay(3000).fadeOut(200);
                $("#spanGlobalMSGIM").text("Added qty =" + Qty + "change to " + newQty + " due to enforce reorder quantity");
                $("#spanGlobalMSGIM").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                Qty = newQty;
            }
            if (parseInt('@Model.OrderStatus') == '@((int)OrderStatus.Transmitted)') {
                apprQty = Qty;
            }

            DetailData = {
                "ItemID": itemID
                          , "ItemGUID": itemGUID
                          , "RequestedQuantity": Qty
                          , 'OrderGUID': '@Model.PerentGUID'
                          , "Bin": '@Model.OrdStagingID'
                          , "RequiredDate": '@Model.OrdRequeredDate'
                          , "ApprovedQuantity": apprQty
            };

            return DetailData;
        }

        return null;
    }

    function AddItemToOrder(btn, PageName) {

        var arrItems = new Array();
        var arrRows = new Array();
        if (btn.id == 'btnAdd') {
            var tr = $(btn).parent().parent();
            $(tr).toggleClass('row_selected');
            var obj = GetOrderDetailObject(tr, PageName);
            if (obj !== null) {
                arrItems.push(obj);
            }
        }
        else if (btn.id === 'btnAddAll') {
            $('#ItemModeDataTable tbody tr').each(function () {
                if ($(this).attr('class').indexOf('row_selected') != -1) {
                    var obj = GetOrderDetailObject(this, PageName);
                    if (obj !== null) {
                        arrRows.push($(this));
                        arrItems.push(obj);
                    }
                }
            });
        }
        if (arrItems.length != undefined && arrItems.length > 0) {
            $.ajax({
                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: JSON.stringify({ 'objNewItems': arrItems, 'OrderID': '@Model.PerentID' }),
                dataType: 'json',
                type: 'POST',
                contentType: "application/json",
                async: false,
                cache: false,
                success: function (json) {
                    if (btn.id == 'btnAdd') {
                        $(btn).parent().parent().find('#txtQty').val('');
                        $('#ItemModeDataTable').dataTable().fnDeleteRow($(btn).parent().parent());
                    }
                    else if (btn.id === 'btnAddAll') {
                        $('#ItemModeDataTable').dataTable().fnDeleteRow($(btn).parent().parent());
                        $(btn).removeAttr("disabled");
                    }
                    $('#DivLoading').hide();
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $(btn).removeAttr("disabled");
                }
            });
        }
        else {
            $("#DivLoading").hide();
            $(btn).removeAttr("disabled");
        }
    }

    /* Cost Narrow Search Related Code  START */
    function CostNarroSearch(CostDDLObject) {
        //oTable.fnFilter($(CostDDLObject).val(),null,null,null);
        if ($(CostDDLObject).val() != "0_-1") {
            CostNarroSearchValue = $(CostDDLObject).val();
            DoNarrowSearchIM();
        }
        else {
            CostNarroSearchValue = '';
            DoNarrowSearchIM();
        }
    }
    var lastCheckedNewItemPopup;
    /* Cost Narrow Search Related Code  END */
    $("#ItemModeDataTable").on("touchstart click", "tbody tr", function (e) {

        // $(this).toggleClass('row_selected');
        if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text") {
            e.stopPropagation();
        } else {
            // $(this).toggleClass('row_selected');
            if (!lastCheckedNewItemPopup) {
                lastCheckedNewItemPopup = this;
            }

            if (e.shiftKey) {
                var start = $('#ItemModeDataTable tbody tr').index(this);
                var end = $('#ItemModeDataTable tbody tr').index(lastCheckedNewItemPopup);

                for (i = Math.min(start, end); i <= Math.max(start, end); i++) {
                    if (!$('#ItemModeDataTable tbody tr').eq(i).hasClass('row_selected')) {
                        $('#ItemModeDataTable tbody tr').eq(i).addClass("row_selected");
                    }
                }
                if (window.getSelection) {
                    if (window.getSelection().empty) {  // Chrome
                        window.getSelection().empty();
                    } else if (window.getSelection().removeAllRanges) {  // Firefox
                        window.getSelection().removeAllRanges();
                    }
                } else if (document.selection) {  // IE?
                    document.selection.empty();
                }
            } else if ((e.metaKey || e.ctrlKey)) {
                $(this).toggleClass('row_selected');
            } else {
                $(this).toggleClass('row_selected');
            }

            lastCheckedNewItemPopup = this;
        }

        var IsAddAllRequired = true;

        $('#ItemModeDataTable tbody tr').each(function () {
            if ($(this).hasClass('row_selected')) {
                var vQuickListGUID = $(this).find('#spnQLID').text();
                if (vQuickListGUID != '') {
                    IsAddAllRequired = false;
                }
            }
        });

        if (!IsAddAllRequired) {
            $("#btnAddAll").hide();
        }
        else {
            $("#btnAddAll").show();
        }

        return false;
    });


    function onlyNumeric(event) {
        var charCode = (event.which) ? event.which : event.keyCode

        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;

    }
    function fnFilterGlobalIM() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#ItemModel_filter") != 'undefined' && ($("#ItemModel_filter").val().length > 2 || $("#ItemModel_filter").val().length == 0)) {
            clearNarrowSearchFilterIM();
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            $('#ItemModeDataTable').dataTable().fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
        }
        else {
            $('#ItemModeDataTable td').removeHighlight();
            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
        }
    }



    $("#ItemModel_filter").keyup(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
        }
        else {
            fnFilterGlobalIM();
        }
    });


    $("#ItemModel_filter").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            $('#ItemModeDataTable').dataTable().fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
            return false;
        }
    });


    $("#clear_QLItemModel_filter").click(funClearFilterIM);

    function funClearFilterIM() {
        //Check length first
        if ($("#ItemModel_filter").val().length > 0) {
            $("#ItemModel_filter").val('');
            $('#ItemModeDataTable').dataTable().fnFilter(
                            $("#ItemModel_filter").val(),
                            null,
                            null,
                            null
                        );
        }
        $("#ItemModel_filter").focus();
        return false;
    }

    $('#PageNumberIM').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#GobtnIM").click();
            return false;
        }
    });

    $("#GobtnIM").click(function () {
        var pval = $('#PageNumberIM').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }

        if (pval == 0)
            return;

        $('#ItemModeDataTable').dataTable().fnPageChange(Number(pval - 1));
        $('#PageNumberIM').val('');
    });

    function GetObject(tr, PageName) {

        var txtQty = $(tr).find('#txtQty');
        var Qty = parseFloat($(txtQty).val());
        if (Qty !== NaN && Qty !== undefined && Qty > 0 && parseInt('@Model.PerentID') > 0) {

            var itemID = $(tr).find('#spnItemID').text();
            var itemGUID = $(tr).find('#spnItemGUID').text();
            var vItemNumber = $(tr).find('#spnItemNumber').text();
            var vDescription = $(tr).find('#spnDescription').text();
            var isEnforce = $(tr).find('#spnIsEnforce').text();
            var reOrderQty = $(tr).find('#spnReOrderQty').text();
            var itemtype = $(tr).find('#spnItemType').text();
            var vSerialNumberTracking = $(tr).find('#spnSerialNumberTracking').text();
            var vUDF1 = ''; var vUDF2 = ''; var vUDF3 = ''; var vUDF4 = ''; var vUDF5 = '';

            if ($(tr).find('#UDF1').length > 0) {
                if ($(tr).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tr).find('#UDF1 option:selected').text();
                }
                else {
                    vUDF1 = $(tr).find('#UDF1').val();
                }
            }

            if ($(tr).find('#UDF2').length > 0) {
                if ($(tr).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tr).find('#UDF2 option:selected').text();
                }
                else {
                    vUDF2 = $(tr).find('#UDF2').val();
                }
            }

            if ($(tr).find('#UDF3').length > 0) {
                if ($(tr).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tr).find('#UDF3 option:selected').text();
                }
                else {
                    vUDF3 = $(tr).find('#UDF3').val();
                }
            }

            if ($(tr).find('#UDF4').length > 0) {
                if ($(tr).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tr).find('#UDF4 option:selected').text();
                }
                else {
                    vUDF4 = $(tr).find('#UDF4').val();
                }
            }

            if ($(tr).find('#UDF5').length > 0) {
                if ($(tr).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tr).find('#UDF5 option:selected').text();
                }
                else {
                    vUDF5 = $(tr).find('#UDF5').val();
                }
            }


            var vCost = $(tr).find('#spnCost').text();
            if (vCost == null || vCost == "null")
                vCost = 0;

            var DetailData = {};
            if (PageName == "QL") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'QuickListID': '@Model.PerentID', 'QuickListGUID': '@Model.PerentGUID', "SerialNumberTracking": vSerialNumberTracking };
            }
            else if (PageName == "PS") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityLimit": Qty, 'ProjectID': '@Model.PerentID', 'ProjectGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
            }
            else if (PageName == "ORD") {
                var modulo = parseInt(Qty) % parseInt(reOrderQty);
                if (isEnforce == 'true' && modulo > 0) {
                    var devideval = parseInt(parseInt(Qty) / parseInt(reOrderQty)) + 1;
                    var newQty = reOrderQty * devideval;

                    DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": newQty, 'OrderID': '@Model.PerentID', 'OrderGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };

                    $('div#targetItemModel').fadeToggle();
                    $("div#targetItemModel").delay(3000).fadeOut(200);
                    $("#spanGlobalMSGIM").text("Added qty =" + Qty + "change to " + newQty + " due to enforce reorder quantity");
                    $("#spanGlobalMSGIM").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                }
                else {
                    DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'OrderID': '@Model.PerentID', 'OrderGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
                }
            }
            else if (PageName == "RQ") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityRequisitioned": Qty, 'RequisitionID': '@Model.PerentID', 'RequisitionGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemCost": vCost, "RequiredDate": '@Model.ReqRequiredDate', "SerialNumberTracking": vSerialNumberTracking, "PullUDF1": vUDF1, "PullUDF2": vUDF2, "PullUDF3": vUDF3, "PullUDF4": vUDF4, "PullUDF5": vUDF5 };
            }
            else if (PageName == "WO") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'WorkOrderID': '@Model.PerentID', 'WorkOrderGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "SerialNumberTracking": vSerialNumberTracking };
            }
            else if (PageName == "KIT") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityPerKit": Qty, 'KitID': '@Model.PerentID', 'KitGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemType": itemtype, "SerialNumberTracking": vSerialNumberTracking };
            }
            else if (PageName == "TRF") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'TransferID': '@Model.PerentID', 'TransferGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
            }
            else if (PageName == "AS") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'ScheduleID': '@Model.PerentID', 'ScheduleGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
            }
            return DetailData;
        }

        return null;
    }

    function AddItemToDetailTable(btn, PageName) {


        var arrItems = new Array();
        var arrRows = new Array();
        if (btn.id == 'btnAdd') {
            var tr = $(btn).parent().parent();
            //if ($(tr).attr('class').indexOf('row_selected') == -1) {
            $(tr).toggleClass('row_selected');
            //}
            var obj = GetObject(tr, PageName);
            if (obj !== null) {
                arrItems.push(obj);
            }
        }
        else if (btn.id === 'btnAddAll') {
            $('#ItemModeDataTable tbody tr').each(function () {
                if (PageName == 'ORD') {
                    if ($(this).attr('class').indexOf('row_selected') != -1) {
                        var obj = GetObject(this, PageName);
                        if (obj !== null) {
                            arrRows.push($(this));
                            arrItems.push(obj);
                        }
                    }
                } else {
                    var obj = GetObject(this, PageName);
                    if (obj !== null) {
                        arrRows.push($(this));
                        arrItems.push(obj);
                    }
                }
            });
        }
        if (arrItems.length != undefined && arrItems.length > 0) {
            $.ajax({
                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: { 'para': JSON.stringify(arrItems) },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (json) {
                    if (btn.id == 'btnAdd') {
                        $(btn).parent().parent().find('#txtQty').val('');
                        $('#ItemModeDataTable').dataTable().fnDeleteRow($(btn).parent().parent());
                    }
                    else if (btn.id === 'btnAddAll') {
                        $('#ItemModeDataTable').dataTable().fnDeleteRow($(btn).parent().parent());
                        $(btn).removeAttr("disabled");
                    }
                    $('#DivLoading').hide();
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $(btn).removeAttr("disabled");
                }
            });
        }
        else {
            $("#DivLoading").hide();
            $(btn).removeAttr("disabled");
        }
    }

    function AddSingleItemToQuickList(obj) {
        $(obj).attr("disabled", "disabled");

        $('#DivLoading').show();

        if ('@Model.CallingFromPageName' == 'ORD') {
            AddItemToOrder(obj, '@Model.CallingFromPageName');
            return;
        }
        else if ('@Model.CallingFromPageName' == 'PS' || '@Model.CallingFromPageName' == 'QL' || '@Model.CallingFromPageName' == 'RQ' || '@Model.CallingFromPageName' == 'WO' || '@Model.CallingFromPageName' == 'KIT' || '@Model.CallingFromPageName' == 'TRF' || '@Model.CallingFromPageName' == 'AS') {
            AddItemToDetailTable(obj, '@Model.CallingFromPageName');
            return;
        }

        var txxt = $(obj).parent().parent().find('#txtQty');
        var txtQty = txxt.val();
        if (txtQty != 'undefined' && txtQty.length > 0) {
            var trimtxtVal = txtQty.replace(/ /g, '');
            if (trimtxtVal.length > 0) {
                var ItemID = $(obj).parent().find('#spnItemID').text();
                var ItemGUID = $(obj).parent().find('#spnItemGUID').text();

                $.ajax({
                    url: '@Url.Content(Model.AjaxURLAddItemToSession)',
                    data: { 'pItemID': ItemID, 'pItemGUID': ItemGUID, 'pQuentity': trimtxtVal },
                    dataType: 'json',
                    type: 'POST',
                    async: false,
                    cache: false,
                    success: function (json) {
                        txxt.val('');
                        $('#ItemModeDataTable').dataTable().fnDraw();
                        CallThisFunctionFromModel(json.Status);
                    },
                    error: function (xhr) {
                        $('#DivLoading').hide();
                        $("#loading").hide();
                    }
                });
            }
        }
    }


    //////////////////////////////////// // new added for QL///////////////////////////////////START

    function AddQuickListToSelectedModule(obj) { // new added for QL

        $(obj).attr("disabled", "disabled");
        $('#DivLoading').show();
        if ('@Model.CallingFromPageName' == 'PS' || '@Model.CallingFromPageName' == 'QL' || '@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'WO' || '@Model.CallingFromPageName' == 'KIT' || '@Model.CallingFromPageName' == 'TRF' || '@Model.CallingFromPageName' == 'AS') {

            AddQuickListToDetailTable(obj, '@Model.CallingFromPageName');
            return;
        }
        else if ('@Model.CallingFromPageName' == 'RQ') {
            addQuickListToREQ(obj, '@Model.CallingFromPageName');
        }
    }

    function addQuickListToREQ(btn, PageName) {

        var vQuickListGUID = '';
        var arrItems = new Array();
        var arrRows = new Array();
        var qty = 0;
        if (btn.id == 'btnAdd') {
            var tr = $(btn).parent().parent();
            var obj = GetObjectForQLItems(tr, PageName);
            if (obj !== null) {
                vQuickListGUID = $(tr).find('#spnQLID').text();
                arrItems.push(obj);
                var txtQty = $(tr).find('#txtQty');
                if (txtQty != undefined || txtQty != null)
                    qty = parseFloat($(txtQty).val());
            }
        }
        else if (btn.id === 'btnAddAll') {
            $('#ItemModeDataTable tbody tr').each(function () {
                var obj = GetObject(this, PageName);
                if (obj !== null) {
                    arrRows.push($(this));
                    arrItems.push(obj);
                }
            });
        }
        if (arrItems.length != undefined && arrItems.length > 0) {
            $.ajax({
                url: '@Url.Action("AddQLToDetailTable", "Consume")',
                data: { 'ReqGUID': '@Model.PerentGUID', 'QuickListGUID': vQuickListGUID, 'QLQTY': qty },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (json) {
                    //$('#ItemModeDataTable').dataTable().fnDraw();
                    $(btn).parent().parent().css('display', 'none');
                    $('#DivLoading').hide();
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $(btn).removeAttr("disabled");
                }
            });
        }

    }
    function AddQuickListToDetailTable(btn, PageName) { // new added for QL

        var vQuickListGUID = '';
        var arrItems = new Array();
        var arrRows = new Array();
        var qty = 0;
        if (btn.id == 'btnAdd') {
            var tr = $(btn).parent().parent();
            var obj = GetObjectForQLItems(tr, PageName);
            if (obj !== null) {
                vQuickListGUID = $(tr).find('#spnQLID').text();
                arrItems.push(obj);
                var txtQty = $(tr).find('#txtQty');
                if (txtQty != undefined || txtQty != null)
                    qty = parseFloat($(txtQty).val());
            }
        }
        else if (btn.id === 'btnAddAll') {
            $('#ItemModeDataTable tbody tr').each(function () {
                var obj = GetObject(this, PageName);
                if (obj !== null) {
                    arrRows.push($(this));
                    arrItems.push(obj);
                }
            });
        }
        if (arrItems.length != undefined && arrItems.length > 0) {
            $.ajax({
                url: '@Url.Content("~/Master/AddQuickListToDetailTableWithoutCount")', //'@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: { 'para': JSON.stringify(arrItems), 'ModuleName': PageName, 'QuickListGUID': vQuickListGUID, 'QLQTY': qty },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (json) {
                    //json.Items
                    arrItems = new Array();
                    arrRows = new Array();
                    $(json.Items).each(function () {
                        var obj = GetObjectForItemPopUpFromQL(this, PageName);
                        if (obj !== null) {
                            arrRows.push($(this));
                            arrItems.push(obj);
                        }
                    });

                    if (arrItems.length != undefined && arrItems.length > 0) {
                        if ('@Model.CallingFromPageName' == 'ORD') {
                            $.ajax({
                                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                                data: JSON.stringify({ 'objNewItems': arrItems, 'OrderID': '@Model.PerentID' }),
                                dataType: 'json',
                                type: 'POST',
                                async: false,
                                contentType: 'application/json',
                                cache: false,
                                success: function (json) {
                                    //$('#ItemModeDataTable').dataTable().fnDraw();
                                    $(btn).parent().parent().css('display', 'none');
                                    $('#DivLoading').hide();
                                },
                                error: function (xhr) {
                                    $('#DivLoading').hide();
                                    $(btn).removeAttr("disabled");
                                }
                            });
                        }
                        else {
                            $.ajax({
                                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                                data: { 'para': JSON.stringify(arrItems) },
                                dataType: 'json',
                                type: 'POST',
                                async: false,
                                cache: false,
                                success: function (json) {
                                    //$('#ItemModeDataTable').dataTable().fnDraw();
                                    $(btn).parent().parent().css('display', 'none');
                                    $('#DivLoading').hide();
                                },
                                error: function (xhr) {
                                    $('#DivLoading').hide();
                                    $(btn).removeAttr("disabled");
                                }
                            });
                        }
                    }
                    else {
                        $("#DivLoading").hide();
                        $(btn).removeAttr("disabled");
                    }
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $(btn).removeAttr("disabled");
                }
            });
        }
        else {
            $("#DivLoading").hide();
            $(btn).removeAttr("disabled");
        }
    }
    function GetObjectForQLItems(tr, PageName) {// new added for QL

        var itemID = $(tr).find('#spnItemID').text();
        var itemGUID = $(tr).find('#spnItemGUID').text();
        var vItemNumber = $(tr).find('#spnItemNumber').text();
        var vDescription = $(tr).find('#spnDescription').text();
        var vCost = 0; //$(tr).find('#spnCost').text();
        var itemtype = $(tr).find('#spnItemType').text();
        var vSerialNumberTracking = $(tr).find('#spnSerialNumberTracking').text();
        var vUDF1 = ''; var vUDF2 = ''; var vUDF3 = ''; var vUDF4 = ''; var vUDF5 = '';

        if ($(tr).find('#UDF1').length > 0) {
            if ($(tr).find('#UDF1').attr("class") == 'selectBox') {
                vUDF1 = $(tr).find('#UDF1 option:selected').text();
            }
            else {
                vUDF1 = $(tr).find('#UDF1').val();
            }
        }

        if ($(tr).find('#UDF2').length > 0) {
            if ($(tr).find('#UDF2').attr("class") == 'selectBox') {
                vUDF2 = $(tr).find('#UDF2 option:selected').text();
            }
            else {
                vUDF2 = $(tr).find('#UDF2').val();
            }
        }

        if ($(tr).find('#UDF3').length > 0) {
            if ($(tr).find('#UDF3').attr("class") == 'selectBox') {
                vUDF3 = $(tr).find('#UDF3 option:selected').text();
            }
            else {
                vUDF3 = $(tr).find('#UDF3').val();
            }
        }

        if ($(tr).find('#UDF4').length > 0) {
            if ($(tr).find('#UDF4').attr("class") == 'selectBox') {
                vUDF4 = $(tr).find('#UDF4 option:selected').text();
            }
            else {
                vUDF4 = $(tr).find('#UDF4').val();
            }
        }

        if ($(tr).find('#UDF5').length > 0) {
            if ($(tr).find('#UDF5').attr("class") == 'selectBox') {
                vUDF5 = $(tr).find('#UDF5 option:selected').text();
            }
            else {
                vUDF5 = $(tr).find('#UDF5').val();
            }
        }

        var Qty = 0;

        var DetailData = {};
        if (PageName == "QL") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'QuickListID': '@Model.PerentID', 'QuickListGUID': '@Model.PerentGUID', "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "PS") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityLimit": Qty, 'ProjectID': '@Model.PerentID', 'ProjectGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "ORD") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'OrderID': '@Model.PerentID', 'OrderGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "RQ") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityRequisitioned": Qty, 'RequisitionID': '@Model.PerentID', 'RequisitionGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemCost": vCost, "RequiredDate": '@Model.ReqRequiredDate', "SerialNumberTracking": vSerialNumberTracking, "PullUDF1": vUDF1, "PullUDF2": vUDF2, "PullUDF3": vUDF3, "PullUDF4": vUDF4, "PullUDF5": vUDF5 };
        }
        else if (PageName == "WO") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'WorkOrderID': '@Model.PerentID', 'WorkOrderGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "KIT") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityPerKit": Qty, 'KitID': '@Model.PerentID', 'KitGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemType": itemtype, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "TRF") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'TransferID': '@Model.PerentID', 'TransferGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "AS") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'ScheduleID': '@Model.PerentID', 'ScheduleGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
        }
        return DetailData;
    }

    function GetObjectForItemPopUpFromQL(tr, PageName) {// new added for QL
        var itemID = $(tr)[0].ID;
        var itemGUID = $(tr)[0].GUID;
        var vItemNumber = $(tr)[0].ItemNumber;
        var vDescription = $(tr)[0].Description;
        var vCost = $(tr)[0].Cost;
        var Qty = $(tr)[0].QuickListItemQTY;
        var itemtype = $(tr)[0].ItemType;
        var vSerialNumberTracking = $(tr)[0].SerialNumberTracking
        var vUDF1 = '';
        var vUDF2 = '';
        var vUDF3 = '';
        var vUDF4 = '';
        var vUDF5 = '';
        if (PageName == "RQ") {
            vUDF1 = $(tr)[0].UDF1;
            vUDF2 = $(tr)[0].UDF2;
            vUDF3 = $(tr)[0].UDF3;
            vUDF4 = $(tr)[0].UDF4;
            vUDF5 = $(tr)[0].UDF5;
        }

        var DetailData = {};
        if (PageName == "QL") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'QuickListID': '@Model.PerentID', 'QuickListGUID': '@Model.PerentGUID', "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "PS") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityLimit": Qty, 'ProjectID': '@Model.PerentID', 'ProjectGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "ORD") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'OrderID': '@Model.PerentID', 'OrderGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "RQ") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityRequisitioned": Qty, 'RequisitionID': '@Model.PerentID', 'RequisitionGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemCost": vCost, "RequiredDate": '@Model.ReqRequiredDate', "SerialNumberTracking": vSerialNumberTracking, "PullUDF1": vUDF1, "PullUDF2": vUDF2, "PullUDF3": vUDF3, "PullUDF4": vUDF4, "PullUDF5": vUDF5 };
        }
        else if (PageName == "WO") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'WorkOrderID': '@Model.PerentID', 'WorkOrderGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "KIT") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityPerKit": Qty, 'KitID': '@Model.PerentID', 'KitGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemType": itemtype, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "TRF") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'TransferID': '@Model.PerentID', 'TransferGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "AS") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'ScheduleID': '@Model.PerentID', 'ScheduleGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
        }
        return DetailData;
    }

    //////////////////////////////////// // new added for QL///////////////////////////////////END


    $('#btnAddAll').click(function () {
        $("#DivLoading").show();
        $(this).attr("disabled", "disabled");

        if ('@Model.CallingFromPageName' == 'ORD') {
            AddItemToOrder(this, '@Model.CallingFromPageName');
            return;
        }
        else if ('@Model.CallingFromPageName' === 'PS' || '@Model.CallingFromPageName' === 'QL' || '@Model.CallingFromPageName' == 'RQ' || '@Model.CallingFromPageName' == 'WO' || '@Model.CallingFromPageName' == 'KIT' || '@Model.CallingFromPageName' == 'TRF' || '@Model.CallingFromPageName' == 'AS') {
            AddItemToDetailTable(this, '@Model.CallingFromPageName');
            return;
        }
        var arrItems = new Array();
        $('#ItemModeDataTable tbody tr').each(function () {
            var txxt = $(this).find('#txtQty');
            var txtQty = txxt.val();
            if (txtQty != 'undefined') {
                if (txtQty.length > 0) {
                    var trimtxtVal = txtQty.replace(/ /g, '');
                    if (trimtxtVal.length > 0) {
                        var itemID = $(this).find('#spnItemID').text();
                        var itemGUID = $(this).find('#spnItemGUID').text();
                        var data = { "ID": itemID, "GUID": itemGUID, "Qty": trimtxtVal };
                        arrItems.push(data);
                        txxt.val('');
                    }
                }
            }
        });

        $.ajax({
            url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
            data: { 'para': JSON.stringify(arrItems) },
            dataType: 'json',
            type: 'POST',
            async: false,
            cache: false,
            success: function (json) {
                $('#ItemModeDataTable').dataTable().fnDraw();
                CallThisFunctionFromModel(json.Status);
            },
            error: function (xhr) {
                $('#DivLoading').hide();
                $("#loading").hide();
            }
        });
    });

    $("#btnModelCancle").click(function () {
        //$('.modalCloseImg').click();

        if ($('#ItemModel') != undefined && $('#ItemModel').length == 1 && $('#ItemModel').parent().css('display') == "block") {
            $("#ItemModel").dialog('close');
        }
        else if ($('#ItemModelPS') != undefined && $('#ItemModelPS').length == 1 && $('#ItemModelPS').parent().css('display') == "block") {
            $("#ItemModelPS").dialog('close');
        }
        else if ($('#ItemModelTemp') != undefined && $('#ItemModelTemp').length == 1 && $('#ItemModelTemp').parent().css('display') == "block") {
            $("#ItemModelTemp").dialog('close');
        }
        else {
            $('.ui-dialog-titlebar-close').click();
        }
        //CallThisFunctionFromModel('success');
    });

    // used for refresh the grid manually...
    $('#refreshGridIM').live('click', function () {
        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

        $('#ItemModeDataTable').dataTable().fnDraw();

    });


    //**************************** Not used Code *************************//

    $("#reordersettingIM").click(function () {
        $("#divRefreshBlockIM").toggle();
    });

    $("#ColumnSortableModalIM").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
        draggable: false,
        resizable: false,
        open: function () {

            GenerateColumnSortableIM();
            $("#ColumnSortableIM").sortable({ axis: "y", containment: "parent" });
        }
    });

    $("#ColumnOrderSetupIM").click(function () {
        $("#ColumnSortableModalIM").dialog("open");

        return false;
    });

    function GenerateColumnSortableIM() {
        $('#ColumnSortableIM li').each(function (index) {
            $(this).remove();
        });

        for (i = 0, iLen = $('#ItemModeDataTable').dataTable().fnSettings().aoColumns.length; i < iLen; i++) {
            var oColumn = $('#ItemModeDataTable').dataTable().fnSettings().aoColumns[i];
            var li = document.createElement('li');
            li.id = GetColumnIndex1(oColumn.sTitle.trim());
            li.className = 'ui-state-default';
            li.innerHTML = oColumn.sTitle.trim();
            if (oColumn.bVisible) {
                li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            }
            else
                li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            $('#ColumnSortableIM').append(li);
        }
    }

    var GetColumnIndex1 = function (ColumnName) {
        return objColumnsMI[ColumnName];
    };

    function UpdateColumnOrderIM(_ListName) {
        var _Order = $('#ColumnSortableIM').sortable("toArray");
        var __Order = _Order.toString().split(",");
        for (var i = 0; i < __Order.length; i++) {
            __Order[i] = parseInt(__Order[i], 10);
        }
        $('#ItemModeDataTable').dataTable().fnSettings().oLoadedState.ColReorder = __Order;

        var _abVisCols = [];
        for (i = 0, iLen = $('#ItemModeDataTable').dataTable().fnSettings().aoColumns.length; i < iLen; i++) {
            var checked = $("#" + i + "_").is(":checked");
            _abVisCols.push(checked);
        }

        $('#ItemModeDataTable').dataTable().fnSettings().oLoadedState.abVisCols = _abVisCols;
        $.ajax({
            "url": '@Url.Content("~/Master/SaveGridState")',
            //data: { Data: JSON.stringify($('#ItemModeDataTable').dataTable().fnSettings().oLoadedState), ListName: _ListName },
            data: { Data: JSON.stringify($('#ItemModeDataTable').dataTable().fnSettings().oLoadedState), ListName: '@strColumnSetupFor' },
            "dataType": "json",
            'cache': false,
            "async": false,
            "success": function (json) {
                o = json;

                // aoTempData = $('#ItemModeDataTable').dataTable().fnSettings().oLoadedState;
                //$('#ItemModeDataTable').dataTable().fnDraw(false);
                //  alert(gblActionName);

                $("#ColumnSortableModalIM").dialog("close");
                if (gblActionName.toLowerCase() == "quicklist" || gblActionName.toLowerCase() == "orderlist" || gblActionName.toLowerCase() == "returnorderlist" || gblActionName.toLowerCase() == "transferlist") {
                    $("#ItemModel").dialog("close");
                    OpenItemPopup();
                }
                else if (gblActionName.toLowerCase() == "itemmasterlist") {
                    $("#ItemModelPS").dialog("close");
                    AddNewKitComponent();
                }
                else if (gblActionName.toLowerCase() == "projectlist") {
                    $("#ItemModelPS").dialog("close");
                    OpenItemPopup();
                }
                else if (gblActionName.toLowerCase() == "workorderlist") {
                    $("#ItemModelTemp").dialog("close");
                    OpenItemPopup();
                }
                else if (gblActionName.toLowerCase() == "movematerial") {
                    callbacknew();
                }
                else if (gblActionName.toLowerCase() == "requisitionlist") {
                    $("#ItemModelTemp").dialog("close");
                    OpenItemPopup();
                }

            }
        });
    }

    function AddNewBarcodeOfItem(btn) {
        var tr = $(btn).parent().parent();
        var itemGUID = $(tr).find('#spnItemGUID').text();

        $.ajax({
            url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
            data: JSON.stringify({ 'ItemGuid': itemGUID, 'BarcodeText': '@Model.PerentGUID' }),
            dataType: 'json',
            contentType: "application/json",
            type: 'POST',
            async: false,
            cache: false,
            success: function (json) {

                $('.ui-dialog-titlebar-close').click();

            },
            error: function (xhr) {
                alert('Error');
            }
        });

    }

</script>
