@model eTurnsWeb.Models.ItemModelPerameter

@{
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    string strColumnSetupFor = "ItemMasterModelList";
    if (!string.IsNullOrEmpty(Model.CallingFromPageName))
    {
        strColumnSetupFor = "ItemMasterModelList" + "_" + Model.CallingFromPageName;
    }
    var settings = new GridHeaderSettings() { DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = false, dataViewType = DataViewType.None, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = strColumnSetupFor };
    //var settings = new GridHeaderSettings() { dataViewType = DataViewType.Both, DataTableName = "myDataTable", ListViewhref = "#", PictureViewhref = "ItemMasterPictureView", DisplayUDFButton = true, UDFSetupFor = "ItemMaster", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "ItemMasterList", DisplayDeleteButton = true };
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);

    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ItemMaster", ListName = "ItemMasterModel" };

    if (Model.CallingFromPageName.ToLower() == "ps")
    {
        modelCommon.ItemModelCallFromPageName = "ps";
    }

    if (Model.ModelHeader.ToLower().Contains("add items to order"))
    {
        modelCommon.Text = "Order";
    }
    else if (Model.ModelHeader.ToLower().Contains("add kit component to kit"))
    {
        modelCommon.Text = "Kit";
    }
    else if (Model.ModelHeader.ToLower().Contains("counts"))
    {
        modelCommon.Text = "inventory count";
    }
    else
    {
        modelCommon.Text = "eTurns";
    }

    modelCommon.ControlID = Model.CallingFromPageName;
    Int64 PrntID = 0;
    Int64.TryParse(Model.PerentID, out PrntID);

    modelCommon.ID = PrntID;
    bool isPullUDF = new eTurns.DAL.UDFDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetNonDeletedUDFCountByUDFTableName("PullMaster", eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID) > 0;
    bool isOrderDetailsUDF = new eTurns.DAL.UDFDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetNonDeletedUDFCountByUDFTableName("OrderDetails", eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID) > 0;
    bool isQuoteDetailsUDF = new eTurns.DAL.UDFDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetNonDeletedUDFCountByUDFTableName("QuoteDetails", eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID) > 0;
    string UDF1Text = eTurnsWeb.Helper.ResourceUtils.GetResource("ResPullMaster", "UDF1", true);
    string UDF2Text = eTurnsWeb.Helper.ResourceUtils.GetResource("ResPullMaster", "UDF2", true);
    string UDF3Text = eTurnsWeb.Helper.ResourceUtils.GetResource("ResPullMaster", "UDF3", true);
    string UDF4Text = eTurnsWeb.Helper.ResourceUtils.GetResource("ResPullMaster", "UDF4", true);
    string UDF5Text = eTurnsWeb.Helper.ResourceUtils.GetResource("ResPullMaster", "UDF5", true);

    bool UDF1IsRequired = Html.GetUdfIsRequiredStatus("PullMaster", "UDF1");
    bool UDF2IsRequired = Html.GetUdfIsRequiredStatus("PullMaster", "UDF2");
    bool UDF3IsRequired = Html.GetUdfIsRequiredStatus("PullMaster", "UDF3");
    bool UDF4IsRequired = Html.GetUdfIsRequiredStatus("PullMaster", "UDF4");
    bool UDF5IsRequired = Html.GetUdfIsRequiredStatus("PullMaster", "UDF5");



    //---------------------------------------------------------------
    //
    int _iQuickListType = 1;

    MvcHtmlString strtoPutarra = null;
    if (Model.CallingFromPageName == "QL")
    {
        _iQuickListType = (int)Model.SelectedQuickListType;
        //modelCommon.ID = (long)_iQuickListType;
        string[] arr = new string[] { };
        string newStrinVal = "";
        string str = Convert.ToString(Html.RenderColumnsArrayEditableObject("QuickListItems", IsObjectRender: true, PushColumnObject: "objaoColumns", isUDFOrderRequire: true)) ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(str))
        {
            arr = str.Split(new string[] { "[#]" }, StringSplitOptions.RemoveEmptyEntries);
        }
        if (arr != null && arr.Length > 0)
        {
            foreach (var item in arr)
            {
                string ActralUDF = string.Empty;
                if (item.ToString().ToLower().IndexOf("udf1") >= 0)
                {
                    ActralUDF = "UDF1";
                }
                if (item.ToString().ToLower().IndexOf("udf2") >= 0)
                {
                    ActralUDF = "UDF2";
                }
                if (item.ToString().ToLower().IndexOf("udf3") >= 0)
                {
                    ActralUDF = "UDF3";
                }
                if (item.ToString().ToLower().IndexOf("udf4") >= 0)
                {
                    ActralUDF = "UDF4";
                }
                if (item.ToString().ToLower().IndexOf("udf5") >= 0)
                {
                    ActralUDF = "UDF5";
                }
                newStrinVal = newStrinVal + item.Replace("return \"<", "return \"<input type='hidden' id='hdn" + ActralUDF + "' value='\"+obj.aData." + ActralUDF + "+\"' /><");

            }

        }
        strtoPutarra = new MvcHtmlString(newStrinVal);
    }
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);

    string commonControlType_PullPO = "Textbox";

    var objPOMaster = new eTurns.DAL.UDFDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetSinglePullPOPlain(eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.RoomID);
    if (objPOMaster != null)
    {
        commonControlType_PullPO = objPOMaster.UDFControlType;
    }

}
@*<h2>
        @Model.ModelHeader
    </h2>*@
@if (Model.CallingFromPageName == "RQ" && isPullUDF)
{
    <style type="text/css">
        .itemmaster-model-popup .dataTables_length {
            top: -95px;
        }

        .itemmaster-model-popup .dataTables_paginate {
            top: -85px;
        }

        .itemmaster-model-popup .td-udfs {
            padding: 3px;
        }
    </style>
}
<script>
    var btnaddallButtonShow = true;
    var ListAjaxRequestCount = 0;
    if ('@Model.CallingFromPageName' == "MOVEMTR") {
        btnaddallButtonShow = false;
    }
</script>

<div class="userListBlock">
    <div id="tab7" class="tabContener" style="width: 99%">
        <div class="searchWrapper">
            <div class="searchBlock">
                <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                <div class="searchinputB">
                    <input type="text" class="searchinput" id="ItemModel_filter" />
                    <a href="javascript:void(0);" class="xclose">
                        <img src="~/Content/images/x.png" alt="X" id="clear_QLItemModel_filter" />
                    </a>
                </div>
            </div>
        </div>
        @Html.ItemModelGridTopHeader(settings)
        <script src="@Url.Content("~/Scripts/PageScripts/NarrowSearchForItemModel.js?v=" + version)" type="text/javascript"></script>
        @if (Model.LoadNarrowSearchAfterListBind == null || Model.LoadNarrowSearchAfterListBind == false)
        {
            @Html.Partial("NarrowSearchForItemModel", modelCommon)
        }
        else
        {
            <div id="divNarrowSearch">

            </div>
        }
        <div class="userContent itemmaster-model-popup">
            @if (Model.CallingFromPageName == "RQ")
            {
                <table style="margin-bottom:1px;margin-top:1px;" id="tblPullCommonUDF" class="tblPullCommonUDF">
                    <thead>
                        <tr>
                            <th></th>
                            <th id="THPullOrderNumber">@eTurns.DTO.ResPullMaster.PullOrderNumber</th>
                            @if (isPullUDF)
                            {
                                @Html.RenderColumnsHeaderByName("PullMaster", typeof(eTurns.DTO.ResPullMaster))
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><b style="font-size:13px;">&nbsp;&nbsp;&nbsp;Use this</b> <input type="checkbox" id="chkUsePullCommonPopupUDF" /></td>
                            <td>
                                <span style="position:relative">
                                    @if (commonControlType_PullPO == "Textbox")
                                    {
                                        <input type="text" id="txtPullOrderNumberCommonPopup" class="text-boxinner" maxlength="128" style="width:93%;" />
                                    }
                                    else if (commonControlType_PullPO == "Dropdown")
                                    {
                                        @Html.RenderColumnsArrayForPullOrderMaster("PullPoMaster", controlIDPostfix: "Popup")
                                    }
                                    else
                                    {
                                        <input type="text" id="txtPullOrderNumberCommonPopup" class="text-boxinner AutoPullOrderNumber" maxlength="128" style="width:93%;" autocomplete="off" />
                                        <a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;" class="ShowAllOptionsOrderNumber">
                                            <img src="/Content/images/arrow_down_black.png" alt="select" />
                                        </a>
                                    }
                                </span>
                            </td>
                            @if (isPullUDF)
                            {
                                @Html.RenderColumnsArrayEditableObjectForDOMByName("PullMaster", controlIDPostfix: "PullCommonPopup")
                            }
                        </tr>
                    </tbody>
                </table>
            }
            <table id="ItemModeDataTable" class="display">
                <thead>
                    <tr>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.RowNo
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.AddNew
                        </th>
                        @if (Model.CallingFromPageName != "MOVEMTR")
                        {
                            <th id="tdAddQty" style="padding-right:2px;">
                                @eTurns.DTO.Resources.ResCommon.Qty
                            </th>

                        }

                        @if ((Model.CallingFromPageName == "QL" && Convert.ToString(Model.SelectedQuickListType) == "Count") || Model.CallingFromPageName == "ICNT")
                        {
                            <th id="tdAddConsignedQty">
                                Consigned Qty
                            </th>
                        }
                        <th>
                            @eTurns.DTO.Resources.ResCommon.Image
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.ID
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Cost
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.RoomName
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.CreatedOn
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.UpdatedOn
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.UpdatedBy
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.CreatedBy
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ManufacturerNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ManufacturerName
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SupplierPartNo
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Supplier
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.UPC
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.UNSPSC
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Description
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.LongDescription
                        </th>
                        <th>
                            @eTurns.DTO.ResCategoryMaster.Category
                        </th>
                        <th>
                            @eTurns.DTO.ResGLAccount.GLAccount
                        </th>
                        <th>
                            @eTurns.DTO.ResUnitMaster.Unit
                        </th>
                        @*
                            <th>
                                @eTurns.DTO.ResItemMaster.PricePerTerm
                            </th>*@
                        <th>
                            @eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.DefaultPullQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Markup
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SellPrice
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ExtendedCost
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.LeadTimeInDays
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Trend
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Taxable
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Consignment
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.StagedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.InTransitquantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnOrderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnTransferQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SuggestedOrderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.RequisitionedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.AverageUsage
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Turns
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnHandQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsItemLevelMinMaxQtyRequired
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.CriticalQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.MinimumQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.MaximumQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.WeightPerPiece
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemUniqueNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsTransfer
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsPurchase
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.InventoryClassification
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SerialNumberTracking
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.LotNumberTracking
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.DateCodeTracking
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemType
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ImagePath
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.IsLotSerialExpiryCost
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnReturnQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.CostUOMName
                        </th>
                        @if (Model.CallingFromPageName == "MOVEMTR")
                        {
                            <th>
                                @eTurns.DTO.ResItemMaster.BinNumber
                            </th>
                        }

                        <th>
                            @eTurns.DTO.Resources.ResCommon.AddedFrom
                        </th>
                        <th>
                            @eTurns.DTO.Resources.ResCommon.EditedFrom
                        </th>

                        @if (Model.CallingFromPageName == "RQ")
                        {
                            @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster), "Item")
                            @Html.RenderColumnsHeader("PullMaster", typeof(eTurns.DTO.ResPullMaster), "Pull")
                        }
                        else if (Model.CallingFromPageName == "ORD")
                        {
                            @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster), "Item")
                        }
                        else
                        {
                            @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster))
                        }
                        @if (Model.CallingFromPageName == "ORD" || Model.CallingFromPageName == "RETORD" || Model.CallingFromPageName == "RQ" ||
                            Model.CallingFromPageName == "QL" || Model.CallingFromPageName == "ICNT" ||
                            (Model.CallingFromPageName == "TRF" && Model.TransferRequestType == RequestType.In) || Model.CallingFromPageName == "Quote")
                        {
                            <th>
                                @ResItemMaster.BinList
                            </th>
                        }
                        @if (Model.CallingFromPageName == "RQ")
                        {
                            <th>
                                @eTurns.DTO.ResItemMaster.RequiredDate
                            </th>
                            <th>
                                @eTurns.DTO.ResPullMaster.PullOrderNumber
                            </th>
                        }
                        @if (Model.CallingFromPageName == "QL")
                        {
                            @Html.RenderColumnsHeader("QuickListItems", typeof(eTurns.DTO.ResQuickListItems))
                        }
                        @if (Model.CallingFromPageName == "ORD" && isOrderDetailsUDF)
                        {
                            @Html.RenderColumnsHeader("OrderDetails", typeof(eTurns.DTO.ResOrderDetails), "OrderDetails")
                        }
                        @if (Model.CallingFromPageName == "Quote" && isQuoteDetailsUDF)
                        {
                            @Html.RenderColumnsHeader("QuoteDetails", typeof(eTurns.DTO.ResQuoteDetail), "QuoteDetails")
                        }
                        @if (Model.CallingFromPageName == "ORD" || Model.CallingFromPageName == "RETORD" || Model.CallingFromPageName == "ICNT" || Model.CallingFromPageName == "Quote")
                        {
                            <th>
                                @eTurns.DTO.ResOrder.Comment
                            </th>
                        }

                        @if (Model.CallingFromPageName == "ORD" || Model.CallingFromPageName == "RETORD" || Model.CallingFromPageName == "Quote")
                        {
                            <th>
                                @eTurns.DTO.ResOrder.OrderItemCost
                            </th>
                        }
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            @Html.Partial("_QTYLegends")
        </div>
        <div class="editorForm" style="width: 23%">
            <input type="button" value="@ResCommon.Add" id="btnAddAll" class="CreateBtn" style="float: left;
                margin-left: 5px; margin-top: 1px;" />
            <input type="button" value="@ResCommon.Close" id="btnModelCancle" class="CreateBtn" style="float: left;
                margin-left: 5px; margin-top: 1px;" />
        </div>
        @*START : QTY Legends*@

        @*END : QTY Legends*@
    </div>
</div>
@*</div>*@
<div class="popBlock" id="targetItemModel">
    <div class="popBlockinner">
        <span id="spanGlobalMSGIM" class="WarningIcon"></span><a href="#" id="close" class="close">
            <img src="~/Content/images/popup-close.png" alt="" />
        </a>
    </div>
</div>
<link rel="stylesheet" type="text/css" href="@Url.Content("/Content/tabstyle.css")" />
<script type='text/javascript' src="@Url.Content("/Scripts/TabCommon.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>
<script type="text/javascript">
    var oTableItemModel;
    var sImageUrl = "/Content/images/";
    var anOpen = [];
    var IsSaveStateCalled = false;
    var aoTempData = null;
    var objColumnsMI = {};
    $('#ItemModeDataTable').find('input.ItemPopupLoc').off('click');
    $('#ItemModeDataTable').on('click', "input.ItemPopupLoc", function (e) {

        $('#ItemModeDataTable').find('input.ItemPopupLoc').off('focus');
        var ajaxURL = '/Master/GetBinForItemOrStaging';
        var datatoPass = {};
        //Model.CallingFromPageName == "ORD" || Model.CallingFromPageName == "RQ" || Model.CallingFromPageName == "QL"
        var stagingName = $('#txtStagingName').val();
        var includeQty = false;
        var tr = $(this).parent().parent().parent();
        var itmGuid = $(tr).find('#spnItemGUID').text();
        var hdnIsLoadMoreLocations = $(tr).find("#hdnIsLoadMoreLocations").val();
        //var itmGuid, stagingName, includeQty, hdnIsLoadMoreLocations;
        //itmGuid = $(this).parent().parent().find('#spnItemGUID').text();
        //stagingName = '';
        //includeQty = false;

        if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'RETORD') {
            ajaxURL = '/Master/GetBinForItemOrStaging';
            datatoPass = { 'ItemGuid': itmGuid, 'StagingHeaderName': stagingName, 'IncludeQty': includeQty, 'NameStartWith': '', 'IsLoadMoreLocations': hdnIsLoadMoreLocations };
        }
        else if ('@Model.CallingFromPageName' == 'RQ') {
            ajaxURL = '/Master/GetBinForItemOrStaging';
            datatoPass = { 'ItemGuid': itmGuid, 'StagingHeaderName': stagingName, 'IncludeQty': includeQty, 'NameStartWith': '', 'IsLoadMoreLocations': hdnIsLoadMoreLocations };
        }
        else if ('@Model.CallingFromPageName' == 'QL') {
            ajaxURL = '/Master/GetBinForItemOrStaging';
            datatoPass = { 'ItemGuid': itmGuid, 'StagingHeaderName': stagingName, 'IncludeQty': includeQty, 'NameStartWith': '', 'IsLoadMoreLocations': hdnIsLoadMoreLocations };
        }
        $(this).autocomplete("destroy");
        $(this).removeData('autocomplete');
        $(this).autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: ajaxURL,
                    type: 'POST',
                    data: JSON.stringify(datatoPass),
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data) {
                        response($.map(data, function (Items) {
                            return {
                                label: Items.Key.replace('[|EmptyStagingBin|]', ''),
                                value: Items.Key.replace('[|EmptyStagingBin|]', ''),
                                selvel: Items.ID,
                                oinfo: Items.OtherInfo2
                            }
                        }));
                    },
                    error: function (err) {
                    }
                });
            },
            autoFocus: false,
            minLength: 1,
            select: function (event, ui) {
                if (ui.item.value == MoreLocation) {
                    $(tr).find("#hdnIsLoadMoreLocations").val("true");
                    $(this).trigger("focus");
                    $(this).autocomplete("search", " ");
                    return false;
                }
                else {

                    $(this).val(ui.item.value);
                    $(this).parents("td").find("input#hdnLocationId").val(ui.item.selvel);
                    if (parseFloat(ui.item.oinfo) > 0) {
                        $(this).parents('tr').find('#txtQty').val(ui.item.oinfo);
                    }
                    else {
                        var dfQty = $(this).parents('td').find('#hdnDRQ').val();
                        $(this).parents('tr').find('#txtQty').val(dfQty);
                    }
                }
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                $('ul.ui-autocomplete').css('overflow-y', 'auto');
                $('ul.ui-autocomplete').css('max-height', '300px');
                $('ul.ui-autocomplete').css('z-index', '99999');
            },
            close: function () {
                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            },
            change: function (event, ui) {
            }
        }).bind("focus", function () {
            $(this).autocomplete("search", " ");
            //$(objTxtselector).autocomplete("search", $(objTxtselector).val());
        });
        $('#ItemModeDataTable').find('input.ItemPopupLoc').on('click');
    });

    $('table#ItemModeDataTable tbody').off('click', 'a.show-all-options');
    $('table#ItemModeDataTable tbody').on('click', 'a.show-all-options', function () {
        $(this).siblings(".udf-editable-dropdownbox").autocomplete("search", " ");
        $(this).siblings('.udf-editable-dropdownbox').trigger("focus");
        //$('ul.ui-autocomplete').css('overflow-y', 'auto');
        //$('ul.ui-autocomplete').css('max-height', '300px');
        //$('ul.ui-autocomplete').css('z-index', '99999');
    });

    $('table#ItemModeDataTable tbody').off('click', 'a.ShowAllOptionsOrderNumber');
    $('table#ItemModeDataTable tbody').on('click', 'a.ShowAllOptionsOrderNumber', function () {
        $(this).siblings(".AutoPullOrderNumber").autocomplete("search", " ");
        $(this).siblings('.AutoPullOrderNumber').trigger("focus");
    });

    $('#ItemModeDataTable, #tblPullCommonUDF').off('focus', "input.AutoPullOrderNumber");
    $('#ItemModeDataTable, #tblPullCommonUDF').on('focus', "input.AutoPullOrderNumber", function (e) {

        var ajaxURL = '/Pull/GetPullOrderNumberForNewPullGrid';
        var tr = $(this).parent().parent().parent();
        //var itmGuid = _NewConsumePull.getItemDataFromRow($(tr)).spnItemGUID; //$(tr).find('#spnItemGUID').text();

        var $this = $(this);

        _AutoCompleteWrapper.init($this
            , ajaxURL
            , function (request) {
                var obj = JSON.stringify({ 'NameStartWith': request.term });
                return obj;
            },
            function (data) {
                return $.map(data, function (Items) {
                    return {
                        label: Items.Value,
                        value: Items.Value
                    }
                })
            }
            , function (curVal, selectedItem) {
                //        $(this).val(ui.item.value);
            }
            , function (selectedItem) {

            }
            , true, true);

    });


    $(document).ready(function () {
        objColumnsMI = GetIMGridHeaderColumnsObject('ItemModeDataTable');

        AllowDeletePopup = false;

        $('#DivLoading').hide();

        var weightDP = '@ViewBag.WeightDP';

        //$.ajaxSetup({ cache: false });
        var gaiSelected = [];
        var objaoColumns = new Array();
        objaoColumns.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });
        objaoColumns.push({
            "mDataProp": null, "sClass": "read_only control center NotHide", "bSortable": false, "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">'
                                , "fnRender": function (obj, val) {
                                    if (obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '') {
                                        if ('@Model.CallingFromPageName.Contains("MOVEMTR")' == 'True') {
                                            return "<input type='button' value='@ResMoveMaterial.GridButtonMove' onclick='return OpenMoveMaterialPopup(this)' id='btnMoveItemStock' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' tabindex='-1'  />"
                                                            + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span>"
                                                           + "<span id='spnItemType' style='display:none'>" + obj.aData.ItemType + "</span>"
                                                           + "<span id='spnSerialNumberTracking' style='display:none'>" + obj.aData.SerialNumberTracking + "</span>"
                                                           + "<span id='spnLotNumberTracking' style='display:none'>" + obj.aData.LotNumberTracking + "</span>";
                                        }
                                        else if ('@Model.CallingFromPageName.Contains("AddNewBarCode")' == 'True') {
                                            return "<input type='button' value='Assign' onclick='return AddNewBarcodeOfItem(this)' id='btnAssign' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' tabindex='-1'  />"
                                                           + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span>"
                                                           + "<span id='spnItemType' style='display:none'>" + obj.aData.ItemType + "</span>"
                                                           + "<span id='spnSerialNumberTracking' style='display:none'>" + obj.aData.SerialNumberTracking + "</span>";
                                        } else {
                                            var Cost = 0;
                                            if ('@Model.CallingFromPageName' == 'RQ') {
                                                Cost = obj.aData.SellPrice;
                                            }
                                            else {
                                                Cost = obj.aData.Cost;
                                            }

                                            return "<input type='button' value='@ResCommon.Add' onclick='return AddSingleItemToQuickList(this)' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' tabindex='-1'  />"
                                                + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>"
                                                + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span><span id='spnItemNumber' style='display:none'>"
                                                + obj.aData.ItemNumber + "</span><span id='spnDescription' style='display:none'>"
                                                + obj.aData.Description
                                                + "</span><span id='spnCost' style='display:none'>" + Cost + "</span>"
                                                + "<span id='spnIsEnforce' style='display:none'>" + obj.aData.IsEnforceDefaultReorderQuantity + "</span>"
                                                + "<span id='spnItemType' style='display:none'>" + obj.aData.ItemType + "</span>"
                                                + "<span id='spnReOrderQty' style='display:none'>" + obj.aData.DefaultReorderQuantity + "</span>"
                                                + "<span id='spnSerialNumberTracking' style='display:none'>" + obj.aData.SerialNumberTracking + "</span>"
                                                + "<span id='spnSupplierID' style='display:none'>" + obj.aData.SupplierID + "</span>"
                                                + "<span id='spnSupplierPartNo' style='display:none'>" + obj.aData.SupplierPartNo + "</span>"
                                                + "<span id='spnSupplierName' style='display:none'>" + obj.aData.SupplierName + "</span>";
                                        }
                                    }
                                    else {

                                        //var value = 'Load';
                                        var value = '@ResCommon.Add';
                                        //                                        if (gblActionName.toLowerCase() == "orderlist") {
                                        //                                            value = 'Add';
                                        //                                        }
                                        return "<input type='button' value='" + value + "' onclick='return AddQuickListToSelectedModule(this)' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' tabindex='-1'  />" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span><span id='spnItemNumber' style='display:none'>" + obj.aData.ItemNumber + "</span><span id='spnDescription' style='display:none'>" + obj.aData.Description + "</span><span id='spnCost' style='display:none'>" + obj.aData.Cost + "</span><span id='spnQLID' style='display:none'>" + obj.aData.QuickListGUID + "</span><span id='spnItemType' style='display:none'>" + obj.aData.ItemType + "</span>"
                                        + "<span id='spnSerialNumberTracking' style='display:none'>" + obj.aData.SerialNumberTracking + "</span>";

                                    }
                                }
        });

        if ('@Model.CallingFromPageName' != "MOVEMTR")
        {
            objaoColumns.push({
            "mDataProp": null,
            "bSortable": false,
            "sClass": "read_only control center nosort",
            "sDefaultContent": '',
            "fnRender": function (obj, val) {
                //                                    if (obj.aData.QuickListGUID == null || obj.aData.QuickListGUID == '') {


                if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'RETORD' || '@Model.CallingFromPageName' == 'Quote') {
                    if ('@Model.CallingFromPageName' == 'ORD' && (obj.aData.IsEnforceDefaultReorderQuantity || obj.aData.IsBinEnforceDefaultReorderQuantity)) {
                        return '<input type="text" value="' + parseFloat(obj.aData.DefaultReorderQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + '" id="txtQty" class="numericinput text-boxinner" maxlength="10" style="width:85%;min-width:40px;" />';
                    }
                    else {
                        return '<input type="text" value="' + parseFloat(obj.aData.ItemDefaultReorderQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + '" id="txtQty" class="numericinput text-boxinner" maxlength="10" style="width:85%;min-width:40px;" />';
                    }
                }
                else if ('@Model.CallingFromPageName' == 'AS') {
                    // return '<input type="text" id="txtQty" value="' + parseFloat(obj.aData.DefaultPullQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + '" class="numericinput text-boxinner" maxlength="10" style="width:93%;" />';
                    if ((!isNaN(parseFloat(obj.aData.DefaultPullQuantity)))) {
                        return '<input type="text" id="txtQty" value="' + parseFloat(obj.aData.DefaultPullQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + '" class="numericinput text-boxinner" maxlength="10" style="width:85%;min-width:40px;" />';
                    }
                    else {
                        return '<input type="text" id="txtQty" value="' + parseFloat(1).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + '" class="numericinput text-boxinner" maxlength="10" style="width:85%;min-width:40px;" />';
                    }
                }
                else if ('@Model.CallingFromPageName' == 'RQ') {
                    if ((!isNaN(parseFloat(obj.aData.DefaultPullQuantity)))) {
                        return '<input type="text" id="txtQty" value="' + parseFloat(obj.aData.DefaultPullQuantity).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + '" class="numericinput text-boxinner" maxlength="10" style="width:85%;min-width:40px;padding-right:2px;" />';
                    }
                    else {
                        return '<input type="text" id="txtQty" value="' + parseFloat(1).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + '" class="numericinput text-boxinner" maxlength="10" style="width:85%;min-width:40px;padding-right:2px;" />';
                    }
                }
                else {
                    if (obj.aData.SerialNumberTracking == true) {
                        return '<input type="text" id="txtQty" class="numericinput text-boxinner" maxlength="10" style="width:85%;min-width:40px;" />';
                    }
                    else {
                        return '<input type="text" id="txtQty" class="numericinput text-boxinner" maxlength="10" style="width:85%;min-width:40px;" />';
                    }
                }
            }
        });
        }

        if (('@Model.CallingFromPageName' == 'QL' && '@Model.SelectedQuickListType' == 'Count') || ('@Model.CallingFromPageName' == 'ICNT')) {
            objaoColumns.push({
                "mDataProp": null,
                "bSortable": false,
                "sClass": "read_only control center ",
                "sDefaultContent": '',
                "fnRender": function (obj, val) {

                    if (obj.aData.Consignment == true) {
                        return '<input type="text" id="txtConsignedQty" class="numericinput text-boxinner" maxlength="10" style="width:60px;" />';
                    }
                    else {
                        return '<input type="text" id="txtConsignedQty" readonly="readonly" value="NA" class="numericinput text-boxinner numericsonly disableBack" maxlength="10" style="width:60px;" />';
                    }
                }
            });
        }

        objaoColumns.push({
            "mDataProp": "ImagePath", "sDefaultContent": '', "sClass": "read_only", "bVisible": false, "fnRender": function (obj, val) {

                if ((obj.aData.ImagePath != '' && obj.aData.ImagePath != null) || (obj.aData.ItemImageExternalURL != '' && obj.aData.ItemImageExternalURL != null)) {

                    if (obj.aData.ImageType != '' && obj.aData.ImageType != null && obj.aData.ImageType == 'ImagePath' && obj.aData.ImagePath != '' && obj.aData.ImagePath != null) {
                        var path = '/Uploads/InventoryPhoto/';
                        var entid = '@eTurnsWeb.Helper.SessionHelper.EnterPriceID.ToString()';
                        var companyid = '@eTurnsWeb.Helper.SessionHelper.CompanyID.ToString()';
                        var roomid = '@eTurnsWeb.Helper.SessionHelper.RoomID.ToString()';

                        return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + path + entid + "/" + companyid + "/" + roomid + "/" + obj.aData.ID + "/" + obj.aData.ImagePath + '">';
                    }
                    else if (obj.aData.ImageType != '' && obj.aData.ImageType != null && obj.aData.ImageType == "ExternalImage" && obj.aData.ItemImageExternalURL != '' && obj.aData.ItemImageExternalURL != null) {
                        return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + obj.aData.ItemImageExternalURL + '">';
                    }
                    else {
                        return "<img src='../Content/images/no-image.jpg'  width='120px' height='120px'/>";
                    }
                }
                else {
                    return "<img src='../Content/images/no-image.jpg' width='120px' height='120px' />";
                }
            }
        })
        objaoColumns.push({ "mDataProp": "ID", "sClass": "read_only", "bVisible": false })
        objaoColumns.push({ "mDataProp": "ItemNumber", "sClass": "read_only", "sDefaultContent": '', "bSortable": true, "bSearchable": false })
        objaoColumns.push({

            "mDataProp": "Cost", "sClass": "read_only numericalign isCost", "fnRender": function (obj, val) {

                if ('@Model.CallingFromPageName' != 'MNTNANCE') {
                    if (obj.aData.Cost != null && obj.aData.Cost != NaN)
                        return "<span>" + FormatedCostQtyValues(obj.aData.Cost, 1) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                }
                else {
                    if (obj.aData.Cost != null && obj.aData.Cost != NaN)
                        return "<input type='text' class='numericinput text-boxinner' maxlength='10' style='width:60px;' id='itemCost' value='" + FormatedCostQtyValues(obj.aData.Cost, 1) + "' />";
                    else
                        return "<input type='text' class='numericinput text-boxinner' maxlength='10' style='width:60px;' id='itemCost' value='" + FormatedCostQtyValues(0, 1) + "' />";

                }
            }
        })
        objaoColumns.push({ "mDataProp": "RoomName", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "Created", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.CreatedDate;
            }
        })
        objaoColumns.push({
            "mDataProp": "Updated", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.UpdatedDate;
            }
        })
        objaoColumns.push({ "mDataProp": "UpdatedByName", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "CreatedByName", "sClass": "read_only" })


        objaoColumns.push({ "mDataProp": "ManufacturerNumber", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "ManufacturerName", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "SupplierPartNo", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "SupplierName", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "UPC", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "UNSPSC", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "Description", "sClass": "read_only", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                if (obj.aData.Description == null || obj.aData.Description == undefined || obj.aData.Description == 'null')
                    obj.aData.Description = '';

                return "<div class='comment more'>" + obj.aData.Description + "</div>";
            }
        })
        objaoColumns.push({
            "mDataProp": "LongDescription", "sClass": "read_only", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                return "<div class='comment more'>" + obj.aData.LongDescription + "</div>";
            }
        })
        objaoColumns.push({ "mDataProp": "CategoryName", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "GLAccount", "sClass": "read_only numericalign" })
        objaoColumns.push({ "mDataProp": "Unit", "sClass": "read_only numericalign" })
        //objaoColumns.push({ "mDataProp": "PricePerTerm", "sClass": "read_only numericalign isCost" })
        objaoColumns.push({
            "mDataProp": "DefaultReorderQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.DefaultReorderQuantity != null && obj.aData.DefaultReorderQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.DefaultReorderQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "DefaultPullQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.DefaultPullQuantity != null && obj.aData.DefaultPullQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.DefaultPullQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })

        objaoColumns.push({ "mDataProp": "Markup", "sClass": "read_only numericalign isCost", })
        objaoColumns.push({
            "mDataProp": "SellPrice", "sClass": "read_only numericalign isCost",
            "fnRender": function (obj, val) {
                if (obj.aData.SellPrice != null && obj.aData.SellPrice != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.SellPrice, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "ExtendedCost", "sClass": "read_only numericalign isCost",
            "fnRender": function (obj, val) {
                if (obj.aData.ExtendedCost != null && obj.aData.ExtendedCost != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.ExtendedCost, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        })
        objaoColumns.push({ "mDataProp": "LeadTimeInDays", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "Trend", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "Taxable", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "Consignment", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "StagedQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.StagedQuantity != null && obj.aData.StagedQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.StagedQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "InTransitquantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.InTransitquantity != null && obj.aData.InTransitquantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.InTransitquantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "OnOrderQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                if (isNaN(parseFloat(val)))
                    val = 0;
                return FormatedCostQtyValues(val, 2);
            }
        })
        objaoColumns.push({
            "mDataProp": "OnTransferQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.OnTransferQuantity != null && obj.aData.OnTransferQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.OnTransferQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "SuggestedOrderQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.SuggestedOrderQuantity != null && obj.aData.SuggestedOrderQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.SuggestedOrderQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "RequisitionedQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.RequisitionedQuantity != null && obj.aData.RequisitionedQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.RequisitionedQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "AverageUsage", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.AverageUsage != null && obj.aData.AverageUsage != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.AverageUsage, 4) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 4) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "Turns", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.Turns != null && obj.aData.Turns != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.Turns, 4) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 4) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "OnHandQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.OnHandQuantity != null && obj.aData.OnHandQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.OnHandQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objaoColumns.push({
            "mDataProp": "IsItemLevelMinMaxQtyRequired", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
        })
        objaoColumns.push({
            "mDataProp": "CriticalQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.IsItemLevelMinMaxQtyRequired == "No") {
                    return "<span>" + 'N/A' + "</span>";
                }
                else {
                    if (obj.aData.CriticalQuantity != null && obj.aData.CriticalQuantity != NaN)
                        return "<span>" + FormatedCostQtyValues(obj.aData.CriticalQuantity, 2) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            }
        })
        objaoColumns.push({
            "mDataProp": "MinimumQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.IsItemLevelMinMaxQtyRequired == "No") {
                    return "<span>" + 'N/A' + "</span>";
                }
                else {
                    if (obj.aData.MinimumQuantity != null && obj.aData.MinimumQuantity != NaN)
                        return "<span>" + FormatedCostQtyValues(obj.aData.MinimumQuantity, 2) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            }
        })
        objaoColumns.push({
            "mDataProp": "MaximumQuantity", "sClass": "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.IsItemLevelMinMaxQtyRequired == "No") {
                    return "<span>" + 'N/A' + "</span>";
                }
                else {
                    if (obj.aData.MaximumQuantity != null && obj.aData.MaximumQuantity != NaN)
                        return "<span>" + FormatedCostQtyValues(obj.aData.MaximumQuantity, 2) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            }
        })
        objaoColumns.push({
            "mDataProp": "WeightPerPiece", "sClass": "read_only numericalign", "fnRender": function (obj, val) {
                if (weightDP != undefined && weightDP != null && weightDP != '')
                    return "<span>" + (Math.round(val * Math.pow(10, weightDP)) / Math.pow(10, weightDP)).toFixed(weightDP) + "</span>";
                else
                    return val;
            }
 })
        objaoColumns.push({ "mDataProp": "ItemUniqueNumber", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "IsTransfer", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "IsPurchase", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({ "mDataProp": "InventoryClassificationName", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "SerialNumberTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "LotNumberTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "DateCodeTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
        })
        objaoColumns.push({
            "mDataProp": "ItemType", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        if (val == 1)
                                            return "Item";
                                        else if (val == 2)
                                            return "Quick List";
                                        else if (val == 3)
                                            return "Kit";
                                        else if (val == 4)
                                            return "Labor";
                                        else
                                            return "";
                                    }
        })
        objaoColumns.push({ "mDataProp": "ImagePath", "sClass": "read_only", "bVisible": false })
        objaoColumns.push({ "mDataProp": "IsLotSerialExpiryCost", "sClass": "read_only" })
        objaoColumns.push({
            "mDataProp": "OnReturnQuantity", "sClass": "read_only numericalign", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                if (isNaN(parseFloat(val)))
                    val = 0;
                return FormatedCostQtyValues(val, 2);
            }
        })
        objaoColumns.push({ "mDataProp": "CostUOMName", "sClass": "read_only" })
        if ('@(Model.CallingFromPageName)' == "MOVEMTR")
        {
            objaoColumns.push({ "mDataProp": "BinNumber", "sClass": "read_only" })
        }
        objaoColumns.push({ "mDataProp": "AddedFrom", "sClass": "read_only" })
        objaoColumns.push({ "mDataProp": "EditedFrom", "sClass": "read_only" })
        if ('@(Model.CallingFromPageName)' == "RQ") {
            objaoColumns.push(@(Html.RenderColumnsArray("ItemMaster", false, "Item")))
            objaoColumns.push(@(Html.RenderColumnsArrayEditableObject("PullMaster", false, isUDFOrderRequire:true)))
        }
        else {
            objaoColumns.push(@(Html.RenderColumnsArray("ItemMaster", false, "Item")))
        }
        if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'RETORD' || '@Model.CallingFromPageName' == 'RQ' ||
            '@Model.CallingFromPageName' == 'QL' || '@Model.CallingFromPageName' == 'ICNT' ||
            ('@Model.CallingFromPageName' == "TRF" && '@Model.TransferRequestType' == '@RequestType.In') || '@Model.CallingFromPageName' == 'Quote' ) {
            objaoColumns.push({
                "mDataProp": "DefaultLocationName",
                "bSortable": true,
                "sClass": "read_only control center NotHide ",
                "sDefaultContent": '',
                "fnRender": function (obj, val) {

                    //var select = '<select name="ddlItemSourceBins" id="ddlItemSourceBins" class="selectBox"  style="width:150px;">'
                    //for (var i = 0; i < val.length; i++)
                    //{

                    //    select += '<option value="' + val[i].ID + '" >' + val[i].BinNumber + '</options>';
                    //}
                    //select += '</select>';
                    //return select;

                    var strBinName = obj.aData.DefaultLocationName;
                    if (strBinName == null || strBinName == 'null') {
                        strBinName = '';
                    }

                    if ('@HasOnTheFlyEntryRight' == 'False') {
                        var select = '<span style="display:none">"' + strBinName + '"</span> <span style="position:relative">'
                           + '<input class="ItemPopupLoc text-boxinner udf-editable-dropdownbox" id="ddlItemSourceBins" maxlength="128" name="ddlItemSourceBins" type="text" value="' + strBinName + '" autocomplete="off" role="textbox" aria-autocomplete="list" aria-haspopup="true" style="width:120px;" readonly="readonly" />'
                           + '<input type="hidden" id="hdnItemGuid" value="' + obj.aData.GUID + '" />'
                           + '<input type="hidden" id="hdnLocationId" value="' + obj.aData.DefaultLocation + '" />'
                           + '<input type="hidden" id="hdnIsLoadMoreLocations" value="false"  />'
                           + '<input type="hidden" id="hdnselectedIDs" />'
                           + '<a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:1px;z-index:9999 !important;" class="show-all-options">'
                           + '<img src="/Content/images/arrow_down_black.png" alt="select"></a>'
                           + '</span>';
                        return select;
                    }
                    else {

                        var select = '<span style="display:none">"' + strBinName + '"</span> <span style="position:relative">'
                            + '<input class="ItemPopupLoc text-boxinner udf-editable-dropdownbox" id="ddlItemSourceBins" maxlength="128" name="ddlItemSourceBins" type="text" value="' + strBinName + '" autocomplete="off" role="textbox" aria-autocomplete="list" aria-haspopup="true" style="width:120px;" />'
                            + '<input type="hidden" id="hdnItemGuid" value="' + obj.aData.GUID + '" />'
                            + '<input type="hidden" id="hdnLocationId" value="' + obj.aData.DefaultLocation + '" />'
                            + '<input type="hidden" id="hdnIsLoadMoreLocations" value="false"  />'
                            + '<input type="hidden" id="hdnselectedIDs" />'
                            + '<input type="hidden" id="hdnDRQ" value="' + obj.aData.ItemDefaultReorderQuantity + '"/>'
                            + '<a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:1px;z-index:9999 !important;" class="show-all-options">'
                            + '<img src="/Content/images/arrow_down_black.png" alt="select"></a>'
                            + '</span>';

                        return select;
                    }
                }
            })
        }

        if ('@(Model.CallingFromPageName)' == "RQ") {
            objaoColumns.push({
                "mDataProp": null,
                "bSortable": false,
                "sClass": "read_only control center ",
                "sDefaultContent": '',
                "fnRender": function (obj, val) {
                    var date = '@Model.ReqRequiredDate';

                    return "<input value='" + date + "' onkeypress='return false;' type='text' style='width:80px;background:white;' readonly='readonly' class='myDatePicker text-box' id='hdnRequiredDate_" + obj.aData.GUID + "' />";
                }
            })

            objaoColumns.push(@(Html.RenderColumnsArrayForPullPO("PullPoMaster", FixedName: "txtPullOrderNumber", PrependComma: false)))
        }

        if ('@(Model.CallingFromPageName)' == "QL") {
            @strtoPutarra
        }
        if ('@Model.CallingFromPageName' == 'ORD' && '@isOrderDetailsUDF' == 'True') {

            objaoColumns.push(@(Html.RenderColumnsArrayEditableObject("OrderDetails", false, isUDFOrderRequire:true)))
        }
        if ('@Model.CallingFromPageName' == 'Quote' && '@isQuoteDetailsUDF' == 'True' )
        {
            objaoColumns.push(@(Html.RenderColumnsArrayEditableObject("QuoteDetails", false, isUDFOrderRequire:true)))
        }
        if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'RETORD' || '@Model.CallingFromPageName' == 'ICNT'
            || '@Model.CallingFromPageName' == 'Quote') {
            objaoColumns.push({
                "mDataProp": null,
                "bSortable": false,
                "sClass": "read_only control center ",
                "sDefaultContent": '',
                "fnRender": function (obj, val) {
                    return '<input type="text" value="" id="txtLineItemComment" class="text-boxinner" style="width:150px;" />';
                }
            });
        }

        if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'RETORD' || '@Model.CallingFromPageName' == 'Quote') {
            objaoColumns.push({
                "mDataProp": null,
                "bSortable": false,
                "sClass": "read_only control center ",
                "sDefaultContent": '',
                "fnRender": function (obj, val) {

                    if (obj.aData.OrderItemCost != null && obj.aData.OrderItemCost != NaN) {
                        var Cost = obj.aData.OrderItemCost;
                        return '<input type="text" value="' + FormatedCostQtyValues(Cost, 1) + '" id="txtOrderItemCost" class="numericinput text-boxinner" maxlength="5"  style="width:50px;" />';
                    }
                    else {
                        var Cost = 0;
                        if (obj.aData.OrderItemCost != null) {
                            Cost = obj.aData.OrderItemCost;
                        }
                        return '<input type="text" value="' + FormatedCostQtyValues(Cost, 1) + '" id="txtOrderItemCost" class="numericinput text-boxinner" maxlength="5"  style="width:50px;" />';
                    }
                }
            });
        }

        //alert(objaoColumns.length);
        //$("[id^='hdnRequiredDate_']").datepicker({ dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat' });
        //$(".myDatePicker").datepicker({ dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat' });

        oTableItemModel = $('#ItemModeDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "350%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[5, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    //  nRow.className = "GridDeleatedArchivedRow";
                    $(nRow).css('background-color', '#B9BCBF');
                else if (aData.IsDeleted == true)
                    // nRow.className = "GridDeletedRow";
                    $(nRow).css('background-color', '#FFCCCC');
                else if (aData.IsArchived == true)
                    //   nRow.className = "GridArchivedRow";
                    $(nRow).css('background-color', '#CCFFCC');
                /*START : QTY Legends*/

                if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'RETORD' || '@Model.CallingFromPageName' == 'KIT'
                    || '@Model.CallingFromPageName' == 'Quote' || '@Model.CallingFromPageName' == 'QL') {
                    //aData.MinimumQuantity = aData.MinimumQuantity ? aData.MinimumQuantity.replace("<span>", "").replace("</span>", "") : 0;
                    //aData.CriticalQuantity = aData.CriticalQuantity ? aData.CriticalQuantity.replace("<span>", "").replace("</span>", "") : 0;
                    //aData.OnHandQuantity = aData.CriticalQuantity ? aData.OnHandQuantity.replace("<span>", "").replace("</span>", "") : 0;
                    aData.MinimumQuantity = aData.MinimumQuantity ? aData.MinimumQuantity : 0;
                    aData.CriticalQuantity = aData.CriticalQuantity ? aData.CriticalQuantity : 0;
                    var regex = "<span>";
                    aData.CriticalQuantity = aData.CriticalQuantity.replace(regex, "");
                    aData.MinimumQuantity = aData.MinimumQuantity.replace(regex, "");
                    regex = "</span>";
                    aData.CriticalQuantity = aData.CriticalQuantity.replace(regex, "");
                    aData.MinimumQuantity = aData.MinimumQuantity.replace(regex, "");

                    var OnHandQTY = 0;
                    OnHandQTY = parseFloat($(aData.OnHandQuantity).text());
                    if (OnHandQTY < aData.CriticalQuantity) {

                        $(nRow).attr({ 'style': 'background-color:@eTurnsWeb.Helper.SessionHelper.CriticalQuantityBackColor !Important' });
                    }
                    else if (OnHandQTY < aData.MinimumQuantity)
                        $(nRow).attr({ 'style': 'background-color:@eTurnsWeb.Helper.SessionHelper.MinimumQuantityBackColor !Important' });
                }
                @*if ($(nRow).find('#ddlItemSourceBins').length > 0) {
                    var staLocName = $(nRow).find("input[type='hidden'][name='hdnStagingBinName']").val();
                    $.ajax({
                        "url": '@Url.Content("~/Master/GetBinsOfItemByOrderId")',
                        "data": { 'StagingName': '', NameStartWith: '', ItemGUID: aData.GUID, QtyRequired: false, OnlyHaveQty: false, 'OrderId': '@Model.PerentID' },
                        "async": false,
                        "cache": false,
                        "dataType": "json",
                        "success": function (result) {

                            if (result.length > 0) {
                                $(nRow).find('#ddlItemSourceBins').empty();
                                for (var i = 0; i < result.length; i++) {
                                    if (result[i].OtherInfo1 == "DefaultLocation") {
                                        $(nRow).find('#ddlItemSourceBins').append('<option value="' + result[i].ID + '" selected="selected" >' + result[i].Key + '</options>');
                                    }
                                    else {
                                        $(nRow).find('#ddlItemSourceBins').append('<option value="' + result[i].ID + '">' + result[i].Key + '</options>');
                                    }
                                }
                            }
                        }
                    });
                }*@
                /*END : QTY Legends*/

                if ('@Model.CallingFromPageName.Contains("AddNewBarCode")' == 'True') {
                    $(nRow).find('#txtQty').parent().css('display', 'none');
                }
                @*if ('@Model.CallingFromPageName' != 'QL' || '@Model.SelectedQuickListType' != 'Count') {
                    $(nRow).find('#txtConsignedQty').parent().css('display', 'none');
                }*@
                if (this.fnSettings() != null)
                {
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                }

                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";

                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    "data": { Data: JSON.stringify(oData), ListName: '@strColumnSetupFor' },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                        if (oSettings.oLoadedState == null) {
                            oSettings.oLoadedState = $.extend(true, {}, oData);
                        }

                    }
                });

            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    "data": { ListName: '@strColumnSetupFor' },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    "success": function (json) {

                        if (json.jsonData != '') {
                            o = JSON.parse(json.jsonData);
                        }
                        //var ColreOrder = o.ColReorder.toString().split(',');
                        if ('@(Model.CallingFromPageName)' == "RQ") {
                            if (json.jsonData != '') {
                                var InvisibleUDF = 0;
                                var UDF1Index = objColumnsMI['Pull ' + '@UDF1Text'];
                                if (UDF1Index != null && UDF1Index != undefined) {
                                    if ('@UDF1IsRequired' == 'True') {
                                        o.abVisCols[UDF1Index] = true;
                                    }
                                    else if (o.abVisCols[UDF1Index] == false) {
                                        @*$("th:contains('@UDF1Text')").hide();
                                    $('#UDF1PullCommon').closest('td').hide();*@
                                        $("table.tblPullCommonUDF th:contains('@UDF1Text')").html('');
                                        $('#UDF1PullCommonPopup').closest('td').html('');
                                        InvisibleUDF++;
                                    }
                                }
                                else
                                    InvisibleUDF++;

                                var UDF2Index = objColumnsMI['Pull ' + '@UDF2Text'];
                                if (UDF2Index != null && UDF2Index != undefined) {
                                    if ('@UDF2IsRequired' == 'True') {
                                        o.abVisCols[UDF2Index] = true;
                                    }
                                    else if (o.abVisCols[UDF2Index] == false) {
                                        @*$("th:contains('@UDF2Text')").hide();
                                    $('#UDF2PullCommon').closest('td').hide();*@
                                        $("table.tblPullCommonUDF th:contains('@UDF2Text')").html('');
                                        $('#UDF2PullCommonPopup').closest('td').html('');
                                        InvisibleUDF++;
                                    }
                                }
                                else
                                    InvisibleUDF++;

                                var UDF3Index = objColumnsMI['Pull ' + '@UDF3Text'];
                                if (UDF3Index != null && UDF3Index != undefined) {
                                    if ('@UDF3IsRequired' == 'True') {
                                        o.abVisCols[UDF3Index] = true;
                                    }
                                    else if (o.abVisCols[UDF3Index] == false) {
                                        @*$("th:contains('@UDF3Text')").hide();
                                    $('#UDF3PullCommon').closest('td').hide();*@
                                        $("table.tblPullCommonUDF th:contains('@UDF3Text')").html('');
                                        $('#UDF3PullCommonPopup').closest('td').html('');
                                        InvisibleUDF++;
                                    }
                                }
                                else
                                    InvisibleUDF++;

                                var UDF4Index = objColumnsMI['Pull ' + '@UDF4Text'];
                                if (UDF4Index != null && UDF4Index != undefined) {
                                    if ('@UDF4IsRequired' == 'True') {
                                        o.abVisCols[UDF4Index] = true;
                                    }
                                    else if (o.abVisCols[UDF4Index] == false) {
                                        @*$("th:contains('@UDF4Text')").hide();
                                    $('#UDF4PullCommon').closest('td').hide();*@
                                        $("table.tblPullCommonUDF th:contains('@UDF4Text')").html('');
                                        $('#UDF4PullCommonPopup').closest('td').html('');
                                        InvisibleUDF++;
                                    }
                                }
                                else
                                    InvisibleUDF++;

                                var UDF5Index = objColumnsMI['Pull ' + '@UDF5Text'];
                                if (UDF5Index != null && UDF5Index != undefined) {
                                    if ('@UDF5IsRequired' == 'True') {
                                        o.abVisCols[UDF5Index] = true;
                                    }
                                    else if (o.abVisCols[UDF5Index] == false) {
                                        @*$("th:contains('@UDF5Text')").hide();
                                    $('#UDF5PullCommon').closest('td').hide();*@
                                        $("table.tblPullCommonUDF th:contains('@UDF5Text')").html('');
                                        $('#UDF5PullCommonPopup').closest('td').html('');
                                        InvisibleUDF++;
                                    }
                                }
                                else
                                    InvisibleUDF++;

                                //----------------------------
                                //
                                setTimeout(function () {
                                    if ('@(Model.CallingFromPageName)' == "RQ" && InvisibleUDF == 5) {
                                        $('.itemmaster-model-popup .dataTables_length').attr('style', 'left:0;top:-79px !important');
                                        $('.itemmaster-model-popup .dataTables_paginate').attr('style', 'left: 145px;top:-68px !important');
                                    }
                                     else if (InvisibleUDF == 5) {
                                        $('#tblPullCommonUDF').hide();
                                        $('.itemmaster-model-popup .dataTables_length').attr('style', 'left:0;top:-35px !important');
                                        $('.itemmaster-model-popup .dataTables_paginate').attr('style', 'left: 145px;top:-24px !important');
                                    }
                                    else if ('@(Model.CallingFromPageName)' != "RQ") {
                                        $('.itemmaster-model-popup .dataTables_length').attr('style', 'left:0;top:-45px !important');
                                        $('.itemmaster-model-popup .dataTables_paginate').attr('style', 'left: 145px;top:-35px !important');
                                        $("#ItemModeDataTable_wrapper").attr('style', 'margin-top:40px');
                                    }
                                }, 500);
                            }
                        }
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content(Model.AjaxURLToFillItemGrid)',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }

                if (oSettings.aaSorting != null && oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];
                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                    //                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": false });
                aoData.push({ "name": "IsDeleted", "value": false });
                //aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                //aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                aoData.push({ "name": "SupplierID", "value": '@Model.SupplierID' });
                aoData.push({ "name": "ParentID", "value": '@Model.PerentID' });
                aoData.push({ "name": "ParentGUID", "value": '@Model.PerentGUID' });
                //_iQuickListType
                aoData.push({ "name": "QuickListType", "value": '@_iQuickListType' });

                if ('@(Model.CallingFromPageName)' == "RQ")
                {
                    aoData.push({ "name": "StagingBinId", "value": '@Model.StagingBinId' });
                }

                if (preSearchItemText !== undefined && $.trim(preSearchItemText).length > 0) {
                    $('input#ItemModel_filter').val(preSearchItemText);
                    aoData.push({ "name": "sSearch_0", "value": preSearchItemText });
                }
                preSearchItemText = "";

                ListAjaxRequestCount = ListAjaxRequestCount + 1;
                aoData.push({ "name": "ListAjaxRequestCount", "value": ListAjaxRequestCount.toString() });

                if ($('#ddlMoveType') !== undefined) {
                    aoData.push({ "name": "MoveType", "value": $('#ddlMoveType').val() });
                }

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#ItemModeDataTable td').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {

                        $('.dataTables_scroll').css({ "opacity": 1 });

                        if ($("#ItemModel_filter").val() != '') {
                            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
                        }
                        if ('@Model.CallingFromPageName.Contains("AddNewBarCode")' == 'True') {
                            $('#tdAddQty').css('display', 'none');
                        }

                        @*if ('@Model.CallingFromPageName' != 'QL' || '@Model.SelectedQuickListType' != 'Count') {
                            $('#tdAddConsignedQty').css('display', 'none');
                        }*@
                        CallShowHideData();
                        //CallThisFunctionFromModel('success');

                        $(".text-boxQuantityFormat").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
                        });

                        $(".text-boxQuantityFormatSR").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: 0
                        });
                        var cols = $('#ItemModeDataTable').dataTable().fnSettings().aoColumns;
                        var colIdx = -1;
                        var bvisbl = true;
                        for (var i = 0; i < cols.length; i++) {
                            if ($.trim(cols[i].sTitle) === 'Qty') {
                                colIdx = i;
                                bvisbl = cols[i].bVisible;
                                break;
                            }
                        }

                        if ('@Model.CallingFromPageName.Contains("MOVEMTR")' == 'False' && !bvisbl) {
                            $('#ItemModeDataTable').dataTable().fnSetColumnVis(colIdx, true, true);
                        }

                        UDFfillEditableOptionsForGrid();

                        ItemLocationfillEditableOptions(1, 'ddlItemSourceBins', '@Model.PerentID', '', 'ItemModeDataTable', '@Model.CallingFromPageName', '@Model.PerentGUID', '@Model.StagingBinId');

                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
                $("body").find('#divQTYLegends').show(1000);

                if ('@(Model.LoadNarrowSearchAfterListBind == null?"": Model.LoadNarrowSearchAfterListBind.ToString())' == 'True') {
                    if (ListAjaxRequestCount == 1) {
                        var ModelCommonJson = {
                            ID: '@modelCommon.ID.ToString()',
                            Text: '@modelCommon.Text',
                            Value: '@modelCommon.Value',
                            Count: '@modelCommon.Count.ToString()',
                            PageName: '@modelCommon.PageName',
                            ControlID: '@modelCommon.ControlID',
                            ItemModelCallFromPageName: '@modelCommon.ItemModelCallFromPageName',
                            IDsufix: '@modelCommon.IDsufix',
                            ParentID: '@modelCommon.ParentID.ToString()'
                        };

                        $.get('@Url.Action("NarrowSearchForItemModel")', ModelCommonJson).done(function (data) {
                            $('#divNarrowSearch').html(data);
                            // NSForItemModel_ExecuteOnDocReady();
                        });

                    }
                }
            },
            "aoColumns": objaoColumns,
            "fnDrawCallback": function (settings) {
                $("[id^='hdnRequiredDate_']").datepicker({
                    changeMonth: true,
                    changeYear: true, dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat'
                });
            }
        });

        $('.DTTT_container').css('z-index', '-1');

        if ('@isCost' == '@Boolean.FalseString') {
            //Hide Column who contains isCost Class in dataTable
            HideColumnUsingClassName("ItemModeDataTable");
            //ColumnsToHideinPopUp.push(23);
            //ColumnsToHideinPopUp.push(24);
            //ColumnsToHideinPopUp.push(25);
            //$('#ItemModeDataTable').dataTable().fnSetColumnVis(5, false);
            //$('#ItemModeDataTable').dataTable().fnSetColumnVis(25, false);
            //$('#ItemModeDataTable').dataTable().fnSetColumnVis(23, false);
            //$('#ItemModeDataTable').dataTable().fnSetColumnVis(24, false);
        }





        $("#ColumnSortableModalIM22").dialog(
            {
                autoOpen: false,
                modal: true,
                width: 500,
                height: dHeight,
                //title: "ReOrder Columns",
                title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
                draggable: true,
                resizable: true,
                open: function () {
                    GenerateColumnSortableIM();
                    $("#ColumnSortableIM").sortable({ axis: "y", containment: "parent" });
                }
            });

        $("#ColumnOrderSetupIM").click(function () {
            $("#ColumnSortableModalIM22").dialog("open");
            return false;
        });

        $("#ColumnOrderSetupIM22_Context").click(function () {
            $("#ColumnSortableModalIM22").dialog("open");
            return false;
        });

        $('.ShowAllOptionsOrderNumber').off("click");
        $('.ShowAllOptionsOrderNumber').on("click", function () {
            $(this).siblings('.AutoPullOrderNumber').trigger("focus");
            $(this).siblings(".AutoPullOrderNumber").autocomplete("search", " ");
        });


    });
    var GetColumnIndex1 = function (ColumnName) {
        return objColumns1[ColumnName];
    };

    function GetOrderDetailObject(tr, PageName) {
        //debugger;
        var txtQty = $(tr).find('#txtQty');
        var Qty = parseFloat($(txtQty).val());
        var apprQty = 0;
        if (Qty !== NaN && Qty !== undefined && Qty > 0 && parseInt('@Model.PerentID') > 0) {
            var itemID = $(tr).find('#spnItemID').text();
            var itemGUID = $(tr).find('#spnItemGUID').text();
            var vItemNumber = $(tr).find('#spnItemNumber').text();
            var vDescription = $(tr).find('#spnDescription').text();
            var isEnforce = $(tr).find('#spnIsEnforce').text();
            var reOrderQty = $(tr).find('#spnReOrderQty').text();
            var itemtype = $(tr).find('#spnItemType').text();
            var vSerialNumberTracking = $(tr).find('#spnSerialNumberTracking').text();
            var vLineItemComment = $(tr).find('#txtLineItemComment').val();
            var tmpSupplierId = $(tr).find('#spnSupplierID').text();
            var supplierID = (tmpSupplierId !== undefined && tmpSupplierId != null && tmpSupplierId != '' && !isNaN(tmpSupplierId)) ? tmpSupplierId : 0;
            var supplierPartNo = $(tr).find('#spnSupplierPartNo').text();
            var supplierName = $(tr).find('#spnSupplierName').text();


            var vUDF1 = '';
            var vUDF2 = '';
            var vUDF3 = '';
            var vUDF4 = '';
            var vUDF5 = '';

            var vOrderItemCost = '';
            //if ('@Model.CallingFromPageName' == 'ORD') {
                vOrderItemCost = $(tr).find('#txtOrderItemCost').val();
            //}


            if ($(tr).find('#UDF1') != null) {
                if ($(tr).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tr).find('#UDF1 option:selected').text();
                }
                else {
                    vUDF1 = $(tr).find('#UDF1').val();
                }
            }

            if ($(tr).find('#UDF2') != null) {
                if ($(tr).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tr).find('#UDF2 option:selected').text();
                }
                else {
                    vUDF2 = $(tr).find('#UDF2').val();
                }
            }

            if ($(tr).find('#UDF3') != null) {
                if ($(tr).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tr).find('#UDF3 option:selected').text();
                }
                else {
                    vUDF3 = $(tr).find('#UDF3').val();
                }
            }

            if ($(tr).find('#UDF4') != null) {
                if ($(tr).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tr).find('#UDF4 option:selected').text();
                }
                else {
                    vUDF4 = $(tr).find('#UDF4').val();
                }
            }

            if ($(tr).find('#UDF5') != null) {
                if ($(tr).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tr).find('#UDF5 option:selected').text();
                }
                else {
                    vUDF5 = $(tr).find('#UDF5').val();
                }
            }

            var vCost = $(tr).find('#spnCost').text();
            if (vCost == null || vCost == "null")
                vCost = 0;

            var DetailData = {};
            var modulo = parseInt(Qty) % parseInt(reOrderQty);

            if (isEnforce == 'true' && modulo > 0 && gblActionName.toLowerCase() != 'returnorderlist') {
                var devideval = parseInt(parseInt(Qty) / parseInt(reOrderQty)) + 1;
                var newQty = reOrderQty * devideval;

                var msgSpan = $("#spanGlobalMSGIM");
                var existingMsgHtml = msgSpan.html();
                var existingMsg = (existingMsgHtml == null || existingMsgHtml === undefined || existingMsgHtml == '')
                                    ? existingMsgHtml
                                    : existingMsgHtml + '<br/>';
                    //
                //$('div#targetItemModel').fadeToggle();
                //$("div#targetItemModel").delay(3000).fadeOut(200);

                var EnForceMessage = '@ResItemMaster.ValidationItemEnforceReOrderQuantity'.replace("{0}", vItemNumber).replace("{1}", Qty).replace("{2}", newQty);
                msgSpan.html(existingMsg + EnForceMessage);
                msgSpan.removeClass('errorIcon succesIcon').addClass('WarningIcon');
                Qty = newQty;
            }
            if (parseInt('@Model.OrderStatus') == '@((int)OrderStatus.Transmitted)') {
                apprQty = Qty;
            }

            DetailData = {
                "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'OrderGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID',
                "RequiredDate": '@Model.OrdRequeredDate', "ApprovedQuantity": apprQty, "UDF1": vUDF1, "UDF2": vUDF2, "UDF3": vUDF3, "UDF4": vUDF4,
                "UDF5": vUDF5, "Comment": vLineItemComment, "ItemCost": vOrderItemCost, "SupplierID": supplierID, "SupplierPartNo": supplierPartNo, "SupplierName": supplierName
            };

            return DetailData;
        }

        return null;
    }
    function GetToolMaintenanceDetailObject(tr, PageName) {

        var txtQty = $(tr).find('#txtQty');
        var txtCost = $(tr).find('#itemCost');
        var Qty = parseFloat($(txtQty).val());
        var Cost = parseFloat($(txtCost).val());
        var reOrderQty = $(tr).find('#spnReOrderQty').text();
        var apprQty = 0;
        if ((isNaN(parseFloat(Qty)) || parseFloat(Qty) <= 0)) {
                $("#spanGlobalMessage").html('@ResItemMaster.QuantitygreaterthanZero');
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                showNotificationDialog();
                $(txtQty).focus();
            return null;
        }
        if (Qty !== NaN && Qty !== undefined && Qty !== NaN && Cost !== undefined && Cost >= 0 && parseInt('@Model.PerentID') > 0) {
            var itemID = $(tr).find('#spnItemID').text();
            var itemGUID = $(tr).find('#spnItemGUID').text();
            var vItemNumber = $(tr).find('#spnItemNumber').text();
            var vUDF1 = '';
            var vUDF2 = '';
            var vUDF3 = '';
            var vUDF4 = '';
            var vUDF5 = '';

            if ($(tr).find('#UDF1') != null) {
                if ($(tr).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tr).find('#UDF1 option:selected').text();
                }
                else {
                    vUDF1 = $(tr).find('#UDF1').val();
                }
            }

            if ($(tr).find('#UDF2') != null) {
                if ($(tr).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tr).find('#UDF2 option:selected').text();
                }
                else {
                    vUDF2 = $(tr).find('#UDF2').val();
                }
            }

            if ($(tr).find('#UDF3') != null) {
                if ($(tr).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tr).find('#UDF3 option:selected').text();
                }
                else {
                    vUDF3 = $(tr).find('#UDF3').val();
                }
            }

            if ($(tr).find('#UDF4') != null) {
                if ($(tr).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tr).find('#UDF4 option:selected').text();
                }
                else {
                    vUDF4 = $(tr).find('#UDF4').val();
                }
            }

            if ($(tr).find('#UDF5') != null) {
                if ($(tr).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tr).find('#UDF5 option:selected').text();
                }
                else {
                    vUDF5 = $(tr).find('#UDF5').val();
                }
            }
            var vCost = Cost;//$(tr).find('#spnCost').text();
            if (vCost == null || vCost == "null")
                vCost = 0;

            var DetailData = {};

            var modulo = parseInt(Qty) % parseInt(reOrderQty);

            var dateNow = new Date();
            DetailData = {
                "ID": 0, "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'MaintenanceGUID': '@Model.PerentGUID',
                "RequiredDate": '@Model.OrdRequeredDate', "ItemCost": vCost, "Created": "5/31/2018 7:11:21 PM", "LastUpdated": "5/31/2018 7:11:21 PM", "CreatedBy": '@eTurnsWeb.Helper.SessionHelper.UserID',
                "LastUpdatedBy": '@eTurnsWeb.Helper.SessionHelper.UserID', "Room": '@eTurnsWeb.Helper.SessionHelper.RoomID',
                "CompanyID": '@eTurnsWeb.Helper.SessionHelper.CompanyID', "GUID": "C7CD24DA-5210-48B8-AC5D-3D2582B945FD", "MaintenanceId": '@Model.PerentID'

            };

            return DetailData;
        }

        return null;
    }

    function AddLineItemsToOrdertest(arrItems, btn) {
        if (arrItems.length != undefined && arrItems.length > 0) {
            // $('#DivLoading').show();
            $.ajax({
                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: JSON.stringify({ 'objNewItems': arrItems, 'OrderID': '@Model.PerentID' }),
                dataType: 'json',
                type: 'POST',
                contentType: "application/json",
                async: false,
                cache: false,
                success: function (result) {
                    var errorMessage = result.Message;
                    if (result.Status == "ok") {
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                    }

                    if (result.AddedBins != null && result.AddedBins.length > 0) {
                        for (var i = 0; i < result.AddedBins.length; i++) {
                            var itemGuid = result.AddedBins[i].ItemGuid;
                            $('#ItemModeDataTable tbody tr.row_selected').find('input[type="hidden"][id="hdnItemGuid"]').each(function (i) {
                                if ($(this).val() == itemGuid) {

                                    //alert('i = ' + i + ' ' + result.AddedBins[i].Key + ' ' + result.AddedBins[i].Value);
                                    if (result.AddedBins[i].Value != null || result.AddedBins[i].Value !== 'null')
                                        result.AddedBins[i].Value = '';

                                    $(this).parent().find('#ddlItemSourceBins').val(result.AddedBins[i].Value)
                                    if (result.AddedBins[i].ID > 0)
                                        $(this).parent().find('#hdnLocationId').val(result.AddedBins[i].ID)

                                    if (parseFloat(result.AddedBins[i].OtherInfo2) > 0) {
                                        $(this).parents('tr').find('#txtQty').val(result.AddedBins[i].OtherInfo2);
                                    }
                                    else {
                                        var dfQty = $(this).parent().find('#hdnDRQ').val();
                                        $(this).parents('tr').find('#txtQty').val(dfQty);
                                    }

                                    $(this).parent().parent().parent().removeClass('row_selected');
                                }
                            });
                        }
                    }
                    $('#DivLoading').hide();
                    $("#spanGlobalMessage").html(errorMessage);
                    showNotificationDialog();
                },
                error: function (xhr) {
                    $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                    var errorMessage = "Ajax error: " + xhr.status + " " + xhr.statusText;
                    $("#spanGlobalMessage").html(errorMessage);
                    $('#DivLoading').hide();
                    showNotificationDialog();
                },
                complete: function () {
                    $(btn).removeAttr("disabled");
                }
            });
        }
    }
    function AddLineItemsToOrder(arrItems, btn) {
        if (arrItems.length != undefined && arrItems.length > 0) {
            // $('#DivLoading').show();
            $.ajax({
                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: JSON.stringify({ 'objNewItems': arrItems, 'OrderID': '@Model.PerentID' }),
                dataType: 'json',
                type: 'POST',
                contentType: "application/json",
                async: false,
                cache: false,
                success: function (result) {
                    var errorMessage = result.Message;
                    if (result.Status == "ok") {
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                    }

                    if (result.AddedBins != null && result.AddedBins.length > 0) {

                        for (var i = 0; i < result.AddedBins.length; i++) {
                            var itemGuid = result.AddedBins[i].ItemGuid;
                            $('#ItemModeDataTable tbody tr.row_selected').find('input[type="hidden"][id="hdnItemGuid"]').each(function (i) {
                                if ($(this).val() == itemGuid) {
                                    //alert('i = ' + i + ' ' + result.AddedBins[i].Key + ' ' + result.AddedBins[i].Value);

                                    /*
                                    if (result.AddedBins[i].Value != null || result.AddedBins[i].Value !== 'null')
                                        result.AddedBins[i].Value = '';
                                        */
                                    if (result.AddedBins[i] != undefined)
                                    {
                                        $(this).parent().find('#ddlItemSourceBins').val(result.AddedBins[i].Value)
                                        if (result.AddedBins[i].ID > 0)
                                            $(this).parent().find('#hdnLocationId').val(result.AddedBins[i].ID)

                                        if (parseFloat(result.AddedBins[i].OtherInfo2) > 0) {
                                            $(this).parents('tr').find('#txtQty').val(result.AddedBins[i].OtherInfo2);
                                            $(this).parents('tr').find('#spnReOrderQty').text(result.AddedBins[i].OtherInfo2);
                                        }
                                        else {
                                            var dfQty = $(this).parent().find('#hdnDRQ').val();
                                            dfQty = parseFloat(dfQty).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10));
                                            $(this).parents('tr').find('#txtQty').val(dfQty);
                                        }
                                    }
                                    //$(this).parent().parent().parent().removeClass('row_selected');
                                }
                            });
                        }
                    }

                    $('#ItemModeDataTable tbody tr.row_selected').find('input[type="hidden"][id="hdnItemGuid"]').each(function () {
                        $(this).parent().parent().parent().removeClass('row_selected');
                    });

                    $('#DivLoading').hide();
                    if ($("#spanGlobalMSGIM").html().length > 0)
                        $("#spanGlobalMessage").html($("#spanGlobalMSGIM").html() + '<br/><br/>' + errorMessage);
                    else
                        $("#spanGlobalMessage").html(errorMessage);

                    FadeOutTime = 3000; // This varible is exist in common.js // 3000 = 3 Seconds fadeouttime
                    showNotificationDialog();

                },
                error: function (xhr) {
                    $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                    var errorMessage = "Ajax error: " + xhr.status + " " + xhr.statusText;
                    $("#spanGlobalMessage").html(errorMessage);
                    $('#DivLoading').hide();
                    showNotificationDialog();
                },
               complete: function () {
                    $(btn).removeAttr("disabled");
                    $("#spanGlobalMSGIM").html("");
                }
            });
        }
    }
    function AddLineItemsToToolMaintenance(arrItems, btn) {

        if (arrItems.length != undefined && arrItems.length > 0) {
            // $('#DivLoading').show();

            $.ajax({
                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: JSON.stringify({ 'objNewItems': arrItems, 'MaintenanceId': '@Model.PerentID' }),
                dataType: 'json',
                type: 'POST',
                contentType: "application/json",
                async: false,
                cache: false,
                success: function (result) {
                    var errorMessage = result.Message;
                    if (result.Status == "ok") {
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                    }
                    $('#ItemModeDataTable tbody tr.row_selected').each(function () {
                        $(this).find('#txtQty').val('');
                        $(this).removeClass('row_selected');
                    });
                    $('#DivLoading').hide();
                    $("#spanGlobalMessage").html(errorMessage);
                    showNotificationDialog();

                },
                error: function (xhr) {


                    $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                    var errorMessage = "Ajax error: " + xhr.status + " " + xhr.statusText;
                    $("#spanGlobalMessage").html(errorMessage);
                    $('#DivLoading').hide();
                    showNotificationDialog();
                },
                complete: function () {
                    $(btn).removeAttr("disabled");
                }
            });
        }
    }
    function AddItemToToolMaintenance(btn, PageName) {
        var arrLineItems = new Array();

        if (btn.id == 'btnAdd') {
            $('#ItemModeDataTable tbody').find('tr').removeClass('row_selected');
            var tr = $(btn).parent().parent();
            $(tr).toggleClass('row_selected');


            var currentBinID = '';
            var ItemGUID = $(tr).find("#spnItemGUID").text();

            var obj = GetToolMaintenanceDetailObject(tr, PageName);
            if (obj != null) {
                obj.ItemGUID = ItemGUID
                obj.BinName = '';




                arrLineItems.push(obj);
            }
            //CheckExistingBinID(currentBinID, ItemGUID, $(tr), PageName, btn);
        }
        else if (btn.id === 'btnAddAll') {

            // CheckExistingBinID('', '', '', PageName, btn);
            if ($('#ItemModeDataTable tbody tr.row_selected').length > 0) {
                $('#ItemModeDataTable tbody tr.row_selected').each(function (indx, tr) {
                    var obj = GetToolMaintenanceDetailObject(tr, PageName);
                    if (obj != null) {

                        arrLineItems.push(obj);


                    }
                });
            }
        }

        if (arrLineItems != null && arrLineItems.length > 0) {
            AddLineItemsToToolMaintenance(arrLineItems, btn);
        }
        else {
            $('#DivLoading').hide();
            $(btn).removeAttr("disabled");
        }
    }
    function AddItemToOrder(btn, PageName) {

        var arrLineItems = new Array();

        if (btn.id == 'btnAdd') {
            $('#ItemModeDataTable tbody').find('tr').removeClass('row_selected');
            var tr = $(btn).parent().parent();
            $(tr).toggleClass('row_selected');
            //if ($(tr).find("input#hdnLocationId").val() == '' || $(tr).find("input#hdnLocationId").val()==undefined) {
            //     $(tr).find("input.CreateBtn").removeAttr("disabled");
            //     $('#DivLoading').hide();
            //     alert('@ResLocation.SelectLocation');
            //     return false;
            // }

            if ($(tr).find("input#ddlItemSourceBins").length > 0 && $.trim($(tr).find("input#ddlItemSourceBins").val()).length <= 0) {
                alert('@ResLocation.SelectLocation');
                $('#DivLoading').hide();
                $(btn).removeAttr("disabled");
                return false;
            }

            var currentBinID = $(tr).find("input#hdnLocationId").val();
            var ItemGUID = $(tr).find("#spnItemGUID").text();

            var obj = GetOrderDetailObject(tr, PageName);
            if (obj != null) {
                obj.ItemGUID = ItemGUID
                if ($(tr).find("input#ddlItemSourceBins").length > 0)
                    obj.BinName = $.trim($(tr).find("input#ddlItemSourceBins").val());

                if ((isNaN(parseInt(obj.Bin)) || parseInt(obj.Bin) <= 0) && isNaN(parseInt(currentBinID)) && parseInt(currentBinID) > 0)
                    obj.Bin = currentBinID;

                arrLineItems.push(obj);
            }
            //CheckExistingBinID(currentBinID, ItemGUID, $(tr), PageName, btn);
        }
        else if (btn.id === 'btnAddAll') {

            // CheckExistingBinID('', '', '', PageName, btn);
            if ($('#ItemModeDataTable tbody tr.row_selected').length > 0) {
                $('#ItemModeDataTable tbody tr.row_selected').each(function (indx, tr) {
                    var obj = GetOrderDetailObject(tr, PageName);
                    if (obj != null) {
                        if ($(tr).find("input#ddlItemSourceBins").length > 0) {
                            obj.BinName = $.trim($(tr).find("input#ddlItemSourceBins").val());
                            if ($(tr).find("input#hdnLocationId").length > 0 && (isNaN(parseInt(obj.Bin)) || parseInt(obj.Bin) <= 0))
                                obj.Bin = $(tr).find("input#hdnLocationId").val();

                            if (obj.BinName.length > 0) {
                                arrLineItems.push(obj);
                            }
                            else {
                                $(tr).removeClass('row_selected');
                            }
                        }
                        else {
                            arrLineItems.push(obj);
                        }

                    }
                });
            }
        }

        if (arrLineItems != null && arrLineItems.length > 0) {
            AddLineItemsToOrder(arrLineItems, btn);
        }
        else {
            alert('@ResOrder.MsgItemNotAddedToOrder')
            $('#DivLoading').hide();
            $(btn).removeAttr("disabled");
        }
    }

    function AddItemToQuote(btn, PageName) {

        var arrLineItems = new Array();

        if (btn.id == 'btnAdd') {
            $('#ItemModeDataTable tbody').find('tr').removeClass('row_selected');
            var tr = $(btn).parent().parent();
            $(tr).toggleClass('row_selected');

            if ($(tr).find("input#ddlItemSourceBins").length > 0 && $.trim($(tr).find("input#ddlItemSourceBins").val()).length <= 0) {
                alert('@ResLocation.SelectLocation');
                $('#DivLoading').hide();
                $(btn).removeAttr("disabled");
                return false;
            }

            var currentBinID = $(tr).find("input#hdnLocationId").val();
            var ItemGUID = $(tr).find("#spnItemGUID").text();
            var obj = GetQuoteDetailObject(tr, PageName);

            if (obj != null) {
                obj.ItemGUID = ItemGUID
                if ($(tr).find("input#ddlItemSourceBins").length > 0)
                    obj.BinName = $.trim($(tr).find("input#ddlItemSourceBins").val());

                if ((isNaN(parseInt(obj.Bin)) || parseInt(obj.Bin) <= 0) && isNaN(parseInt(currentBinID)) && parseInt(currentBinID) > 0)
                    obj.Bin = currentBinID;

                arrLineItems.push(obj);
            }
            //CheckExistingBinID(currentBinID, ItemGUID, $(tr), PageName, btn);
        }
        else if (btn.id === 'btnAddAll') {

            // CheckExistingBinID('', '', '', PageName, btn);
            if ($('#ItemModeDataTable tbody tr.row_selected').length > 0) {
                $('#ItemModeDataTable tbody tr.row_selected').each(function (indx, tr) {
                    var obj = GetQuoteDetailObject(tr, PageName);
                    if (obj != null) {
                        if ($(tr).find("input#ddlItemSourceBins").length > 0) {
                            obj.BinName = $.trim($(tr).find("input#ddlItemSourceBins").val());
                            if ($(tr).find("input#hdnLocationId").length > 0 && (isNaN(parseInt(obj.Bin)) || parseInt(obj.Bin) <= 0))
                                obj.Bin = $(tr).find("input#hdnLocationId").val();

                            if (obj.BinName.length > 0) {
                                arrLineItems.push(obj);
                            }
                            else {
                                $(tr).removeClass('row_selected');
                            }
                        }
                        else {
                            arrLineItems.push(obj);
                        }

                    }
                });
            }
        }

        if (arrLineItems != null && arrLineItems.length > 0) {
            AddLineItemsToQuote(arrLineItems, btn);
        }
        else {
            alert('@ResQuoteMaster.MsgItemNotAddedToQuote')
            $('#DivLoading').hide();
            $(btn).removeAttr("disabled");
        }
    }

    function AddLineItemsToQuote(arrItems, btn) {
        if (typeof(arrItems.length) != "undefined" && arrItems.length > 0) {
            // $('#DivLoading').show();
            $.ajax({
                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: JSON.stringify({ 'objNewItems': arrItems, 'QuoteID': '@Model.PerentID' }),
                dataType: 'json',
                type: 'POST',
                contentType: "application/json",
                async: false,
                cache: false,
                success: function (result) {
                    var errorMessage = result.Message;
                    if (result.Status == "ok") {
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                    }

                    if (result.AddedBins != null && result.AddedBins.length > 0) {

                        for (var i = 0; i < result.AddedBins.length; i++) {
                            var itemGuid = result.AddedBins[i].ItemGuid;
                            $('#ItemModeDataTable tbody tr.row_selected').find('input[type="hidden"][id="hdnItemGuid"]').each(function (i) {
                                if ($(this).val() == itemGuid) {
                                    $(this).parent().find('#ddlItemSourceBins').val(result.AddedBins[i].Value)
                                    if (result.AddedBins[i].ID > 0)
                                        $(this).parent().find('#hdnLocationId').val(result.AddedBins[i].ID)

                                    if (parseFloat(result.AddedBins[i].OtherInfo2) > 0) {
                                        $(this).parents('tr').find('#txtQty').val(result.AddedBins[i].OtherInfo2);
                                        $(this).parents('tr').find('#spnReOrderQty').text(result.AddedBins[i].OtherInfo2);
                                    }
                                    else {
                                        var dfQty = $(this).parent().find('#hdnDRQ').val();
                                        dfQty = parseFloat(dfQty).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10));
                                        $(this).parents('tr').find('#txtQty').val(dfQty);
                                    }

                                    $(this).parent().parent().parent().removeClass('row_selected');
                                }
                            });
                        }
                    }
                    $('#DivLoading').hide();
                    if ($("#spanGlobalMSGIM").html().length > 0)
                        $("#spanGlobalMessage").html($("#spanGlobalMSGIM").html() + '<br/><br/>' + errorMessage);
                    else
                        $("#spanGlobalMessage").html(errorMessage);

                    FadeOutTime = 3000; // This varible is exist in common.js // 3000 = 3 Seconds fadeouttime
                    showNotificationDialog();

                },
                error: function (xhr) {
                    $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                    var errorMessage = "Ajax error: " + xhr.status + " " + xhr.statusText;
                    $("#spanGlobalMessage").html(errorMessage);
                    $('#DivLoading').hide();
                    showNotificationDialog();
                },
                complete: function () {
                    $(btn).removeAttr("disabled");
                    $("#spanGlobalMSGIM").html("");
                }
            });
        }
    }

    function GetQuoteDetailObject(tr, PageName) {

        var txtQty = $(tr).find('#txtQty');
        var Qty = parseFloat($(txtQty).val());
        var apprQty = 0;

        if (Qty !== NaN && Qty !== undefined && Qty > 0 && parseInt('@Model.PerentID') > 0) {
            var itemID = $(tr).find('#spnItemID').text();
            var itemGUID = $(tr).find('#spnItemGUID').text();
            var vItemNumber = $(tr).find('#spnItemNumber').text();
            var isEnforce = $(tr).find('#spnIsEnforce').text();
            var reOrderQty = $(tr).find('#spnReOrderQty').text();
            var vLineItemComment = $(tr).find('#txtLineItemComment').val();
            var tmpSupplierId = $(tr).find('#spnSupplierID').text();
            var supplierID = (tmpSupplierId !== undefined && tmpSupplierId != null && tmpSupplierId != '' && !isNaN(tmpSupplierId)) ? tmpSupplierId : 0;
            var supplierPartNo = $(tr).find('#spnSupplierPartNo').text();
            var supplierName = $(tr).find('#spnSupplierName').text();
            var vUDF1 = '';
            var vUDF2 = '';
            var vUDF3 = '';
            var vUDF4 = '';
            var vUDF5 = '';

            var vQuoteItemCost = $(tr).find('#txtOrderItemCost').val();


            if ($(tr).find('#UDF1') != null) {
                if ($(tr).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tr).find('#UDF1 option:selected').text();
                }
                else {
                    vUDF1 = $(tr).find('#UDF1').val();
                }
            }

            if ($(tr).find('#UDF2') != null) {
                if ($(tr).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tr).find('#UDF2 option:selected').text();
                }
                else {
                    vUDF2 = $(tr).find('#UDF2').val();
                }
            }

            if ($(tr).find('#UDF3') != null) {
                if ($(tr).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tr).find('#UDF3 option:selected').text();
                }
                else {
                    vUDF3 = $(tr).find('#UDF3').val();
                }
            }

            if ($(tr).find('#UDF4') != null) {
                if ($(tr).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tr).find('#UDF4 option:selected').text();
                }
                else {
                    vUDF4 = $(tr).find('#UDF4').val();
                }
            }

            if ($(tr).find('#UDF5') != null) {
                if ($(tr).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tr).find('#UDF5 option:selected').text();
                }
                else {
                    vUDF5 = $(tr).find('#UDF5').val();
                }
            }

            var vCost = $(tr).find('#spnCost').text();
            if (vCost == null || vCost == "null")
                vCost = 0;

            var DetailData = {};
            var modulo = parseInt(Qty) % parseInt(reOrderQty);

            if (isEnforce == 'true' && modulo > 0 ) {
                var devideval = parseInt(parseInt(Qty) / parseInt(reOrderQty)) + 1;
                var newQty = reOrderQty * devideval;

                var msgSpan = $("#spanGlobalMSGIM");
                var existingMsgHtml = msgSpan.html();
                var existingMsg = (existingMsgHtml == null || existingMsgHtml === undefined || existingMsgHtml == '')
                                    ? existingMsgHtml
                                    : existingMsgHtml + '<br/>';
                    //
                //$('div#targetItemModel').fadeToggle();
                //$("div#targetItemModel").delay(3000).fadeOut(200);
                msgSpan.html(existingMsg + "For Item " + vItemNumber + " Added qty = " + Qty + " change to " + newQty + " due to enforce reorder quantity");
                msgSpan.removeClass('errorIcon succesIcon').addClass('WarningIcon');
                Qty = newQty;
            }
            if (parseInt('@Model.QuoteStatus') == '@((int)QuoteStatus.Transmitted)') {
                apprQty = Qty;
            }

            DetailData = {
                "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'QuoteGUID': '@Model.PerentGUID', "BinID": '@Model.OrdStagingID',
                "RequiredDate": '@Model.QuoteRequeredDate', "ApprovedQuantity": apprQty, "UDF1": vUDF1, "UDF2": vUDF2, "UDF3": vUDF3, "UDF4": vUDF4,
                "UDF5": vUDF5, "Comment": vLineItemComment, "ItemCost": vQuoteItemCost, "SupplierID": supplierID, "SupplierPartNo": supplierPartNo, "SupplierName": supplierName
            };

            return DetailData;
        }

        return null;
    }

    function AddItemToMaintenance(btn, PageName) {
        var arrLineItems = new Array();

        if (btn.id == 'btnAdd') {
            $('#ItemModeDataTable tbody').find('tr').removeClass('row_selected');
            var tr = $(btn).parent().parent();
            $(tr).toggleClass('row_selected');
            var ItemGUID = $(tr).find("#spnItemGUID").text();

            var obj = GetToolMaintenanceDetailObject(tr, PageName);
            if (obj != null) {
                obj.ItemGUID = ItemGUID
                arrLineItems.push(obj);
            }
            //CheckExistingBinID(currentBinID, ItemGUID, $(tr), PageName, btn);
        }
        else if (btn.id === 'btnAddAll') {

            // CheckExistingBinID('', '', '', PageName, btn);
            if ($('#ItemModeDataTable tbody tr.row_selected').length > 0) {
                $('#ItemModeDataTable tbody tr.row_selected').each(function (indx, tr) {
                    var obj = GetToolMaintenanceDetailObject(tr, PageName);
                    if (obj != null) {
                        arrLineItems.push(obj);
                    }
                });
            }
        }

        if (arrLineItems != null && arrLineItems.length > 0) {
            AddLineItemsToOrder(arrLineItems, btn);
        }
        else {
            alert('@ResOrder.MsgItemNotAddedToOrder')
            $('#DivLoading').hide();
            $(btn).removeAttr("disabled");
        }
    }




    function CheckExistingBinID(binid, itemguid, tr, PageName, btn) {

        var binID = new Array();
        var binText = new Array();
        var arrItems = new Array();
        var arrRows = new Array();
        var errorMessage = '';
        if ($(btn).attr("id") == 'btnAdd') {

            $.ajax({
                url: '/Master/CheckbinExists',
                data: { 'binid': binid, 'itemguid': itemguid },
                async: false,
                cache: false,
                dataType: "json",
                success: function (result) {
                    binText.push($(tr).find("input#ddlItemSourceBins").val());
                    var ItemNumber = $(tr).find("span#spnItemNumber").text();
                    if ((result.result.toLowerCase() == 'true' || result.result == true) && $(tr).find("input#hdnselectedIDs").val().indexOf(binid) < 0) {

                        binID.push(binid);


                        var obj = GetOrderDetailObject(tr, PageName);
                        if (obj !== null) {
                            arrItems.push(obj);
                        }
                        insertBin(arrItems, binID, binText, btn, $(tr));
                        //alert(binText + " is added successfully.");
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');

                        $("#spanGlobalMessage").html("@ResCommon.MsgAddedSuccessfully".replace("{0}",ItemNumber));
                        // showNotificationDialog();

                    }
                    else {
                        $(tr).find("input.CreateBtn").removeAttr("disabled");
                        errorMessage += (ItemNumber + " - " + binText + " is already added. " + "\r\n");
                        //alert(errorMessage);
                        $("#spanGlobalMessage").removeClass('successIcon succesIcon').addClass('errorIcon WarningIcon');
                        $("#spanGlobalMessage").html(errorMessage);


                    }

                },
                error: function () {

                    return result;
                },
                complete: function () {
                    showNotificationDialog();
                }
            });

        }
        else if ($(btn).attr("id") == 'btnAddAll') {

            if ($('#ItemModeDataTable tbody tr.row_selected').length > 0) {
                $('#ItemModeDataTable tbody tr').each(function (indx, trobj) {
                    if ($(this).attr('class').indexOf('row_selected') != -1) {
                        binID = new Array();
                        binText = new Array();
                        arrItems = new Array();
                        var itemguid = $(this).find("input#hdnItemGuid").val();
                        tr = trobj;
                        var binid = $(tr).find("input#hdnLocationId").val();
                        $.ajax({
                            url: '/Master/CheckbinExists',
                            data: { 'binid': binid, 'itemguid': itemguid },
                            async: false,
                            cache: false,
                            dataType: "json",
                            success: function (result) {

                                binText.push($(tr).find("input#ddlItemSourceBins").val());
                                var ItemNumber = $(tr).find("span#spnItemNumber").text();
                                if ((result.result.toLowerCase() == 'true' || result.result == true) && $(tr).find("input#hdnselectedIDs").val().indexOf(binid) < 0) {
                                    binID.push(binid);
                                    var obj = GetOrderDetailObject(tr, PageName);
                                    if (obj !== null) {
                                        arrItems.push(obj);
                                    }
                                    insertBin(arrItems, binID, binText, $(btn), tr);
                                    errorMessage += (ItemNumber + " is added successfully." + "\r\n");
                                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                                    $("#spanGlobalMessage").html(errorMessage);
                                    showNotificationDialog();

                                }
                                else {
                                    $(this).find("input.CreateBtn").removeAttr("disabled");
                                    errorMessage += (ItemNumber + " - " + binText + " is already added. " + "\r\n");
                                    //alert(errorMessage);
                                    $("#spanGlobalMessage").removeClass('successIcon succesIcon').addClass('errorIcon WarningIcon');
                                    $("#spanGlobalMessage").html(errorMessage);
                                    showNotificationDialog();
                                }

                            },
                            error: function () {


                            },
                            complete: function () {
                                $(btn).removeAttr("disabled");
                            }
                        });
                    }
                });

            }
            else {

                errorMessage = ("Please select Atleast one record");
                //alert(errorMessage);
                $("#spanGlobalMessage").removeClass('successIcon succesIcon').addClass('errorIcon WarningIcon');
                $("#spanGlobalMessage").html(errorMessage);
                showNotificationDialog();
                $(btn).removeAttr("disabled");
            }


        }

    }
    function insertBin(arrItems, binID, binText, btn, tr) {
        if (arrItems.length != undefined && arrItems.length > 0) {
            $.ajax({
                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: JSON.stringify({ 'objNewItems': arrItems, 'OrderID': '@Model.PerentID', 'binID': binID, 'binText': binText }),
                dataType: 'json',
                type: 'POST',
                contentType: "application/json",
                async: false,
                cache: false,
                success: function (json) {
                    if ($(btn).attr("id") == 'btnAdd') {


                        $(btn).parent().parent().find('input#hdnselectedIDs').val($(btn).parent().parent().find('input#hdnselectedIDs').val() + "," + binID[0]);

                        SetLocationSelectionAfterSave($(btn).parent().parent().find('span#spnItemGUID').text(), '@Model.PerentID', $(btn).parent().parent().find('input#hdnLocationId'), $(btn).parent().parent().find('input#ddlItemSourceBins'), $(btn).parent().parent().find('input#hdnselectedIDs'), $(btn).parent().parent().find("#hdnIsLoadMoreLocations").val());
                    }
                    else if ($(btn).attr("id") == 'btnAddAll') {


                        $(tr).find('input#hdnselectedIDs').val($(tr).find('input#hdnselectedIDs').val() + "," + binID[0]);

                        SetLocationSelectionAfterSave($(tr).find('span#spnItemGUID').text(), '@Model.PerentID', $(tr).find('input#hdnLocationId'), $(tr).find('input#ddlItemSourceBins'), $(tr).find('input#hdnselectedIDs'), $(tr).find("#hdnIsLoadMoreLocations").val());
                    }
                    $('#ItemModeDataTable tbody tr').each(function () {
                        $(this).find("input.CreateBtn").removeAttr("disabled");
                    });
                    $('#DivLoading').hide();
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $(btn).removeAttr("disabled");
                }
            });
        }
        else {
            $("#DivLoading").hide();
            $('#ItemModeDataTable tbody tr').each(function () {
                $(this).find("input.CreateBtn").removeAttr("disabled");
            });
        }
    }

    function SetLocationSelectionAfterSave(ItemGuid, OrderId, hdnLocationId, ddlItemSourceBins, hdnselectedIDs, IsLoadMoreLocations) {
        var RequestUrl = '/Master/GetBinsOfItemByOrderId';
        if ('@Model.CallingFromPageName' == 'TRF') {
            RequestUrl = '/Transfer/GetBinsOfItemByTransferId';
        }


        $.ajax({
            url: RequestUrl,
            data: { 'StagingName': '', 'NameStartWith': '', 'ItemGUID': ItemGuid, 'QtyRequired': false, 'OnlyHaveQty': false, 'OrderId': OrderId, 'IsLoadMoreLocations': IsLoadMoreLocations },
            async: false,
            cache: false,
            dataType: "json",
            success: function (locations) {
                if (locations != null && locations != undefined && locations.length > 0 && parseInt(locations[0].ID) > 0) {
                    hdnLocationId.val(locations[0].ID);
                    ddlItemSourceBins.val(locations[0].Value);
                }
                else {
                    hdnLocationId.val('');
                    ddlItemSourceBins.val('');
                    hdnselectedIDs.val('');
                }
            }
        });

    }

    /* Cost Narrow Search Related Code  START */
    function CostNarroSearch(CostDDLObject) {
        //oTable.fnFilter($(CostDDLObject).val(),null,null,null);
        if ($(CostDDLObject).val() != "0_-1") {
            CostNarroSearchValue = $(CostDDLObject).val();
            DoNarrowSearchIM();
        }
        else {
            CostNarroSearchValue = '';
            DoNarrowSearchIM();
        }
    }
    var lastCheckedNewItemPopup;
    /* Cost Narrow Search Related Code  END */
    $("#ItemModeDataTable").on("tap click", "tbody tr", function (e) {

        // $(this).toggleClass('row_selected');
        if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text") {
            e.stopPropagation();
        } else {
            // $(this).toggleClass('row_selected');
            if (!lastCheckedNewItemPopup) {
                lastCheckedNewItemPopup = this;
            }

            if (e.shiftKey) {
                var start = $('#ItemModeDataTable tbody tr').index(this);
                var end = $('#ItemModeDataTable tbody tr').index(lastCheckedNewItemPopup);

                for (i = Math.min(start, end) ; i <= Math.max(start, end) ; i++) {
                    if (!$('#ItemModeDataTable tbody tr').eq(i).hasClass('row_selected')) {
                        $('#ItemModeDataTable tbody tr').eq(i).addClass("row_selected");
                    }
                }
                if (window.getSelection) {
                    if (window.getSelection().empty) {  // Chrome
                        window.getSelection().empty();
                    } else if (window.getSelection().removeAllRanges) {  // Firefox
                        window.getSelection().removeAllRanges();
                    }
                } else if (document.selection) {  // IE?
                    document.selection.empty();
                }
            } else if ((e.metaKey || e.ctrlKey)) {
                $(this).toggleClass('row_selected');
            } else {
                $(this).toggleClass('row_selected');
            }

            lastCheckedNewItemPopup = this;
        }

        var IsAddAllRequired = true;

        $('#ItemModeDataTable tbody tr').each(function () {
            if ($(this).hasClass('row_selected')) {
                var vQuickListGUID = $(this).find('#spnQLID').text();
                if (vQuickListGUID != '') {
                    IsAddAllRequired = false;
                }
            }
        });

        if (!IsAddAllRequired) {
            $("#btnAddAll").hide();
        }
        else {
            if (btnaddallButtonShow) {
                $("#btnAddAll").show();
            }
            else {
                $("#btnAddAll").hide();
            }
        }

        return false;
    });


    function onlyNumeric(event) {
        var charCode = (event.which) ? event.which : event.keyCode

        if (charCode > 31 && (charCode < 48 || charCode > 57 || code == 86))
            return false;

        return true;

    }
    function fnFilterGlobalIM() {
        //debugger;
        //set filter only if more than 2 characters are pressed
        if (typeof $("#ItemModel_filter") != 'undefined' && ($("#ItemModel_filter").val().length > 2 || $("#ItemModel_filter").val().length == 0)) {
            //clearNarrowSearchFilterIM();
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            //$('#ItemModeDataTable').dataTable().fnFilter(
            //                searchtext,
            //                null,
            //                null,
            //                null
            //            );
            DoNarrowSearchIM();
        }
        else {
            $('#ItemModeDataTable td').removeHighlight();
            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
        }
    }

    function fnFilterGlobalIM_OnEnter(KeyCode) {

        //set filter only if more than 2 characters are pressed
        if (typeof $("#ItemModel_filter") != 'undefined' && (KeyCode == 13 || $("#ItemModel_filter").val().length == 0)) {
            //clearNarrowSearchFilterIM();
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            //$('#ItemModeDataTable').dataTable().fnFilter(
            //                searchtext,
            //                null,
            //                null,
            //                null
            //            );
            DoNarrowSearchIM();
        }
        else {
            $('#ItemModeDataTable td').removeHighlight();
            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
        }
    }

    //$("#ItemModel_filter").keyup(function (e) {
    //    var code = (e.keyCode ? e.keyCode : e.which);
    //    if (code == 13) {
    //    }
    //    else {
    //        fnFilterGlobalIM();
    //    }
    //});


     _Common.setGloblaSearch('ItemModel_filter', 'ItemModeDataTable', function (txtSearch) {
       fnFilterGlobalIM();
    },
         function (txtSearch, keycode) {
        fnFilterGlobalIM_OnEnter(keycode);
    }
    );

    //var timeoutsc1;
    //$(document).on('propertychange input', "#ItemModel_filter", function (event) {
    //    //fnFilterGlobalIM();
    //    clearTimeout(timeoutsc1);
    //    var self = this;
    //    timeoutsc1 = setTimeout(function () {
    //        if (SearchPattern == 2 || SearchPattern == "2") {
    //            fnFilterGlobalIM();
    //        }
    //        else {
    //            $('#ItemModel_filter').unbind("keypress");
    //            $('#ItemModel_filter').keypress(function (event) {
    //                var keycode = (event.keyCode ? event.keyCode : event.which);
    //                setTimeout(function () { fnFilterGlobalIM_OnEnter(keycode); }, 200);
    //            });
    //            if ($("#ItemModel_filter").val().length == 0) {
    //                setTimeout(function () { fnFilterGlobalIM_OnEnter(0); }, 200);
    //            }
    //        }
    //    }, 500);
    //    return false;
    //});
    //if (SearchPattern == 2 || SearchPattern == "2") {
    //    $("#ItemModel_filter").keydown(function (e) {
    //        var code = (e.keyCode ? e.keyCode : e.which);
    //        if (code == 13) {
    //            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
    //            //$('#ItemModeDataTable').dataTable().fnFilter(
    //            //                searchtext,
    //            //                null,
    //            //                null,
    //            //                null
    //            //            );
    //            DoNarrowSearchIM();
    //            return false;
    //        }
    //    });
    //}
    //else {
    //    $("#ItemModel_filter").keypress(function (e) {
    //        setTimeout(function () { fnFilterGlobalIM_OnEnter(0); }, 200);
    //    });
    //}

    $("#clear_QLItemModel_filter").click(funClearFilterIM);

    function funClearFilterIM() {
        //Check length first
        if ($("#ItemModel_filter").val().length > 0) {
            $("#ItemModel_filter").val('');
            fnFilterGlobalIM();
            //$('#ItemModeDataTable').dataTable().fnFilter(
            //                $("#ItemModel_filter").val(),
            //                null,
            //                null,
            //                null
            //            );
        }
        $("#ItemModel_filter").focus();
        return false;
    }

    $('#PageNumberIM').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#GobtnIM").click();
            return false;
        }
    });

    $("#GobtnIM").click(function () {
        var pval = $('#PageNumberIM').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }

        if (pval == 0)
            return;

        $('#ItemModeDataTable').dataTable().fnPageChange(Number(pval - 1));
        $('#PageNumberIM').val('');
    });

    function GetObject(tr, PageName) {
        var txtQty = $(tr).find('#txtQty');
        var Qty = parseFloat($(txtQty).val());
        var IsQuantityValid = true;
        var ConsignedQtyVal = 0;
        var vLineItemComment = "";
        var itemType = 0;

        if (parseInt('@Model.PerentID') <= 0) {
            IsQuantityValid = false;
        }

        if ('@Model.CallingFromPageName' == 'ICNT') {
            vLineItemComment = $(tr).find('#txtLineItemComment').val();
            itemType = $(tr).find('#spnItemType').text();
        }

        if (('@Model.CallingFromPageName' == 'QL' && '@Model.SelectedQuickListType' == 'Count') || '@Model.CallingFromPageName' == 'ICNT') {

            var txtConsignedQty = $(tr).find('#txtConsignedQty');
            var ConsignedQtyVal = ($(txtConsignedQty).val() == 'NA' ? 0 : parseFloat($(txtConsignedQty).val()));

            if ((isNaN(parseFloat(Qty)) || parseFloat(Qty) <= 0) && (isNaN(parseFloat(ConsignedQtyVal)) || parseFloat(ConsignedQtyVal) <= 0)) {

                if (!('@Model.CallingFromPageName' == 'QL' && '@Model.SelectedQuickListType' == 'Count')) {
                    $("#spanGlobalMessage").html('@ResQuickList.QuantityOrConsignedQtygreaterthanZero');
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    showNotificationDialog();
                    //$(this).find('#txtConsignedQty_' + ID).focus();
                    $(txtQty).focus();
                    allowSubmit = false;
                    IsQuantityValid = false;
                }
            }
        }
        else {
            if ((isNaN(parseFloat(Qty)) || parseFloat(Qty) <= 0)) {
                $("#spanGlobalMessage").html('@ResItemMaster.QuantitygreaterthanZero');
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                showNotificationDialog();
                //$(this).find('#txtConsignedQty_' + ID).focus();
                $(txtQty).focus();
                allowSubmit = false;
                IsQuantityValid = false;
            }
        }

        if (isNaN(parseFloat(Qty)) || parseFloat(Qty) <= 0)
        {
            if (('@Model.CallingFromPageName' == 'QL' && '@Model.SelectedQuickListType' == 'Count')) {
                Qty = "";
            }
            else {
                Qty = 0;
            }
        }


        if (isNaN(parseFloat(ConsignedQtyVal)) || parseFloat(ConsignedQtyVal) <= 0)
        {
            if (('@Model.CallingFromPageName' == 'QL' && '@Model.SelectedQuickListType' == 'Count')) {
                ConsignedQtyVal = "";
            }
            else {
                ConsignedQtyVal = 0;
            }
        }


        if (IsQuantityValid == true) {
            var itemID = $(tr).find('#spnItemID').text();
            var itemGUID = $(tr).find('#spnItemGUID').text();
            var vItemNumber = $(tr).find('#spnItemNumber').text();
            var vDescription = $(tr).find('#spnDescription').text();
            var isEnforce = $(tr).find('#spnIsEnforce').text();
            var reOrderQty = $(tr).find('#spnReOrderQty').text();
            var itemtype = $(tr).find('#spnItemType').text();
            var vSerialNumberTracking = $(tr).find('#spnSerialNumberTracking').text();
            var vUDF1 = ''; var vUDF2 = ''; var vUDF3 = ''; var vUDF4 = ''; var vUDF5 = '';
            var _RequiredDate = null;
            if ($(tr).find('#UDF1').length > 0) {
                if ($(tr).find('#UDF1').attr("class") == 'selectBox') {
                    vUDF1 = $(tr).find('#UDF1 option:selected').text();
                }
                else {
                    vUDF1 = $(tr).find('#UDF1').val();
                }
            }

            if ($(tr).find('#UDF2').length > 0) {
                if ($(tr).find('#UDF2').attr("class") == 'selectBox') {
                    vUDF2 = $(tr).find('#UDF2 option:selected').text();
                }
                else {
                    vUDF2 = $(tr).find('#UDF2').val();
                }
            }

            if ($(tr).find('#UDF3').length > 0) {
                if ($(tr).find('#UDF3').attr("class") == 'selectBox') {
                    vUDF3 = $(tr).find('#UDF3 option:selected').text();
                }
                else {
                    vUDF3 = $(tr).find('#UDF3').val();
                }
            }

            if ($(tr).find('#UDF4').length > 0) {
                if ($(tr).find('#UDF4').attr("class") == 'selectBox') {
                    vUDF4 = $(tr).find('#UDF4 option:selected').text();
                }
                else {
                    vUDF4 = $(tr).find('#UDF4').val();
                }
            }

            if ($(tr).find('#UDF5').length > 0) {
                if ($(tr).find('#UDF5').attr("class") == 'selectBox') {
                    vUDF5 = $(tr).find('#UDF5 option:selected').text();
                }
                else {
                    vUDF5 = $(tr).find('#UDF5').val();
                }
            }

            if (PageName == "RQ") {

                if ($(tr).find("[id^='hdnRequiredDate_']") != null && $(tr).find("[id^='hdnRequiredDate_']") != undefined) {
                    if ($(tr).find("[id^='hdnRequiredDate_']").datepicker('getDate') != null && $(tr).find("[id^='hdnRequiredDate_']").datepicker('getDate') != undefined) {
                        var _RequiredDateTmp = $(tr).find("[id^='hdnRequiredDate_']").datepicker('getDate');
                        _RequiredDate = null;
                        if ($(_RequiredDateTmp).length > 0 && _RequiredDateTmp != null && _RequiredDateTmp != undefined && _RequiredDateTmp.toString() != '') {
                            _RequiredDateTmp = new Date(_RequiredDateTmp - (_RequiredDateTmp.getTimezoneOffset() * 60000));
                            var RequiredDateDay = _RequiredDateTmp.getUTCDate();
                            var RequiredDateMonth = _RequiredDateTmp.getUTCMonth() + 1;
                            var RequiredDateYear = _RequiredDateTmp.getUTCFullYear();
                            _RequiredDate = RequiredDateYear.toString()
                                                 + '-' + (RequiredDateMonth.toString().length == 1 ? '0' + RequiredDateMonth.toString() : RequiredDateMonth.toString())
                                                 + '-' + (RequiredDateDay.toString().length == 1 ? '0' + RequiredDateDay.toString() : RequiredDateDay.toString());
                        }
                    }
                }

                var vUDF1PullCommonPopup = ''; var vUDF2PullCommonPopup = ''; var vUDF3PullCommonPopup = ''; var vUDF4PullCommonPopup = ''; var vUDF5PullCommonPopup = '';
                var currentBinID = $(tr).find("input#hdnLocationId").val();
                if ($("#UDF1PullCommonPopup") != null) {
                    if ($("#UDF1PullCommonPopup").attr("class") == 'selectBox') {
                        vUDF1PullCommonPopup = $("#UDF1PullCommonPopup option:selected").text();
                    }
                    else {
                        vUDF1PullCommonPopup = $("#UDF1PullCommonPopup").val();
                    }
                }

                if ($("#UDF2PullCommonPopup") != null) {
                    if ($("#UDF2PullCommonPopup").attr("class") == 'selectBox') {
                        vUDF2PullCommonPopup = $("#UDF2PullCommonPopup option:selected").text();
                    }
                    else {
                        vUDF2PullCommonPopup = $("#UDF2PullCommonPopup").val();
                    }
                }

                if ($("#UDF3PullCommonPopup") != null) {
                    if ($("#UDF3PullCommonPopup").attr("class") == 'selectBox') {
                        vUDF3PullCommonPopup = $("#UDF3PullCommonPopup option:selected").text();
                    }
                    else {
                        vUDF3PullCommonPopup = $("#UDF3PullCommonPopup").val();
                    }
                }

                if ($("#UDF4PullCommonPopup") != null) {
                    if ($("#UDF4PullCommonPopup").attr("class") == 'selectBox') {
                        vUDF4PullCommonPopup = $("#UDF4PullCommonPopup option:selected").text();
                    }
                    else {
                        vUDF4PullCommonPopup = $("#UDF4PullCommonPopup").val();
                    }
                }

                if ($("#UDF5PullCommonPopup") != null) {
                    if ($("#UDF5PullCommonPopup").attr("class") == 'selectBox') {
                        vUDF5PullCommonPopup = $("#UDF5PullCommonPopup option:selected").text();
                    }
                    else {
                        vUDF5PullCommonPopup = $("#UDF5PullCommonPopup").val();
                    }
                }

                if ($("#chkUsePullCommonPopupUDF").is(":checked")) {
                    vUDF1 = vUDF1PullCommonPopup;
                    vUDF2 = vUDF2PullCommonPopup;
                    vUDF3 = vUDF3PullCommonPopup;
                    vUDF4 = vUDF4PullCommonPopup;
                    vUDF5 = vUDF5PullCommonPopup;
                }
            }

            var vCost = $(tr).find('#spnCost').text();
            if (vCost == null || vCost == "null")
                vCost = 0;

            var DetailData = {};

            if (PageName == "QL") {
                var currentBinID = $(tr).find("input#hdnLocationId").val();
                var currentBinName = $(tr).find("input#ddlItemSourceBins").val();
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'QuickListID': '@Model.PerentID', 'QuickListGUID': '@Model.PerentGUID', "SerialNumberTracking": vSerialNumberTracking, "BinID": currentBinID, "BinName": currentBinName, "ConsignedQuantity": ConsignedQtyVal, "UDF1": vUDF1, "UDF2": vUDF2, "UDF3": vUDF3, "UDF4": vUDF4, "UDF5": vUDF5 };
            }
            else if (PageName == "ICNT") {
                var currentBinID = $(tr).find("input#hdnLocationId").val();
                var currentBinName = $(tr).find("input#ddlItemSourceBins").val();
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "CountCustomerOwnedQuantity": Qty, 'InventoryCountGUID': '@Model.PerentGUID', "IsStagingLocationCount": false, "BinID": currentBinID, "BinNumber": currentBinName, "CountConsignedQuantity": ConsignedQtyVal, "CountLineItemDescription": vLineItemComment, "ItemType": itemType };
            }
            else if (PageName == "PS") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityLimit": Qty, 'ProjectID': '@Model.PerentID', 'ProjectGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
            }
            else if (PageName == "ORD" || PageName == "RETORD") {
                var modulo = parseInt(Qty) % parseInt(reOrderQty);
                if (isEnforce == 'true' && modulo > 0 && gblActionName.toLowerCase() != 'returnorderlist') {
                    var devideval = parseInt(parseInt(Qty) / parseInt(reOrderQty)) + 1;
                    var newQty = reOrderQty * devideval;

                    DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": newQty, 'OrderID': '@Model.PerentID', 'OrderGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };

                    //$('div#targetItemModel').fadeToggle();
                    //$("div#targetItemModel").delay(3000).fadeOut(200);
                    if ($("#spanGlobalMSGIM").html().length > 0)
                        $("#spanGlobalMSGIM").html($("#spanGlobalMSGIM").html() + "<br/> Added qty =" + Qty + " change to " + newQty + " due to enforce reorder quantity");
                    else
                        $("#spanGlobalMSGIM").html("Added qty =" + Qty + " change to " + newQty + " due to enforce reorder quantity");
                    // $("#spanGlobalMSGIM").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                }
                else {
                    DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'OrderID': '@Model.PerentID', 'OrderGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
                }
            }
            else if (PageName == "RQ") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityRequisitioned": Qty, 'RequisitionID': '@Model.PerentID', 'RequisitionGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemCost": vCost, "RequiredDate": '@Model.ReqRequiredDate', "SerialNumberTracking": vSerialNumberTracking, "PullUDF1": vUDF1, "PullUDF2": vUDF2, "PullUDF3": vUDF3, "PullUDF4": vUDF4, "PullUDF5": vUDF5, "BinID": currentBinID, RequiredDate: _RequiredDate };
            }
            else if (PageName == "WO") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'WorkOrderID': '@Model.PerentID', 'WorkOrderGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "SerialNumberTracking": vSerialNumberTracking };
            }
            else if (PageName == "KIT") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityPerKit": Qty, 'KitID': '@Model.PerentID', 'KitGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemType": itemtype, "SerialNumberTracking": vSerialNumberTracking };
            }
            else if (PageName == "TRF") {
                @*DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'TransferID': '@Model.PerentID', 'TransferGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };*@
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'TransferID': '@Model.PerentID', 'TransferGUID': '@Model.PerentGUID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
            }
            else if (PageName == "AS") {
                DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'ScheduleID': '@Model.PerentID', 'ScheduleGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
            }

            return DetailData;
        }

        return null;
    }

    function AddItemToDetailTable(btn, PageName) {

        //debugger;
        var arrItems = new Array();
        var arrRows = new Array();
        if (btn.id == 'btnAdd') {
            var tr = $(btn).parent().parent();
            //if ($(tr).attr('class').indexOf('row_selected') == -1) {
            $(tr).toggleClass('row_selected');
            //}
            var obj = GetObject(tr, PageName);
            if (obj !== null) {
                if (obj != null) {
                    if ('@Model.CallingFromPageName' == 'TRF') {
                        obj.BinName = $.trim($(tr).find("input#ddlItemSourceBins").val());
                        var currentBinID = $(tr).find("input#hdnLocationId").val();
                        if ((isNaN(parseInt(obj.Bin)) || parseInt(obj.Bin) <= 0) && (currentBinID !== undefined && parseInt(currentBinID) > 0))
                            obj.Bin = currentBinID;

                        if ($.trim(obj.BinName.length) <= 0 && '@(Model.TransferRequestType)' == '@(RequestType.In)') {
                            alert('@ResTransfer.SelectBin');
                            $('#DivLoading').hide();
                            $(btn).removeAttr("disabled");
                            return;
                        }

                    }
                }
                arrItems.push(obj);
                UDFInsertNewForGrid(tr);
            }
        }
        else if (btn.id === 'btnAddAll') {

            $('#ItemModeDataTable tbody tr').each(function () {
                if (PageName == 'ORD' || PageName == 'RETORD') {
                    if ($(this).attr('class').indexOf('row_selected') != -1) {
                        var obj = GetObject(this, PageName);
                        if (obj !== null) {
                            arrRows.push($(this));
                            arrItems.push(obj);
                        }
                    }
                }
                else if (PageName == 'KIT') {
                    if ($(this).attr('class').indexOf('row_selected') != -1) {
                        var obj = GetObject(this, PageName);
                        if (obj !== null) {
                            arrRows.push($(this));
                            arrItems.push(obj);
                        }
                    }

                }
                else {
                    if ($(this).attr('class').indexOf('row_selected') != -1) {
                        var obj = GetObject(this, PageName);
                        if (obj !== null) {
                            if ('@Model.CallingFromPageName' == 'TRF') {
                                obj.BinName = $.trim($(this).find("input#ddlItemSourceBins").val());
                                var currentBinID = $(this).find("input#hdnLocationId").val();
                                if ((isNaN(parseInt(obj.Bin)) || parseInt(obj.Bin) <= 0) && (currentBinID !== undefined && parseInt(currentBinID) > 0))
                                    obj.Bin = currentBinID;


                                if ($.trim(obj.BinName.length) <= 0 && '@(Model.TransferRequestType)' == '@(RequestType.In)') {
                                    alert('@ResTransfer.SelectBin');
                                    $('#DivLoading').hide();
                                    $(btn).removeAttr("disabled");
                                    return;
                                }

                            }
                            arrRows.push($(this));
                            arrItems.push(obj);
                            UDFInsertNewForGrid($(this));
                        }
                    }
                }
            });
        }


        if (arrItems.length != undefined && arrItems.length > 0) {
            $.ajax({
                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: { 'para': JSON.stringify(arrItems) },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (json) {
                    var successMessage = (json.Message);
                    if (btn.id == 'btnAdd') {
                        if (json.Status == "success" || json.Status == "ok" || json.Status == "Ok" || json.Status == "OK") {
                            $(btn).parent().parent().find('#txtQty').val('');
                            $('#ItemModeDataTable').dataTable().fnDeleteRow($(btn).parent().parent());
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                        }
                        else if (json.Status == "fail" || json.Status == "Error") {
                            $("#spanGlobalMessage").removeClass('successIcon succesIcon').addClass('errorIcon WarningIcon');
                        }
                    }
                    else if (btn.id === 'btnAddAll') {
                        $('#btnAddAll').removeAttr("disabled");
                        if (json.Status == "success" || json.Status == "ok" || json.Status == "Ok" || json.Status == "OK") {
                            $('#ItemModeDataTable tbody tr.row_selected').each(function () {
                                $(this).find('#txtQty').val('');
                            });
                            $('#ItemModeDataTable').dataTable().fnDeleteRow($(btn).parent().parent());
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                        }
                        else {
                            $("#spanGlobalMessage").removeClass('successIcon succesIcon').addClass('errorIcon WarningIcon');
                        }
                    }
                    $(btn).removeAttr("disabled");
                    $("#spanGlobalMessage").html(successMessage);
                    showNotificationDialog();
                    $('#DivLoading').hide();
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $(btn).removeAttr("disabled");
                    $('#btnAddAll').removeAttr("disabled");
                }, complete: function () {

                }
            });
        }
        else {
            $("#DivLoading").hide();
            $(btn).removeAttr("disabled");
            $('#btnAddAll').removeAttr("disabled");
        }
    }

    function GetCommanUDFValueFromTR(udfName, tr) {
        var vUDFValue = '';
        if ($(tr).find('#' + udfName).length > 0) {
            if ($(tr).find('#' + udfName).attr("class") == 'selectBox') {
                vUDFValue = $(tr).find('#' + udfName + ' option:selected').text();
            }
            else {
                vUDFValue = $(tr).find('#' + udfName).val();
            }
        }
        return vUDFValue;
    }

    function GetPullCommanUDFValue(udfName) {
        var vUDFValue = '';
        if ($("#" + udfName).length > 0) {
            if ($("#" + udfName).attr("class") == 'selectBox') {
                vUDFValue = $("#" + udfName + " option:selected").text();
            }
            else {
                vUDFValue = $("#" + udfName).val();
            }
        }

        return vUDFValue;
    }

    function GetRequisitionDetailObject(tr, PageName) {

        var txtQty = $(tr).find('#txtQty');
        var Qty = parseFloat($(txtQty).val());
        var IsQuantityValid = true;
        var ConsignedQtyVal = 0;
        var _RequiredDate = '@Model.ReqRequiredDate';
        var _ReqGUID = '@Model.PerentGUID';
        var _ReqID = '@Model.PerentID';
        if (parseInt(_ReqID) <= 0) {
            IsQuantityValid = false;
        }

        if ((isNaN(parseFloat(Qty)) || parseFloat(Qty) <= 0)) {
            $("#spanGlobalMessage").html('@ResItemMaster.QuantitygreaterthanZero');
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            showNotificationDialog();
            $(txtQty).focus();
            allowSubmit = false;
            IsQuantityValid = false;
            Qty = 0;
        }

        if (IsQuantityValid == true) {
            var itemID = $(tr).find('#spnItemID').text();
            var itemGUID = $(tr).find('#spnItemGUID').text();
            var vItemNumber = $(tr).find('#spnItemNumber').text();
            var vDescription = $(tr).find('#spnDescription').text();
            var isEnforce = $(tr).find('#spnIsEnforce').text();
            var reOrderQty = $(tr).find('#spnReOrderQty').text();
            var itemtype = $(tr).find('#spnItemType').text();
            var vSerialNumberTracking = $(tr).find('#spnSerialNumberTracking').text();

            var vUDF1 = ''; var vUDF2 = ''; var vUDF3 = ''; var vUDF4 = ''; var vUDF5 = '';


            var currentBinID = $(tr).find("input#hdnLocationId").val();
            if ($(tr).find("span#spnItemType").html() == "4") {
                currentBinID = null;
            }
            var currentBinName = $(tr).find("input#ddlItemSourceBins").val();
            var vPullOrderNumber = "";


            if ($("#chkUsePullCommonPopupUDF").is(":checked")) {
                vUDF1 = GetPullCommanUDFValue('UDF1PullCommonPopup');
                vUDF2 = GetPullCommanUDFValue('UDF2PullCommonPopup');
                vUDF3 = GetPullCommanUDFValue('UDF3PullCommonPopup');
                vUDF4 = GetPullCommanUDFValue('UDF4PullCommonPopup');
                vUDF5 = GetPullCommanUDFValue('UDF5PullCommonPopup');

                if ($('#txtPullOrderNumberCommonPopup') != null) {
                    if ($('#txtPullOrderNumberCommonPopup').attr("class") == 'selectBox') {
                        vPullOrderNumber = $('#txtPullOrderNumberCommonPopup option:selected').text();
                    }
                    else {
                        vPullOrderNumber = $('#txtPullOrderNumberCommonPopup').val();
                    }
                }
            }
            else {
                vUDF1 = GetCommanUDFValueFromTR('UDF1', tr);
                vUDF2 = GetCommanUDFValueFromTR('UDF2', tr);
                vUDF3 = GetCommanUDFValueFromTR('UDF3', tr);
                vUDF4 = GetCommanUDFValueFromTR('UDF4', tr);
                vUDF5 = GetCommanUDFValueFromTR('UDF5', tr);

                if ($(tr).find('#txtPullOrderNumber') != null) {
                    if ($(tr).find('#txtPullOrderNumber').attr("class") == 'selectBox') {
                        vPullOrderNumber = $(tr).find('#txtPullOrderNumber option:selected').text();
                    }
                    else {
                        vPullOrderNumber = $(tr).find('#txtPullOrderNumber').val();
                    }
                }

            }
            var vCost = $(tr).find('#spnCost').text();
            if (vCost == null || vCost == "null")
                vCost = 0;

            if ($(tr).find("[id^='hdnRequiredDate_']") != null && $(tr).find("[id^='hdnRequiredDate_']") != undefined) {
                if ($(tr).find("[id^='hdnRequiredDate_']").datepicker('getDate') != null && $(tr).find("[id^='hdnRequiredDate_']").datepicker('getDate') != undefined) {
                    var _RequiredDateTmp = $(tr).find("[id^='hdnRequiredDate_']").datepicker('getDate');
                    _RequiredDate = null;
                    if ($(_RequiredDateTmp).length > 0 && _RequiredDateTmp != null && _RequiredDateTmp != undefined && _RequiredDateTmp.toString() != '') {
                        _RequiredDateTmp = new Date(_RequiredDateTmp - (_RequiredDateTmp.getTimezoneOffset() * 60000));
                        var RequiredDateDay = _RequiredDateTmp.getUTCDate();
                        var RequiredDateMonth = _RequiredDateTmp.getUTCMonth() + 1;
                        var RequiredDateYear = _RequiredDateTmp.getUTCFullYear();
                        _RequiredDate = RequiredDateYear.toString()
                                             + '-' + (RequiredDateMonth.toString().length == 1 ? '0' + RequiredDateMonth.toString() : RequiredDateMonth.toString())
                                             + '-' + (RequiredDateDay.toString().length == 1 ? '0' + RequiredDateDay.toString() : RequiredDateDay.toString());
                    }
                }
            }

            var DetailData = {
                "ItemID": itemID, "ItemGUID": itemGUID, "QuantityRequisitioned": Qty, 'RequisitionID': _ReqID,
                'RequisitionGUID': _ReqGUID, "ItemNumber": vItemNumber, "Description": vDescription, "ItemCost": vCost,
                "RequiredDate": _RequiredDate, "SerialNumberTracking": vSerialNumberTracking, "PullUDF1": vUDF1, "PullUDF2": vUDF2,
                "PullUDF3": vUDF3, "PullUDF4": vUDF4, "PullUDF5": vUDF5, "BinID": currentBinID, "BinName": currentBinName, "PullOrderNumber": vPullOrderNumber
            };

            return DetailData;
        }

        return null;
    }

    function AddItemToRequisitionDetail(btn, PageName) {

        var arrItems = new Array();
        if (btn.id == 'btnAdd') {
            var tr = $(btn).parent().parent();
            $(tr).toggleClass('row_selected');
            var obj = GetRequisitionDetailObject(tr, PageName);
            if (obj !== null) {
                arrItems.push(obj);
                UDFInsertNewForGrid(tr);
            }
        }
        else if (btn.id === 'btnAddAll') {
            $('#ItemModeDataTable tbody tr.row_selected').each(function () {
                var obj = GetRequisitionDetailObject(this, PageName);
                if (obj !== null) {
                    arrItems.push(obj);
                    UDFInsertNewForGrid($(this));
                }
            });
        }
        var urlTo = '@Url.Content(Model.AjaxURLAddMultipleItemToSession)';

        if (arrItems.length != undefined && arrItems.length > 0) {
            var newArray = new Array();
            var mainArray = new Array();
            for (var i = 0; i < arrItems.length; i++) {
                if (newArray.length < 250) {
                    newArray.push(arrItems[i]);
                }
                else {
                    mainArray.push(newArray);
                    newArray = null;
                    newArray = new Array();
                    newArray.push(arrItems[i]);
                }
            }

            if (newArray.length > 0) {
                mainArray.push(newArray);
            }
            // for (var k = 0; k < mainArray.length;) {
            $('#DivLoading').show();
            $.ajax({
                url: urlTo,
                data: { 'para': JSON.stringify(arrItems) },
                dataType: 'json',
                type: 'POST',
                async: true,
                timeout: 1200000,
                //cache: false,
                success: function (json) {
                    //if(k== (mainArray.length-1)){
                    if (json.Status == "ok") {
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                        if (btn.id == 'btnAdd') {
                           // $(btn).parent().parent().find('#txtQty').val('');
                        }
                        else if (btn.id === 'btnAddAll') {
                            $('#ItemModeDataTable tbody tr.row_selected').each(function () {
                                //$(this).find('#txtQty').val('');
                                $(this).removeClass('row_selected');
                            });
                        }
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                    }
                    var successMessage = (json.Message);
                    $(btn).removeAttr("disabled");
                    $("#spanGlobalMessage").html(successMessage);
                    showNotificationDialog();
                    // }

                    $('#DivLoading').hide();
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $(btn).removeAttr("disabled");
                },
                complete: function () {
                    // k++;
                }
            });
            // }
        }
        else {
            $("#DivLoading").hide();
            $(btn).removeAttr("disabled");
        }
    }



    function AddSingleItemToQuickList(obj) {
        $('div#DivLoading').show();
        $(obj).attr("disabled", "disabled");
        if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'RETORD') {
            setTimeout(function () { AddItemToOrder(obj, '@Model.CallingFromPageName'); }, 100);
            return;
        }
        else if ('@Model.CallingFromPageName' == 'MNTNANCE') {
            setTimeout(function () { AddItemToToolMaintenance(obj, '@Model.CallingFromPageName'); }, 100);
            return;
        }
        else if ('@Model.CallingFromPageName' == 'RQ') {
            $("#DivLoading").show();
            setTimeout(function () {
                AddItemToRequisitionDetail(obj, '@Model.CallingFromPageName');
            }, 100);
            return;
        }
        else if ('@Model.CallingFromPageName' == 'PS' || '@Model.CallingFromPageName' == 'QL' || '@Model.CallingFromPageName' == 'ICNT' || '@Model.CallingFromPageName' == 'WO' || '@Model.CallingFromPageName' == 'KIT' || '@Model.CallingFromPageName' == 'TRF' || '@Model.CallingFromPageName' == 'AS') {
            AddItemToDetailTable(obj, '@Model.CallingFromPageName');
            return;
        }
        else if ('@Model.CallingFromPageName' == 'Quote') {
            setTimeout(function () { AddItemToQuote(obj, '@Model.CallingFromPageName'); }, 100);
            return;
        }

        var txxt = $(obj).parent().parent().find('#txtQty');
        var txtQty = txxt.val();
        if ('@Model.CallingFromPageName' != 'MNTNANCE') {
            if (txtQty != 'undefined' && txtQty.length > 0) {
                var trimtxtVal = txtQty.replace(/ /g, '');
                if (trimtxtVal.length > 0) {
                    var ItemID = $(obj).parent().find('#spnItemID').text();
                    var ItemGUID = $(obj).parent().find('#spnItemGUID').text();

                    $.ajax({
                        url: '@Url.Content(Model.AjaxURLAddItemToSession)',
                        data: { 'pItemID': ItemID, 'pItemGUID': ItemGUID, 'pQuentity': trimtxtVal },
                        dataType: 'json',
                        type: 'POST',
                        async: false,
                        cache: false,
                        success: function (json) {
                            //
                            txxt.val('');
                            $('#ItemModeDataTable').dataTable().fnDraw();
                            CallThisFunctionFromModel(json.Status);
                        },
                        error: function (xhr) {
                            $('#DivLoading').hide();
                            $("#loading").hide();
                        }
                    });
                }
            }
        }
    }


    //////////////////////////////////// // new added for QL///////////////////////////////////START

    function AddQuickListToSelectedModule(obj) { // new added for QL
        $('#DivLoading').show();
        $(obj).attr("disabled", "disabled");
        if ('@Model.CallingFromPageName' == 'PS' || '@Model.CallingFromPageName' == 'QL' || '@Model.CallingFromPageName' == 'ORD' ||
            '@Model.CallingFromPageName' == 'RETORD' || '@Model.CallingFromPageName' == 'WO' || '@Model.CallingFromPageName' == 'KIT' ||
            '@Model.CallingFromPageName' == 'TRF' || '@Model.CallingFromPageName' == 'AS' || '@Model.CallingFromPageName' == 'Quote') {
            AddQuickListToDetailTable(obj, '@Model.CallingFromPageName');
            return;
        }
        else if ('@Model.CallingFromPageName' == 'RQ') {
            addQuickListToREQ(obj, '@Model.CallingFromPageName');
        }
    }

    function addQuickListToREQ(btn, PageName) {
        var vQuickListGUID = '';
        var arrItems = new Array();
        var arrRows = new Array();
        var qty = 0;

        if (btn.id == 'btnAdd') {
            var tr = $(btn).parent().parent();
            var obj = GetObjectForQLItems(tr, PageName);
            if (obj !== null) {
                vQuickListGUID = $(tr).find('#spnQLID').text();
                arrItems.push(obj);
                var txtQty = $(tr).find('#txtQty');
                if (txtQty != undefined || txtQty != null)
                    qty = parseFloat($(txtQty).val());
            }
        }
        else if (btn.id === 'btnAddAll') {

            $('#ItemModeDataTable tbody tr').each(function () {
                var obj = GetObject(this, PageName);
                if (obj !== null) {
                    arrRows.push($(this));
                    arrItems.push(obj);
                }
            });
        }
        if (arrItems.length != undefined && arrItems.length > 0) {
            $.ajax({
                url: '@Url.Action("AddQLToDetailTable", "Consume")',
                data: { 'ReqGUID': '@Model.PerentGUID', 'QuickListGUID': vQuickListGUID, 'QLQTY': qty, "PullUDF1": arrItems[0].PullUDF1, "PullUDF2": arrItems[0].PullUDF2, "PullUDF3": arrItems[0].PullUDF3, "PullUDF4": arrItems[0].PullUDF4, "PullUDF5": arrItems[0].PullUDF5 },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (json) {
                    if (json.Status == "fail") {
                        $("#spanGlobalMessage").addClass('errorIcon WarningIcon');
                        $("#spanGlobalMessage").html(json.Message);
                        showNotificationDialog();
                        $(btn).parent().parent().css('display', 'none');
                        $('#DivLoading').hide();
                    }
                    else {
                        //$('#ItemModeDataTable').dataTable().fnDraw();
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                        $("#spanGlobalMessage").html(json.Message);
                        showNotificationDialog();
                        $(btn).parent().parent().css('display', 'none');
                        $('#DivLoading').hide();
                    }
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $(btn).removeAttr("disabled");
                }
            });
        }
        else {
            $("#DivLoading").hide();
            $(btn).removeAttr("disabled");
        }
    }
    function AddQuickListToDetailTable(btn, PageName) { // new added for QL
        var vQuickListGUID = '';
        var arrItems = new Array();
        var arrRows = new Array();
        var qty = 0;
        if (btn.id == 'btnAdd') {
            var tr = $(btn).parent().parent();
            var obj = GetObjectForQLItems(tr, PageName);
            //$(tr).toggleClass('row_selected');
            if (obj !== null) {
                vQuickListGUID = $(tr).find('#spnQLID').text();
                var txtQty = $(tr).find('#txtQty');

                if (typeof (txtQty) != "undefined" || txtQty != null)
                {
                    qty = parseFloat($(txtQty).val());
                    if (parseFloat(qty) > 0)
                    {
                        arrItems.push(obj);
                        var QtyQL = parseFloat(qty).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10));
                        $(tr).find('#txtQty').val(QtyQL);
                    }
                    else
                    {
                        $("#spanGlobalMessage").html('@ResItemMaster.QuantitygreaterthanZero');
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                        showNotificationDialog();
                    }
                }
            }
        }
        else if (btn.id === 'btnAddAll') {

            $('#ItemModeDataTable tbody tr').each(function () {
                var obj = GetObject(this, PageName);
                if (obj !== null) {
                    arrRows.push($(this));
                    arrItems.push(obj);
                }
            });
        }
        if (arrItems.length != undefined && arrItems.length > 0) {
            $.ajax({
                url: '@Url.Content("~/Master/AddQuickListToDetailTableWithoutCount")', //'@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: { 'para': JSON.stringify(arrItems), 'ModuleName': PageName, 'QuickListGUID': vQuickListGUID, 'QLQTY': qty },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (json) {
                    arrItems = new Array();
                    arrRows = new Array();
                    $(json.Items).each(function () {
                        var obj = GetObjectForItemPopUpFromQL(this, PageName);
                        if (obj !== null) {
                            arrRows.push($(this));
                            arrItems.push(obj);
                        }
                    });

                    if (arrItems.length != undefined && arrItems.length > 0) {
                        if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'RETORD') {
                            $.ajax({
                                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                                data: JSON.stringify({ 'objNewItems': arrItems, 'OrderID': '@Model.PerentID' }),
                                dataType: 'json',
                                type: 'POST',
                                async: false,
                                contentType: 'application/json',
                                cache: false,
                                success: function (json) {
                                    //$('#ItemModeDataTable').dataTable().fnDraw();
                                    //$(btn).parent().parent().css('display', 'none');
                                    //$('#DivLoading').hide();

                                    var errorMessage = json.Message;
                                    if (json.Status == "ok") {
                                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                                    }
                                    else {
                                        $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                                    }

                                    $('#DivLoading').hide();
                                    $("#spanGlobalMessage").html(errorMessage);
                                    showNotificationDialog();
                                },
                                error: function (xhr) {
                                    $('#DivLoading').hide();
                                    $(btn).removeAttr("disabled");
                                }
                            });
                        }
                        else if ('@Model.CallingFromPageName' == 'Quote') {
                            $.ajax({
                                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                                data: JSON.stringify({ 'objNewItems': arrItems, 'QuoteID': '@Model.PerentID' }),
                                dataType: 'json',
                                type: 'POST',
                                async: false,
                                contentType: 'application/json',
                                cache: false,
                                success: function (json) {
                                    var errorMessage = json.Message;
                                    if (json.Status == "ok") {
                                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                                    }
                                    else {
                                        $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                                    }

                                    $('#DivLoading').hide();
                                    $("#spanGlobalMessage").html(errorMessage);
                                    showNotificationDialog();
                                },
                                error: function (xhr) {
                                    $('#DivLoading').hide();
                                    $(btn).removeAttr("disabled");
                                }
                            });
                        }
                        else {
                            $.ajax({
                                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                                data: { 'para': JSON.stringify(arrItems) },
                                dataType: 'json',
                                type: 'POST',
                                async: false,
                                cache: false,
                                success: function (json) {
                                    //$('#ItemModeDataTable').dataTable().fnDraw();
                                    $('#DivLoading').hide();

                                    if (PageName == 'PS') {
                                        if (json.Status == "success" || json.Status == "ok" || json.Status == "Ok" || json.Status == "OK") {
                                            $(btn).parent().parent().find('#txtQty').val('');
                                            //$('#ItemModeDataTable').dataTable().fnDeleteRow($(btn).parent().parent());
                                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                                            //$('#ItemModeDataTable').dataTable().fnDraw();
                                        }
                                        else {
                                            $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                                        }
                                        $('#DivLoading').hide();
                                        $("#spanGlobalMessage").html(json.Message);
                                        showNotificationDialog();

                                    }
                                    else {
                                        $(btn).parent().parent().css('display', 'none');

                                        if (PageName == 'TRF') {
                                            var errorMessage = json.Message;
                                            if (json.Status.toLowerCase() == "success") {
                                                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('successIcon succesIcon');
                                            }
                                            else {
                                                $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                                            }

                                            $('#DivLoading').hide();
                                            $("#spanGlobalMessage").html(errorMessage);
                                            showNotificationDialog();
                                        }
                                    }
                                },
                                error: function (xhr) {
                                    $('#DivLoading').hide();
                                    $(btn).removeAttr("disabled");
                                }
                            });
                        }
                    }
                    else {
                        if (PageName == 'TRF') {
                            $("#spanGlobalMessage").removeClass('successIcon succesIcon WarningIcon').addClass('errorIcon');
                            $("#spanGlobalMessage").html('@ResTransfer.MsgMatchingItemNotFoundToAdd');
                            showNotificationDialog();
                        }
                        $("#DivLoading").hide();
                        $(btn).removeAttr("disabled");
                    }
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $(btn).removeAttr("disabled");
                }
            });
        }
        else {
            $("#DivLoading").hide();
            $(btn).removeAttr("disabled");
        }
    }
    function GetObjectForQLItems(tr, PageName) {// new added for QL

        var itemID = $(tr).find('#spnItemID').text();
        var itemGUID = $(tr).find('#spnItemGUID').text();
        var vItemNumber = $(tr).find('#spnItemNumber').text();
        var vDescription = $(tr).find('#spnDescription').text();
        var vCost = 0; //$(tr).find('#spnCost').text();
        var itemtype = $(tr).find('#spnItemType').text();
        var vSerialNumberTracking = $(tr).find('#spnSerialNumberTracking').text();
        var vUDF1 = ''; var vUDF2 = ''; var vUDF3 = ''; var vUDF4 = ''; var vUDF5 = '';

        if ($(tr).find('#UDF1').length > 0) {
            if ($(tr).find('#UDF1').attr("class") == 'selectBox') {
                vUDF1 = $(tr).find('#UDF1 option:selected').text();
            }
            else {
                vUDF1 = $(tr).find('#UDF1').val();
            }
        }

        if ($(tr).find('#UDF2').length > 0) {
            if ($(tr).find('#UDF2').attr("class") == 'selectBox') {
                vUDF2 = $(tr).find('#UDF2 option:selected').text();
            }
            else {
                vUDF2 = $(tr).find('#UDF2').val();
            }
        }

        if ($(tr).find('#UDF3').length > 0) {
            if ($(tr).find('#UDF3').attr("class") == 'selectBox') {
                vUDF3 = $(tr).find('#UDF3 option:selected').text();
            }
            else {
                vUDF3 = $(tr).find('#UDF3').val();
            }
        }

        if ($(tr).find('#UDF4').length > 0) {
            if ($(tr).find('#UDF4').attr("class") == 'selectBox') {
                vUDF4 = $(tr).find('#UDF4 option:selected').text();
            }
            else {
                vUDF4 = $(tr).find('#UDF4').val();
            }
        }

        if ($(tr).find('#UDF5').length > 0) {
            if ($(tr).find('#UDF5').attr("class") == 'selectBox') {
                vUDF5 = $(tr).find('#UDF5 option:selected').text();
            }
            else {
                vUDF5 = $(tr).find('#UDF5').val();
            }
        }

        if (PageName == "RQ") {

            var vUDF1PullCommonPopup = ''; var vUDF2PullCommonPopup = ''; var vUDF3PullCommonPopup = ''; var vUDF4PullCommonPopup = ''; var vUDF5PullCommonPopup = '';

            if ($("#UDF1PullCommonPopup") != null) {
                if ($("#UDF1PullCommonPopup").attr("class") == 'selectBox') {
                    vUDF1PullCommonPopup = $("#UDF1PullCommonPopup option:selected").text();
                }
                else {
                    vUDF1PullCommonPopup = $("#UDF1PullCommonPopup").val();
                }
            }

            if ($("#UDF2PullCommonPopup") != null) {
                if ($("#UDF2PullCommonPopup").attr("class") == 'selectBox') {
                    vUDF2PullCommonPopup = $("#UDF2PullCommonPopup option:selected").text();
                }
                else {
                    vUDF2PullCommonPopup = $("#UDF2PullCommonPopup").val();
                }
            }

            if ($("#UDF3PullCommonPopup") != null) {
                if ($("#UDF3PullCommonPopup").attr("class") == 'selectBox') {
                    vUDF3PullCommonPopup = $("#UDF3PullCommonPopup option:selected").text();
                }
                else {
                    vUDF3PullCommonPopup = $("#UDF3PullCommonPopup").val();
                }
            }

            if ($("#UDF4PullCommonPopup") != null) {
                if ($("#UDF4PullCommonPopup").attr("class") == 'selectBox') {
                    vUDF4PullCommonPopup = $("#UDF4PullCommonPopup option:selected").text();
                }
                else {
                    vUDF4PullCommonPopup = $("#UDF4PullCommonPopup").val();
                }
            }

            if ($("#UDF5PullCommonPopup") != null) {
                if ($("#UDF5PullCommonPopup").attr("class") == 'selectBox') {
                    vUDF5PullCommonPopup = $("#UDF5PullCommonPopup option:selected").text();
                }
                else {
                    vUDF5PullCommonPopup = $("#UDF5PullCommonPopup").val();
                }
            }

            if ($("#chkUsePullCommonPopupUDF").is(":checked")) {
                vUDF1 = vUDF1PullCommonPopup;
                vUDF2 = vUDF2PullCommonPopup;
                vUDF3 = vUDF3PullCommonPopup;
                vUDF4 = vUDF4PullCommonPopup;
                vUDF5 = vUDF5PullCommonPopup;
            }
        }


        var Qty = 0;

        var DetailData = {};
        if (PageName == "QL") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'QuickListID': '@Model.PerentID', 'QuickListGUID': '@Model.PerentGUID', "SerialNumberTracking": vSerialNumberTracking, "BinID": currentBinID };
        }
        else if (PageName == "PS") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityLimit": Qty, 'ProjectID': '@Model.PerentID', 'ProjectGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "ORD" || PageName == "RETORD") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'OrderID': '@Model.PerentID', 'OrderGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "RQ") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityRequisitioned": Qty, 'RequisitionID': '@Model.PerentID', 'RequisitionGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemCost": vCost, "RequiredDate": '@Model.ReqRequiredDate', "SerialNumberTracking": vSerialNumberTracking, "PullUDF1": vUDF1, "PullUDF2": vUDF2, "PullUDF3": vUDF3, "PullUDF4": vUDF4, "PullUDF5": vUDF5 };
        }
        else if (PageName == "WO") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'WorkOrderID': '@Model.PerentID', 'WorkOrderGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "KIT") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityPerKit": Qty, 'KitID': '@Model.PerentID', 'KitGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemType": itemtype, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "TRF") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'TransferID': '@Model.PerentID', 'TransferGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "AS") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'ScheduleID': '@Model.PerentID', 'ScheduleGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "Quote") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'QuoteID': '@Model.PerentID', 'QuoteGUID': '@Model.PerentGUID', "BinID": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
        }
        return DetailData;
    }

    function GetObjectForItemPopUpFromQL(tr, PageName) {// new added for QL
        var itemID = $(tr)[0].ID;
        var itemGUID = $(tr)[0].GUID;
        var vItemNumber = $(tr)[0].ItemNumber;
        var vDescription = $(tr)[0].Description;
        var vCost = $(tr)[0].Cost;
        var Qty = $(tr)[0].QuickListItemQTY;
        var itemtype = $(tr)[0].ItemType;
        var vSerialNumberTracking = $(tr)[0].SerialNumberTracking;
        var BinId = $(tr)[0].BinID;
        var vUDF1 = '';
        var vUDF2 = '';
        var vUDF3 = '';
        var vUDF4 = '';
        var vUDF5 = '';
        if (PageName == "RQ") {
            vUDF1 = $(tr)[0].UDF1;
            vUDF2 = $(tr)[0].UDF2;
            vUDF3 = $(tr)[0].UDF3;
            vUDF4 = $(tr)[0].UDF4;
            vUDF5 = $(tr)[0].UDF5;
        }

        var DetailData = {};
        if (PageName == "QL") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'QuickListID': '@Model.PerentID', 'QuickListGUID': '@Model.PerentGUID', "SerialNumberTracking": vSerialNumberTracking, "BinID": currentBinID };
        }
        else if (PageName == "PS") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityLimit": Qty, 'ProjectID': '@Model.PerentID', 'ProjectGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "ORD" || PageName == "RETORD") {
            var QuickListGUID = $(tr)[0].QuickListGUID;
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'OrderID': '@Model.PerentID', 'OrderGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking, "Bin": BinId, "QuickListGUID": QuickListGUID };
        }
        else if (PageName == "RQ") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityRequisitioned": Qty, 'RequisitionID': '@Model.PerentID', 'RequisitionGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemCost": vCost, "RequiredDate": '@Model.ReqRequiredDate', "SerialNumberTracking": vSerialNumberTracking, "PullUDF1": vUDF1, "PullUDF2": vUDF2, "PullUDF3": vUDF3, "PullUDF4": vUDF4, "PullUDF5": vUDF5 };
        }
        else if (PageName == "WO") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'WorkOrderID': '@Model.PerentID', 'WorkOrderGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "KIT") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "QuantityPerKit": Qty, 'KitID': '@Model.PerentID', 'KitGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "Description": vDescription, "ItemType": itemtype, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "TRF") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'TransferID': '@Model.PerentID', 'TransferGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.OrdRequeredDate', "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "AS") {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "Quantity": Qty, 'ScheduleID': '@Model.PerentID', 'ScheduleGUID': '@Model.PerentGUID', "ItemNumber": vItemNumber, "ItemCost": vCost, "Description": vDescription, "SerialNumberTracking": vSerialNumberTracking };
        }
        else if (PageName == "Quote" ) {
            DetailData = { "ItemID": itemID, "ItemGUID": itemGUID, "RequestedQuantity": Qty, 'QuoteID': '@Model.PerentID', 'QuoteGUID': '@Model.PerentGUID', "Bin": '@Model.OrdStagingID', "RequiredDate": '@Model.QuoteRequeredDate', "SerialNumberTracking": vSerialNumberTracking, "BinID": BinId };
        }
        return DetailData;
    }

    //////////////////////////////////// // new added for QL///////////////////////////////////END


    $('#btnAddAll').click(function () {
        $("#DivLoading").show();
        $('#btnAddAll').attr("disabled", "disabled");
        if ($('#ItemModeDataTable tbody tr.row_selected').length == 0) {
            var errorMessage = '@ResCommon.ReqOneItem';
            $("#spanGlobalMessage").removeClass('successIcon succesIcon').addClass('errorIcon WarningIcon');
            $("#spanGlobalMessage").html(errorMessage);
            showNotificationDialog();
            $('#btnAddAll').removeAttr("disabled");
            $("#DivLoading").hide();
            return false;
        }
        var btn = this;

        if ('@Model.CallingFromPageName' == 'ORD' || '@Model.CallingFromPageName' == 'RETORD') {
            setTimeout(function () {
                AddItemToOrder(btn, '@Model.CallingFromPageName');
            }, 100);
            return;
        }
        else if ('@Model.CallingFromPageName' == 'MNTNANCE') {
            setTimeout(function () {
                AddItemToToolMaintenance(btn, '@Model.CallingFromPageName');
            }, 100);
            return;
        }
        else if ('@(Model.CallingFromPageName)' == 'RQ') {
            $("#DivLoading").show();
            setTimeout(function () {
                AddItemToRequisitionDetail(btn, '@Model.CallingFromPageName');
            }, 50);
            return;
        }
        else if ('@Model.CallingFromPageName' === 'PS' || '@Model.CallingFromPageName' === 'QL' || '@Model.CallingFromPageName' == 'WO'
                    || '@Model.CallingFromPageName' == 'KIT' || '@Model.CallingFromPageName' == 'TRF' || '@Model.CallingFromPageName' == 'AS') {
            AddItemToDetailTable(btn, '@Model.CallingFromPageName');

            return;
        }
        else if ('@Model.CallingFromPageName' == 'Quote') {
            setTimeout(function () {
                AddItemToQuote(btn, '@Model.CallingFromPageName');
            }, 100);
            return;
        }

        var arrItems = new Array();

        $('#ItemModeDataTable tbody tr').each(function () {
            var txxt = $(this).find('#txtQty');
            var txtQty = txxt.val();
            if (txtQty != 'undefined') {
                if (txtQty.length > 0) {
                    var trimtxtVal = txtQty.replace(/ /g, '');
                    if (trimtxtVal.length > 0) {
                        var itemID = $(this).find('#spnItemID').text();
                        var itemGUID = $(this).find('#spnItemGUID').text();
                        var data = { "ID": itemID, "GUID": itemGUID, "Qty": trimtxtVal };
                        arrItems.push(data);
                        txxt.val('');
                    }
                }
            }
        });

        if (arrItems.length != undefined && arrItems.length > 0) {
            $.ajax({
                url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
                data: { 'para': JSON.stringify(arrItems) },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (json) {
                    $('#ItemModeDataTable').dataTable().fnDraw();

                    CallThisFunctionFromModel(json.Status);
                    $('#btnAddAll').removeAttr("disabled");
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    $("#loading").hide();
                    $('#btnAddAll').removeAttr("disabled");
                }
            });
        }
        else {
            $("#DivLoading").hide();
            $('#btnAddAll').removeAttr("disabled");
        }
    });

    $("#btnModelCancle").click(function () {
        //$('.modalCloseImg').click();
        if ($('#ItemModel') != undefined && $('#ItemModel').length == 1 && $('#ItemModel').parent().css('display') == "block") {
            $("#ItemModel").dialog('close');
        }
        else if ($('#ItemModelPS') != undefined && $('#ItemModelPS').length == 1 && $('#ItemModelPS').parent().css('display') == "block") {
            $("#ItemModelPS").dialog('close');
        }
        else if ($('#ItemModelTemp') != undefined && $('#ItemModelTemp').length == 1 && $('#ItemModelTemp').parent().css('display') == "block") {
            $("#ItemModelTemp").dialog('close');
        }
        else {
            $('.ui-dialog-titlebar-close').click();
        }
        //CallThisFunctionFromModel('success');
    });

    // used for refresh the grid manually...
    $('#refreshGridIM').live('click', function () {
        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

        $('#ItemModeDataTable').dataTable().fnDraw();

    });


    //**************************** Not used Code *************************//

    $("#reordersettingIM").click(function () {
        $("#divRefreshBlockIM").toggle();
    });

    $("#ColumnSortableModalIM").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        height: dHeight,
        title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
        draggable: false,
        resizable: false,
        open: function () {

            GenerateColumnSortableIM();
            $("#ColumnSortableIM").sortable({ axis: "y", containment: "parent" });
            $("#btnSaveOrderIM").focus();
        }
    });

    $("#ColumnOrderSetupIM").click(function () {
        $("#ColumnSortableModalIM").dialog("open");

        return false;
    });

    function GenerateColumnSortableIM() {
        $('#ColumnSortableIM li').each(function (index) {
            $(this).remove();
        });
        var div = document.createElement('div');
        div.id = "CheckAll";

        div.innerHTML = "<input type='hidden' value ='ColumnSortableIM' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >@ResCommon.CheckALL</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >@ResCommon.UnCheckALL</a>" +
            "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />@ResCommon.ShowAllHidden";
        $('div.sortableContainer').find("div#CheckAll").remove();
        $('div.sortableContainer').prepend(div);

        for (i = 0, iLen = $('#ItemModeDataTable').dataTable().fnSettings().aoColumns.length; i < iLen; i++) {
            var oColumn = $('#ItemModeDataTable').dataTable().fnSettings().aoColumns[i];
            var li = document.createElement('li');
            li.id = GetColumnIndex1(oColumn.sTitle.trim());

            li.innerHTML = oColumn.sTitle.trim();
            var LiClassName = 'ui-state-default'
            if (oColumn.sClass.indexOf('NotHide') >= 0) {
                LiClassName = LiClassName + ' HiddenLi';
            }
            li.className = LiClassName;

            //WI - 1663 change
            if (oColumn.sTitle.trim() == "Qty" && '@Model.CallingFromPageName.Contains("MOVEMTR")' == 'True') {

            }
            else {
                if (oColumn.sClass.indexOf('NotHide') >= 0) {
                    li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" disabled="disabled" />' + oColumn.sTitle.trim();
                }
                else {
                    if (oColumn.bVisible) {
                        li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                    }
                    else
                        li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }

                $('#ColumnSortableIM').append(li);
            }
        }
    }

    var GetColumnIndex1 = function (ColumnName) {
        return objColumnsMI[ColumnName];
    };

    function UpdateColumnOrderIM(_ListName) {

        var oTableReorder = null;
        if (oTableItemModel != undefined) {
            oTableReorder = oTableItemModel;
        }

        $.ajax({
            "url": '@Url.Content("~/Master/LoadGridState")',
            "type": "POST",
            "data": { ListName: '@strColumnSetupFor' },
            "async": false,
            "cache": false,
            "dataType": "json",
            "success": function (json) {

                if (json.jsonData != '') {
                    o = JSON.parse(json.jsonData);
                    oTableReorder.fnSettings().oLoadedState = $.extend(true, {}, o);
                    var _Order = $('#ColumnSortableIM').sortable("toArray");
                    var __Order = _Order.toString().split(",");
                    for (var i = 0; i < __Order.length; i++) {
                        __Order[i] = parseInt(__Order[i], 10);
                    }
                    oTableReorder.fnSettings().oLoadedState.ColReorder = __Order;

                    var _abVisCols = [];
                    for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                        //var checked = $("#" + i + "_").is(":checked");
                        var checked = $('#ColumnSortableIM').find('input.checkBox[id="' + i + '_"]').is(":checked");
                        _abVisCols.push(checked);
                    }

                    oTableReorder.fnSettings().oLoadedState.abVisCols = _abVisCols;
                    var pageSize = $('div#ItemModeDataTable_length').find('select[name="ItemModeDataTable_length"]').val()
                    if (!isNaN(pageSize) && parseInt(pageSize) > 0)
                        oTableReorder.fnSettings().oLoadedState.iLength = pageSize;

                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: '@strColumnSetupFor' },
                        "dataType": "json",
                        'cache': false,
                        "async": false,
                        "type": "POST",
                        "success": function (json) {
                            o = json;
                            $("#ColumnSortableModalIM").dialog("close");
                            if (gblActionName.toLowerCase() == "quicklist" || gblActionName.toLowerCase() == "orderlist" || gblActionName.toLowerCase() == "returnorderlist" || gblActionName.toLowerCase() == "transferlist"
                                || gblActionName.toLowerCase() == "maintenance" || gblActionName.toLowerCase() == "quotelist") {
                                $("#ItemModel").dialog("close");
                                OpenItemPopup();

                            }
                            else if (gblActionName.toLowerCase() == "itemmasterlist") {
                                $("#ItemModelPS").dialog("close");
                                AddNewKitComponent();
                            }
                            else if (gblActionName.toLowerCase() == "projectlist" || gblActionName.toLowerCase() == "assettoolschedulerlist") {
                                $("#ItemModelPS").dialog("close");
                                OpenItemPopup();
                            }
                            else if (gblActionName.toLowerCase() == "workorderlist") {
                                $("#ItemModelTemp").dialog("close");
                                OpenItemPopup();
                            }
                            else if (gblActionName.toLowerCase() == "movematerial") {
                                callbacknew();
                            }
                            else if (gblActionName.toLowerCase() == "requisitionlist") {
                                $("#ItemModelTemp").dialog("close");
                                OpenItemPopup();
                            }

                        }
                    });
                }

            }
        });
    }

    function AddNewBarcodeOfItem(btn) {
        var tr = $(btn).parent().parent();
        var itemGUID = $(tr).find('#spnItemGUID').text();
        $.ajax({
            url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
            data: JSON.stringify({ 'ItemGuid': itemGUID, 'BarcodeText': '@Model.PerentGUID' }),
            dataType: 'json',
            contentType: "application/json",
            type: 'POST',
            async: false,
            cache: false,
            success: function (json) {

                $('.ui-dialog-titlebar-close').click();

            },
            error: function (xhr) {
                alert('@ResCommon.ErrorInProcess');
            }
        });

    }

</script>
