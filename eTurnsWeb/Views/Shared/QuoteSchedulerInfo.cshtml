@model eTurns.DTO.QuoteSchedulerDTO
<script type='text/javascript' src="@Url.Content("~/Scripts/jquery-ui-timepicker-addon.js")"></script>
@{


    List<SelectListItem> lstItems = new List<SelectListItem>();

    SelectListItem objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.First;
    objSelectListItem.Value = "1";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Second;
    objSelectListItem.Value = "2";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Third;
    objSelectListItem.Value = "3";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Fourth;
    objSelectListItem.Value = "4";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Fifth;
    objSelectListItem.Value = "5";
    lstItems.Add(objSelectListItem);

    SelectList lstScheduledays = new SelectList(lstItems, "Value", "Text");

    lstItems = new List<SelectListItem>();

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Monday;
    objSelectListItem.Value = "2";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Tuesday;
    objSelectListItem.Value = "3";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Wednesday;
    objSelectListItem.Value = "4";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Thursday;
    objSelectListItem.Value = "5";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Friday;
    objSelectListItem.Value = "6";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Saturday;
    objSelectListItem.Value = "7";
    lstItems.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = ResSchedulerReportList.Sunday;
    objSelectListItem.Value = "1";
    lstItems.Add(objSelectListItem);

    SelectList lstWeekdays = new SelectList(lstItems, "Value", "Text");

    lstItems = new List<SelectListItem>();
    for (int i = 0; i < 60; i++)
    {
        objSelectListItem = new SelectListItem();
        string optionText = string.Empty;
        switch (i)
        {
            case 0:
                optionText = ResSchedulerReportList.Zero;
                break;
            case 1:
                optionText = ResSchedulerReportList.One;
                break;
            case 2:
                optionText = ResSchedulerReportList.Two;
                break;
            case 3:
                optionText = ResSchedulerReportList.Three;
                break;
            case 4:
                optionText = ResSchedulerReportList.Four;
                break;
            case 5:
                optionText = ResSchedulerReportList.Five;
                break;
            case 6:
                optionText = ResSchedulerReportList.Six;
                break;
            case 7:
                optionText = ResSchedulerReportList.Seven;
                break;
            case 8:
                optionText = ResSchedulerReportList.Eight;
                break;
            case 9:
                optionText = ResSchedulerReportList.Nine;
                break;
            case 10:
                optionText = ResSchedulerReportList.Ten;
                break;
            case 11:
                optionText = ResSchedulerReportList.Eleven;
                break;
            case 12:
                optionText = ResSchedulerReportList.Twelve;
                break;
            case 13:
                optionText = ResSchedulerReportList.Thirteen;
                break;
            case 14:
                optionText = ResSchedulerReportList.Fourteen;
                break;
            case 15:
                optionText = ResSchedulerReportList.Fifteen;
                break;
            case 16:
                optionText = ResSchedulerReportList.Sixteen;
                break;
            case 17:
                optionText = ResSchedulerReportList.Seventeen;
                break;
            case 18:
                optionText = ResSchedulerReportList.Eighteen;
                break;
            case 19:
                optionText = ResSchedulerReportList.Nineteen;
                break;
            case 20:
                optionText = ResSchedulerReportList.Twenty;
                break;
            case 21:
                optionText = ResSchedulerReportList.TwentyOne;
                break;
            case 22:
                optionText = ResSchedulerReportList.TwentyTwo;
                break;
            case 23:
                optionText = ResSchedulerReportList.TwentyThree;
                break;
            case 24:
                optionText = ResSchedulerReportList.TwentyFour;
                break;
            case 25:
                optionText = ResSchedulerReportList.TwentyFive;
                break;
            case 26:
                optionText = ResSchedulerReportList.TwentySix;
                break;
            case 27:
                optionText = ResSchedulerReportList.TwentySeven;
                break;
            case 28:
                optionText = ResSchedulerReportList.TwentyEight;
                break;
            case 29:
                optionText = ResSchedulerReportList.TwentyNine;
                break;
            case 30:
                optionText = ResSchedulerReportList.Thirty;
                break;
            case 31:
                optionText = ResSchedulerReportList.ThirtyOne;
                break;
            case 32:
                optionText = ResSchedulerReportList.ThirtyTwo;
                break;
            case 33:
                optionText = ResSchedulerReportList.ThirtyThree;
                break;
            case 34:
                optionText = ResSchedulerReportList.ThirtyFour;
                break;
            case 35:
                optionText = ResSchedulerReportList.ThirtyFive;
                break;
            case 36:
                optionText = ResSchedulerReportList.ThirtySix;
                break;
            case 37:
                optionText = ResSchedulerReportList.ThirtySeven;
                break;
            case 38:
                optionText = ResSchedulerReportList.ThirtyEight;
                break;
            case 39:
                optionText = ResSchedulerReportList.ThirtyNine;
                break;
            case 40:
                optionText = ResSchedulerReportList.Forty;
                break;
            case 41:
                optionText = ResSchedulerReportList.FortyOne;
                break;
            case 42:
                optionText = ResSchedulerReportList.FortyTwo;
                break;
            case 43:
                optionText = ResSchedulerReportList.FortyThree;
                break;
            case 44:
                optionText = ResSchedulerReportList.FortyFour;
                break;
            case 45:
                optionText = ResSchedulerReportList.FortyFive;
                break;
            case 46:
                optionText = ResSchedulerReportList.FortySix;
                break;
            case 47:
                optionText = ResSchedulerReportList.FortySeven;
                break;
            case 48:
                optionText = ResSchedulerReportList.FortyEight;
                break;
            case 49:
                optionText = ResSchedulerReportList.FortyNine;
                break;
            case 50:
                optionText = ResSchedulerReportList.Fifty;
                break;
            case 51:
                optionText = ResSchedulerReportList.FiftyOne;
                break;
            case 52:
                optionText = ResSchedulerReportList.FiftyTwo;
                break;
            case 53:
                optionText = ResSchedulerReportList.FiftyThree;
                break;
            case 54:
                optionText = ResSchedulerReportList.FiftyFour;
                break;
            case 55:
                optionText = ResSchedulerReportList.FiftyFive;
                break;
            case 56:
                optionText = ResSchedulerReportList.FiftySix;
                break;
            case 57:
                optionText = ResSchedulerReportList.FiftySeven;
                break;
            case 58:
                optionText = ResSchedulerReportList.FiftyEight;
                break;
            case 59:
                optionText = ResSchedulerReportList.FiftyNine;
                break;

        }
        objSelectListItem.Text = optionText;
        //objSelectListItem.Text = i.ToString();
        objSelectListItem.Value = i.ToString();
        lstItems.Add(objSelectListItem);
    }
    SelectList lstMinuts = new SelectList(lstItems, "Value", "Text");
    if (Model.Quote_LoadSheduleFor == 4)
    {
        Model.Quote_ScheduleMode = 1;
    }

    var autoSettingMsg = string.Format(ResSchedulerReportList.AutoSettings, Model.Quote_ModuleNameResource);
}
@if (Model.Quote_LoadSheduleFor != 4)
{
    <h4>
        @(Model.Quote_ModuleNameResource + " " + ResSchedulerReportList.ScheduleDetails)
    </h4>
}
<div id="dvQuoteSchedulePara">
    <ul>
        <li>
            <div class="editor-label">
                @if (Model.Quote_LoadSheduleFor != 4)
                {
                    <text>@autoSettingMsg</text>
                }
            </div>
            <div class="editor-field">
                @Html.HiddenFor(model => model.Quote_SupplierId)
                @Html.HiddenFor(model => model.Quote_RoomId)
                @Html.HiddenFor(model => model.Quote_ScheduleID)
                @if (Model.Quote_LoadSheduleFor != 4)
                {
                    if (Model.Quote_LoadSheduleFor != 5 && Model.Quote_LoadSheduleFor != 6)
                    {
                        @Html.RadioButtonFor(model => model.Quote_ScheduleMode, 0, new { @id = "rdoQuoteScheduleModeNone" })
                        @Html.Label(ResSchedulerReportList.None, new { @for = "rdoQuoteScheduleModeNone" })
                    }
                    if (Model.Quote_LoadSheduleFor != 5)
                    {
                        @Html.RadioButtonFor(model => model.Quote_ScheduleMode, 5, new { @id = "rdoQuoteScheduleModeImmediate" })
                        @Html.Label(ResSchedulerReportList.Immediate, new { @for = "rdoQuoteScheduleModeImmediate" })
                    }
                    @Html.RadioButtonFor(model => model.Quote_ScheduleMode, 4, new { @id = "rdoQuoteScheduleModeHourly" })
                    @Html.Label(ResSchedulerReportList.Hourly, new { @for = "rdoQuoteScheduleModeHourly" })
                }

                @*@Html.RadioButtonFor(model => model.Quote_ScheduleMode, 6, new { @id = "rdoQuoteScheduleModeManual" })
                    @Html.Label(ResSchedulerReportList.Manual, new { @for = "rdoQuoteScheduleModeManual" })

                    @Html.RadioButtonFor(model => model.Quote_ScheduleMode, 5, new { @id = "rdoQuoteScheduleModeImmediate" })
                    @Html.Label(ResSchedulerReportList.Immediate, new { @for = "rdoQuoteScheduleModeImmediate" })

                    @Html.RadioButtonFor(model => model.Quote_ScheduleMode, 4, new { @id = "rdoQuoteScheduleModeHourly" })
                    @Html.Label(ResSchedulerReportList.Hourly, new { @for = "rdoQuoteScheduleModeHourly" })*@

                @Html.RadioButtonFor(model => model.Quote_ScheduleMode, 1, new { @id = "rdoQuoteScheduleModeDaily" })
                @Html.Label(ResSchedulerReportList.Daily, new { @for = "rdoQuoteScheduleModeDaily" })
                &nbsp;&nbsp;
                @Html.RadioButtonFor(model => model.Quote_ScheduleMode, 2, new { @id = "rdoQuoteScheduleModeWeekly" })
                @Html.Label(ResSchedulerReportList.Weekly, new { @for = "rdoQuoteScheduleModeWeekly" })
                &nbsp;&nbsp;
                @Html.RadioButtonFor(model => model.Quote_ScheduleMode, 3, new { @id = "rdoQuoteScheduleModeMonthly" })
                @Html.Label(ResSchedulerReportList.Monthly, new { @for = "rdoQuoteScheduleModeMonthly" })
                &nbsp;&nbsp;
            </div>
        </li>
        <li>
            <div class="editor-label">
                &nbsp;
            </div>
            <div class="editor-field">
                <div style="padding-left: 20px; display: block;" class="editor-field" id="QuoteHourlyDIV">
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.Label(ResSchedulerReportList.Every)
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Quote_HourlyRecurringHours, new { @maxlength = "2", @class = "Smalltext-box" })
                                    @Html.Label(ResSchedulerReportList.HoursAtEvery)
                                    @Html.DropDownListFor(model => model.Quote_HourlyAtWhatMinute, lstMinuts, new { @class = "selectBox", @id = "ddlQuoteHourlyAtWhatMinute" })
                                    @ResSchedulerReportList.Minutes
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_HourlyRecurringHours)</span>
                                    ,<span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_HourlyAtWhatMinute)</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div style="padding-left: 20px; display: block;" class="editor-field" id="QuoteDailyDIV">
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Quote_DailyRecurringType, 1, new { @class = "checkbox", @id = "rbtnQuoteDailyRecurringTypeOne" })
                                    @Html.Label(ResSchedulerReportList.Every, new { @for = "rbtnQuoteDailyRecurringTypeOne" })
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Quote_DailyRecurringDays, new { @maxlength = "1", @class = "Smalltext-box" })
                                    @Html.Label(ResSchedulerReportList.Days, new { @for = "Quote_DailyRecurringDays" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_DailyRecurringDays)</span>
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_DailyRecurringType)</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Quote_DailyRecurringType, 2, new { @class = "checkbox", @id = "rbtnQuoteDailyRecurringTypeTwo" })
                                    @Html.Label(ResSchedulerReportList.EveryWeekDays, new { @for = "rbtnQuoteDailyRecurringTypeTwo" })
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div style="padding-left: 20px; display: block;" class="editor-field" id="QuoteWeeklyDIV">
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.Label(ResSchedulerReportList.Recurevery, new { @for = "Quote_WeeklyRecurringWeeks" })
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Quote_WeeklyRecurringWeeks, new { @class = "Smalltext-box", @maxlength = "1" })
                                    @Html.Label(ResSchedulerReportList.WeeksOn)
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_WeeklyRecurringWeeks)</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.CheckBoxFor(model => model.Quote_WeeklyOnMonday, new { @class = "checkbox", @id = "chkQuoteWeeklyOnMonday" })
                                    @Html.Label(ResSchedulerReportList.Monday, new { @for = "chkQuoteWeeklyOnMonday" })
                                    &nbsp;
                                    @Html.CheckBoxFor(model => model.Quote_WeeklyOnTuesday, new { @class = "checkbox", @id = "chkQuoteWeeklyOnTuesday" })
                                    @Html.Label(ResSchedulerReportList.Tuesday, new { @for = "chkQuoteWeeklyOnTuesday" })
                                    &nbsp;
                                    @Html.CheckBoxFor(model => model.Quote_WeeklyOnWednesday, new { @class = "checkbox", @id = "chkQuoteWeeklyOnWednesday" })
                                    @Html.Label(ResSchedulerReportList.Wednesday, new { @for = "chkQuoteWeeklyOnWednesday" })
                                    &nbsp;
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.CheckBoxFor(model => model.Quote_WeeklyOnThursday, new { @class = "checkbox", @id = "chkQuoteWeeklyOnThursday" })
                                    @Html.Label(ResSchedulerReportList.Thursday, new { @for = "chkQuoteWeeklyOnThursday" })
                                    &nbsp;
                                    @Html.CheckBoxFor(model => model.Quote_WeeklyOnFriday, new { @class = "checkbox", @id = "chkQuoteWeeklyOnFriday" })
                                    @Html.Label(ResSchedulerReportList.Friday, new { @for = "chkQuoteWeeklyOnFriday" })
                                    &nbsp;
                                    @Html.CheckBoxFor(model => model.Quote_WeeklyOnSaturday, new { @class = "checkbox", @id = "chkQuoteWeeklyOnSaturday" })
                                    @Html.Label(ResSchedulerReportList.Saturday, new { @for = "chkQuoteWeeklyOnSaturday" })
                                    &nbsp;
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.CheckBoxFor(model => model.Quote_WeeklyOnSunday, new { @class = "checkbox", @id = "chkQuoteWeeklyOnSunday" })
                                    @Html.Label(ResSchedulerReportList.Sunday, new { @for = "chkQuoteWeeklyOnSunday" })
                                    &nbsp;
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div style="padding-left: 20px; display: block;" class="editor-field" id="QuoteMonthlyDIV">
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Quote_MonthlyRecurringType, 1, new { @class = "checkbox", @id = "rbtnQuoteMonthlyRecurringTypeOne" })
                                    @Html.Label(ResSchedulerReportList.Days, new { @for = "rbtnQuoteMonthlyRecurringTypeOne" })
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Quote_MonthlyDateOfMonth, new { @maxlength = "2", @class = "Smalltext-box", @id = "txtQuoteMonthlyDateOfMonth" })
                                    @Html.Label(ResSchedulerReportList.OfEvery, new { @for = "txtQuoteMonthlyDateOfMonth" })
                                    &nbsp;
                                    @Html.TextBoxFor(model => model.Quote_MonthlyRecurringMonths, new { @maxlength = "2", @class = "Smalltext-box", @id = "txtQuoteMonthlyRecurringMonthsOne" })
                                    @Html.Label(ResSchedulerReportList.Months, new { @for = "txtQuoteMonthlyRecurringMonthsOne" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_MonthlyRecurringType)</span>
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_MonthlyDateOfMonth)</span>
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_MonthlyRecurringMonths)</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Quote_MonthlyRecurringType, 2, new { @class = "checkbox", @id = "rbtnQuoteMonthlyRecurringTypeTwo" })
                                    @Html.Label(ResSchedulerReportList.The, new { @for = "rbtnQuoteMonthlyRecurringTypeTwo" })
                                    @Html.DropDownListFor(model => model.Quote_MonthlyDateOfMonth, lstScheduledays, new { @class = "selectBox", @id = "ddlQuoteMonthlyDateOfMonth" })
                                    @Html.DropDownListFor(model => model.Quote_MonthlyDayOfMonth, lstWeekdays, new { @class = "selectBox" })
                                    @Html.Label(ResSchedulerReportList.OfEvery) &nbsp;
                                    @Html.TextBoxFor(model => model.Quote_MonthlyRecurringMonths, new { @maxlength = "2", @class = "Smalltext-box", @id = "txtQuoteMonthlyRecurringMonthsTwo" })
                                    @Html.Label(ResSchedulerReportList.Months, new { @for = "txtQuoteMonthlyRecurringMonthsTwo" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_MonthlyDayOfMonth)</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </li>
        <li>
            <div class="editor-label">
                &nbsp;
            </div>
            <div class="editor-field">
                &nbsp;
            </div>
        </li>
        @if (Model.Quote_LoadSheduleFor != 4)
        {
            if (Model.Quote_LoadSheduleFor != 5 && Model.Quote_LoadSheduleFor != 6)
            {
                <li id="QuotelisubmissionMethod">
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="editor-field">
                        <table>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Quote_SubmissionMethod, 1, new { @class = "checkbox", @id = "rbtnQuoteSubmissionMethodOne" })
                                    @Html.Label(ResSchedulerReportList.AutoGenerate, new { @for = "rbtnQuoteSubmissionMethodOne" })
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.RadioButtonFor(model => model.Quote_SubmissionMethod, 2, new { @class = "checkbox", @id = "rbtnQuoteSubmissionMethodTwo" })
                                    @Html.Label(ResSchedulerReportList.AutoGenerateSubmit, new { @for = "rbtnQuoteSubmissionMethodTwo" })
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Quote_SubmissionMethod)</span>
                                </td>
                            </tr>
                        </table>
                    </div>
                </li>
            }
            <li id="QuotelisubmissionTime">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Quote_ScheduleRunTime)
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Quote_ScheduleRunTime, new { @class = "text-box", maxlength = 128, onkeypress = "javascript:return false;" })
                    @Html.ValidationMessageFor(model => model.Quote_ScheduleRunTime)
                </div>
            </li>
            if (Model.Quote_LoadSheduleFor != 5 && Model.Quote_LoadSheduleFor != 6)
            {
                <li id="QuoteliIsScheduleActive">
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.Quote_IsScheduleActive, new { @class = "check-box" })
                        @Html.LabelFor(model => model.Quote_IsScheduleActive)
                    </div>
                </li>
            }
            <li id="QuoteliNextExecDate">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Quote_NextRunDate)
                </div>
                <div class="editor-field">
                    @Html.DisplayFor(model => model.Quote_NextRunDateTime)
                    @Html.HiddenFor(model => model.Quote_IsScheduleChanged)
                    @Html.HiddenFor(model => Model.Quote_LoadSheduleFor)
                    @Html.HiddenFor(model => Model.Quote_CompanyId)
                </div>
            </li>
            if (Model.Quote_LoadSheduleFor == 5 || Model.Quote_LoadSheduleFor == 6)
            {
                <li id="QuoteliDataSelectionTyp">
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="editor-field">
                        @Html.RadioButtonFor(model => model.Quote_ReportDataSelectionType, 3, new { @class = "checkbox", @id = "rbtnQuoteReportDataSelectionTypeThree" })
                        @Html.Label(ResSchedulerReportList.DataselectFromFirstOfMonth, new { @for = "rbtnQuoteReportDataSelectionTypeThree" })
                    </div>
                </li>
                <li id="QuoteliDataSelectionTyp">
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="editor-field">
                        @Html.RadioButtonFor(model => model.Quote_ReportDataSelectionType, 1, new { @class = "checkbox", @id = "rbtnQuoteReportDataSelectionTypeOne" })
                        @Html.Label(ResSchedulerReportList.DataselectFromLastReport, new { @for = "rbtnQuoteReportDataSelectionTypeOne" })
                    </div>
                </li>
                <li id="QuoteliReportDataSince">
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="editor-field">
                        <div class="editor-field">
                            @Html.RadioButtonFor(model => model.Quote_ReportDataSelectionType, 2, new { @class = "checkbox", @id = "rbtnQuoteReportDataSelectionTypeTwo" })
                            @Html.Label(ResSchedulerReportList.DataselectSince, new { @for = "rbtnQuoteReportDataSelectionTypeTwo" })
                            @Html.TextBoxFor(model => model.Quote_ReportDataSince, new { @maxlength = "3", @class = "Smalltext-box numericinput", @id = "txtQuoteReportDataSince", @onkeypress = "return onlyNumeric(event)" })
                            @Html.Label(ResSchedulerReportList.DatasinceDays, new { })
                        </div>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<script type="text/javascript">

    $(document).ready(function () {
        setTimeout(function () {
            $("div#dvQuoteSchedulePara").on("change", "input,select,textarea", function () {
                $("#Quote_IsScheduleChanged").val("1");
            });

            if ('@Model.Quote_ScheduleID' <= 0) {
                $("#Quote_IsScheduleChanged").val("1");
            }

            $('#Quote_ScheduleRunTime').timepicker(
                {
                    timeFormat: 'HH:mm'
                });

            QuoteSetScheduleMode('@Model.Quote_ScheduleMode', '@Model.Quote_DailyRecurringType', '@Model.Quote_MonthlyRecurringType');

            $("input[type='radio'][name='Quote_ScheduleMode']").change(function () {
                QuoteSetScheduleMode($(this).val(), 0, 0);
            });

            $("input[type='radio'][name='Quote_DailyRecurringType']").change(function () {
                QuoteSetDailyModeControls($(this).val());
            });

            $("input[type='radio'][name='Quote_MonthlyRecurringType']").change(function () {
                QuoteSetMonthlyModeControls($(this).val());
            });

            ShowHideNextRunDate("Quote_IsScheduleActive", "QuoteliNextExecDate");

        }, 300);
        DoNGbootstrapSS();
    });

    function QuoteSetScheduleMode(selectedMode, dailyRecurringType, monthlyRecurringType) {
        var Type = 0;
        if ($('select[name="drpNotificationName"]').val() != null) {

            var Type = parseInt($('select[name="drpNotificationName"]').val().split('_')[1]);
        }
        switch (selectedMode) {
            case "0":
                $("#QuoteDailyDIV").hide();
                $("#QuoteWeeklyDIV").hide();
                $("#QuoteMonthlyDIV").hide();
                $("div#QuoteHourlyDIV").hide();
                $("#QuotelisubmissionMethod,#QuoteisubmissionMethod,#QuotelisubmissionTime,#QuoteliIsScheduleActive,#QuoteliDataSelectionTyp,#QuoteliReportDataSince").hide();

                break;
            case "1":
                $("div#QuoteDailyDIV").show();
                $("div#QuoteWeeklyDIV").hide();
                $("div#QuoteMonthlyDIV").hide();
                $("div#QuoteHourlyDIV").hide();
                $("#QuotelisubmissionMethod,#QuoteisubmissionMethod,#QuotelisubmissionTime,#QuoteliIsScheduleActive,#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                if (Type == 5) {

                    $("#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                }
                QuoteSetDailyModeControls(dailyRecurringType);
                break;
            case "2":
                $("div#QuoteDailyDIV").hide();
                $("div#QuoteWeeklyDIV").show();
                $("div#QuoteMonthlyDIV").hide();
                $("div#QuoteHourlyDIV").hide();
                $("#QuotelisubmissionMethod,#QuoteisubmissionMethod,#QuotelisubmissionTime,#QuoteliIsScheduleActive,#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                if (Type == 5) {

                    $("#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                }
                break;
            case "3":
                $("div#QuoteDailyDIV").hide();
                $("div#QuoteWeeklyDIV").hide();
                $("div#QuoteMonthlyDIV").show();
                $("div#QuoteHourlyDIV").hide();
                $("#QuotelisubmissionMethod,#QuoteisubmissionMethod,#QuotelisubmissionTime,#QuoteliIsScheduleActive,#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                if (Type == 5) {

                    $("#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                }
                QuoteSetMonthlyModeControls(monthlyRecurringType);
                break;
            case "4":
                $("div#QuoteDailyDIV").hide();
                $("div#QuoteWeeklyDIV").hide();
                $("div#QuoteMonthlyDIV").hide();
                $("div#QuoteHourlyDIV").show();
                $("#QuotelisubmissionMethod,#QuoteisubmissionMethod,#QuotelisubmissionTime,#QuoteliIsScheduleActive,#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                if (Type == 5) {

                    $("#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                }
                SetQuoteHourlyModeControls(monthlyRecurringType);
                break;
            case "5":
                $("div#QuoteDailyDIV").hide();
                $("div#QuoteWeeklyDIV").hide();
                $("div#QuoteMonthlyDIV").hide();
                $("div#QuoteHourlyDIV").hide();
                $("#QuotelisubmissionMethod,#QuoteisubmissionMethod,#QuotelisubmissionTime,#QuoteliIsScheduleActive,#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                if (Type == 5) {

                    $("#QuoteliDataSelectionTyp,#QuoteliReportDataSince").show();
                }
                SetQuoteHourlyModeControls(monthlyRecurringType);
                break;
            default:
                $("div#QuoteDailyDIV").hide();
                $("div#QuoteWeeklyDIV").hide();
                $("div#QuoteMonthlyDIV").hide();
                $("div#QuoteHourlyDIV").hide();
                $("#QuotelisubmissionMethod,#QuoteisubmissionMethod,#QuotelisubmissionTime,#QuoteliIsScheduleActive,#QuoteliDataSelectionTyp,#QuoteliReportDataSince").hide();
                break;
        }
    }
    function QuoteSetDailyModeControls(dailyRecurringType) {
        if (dailyRecurringType == "1") {
            $("#Quote_DailyRecurringDays").removeProp("disabled").removeClass("disableBack").focus();
        }
        else if (dailyRecurringType == "2") {
            $("#Quote_DailyRecurringDays").prop("disabled", "disabled").addClass("disableBack").val("");
            //$("#Quote_DailyRecurringDays").removeClass('error-highlighted');
        }
        //        else {
        //            $("#Quote_DailyRecurringDays").prop("disabled", "disabled").addClass("disableBack").val("");
        //        }
    }
    function SetQuoteWeeklyModeControls() {
        $("#Quote_WeeklyRecurringWeeks").removeProp("disabled").removeClass("disableBack").focus();
    }
    function SetQuoteHourlyModeControls() {
        $("#QuotelisubmissionTime").hide();
    }
    function QuoteSetMonthlyModeControls(monthlyRecurringType) {

        //if (monthlyRecurringType == "1") {
        //    $("#txtQuoteMonthlyDateOfMonth").removeProp("disabled").removeClass("disableBack").focus();
        //    $("#txtQuoteMonthlyRecurringMonthsOne").removeProp("disabled").removeClass("disableBack");
        //    $("#ddlQuoteMonthlyDateOfMonth").val("1").prop("disabled", "disabled").addClass("disableBack");
        //    $("#Quote_MonthlyDayOfMonth").val("1").prop("disabled", "disabled").addClass("disableBack");
        //    $("#txtQuoteMonthlyRecurringMonthsTwo").val("").prop("disabled", "disabled").addClass("disableBack");
        //}
        //else if (monthlyRecurringType == "2") {
        //    $("#txtQuoteMonthlyDateOfMonth").val("").prop("disabled", "disabled").addClass("disableBack");
        //    $("#txtQuoteMonthlyRecurringMonthsOne").val("").prop("disabled", "disabled").addClass("disableBack");
        //    $("#ddlQuoteMonthlyDateOfMonth").val("1").removeProp("disabled").removeClass("disableBack").focus();
        //    $("#Quote_MonthlyDayOfMonth").val("1").removeProp("disabled").removeClass("disableBack");
        //    $("#txtQuoteMonthlyRecurringMonthsTwo").removeProp("disabled").removeClass("disableBack");
        //}
        //else {
        //    $("#txtQuoteMonthlyDateOfMonth").val("").prop("disabled", "disabled").addClass("disableBack");
        //    $("#txtQuoteMonthlyRecurringMonthsOne").val("").prop("disabled", "disabled").addClass("disableBack");
        //    $("#ddlQuoteMonthlyDateOfMonth").val("1").prop("disabled", "disabled").addClass("disableBack");
        //    $("#Quote_MonthlyDayOfMonth").val("1").prop("disabled", "disabled").addClass("disableBack");
        //    $("#txtQuoteMonthlyRecurringMonthsTwo").val("").prop("disabled", "disabled").addClass("disableBack");
        //}

         if (monthlyRecurringType == "1") {
     $("#txtQuoteMonthlyDateOfMonth").removeProp("disabled").removeClass("disableBack").focus();
     $("#txtQuoteMonthlyRecurringMonthsOne").removeProp("disabled").removeClass("disableBack");
     $("#ddlQuoteMonthlyDateOfMonth").prop("disabled", "disabled").addClass("disableBack");
     $("#Quote_MonthlyDayOfMonth").prop("disabled", "disabled").addClass("disableBack");
     $("#txtQuoteMonthlyRecurringMonthsTwo").val("").prop("disabled", "disabled").addClass("disableBack");
 }
 else if (monthlyRecurringType == "2") {
     $("#txtQuoteMonthlyDateOfMonth").val("").prop("disabled", "disabled").addClass("disableBack");
     $("#txtQuoteMonthlyRecurringMonthsOne").val("").prop("disabled", "disabled").addClass("disableBack");
     $("#ddlQuoteMonthlyDateOfMonth").removeProp("disabled").removeClass("disableBack").focus();
     $("#Quote_MonthlyDayOfMonth").removeProp("disabled").removeClass("disableBack");
     $("#txtQuoteMonthlyRecurringMonthsTwo").removeProp("disabled").removeClass("disableBack");
 }
 else {
     $("#txtQuoteMonthlyDateOfMonth").val("").prop("disabled", "disabled").addClass("disableBack");
     $("#txtQuoteMonthlyRecurringMonthsOne").val("").prop("disabled", "disabled").addClass("disableBack");
     $("#ddlQuoteMonthlyDateOfMonth").prop("disabled", "disabled").addClass("disableBack");
     $("#txtQuoteMonthlyRecurringMonthsTwo").val("").prop("disabled", "disabled").addClass("disableBack");
 }
    }
    function DoNGbootstrapSS() {
        var scope = angular.element($("#dvSupplierSchedules")).scope();
        if (scope != undefined) {
            var injector = $('[ng-app]').injector();
            var $compile = injector.get('$compile');
            $('#dvSupplierSchedules').html($compile($('#dvSupplierSchedules').html())(scope));
            //$('#liSupplierBlanketPODetails').html($compile($('li#liSupplierBlanketPODetails').html())(scope));
            //$('#liSupplierAccountDetails').html($compile($('li#liSupplierAccountDetails').html())(scope));
        }
    }
</script>
