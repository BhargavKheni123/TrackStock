@model eTurnsWeb.Models.ItemModelPerameter
@{    
    var settings = new GridHeaderSettings() { DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = false, dataViewType = DataViewType.None, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = false, ColumnSetupFor = "ItemMasterModelList" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ItemMaster" };
}
<div class="userListingWrapper">
    <h2>
        @Model.ModelHeader
    </h2>
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99%">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="ItemModel_filter" />
                        <a href="" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_QLItemModel_filter" /></a>
                    </div>
                </div>
            </div>
            @Html.ItemModelGridTopHeader(settings)
            @Html.Partial("NarrowSearchForItemModel", modelCommon)
            <div class="userContent ">
                <table id="ItemModeDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                &nbsp;
                            </th>
                            <th>
                                Qty
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ItemNumber
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RoomName
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.IsDeleted
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.IsArchived
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ManufacturerID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ManufacturerNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.SupplierID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.SupplierPartNo
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.UPC
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.UNSPSC
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Description
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.LongDescription
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.CategoryID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.GLAccountID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.UOMID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.PricePerTerm
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.DefaultPullQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Cost
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Markup
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.SellPrice
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ExtendedCost
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.LeadTimeInDays
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Link1
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Link2
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Trend
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Taxable
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Consignment
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.StagedQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.In_Transitquantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.OnOrderQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.OnTransferQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.SuggestedOrderQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.RequisitionedQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.AverageUsage
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Turns
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.On_HandQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.CriticalQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.MinimumQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.MaximumQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.WeightPerPiece
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ItemUniqueNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.TransferOrPurchase
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.InventoryClassification
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.SerialNumberTracking
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.LotNumberTracking
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.DateCodeTracking
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ItemType
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ImagePath
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.IsLotSerialExpiryCost
                            </th>
                            @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster))
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
                <button id="btnAddNewCompany" value="Ok" style="display: none">
                    Add New</button>
                <button id="btnDeleteCompany" value="Cancel" style="display: none">
                    Delete Selected</button>
                <div id="processing_message" style="display: none" title="Processing">
                    @eTurns.DTO.Resources.ResMessage.RequestProcessMessage</div>
            </div>
            <div class="editorForm">
                <input type="button" value="Add" id="btnAddAll" class="CreateBtn" style="float: left;
                    margin-left: 15px; margin-top: 1px;">
                <input type="button" value="Close" id="btnModelCancle" class="CreateBtn" style="float: left;
                    margin-left: 5px; margin-top: 1px;">
            </div>
        </div>
    </div>
</div>

@*
<script language="javascript" type="text/javascript">
    var oTableItemModel;
    var sImageUrl = "/Content/images/";
    var anOpen = [];
 
   $(document).ready(function(){
      fillItemMaster(false);
   });
    function fillItemMaster(bDestroy) {
        var gaiSelected = [];
        oTableItemModel = $('#ItemModeDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "100%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[3, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";

                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    data: { Data: JSON.stringify(oData), ListName: 'ItemMasterModelList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    data: { ListName: 'ItemMasterModelList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content(Model.AjaxURLToFillItemGrid)',//'@Url.Content("~/Inventory/ItemMasterListAjax")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                //PostCount = PostCount + 1;
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting != null && oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });
                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                    
                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#ItemModeDataTable td').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });

                        if ($("#ItemModel_filter").val() != '') {
                            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
                        }

                         CallThisFunctionFromModel('success');
                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
            },
            "aoColumns": [
                            { "mDataProp": null,
                                "sClass": "read_only control center",
                                "bSortable": false,
                                "sDefaultContent": '<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">'
                                , "fnRender": function (obj, val) {
                                    //return "<img id='imgQty' src=" + sImageUrl + 'drildown_open.jpg' + ">" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span>";
                                    return "<input type='button' value='Add' onclick='return AddSingleItemToQuickList(this)' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span>";
                                }
                            },
                            { "mDataProp": null,
                                "bSortable": false,
                                "sClass": "read_only control center",
                                "sDefaultContent": '<input type="text" id="txtQty" class="clsQuantity" onkeypress="return onlyNumeric(event)"  maxlength="5" style="width:30px;" />'
                            },
		                    { "mDataProp": "ID", "sClass": "read_only"

		                    },
			                {
			                    "mDataProp": "ItemNumber",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false
			                },
			                { "mDataProp": "RoomName", "sClass": "read_only" },
			                { "mDataProp": "Created", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return GetDateInFullFormat(val);
			                    }
			                },
			                { "mDataProp": "Updated", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return GetDateInFullFormat(val);
			                    }
			                },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "IsDeleted", "sClass": "read_only" },
                            { "mDataProp": "IsArchived", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerID", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerNumber", "sClass": "read_only" },
                            { "mDataProp": "SupplierID", "sClass": "read_only" },
                            { "mDataProp": "SupplierPartNo", "sClass": "read_only" },
                            { "mDataProp": "UPC", "sClass": "read_only" },
                            { "mDataProp": "UNSPSC", "sClass": "read_only" },
                            { "mDataProp": "Description", "sClass": "read_only" },
                            { "mDataProp": "LongDescription", "sClass": "read_only" },
                            { "mDataProp": "CategoryID", "sClass": "read_only" },
                            { "mDataProp": "GLAccountID", "sClass": "read_only" },
                            { "mDataProp": "UOMID", "sClass": "read_only" },
                            { "mDataProp": "PricePerTerm", "sClass": "read_only" },
                            { "mDataProp": "DefaultReorderQuantity", "sClass": "read_only" },
                            { "mDataProp": "DefaultPullQuantity", "sClass": "read_only" },
                            { "mDataProp": "Cost", "sClass": "read_only" },
                            { "mDataProp": "Markup", "sClass": "read_only" },
                            { "mDataProp": "SellPrice", "sClass": "read_only" },
                            { "mDataProp": "ExtendedCost", "sClass": "read_only" },
                            { "mDataProp": "LeadTimeInDays", "sClass": "read_only" },
                            { "mDataProp": "Link1", "sClass": "read_only" },
                            { "mDataProp": "Link2", "sClass": "read_only" },
                            { "mDataProp": "Trend", "sClass": "read_only" },
                            { "mDataProp": "Taxable", "sClass": "read_only" },
                            { "mDataProp": "Consignment", "sClass": "read_only" },
                            { "mDataProp": "StagedQuantity", "sClass": "read_only" },
                            { "mDataProp": "In_Transitquantity", "sClass": "read_only" },
                            { "mDataProp": "OnOrderQuantity", "sClass": "read_only" },
                            { "mDataProp": "OnTransferQuantity", "sClass": "read_only" },
                            { "mDataProp": "SuggestedOrderQuantity", "sClass": "read_only" },
                            { "mDataProp": "RequisitionedQuantity", "sClass": "read_only" },
                            { "mDataProp": "AverageUsage", "sClass": "read_only" },
                            { "mDataProp": "Turns", "sClass": "read_only" },
                            { "mDataProp": "On_HandQuantity", "sClass": "read_only" },
                            { "mDataProp": "CriticalQuantity", "sClass": "read_only" },
                            { "mDataProp": "MinimumQuantity", "sClass": "read_only" },
                            { "mDataProp": "MaximumQuantity", "sClass": "read_only" },
                            { "mDataProp": "WeightPerPiece", "sClass": "read_only" },
                            { "mDataProp": "ItemUniqueNumber", "sClass": "read_only" },
                            { "mDataProp": "TransferOrPurchase", "sClass": "read_only" },
                            { "mDataProp": "InventoryClassification", "sClass": "read_only" },
                            { "mDataProp": "SerialNumberTracking", "sClass": "read_only" },
                            { "mDataProp": "LotNumberTracking", "sClass": "read_only" },
                            { "mDataProp": "DateCodeTracking", "sClass": "read_only" },
                            { "mDataProp": "ItemType", "sClass": "read_only" },
                            { "mDataProp": "ImagePath", "sClass": "read_only" },
                            { "mDataProp": "IsLotSerialExpiryCost", "sClass": "read_only" }
            ,@Html.RenderColumnsArray("ItemMaster")
		    ]
        });

        $('.DTTT_container').css('z-index', '-1');
 
    }
    
    function onlyNumeric(event)
    {
            var charCode = (event.which) ? event.which : event.keyCode
            
            if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

         return true;

    }
    function fnFilterGlobalIM() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#ItemModel_filter") != 'undefined' && ($("#ItemModel_filter").val().length > 2 || $("#ItemModel_filter").val().length == 0)) {
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            $('#ItemModeDataTable').dataTable().fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
        }
        else {
            $('#ItemModeDataTable td').removeHighlight();
            $('#ItemModeDataTable td').highlight($("#ItemModel_filter").val());
        }
    }


    $("#ItemModel_filter").keyup(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
        }
        else {
            fnFilterGlobalIM();
        }
    });


    $("#ItemModel_filter").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            var searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
            $('#ItemModeDataTable').dataTable().fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );
            return false;
        }
    });


    $("#clear_QLItemModel_filter").click(funClearFilterIM);

    function funClearFilterIM() {
        //Check length first        
        if ($("#ItemModel_filter").val().length > 0) {
            $("#ItemModel_filter").val('');
            $('#ItemModeDataTable').dataTable().fnFilter(
                            $("#ItemModel_filter").val(),
                            null,
                            null,
                            null
                        );
        }
        $("#ItemModel_filter").focus();
        return false;
    }

    $('#PageNumberIM').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#GobtnIM").click();
            return false;
        }
    });

    $("#GobtnIM").click(function () {
        var pval = $('#PageNumberIM').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        oTableItemModel.fnPageChange(Number(pval - 1));
        $('#PageNumberIM').val('');
    });

    //$('#ItemModeDataTable td.control input[type="button"]').click(function () {
    function AddSingleItemToQuickList(obj){
        var txxt = $(obj).parent().parent().find('#txtQty');
        var txtQty = txxt.val();
        if (txtQty != 'undefined' && txtQty.length > 0) {
            var trimtxtVal = txtQty.replace(/ /g, '');
            if (trimtxtVal.length > 0) {
                var ItemID = $(obj).parent().find('#spnItemID').text();
                var ItemGUID = $(obj).parent().find('#spnItemGUID').text();

                $.ajax({
                    url: '@Url.Content(Model.AjaxURLAddItemToSession)',
                    data: { 'pItemID': ItemID, 'pItemGUID': ItemGUID, 'pQuentity': trimtxtVal},
                    dataType: 'json',
                    type: 'POST',
                    async: false,
                    cache: false,
                    success: function (json) {
                     
                        txxt.val('');
                        oTableItemModel.fnDraw();
                        CallThisFunctionFromModel(json.Status);
                    }
                });
            }
        }
    }

    $('#btnAddAll').click(function () {
        var arrItems = new Array();
        $('#ItemModeDataTable tbody tr').each(function () {
            var txxt = $(this).find('#txtQty');
            var txtQty = txxt.val();
            if (txtQty != 'undefined') {
                if (txtQty.length > 0) {
                    var trimtxtVal = txtQty.replace(/ /g, '');
                    if (trimtxtVal.length > 0) {
                        var itemID = $(this).find('#spnItemID').text();
                        var itemGUID = $(this).find('#spnItemGUID').text();
                        var data = { "ID": itemID, "GUID": itemGUID, "Qty": trimtxtVal };
                        arrItems.push(data);
                        txxt.val('');
                    }
                }
            }
        });

        $.ajax({
            url: '@Url.Content(Model.AjaxURLAddMultipleItemToSession)',
            data: { 'para': JSON.stringify(arrItems)},
            dataType: 'json',
            type: 'POST',
            async: false,
            cache: false,
            success: function (json) {
            oTableItemModel.fnDraw();
                CallThisFunctionFromModel(json.Status);
            }
        });

    });

    $("#btnModelCancle").click(function(){
         $('.modalCloseImg').click();
           CallThisFunctionFromModel('success');
    });
     
    // used for refresh the grid manually...
    $('#refreshGridIM').live('click', function () {
        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

            oTableItemModel.fnDraw();
        //fillItemMaster(false);

    });
  

  //**************************** Not used Code *************************//

  $("#reordersettingIM").click(function () {
        $("#divRefreshBlockIM").toggle();
    });

  $("#ColumnSortableModalIM").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
        draggable: false,
        resizable: false,
        open: function () {

            GenerateColumnSortableIM();
            $("#ColumnSortableIM").sortable({ axis: "y", containment: "parent" });
        }
    });

    $("#ColumnOrderSetupIM").click(function () {
        $("#ColumnSortableModalIM").dialog("open");

        return false;
    });
    function GenerateColumnSortableIM() {
        $('#ColumnSortableIM li').each(function (index) {
            $(this).remove();
        });

        for (i = 0, iLen = oTableItemModel.fnSettings().aoColumns.length; i < iLen; i++) {
            var oColumn = oTableItemModel.fnSettings().aoColumns[i];
            var li = document.createElement('li');
            li.id = GetColumnIndex1(oColumn.sTitle.trim());
            li.className = 'ui-state-default';
            li.innerHTML = oColumn.sTitle.trim();
            if (oColumn.bVisible) {
                li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            }
            else
                li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            $('#ColumnSortableIM').append(li);
        }
    }



  function UpdateColumnOrderIM(_ListName) {

        if ($("#divRefreshBlockIM").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlockIM").toggle();

        var _Order = $('#ColumnSortableIM').sortable("toArray");
        var __Order = _Order.toString().split(",");
        for (var i = 0; i < __Order.length; i++) {
            __Order[i] = parseInt(__Order[i], 10);
        }

        oTableItemModel.fnSettings().oLoadedState.ColReorder = __Order;

        var _abVisCols = [];
        for (i = 0, iLen = oTableItemModel.fnSettings().aoColumns.length; i < iLen; i++) {
            var checked = $("#" + i + "_").is(":checked");
            _abVisCols.push(checked);
        }
        oTableItemModel.fnSettings().oLoadedState.abVisCols = _abVisCols;

        $.ajax({
            "url": '@Url.Content("~/Master/SaveGridState")',
            data: { Data: JSON.stringify(oTableItemModel.fnSettings().oLoadedState), ListName: _ListName },
            "dataType": "json",
            cache: false,
            "async": false,
            "success": function (json) {
                o = json;
                oTableItemModel.fnDraw();
                $('.ui-dialog-titlebar-close').click();
            }
        });
        //fillItemMaster(false);
    }
   
</script>*@


<script type="text/javascript">
    $(function (event) {        
                        
    function OpenLocationDetailPopUP()
        {
            $("#btnNewLocations").click();
            return false;
        }

        var ColumnObject = new Array();   
                              ColumnObject.push({mDataProp : "", sClass: "read_only control center",bSortable:"false",
							  sDefaultContent:'<img id="imgQty" src="' + sImageUrl + 'drildown_open.jpg' + '">',
							  fnRender: function (obj, val) {                                
                                   return "<input type='button' value='Add' onclick='return AddSingleItemToQuickList(this)' id='btnAdd' class='CreateBtn' style='float: none;padding: 2px 6px;margin-left: 5px;' />" + "<span id='spnItemID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span>";
                                }},
								ColumnObject.push({mDataProp : "",sClass: "read_only control center",bSortable:"false",
								sDefaultContent:'<input type="text" id="txtQty" class="clsQuantity" onkeypress="return onlyNumeric(event)"  maxlength="5" style="width:30px;" />'
								},     
                             ColumnObject.push({mDataProp : "ID", sClass: "read_only"},
							 ColumnObject.push({mDataProp : "ItemNumber", sClass: "read_only"},			               
			                 ColumnObject.push({mDataProp : "RoomName", sClass: "read_only" },
			                 ColumnObject.push({mDataProp : "Created", sClass: "read_only",
			                    fnRender: function (obj, val) {
			                        return GetDateInFullFormat(val);
			                    }
			                },
			                 ColumnObject.push({mDataProp : "Updated", sClass: "read_only",
			                    fnRender: function (obj, val) {
			                        return GetDateInFullFormat(val);
			                    }
			                },
                             ColumnObject.push({mDataProp : "UpdatedByName", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "CreatedByName", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "IsDeleted", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "IsArchived", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "ManufacturerID", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "ManufacturerNumber", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "SupplierID", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "SupplierPartNo", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "UPC", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "UNSPSC", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "Description", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "LongDescription", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "CategoryID", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "GLAccountID", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "UOMID", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "PricePerTerm", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "DefaultReorderQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "DefaultPullQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "Cost", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "Markup", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "SellPrice", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "ExtendedCost", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "LeadTimeInDays", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "Link1", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "Link2", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "Trend", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "Taxable", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "Consignment", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "StagedQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "In_Transitquantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "OnOrderQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "OnTransferQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "SuggestedOrderQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "RequisitionedQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "AverageUsage", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "Turns", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "On_HandQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "CriticalQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "MinimumQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "MaximumQuantity", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "WeightPerPiece", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "ItemUniqueNumber", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "TransferOrPurchase", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "InventoryClassification", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "SerialNumberTracking", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "LotNumberTracking", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "DateCodeTracking", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "ItemType", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "ImagePath", sClass: "read_only" },
                             ColumnObject.push({mDataProp : "IsLotSerialExpiryCost", sClass: "read_only" }

        // parameter details for the " PrepareItemLocationDataTable " function call ...
        // 1) TableName prefix (it must match with your table object of current Page)
        // 2) Unique ID(i.e. Primary Key) 
        // 3) Ajax Data Source Link (i.e. which binds the records)
        // 4) Page name which required to get User wise saved data for Datatable 
        // 5) ColumnObject which required to pass dynemic column Array Object.
        PrepareItemLocationDataTable("ItemLocationTable",ItemUniqueID,'@Url.Content("~/Inventory/ItemLocationsListAjax")','ItemLocationList',ColumnObject);
        
        $("#LocationDetails").dialog({
            autoOpen: false,
            show: "blind",
            hide: "explode",
            height: 500,
            title: "Item Locations",
            width: 700,
            modal: true,
            close: function() {
                $("#" + "ItemLocationTable" + ItemUniqueID).DataTable().fnDraw();
            }
        });

        $("#btnNewLocations").click(function () {                        
            $('#LocationDetails').load("@Url.Action("LocationDetails", new { ItemID_ItemType = ViewBag.ItemID_ItemType })", function() {
                $('#LocationDetails').dialog('open');
            });
            return false;
        });
        
        $("#aEditLocation").click(function(){            
            $("#btnNewLocations").click();
            return false;
        });
    });
    function DeleteItemLocatino()
    {
        DeleteDynemicTableData($("#" + "ItemLocationTable" + ItemUniqueID).DataTable(),'@Url.Content("~/Inventory/ItemLocationsDelete")');
    }
    
</script>
