@model eTurns.DTO.RequisitionMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    string CurrencySymbol = "";
    if (eTurnsWeb.Helper.SessionHelper.CurrencySymbol != null
        && !string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencySymbol))
    {
        CurrencySymbol = eTurnsWeb.Helper.SessionHelper.CurrencySymbol;
    }
}
<div class="userHead">
    @using (Ajax.BeginForm("SaveRequisition", "Consume", new AjaxOptions { HttpMethod = "Post", OnBegin = "onBegin", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmRequisitionMaster" }))
    {
        @Html.AntiForgeryToken()
         @Html.ValidationSummary(true)        
        if (Model.ID != 0)
        {        
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.ReceivedOnWebDate)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    : <span>@(Model.ReceivedOnDate)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        }
       
        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContentInHistory" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px; background: none">
                <div id="CollapsedContent" class="edtForm">
                    <ul>
                        <li style="border-right: none; padding: 0px">
                            <label for="label" style="width: 90px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequisitionNumber)<em style="color: Red">*</em>
                            </label>
                            @Html.EditorFor(model => model.RequisitionNumber)
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequisitionNumber)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.BillingAccount)
                            @Html.HiddenFor(model => model.WorkorderGUID)
                            @Html.HiddenFor(model => model.NumberofItemsrequisitioned)
                            @Html.HiddenFor(model => model.TotalCost)
                            @Html.HiddenFor(model => model.IsRecordEditable)
                            @Html.HiddenFor(model => model.IsOnlyStatusUpdate)
                            @Html.HiddenFor(model => model.ReceivedOn)
                            @Html.HiddenFor(model => model.ReceivedOnWeb)
                            @Html.HiddenFor(model => model.AddedFrom)
                            @Html.HiddenFor(model => model.EditedFrom)
                        </li>
                        <li>
                            @Html.LabelFor(model => model.ReleaseNumber, new { @style = "width: 100px; float: left; padding: 1.3% 0;" })
                            @Html.TextBoxFor(model => model.ReleaseNumber, new { id = "txtReleaseNumber", @class = "text-box", @style = "background:white", maxlength = 255, @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.ReleaseNumber)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 80px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.WorkorderName)
                            </label>
                            @Html.TextBoxFor(model => model.WorkorderName, new { @class = "text-box" })
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkorderName)</span>
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 80px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequiredDate)<em style="color: Red">*</em>
                            </label>
                            @Html.TextBoxFor(model => model.RequiredDate, "mm/dd/yyyy", new { @class = "text-box", id = "txtRequiredDate", @readonly = "readonly", @style = "background:white", maxlength = 128, @Value = Model.RequiredDate == null ? "" : Model.RequiredDate.Value.ToString("MM/dd/yyyy") })
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequiredDate)</span>
                        </li>
                        
                        <li style="border-right: none;padding-top:10px;padding-left: 0px;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequisitionStatus)
                            </label>
                            @Html.DropDownListFor(model => model.RequisitionStatus, new SelectList(ViewBag.RequisitionStatusBag, "Text", "Text", Model.RequisitionStatus), new { @class = "selectBox" })
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequisitionStatus)</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div id="ExpandedContentInHistory" style="display: none">
            <ul>
                <li style="border: none">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @*@Html.LabelFor(model => model.CustomerID)*@
                                    @Html.LabelFor(model => model.CustomerGUID)
                                </div>
                                <div class="editor-field">
                                    @Html.HiddenFor(model => model.RequisitionType)
                                    @Html.HiddenFor(model => model.NumberofItemsrequisitioned)
                                    @Html.DropDownListFor(model => model.CustomerGUID, new SelectList((IEnumerable<eTurns.DTO.CustomerMasterDTO>)ViewBag.Customer, "GUID", "Customer", Model.CustomerGUID), string.Empty, new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ProjectSpendGUID)
                                </div>
                                <div class="editor-field">
                                    @if (ViewBag.ProjectSpent != null && ((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent).Where(t => t.TrackAllUsageAgainstThis == true).Count() == 1)
                                    {
                                        if (ViewBag.IsClosedFalse != null)
                                        {
                                        @Html.DropDownListFor(model => model.ProjectSpendGUID, new SelectList((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent, "GUID", "ProjectSpendName", Model.ProjectSpendGUID), string.Empty, new { @class = "selectBox" })
                                        }
                                        else
                                        {
                                        @Html.DropDownListFor(model => model.ProjectSpendGUID, new SelectList((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent, "GUID", "ProjectSpendName", Model.ProjectSpendGUID), new { @class = "selectBox" })
                                        }
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.ProjectSpendGUID, new SelectList((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent, "GUID", "ProjectSpendName", Model.ProjectSpendGUID), string.Empty, new { @class = "selectBox" })
                                    }
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.RequisitionType)
                                </div>
                                <div class="editor-field">
                                    @*@Html.DropDownListFor(model => model.RequisitionType, new SelectList(ViewBag.RequisitionTypeBag, "Text", "Text", Model.RequisitionType), new { @class = "selectBox" })*@
                                    @(Model.RequisitionType)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Description)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.Description, new { @class = "text-box" })
                                    @Html.ValidationMessageFor(model => model.Description)
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="editorForm padRightNone">
                        <ul>
                            
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.BillingAccountID)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.BillingAccountID, new SelectList(ViewBag.SupplierAccountBag, "ID", "Text", Model.BillingAccountID), "", new { @class = "selectBox", @onchange = "SetNames();" })
                                    @Html.ValidationMessageFor(model => model.BillingAccountID)
                                </div>
                            </li>
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResRequisitionMaster())
                        </ul>
                    </div>
                </li>
            </ul>
        </div>
        
       <div class="editorForm" style="width: 98%">
            <ul>
                <li>
                    <div class="editor-label" style="width: 2%">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@ResCommon.Close" id="btnCancelInHistory" class="CreateBtn" />
                    </div>
                </li>
            </ul>
        </div>         
        
                                    if (Model.NumberofItemsrequisitioned.GetValueOrDefault(0) > 0)
                                    {
        <div class="infoBlock" style="margin-bottom: 10px; margin-top: 10px;">
            <ul>
                <li style="width: auto;">
                    <label for="RoomName">
                        <label>@eTurns.DTO.ResRequisitionMaster.NumberofItemsrequisitioned</label>
                    </label>
                    : <span>@(Model.NumberofItemsrequisitioned)</span> </li>
                <li style="border: none; width: auto;">
                    <label for="RoomName">
                        <label>@eTurns.DTO.ResRequisitionMaster.TotalCost</label>
                    </label>
                    : <span id="spnTotalCost">@CurrencySymbol @(Model.TotalCost)</span> </li>
            </ul>
        </div>
                                    }

    }
</div>
<div id="WOLineItemsHistory">
</div>
<div id="ItemModelTemp">
</div>
<script type="text/javascript">
    var HistoryID = '@Model.HistoryID';
    $('#ancHideShowContentInHistory').click(function () {
        if ($('#ExpandedContentInHistory').css('display') == 'none') {
            $('#ExpandedContentInHistory').css('display', '');
            $('#ancHideShowContentInHistory img').attr('src', '/Content/images/drildown_close.jpg');
        }
        else {
            $('#ExpandedContentInHistory').css('display', 'none');
            $('#ancHideShowContentInHistory img').attr('src', '/Content/images/drildown_open.jpg');
        }
    });

    $(document).ready(function () {
        disableControls('frmRequisitionMaster'); 
        $('#ExpandedContentInHistory').css('display', 'none');
        $('#ancHideShowContentInHistory').css('display', '');
        CallThisFunctionFromModel('success');
    });

    function CallThisFunctionFromModel(msg) {
        if (msg == 'success') {
            $('#DivLoading').show();
            $('#WOLineItemsHistory').empty();
            var url = '@Url.Action("LoadRequisitionLineItemsHistory")'; // + '?orderID=' + OrderID;
            $.get(url, { 'historyID': HistoryID }, function (data) {
                $('#WOLineItemsHistory').html(data);
                $('#DivLoading').hide();
            });
        }
        else if (json.Status == 'fail') {
            alert(json.Message);
            return false;
        }
    }

    disableControls('frmRequisitionMaster'); 
    $('#btnCancelInHistory').removeAttr('disabled');
    $('#btnCancelInHistory').unbind('click');
    $('#btnCancelInHistory').click(function (e) {
        // $(".ui-dialog-titlebar-close").click();
        $('#divRequisitionLineItemHistory').dialog('close');
    });
    
</script>
