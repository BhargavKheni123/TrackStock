@model eTurns.DTO.RequisitionMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
@{
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Requisitions, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Requisitions, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool IsApprove = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.RequisitionApproval, eTurnsWeb.Helper.SessionHelper.PermissionType.Approval);
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    string priceformate1 = "N";
    //if (eTurnsWeb.Helper.SessionHelper.CompanyConfig != null)
    //{
    //    priceformate1 = "N" + eTurnsWeb.Helper.SessionHelper.CompanyConfig.CostDecimalPoints.GetValueOrDefault(0).ToString();
    //}
    if (eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits != null)
    {
        priceformate1 = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits;
    }

    string CurrencySymbol = "";
    if (eTurnsWeb.Helper.SessionHelper.CurrencySymbol != null
        && !string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencySymbol))
    {
        CurrencySymbol = eTurnsWeb.Helper.SessionHelper.CurrencySymbol;
    }
    bool IsRequistionReportDisplay = new eTurnsMaster.DAL.UserMasterDAL().GetRequistionReportDisplayPermission(eTurnsWeb.Helper.SessionHelper.UserID);
    bool IsReportView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.View);
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);
    bool HasInsertMSRight = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Materialstaging, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool HasInsertWorkorderRight = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.WorkOrders, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool HasInsertProjectSpendRight = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool AllowCheckinCheckOut = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowCheckInCheckout);

    string PULLUDF1 = string.Empty;
    string PULLUDF2 = string.Empty;
    string PULLUDF3 = string.Empty;
    string PULLUDF4 = string.Empty;
    string PULLUDF5 = string.Empty;

    string TOOLUDF1 = string.Empty;
    string TOOLUDF2 = string.Empty;
    string TOOLUDF3 = string.Empty;
    string TOOLUDF4 = string.Empty;
    string TOOLUDF5 = string.Empty;

    string RequisitionAllowedFileExtension = eTurns.DTO.SiteSettingHelper.RequisitionAllowedFileExtension;
    string UNCPathRootRequisitionFileLink = eTurns.DTO.SiteSettingHelper.RequisitionFilePaths;
    Int64 EnterpriseId = eTurnsWeb.Helper.SessionHelper.EnterPriceID;
    Int64 CompanyID = eTurnsWeb.Helper.SessionHelper.CompanyID;
    Int64 RoomID = eTurnsWeb.Helper.SessionHelper.RoomID;
    UNCPathRootRequisitionFileLink = UNCPathRootRequisitionFileLink.Replace("~", string.Empty);
    string RequisitionFilePath = (UNCPathRootRequisitionFileLink + EnterpriseId + "/" + CompanyID + "/" + RoomID);

    string UDFTableResourceFileName = eTurnsWeb.Models.UDFDictionaryTables.GetUDFResourceFromKey("PullMaster");
    string val = eTurnsWeb.Helper.ResourceUtils.GetResource(UDFTableResourceFileName, "UDF1", true);
    if (!string.IsNullOrWhiteSpace(val))
    {
        PULLUDF1 = val;
    }
    else
    {
        PULLUDF1 = "UDF1";
    }
    val = string.Empty;
    val = eTurnsWeb.Helper.ResourceUtils.GetResource(UDFTableResourceFileName, "UDF2", true);
    if (!string.IsNullOrWhiteSpace(val))
    {
        PULLUDF2 = val;
    }
    else
    {
        PULLUDF2 = "UDF2";
    }
    val = string.Empty;
    val = eTurnsWeb.Helper.ResourceUtils.GetResource(UDFTableResourceFileName, "UDF3", true);
    if (!string.IsNullOrWhiteSpace(val))
    {
        PULLUDF3 = val;
    }
    else
    {
        PULLUDF3 = "UDF3";
    }
    val = string.Empty;
    val = eTurnsWeb.Helper.ResourceUtils.GetResource(UDFTableResourceFileName, "UDF4", true);
    if (!string.IsNullOrWhiteSpace(val))
    {
        PULLUDF4 = val;
    }
    else
    {
        PULLUDF4 = "UDF4";
    }
    val = string.Empty;
    val = eTurnsWeb.Helper.ResourceUtils.GetResource(UDFTableResourceFileName, "UDF5", true);
    if (!string.IsNullOrWhiteSpace(val))
    {
        PULLUDF5 = val;
    }
    else
    {
        PULLUDF5 = "UDF5";
    }

    string ToolUDFTableResourceFileName = eTurnsWeb.Models.UDFDictionaryTables.GetUDFResourceFromKey("ToolCheckInOutHistory");
    string Tval = eTurnsWeb.Helper.ResourceUtils.GetResource(ToolUDFTableResourceFileName, "UDF1", true);
    if (!string.IsNullOrWhiteSpace(Tval))
    {
        TOOLUDF1 = Tval;
    }
    else
    {
        TOOLUDF1 = "UDF1";
    }
    Tval = string.Empty;
    Tval = eTurnsWeb.Helper.ResourceUtils.GetResource(ToolUDFTableResourceFileName, "UDF2", true);
    if (!string.IsNullOrWhiteSpace(Tval))
    {
        TOOLUDF2 = Tval;
    }
    else
    {
        TOOLUDF2 = "UDF2";
    }
    Tval = string.Empty;
    Tval = eTurnsWeb.Helper.ResourceUtils.GetResource(ToolUDFTableResourceFileName, "UDF3", true);
    if (!string.IsNullOrWhiteSpace(Tval))
    {
        TOOLUDF3 = Tval;
    }
    else
    {
        TOOLUDF3 = "UDF3";
    }
    Tval = string.Empty;
    Tval = eTurnsWeb.Helper.ResourceUtils.GetResource(ToolUDFTableResourceFileName, "UDF4", true);
    if (!string.IsNullOrWhiteSpace(Tval))
    {
        TOOLUDF4 = Tval;
    }
    else
    {
        TOOLUDF4 = "UDF4";
    }
    Tval = string.Empty;
    Tval = eTurnsWeb.Helper.ResourceUtils.GetResource(ToolUDFTableResourceFileName, "UDF5", true);
    if (!string.IsNullOrWhiteSpace(Tval))
    {
        TOOLUDF5 = Tval;
    }
    else
    {
        TOOLUDF5 = "UDF5";
    }



    //---------------------------------Calculate Total---------------------------------
    //
    //string qtyFormat = "N";
    //if (!string.IsNullOrEmpty(eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits))
    //{
    //    qtyFormat = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits;
    //}

    int? PriseSelectionOption = 0;
    //double? TotalCost = 0;
    eTurns.DAL.RoomDAL onjRoomDAL = new eTurns.DAL.RoomDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    RoomModuleSettingsDTO objRoomModuleSettingsDTO = onjRoomDAL.GetRoomModuleSettings(eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.RoomID, (long)eTurnsWeb.Helper.SessionHelper.ModuleList.Requisitions);
    if (objRoomModuleSettingsDTO != null)
    {
        PriseSelectionOption = objRoomModuleSettingsDTO.PriseSelectionOption;
    }

    if (PriseSelectionOption != 1 && PriseSelectionOption != 2)
    {
        PriseSelectionOption = 1;
    }

    //eTurns.DAL.RequisitionDetailsDAL objRequisitionDetailsDAL = new eTurns.DAL.RequisitionDetailsDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    //TotalCost = objRequisitionDetailsDAL.GetRequisitionTotalCost(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, Model.GUID, (int)PriseSelectionOption);
}
<script src="@Url.Content("~/Scripts/ImagePreview.js")" type="text/javascript"></script>
<script language="javascript" type="text/javascript">
    var ValidateSerialLotNumberUrl = '@Url.Action("ValidateSerialLotNumber", "Pull")';
    var formData = new FormData();
    var DeleteRequistionFileId = '';
    var ResFileName = '@ResToolMaster.FileName';
    var ResDelete = '@ResToolMaster.Delete';
</script>
<style>
    .WOtext-box {
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        behavior: url(/pie1.htc);
        background: #fff;
        border: 1px solid #dddddd;
        width: 62%;
        padding: 5px;
    }

    .WOddl {
        max-height: 300px;
        max-width: 200px;
        overflow: auto;
    }
</style>
@using (Ajax.BeginForm("SaveRequisition", "Consume", new AjaxOptions { HttpMethod = "Post", OnBegin = "onBegin", OnSuccess = "onSuccess", OnFailure = "onFailure" }, new { @id = "frmRequisitionMaster" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedDate)
                        </label>
                        : <span>@(Model.ReceivedOnWebDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedDate)
                        </label>
                        : <span>@(Model.ReceivedOnDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                    @if (IsReportView && (Model.IsDeleted ?? false) == false && (Model.IsArchived ?? false) == false)
                    {
                        <li style="border: none; text-align: right;">
                            <a id="aRptSingle" href="javascript:void(0);">
                                <img src="../../Content/images/print.png" title="Print Requisition" />
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContent" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px; background: none">
                <div id="CollapsedContent" class="edtForm">
                    <ul>
                        <li style="border-right: none; padding: 0px">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequisitionNumber)<em style="color: Red">*</em>
                            </label>
                            @Html.TextBoxFor(model => model.RequisitionNumber, new { @class = "text-box", id = "txtReqName", autocomplete = "off", @style = "background:white", @maxlength = "50" })
                            @*@Html.EditorFor(model => model.RequisitionNumber)*@
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequisitionNumber)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.BillingAccount)
                            @*@Html.HiddenFor(model => model.Technician)*@
                            @*@Html.HiddenFor(model => model.ProjectSpendGUID)*@
                            @Html.HiddenFor(model => model.NumberofItemsrequisitioned)
                            @Html.HiddenFor(model => model.TotalCost)
                            @Html.HiddenFor(model => model.IsRecordEditable)
                            @Html.HiddenFor(model => model.IsOnlyStatusUpdate)
                            @Html.HiddenFor(model => model.PageSubmissionMethod)
                            @Html.HiddenFor(model => model.ReceivedOn)
                            @Html.HiddenFor(model => model.ReceivedOnWeb)
                            @Html.HiddenFor(model => model.AddedFrom)
                            @Html.HiddenFor(model => model.EditedFrom)
                            @Html.HiddenFor(model => model.AttachingWOWithRequisition)
                            @Html.HiddenFor(model => model.StagingID)
                            @Html.HiddenFor(model => model.MaterialStagingGUID)
                            @Html.HiddenFor(model => model.IsStagingEditable)
                        </li>
                        <li style="width:330px;border-right:none;">
                            <div class="editor-label">
                                <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                    @Html.LabelFor(model => model.WorkorderName)
                                </label>
                            </div>
                            <div class="editor-field">
                                @if (@Model.ID > 0 && !string.IsNullOrEmpty(Model.WorkorderName))
                                {
                                    @Html.TextBoxFor(model => model.WorkorderName, new { @class = "text-box", @readonly = "readonly" })
                                    @Html.HiddenFor(model => model.WorkorderGUID)
                                }
                                else
                                {
                                    if (Model.AttachingWOWithRequisition.GetValueOrDefault(1) == (int)AttachingWOWithRequisition.New)
                                    {
                                        @Html.TextBoxFor(model => model.WorkorderName, new { @class = "text-box", @style = "background:white", maxlength = "128" })
                                    }
                                    else if (Model.AttachingWOWithRequisition.GetValueOrDefault(1) == (int)AttachingWOWithRequisition.Existing)
                                    {
                                        @Html.DropDownListFor(model => model.WorkorderName, new SelectList((IEnumerable<eTurns.DTO.WorkOrderDTO>)ViewBag.WorkOrderBAG, "WOName", "WOName", Model.WorkorderGUID), string.Empty, new { @class = "selectBox" })
                                    }
                                    else if (Model.AttachingWOWithRequisition.GetValueOrDefault(1) == (int)AttachingWOWithRequisition.Mixed)
                                    {
                                        if (HasOnTheFlyEntryRight && HasInsertWorkorderRight)
                                        {
                                            <span style='position: relative'>
                                                @Html.TextBoxFor(model => model.WorkorderName, new { id = "txtWorkorderName", @class = "AutoCompleteddl text-box WOtext-box WOddl" })
                                                @Html.HiddenFor(model => model.WorkorderGUID)
                                                <a id='lnkShowAllOptions' href='javascript:void(0);' style='position: absolute; right: 5px;
                                                    top: 0px;' class="ShowAllOptions">
                                                    <img src='/Content/images/arrow_down_black.png' alt='select' />
                                                </a>
                                            </span>
                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(model => model.WorkorderGUID, new SelectList((IEnumerable<eTurns.DTO.WorkOrderDTO>)ViewBag.WorkOrderBAG, "GUID", "WOName", Model.WorkorderGUID), string.Empty, new { @class = "selectBox WOddl" })
                                        }
                                    }
                                }
                                @*<br />*@
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkorderName)</span>
                            </div>
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequiredDate)<em style="color: Red">*</em>
                            </label>
                            @Html.TextBoxFor(model => model.RequiredDateStr, eTurnsWeb.Helper.SessionHelper.RoomDateFormat, new { @class = "text-box", id = "txtRequiredDate1", @readonly = "readonly", @style = "background:white", maxlength = 128, @Value = Model.RequiredDateStr.ToString() })
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequiredDateStr)</span>
                        </li>
                        <li style="border-right: none;" class="editor-label">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequisitionStatus)
                            </label>
                            @Html.DropDownListFor(model => model.RequisitionStatus, new SelectList(ViewBag.RequisitionStatusBag, "Text", "Text", Model.RequisitionStatus), new { @class = "selectBox" })
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RequisitionStatus)</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div id="ExpandedContent" style="display: none">
            <ul>
                <li style="border: none">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @*@Html.LabelFor(model => model.CustomerID)*@
                                    @Html.LabelFor(model => model.CustomerGUID)
                                </div>
                                <div class="editor-field">
                                    @Html.HiddenFor(model => model.RequisitionType)
                                    @Html.HiddenFor(model => model.NumberofItemsrequisitioned)
                                    @Html.DropDownListFor(model => model.CustomerGUID, new SelectList((IEnumerable<eTurns.DTO.CustomerMasterDTO>)ViewBag.Customer, "GUID", "Customer", Model.CustomerGUID), string.Empty, new { @class = "selectBox" })
                                    @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster,
eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && Model.IsRecordEditable == true)
                                    {
                                        <label>
                                            <a onclick="AddNewFromPopup('Customer');" id="btnAddNewCustomer" class="addNewLink">
                                                @eTurns.DTO.Resources.ResCommon.AddNew
                                            </a>
                                        </label>
                                    }
                                    <span class="ErrorMessage">   @Html.ValidationMessageFor(model => model.CustomerGUID)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ReleaseNumber)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.ReleaseNumber, new { id = "txtReleaseNumber", @class = "text-box", @style = "background:white", maxlength = 255, @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.ReleaseNumber)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ProjectSpendGUID)
                                </div>
                                <div class="editor-field">
                                    @if (HasOnTheFlyEntryRight)
                                    {
                                        if (ViewBag.ProjectSpent != null && ((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent).Where(t => t.TrackAllUsageAgainstThis == true).Count() == 1)
                                        {
                                            if (ViewBag.IsClosedFalse != null)
                                            {
                                                @Html.DropDownListFor(model => model.ProjectSpendGUID, new SelectList((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent, "GUID", "ProjectSpendName", Model.ProjectSpendGUID), string.Empty, new { @id = "txtProjectSpendHeader", @class = "selectBox" })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(model => model.ProjectSpendGUID, new SelectList((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent, "GUID", "ProjectSpendName", Model.ProjectSpendGUID), new { @id = "txtProjectSpendHeader", @class = "selectBox" })
                                            }
                                        }
                                        else
                                        {
                                            <span style='position: relative'>
                                                @Html.TextBoxFor(model => model.ProjectSpendName, new { id = "txtProjectSpendHeader", @class = "AutoCompleteddl text-box" })
                                                <a id='lnkShowAllOptions' href='javascript:void(0);' style='position: absolute; right: 5px;
                                                        top: 0px;' class="ShowAllOptions">
                                                    <img src='/Content/images/arrow_down_black.png' alt='select' />
                                                </a>
                                            </span>
                                        }
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.ProjectSpendGUID, new SelectList((IEnumerable<eTurns.DTO.ProjectMasterDTO>)ViewBag.ProjectSpent, "GUID", "ProjectSpendName", Model.ProjectSpendGUID), string.Empty, new { @id = "txtProjectSpendHeader", @class = "selectBox" })
                                    }
                                    <span class="ErrorMessage">  @Html.ValidationMessageFor(model => model.ProjectSpendGUID)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.RequisitionType)
                                </div>
                                <div class="editor-field">
                                    @*@Html.DropDownListFor(model => model.RequisitionType, new SelectList(ViewBag.RequisitionTypeBag, "Text", "Text", Model.RequisitionType), new { @class = "selectBox" })*@
                                    @(Model.RequisitionType)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Description)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.Description, new { @class = "text-box" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Description)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.StagingID)
                                </div>
                                <div class="editor-field">
                                    @if (HasOnTheFlyEntryRight && HasInsertMSRight)
                                    {
                                        if (Model.ID > 0)
                                        {
                                            if (Model.IsStagingEditable.HasValue && Model.IsStagingEditable.Value == false)
                                            {
                                                @Html.TextBoxFor(model => model.StagingName, new { id = "txtStagingName", @class = "text-box", @readonly = "readonly" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.StagingName, new { id = "txtStagingName", @class = "AutoCompleteddl text-box" })
                                            }
                                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.StagingName)</span>
                                        }
                                        else
                                        {

                                            <span style='position: relative'>
                                                @Html.TextBoxFor(model => model.StagingName, new { id = "txtStagingName", @class = "AutoCompleteddl text-box" })

                                                <a id='lnkShowAllOptions' href='javascript:void(0);' style='position: absolute; right: 5px;
                                                top: 0px;' class="ShowAllOptions">
                                                    <img src='/Content/images/arrow_down_black.png' alt='select' />
                                                </a>
                                            </span>
                                            <span class="ErrorMessage">
                                                @Html.ValidationMessageFor(model => model.StagingName)
                                            </span>
                                        }
                                    }
                                    else
                                    {
                                        if (Model.ID > 0)
                                        {
                                            <span style='position: relative'>
                                                @if (Model.IsStagingEditable.HasValue && Model.IsStagingEditable.Value == true)
                                                {
                                                    @Html.DropDownListFor(x => x.StagingName, new SelectList(ViewBag.StagingList, "StagingName", "StagingName", Model.StagingName), new { @class = "selectBox", @name = "slctStagingName", @id = "slctStagingName" })
                                                }
                                                else
                                                {
                                                    @Html.DropDownListFor(x => x.StagingName, new SelectList(ViewBag.StagingList, "StagingName", "StagingName", Model.StagingName), new { @class = "selectBox", @name = "slctStagingName", @id = "slctStagingName", @disabled = "@disabled" })
                                                }

                                                <input type="hidden" name="txtStagingName" id="txtStagingName" value="@Model.StagingName" />
                                                @Html.HiddenFor(x => x.StagingName, new { @id = "StagingName", @name = "StagingName" })
                                                <span class="ErrorMessage">
                                                    @Html.ValidationMessageFor(model => model.StagingName)
                                                </span>
                                            </span>
                                        }
                                        else
                                        {
                                            <span style='position: relative'>
                                                @Html.DropDownListFor(x => x.StagingName, new SelectList(ViewBag.StagingList, "StagingName", "StagingName", Model.StagingName), new { @class = "selectBox", @id = "slctStagingName" })
                                                <input type="hidden" name="txtStagingName" id="txtStagingName" value="@Model.StagingName" />
                                                <span class="ErrorMessage">
                                                    @Html.ValidationMessageFor(model => model.StagingName)
                                                </span>
                                            </span>
                                        }
                                    }
                                </div>
                            </li>
                            <li>
                                <div class="file-input-wrap editor-label">
                                    @ResRequisitionMaster.RequisitionFiles
                                </div>
                                <div class="editor-field">
                                    <input type="hidden" id="hdReqAllowedFileExtension" value="@RequisitionAllowedFileExtension" />
                                    <input type="file" name="file" id="file" style="display:none;" multiple>
                                    <div class='round-button'>
                                        <label class="round-button-circle" for="file">@ResCommon.ChooseFile</label><label id="lblnofilechoosen" style="padding-left:5px">@ResCommon.Nofilechosen</label>
                                    </div>
                                    <table class="FileUploadList" style="width:43%;margin-left: 30%;margin-top: 12px;">
                                        <thead>
                                            <tr>
                                                <th style="width:98%;">
                                                    @ResToolMaster.FileName
                                                </th>

                                                <th style="width:2%;">
                                                    @ResToolMaster.Delete
                                                </th>
                                            </tr>
                                        </thead>

                                    </table>
                                </div>

                            </li>
                        </ul>
                    </div>
                    <div class="editorForm padRightNone">
                        <ul>
                            <li style="border-right: none;">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.SupplierId)
                                </div>
                                <div class="editor-field">
                                    @if (Model.RequisitionStatus != "Unsubmitted")
                                    {
                                        @Html.DropDownListFor(model => model.SupplierId, new SelectList(ViewBag.SupplierList, "ID", "SupplierName", Model.SupplierId), new { @id = "ddlSupplier", @class = "selectBox", @style = "width:120px", @disabled = "disabled", autofocus = "autofocus" })
                                        @Html.HiddenFor(model => model.SupplierId)
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.SupplierId, new SelectList(ViewBag.SupplierList, "ID", "SupplierName", Model.SupplierId), new { @id = "ddlSupplier", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })

                                    }
                                    <span class="ErrorMessage">
                                        @Html.ValidationMessageFor(model => model.SupplierId)
                                    </span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.SupplierAccountGuid)
                                </div>
                                <div class="editor-field">
                                    @*@Html.DropDownListFor(model => model.SupplierAccountGuid, new SelectList(ViewBag.SupplierAccount, "GUID", "AccountNumnerMerge", Model.SupplierAccountGuid), new { @id = "ddlSupplierAccount", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })*@
                                    @if (Model.RequisitionStatus != "Unsubmitted" && (Model.SupplierAccountGuid == null || Model.SupplierAccountGuid == Guid.Empty))
                                    {
                                        @Html.DropDownListFor(model => model.SupplierAccountGuid, new SelectList(new List<eTurns.DTO.SupplierAccountDetailsDTO>(), "GUID", "AccountNumnerMerge", Model.SupplierAccountGuid), new { @id = "ddlSupplierAccount", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.SupplierAccountGuid, new SelectList(ViewBag.SupplierAccount, "GUID", "AccountNumnerMerge", Model.SupplierAccountGuid), new { @id = "ddlSupplierAccount", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })
                                    }
                                    @Html.HiddenFor(model => model.SupplierAccountGuid)
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SupplierAccountGuid)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.BillingAccountID)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.BillingAccountID, new SelectList(ViewBag.SupplierAccountBag, "ID", "Text", Model.BillingAccountID), "", new { @class = "selectBox", @onchange = "SetNames();" })
                                    <span class="ErrorMessage"> @Html.ValidationMessageFor(model => model.BillingAccountID)</span>
                                </div>
                            </li>
                            @*<li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.TechnicianID)
                                    </div>
                                    <div class="editor-field">
                                        @Html.DropDownListFor(model => model.TechnicianID, new SelectList((IEnumerable<eTurns.DTO.TechnicianMasterDTO>)ViewBag.TechnicianBAG, "ID", "Technician", Model.TechnicianID), string.Empty, new { @class = "selectBox" })
                                        @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster,
                                            eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && Model.IsRecordEditable == true)
                                        {
                                            <label>
                                                <a onclick="AddNewFromPopup('Technician');" id="btnAddNewTechnician" class="addNewLink">
                                                    @eTurns.DTO.Resources.ResCommon.AddNew
                                                </a>
                                            </label>
                                        }
                                        <span class="ErrorMessage"> @Html.ValidationMessageFor(model => model.TechnicianID)</span>
                                    </div>
                                </li>*@
                            <li class="formaxlngt">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.TechnicianID)
                                </div>
                                <div class="editor-field">
                                    @if (HasOnTheFlyEntryRight)
                                    {
                                        <span style="position:relative">
                                            @Html.TextBoxFor(model => model.Technician, new { id = "Technician", @class = "CRAutoTechnician text-box" })
                                            @*<input type="hidden" name="TechnicianID" id="TechnicianID" value="@Model.TechnicianID" />*@
                                            @Html.HiddenFor(model => model.TechnicianID, new { @id = "TechnicianID" })
                                            @*<input type="text" id="txtUseThisTechnician" class="text-boxinner CRAutoTechnician" style="width:120px;" value="@eTurns.DTO.Resources.ResCommon.SelectTechnicianText" autocomplete="off" role="textbox" aria-autocomplete="list" aria-haspopup="true">
                <input type="hidden" id="UseThisTechnicianGUID" value="">*@
                                            <a id='CRlnkShowAllOptions' href='javascript:void(0);' style='position: absolute; right: 5px;
                                                top: 0px;' class="CRShowAllOptions">
                                                <img src='/Content/images/arrow_down_black.png' alt='select' />
                                            </a>
                                        </span>
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.TechnicianID, new SelectList((IEnumerable<eTurns.DTO.TechnicianMasterDTO>)ViewBag.TechnicianBAG, "ID", "Technician", Model.TechnicianID), string.Empty, new { @class = "selectBox" })
                                    }
                                    @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster,
                                       eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && Model.IsRecordEditable == true)
                                    {
                                        <label>
                                            <a onclick="AddNewFromPopup('Technician');" id="btnAddNewTechnician" class="addNewLink">
                                                @eTurns.DTO.Resources.ResCommon.AddNew
                                            </a>
                                        </label>
                                    }
                                    <span class="ErrorMessage">
                                        @Html.ValidationMessageFor(model => model.TechnicianID)
                                    </span>
                                </div>
                            </li>
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResRequisitionMaster())
                        </ul>
                    </div>
                </li>
            </ul>
        </div>
        <div class="editorForm" style="width: 98%">
            <ul>
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        @if (ViewBag.FromMaintenance == null)
                        {
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        }
                        @if (Model.IsRecordEditable || Model.IsOnlyStatusUpdate)
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                            if (Model.IsOnlyStatusUpdate)
                            {
                                <script type="text/javascript">
                                    disableControls('frmRequisitionMaster');
                                    $('#RequisitionStatus').removeAttr('disabled');
                                    $('#btnSave').removeAttr('disabled');
                                </script>
                            }
                        }
                        else if (Model.RequisitionStatus.ToLower() == "closed" && ViewBag.CanBeUnclosed)
                        {
                            <input type="button" value="@eTurns.DTO.ResRequisitionMaster.UncloseReq" id="btnUncloseReq" class="CreateBtn" />
                            <script type="text/javascript">
                                disableControls('frmRequisitionMaster');
                                $("input[type='button'][id='btnUncloseReq']").removeAttr('disabled');
                            </script>

                        }
                        else
                        {
                            <script type="text/javascript">
                                disableControls('frmRequisitionMaster');
                            </script>
                        }
                    </div>
                </li>
                <li>
                    <div class="BtnBlockform">
                        @if (Model.ID > 0)
                        {
                            if (Model.IsRecordEditable && Model.RequisitionStatus == "Unsubmitted")
                            {
                                <input type="button" value="@ResCommon.NewItem" id="btnAddNewItemps" class="CreateBtn ays-ignore"
                                       style="float: left; margin-left: 20px;" disabled="disabled" />
                                if (AllowCheckinCheckOut == true)
                                {
                                    <input type="button" value="@ResToolMaster.NewTool" id="btnAddNewTools" class="CreateBtn ays-ignore" style="float: left; margin-left: 30px;" disabled="disabled" />
                                    <input type="button" value="@ResCommon.NewToolCategory" id="btnAddNewToolsCategory" class="CreateBtn ays-ignore" style="float: left; margin-left: 30px;" disabled="disabled" />
                                }
                            }

                            if (Model.RequisitionStatus == "Submitted")
                            {
                                if (Model.IsRecordEditable)
                                {
                                    <input type="button" onclick="ResetApprovedQTY();" value="Reset Approved Quantity"
                                           id="btnRAQ" class="CreateBtn" />
                                    <script type="text/javascript">
                                        $('#btnRAQ').removeAttr('disabled');
                                    </script>
                                }
                            }
                        }
                    </div>
                </li>
            </ul>
        </div>
        @if (Model.NumberofItemsrequisitioned.GetValueOrDefault(0) > 0)
        {
            <div class="infoBlock" style="margin-bottom: 10px; margin-top: 10px;">
                <ul>
                    <li style="width: auto;">
                        <label for="RoomName">
                            <label>@eTurns.DTO.ResRequisitionMaster.NumberofItemsrequisitioned</label>
                        </label>
                        : <span>@(Model.NumberofItemsrequisitioned)</span>
                    </li>
                    @*<li style="border: none; width: auto; display:none">
                            <label for="RoomName">
                                <label>@eTurns.DTO.ResRequisitionMaster.TotalCost</label>
                            </label>
                            : <span id="spnTotalCost">$ @(Model.TotalCost.GetValueOrDefault(0).ToString(priceformate1))</span>
                        </li>*@
                    @if (isCost)
                    {
                        <li style="border: none; width: auto;">
                            <label for="RoomName">
                                @if (PriseSelectionOption == 1)
                                {
                                    <label>@ResOrder.TotalSellPrice :</label>
                                }
                                else
                                {
                                    <label>@ResOrder.TotalCost :</label>
                                }
                            </label>
                            @if (PriseSelectionOption == 1)
                            {
                                <span id="spnTotalCost">@CurrencySymbol @(Model.TotalSellPrice.ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture))</span>
                            }
                            else
                            {
                                <span id="spnTotalCost">@CurrencySymbol @(Model.TotalCost.GetValueOrDefault(0).ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture))</span>
                            }
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
    <div id="RequisitionLineItems">
    </div>
}
<div id="ItemModelTemp">
</div>
<div id="divToolModel">
</div>
<div id="divToolCategoryModel">
</div>
<div class="dialog" id="basic-modal-content-Requisition" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.RequisitionApproveWithZero
        </p>
        <a href="javascript:void(0);" id="btnModelYesRequisition" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="#" class="no" onclick="closeModalRequisition()">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div class="dialog" id="divModelReqToApprove" style="display: none;">
    <div class="inner">
        @*<div id="dvConfirmChoice">
                <p class="text">
                    @eTurns.DTO.Resources.ResMessage.RequisitionToApproveQtyMsg
                </p>


            </div>*@
        <div id="dvChoice" style="padding:5px;">
            <p class="text">
                @eTurns.DTO.Resources.ResMessage.RequisitionToApproveQtyMsg
            </p>
            @Html.RadioButtonFor(model => model.rdoApprovelChoice, 1, new { @id = "rdoCorrectQty" }):
            <label for="rdoCorrectQty">
                @eTurns.DTO.ResRequisitionMaster.msgGoBackAndCorrectAprQty
            </label>
            <br />
            @Html.RadioButtonFor(model => model.rdoApprovelChoice, 2, new { @id = "rdofilledQty" }):
            <label for="rdofilledQty">@eTurns.DTO.ResRequisitionMaster.msgGoAheadWithZeroAprQty</label><br />
            @Html.RadioButtonFor(model => model.rdoApprovelChoice, 3, new { @id = "rdoReqasApprovedQty" }):
            <label for="rdoReqasApprovedQty">@eTurns.DTO.ResRequisitionMaster.msgGoAheadWithReqasAprQty</label><br />
            <br />
            <a href="javascript:void(0);" id="btnModelYesReqToApprove" class="yes">
                <img src="~/Content/images/yes.png" alt="Yes" />
                @eTurns.DTO.Resources.ResMessage.ConfirmYes
            </a><a href="#" class="no" onclick="closeModalRequisition()">
                <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
            </a>
        </div>
    </div>
</div>
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    var EditRequisitionID = 0;
    var EditRequisitionGuid = '00000000-0000-0000-0000-000000000000';
    var DTName = 'RequisitionItemsTable' + '@Model.ID';
    var MsgInvalidFileSelected = '@ResWorkOrder.MsgInvalidFileSelected';
    var MsgvalidFileList = '@ResWorkOrder.MsgvalidFileList';

    var isReportDisplay = false;
    $("form").submit(function (e) {
        $(':input', '#frmRequisitionMaster')
            .removeAttr('disabled');

        $.validator.unobtrusive.parse("#frmRequisitionMaster");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
        $('#ReqNarroSearchClear').click();
    });

    $("#ItemModelTemp").dialog({
        autoOpen: false,
        modal: true,
        draggable: true,
        resizable: true,
        width: '82%',
        height: 710,
        title: '@(eTurns.DTO.ResRequisitionMaster.ModelHeader)',
        open: function () {
            $('#DivLoading').show();
        },
        close: function () {
            $(this).empty();
            $("#ItemModelTemp").empty();
            $('#btnAddNewItemps, #btnAddNewTools, #btnAddNewToolsCategory').removeAttr('disabled');
            ReDirectData();
        }
    });


    $(document).ready(function () {
        window.location.hash = '';

        $('.ShowAllOptions').click(function () {
            $(this).siblings('.AutoCompleteddl').trigger("focus");
            $(this).siblings(".AutoCompleteddl").autocomplete("search", " ");
        });

        $('div#divToolModel').dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '95%',
            height: 710,
            title: '@ResRequisitionMaster.AddToolsRequisitionHeader',
            open: function () {
            },
            close: function () {
                $(this).empty();
                $("div#divToolModel").empty();
                $('#btnAddNewItemps, #btnAddNewTools, #btnAddNewToolsCategory').removeAttr('disabled');
                ReDirectData();
            }
        });

        $('div#divToolCategoryModel').dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            //width: '50%',
            height: 450,
            title: '@ResRequisitionMaster.AddToolsCategoryHeader',
            open: function () {
            },
            close: function () {
                $(this).empty();
                $("div#divToolCategoryModel").empty();
                $('#btnAddNewItemps, #btnAddNewTools, #btnAddNewToolsCategory').removeAttr('disabled');
                ReDirectData();
            }
        });

        if ('@IsRequistionReportDisplay' == 'True' && '@IsReportView' == 'True') {
            isReportDisplay = true;
        }
        $('form#frmRequisitionMaster').attr('action', $('form#frmRequisitionMaster').attr('action').split("?")[0]);

        $('form').areYouSure({ 'message': 'You have unsaved changes.  Do you want to leave this page and lose your changes?' });
        if (parseInt('@Model.ID', 10) <= 0) {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent').css('display', 'none');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent').css('display', '');
        }

        $("#btnSave").off('click');
        $("#btnSave").on('click', function () {
             if (typeof $("#InnerItem_filter") != "undefined"
                && $("#InnerItem_filter").length > 0
                && $("#InnerItem_filter").is(":focus")) {
                return false;
            }
            if ($('#ExpandedContent').css('display') == 'none') {
                $('#ExpandedContent').css('display', '');
                $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
            }

            $("#PageSubmissionMethod").val("1");
            if ($('#RequisitionStatus').val() == "Closed")
                return true;

            if ('@Model.RequisitionStatus' == "Approved") {
                if (!CheckUDFRequired()) {
                    $('#DivLoading').hide();
                    return false;
                }
                if (!SaveRequisitionLineItems(true)) {
                    $('#DivLoading').hide();
                    return false;
                }
                $('#DivLoading').hide();
                return true;
            }

            if ($('#RequisitionStatus').val() == "Submitted" || $('#RequisitionStatus').val() == "Approved") {
                if (!CheckUDFRequired()) {
                    return false;
                }
            }


            $('#DivLoading').show();
            if ($('#RequisitionStatus').val() === 'Submitted' && '@IsApprove' == "True") {
                $('#RequisitionStatus').val('Approved');
            }

            if ($('#RequisitionStatus').val() != "Unsubmitted") {
                if ($('#' + DTName + ' tbody tr').length == 1 && $('#' + DTName + ' tbody tr')[0].cells.length == 1) {
                    $("#spanGlobalMessage").html("@ResRequisitionMaster.ReqLineItems");
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    showNotificationDialog();
                    $('#DivLoading').hide();
                    return false;
                }
            }
            if ($('#RequisitionStatus').val() == "Approved") {
                var ApprovedQTY = 0;
                var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
                var isApprZero = false;
                for (var i = 0; i < ItemNodes.length; i++) {
                    var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val() == '' ? 0 : $(ItemNodes[i]).find('#txtQuantityApproved').val();
                    if (isNaN(parseFloat(txtQuantityApproved)) || parseFloat(txtQuantityApproved) <= 0) {
                        isApprZero = true;
                        break;
                    }
                    else
                        ApprovedQTY = parseInt(txtQuantityApproved, 10) + ApprovedQTY;
                }

                if (isApprZero || ApprovedQTY == 0) {
                    $('#DivLoading').hide();
                    $('#divModelReqToApprove').modal();
                    return false;
                }

            }

            if ('@Model.ID' != 0) {
                //if (!SaveAllClick(false)) {
                if (!SaveRequisitionLineItems(true)) {
                    $('#DivLoading').hide();
                    return false;
                }
                $('#DivLoading').hide();
                return true;
            }
            $('#DivLoading').hide();
        });


        $("#RequisitionLineItems").on("change", "input,select", function () {
            $(this).closest("tr").addClass("RowChanged");
        });

        $("#btnModelYesRequisition").click(function () {
            $.ajax({
                url: '@Url.Content("~/Consume/ChangeRequisitionStatus")',
                data: { RequisitionID: '@Model.ID', OldStatus: "Approved", NewStatus: "Closed" },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (response) {
                    $.modal.impl.close();
                    clearControls('frmRequisitionMaster');
                    ShowEditTabGUID("RequisitionEdit?RequisitionGUID=" + '@Model.GUID', "frmRequisitionMaster");
                }
            });
        });

        $("#btnModelYesReqToApprove").click(function () {
            $("#PageSubmissionMethod").val("2");
            var rdoApprovelChoice = $("input[name='rdoApprovelChoice']:checked").val();
            if (rdoApprovelChoice == 1) {
                $('#RequisitionStatus').val('Submitted');
                $.modal.impl.close();
            }
            else if (rdoApprovelChoice == 2) {
                $.modal.impl.close();
                $('#DivLoading').show();
                //$('#frmRequisitionMaster').submit();
                SaveRequisitionLineItems(true);
            }
            else {
                var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
                for (var i = 0; i < ItemNodes.length; i++) {
                    var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val();
                    if (isNaN(parseFloat(txtQuantityApproved)) || parseFloat(txtQuantityApproved) <= 0) {
                        $(ItemNodes[i]).find('#txtQuantityApproved').val($(ItemNodes[i]).find('#txtQuantityRequisitioned').val())
                        $(ItemNodes[i]).addClass("RowChanged");
                    }
                }
                $('#RequisitionStatus').val('Approved');
                $("#PageSubmissionMethod").val("1");
                $.modal.impl.close();
                $('#DivLoading').show();
                //$('#frmRequisitionMaster').submit();
                SaveRequisitionLineItems(true);
            }

        });

        var IsFirstTime = true;

        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });



        $('#txtRequiredDate1').blur(function () { }).datepicker({
            changeMonth: true,
            changeYear: true, dateFormat: RoomDateJSFormat
        });
        $('#txtRequiredDate1').on('change', function () {

            var RequiredDateValid = true;

            try {
                $.datepicker.parseDate(RoomDateJSFormat, $('#txtRequiredDate1').val());
                RequiredDateValid = true;
            } catch (e) {
                RequiredDateValid = false;
            }
            if (!RequiredDateValid)
                $('#txtRequiredDate1').val('');
        });

        $('#btnClose').click(function () {
            $(".ui-dialog-titlebar-close").click();
        });

        $('#btnCancel').click(function (e) {
            if ('@Model.IsHistory' != 'True') {
                SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
                $(".tab5").hide();
            }
            else {
                $(".ui-dialog-titlebar-close").click();

            }

            if (RequisitionNarrowFilterString == '') {
                $('#ReqNarroSearchClear').click();
            }

        });

        $('#btnUncloseReq').on('click', function () {
            var Reqguid = '@Model.GUID';

            $.ajax({
                url: "/Consume/UncloseRequisition",
                type: 'Post',
                data: { 'ReqGUID': Reqguid },
                success: function (response) {
                    if (response.Status == "ok") {
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        oTable.fnDraw();
                        clearControls('frmRequisitionMaster');
                        SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
                    }
                    else {
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                    }

                },
                error: function (response) {
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    $("#spanGlobalMessage").html(response.Message);
                    $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                }
            });
        });

        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        if ('@Model.ID' > 0) {
            EditRequisitionID = '@Model.ID';
            EditRequisitionGuid = '@Model.GUID';
            if ('@Model.IsHistory' != 'True') {
                $('#RequisitionLineItems').empty();
                $('#DivLoading').show();
                var action = '@Url.Action("LoadRequisitionItems", new { RequisitionID = @Model.ID })';
                var IsArchived = $('#IsArchivedRecords').is(':checked');
                var IsDeleted = $('#IsDeletedRecords').is(':checked');
                action += '&IsArchived=' + IsArchived + '&IsDeleted=' + IsDeleted;
                $('#RequisitionLineItems').load(action, function () {
                    $('#DivLoading').hide();
                });

                //// need to call below block in case of New Item saved and open POPUP Item ... START
                if (NeedToOpenItemPopupNow) {
                    NeedToOpenItemPopupNow = false;
                    setTimeout("OpenItemPopup()", 2000);
                    return false;
                }
                //// need to call below block in case of New Item saved and open POPUP Item ... END
                $('#btnAddNewItemps, #btnAddNewTools, #btnAddNewToolsCategory').removeAttr('disabled');
                return false;
            }
            else {
                $('#RequisitionLineItems').empty();
                $('#DivLoading').show();
                var action = '@Url.Action("LoadRequisitionItems", new { RequisitionID = @Model.ID })';
                var IsHistory = true;
                action += '&IsHistory=' + IsHistory;
                $('#RequisitionLineItems').load(action, function () {
                    $('#DivLoading').hide();
                });
                $('#btnAddNewItemps, #btnAddNewTools, #btnAddNewToolsCategory').removeAttr('disabled');
            }
        }

        if ('@Model.IsHistory' == 'True') {
            $(':input', '#frmQuickList')
        .not('#btnClose')
        .attr('disabled', 'disabled');
        }

        $('body').on('focus', "input.CRAutoTechnician", function (e) {
            var ajaxURL = '/Tool/GetTechnician';
            $(this).autocomplete({
                source: function (request, response) {
                    $('#DivLoading').show()
                    $.ajax({
                        url: ajaxURL,
                        type: 'POST',
                        data: JSON.stringify({ 'NameStartWith': request.term }),
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data) {
                            $('#DivLoading').hide()
                            response($.map(data, function (Items) {
                                return {
                                    label: Items.Value,
                                    value: Items.Key,
                                    id: Items.ID,
                                    selval: Items.GUID
                                }
                            }));
                        },
                        error: function (err) {
                            $('#DivLoading').hide();
                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {
                     $(this).val(ui.item.value);
        if ($.trim(ui.item.value).length > 0) {
            $("#TechnicianID").val(ui.item.id);
        }
        else {
            $('#TechnicianID').val('');
        }
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                change: function (event, ui) {
        if (ui.item != null && ui.item != undefined && $.trim(ui.item.id).length > 0) {
            $('#TechnicianID').val(ui.item.id);
        }
        else {
            $('#TechnicianID').val('');
        }
                }
            });
        });
        $('.CRShowAllOptions').click(function () {
            $(this).siblings('.CRAutoTechnician').trigger("focus");
            $(this).siblings(".CRAutoTechnician").autocomplete("search", " ");
        });
        $("#CtabNew").on('focus', "input.AutoCompleteddl", function (e) {
            var ctrlID = $(this).attr('id');
            var type = "";
            var ajaxURL = '';

            if (ctrlID == "txtStagingName") {
                type = 'Staging';
                ajaxURL = '/Inventory/GetAllStagingHeaders';
            }
            else if (ctrlID == "txtWorkorderName")
            {
                type = 'Workorder';
                ajaxURL = '/Consume/GetAllWorkOrdersForRequisition';
            }
            else if (ctrlID == "txtProjectSpendHeader") {
                type = 'ProjectSpend';
                ajaxURL = '/ProjectSpend/GetProjectSpend';
            }
            //else if (ctrlID == "txtTechnicianName") {
            //    type = 'Technician';
            //    ajaxURL = '/Tool/GetTechnician';
            //}
            $(this).autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: ajaxURL,
                        contentType: 'application/json',
                        dataType: 'json',
                        data: { NameStartWith: request.term },
                        success: function (data) {
                            if (type == 'Staging') {
                                response($.map(data, function (Items) {
                                    return {
                                        label: Items.StagingName,
                                        value: Items.StagingName,
                                        selval: Items.GUID
                                    }
                                }));
                            }
                            else if (type == 'Workorder') {
                                response($.map(data, function (Items) {
                                    return {
                                        label: Items.WOName,
                                        value: Items.WOName,
                                        selval: Items.GUID
                                    }
                                }));
                                $("ul.ui-widget-content").css('z-index', '1000').css('max-height', '300px').css('overflow-y', 'auto').css('width', '205px').css('overflow-x', 'auto');
                            }
                            else if (type == 'ProjectSpend') {
                                response($.map(data, function (Items) {
                                    return {
                                        label: Items.Value,
                                        value: Items.Key,
                                        selval: Items.GUID
                                    }
                                }));
                            }
                            //else if (type == 'Technician') {
                            //    response($.map(data, function (Items) {
                            //        return {
                            //            label: Items.Value,
                            //            value: Items.Key,
                            //            selval: Items.GUID,
                            //            id: Items.ID
                            //        }
                            //    }));
                            //}
                        },
                        error: function (err) {
                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {
                    //if (type == 'Workorder' && typeof (ui.item.selval) != "undefined" && ui.item.selval != null)
                    //{
                    //    $("#WorkorderGUID").val(ui.item.selval);
                    //}
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                change: function (event, ui) {
                }
            });
        });

        $("#CtabNew").on({
            mouseover: function () {
                getItemInventoryStagingLocation($(this), "");
            },
            focus: function () {
                getItemInventoryStagingLocation($(this), "");
            },
            change: function () {
                if (typeof ($(this).parent().find("input[id='txtBinNumber']")) != "undefined") {
                    $(this).parent().find("input[id='txtBinNumber']").val($(this).val());
                }
                if (typeof ($(this).parent().find("input[id='txtReceiveBin']")) != "undefined") {
                    $(this).parent().find("input[id='txtReceiveBin']").val($(this).val());
                }
            }
        }, "#slctBinNumber");
        $("#CtabNew").on({
            mouseover: function () {
                getItemInventoryStagingLocationWithQty($(this), "");
            },
            focus: function () {
                getItemInventoryStagingLocationWithQty($(this), "");
            },
            change: function () {
                if (typeof ($(this).parent().find("input[id='txtBinNumber']")) != "undefined") {
                    $(this).parent().find("input[id='txtBinNumber']").val($(this).val());
                }
                if (typeof ($(this).parent().find("input[id='txtReceiveBin']")) != "undefined") {
                    $(this).parent().find("input[id='txtReceiveBin']").val($(this).val());
                }
            }
        }, "#slctItemBinNumber");

      //  $('.CRShowAllOptions').click();

    });


    // grab the file input and bind a change event onto it
    $('#file').bind("change", function () {
        // new html5 formdata object.
        //$("ul.FileUploadList").empty();
        $("table.FileUploadList tr td.dataTables_empty").remove();
        var Li = '';
        var ReqAllowedFileExtension = $("#hdReqAllowedFileExtension").val();
        var validExts = ReqAllowedFileExtension.split(',');
        var strValidationMessage = "";

        for (var i = 0, len = document.getElementById('file').files.length, avalbleimg = $("table.FileUploadList tr").length; i < len; i++, avalbleimg++) {
            var IsValidFile = true;
            var fileExt = document.getElementById('file').files[i].name;
            if ($("#lblnofilechoosen").length > 0) {
                $("#lblnofilechoosen").text(fileExt);
            }
            fileExt = fileExt.substring(fileExt.lastIndexOf('.'));
            if (validExts.indexOf(fileExt.toLowerCase()) <= -1) {
                IsValidFile = false;
                strValidationMessage = strValidationMessage + document.getElementById('file').files[i].name + MsgInvalidFileSelected;
            }
            if (IsValidFile == true) {
                var localdate = moment.utc().format('YYYY_MM_DD_HH_mm_ss');
                localdate += localdate + avalbleimg;
                Li += "<tr id=" + localdate + "  uploaded='false'>";
                Li += "<td style='width:98%;text-align:left;'>" + document.getElementById('file').files[i].name + "</td><td style='width:2%'><a href='javascript:;' onclick='DeleteCurrentFile(\"" + localdate + "\");'><img src='/content/images/delete.png' /></a></td>";
                Li += "</tr>";
                formData.append("file" + localdate, document.getElementById('file').files[i]);
            }
        }
        if (strValidationMessage != "") {
            alert(strValidationMessage + MsgvalidFileList.replace("{0}", validExts.toString()));
        }
        $("table.FileUploadList").append(Li);
        //$("table.FileUploadList").fnDestroy();
        $("table.FileUploadList").dataTable();
        //disable sorting
        $("table.FileUploadList thead tr").empty();
        var resfileName = "File Name";
        if (typeof ResFileName != 'undefined') {
            resfileName = ResFileName;
        }
        var resDelete = "Delete";
        if (typeof ResDelete != 'undefined') {
            resDelete = ResDelete;
        }
        $("table.FileUploadList thead tr").append("<td style='width: 260px;padding-right: 195px;'><strong>" + resfileName + "</strong></td><td><strong>" + resDelete + "</strong></td>")
    });


    if ($("table.FileUploadList").length != undefined) {
        if(EditRequisitionGuid != '00000000-0000-0000-0000-000000000000') {
            //call for uploaded File list
            RequisitionFilePath = '@RequisitionFilePath';
            $.ajax({
                url: "GetRequisitionFiles",
                type: 'post',
                data: { 'RequisitionGuid': EditRequisitionGuid },
                dataType: 'json',
                async: false,
                success: function (data) {
                          var Li = '';
                          $.each(data.DDData, function (i, val) {
                              Li += "<tr id='" + val + "' uploaded='true'>";
                               //Li += "<td style='width:98%;text-align:left;'><a class='preview' href='" + RequisitionFilePath + "/" + EditRequisitionID + "/" + i + "' target='_blank'>" + i + "</a></td><td style='width:2%'><a href='javascript:;' onclick='DeleteExistingFile(\"" + val + "\");'><img src='/content/images/delete.png' /></a></td>";
                             

                             Li += "<td style='width:98%;text-align:left;'>" +
                                 "<a class='preview' href='/Consume/Get?path=" + RequisitionFilePath + "/" + EditRequisitionID + "/" + i + "' target='_blank'>" + i + "</a>" +
                                 "</td><td style='width:2%'>" +
                                 "<a href='javascript:;' onclick='DeleteExistingFile(\"" + val + "\");'>" +
                                 "<img src='/content/images/delete.png' /></a></td>";
                              Li += "</tr>";
                          });
                          $("table.FileUploadList").append(Li);
                          imagePreview();
                      },
                error: function (request) {
                    console.log(request.responseText);
                }
            });
        }
        $("table.FileUploadList").dataTable({ "bPaginate": false, "bInfo": false, "oLanguage": { "sEmptyTable": MsgNoDataAvailableInTable } });
        //Disable Sorting
        var resfileName = "File Name";
        if (typeof ResFileName != 'undefined') {
            resfileName = ResFileName;
        }
        var resDelete = "Delete";
        if (typeof ResDelete != 'undefined') {
            resDelete = ResDelete;
        }
        $("table.FileUploadList thead tr").empty();
        $("table.FileUploadList thead tr").append("<td style='width: 260px;padding-right: 195px;'><strong>" + resfileName + "</strong></td><td><strong>" + resDelete + "</strong></td>")
    }

    // To track delete file
    function DeleteExistingFile(FileId) {
        $("table.FileUploadList tr#" + FileId + "").remove();
        if (DeleteRequistionFileId != '') {
            DeleteRequistionFileId += ',' + FileId;
        }
        else {
            DeleteRequistionFileId = FileId;
        }
    }

    function DeleteCurrentFile(currentPos) {
        formData.delete("file" + currentPos);
        $("table.FileUploadList tr#" + currentPos + "").remove();
        $("table.FileUploadList").dataTable();
    }

    function DeleteExistingFromList(FileId, requisitionGuid) {
        $.ajax({
            url: 'DeleteReqExistingFiles',
            type: 'Post',
            data: { 'FileId': FileId, 'requisitionGuid': requisitionGuid },
            dataType: 'json',
            success: function (response) {
            }
        });
    }


    function getItemInventoryStagingLocation(dropdownobj, binNumber) {

        var itmGuid = $(dropdownobj).parents("tr").find('#hdnItemGUID').val();
        var stagingName = $('#txtStagingName').val();
        var includeQty = false;
        var selval = $(dropdownobj).val();
        if (!$(dropdownobj).hasClass("populated")) {
            $(dropdownobj).html("");
            var stroptions = "";
            var stroptions = "<option value=''></option>";

            $.ajax({
                "url": '/Master/GetBinForItemOrStaging',
                "type": "POST",
                "data": { 'ItemGuid': itmGuid, 'StagingHeaderName': stagingName, 'IncludeQty': includeQty, 'NameStartWith': binNumber },
                "async": false,
                "cache": false,
                "dataType": "json",
                "success": function (response) {
                    $(response).each(function (indx, obj) {
                        if (selval == obj.Key) {
                            stroptions = stroptions + "<option selected='selected' value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }
                        else {
                            stroptions = stroptions + "<option value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }

                    });
                    $(dropdownobj).html(stroptions);
                    $(dropdownobj).addClass("populated");
                },
                "error": function (response) {
                }
            });
        }
    }

    function getItemInventoryStagingLocationWithQty(dropdownobj, binNumber) {

        var itmGuid = $(dropdownobj).parents("tr").find('#hdnItemGUID').val();
        var stagingName = $('#txtStagingName').val();
        var includeQty = true;
        var IsLoadMoreLocations = false;
        var selval = $(dropdownobj).val();
        if (!$(dropdownobj).hasClass("populated")) {
            $(dropdownobj).html("");
            var stroptions = "";
            var stroptions = "<option value=''></option>";

            $.ajax({
                "url": '/Master/GetBinForItemOrStaging',
                "type": "POST",
                "data": { 'ItemGuid': itmGuid, 'StagingHeaderName': stagingName, 'IncludeQty': includeQty, 'NameStartWith': binNumber, 'IsLoadMoreLocations': IsLoadMoreLocations },
                "async": false,
                "cache": false,
                "dataType": "json",
                "success": function (response) {
                    $(response).each(function (indx, obj) {
                        if (selval == obj.Key) {
                            stroptions = stroptions + "<option selected='selected' value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }
                        else {
                            stroptions = stroptions + "<option value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }

                    });
                    $(dropdownobj).html(stroptions);
                    $(dropdownobj).addClass("populated");
                },
                "error": function (response) {
                }
            });
        }
    }

    $('.selectBox').change(function () {
        var ID = this.id;
        if (ID == "TechnicianID")
            $("#hdnTechnician").val($("#" + ID + " option:selected").text());//$("#Technician").val($("#" + ID + " option:selected").text());
    });

    $('#btnAddNewItemps').click(function () {
        TempSavePS();
        return OpenItemPopup();
    });
    function OpenItemPopup() {


        if (parseInt('@Model.ID', 10) > 0) {
            $('#btnAddNewItemps, #btnAddNewTools, #btnAddNewToolsCategory').attr('disabled', 'disabled');
            ClearVariables();
            var strUrl = '@Url.Action("LoadItemMasterModel")';
            strUrl = strUrl + '?ParentId=' + '@Model.ID';
            strUrl = strUrl + '&ParentGuid=' + '@Model.GUID.ToString()';
            strUrl = strUrl + '&StagingBinId=' + '@Model.StagingID';
            $('#ItemModelTemp').load(strUrl, new function () {
                $('#ItemModelTemp').dialog('open');
            })
            if ($("input#global_filter").length > 0) {
                $("input#global_filter").focus();
                setTimeout(function () {
                    $("input#global_filter").focus();
                }, 600);
            }
            if ($("input.searchinput").length > 0) {
                $("input.searchinput").focus();
                setTimeout(function () {
                    $("input.searchinput").focus();
                }, 600);

            }
        }
        //return false;
    }

    function SetNames() {
        $("#BillingAccount").val($("#BillingAccountID option:selected").text());
    }


    function CheckUDFRequired() {
        var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
        var vUDF1 = '';
        var vUDF2 = '';
        var vUDF3 = '';
        var vUDF4 = '';
        var vUDF5 = '';
        var vUDF1PullCommon = '';
        var vUDF2PullCommon = '';
        var vUDF3PullCommon = '';
        var vUDF4PullCommon = '';
        var vUDF5PullCommon = '';

        var vUDF1ToolCommon = '';
        var vUDF2ToolCommon = '';
        var vUDF3ToolCommon = '';
        var vUDF4ToolCommon = '';
        var vUDF5ToolCommon = '';

        var vUDF1Required = false;
        var vUDF2Required = false;
        var vUDF3Required = false;
        var vUDF4Required = false;
        var vUDF5Required = false;
        var UDfRequiredmsgALL = '';
        var UDfRequiredmsg = '';
        var itemname = '';
        var toolname = '';
        var isItem = false;
        var isTool = false;
        for (var j = 0; j <= ItemNodes.length - 1; j++) {
            vUDF1 = '';
            vUDF2 = '';
            vUDF3 = '';
            vUDF4 = '';
            vUDF5 = '';
            vUDF1PullCommon = '';
            vUDF2PullCommon = '';
            vUDF3PullCommon = '';
            vUDF4PullCommon = '';
            vUDF5PullCommon = '';
            vUDF1Required = false;
            vUDF2Required = false;
            vUDF3Required = false;
            vUDF4Required = false;
            vUDF5Required = false;
            itemname = $(ItemNodes[j]).find('#spnItemNumber').text();
            toolname = $(ItemNodes[j]).find('#spnToolName').text();
            if (itemname.length > 0) {
                isItem = true;
            }
            else {
                isItem = false;
            }
            if (toolname.length > 0) {
                isTool = true;
            }
            else {
                isTool = false;
            }
            if (isItem == true) {

                if ($("#chkUsePullCommonUDF").is(":checked")) {
                    vUDF1 = GetCommonUDFValue('UDF1PullCommon');
                    vUDF2 = GetCommonUDFValue('UDF2PullCommon');
                    vUDF3 = GetCommonUDFValue('UDF3PullCommon');
                    vUDF4 = GetCommonUDFValue('UDF4PullCommon');
                    vUDF5 = GetCommonUDFValue('UDF5PullCommon');

                    vUDF1Required = $("#UDF1PullCommon").attr("udfrequired");
                    vUDF2Required = $("#UDF2PullCommon").attr("udfrequired");
                    vUDF3Required = $("#UDF3PullCommon").attr("udfrequired");
                    vUDF4Required = $("#UDF4PullCommon").attr("udfrequired");
                    vUDF5Required = $("#UDF5PullCommon").attr("udfrequired");
                }
                else {
                    vUDF1 = GetUDFValueFromTR("UDF1", ItemNodes[j]);
                    vUDF2 = GetUDFValueFromTR("UDF2", ItemNodes[j]);
                    vUDF3 = GetUDFValueFromTR("UDF3", ItemNodes[j]);
                    vUDF4 = GetUDFValueFromTR("UDF4", ItemNodes[j]);
                    vUDF5 = GetUDFValueFromTR("UDF5", ItemNodes[j]);

                    vUDF1Required = $(ItemNodes[j]).find('#UDF1').attr("udfrequired");
                    vUDF2Required = $(ItemNodes[j]).find('#UDF2').attr("udfrequired");
                    vUDF3Required = $(ItemNodes[j]).find('#UDF3').attr("udfrequired");
                    vUDF4Required = $(ItemNodes[j]).find('#UDF4').attr("udfrequired");
                    vUDF5Required = $(ItemNodes[j]).find('#UDF5').attr("udfrequired");
                }

            }
            if (isTool == true) {
                if ($("#chkUseToolCommonUDF").is(":checked")) {
                    vUDF1 = GetCommonUDFValue('UDF1ToolCommon');
                    vUDF2 = GetCommonUDFValue('UDF2ToolCommon');
                    vUDF3 = GetCommonUDFValue('UDF3ToolCommon');
                    vUDF4 = GetCommonUDFValue('UDF4ToolCommon');
                    vUDF5 = GetCommonUDFValue('UDF5ToolCommon');

                    vUDF1Required = $("#UDF1ToolCommon").attr("udfrequired");
                    vUDF2Required = $("#UDF2ToolCommon").attr("udfrequired");
                    vUDF3Required = $("#UDF3ToolCommon").attr("udfrequired");
                    vUDF4Required = $("#UDF4ToolCommon").attr("udfrequired");
                    vUDF5Required = $("#UDF5ToolCommon").attr("udfrequired");
                }
                else {

                    vUDF1 = GetUDFValueFromTR("UDF1TC", ItemNodes[j]);
                    vUDF2 = GetUDFValueFromTR("UDF2TC", ItemNodes[j]);
                    vUDF3 = GetUDFValueFromTR("UDF3TC", ItemNodes[j]);
                    vUDF4 = GetUDFValueFromTR("UDF4TC", ItemNodes[j]);
                    vUDF5 = GetUDFValueFromTR("UDF5TC", ItemNodes[j]);

                    vUDF1Required = $(ItemNodes[j]).parent().find('#UDF1TC').attr("udfrequired");
                    vUDF2Required = $(ItemNodes[j]).parent().find('#UDF2TC').attr("udfrequired");
                    vUDF3Required = $(ItemNodes[j]).parent().find('#UDF3TC').attr("udfrequired");
                    vUDF4Required = $(ItemNodes[j]).parent().find('#UDF4TC').attr("udfrequired");
                    vUDF5Required = $(ItemNodes[j]).parent().find('#UDF5TC').attr("udfrequired");
                }
            }


            UDfRequiredmsg = '';
            if (($('#RequisitionStatus').val() == "Approved" || $('#RequisitionStatus').val() == "Submitted") && vUDF1Required == "true" && $.trim(vUDF1) == "") {
                if(isItem == true)
                    UDfRequiredmsg += itemname + ' ' + '@PULLUDF1' + " is required, ";
                if (isTool == true)
                    UDfRequiredmsg += toolname + ' ' + '@TOOLUDF1' + " is required, ";
            }
            if (($('#RequisitionStatus').val() == "Approved" || $('#RequisitionStatus').val() == "Submitted") && vUDF2Required == "true" && $.trim(vUDF2) == "") {
                if(isItem == true)
                    UDfRequiredmsg += itemname + ' ' + '@PULLUDF2' + " is required, ";
                if (isTool == true)
                    UDfRequiredmsg += toolname + ' ' + '@TOOLUDF2' + " is required, ";
            }
            if (($('#RequisitionStatus').val() == "Approved" || $('#RequisitionStatus').val() == "Submitted") && vUDF3Required == "true" && $.trim(vUDF3) == "") {
                if(isItem == true)
                    UDfRequiredmsg += itemname + ' ' + '@PULLUDF3' + " is required, ";
                if (isTool == true)
                    UDfRequiredmsg += toolname + ' ' + '@TOOLUDF3' + " is required, ";
            }
            if (($('#RequisitionStatus').val() == "Approved" || $('#RequisitionStatus').val() == "Submitted") && vUDF4Required == "true" && $.trim(vUDF4) == "") {
                if(isItem == true)
                    UDfRequiredmsg += itemname + ' ' + '@PULLUDF4' + " is required, ";
                if (isTool == true)
                    UDfRequiredmsg += toolname + ' ' + '@TOOLUDF4' + " is required, ";
            }
            if (($('#RequisitionStatus').val() == "Approved" || $('#RequisitionStatus').val() == "Submitted") && vUDF5Required == "true" && $.trim(vUDF5) == "") {
                if(isItem == true)
                    UDfRequiredmsg += itemname + ' ' + '@PULLUDF5' + " is required, ";
                if (isTool == true)
                    UDfRequiredmsg += toolname + ' ' + '@TOOLUDF5' + " is required, ";
            }

            if ($.trim(UDfRequiredmsg) != "") {
                $(ItemNodes[j]).css("background-color", "#F7BBC4");
               // UDfRequiredmsg = UDfRequiredmsg.replace(/,\s*$/, "");
                UDfRequiredmsgALL = UDfRequiredmsgALL + UDfRequiredmsg;
            }
            else {
                $(ItemNodes[j]).css("background-color", "");
            }

        }
        if ($.trim(UDfRequiredmsgALL) != "") {
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("#spanGlobalMessage").html(UDfRequiredmsgALL);
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $('#DivLoading').hide();
            return false;
        }
        else {
            return true;
        }

    }

    function GetUDFValueFromTR(UdfName, tr) {
        var UdfValue
        if ($(tr).find('#' + UdfName).length > 0) {
            if ($(tr).find('#' + UdfName).attr("class") == 'selectBox') {
                UdfValue = $(tr).find('#' + UdfName + ' option:selected').text();
            }
            else {
                UdfValue = $(tr).find('#' + UdfName).val();
            }

        }
        return UdfValue;
    }

    function GetCommonUDFValue(UdfName) {
        var UdfValue
        if ($("#" + UdfName) != null) {
            if ($("#" + UdfName).attr("class") == 'selectBox') {
                UdfValue = $("#" + UdfName + " option:selected").text();
            }
            else {
                UdfValue = $("#" + UdfName).val();
            }
        }
        return UdfValue;
    }


    function onBegin() {
        $('#DivLoading').show();
        @*if ($('#RequisitionStatus').val() == "Closed")
            return true;

        if ('@Model.RequisitionStatus' == "Approved") {
            if (!CheckUDFRequired()) {
                return false;
            }
            return true;
        }

        if ($('#RequisitionStatus').val() === 'Submitted' && '@IsApprove' == "True") {
            $('#RequisitionStatus').val('Approved');
        }
        if ($('#RequisitionStatus').val() == "Submitted" || $('#RequisitionStatus').val() == "Approved") {
            if (!CheckUDFRequired()) {
                return false;
            }
        }

        if ('@Model.ID' != 0) {
            if (!SaveAllClick(false)) {
                $('#DivLoading').hide();
                return false;
            }
        }

        if ($('#RequisitionStatus').val() != "Unsubmitted") {
            var Count = 0;
            $('#' + DTName + ' tbody tr').each(function () {
                Count = Count + 1;
            });
            if (Count == 1 && $('#' + DTName + ' tbody tr')[0].cells.length == 1) {
                //alert('You can not submit Zero line Item, Kindly add Items and then Submit the Requisition');
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                $("#spanGlobalMessage").html("@ResRequisitionMaster.ReqLineItems");
                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                $('#DivLoading').hide();
                return false;
            }

            if ($('#RequisitionStatus').val() == "Approved") {
                if ($("#PageSubmissionMethod").val() == 1) {
                    var ApprovedQTY = 0;
                    var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
                    for (var i = 0; i < ItemNodes.length; i++) {
                        var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val() == '' ? 0 : $(ItemNodes[i]).find('#txtQuantityApproved').val();
                        ApprovedQTY = parseInt(txtQuantityApproved, 10) + ApprovedQTY;
                    }

                    if (ApprovedQTY == 0) {
                        $('#DivLoading').hide();
                        $('#divModelReqToApprove').modal();
                        return false;
                    }
                    else {
                        var isApprZero = false;
                        var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
                        for (var i = 0; i < ItemNodes.length; i++) {
                            var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val() == '' ? 0 : $(ItemNodes[i]).find('#txtQuantityApproved').val();
                            if (isNaN(parseFloat(txtQuantityApproved)) || parseFloat(txtQuantityApproved) <= 0) {
                                $('#DivLoading').hide();
                                $('#divModelReqToApprove').modal();
                                isApprZero = true;
                                break;
                            }
                        }

                        if (isApprZero) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                }
                else {
                    return true;
                }
            }
            else {
                return true;
            }
        }*@
    }

    $('#ancHideShowContent').click(function () {
        if ($('#ExpandedContent').css('display') == 'none') {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_open.jpg');
        }

    });

    function onSuccess(response) {
        window.location.hash = '';
        IsRefreshGrid = true;
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();
        SetTabswithCount('RequisitionMaster', 'RequisitionStatus');
        UpdateTopMenuReqCount();
        $('#DivLoading').hide();
        if (response.Status == "fail") {

            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#RequisitionNumber").val("");
            $("#RequisitionNumber").focus();
        }
        else if (idValue == 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#RequisitionNumber").val("");
                $("#RequisitionNumber").focus();
            }
            else if (response.Status == "duplicateWO") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#WorkorderName").val("");
                $("#WorkorderName").focus();
            }
            else {
                //Delete file
                if (DeleteRequistionFileId != '') {
                    DeleteExistingFromList(DeleteRequistionFileId, response.GUID);
                }
                //save file upload files
                 saveReqFiles(response.ID, response.GUID);
                //clearControls('frmRequisitionMaster');
                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                EditRequisitionID = response.ID;
                NeedToOpenItemPopupNow = true;
                //ShowEditTab("RequisitionEdit/" + response.ID, "frmRequisitionMaster");
                ShowEditTabGUIDTRUEOnly("RequisitionEdit?RequisitionGUID=" + response.GUID, "frmRequisitionMaster");
                UpdateTopMenuReqCount();
            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#RequisitionNumber").val("");
                $("#RequisitionNumber").focus();
            }
            else if (response.Status == "duplicateWO") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#WorkorderName").val("");
                $("#WorkorderName").focus();
            }
            else {
                if (response.reqobj.RequisitionStatus == "Approved" && typeof (response.ReportPDFFilePath) != "undefined" && response.ReportPDFFilePath.length > 0 && isReportDisplay) {
                    $('#DivLoading').show();
                    var lnk = '@Url.Content("~/Consume/PrintSubmittedRequisition")' + "?ReqGUID=" + response.ReportPDFFilePath;
                    OpenPrintTab(lnk)
                }
                //CallReqNarrowFunctions();
                //Delete file
                if (DeleteRequistionFileId != '') {
                    DeleteExistingFromList(DeleteRequistionFileId, response.GUID);
                }
                //save file upload files
                saveReqFiles(response.ID, response.GUID);
                clearControls('frmRequisitionMaster');
                SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
                $('#DivLoading').hide();
            }

            if (response.reqobj.RequisitionStatus == "Approved" && response.reqobj.PageSubmissionMethod == "2") {
                $.ajax({
                    "url": '@Url.Content("~/Consume/CloseRequisitionIfPullCompleted")',
                    data: { RequisitionGUID: response.GUID },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    success: function (response) {
                    }
                });
            }

        }
    }
    function onFailure(message) {
        $('#DivLoading').hide();
        $("#spanGlobalMessage").html(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#RequisitionNumber").focus();
    }

    function saveReqFiles(Id, RequisitionGUID) {
        if ($("table.FileUploadList tr[uploaded='false']").length > 0) {
            //send formdata to server-side
            $.ajax({
                url: "/api/fileupload/RequisitionFileUpload/" + Id + "?RequisitionGUID=" + RequisitionGUID,
                type: 'post',
                data: formData,
                dataType: 'html', // we return html from our file
                async: true,
                processData: false,  // tell jQuery not to process the data
                contentType: false,   // tell jQuery not to set contentType
                success: function (data) {
                    formData = new FormData();
                    //$('#upload-result').append('<div class="alert alert-success"><p>File(s) uploaded successfully!</p><br />');
                    //$('#upload-result .alert').append(data);
                },
                error: function (request) {
                    console.log(request.responseText);
                }
            });
        }
    }


    function OnRequisitionStatusChange() {
        if ($('#RequisitionStatus').val() == "Approved") {
            var ApprovedQTY = 0;
            var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
            for (var i = 0; i < ItemNodes.length; i++) {
                var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val() == '' ? 0 : $(ItemNodes[i]).find('#txtQuantityApproved').val();
                ApprovedQTY = parseInt(txtQuantityApproved, 10) + ApprovedQTY;
            }
            if (ApprovedQTY == 0) {
                $('#basic-modal-content-RequisitionApprove').modal();
            }
        }
        else
            return true;
    }

    function closeModalRequisitionApprove() {
        $.modal.impl.close();
        return false;
    }

    function IsRejectTheRequisition() {
        if ($('#RequisitionStatus').val() == "Approved") {
            var ApprovedQTY = 0;
            var ItemNodes = $('#' + DTName).dataTable().fnGetNodes();
            for (var i = 0; i < ItemNodes.length; i++) {
                var txtQuantityApproved = $(ItemNodes[i]).find('#txtQuantityApproved').val() == '' ? 0 : $(ItemNodes[i]).find('#txtQuantityApproved').val();
                ApprovedQTY = parseInt(txtQuantityApproved, 10) + ApprovedQTY;
            }
            if (ApprovedQTY == 0) {
                $('#basic-modal-content-Requisition').modal();
            }
            else {
                clearControls('frmRequisitionMaster');
                SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
            }
        }
        else {
            clearControls('frmRequisitionMaster');
            SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
        }
    }

    function closeModalRequisition() {
        $.modal.impl.close();
        // clearControls('frmRequisitionMaster');
        // SwitchTextTab(0, 'RequisitionCreate', 'frmRequisitionMaster');
    }


    function ResetApprovedQTY() {

        var arrItems = new Array();
        //var nNodes = oTable.fnGetNodes();
        var Nodes = $('#' + DTName).dataTable().fnGetNodes()
        for (var i = 0; i <= Nodes.length - 1; i++) {
            var txtQuantityRequisitioned = null;
            var txtQuantityApproved = 0;
            var txtQuantityPulled = null;
            var item_BinID = null;
            var ProjectSpendID = null;

            var hdnID = $(Nodes[i]).find('#hdnID').val();
            var hdnItemID = $(Nodes[i]).find('#hdnItemID').val();
            var hdnItemNumber = $(Nodes[i]).find('#hdnItemNumber').val();
            var hdnItemGUID = $(Nodes[i]).find('#hdnItemGUID').val();
            var hdnRequisitionID = '@Model.ID';
            var hdnRequisitionGUID = $(Nodes[i]).find('#hdnRequisitionGUID').val();
            var hdnItemCost = $(Nodes[i]).find("#hdnItemCost").val();

            if (hdnID != undefined) {
                var data = { "GUID": hdnID, "ItemGUID": hdnItemGUID, "RequisitionID": hdnRequisitionID, "RequisitionGUID": hdnRequisitionGUID, "ItemNumber": hdnItemNumber, "QuantityRequisitioned": txtQuantityRequisitioned, "QuantityPulled": txtQuantityPulled, "QuantityApproved": txtQuantityApproved, "ItemCost": hdnItemCost };
                arrItems.push(data);
            }
            //});
        }
        if (arrItems.length > 0) {
            $('#DivLoading').show();
            $.ajax({
                url: '@Url.Content("~/Consume/AddItemToDetailTable")',
                data: { 'para': JSON.stringify(arrItems) },
                dataType: 'json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (response) {
                    $('#DivLoading').hide();
                    if (response.Status == "ok") {
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        //ShowEditTab("RequisitionEdit/" + '@Model.ID', "frmRequisitionMaster");
                        ShowEditTabGUID("RequisitionEdit?RequisitionGUID=" + '@Model.GUID', "frmRequisitionMaster", false); // change for WI-712
                        SetTabswithCount('RequisitionMaster', 'RequisitionStatus');
                        UpdateTopMenuReqCount();
                    }
                    else {
                        $("#spanGlobalMessage").html(response.Message);
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    }
                }
            });
        }
        else {
            $("#spanGlobalMessage").html('@ResRequisitionMaster.NoItemAvailable');
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("#spanGlobalMessage").removeClass('succesIcon errorIcon').addClass('WarningIcon');
        }
    }
</script>
<div id="NewMasterPopUP">
</div>
<script type="text/javascript">
    $("#NewMasterPopUP").dialog({
        autoOpen: false,
        //        show: "blind",
        //        hide: "explode",
        height: 600,
        width: 800,
        modal: true,
        open: function () {
            $(this).parent().find("span.ui-dialog-title").html("Add New " + $(this).data("data"));
        },
        close: function () {
            $('#DivLoading').show();
            RefreshDropdownList($(this).data("data"), $(this).data("IDVal"));
            $(this).data("data", null);
            $(this).data("IDVal", null);
            $(this).parent().find("span.ui-dialog-title").html('');
        }
    });
    function AddNewFromPopup(PopupFor) {
        $('#DivLoading').show();
        var _URL = ''
        if (PopupFor == 'Customer') {
            _URL = '@Url.Action("../Master/CustomerMasterCreate")';
        }
        else if (PopupFor == 'Technician')
        {
            _URL = '@Url.Action("../Master/TechnicianCreate")';
        }
        else {
            return false;
        }
        $('#NewMasterPopUP').load(_URL, function () {
            $('#NewMasterPopUP').data("data", PopupFor).dialog('open');
            $('#DivLoading').hide();
        });
    }
    function RefreshDropdownList(PopupFor, IDVal) {
        if (IDVal != undefined) {
            var _ControlID = '';
            if (PopupFor == 'Customer') {
                _ControlID = "CustomerGUID";
            }
            else if (PopupFor == 'Technician') {
                _ControlID = "TechnicianID";
            }
            var arrdata = IDVal.split("~");
            var listData = $('select[id*="' + _ControlID + '"]');
            $(listData).each(function () {
                $(this).append($("<option />").val(arrdata[0]).text(arrdata[1]));
            });
            var foption = $('select[id*="' + _ControlID + '"] option:first');
            var soptions = $('select[id*="' + _ControlID + '"] option:not(:first)').sort(function (a, b) {
                return a.text == b.text ? 0 : a.text < b.text ? -1 : 1
            });
            $(listData).html(soptions).prepend(foption);
        }
        $('#DivLoading').hide();
    }

    $('#txtProjectSpent').live('change', function () {
        if ($(this).val().length > 0) {
            //$('.userContentInnerGrid').find("#ProjectSpendGUID").val($(this).val());
            $('.userContentInnerGrid').find("#ProjectSpendGUID").attr('disabled', 'disabled');
            $("#ProjectSpendGUIDCommon").attr('disabled', 'disabled');
        }
        else {
            //$('.userContentInnerGrid').find("#ProjectSpendGUID").val($(this).val());
            $('.userContentInnerGrid').find("#ProjectSpendGUID").removeAttr('disabled', 'disabled');
            $("#ProjectSpendGUIDCommon").removeAttr('disabled', 'disabled');
        }

    });

    $('#aRptSingle').on('click', function () {
        // var objkeyVal = new Array();
        // objkeyVal.push({ 'key': 'OrderGuids', 'value': '@Model.GUID' });
        // ShowLocalReports(objkeyVal, 'RPT_Orders');
        ReportExecutionSingleRecord('Requisition', '@Model.GUID');
    });
    $('#ddlSupplier').change(function () {
        if (!isNaN(parseInt($(this).val())) && parseInt($(this).val()) > 0) {
            $('#DivLoading').show();

            $('#ddlSupplierAccount').empty();
            $('#ddlSupplierAccount').html('');
            if ($("select#ddlSupplier").val() != '' && $("select#ddlSupplier").val() != null && $("select#ddlSupplier").val() != undefined) {
                $.ajax({
                    url: "/Order/ShowData",
                    data: { "SupplierID": $("select#ddlSupplier").val() },
                    type: "Get",
                    success: function (data) {
                        var opt = new Option("Please Select", "");
                        $('#ddlSupplierAccount').append(opt);
                        for (var i = 0; i < data.length; i++) {
                            var opt = new Option(data[i].AccountNumnerMerge, data[i].GUID);
                            $('#ddlSupplierAccount').append(opt);

                        }
                        $('#ddlSupplierAccount').val('@Model.SupplierAccountGuid');
                        $('#DivLoading').hide();
                    }, error: function () {
                        $('#DivLoading').hide();
                    }
                });


            }
        }
    });
    if ('@(Model.RequisitionStatus)' != "Unsubmitted" && ('@Model.SupplierAccountGuid' == '' || '@Model.SupplierAccountGuid' == '00000000-0000-0000-0000-000000000000')) {
        $('#ddlSupplierAccount').empty();
        $('#ddlSupplierAccount').html('');
    }
    else {
        $('#ddlSupplierAccount').empty();
        $('#ddlSupplierAccount').html('');
        if ($("select#ddlSupplier").val() != '' && $("select#ddlSupplier").val() != null && $("select#ddlSupplier").val() != undefined) {
            $.ajax({
                url: "/Order/ShowData",
                data: { "SupplierID": $("select#ddlSupplier").val() },
                type: "Get",
                success: function (data) {
                    var opt = new Option("Please Select", "");
                    $('#ddlSupplierAccount').append(opt);
                    for (var i = 0; i < data.length; i++) {
                        var opt = new Option(data[i].AccountNumnerMerge, data[i].GUID);
                        $('#ddlSupplierAccount').append(opt);

                    }
                    $('#ddlSupplierAccount').val('@Model.SupplierAccountGuid');
                    if (('@Model.SupplierAccountGuid' == '' || '@Model.SupplierAccountGuid' == '00000000-0000-0000-0000-000000000000') && '@Model.ID' == 0) {

                        $.ajax({
                            url: "/Order/GetDefaultAccount",
                            data: { "SupplierID": $("select#ddlSupplier").val() },
                            type: "Get",
                            success: function (data) {
                                $('#ddlSupplierAccount').val(data);

                            }
                        });
                    }
                }
            });
        }
    }

    // ************ Tool Popup ********************//

    $('input#btnAddNewTools').on('click', function () {
        OpenToolPopup();
    });
    function OpenToolPopup() {
        if (parseInt('@Model.ID', 10) > 0) {
            ClearVariables();
            var strUrl = '@Url.Action("LoadToolsOnModel")';
            strUrl = strUrl + '?ParentGuid=' + '@Model.GUID';
            $('#divToolModel').load(strUrl, new function () {
                $('#divToolModel').dialog('open');
            })
        }
    }
    $('input#btnAddNewToolsCategory').on('click', function () {
        OpenToolCategoryPopup();
    });

    function OpenToolCategoryPopup() {
        if (parseInt('@Model.ID', 10) > 0) {
            ClearVariables();
            var strUrl = '@Url.Action("LoadToolsCategoryOnModel")';
            strUrl = strUrl + '?ParentGuid=' + '@Model.GUID';
            $('#divToolCategoryModel').load(strUrl, new function () {
                $('#divToolCategoryModel').dialog('open');
            })
        }
    }
    _Common.addRequiredSign();
</script>
<style>
    .round-button {
        width: auto;
        display: table-cell;
    }

    .round-button-circle {
        width: 100%;
        border-radius: 7%;
        overflow: hidden;
        background: #f8f8f8;
        box-shadow: 0 0 3px grey;
        border-color: black;
        padding: 2px 10px 3px 10px;
        border-style: solid;
        border-width: thin;
    }

    #preview {
        position: absolute;
        border: 1px solid #ccc;
        background: #333;
        padding: 5px;
        display: none;
        color: #fff;
    }
</style>
