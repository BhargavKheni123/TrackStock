@model ImportModuleModel
@{
    string[] arrcolumns = Model.arrcolumns;
}
<tr>
    @if (arrcolumns.Count() > 0)
    {
        <th>
            @ResCommon.Status
        </th>
        <th>
            @ResCommon.Reason
        </th>
    }
    @if (arrcolumns.Contains("schedulefor"))
    {
        <th>
            <em>* </em>
            @ResToolsScheduler.ScheduleFor
        </th>
    }
    @if (arrcolumns.Contains("schedulername"))
    {
        <th>
            <em>* </em>
            @ResToolsScheduler.SchedulerName
        </th>
    }
    @if (arrcolumns.Contains("description"))
    {
        <th>
            @ResToolsScheduler.Description
        </th>
    }
    @if (arrcolumns.Contains("schedulertype"))
    {
        <th>
            @ResToolsScheduler.ScheduleType
        </th>
    }
    @if (arrcolumns.Contains("timebasedunit"))
    {
        <th>
            @ResToolsScheduler.TimeBaseUnit
        </th>
    }
    @if (arrcolumns.Contains("timebasedfrequency"))
    {
        <th>
            @ResToolsScheduler.TimeBasedFrequency
        </th>
    }
    @if (arrcolumns.Contains("checkouts"))
    {
        <th>
            @ResToolsScheduler.CheckOuts
        </th>
    }
    @if (arrcolumns.Contains("operationalhours"))
    {
        <th>
            @ResToolsScheduler.OperationalHours
        </th>
    }
    @if (arrcolumns.Contains("mileage"))
    {
        <th>
            @ResToolsScheduler.Mileage
        </th>
    }
    @if (arrcolumns.Contains("udf1"))
    {
        <th>
            @ResToolsScheduler.UDF1
        </th>
    }
    @if (arrcolumns.Contains("udf2"))
    {
        <th>
            @ResToolsScheduler.UDF2
        </th>
    }
    @if (arrcolumns.Contains("udf3"))
    {
        <th>
            @ResToolsScheduler.UDF3
        </th>
    }
    @if (arrcolumns.Contains("udf4"))
    {
        <th>
            @ResToolsScheduler.UDF4
        </th>
    }
    @if (arrcolumns.Contains("udf5"))
    {
        <th>
            @ResToolsScheduler.UDF5
        </th>
    }
    @if (arrcolumns.Contains("itemnumber"))
    {
        <th>
            @ResItemMaster.ItemNumber
        </th>
    }
    @if (arrcolumns.Contains("quantity"))
    {
        <th>
            @ResToolsSchedulerDetails.Quantity
        </th>
    }
    @if (arrcolumns.Contains("isdeleted"))
    {
        <th>
            @ResToolsScheduler.IsDeleted
        </th>
    }
</tr>
<script type="text/javascript">
    if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.AssetToolScheduler)') {
        $(function (event) {
            if ('@arrcolumns.Count()' > 0) {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                        var forcol = "#000000";
                        var bodcol = "#DDD";
                        if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                            forcol = "Red";
                            bodcol = "Red";
                        }

                        else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                            forcol = "Green";
                            bodcol = "Green";
                        }

                        // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                        return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                        return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                    }
                });
            }

            if ('@arrcolumns.Contains("schedulefor")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDataScheduleForName = obj.aData.ScheduleForName == null ? "" : obj.aData.ScheduleForName.substring(0, 128);
                        return "<input type='text' maxLength='128'  value='" + tempDataScheduleForName + "'  class='importtext-box' id='aScheduleFor_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }

            if ('@arrcolumns.Contains("schedulername")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDataSchedulerName = obj.aData.SchedulerName == null ? "" : obj.aData.SchedulerName.substring(0, 128);
                        return "<input type='text' maxLength='128'  value='" + tempDataSchedulerName + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aSchedulerName_" + obj.aData.ID + "' style='width:200px;' />" +
                                                "<span id='SchedulerID' style='display:none'>" + obj.aData.ID + "</span>"
                    }
                });
            }

            if ('@arrcolumns.Contains("description")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDesc = obj.aData.Description == null ? "" : obj.aData.Description.substring(0, 128);
                        return "<input type='text' maxLength='128'  value='" + tempDesc + "' class='importtext-box' id='aDescription_" + obj.aData.ID + "' style='width:300px;' />";
                    }
                });
            }


            if ('@arrcolumns.Contains("schedulertype")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempSTN = obj.aData.SchedulerTypeName == null ? "" : obj.aData.SchedulerTypeName.substring(0, 128);
                        return "<input type='text' maxLength='128'  value='" + tempSTN + "' class='importtext-box' id='aSchedulerType_" + obj.aData.ID + "' style='width:80px;' />"

                    }
                });
            }

            if ('@arrcolumns.Contains("timebasedunit")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDataTBU = obj.aData.TimeBasedUnitName == null ? "" : obj.aData.TimeBasedUnitName.substring(0, 128);
                        return "<input type='text' maxLength='128'  value='" + tempDataTBU + "' class='importtext-box' id='aTimeBasedUnit_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }

            if ('@arrcolumns.Contains("timebasedfrequency")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDataTBF = obj.aData.TimeBasedFrequency == null ? "" : obj.aData.TimeBasedFrequency;
                        return "<input type='text' maxLength='128'  value='" + tempDataTBF + "' onkeypress='return isNumberKey(event);' class='numericDecimalinput importtext-box' id='aTimeBasedFrequency_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }

            if ('@arrcolumns.Contains("checkouts")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempCheckouts = obj.aData.CheckOuts == null ? "" : obj.aData.CheckOuts;
                        return "<input type='text' maxLength='128'  value='" + tempCheckouts + "' onblur='return ValidateValueWithDataType();'  onkeypress='return isNumberKey(event);' class='numericDecimalinput importtext-box' id='aCheckouts_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }
      
            if ('@arrcolumns.Contains("operationalhours")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempOperationalHours = obj.aData.OperationalHours == null ? "" : obj.aData.OperationalHours;
                        return "<input type='text' maxLength='128'  value='" + tempOperationalHours + "' onblur='return ValidateValueWithDataType();'  onkeypress='return isNumberKey(event);' class='numericDecimalinput importtext-box' id='aOperationalHours_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }
            if ('@arrcolumns.Contains("mileage")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempMileage = obj.aData.Mileage == null ? "" : obj.aData.Mileage;
                        return "<input type='text' maxLength='128'  value='" + tempMileage + "' onblur='return ValidateValueWithDataType();'  onkeypress='return isNumberKey(event);' class='numericDecimalinput importtext-box' id='aMileage_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }

            if ('@arrcolumns.Contains("udf1")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                        return "<input type='text' value='" + tempUDF1 + "' maxLength='255' class='importtext-box' id='aUDF1_" + obj.aData.ID + "' style='width:100px;'  />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf2")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                        return "<input type='text' value='" + tempUDF2 + "' maxLength='255'  class='importtext-box'  id='aUDF2_" + obj.aData.ID + "' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf3")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                        return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3_" + obj.aData.ID + "' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf4")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                        return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4_" + obj.aData.ID + "' style='width:100px;' />"
                    }
                });
            }
            if ('@arrcolumns.Contains("udf5")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                        return "<input type='text' value='" + tempUDF5 + "'  maxLength='255' class='importtext-box'  id='aUDF5_" + obj.aData.ID + "' style='width:100px;' />"
                    }
                });
            }

            if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDataitemnumber = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 128);
                        return "<input type='text' maxLength='128'  value='" + tempDataitemnumber + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aItemNumber_" + obj.aData.ID + "' style='width:200px;' />"
                                               
                    }
                });
            }

            if ('@arrcolumns.Contains("quantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var Quantity = obj.aData.Quantity == null ? "" : obj.aData.Quantity;
                        return "<input type='text' onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' value='" + Quantity + "' id='aQuantity_" + obj.aData.ID + "' />"
                    }
                });
            }

            if ('@arrcolumns.Contains("isdeleted")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempisdeleted = obj.aData.IsDeleted == null ? "0" : obj.aData.IsDeleted;
                        if (tempisdeleted != "" || tempisdeleted == "1") {
                            tempisdeleted = "checked=\"checked\""
                        }
                        else { tempisdeleted = ""; }
                        return "<input type='checkbox'" + tempisdeleted + " id='aisdeleted_" + obj.aData.ID + "' />"
                    }
                });
            }

        });


    }

</script>