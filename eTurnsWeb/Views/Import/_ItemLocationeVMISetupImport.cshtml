@model ImportModuleModel
@{
    string[] arrcolumns = Model.arrcolumns;
}
<tr>
    @if (arrcolumns.Count() > 0)
    {
        <th>
            @ResCommon.Status
        </th>
        <th>
            @ResCommon.Reason
        </th>
    }
    @if (arrcolumns.Contains("itemnumber"))
    {
        <th>
            <em>* </em>
            @eTurns.DTO.ResItemMaster.ItemNumber
        </th>
    }
    @if (arrcolumns.Contains("locationname"))
    {
        <th>
            <em>* </em>
            @eTurns.DTO.ResBin.BinNumber
        </th>
    }
    @if (arrcolumns.Contains("minimumquantity"))
    {
        <th>
            @eTurns.DTO.ResBin.MinimumQuantity
        </th>
    }
    @if (arrcolumns.Contains("maximumquantity"))
    {
        <th>
            @eTurns.DTO.ResBin.MaximumQuantity
        </th>
    }
    @if (arrcolumns.Contains("criticalquantity"))
    {
        <th>
            @eTurns.DTO.ResBin.CriticalQuantity
        </th>
    }
    @if (arrcolumns.Contains("sensorid"))
    {
        <th>
            @eTurns.DTO.ResBin.eVMISensorID
        </th>
    }
    @if (arrcolumns.Contains("sensorport"))
    {
        <th>
            @eTurns.DTO.ResBin.eVMISensorPort
        </th>
    }
    @if (arrcolumns.Contains("isdefault"))
    {
        <th>
            @eTurns.DTO.ResBin.IsDefault
        </th>
    }

    @if (arrcolumns.Contains("isstaginglocation"))
    {
        <th>
            @eTurns.DTO.ResBin.IsStagingLocation
        </th>
    }

    @if (arrcolumns.Contains("defaultpullquantity"))
    {
        <th>
            @eTurns.DTO.ResBin.DefaultPullQuantity
        </th>
    }

    @if (arrcolumns.Contains("isenforcedefaultpullquantity"))
    {
        <th>
            @eTurns.DTO.ResBin.IsEnforceDefaultPullQuantity
        </th>
    }

    @if (arrcolumns.Contains("defaultreorderquantity"))
    {
        <th>
            @eTurns.DTO.ResBin.DefaultReorderQuantity
        </th>
    }

    @if (arrcolumns.Contains("isenforcedefaultreorderquantity"))
    {
        <th>
            @eTurns.DTO.ResBin.IsEnforceDefaultReorderQuantity
        </th>
    }

    @if (arrcolumns.Contains("isdeleted"))
    {
        <th>
            @eTurns.DTO.ResItemMaster.IsDeleted
        </th>
    }
    @if (arrcolumns.Contains("binudf1"))
    {
        <th>
            @eTurns.DTO.ResBinUDF.BinUDF1
        </th>
    }
    @if (arrcolumns.Contains("binudf2"))
    {
        <th>
            @eTurns.DTO.ResBinUDF.BinUDF2
        </th>
    }
    @if (arrcolumns.Contains("binudf3"))
    {
        <th>
            @eTurns.DTO.ResBinUDF.BinUDF3
        </th>
    }
    @if (arrcolumns.Contains("binudf4"))
    {
        <th>
            @eTurns.DTO.ResBinUDF.BinUDF4
        </th>
    }
    @if (arrcolumns.Contains("binudf5"))
    {
        <th>
            @eTurns.DTO.ResBinUDF.BinUDF5
        </th>
    }
</tr>
<script type="text/javascript">
    if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.eVMISetup)') {
        $(function (event) {
            if ('@arrcolumns.Count()' > 0) {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                        var forcol = "#000000";
                        var bodcol = "#DDD";
                        if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                            forcol = "Red";
                            bodcol = "Red";
                        }

                        else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                            forcol = "Green";
                            bodcol = "Green";
                        }

                        // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                        return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                        return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                    }
                });
            }
            if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDataPullQnt = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 128);
                        return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aItemNumber_" + obj.aData.ID + "' style='width:100px;' />" +
                                                "<span id='InvLocId' style='display:none'>" + obj.aData.ID + "</span>"
                    }
                });
            }

            if ('@arrcolumns.Contains("locationname")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDataPullQnt = obj.aData.BinNumber == null ? "" : obj.aData.BinNumber.substring(0, 128);
                        return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aLocationName_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }
            if ('@arrcolumns.Contains("minimumquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempminimumquantity = obj.aData.MinimumQuantity == null ? "" : obj.aData.MinimumQuantity;
                        return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempminimumquantity + "'  class='importtext-box' id='aminimumquantity_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }
            if ('@arrcolumns.Contains("maximumquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempMaximumQuantity = obj.aData.MaximumQuantity == null ? "" : obj.aData.MaximumQuantity;
                        return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempMaximumQuantity + "'  class='importtext-box' id='amaximumquantity_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }
            if ('@arrcolumns.Contains("criticalquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempCriticalQuantity = obj.aData.CriticalQuantity == null ? "" : obj.aData.CriticalQuantity;
                        return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempCriticalQuantity + "'  class='importtext-box' id='acriticalquantity_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }
            if ('@arrcolumns.Contains("sensorid")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDataSensorId = obj.aData.SensorId == null ? "" : obj.aData.SensorId;
                        return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);'  value='" + tempDataSensorId + "'  class='importtext-box' id='aSensorAddress_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }
            if ('@arrcolumns.Contains("sensorport")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDataSensorPort = obj.aData.SensorPort == null ? "" : obj.aData.SensorPort;
                        return "<input type='text' maxLength='128'  value='" + tempDataSensorPort + "'  class='importtext-box' id='aSensorPort_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }
            if ('@arrcolumns.Contains("isdefault")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var isdefault = obj.aData.IsDefault == null ? "" : obj.aData.IsDefault;
                        if (isdefault != "" || isdefault == "true") {
                            isdefault = "checked=\"checked\""
                        }
                        else { isdefault = ""; }
                        return "<input type='checkbox'" + isdefault + "id='aisdefault_" + obj.aData.ID + "'  />"
                    }
                });
            }

            if ('@arrcolumns.Contains("isstaginglocation")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var isstaginglocation = obj.aData.IsStagingLocation == null ? "" : obj.aData.IsStagingLocation;

                        if (isstaginglocation != "" || isstaginglocation == "TRUE") {
                            isstaginglocation = "checked=\"checked\""
                        }
                        else { isstaginglocation = ""; }
                        return "<input type='checkbox'" + isstaginglocation + "id='aisstaginglocation_" + obj.aData.ID + "'  />"
                    }
                });
            }


            if ('@arrcolumns.Contains("defaultpullquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDefaultPullQuantity = obj.aData.DefaultPullQuantity == null ? "" : obj.aData.DefaultPullQuantity;
                        return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempDefaultPullQuantity + "'  class='importtext-box' id='adefaultpullquantity_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }

            if ('@arrcolumns.Contains("isenforcedefaultpullquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var isenforcedefaultpullquantity = obj.aData.IsEnforceDefaultPullQuantity == null ? "" : obj.aData.IsEnforceDefaultPullQuantity;

                        if (isenforcedefaultpullquantity != "" || isenforcedefaultpullquantity == "TRUE") {
                            isenforcedefaultpullquantity = "checked=\"checked\""
                        }
                        else { isenforcedefaultpullquantity = ""; }
                        return "<input type='checkbox'" + isenforcedefaultpullquantity + "id='aisenforcedefaultpullquantity_" + obj.aData.ID + "'  />"
                    }
                });
            }

            if ('@arrcolumns.Contains("defaultreorderquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        //limitField.value
                        var tempDefaultReorderQuantity = obj.aData.DefaultReorderQuantity == null ? "" : obj.aData.DefaultReorderQuantity;
                        return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempDefaultReorderQuantity + "'  class='importtext-box' id='adefaultreorderquantity_" + obj.aData.ID + "' style='width:100px;' />"

                    }
                });
            }

            if ('@arrcolumns.Contains("isenforcedefaultreorderquantity")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var isenforcedefaultreorderquantity = obj.aData.IsEnforceDefaultReorderQuantity == null ? "" : obj.aData.IsEnforceDefaultReorderQuantity;

                        if (isenforcedefaultreorderquantity != "" || isenforcedefaultreorderquantity == "TRUE") {
                            isenforcedefaultreorderquantity = "checked=\"checked\""
                        }
                        else { isenforcedefaultreorderquantity = ""; }
                        return "<input type='checkbox'" + isenforcedefaultreorderquantity + "id='aisenforcedefaultreorderquantity_" + obj.aData.ID + "'  />"
                    }
                });
            }


            if ('@arrcolumns.Contains("isdeleted")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var isdeleted = obj.aData.IsDeleted == null ? "" : obj.aData.IsDeleted;

                        if (isdeleted != "" || isdeleted == "TRUE") {
                            isdeleted = "checked=\"checked\""
                        }
                        else { isdeleted = ""; }
                        return "<input type='checkbox'" + isdeleted + "id='aisdeleted_" + obj.aData.ID + "'  />"
                    }
                });
            }

            if ('@arrcolumns.Contains("binudf1")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempBinUDF1 = obj.aData.BinUDF1 == null ? "" : obj.aData.BinUDF1;
                        return "<input type='text' maxLength='128'   value='" + tempBinUDF1 + "'  class='importtext-box' id='aBinUDF1_" + obj.aData.ID + "' style='width:300px;' />";
                    }
                });
            }
            if ('@arrcolumns.Contains("binudf2")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempBinUDF2 = obj.aData.BinUDF2 == null ? "" : obj.aData.BinUDF2;
                        return "<input type='text' maxLength='128'   value='" + tempBinUDF2 + "'  class='importtext-box' id='aBinUDF2_" + obj.aData.ID + "' style='width:300px;' />";
                    }
                });
            }
            if ('@arrcolumns.Contains("binudf3")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempBinUDF3 = obj.aData.BinUDF3 == null ? "" : obj.aData.BinUDF3;
                        return "<input type='text' maxLength='128'   value='" + tempBinUDF3 + "'  class='importtext-box' id='aBinUDF3_" + obj.aData.ID + "' style='width:300px;' />";
                    }
                });
            }
            if ('@arrcolumns.Contains("binudf4")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempBinUDF4 = obj.aData.BinUDF4 == null ? "" : obj.aData.BinUDF4;
                        return "<input type='text' maxLength='128'   value='" + tempBinUDF4 + "'  class='importtext-box' id='aBinUDF4_" + obj.aData.ID + "' style='width:300px;' />";
                    }
                });
            }
            if ('@arrcolumns.Contains("binudf5")' == 'True') {
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempBinUDF5 = obj.aData.BinUDF5 == null ? "" : obj.aData.BinUDF5;
                        return "<input type='text' maxLength='128'   value='" + tempBinUDF5 + "'  class='importtext-box' id='aBinUDF5_" + obj.aData.ID + "' style='width:300px;' />";
                    }
                });
            }


        });
    }

</script>