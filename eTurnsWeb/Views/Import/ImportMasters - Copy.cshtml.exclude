<script type='text/javascript' src="@Url.Content("~/Scripts/ajaxfileupload.js")"></script>
@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    string PathToCSv = Url.Content("~/Content/OpenAccess/CSV/");
    string[] arrcolumns = !string.IsNullOrWhiteSpace(Convert.ToString(Session["ColuumnList"])) ? Convert.ToString(Session["ColuumnList"]).ToLower().Split(',') : new string[] { };
    ViewBag.Title = ResImportMasters.PageTitle;
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ImportMasters" };

    //bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ImportMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Approval);
    //bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ImportMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Approval);

    eTurnsWeb.Controllers.ImportController objimo = new eTurnsWeb.Controllers.ImportController();
    List<SelectListItem> lstLanguage = objimo.GetImportModule();
    if (lstLanguage == null)
    {
        lstLanguage = new List<SelectListItem>();
    }
    ViewBag.DDLModulelst = lstLanguage;

    if (lstLanguage != null && lstLanguage.Count > 0)
    {
        if (Session["CurModulevalue"] == null)
        {
            Session["CurModulevalue"] = lstLanguage[0].Value;
        }

        if (Session["CurModule"] == null)
        {
            if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.BinMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CategoryMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.CategoryMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.RoomMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.Room;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.CustomerMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.FreightTypeMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.FreightTypeMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GLAccountsMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.GLAccountMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GXPRConsignedJobMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.GXPRConsigmentJobMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.JobTypeMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.JobTypeMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ShipViaMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.ShipViaMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.TechnicianMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ManufacturerMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.ManufacturerMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.MeasurementTermMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.MeasurementTermMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.UnitMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.SupplierMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.ItemMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.LocationMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.LocationMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolCategory).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.ToolCategoryMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CostUOMMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.CostUOMMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.InventoryClassificationMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Assets).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.AssetMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.ToolMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.QuickListItems;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BOMItemMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.BOMItemMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Kits).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.kitdetail;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.eVMISetup).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.ItemLocationeVMISetup;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemManufacturer).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.ItemManufacturerDetails;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemSupplier).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.ItemSupplierDetails;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BarcodeMaster).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.BarcodeMaster;
            }
            else if (lstLanguage[0].Value == ((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UDF).ToString())
            {
                Session["CurModule"] = ImportMastersDTO.TableName.UDF;
            }
            else
            {
                Session["CurModule"] = "";
            }
        }
    }
}
<style>
    .validationerror {
        border: 1px solid red;
    }
</style>
<div class="userListingWrapper">
    <h2>
        @ResImportMasters.PageHeader
    </h2>
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99%">
            @*@using (Ajax.BeginForm("UploadExcelFile", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess" }, new { @id = "frmImport" }))*@
            @using (Html.BeginForm("ImportMasters", "Import", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="userContent" style="padding-left: 5px; width: 99%;">
                    <div class="userHead" style="margin: 0 0.5% 0; width: 99%">
                        <div class="editorForm" style="width: 98%">
                            <ul>
                                <li style="float: left;">
                                    <div class="editor-label" style="width: 7%; float: left; padding: 0">
                                        @Html.Label("Select Module")
                                    </div>
                                    <div class="editor-field" style="width: 18%; float: left;">
                                        @Html.DropDownList("ddlModule", (List<SelectListItem>)ViewBag.DDLModulelst, new { @style = "width:85%", @class = "selectBox" })
                                    </div>
                                    <div class="editor-label" style="width: 7%; float: left; padding: 0">
                                        @Html.Label("Select File")
                                    </div>
                                    <div class="editor-field" style="width: 18%; float: left;">
                                        <input name="uploadFile" id="uploadFile" type="file" />
                                    </div>
                                    <div class="editor-field" style="width: 6%; float: left;">
                                        @*<input type="button"  value="UploadFile" title="Upload File" id="btnUpload" class="CreateBtn" name="btnSave" onclick="return CheckFileName();" />*@
                                        <input type="submit" id="btnupload" value="Load" title="Load" class="CreateBtn" onclick="return CheckFileName();" />
                                    </div>
                                    <div class="editor-field" style="width: 7%;  float: left; padding-left: 84px; ">
                                        @*<input type="button"  value="UploadFile" title="Upload File" id="btnUpload" class="CreateBtn" name="btnSave" onclick="return CheckFileName();" />*@
                                        <input type="button" id="btnDownload" value="Download Empty Template" title="Download Empty Template" class="CreateBtn" />
                                    </div>
                                    <div class="editor-field" style="width: 6%; padding-left: 37px; float: left;">
                                        @*<input type="button"  value="UploadFile" title="Upload File" id="btnUpload" class="CreateBtn" name="btnSave" onclick="return CheckFileName();" />*@
                                        <input type="button" id="btnAllRecordDownload" value="Download Data" title="Download Data" class="CreateBtn" />
                                    </div>
                                    <div class="editor-label" style="width: 15%; float: left; padding: 6px;">
                                        @Html.Label(@ResImportMasters.Requiredfieldsbegin)
                                    </div>
                                </li>
                            </ul>
                        </div>
                        @if (Convert.ToString(Session["CurModule"]).ToLower() == ImportMastersDTO.TableName.ItemMaster.ToString().ToLower())
                        {
                            <input name="uploadZIPFile" id="uploadZIPFile" type="file" style="float: left !important;" />
                            <br />
                        }
                        @if (Session["importedData"] != null)
                        {
                            <div class="userContent" style="width: 100% !important;">
                                <table id="myImportDataTable" class="display">
                                    <thead>
                                        @if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.BinMaster.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @eTurns.DTO.ResItemMaster.ItemNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("locationname"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @eTurns.DTO.ResBin.BinNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("customerownedquantity"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResBin.CustomerOwnedQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("consignedquantity"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResBin.ConsignedQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("cost"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemLocationDetails.Cost
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("serialnumber"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemLocationDetails.SerialNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("lotnumber"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemLocationDetails.LotNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("expirationdate"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemLocationDetails.ExpirationDate
                                                    </th>
                                                }
                                                @*@if (arrcolumns.Contains("receiveddate"))
                                                    {
                                                        <th>
                                                            @eTurns.DTO.ResItemLocationDetails.ReceivedDate
                                                        </th>
                                                    }*@
                                            </tr>
                                        }
                                        @if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.ItemLocationeVMISetup.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @eTurns.DTO.ResItemMaster.ItemNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("locationname"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @eTurns.DTO.ResBin.BinNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("minimumquantity"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResBin.MinimumQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("maximumquantity"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResBin.MaximumQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("criticalquantity"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResBin.CriticalQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("sensorid"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResBin.eVMISensorID
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("sensorport"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResBin.eVMISensorPort
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isdefault"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResBin.IsDefault
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isdeleted"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemMaster.IsDeleted
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.LocationMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("location"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResLocation.Location
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResLocation.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResLocation.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResLocation.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResLocation.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResLocation.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.ToolCategoryMaster.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("toolcategory"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResToolCategory.ToolCategory
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResToolCategory.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResToolCategory.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResToolCategory.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResToolCategory.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResToolCategory.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.CategoryMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("category"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResCategoryMaster.Category
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResCategoryMaster.UDF1
                                                    </th>}
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResCategoryMaster.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResCategoryMaster.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResCategoryMaster.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResCategoryMaster.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.CustomerMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("customer"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResCustomer.Customer
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("account"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResCustomer.Account
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("contact"))
                                                {
                                                    <th>
                                                        @ResCustomer.Contact
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("address"))
                                                {
                                                    <th>
                                                        @ResCommon.Address
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("city"))
                                                {
                                                    <th>
                                                        @ResCommon.City
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("state"))
                                                {
                                                    <th>
                                                        @ResCommon.State
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("zipcode"))
                                                {
                                                    <th>
                                                        @ResCommon.ZipCode
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("country"))
                                                {
                                                    <th>
                                                        @ResCommon.Country
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("phone"))
                                                {
                                                    <th>
                                                        @ResCommon.Phone
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("email"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResCommon.Email
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResCustomer.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResCustomer.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResCustomer.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResCustomer.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResCustomer.UDF5
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("remarks"))
                                                {
                                                    <th>
                                                        @ResCustomer.Remarks
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.FreightTypeMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("freighttype"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResFreightType.FreightType
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResFreightType.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResFreightType.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResFreightType.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResFreightType.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResFreightType.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.GLAccountMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("glaccount"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResGLAccount.GLAccount
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("description"))
                                                {
                                                    <th>
                                                        @ResGLAccount.Description
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResGLAccount.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResGLAccount.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResGLAccount.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResGLAccount.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResGLAccount.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.GXPRConsigmentJobMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("gxprconsignedjob"))
                                                {
                                                    <th>
                                                        @ResGXPRConsignedJob.GXPRConsignedJob
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResGXPRConsignedJob.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResGXPRConsignedJob.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResGXPRConsignedJob.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResGXPRConsignedJob.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResGXPRConsignedJob.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.JobTypeMaster.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                <th>
                                                    @ResCommon.ID
                                                </th>
                                                <th>
                                                    @ResJobType.JobType
                                                </th>
                                                <th>
                                                    @ResJobType.UDF1
                                                </th>
                                                <th>
                                                    @ResJobType.UDF2
                                                </th>
                                                <th>
                                                    @ResJobType.UDF3
                                                </th>
                                                <th>
                                                    @ResJobType.UDF4
                                                </th>
                                                <th>
                                                    @ResJobType.UDF5
                                                </th>
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.ShipViaMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("shipvia"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResShipVia.ShipVia
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResShipVia.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResShipVia.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResShipVia.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResShipVia.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResShipVia.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.TechnicianMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("technician"))
                                                {
                                                    <th>
                                                        @ResTechnician.Technician
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("techniciancode"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResTechnician.TechnicianCode
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResTechnician.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResTechnician.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResTechnician.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResTechnician.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResTechnician.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.ManufacturerMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("manufacturer"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResManufacturer.ManufacturerName
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResManufacturer.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResManufacturer.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResManufacturer.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResManufacturer.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResManufacturer.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.MeasurementTermMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("measurementterm"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResMeasurementTerm.MeasurementTerm
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResMeasurementTerm.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResMeasurementTerm.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResMeasurementTerm.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResMeasurementTerm.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResMeasurementTerm.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.UnitMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("unit"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResUnitMaster.Unit
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("description"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.Description
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("odometer"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.Odometer
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ophours"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.OpHours
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("serialno"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.SerialNo
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("year"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.Year@ResUnitMaster.Year
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("make"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.Make
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("model"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.Model
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("plate"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.Plate
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("enginemodel"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.EngineModel
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("engineserialno"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.EngineSerialNo
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("markupparts"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.MarkupParts
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("markuplabour"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.MarkupLabour
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResUnitMaster.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.SupplierMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("suppliername"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResSupplierMaster.Supplier
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("suppliercolor"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResSupplierMaster.SupplierColor
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("description"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.Description
                                                    </th>
                                                }
                                                @*@if (arrcolumns.Contains("receiverid"))
                                                    {
                                                        <th>
                                                            @ResSupplierMaster.ReceiverID
                                                        </th>
                                                    }*@
                                                @if (arrcolumns.Contains("branchnumber"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.BranchNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("maximumordersize"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.MaximumOrderSize
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("address"))
                                                {
                                                    <th>
                                                        @ResCommon.Address
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("city"))
                                                {
                                                    <th>
                                                        @ResCommon.City
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("state"))
                                                {
                                                    <th>
                                                        @ResCommon.State
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("zipcode"))
                                                {
                                                    <th>
                                                        @ResCommon.ZipCode
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("country"))
                                                {
                                                    <th>
                                                        @ResCommon.Country
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("contact"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.Contact
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("phone"))
                                                {
                                                    <th>
                                                        @ResCommon.Phone
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("fax"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.Fax
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("issendtovendor"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.IsSendtoVendor
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isvendorreturnasn"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.IsVendorReturnAsn
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("issupplierreceiveskitcomponents"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.IsSupplierReceivesKitComponents
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ordernumbertypeblank"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.optBlank
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ordernumbertypefixed"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.optFixed
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ordernumbertypeblanketordernumber"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.optBlanketOrder
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ordernumbertypeincrementingordernumber"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.optIncreamentingbyOrder
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ordernumbertypeincrementingbyday"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.optIncreamentingbyDay
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ordernumbertypedateincrementing"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.optDateIncrementing
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ordernumbertypedate"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.optDate
                                                    </th>
                                                }
                                                @*@if (arrcolumns.Contains("email"))
                                                    {
                                                        <th>
                                                            <em>* </em>
                                                            @ResCommon.Email
                                                        </th>
                                                    }
                                                    @if (arrcolumns.Contains("isemailpoinbody"))
                                                    {
                                                        <th>
                                                            @ResSupplierMaster.EmailPOInBody
                                                        </th>
                                                    }
                                                    @if (arrcolumns.Contains("isemailpoinpdf"))
                                                    {
                                                        <th>
                                                            @ResSupplierMaster.EmailPOInPDF
                                                        </th>
                                                    }
                                                    @if (arrcolumns.Contains("isemailpoincsv"))
                                                    {
                                                        <th>
                                                            @ResSupplierMaster.EmailPOInCSV
                                                        </th>
                                                    }
                                                    @if (arrcolumns.Contains("isemailpoinx12"))
                                                    {
                                                        <th>
                                                            @ResSupplierMaster.EmailPOInX12
                                                        </th>
                                                    }*@
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.UDF5
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("accountnumber"))
                                                {
                                                    <th>
                                                        @ResSupplierAccountDetails.AccountNo
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("accountname"))
                                                {
                                                    <th>
                                                        @ResSupplierAccountDetails.AccountName
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("blanketponumber"))
                                                {
                                                    <th>
                                                        @ResSupplierBlanketPODetails.BlanketPO
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("startdate"))
                                                {
                                                    <th>
                                                        @ResSupplierBlanketPODetails.StartDate
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("enddate"))
                                                {
                                                    <th>
                                                        @ResSupplierBlanketPODetails.Enddate
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("maxlimit"))
                                                {
                                                    <th>
                                                        @ResSupplierBlanketPODetails.MaxLimit
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("donotexceed"))
                                                {
                                                    <th>
                                                        @ResSupplierBlanketPODetails.IsNotExceed
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("pullpurchasenumberfixed"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.PullPurchaseNumberFixed
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("pullpurchasenumberblanketorder"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.PullPurchaseNumberBlanketOrder
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("pullpurchasenumberdateincrementing"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.PullPurchaseNumberDateIncrementing
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("pullpurchasenumberdate"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.PullPurchaseNumberDate
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("lastpullpurchasenumberused"))
                                                {
                                                    <th>
                                                        @ResSupplierMaster.LastPullPurchaseNumberUsed
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.ItemMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.ItemNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("link1"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemMaster.Link1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("link2"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemMaster.Link2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("manufacturer"))
                                                {
                                                    <th>
                                                        @ResItemMaster.ManufacturerName
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("manufacturernumber"))
                                                {
                                                    <th>
                                                        @ResItemMaster.ManufacturerNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("suppliername"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.Supplier
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("supplierpartno"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.SupplierPartNo
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("blanketordernumber"))
                                                {
                                                    <th>
                                                        @ResSupplierBlanketPODetails.BlanketPO
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("upc"))
                                                {
                                                    <th>
                                                        @ResItemMaster.UPC
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("unspsc"))
                                                {
                                                    <th>
                                                        @ResItemMaster.UNSPSC
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("description"))
                                                {
                                                    <th>
                                                        @ResItemMaster.Description
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("longdescription"))
                                                {
                                                    <th>
                                                        @ResItemMaster.LongDescription
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("categoryname"))
                                                {
                                                    <th>
                                                        @ResCategoryMaster.Category
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("glaccount"))
                                                {
                                                    <th>
                                                        @ResGLAccount.GLAccount
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("uom"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResUnitMaster.Unit
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("costuom"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResCostUOMMaster.CostUOM
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("defaultreorderquantity"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.DefaultReorderQuantity
                                                    </th>

                                                }
                                                @if (arrcolumns.Contains("defaultpullquantity"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.DefaultPullQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("cost"))
                                                {
                                                    <th>
                                                        @ResItemMaster.Cost
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("markup"))
                                                {
                                                    <th>
                                                        @ResItemMaster.Markup
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("sellprice"))
                                                {
                                                    <th>
                                                        @ResItemMaster.SellPrice
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("extendedcost"))
                                                {
                                                    <th>
                                                        @ResItemMaster.ExtendedCost
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("leadtimeindays"))
                                                {
                                                    <th>
                                                        @ResItemMaster.LeadTimeInDays
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("trend"))
                                                {
                                                    <th>
                                                        @ResItemMaster.Trend
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("taxable"))
                                                {
                                                    <th>
                                                        @ResItemMaster.Taxable
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("consignment"))
                                                {
                                                    <th>
                                                        @ResItemMaster.Consignment
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("stagedquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.StagedQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("intransitquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.InTransitquantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("onorderquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.OnOrderQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ontransferquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.OnTransferQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("suggestedorderquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.SuggestedOrderQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("requisitionedquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.RequisitionedQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("averageusage"))
                                                {
                                                    <th>
                                                        @ResItemMaster.AverageUsage
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("turns"))
                                                {
                                                    <th>
                                                        @ResItemMaster.Turns
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("onhandquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.OnHandQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isitemlevelminmaxqtyrequired"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.IsItemLevelMinMaxQtyRequired
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("criticalquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.CriticalQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("minimumquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.MinimumQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("maximumquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.MaximumQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("weightperpiece"))
                                                {
                                                    <th>
                                                        @ResItemMaster.WeightPerPiece
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemuniquenumber"))
                                                {
                                                    <th>
                                                        @ResItemMaster.ItemUniqueNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("istransfer"))
                                                {
                                                    <th>
                                                        @ResItemMaster.IsTransfer
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ispurchase"))
                                                {
                                                    <th>
                                                        @ResItemMaster.IsPurchase
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("inventrylocation"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBin.BinNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("inventoryclassification"))
                                                {
                                                    <th>
                                                        @ResItemMaster.InventoryClassification
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("serialnumbertracking"))
                                                {
                                                    <th>
                                                        @ResItemMaster.SerialNumberTracking
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("lotnumbertracking"))
                                                {
                                                    <th>
                                                        @ResItemMaster.LotNumberTracking
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("datecodetracking"))
                                                {
                                                    <th>
                                                        @ResItemMaster.DateCodeTracking
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemtype"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.ItemType
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("imagepath"))
                                                {
                                                    <th>
                                                        @ResItemMaster.ImagePath
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResItemMaster.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResItemMaster.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResItemMaster.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResItemMaster.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResItemMaster.UDF5
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("islotserialexpirycost"))
                                                {
                                                    <th>
                                                        @ResItemMaster.IsLotSerialExpiryCost
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isbuildbreak"))
                                                {
                                                    <th>
                                                        @ResItemMaster.IsBuildBreak
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("enforcedefaultpullquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.PullQtyScanOverride
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("enforcedefaultreorderquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.IsEnforceDefaultReorderQuantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isautoinventoryclassification"))
                                                {
                                                    <th>
                                                        @ResItemMaster.IsAutoInventoryClassification
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("trendingsetting"))
                                                {
                                                    <th>
                                                        @ResItemMaster.TrendingSetting
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ispackslipmandatoryatreceive"))
                                                {
                                                    <th>
                                                        @ResItemMaster.IsPackslipMandatoryAtReceive
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemimageexternalurl"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemMaster.ItemImageExternalURL
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemdocexternalurl"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemMaster.ItemDocExternalURL
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isdeleted"))
                                                {
                                                    <th>
                                                        @eTurns.DTO.ResItemMaster.IsDeleted
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.BOMItemMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBomItemMaster.ItemNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("manufacturer"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.ManufacturerName
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("manufacturernumber"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.ManufacturerNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("suppliername"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBomItemMaster.Supplier
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("supplierpartno"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBomItemMaster.SupplierPartNo
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("upc"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.UPC
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("unspsc"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.UNSPSC
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("description"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.Description
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("categoryname"))
                                                {
                                                    <th>
                                                        @ResCategoryMaster.Category
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("glaccount"))
                                                {
                                                    <th>
                                                        @ResGLAccount.GLAccount
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("unit"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResUnitMaster.Unit
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("leadtimeindays"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.LeadTimeInDays
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("taxable"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBomItemMaster.Taxable
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("consignment"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBomItemMaster.Consignment
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemuniquenumber"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.ItemUniqueNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("istransfer"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.IsTransfer
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("ispurchase"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.IsPurchase
                                                    </th>
                                                }
                                                @*@if (arrcolumns.Contains("inventrylocation"))
                                                    {
                                                        <th>
                                                            @ResBin.BinNumber
                                                        </th>
                                                    }*@
                                                @if (arrcolumns.Contains("inventoryclassification"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.InventoryClassification
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("serialnumbertracking"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBomItemMaster.SerialNumberTracking
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("lotnumbertracking"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBomItemMaster.LotNumberTracking
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("datecodetracking"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBomItemMaster.DateCodeTracking
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemtype"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBomItemMaster.ItemType
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResBomItemMaster.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.CostUOMMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("costuom"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResCostUOMMaster.CostUOM
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("costuomvalue"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResCostUOMMaster.CostUOMValue
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResCostUOMMaster.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResCostUOMMaster.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResCostUOMMaster.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResCostUOMMaster.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResCostUOMMaster.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.InventoryClassificationMaster.ToString())
                                        {
                                            <tr>
                                                @*<th>
                                                        @ResCommon.ID
                                                    </th>*@
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("inventoryclassification"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResInventoryClassificationMaster.InventoryClassification
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("baseofinventory"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResInventoryClassificationMaster.BaseOfInventory
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("rangestart"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResInventoryClassificationMaster.RangeStart
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("rangeend"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResInventoryClassificationMaster.RangeEnd
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResInventoryClassificationMaster.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResInventoryClassificationMaster.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResInventoryClassificationMaster.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResInventoryClassificationMaster.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResInventoryClassificationMaster.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.ToolMaster.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("toolname"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResToolMaster.ToolName
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("serial"))
                                                {
                                                    <th>
                                                        @ResToolMaster.Serial
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("description"))
                                                {
                                                    <th>
                                                        @ResToolMaster.Description
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("cost"))
                                                {
                                                    <th>
                                                        @ResToolMaster.Cost
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("quantity"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResToolMaster.Quantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("toolcategory"))
                                                {
                                                    <th>
                                                        @ResToolMaster.ToolCategory
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("location"))
                                                {
                                                    <th>
                                                        @ResToolMaster.Location
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResToolMaster.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResToolMaster.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResToolMaster.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResToolMaster.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResToolMaster.UDF5
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isgroupofitems"))
                                                {
                                                    <th>
                                                        @ResToolMaster.IsGroupOfItems
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("technician"))
                                                {
                                                    <th>
                                                        @ResToolMaster.Technician
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("checkoutquantity"))
                                                {
                                                    <th>
                                                        @ResToolCheckInHistory.CheckedOutQTY
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("checkinquantity"))
                                                {
                                                    <th>
                                                        @ResToolCheckInOutHistory.CheckinQuantity

                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("checkoutudf1"))
                                                {
                                                    <th>
                                                        @ResToolCheckInOutHistory.CheckOutUDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("checkoutudf2"))
                                                {
                                                    <th>
                                                        @ResToolCheckInOutHistory.CheckOutUDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("checkoutudf3"))
                                                {
                                                    <th>
                                                        @ResToolCheckInOutHistory.CheckOutUDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("checkoutudf4"))
                                                {
                                                    <th>
                                                        @ResToolCheckInOutHistory.CheckOutUDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("checkoutudf5"))
                                                {
                                                    <th>
                                                        @ResToolCheckInOutHistory.CheckOutUDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.AssetMaster.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("assetname"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResAssetMaster.AssetName
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("description"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.Description
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("make"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.Make
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("model"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.Model
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("serial"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.Serial
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("toolcategory"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.ToolCategory
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("purchasedate"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.PurchaseDate
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("purchaseprice"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.PurchasePrice
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("depreciatedvalue"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.DepreciatedValue
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.UDF1
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.UDF5
                                                    </th>
                                                }
                                                 @if (arrcolumns.Contains("udf6"))
                                                 {
                                                    <th>
                                                        @ResAssetMaster.UDF6
                                                    </th>
                                                 }
                                                @if (arrcolumns.Contains("udf7"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.UDF7
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf8"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.UDF8
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf9"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.UDF9
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf10"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.UDF10
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("assetcategory"))
                                                {
                                                    <th>
                                                        @ResAssetMaster.AssetCategory
                                                    </th>
                                                }

                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.QuickListItems.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("name"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResQuickList.Name
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("comment"))
                                                {
                                                    <th>
                                                        @ResQuickList.Comment
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResQuickList.ItemNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("quantity"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResQuickList.Quantity
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf1"))
                                                {
                                                    <th>
                                                        @ResQuickList.UDF1
                                                    </th>}
                                                @if (arrcolumns.Contains("udf2"))
                                                {
                                                    <th>
                                                        @ResQuickList.UDF2
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf3"))
                                                {
                                                    <th>
                                                        @ResQuickList.UDF3
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf4"))
                                                {
                                                    <th>
                                                        @ResQuickList.UDF4
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("udf5"))
                                                {
                                                    <th>
                                                        @ResQuickList.UDF5
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.kitdetail.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("kitpartnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResKitMaster.KitPartNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.ItemNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("quantityperkit"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResKitMaster.QuantityPerKit
                                                    </th>
                                                }
                                                 @if (arrcolumns.Contains("onhandquantity"))
                                                {
                                                    <th>
                                                        @ResItemMaster.OnHandQuantity
                                                    </th>
                                                }
                                                 @if (arrcolumns.Contains("isbuildbreak"))
                                                {
                                                    <th>
                                                        @ResKitMaster.IsBuildBreak
                                                    </th>
                                                }
                                                 @if (arrcolumns.Contains("isdeleted"))
                                                {
                                                    <th>
                                                        @ResKitMaster.IsDeleted
                                                    </th>
                                                }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.ItemManufacturerDetails.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.ItemNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("manufacturername"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResManufacturer.ManufacturerName
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("manufacturernumber"))
                                                {
                                                    <th>
                                                        @ResItemManufacturerDetails.ManufacturerNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isdefault"))
                                                {
                                                    <th>
                                                        @ResItemManufacturerDetails.IsDefault
                                                    </th>
                                                }
                                            </tr>

                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.ItemSupplierDetails.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResItemMaster.ItemNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("suppliername"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResSupplierMaster.Supplier
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("suppliernumber"))
                                                {
                                                    <th>
                                                        @ResItemSupplierDetails.SupplierNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("blanketponame"))
                                                {
                                                    <th>
                                                        @ResItemSupplierDetails.BlanketPONAME
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("isdefault"))
                                                {
                                                    <th>
                                                        @ResItemSupplierDetails.IsDefault
                                                    </th>
                                                }
                                            </tr>

                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.BarcodeMaster.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("modulename"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBarcodeMaster.ModuleName
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("itemnumber"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBarcodeMaster.ItemNumber
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("barcodestring"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBarcodeMaster.BarcodeString
                                                    </th>
                                                }
                                               @if (arrcolumns.Contains("binnumber"))
                                               {
                                                    <th>
                                                        @ResBarcodeMaster.BinNumber
                                                    </th>
                                               }
                                            </tr>
                                        }
                                        else if (Session["CurModule"].ToString() == ImportMastersDTO.TableName.UDF.ToString())
                                        {
                                            <tr>
                                                @if (arrcolumns.Count() > 0)
                                                {
                                                    <th>
                                                        @ResCommon.Status
                                                    </th>
                                                    <th>
                                                        @ResCommon.Reason
                                                    </th>
                                                }
                                                @if (arrcolumns.Contains("modulename"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        @ResBarcodeMaster.ModuleName
                                                    </th>
                                                        
                                                    
                                                }
                                                @if (arrcolumns.Contains("udfcolumnname"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        UDFColumnName
                                                    </th>


                                                }
                                                @if (arrcolumns.Contains("udfname"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        UDFName
                                                    </th>


                                                }
                                                @if (arrcolumns.Contains("controltype"))
                                                {
                                                    <th>
                                                        <em>* </em>
                                                        control type
                                                    </th>


                                                }
                                                @if (arrcolumns.Contains("defaultvalue"))
                                                {
                                                    <th>
                                                      Default Value
                                                    </th>


                                                }
                                                @if (arrcolumns.Contains("optionname"))
                                                {
                                                    <th>
                                                       Option Name
                                                    </th>


                                                }
                                                 @if (arrcolumns.Contains("isrequired"))
                                                {
                                                    <th>
                                                      Is Required
                                                    </th>


                                                }
                                                @if (arrcolumns.Contains("isdeleted"))
                                                {
                                                    <th>
                                                        Is Deleted
                                                    </th>


                                                }
                                                @if (arrcolumns.Contains("includeinnarrowsearch"))
                                                {
                                                    <th>
                                                        In narrowsearch
                                                    </th>


                                                }
                                            </tr>
                                       }
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                        }
                        <div class="editorForm" id="divbtnBlock" style="display: none; width: 98.5% !important;">
                            <ul>
                                <li>
                                    <div class="BtnBlockform" style="margin-left: 5px;">
                                        <input type="button" value="@ResImportMasters.Save" id="btnSave" name="btnSave" class="CreateBtn" style="float: left;" onclick="return CheckZIPFileName();" />
                                        <input type="button" value="@ResImportMasters.Cancel" id="btnCancel" name="btnCancel" class="CreateBtn"
                                               style="float: left;" />
                                    </div>
                                </li>
                            </ul>
                        </div>
                        <div class="dialog" id="ImportErrorDialog" style="display: none; width: 470px;">
                            <div class="inner" style="width: 470px;">
                                <p class="text" id="ImportErrorMSG" style="text-align: left; padding-left: 10px;">
                                </p>
                                <p class="text btnA" style="text-align: center; padding-left: 10px;">
                                    <a href="javascript:void(0)" class="no" onclick="javascript:return closeErrorDialog()">
                                        <img src="~/Content/images/yes.png" alt="ok" />Ok
                                    </a>
                                </p>
                            </div>
                        </div>
                        <div class="dialog" id="ImportInfoDialog" style="display: none; width: 470px;">
                            <div class="inner" style="width: 470px;">
                                <p class="text" id="ImportMSG" style="text-align: left; padding-left: 10px;">
                                </p>
                                <p class="text btnA" style="text-align: center; padding-left: 10px;">
                                    <a href="javascript:void(0)" class="no" onclick="closeFromOk()">
                                        <img src="~/Content/images/yes.png" alt="ok" />Ok
                                    </a>
                                </p>
                            </div>
                        </div>
                        <div class="dialog" id="ImportProcessing" style="display: none;">
                            <div class="inner">
                                <p class="text" id="ImportWait" style="text-align: left; padding-left: 10px;">
                                    <b style="color: Red;">
                                        The import is processing. We will notify you when it is complete....
                                    </b>
                                </p>
                                <p class="text" id="ImportWaitImg" style="text-align: center; padding-left: 10px;">
                                    <img src="@Url.Content("~/Content/images/ajax.gif")" alt="loding" />
                                </p>
                            </div>
                        </div>
                        <div id="DivGridLoading" class="DivLoadingProcessing" style="display: none;">
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<script language="javascript" type="text/javascript">

    $('#DivGridLoading').hide();
    var AllowDeletePopup = false;
    var oTable;
    function CheckValidation(checkValidate, allSuccesfulRecords) {

        var allSuccessRecords = true;
        var selectedModuleVal = $('#ddlModule option:selected').attr('value');
        var lengthofTable = $('#myImportDataTable tbody').find('tr').length;
        if (lengthofTable > 0) {
            if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster)') {

            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.LocationMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempLocation = $(this).find('#aLocation_' + id).val();
                    if (tempLocation == "") {
                        allSuccessRecords = false;
                        $(this).find('#aLocation_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolCategory)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempToolCategory = $(this).find('#aToolCategory_' + id).val();
                    if (tempToolCategory == "") {
                        allSuccessRecords = false;
                        $(this).find('#aToolCategory_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CategoryMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempCategory = $(this).find('#aCategory_' + id).val();
                    if (tempCategory == "") {
                        allSuccessRecords = false;
                        $(this).find('#aCategory_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempCustomer = $(this).find('#aCustomer_' + id).val();
                    if (tempCustomer == "") {
                        allSuccessRecords = false;
                        $(this).find('#aCustomer_' + id).addClass("importtext-box validationerror");
                    }
                    var tempAccount = $(this).find('#aAccount_' + id).val();
                    if (tempAccount == "") {
                        allSuccessRecords = false;
                        $(this).find('#aAccount_' + id).addClass("importtext-box validationerror");
                    }
                    var tempEmail = $(this).find('#aEmail_' + id).val();
                    if (tempEmail != "") {

                        var pattern = /^\b[A-Z0-9._%-]+@@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i
                        if (!pattern.test(tempEmail)) {
                            allSuccessRecords = false;
                            $(this).find('#aEmail_' + id).addClass("importtext-box validationerror");
                        }
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.FreightTypeMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempFreightType = $(this).find('#aFreightType_' + id).val();
                    if (tempFreightType == "") {
                        allSuccessRecords = false;
                        $(this).find('#aFreightType_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GLAccountsMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempGLAccount = $(this).find('#aGLAccount_' + id).val();
                    if (tempGLAccount == "") {
                        allSuccessRecords = false;
                        $(this).find('#aGLAccount_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GXPRConsignedJobMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempGXPRConsinged = $(this).find('#aGXPRConsinged_' + id).val();
                    if (tempGXPRConsinged == "") {
                        allSuccessRecords = false;
                        $(this).find('#aGXPRConsinged_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.JobTypeMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempJobType = $(this).find('#aJobType_' + id).val();
                    if (tempJobType == "") {
                        allSuccessRecords = false;
                        $(this).find('#aJobType_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ShipViaMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempShipVia = $(this).find('#aShipVia_' + id).val();
                    if (tempShipVia == "") {
                        allSuccessRecords = false;
                        $(this).find('#aShipVia_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempTechnician = $(this).find('#aTechnician_' + id).val();
                    var tempTechnicianCode = $(this).find('#aTechnicianCode_' + id).val();
                    //if (tempTechnician == "") {
                    //    allSuccessRecords = false;
                    //    $(this).find('#aTechnician_' + id).addClass("importtext-box validationerror");
                    //}
                    if (tempTechnicianCode == "") {
                        allSuccessRecords = false;
                        $(this).find('#aTechnicianCode_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ManufacturerMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempManufacturer = $(this).find('#aManufacturer_' + id).val();
                    if (tempManufacturer == "") {
                        allSuccessRecords = false;
                        $(this).find('#aManufacturer_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.MeasurementTermMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempMeasurementTerm = $(this).find('#aMeasurementTerm_' + id).val();
                    if (tempMeasurementTerm == "") {
                        allSuccessRecords = false;
                        $(this).find('#aMeasurementTerm_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempUnit = $(this).find('#aUnit_' + id).val();
                    if (tempUnit == "") {
                        allSuccessRecords = false;
                        $(this).find('#aUnit_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster)') {
                $('#myImportDataTable tbody tr').each(function () {

                    var id = $(this).attr('id');
                    var tempSupplier = $(this).find('#aSupplier_' + id).val();

                    if (tempSupplier == "") {
                        allSuccessRecords = false;
                        $(this).find('#aSupplier_' + id).addClass("importtext-box validationerror");
                    }
                    //wi-1266
                    //                var tempEmail = $(this).find('#aEmail_' + id).val();
                    //                if (tempEmail != "") {
                    //                    var pattern = /^\b[A-Z0-9._%-]+@@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i
                    //                    if (!pattern.test(tempEmail)) {
                    //                        allSuccessRecords = false;
                    //                        $(this).find('#aEmail_' + id).addClass("importtext-box validationerror");
                    //                    }
                    //                }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempItemNumber = $(this).find('#aItemNumber_' + id).val();
                    var tempUnit = $(this).find("#aUnit_" + id).val();
                    if (tempItemNumber == "") {
                        allSuccessRecords = false;
                        $(this).find('#aItemNumber_' + id).addClass("importtext-box validationerror");
                    }
                    if (tempUnit == "") {
                        allSuccessRecords = false;
                        $(this).find('#aUnit_' + id).addClass("importtext-box validationerror");
                    }
                });
            }
            else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BarcodeMaster)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempItemNumber = $(this).find('#aItemNumber_' + id).val();
                    //var tempUnit = $(this).find("#aUnit_" + id).val();
                    if (tempItemNumber == "") {
                        allSuccessRecords = false;
                        $(this).find('#aItemNumber_' + id).addClass("importtext-box validationerror");
                    }

                });
            }
            @*else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemManufacturer)') {
                $('#myImportDataTable tbody tr').each(function () {
                    var id = $(this).attr('id');
                    var tempItemNumber = $(this).find('#aItemNumber_' + id).val();
                    var tempManufactureName = $(this).find("#aManufacturerName_" + id).val();
                    var tempManufactureNumber = $(this).find("#aManufacturerNumber_" + id).val();
                    var tempIsDefault = $(this).find("#aIsDefault_" + id).is(":checked");
                    if (tempItemNumber == "") {
                        allSuccessRecords = false;
                        $(this).find('#aItemNumber_' + id).addClass("importtext-box validationerror");
                    }
                    if (tempManufactureName == "") {
                        allSuccessRecords = false;
                        $(this).find('#aManufacturerName_' + id).addClass("importtext-box validationerror");
                    }
                });
            }*@
        }

        if (checkValidate == true && allSuccessRecords == true && allSuccesfulRecords == true) {
            $(function () {
                $.post('/Import/ResetSession',
                       { key: "CurModulevalue", value: '@ImportMastersDTO.TableName.AssetMaster' }, function (data) {

                           $('#myImportDataTable').html('');

                           $("select#ddlModule")[0].selectedIndex = 0;
                           $("select#ddlModule").attr('selected', true);

                       });
            });
        }


    }
    function checkBlankValidation(ctrlName) {
        if (ctrlName.value == "") {
            $(ctrlName).addClass("validationerror");
            $(ctrlName).css('border-color', 'red')
        }
        else {
            $(ctrlName).removeClass("validationerror");
            $(ctrlName).css('border-color', '#DDD');
        }


    }
    function CheckLotSerial(Curobj) {
        if ($(Curobj).prop("checked") == true) {
            if ($(Curobj).prop("id").indexOf("SerialNumberTracking") > 0) {
                $(Curobj).parent().parent().find("input[type='checkbox'][id*='LotNumberTracking']").prop("checked", false);
            }
            else if ($(Curobj).prop("id").indexOf("LotNumberTracking") > 0) {
                $(Curobj).parent().parent().find("input[type='checkbox'][id*='SerialNumberTracking']").prop("checked", false);
            }
        }
    }
    function CheckEmailValidataion(ctrlName) {
        if (ctrlName.value != "") {
            var pattern = /^\b[A-Z0-9._%-]+@@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i
            if (!pattern.test(ctrlName.value))
                $(ctrlName).addClass("validationerror");
            else
                $(ctrlName).removeClass("validationerror");
        }
    }
    function isNumberKey(evt) {


        var keyCode = [evt.keyCode || evt.which];

        if (keyCode == 8 || keyCode == 13 || keyCode == 9)
            return true;
        if (keyCode > 57 || keyCode < 48)
            return false;
        else
            return true;
    }
    function CheckFileName() {
        var fileName = document.getElementById("uploadFile").value;
        if (fileName == "") {
            alert('@ResImportMasters.ImportBrowseFileMsg');
            return false;
        }
        var strfilename = fileName.split(".");
        if (strfilename[strfilename.length - 1].toUpperCase() == "CSV" || strfilename[strfilename.length - 1].toUpperCase() == "XLS")
            return true;
        else {
            alert("File with " + fileName + " isinvalid. Upload a validfile with csv extensions");
            return false;
        }
        return true;
    }
    function CheckZIPFileName() {
        if ($.trim($('#ddlModule option:selected').text()) == 'Items') {
            var fileName = document.getElementById("uploadZIPFile").value;
            if (fileName == "") {
                return true;
            }
            var strfilename = fileName.split(".");
            if (strfilename[strfilename.length - 1].toUpperCase() == "ZIP")
                return true;
            else {
                alert("File with " + fileName + " isinvalid. Upload a validfile with zip extensions");
                document.getElementById("uploadZIPFile").value = '';
                return false;
            }
        }
        return true;
    }

    $('#btnAllRecordDownload').click(function () {
        var selectedModuleVal = $('#ddlModule option:selected').attr('value');
        var ModuleName = 'AssetMaster';

        if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster)') {
            ModuleName = 'ItemLocationQtyCSV';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.eVMISetup)') {
            ModuleName = 'ItemLocationCSV';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.LocationMaster)') {
            ModuleName = 'LocationMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolCategory)') {
            ModuleName = 'ToolCategoryList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CategoryMaster)') {
            ModuleName = 'CategoryMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster)') {
            ModuleName = 'CustomerMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.FreightTypeMaster)') {
            ModuleName = 'FreightTypeMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GLAccountsMaster)') {
            ModuleName = 'GLAccountMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GXPRConsignedJobMaster)') {
            ModuleName = '';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.JobTypeMaster)') {
            ModuleName = 'CategoryMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ShipViaMaster)') {
            ModuleName = 'ShipViaMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster)') {
            ModuleName = 'TechnicianList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ManufacturerMaster)') {
            ModuleName = 'ManufacturerMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.MeasurementTermMaster)') {
            ModuleName = 'MeasurementTermList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster)') {
            ModuleName = 'UnitMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster)') {
            ModuleName = 'SupplierMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster)') {
            ModuleName = 'ItemMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BOMItemMaster)') {
            ModuleName = 'BOMItemMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CostUOMMaster)') {
            ModuleName = 'CostUOMMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster)') {
            ModuleName = 'InventoryClassificationMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster)') {
            ModuleName = 'ToolList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Assets)') {
            ModuleName = 'AssetMasterList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission)') {
            ModuleName = 'QuickList';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Kits)') {
            ModuleName = 'KitsCSV';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemManufacturer)') {
            ModuleName = 'ItemManufacturerCSV';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemSupplier)') {
            ModuleName = 'ItemSupplierCSV';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BarcodeMaster)') {
            ModuleName = 'BarcodeMasterCSV';
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UDF)') {
            ModuleName = 'UDFMasterCSV';
        }

        ExportAllData(ModuleName, 'CSV');
    });
    $('#btnDownload').click(function () {
        var arrItems = new Array();
        var randomNumber = (new Date()).valueOf();
        var selectedModuleVal = $('#ddlModule option:selected').attr('value');

        if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster)') {
            window.open('@PathToCSv' + "ItemLocationQuantity.csv?q=et&_" + randomNumber);
        }
        if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.eVMISetup)') {
            window.open('@PathToCSv' + "InventoryLocation.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.LocationMaster)') {
            window.open('@PathToCSv' + "Location.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolCategory)') {
            window.open('@PathToCSv' + "ToolCategory.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CategoryMaster)') {
            window.open('@PathToCSv' + "Category.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster)') {
            window.open('@PathToCSv' + "Customer.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.FreightTypeMaster)') {
            window.open('@PathToCSv' + "FreightType.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GLAccountsMaster)') {
            window.open('@PathToCSv' + "GLAccount.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GXPRConsignedJobMaster)') {
            window.open('@PathToCSv' + "GXPR Consigned Job.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.JobTypeMaster)') {
            window.open('@PathToCSv' + "Job Type.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ShipViaMaster)') {
            window.open('@PathToCSv' + "Ship Via.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster)') {
            window.open('@PathToCSv' + "Technicians.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ManufacturerMaster)') {
            window.open('@PathToCSv' + "Manufacturer.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.MeasurementTermMaster)') {
            window.open('@PathToCSv' + "Measurement Term.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster)') {
            window.open('@PathToCSv' + "Units.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster)') {
            window.open('@PathToCSv' + "Supplier.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster)') {
            window.open('@PathToCSv' + "Item.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BOMItemMaster)') {
            window.open('@PathToCSv' + "BOMItem.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CostUOMMaster)') {
            window.open('@PathToCSv' + "CostUOM.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster)') {
            window.open('@PathToCSv' + "InventoryClassification.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster)') {
            window.open('@PathToCSv' + "Tools.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Assets)') {
            window.open('@PathToCSv' + "Assets.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission)') {
            window.open('@PathToCSv' + "QuickList.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Kits)') {
            window.open('@PathToCSv' + "Kits.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemManufacturer)') {
            window.open('@PathToCSv' + "ItemManufacturer.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemSupplier)') {
            window.open('@PathToCSv' + "ItemSupplier.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BarcodeMaster)') {
            window.open('@PathToCSv' + "BarcodeMaster.csv?q=et&_" + randomNumber);
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UDF)') {
            window.open('@PathToCSv' + "UDFMaster.csv?q=et&_" + randomNumber);
        }


    });
    function ValidateCriticalMinMax() {
        var checkval = false;
        $('#myImportDataTable tbody tr').each(function () {
            var strmsg = '';
            var tempItemID = $(this).find('#ItemID').text();
            var CriticalQuantity = $(this).find('#aCriticalQuantity_' + tempItemID).val();
            var MinimumQuantity = $(this).find('#aMinimumQuantity_' + tempItemID).val();
            var MaximumQuantity = $(this).find('#aMaximumQuantity_' + tempItemID).val();
            if (CriticalQuantity == null || CriticalQuantity == '') {
                CriticalQuantity = 0;
            }
            if (MinimumQuantity == null || MinimumQuantity == '') {
                MinimumQuantity = 0;
            }
            if (MaximumQuantity == null || MaximumQuantity == '') {
                MaximumQuantity = 0;
            }
            if ((parseFloat(CriticalQuantity) <= parseFloat(MinimumQuantity))) {
                $(this).find('#aCriticalQuantity_' + tempItemID).css('border-color', '#DDD');
                $(this).find('#aMinimumQuantity_' + tempItemID).css('border-color', '#DDD');

            }
            else {
                $(this).find('#aCriticalQuantity_' + tempItemID).css('border-color', 'red');
                $(this).find('#aMinimumQuantity_' + tempItemID).css('border-color', 'red');

                checkval = true;

                strmsg = '@ResItemMaster.MinimumQuantity' + ' ' + '@ResImportMasters.mustbegreaterthanorequalto' + ' ' + '@ResItemMaster.CriticalQuantity';
            }
            if ((parseFloat(MinimumQuantity) <= parseFloat(MaximumQuantity))) {

                $(this).find('#aMinimumQuantity_' + tempItemID).css('border-color', '#DDD');
                $(this).find('#aMaximumQuantity_' + tempItemID).css('border-color', '#DDD');
            }
            else {

                $(this).find('#aMinimumQuantity_' + tempItemID).css('border-color', 'red');
                $(this).find('#aMaximumQuantity_' + tempItemID).css('border-color', 'red');
                checkval = true;
                if (strmsg == '') {
                    strmsg = '@ResItemMaster.MaximumQuantity' + ' ' + '@ResImportMasters.mustbegreaterthanorequalto' + ' ' + '@ResItemMaster.MinimumQuantity';
                }
                else {
                    strmsg = strmsg + ' ' + '@ResItemMaster.MaximumQuantity' + ' ' + '@ResImportMasters.mustbegreaterthanorequalto' + ' ' + '@ResItemMaster.MinimumQuantity';
                }

            }

            if (strmsg != '') {

                $(this).find('#Reason').html(strmsg);
                $(this).find('#Status').html('Fail');
                $(this).find('#Status').css('color', 'red');
                $(this).find('#Reason').css('color', 'red');
                $(this).css("background-color", "pink");
            }
            else {
                if ($(this).find('#Status').html() != 'Success') {
                    $(this).find('#Reason').html('N/A');
                    $(this).find('#Status').html('N/A');
                    $(this).find('#Status').css('color', '#000000');
                    $(this).find('#Reason').css('color', '#000000');
                }
                if ($(this).attr("class") == 'even') {
                    $(this).css("background-color", "#FFF");
                }
                else {
                    $(this).css("background-color", "#EFF7FF");
                }
            }
        });

        // FillRowColor()

        if (checkval == true) {
            return false;

        }
        else {
            return true;
        }
    }
    function isUniqueSerial() {
        // Collect all values in an array
        var values = [];
        $('#myImportDataTable tbody tr td input[id^="aSerial_"]').each(function (idx, val) { values.push($(val).val()); });

        // Sort it
        values.sort();

        // Check whether there are two equal values next to each other
        for (var k = 1; k < values.length; ++k) {
            if (values[k] == values[k - 1]) {
                var serialNumber = '';
                var existing = [];
                var duplicates = $('#myImportDataTable tbody tr').each(function () {
                    var value = $(this).find('input[id^="aSerial_"]').val();

                    if (existing.indexOf(value) >= 0) {
                        $(this).closest('tr').css('background-color', 'pink');
                        $(this).find('input[id^="aSerial_"]').css('border-color', 'red');
                        $(this).find('#Reason').html('Please enter unique serial value');
                        $(this).find('#Status').html('Fail');
                    }
                    else {
                        $(this).find('input[id^="aSerial_"]').css('border-color', '#DDD');
                        if ($(this).attr("class") == 'even') {
                            $(this).css("background-color", "#FFF");
                        }
                        else {
                            $(this).css("background-color", "#EFF7FF");
                        }
                    }
                    existing.push(value);
                });

                return false;
            }
        }
        return true;
    }
    function isUniqueSupplierPartNumber() {
        // Collect all values in an array
        var values = [];
        $('#myImportDataTable tbody tr td input[id^="aSupplierNumber_"]').each(function (idx, val) { values.push($(val).val()); });

        // Sort it
        values.sort();

        // Check whether there are two equal values next to each other
        for (var k = 1; k < values.length; ++k) {
            if (values[k] == values[k - 1]) {
                var serialNumber = '';
                var existing = [];
                var duplicates = $('#myImportDataTable tbody tr').each(function () {
                    var value = $(this).find('input[id^="aSupplierNumber_"]').val();

                    if (existing.indexOf(value) >= 0) {
                        $(this).closest('tr').css('background-color', 'pink');
                        $(this).find('input[id^="aSupplierNumber_"]').css('border-color', 'red');
                        $(this).find('#Reason').html('Please enter unique Supplier Number');
                        $(this).find('#Status').html('Fail');
                    }
                    else {
                        $(this).find('input[id^="aSupplierNumber_"]').css('border-color', '#DDD');
                        if ($(this).attr("class") == 'even') {
                            $(this).css("background-color", "#FFF");
                        }
                        else {
                            $(this).css("background-color", "#EFF7FF");
                        }
                    }
                    existing.push(value);
                });

                return false;
            }
        }
        return true;
    }
    function checkModuleName() {
        // Collect all values in an array
        var values = [];
        var checkval = false;
        var strmsg = '';
        $('#myImportDataTable tbody tr').each(function () {
            strmsg = '';
            var tempBarcodeID = $(this).find("#BarcodeID").text()
            var tempaModule = $(this).find('#aModuleName_' + tempBarcodeID).val();

            if ($.trim(tempaModule).toLowerCase() == "assets" || $.trim(tempaModule).toLowerCase() == "item master") {

                strmsg = '';
                if ($(this).attr("class") == 'even') {
                    $(this).css("background-color", "#FFF");
                }
                else {
                    $(this).css("background-color", "#EFF7FF");
                }
                $(this).find('#Status').css('color', '#000000');
                $(this).find('#Reason').css('color', '#000000');
            }
            else {
                checkval = true;
                strmsg = 'ModuleName should be Assets or Item Master';
                $(this).find('#Status').html('Fail');
                $(this).find('#Status').css('color', 'red');
                $(this).find('#Reason').css('color', 'red');

            }

            if (strmsg != '') {
                $(this).find('#Reason').html(strmsg);
                $(this).find('#Status').html('Fail');
                $(this).find('#Status').css('color', 'red');
                $(this).find('#Reason').css('color', 'red');
                $(this).css("background-color", "pink");
            }
            else {
                if ($(this).attr("class") == 'even') {
                    $(this).css("background-color", "#FFF");
                }
                else {
                    $(this).css("background-color", "#EFF7FF");
                }
            }

        });
        if (checkval == true) {
            return false;

        }
        else {
            return true;
        }
    }

    function ValidateSerialNumber(toolNameBlankSerial) {
        var checkval = false;
        $('#myImportDataTable tbody tr').each(function () {
            var strmsg = '';
            var tempToolID = $(this).find('#ToolID').text();
            var tempToolName = $(this).find('#aToolName_' + tempToolID).val();

            var tempSerial = $(this).find('#aSerial_' + tempToolID).val();

            if (tempSerial == null || tempSerial == '') {
                if (toolNameBlankSerial != '') {
                    if (tempToolName != toolNameBlankSerial) {
                        $(this).find('#aSerial_' + tempToolID).css('border-color', 'red');
                        checkval = true;
                        strmsg = "ToolName " + toolNameBlankSerial + " is already contains blank serial. Please insert serial.";
                    }
                    else {
                        strmsg = '';
                        if ($(this).attr("class") == 'even') {
                            $(this).css("background-color", "#FFF");
                        }
                        else {
                            $(this).css("background-color", "#EFF7FF");
                        }
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
                else {
                    toolNameBlankSerial = tempToolName;
                }
            }


            if (strmsg != '') {
                $(this).find('#Reason').html(strmsg);
                $(this).find('#Status').html('Fail');
                $(this).find('#Status').css('color', 'red');
                $(this).find('#Reason').css('color', 'red');
                $(this).css("background-color", "pink");
            }
            else {
                if ($(this).attr("class") == 'even') {
                    $(this).css("background-color", "#FFF");
                }
                else {
                    $(this).css("background-color", "#EFF7FF");
                }
            }
        });

        // FillRowColor()

        if (checkval == true) {
            return false;

        }
        else {
            return true;
        }
    }
    function FillRowColor() {

        $('#myImportDataTable tbody tr').each(function () {

            var tempStatus = $(this).find('#Status').text();

            if (tempStatus == "Fail") {

                $(this).css("background-color", "pink");

            }
            else {

                if ($(this).attr("class") == 'even') {
                    $(this).css("background-color", "#FFF");
                }
                else {
                    $(this).css("background-color", "#EFF7FF");
                }

            }


        });
    }
    function ValidateImageName() {
        var checkval = false;
        $('#myImportDataTable tbody tr').each(function () {
            var strmsg = '';
            var tempItemID = $(this).find('#ItemID').text();

            var imagefilename = $(this).find('#aImagePath_' + tempItemID).val();

            if (imagefilename.toString().indexOf("&") >= 0 || imagefilename.toString().indexOf("<") >= 0 || imagefilename.toString().indexOf(">") >= 0
                    || imagefilename.toString().indexOf("*") >= 0 || imagefilename.toString().indexOf(":") >= 0
                    || imagefilename.toString().indexOf("?") >= 0) {
                $(this).find('#aImagePath_' + tempItemID).css('border-color', '#DDD');
                if (strmsg == '') {
                    strmsg = '@ResItemMaster.ImagePathProper';
                }
                else {
                    strmsg = strmsg + ' ' + '@ResItemMaster.ImagePathProper';
                }
                checkval = true;
            }
            if (strmsg != '') {

                $(this).find('#Reason').html(strmsg);
                $(this).find('#Status').html('Fail');
                $(this).find('#Status').css('color', 'red');
                $(this).find('#Reason').css('color', 'red');
                $(this).css("background-color", "pink");
            }
            else {
                if ($(this).find('#Status').html() != 'Success') {
                    $(this).find('#Reason').html('N/A');
                    $(this).find('#Status').html('N/A');
                    $(this).find('#Status').css('color', '#000000');
                    $(this).find('#Reason').css('color', '#000000');
                }
                if ($(this).attr("class") == 'even') {
                    $(this).css("background-color", "#FFF");
                }
                else {
                    $(this).css("background-color", "#EFF7FF");
                }
            }
        });
        if (checkval == true) {
            return false;

        }
        else {
            return true;
        }
    }
    function ValidateValueWithDataType() {

        var checkval = false;
        if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempInvID = $(this).find('#InvID').text();

                if ('@arrcolumns.Contains("inventoryclassification")' == 'True') {
                    var tempInvName = $(this).find('#aInv_' + tempInvID).val();

                    if (tempInvName == null || tempInvName == '') {
                        $(this).find('#aInv_' + tempInvID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResInventoryClassificationMaster.InventoryClassification';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResInventoryClassificationMaster.InventoryClassification';
                        }
                    }
                    else {
                        $(this).find('#aInv_' + tempInvID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("baseofinventory")' == 'True') {
                    var tempBase = $(this).find('#aBase_' + tempInvID).val();

                    if (tempBase == null || tempBase == '') {
                        $(this).find('#aBase_' + tempInvID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResInventoryClassificationMaster.BaseOfInventory';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResInventoryClassificationMaster.BaseOfInventory';
                        }
                    }
                    else {
                        $(this).find('#aBase_' + tempInvID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("rangestart")' == 'True') {
                    var tempStart = $(this).find('#aStart_' + tempInvID).val();

                    if (tempStart == null || tempStart == '') {
                        $(this).find('#aStart_' + tempInvID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResInventoryClassificationMaster.RangeStart';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResInventoryClassificationMaster.RangeStart';
                        }
                    }
                    else {
                        if (!CheckDoubleValue(tempStart)) {
                            $(this).find('#aStart_' + tempInvID).css('border-color', 'red');
                            checkval = true;
                        }
                        else {
                            $(this).find('#aStart_' + tempInvID).css('border-color', '#DDD');
                        }
                    }
                }
                if ('@arrcolumns.Contains("rangeend")' == 'True') {
                    var tempEnd = $(this).find('#aEnd_' + tempInvID).val();

                    if (tempEnd == null || tempEnd == '') {
                        $(this).find('#aEnd_' + tempInvID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResInventoryClassificationMaster.RangeEnd';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResInventoryClassificationMaster.RangeEnd';
                        }
                    }
                    else {
                        if (!CheckDoubleValue(tempEnd)) {
                            $(this).find('#aEnd_' + tempInvID).css('border-color', 'red');
                            checkval = true;
                        }
                        else {
                            $(this).find('#aEnd_' + tempInvID).css('border-color', '#DDD');
                        }
                    }
                }

                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }

            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CategoryMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempCatID = $(this).find('#CatID').text();
                if ('@arrcolumns.Contains("category")' == 'True') {
                    var tempCategoryName = $(this).find('#aCategory_' + tempCatID).val();

                    if (tempCategoryName == null || tempCategoryName == '') {
                        $(this).find('#aCategory_' + tempCatID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResCategoryMaster.Category';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResCategoryMaster.Category';
                        }
                    }
                    else {
                        $(this).find('#aCategory_' + tempCatID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempCustID = $(this).find('#CustID').text();
                if ('@arrcolumns.Contains("customer")' == 'True') {
                    var tempCustomerName = $(this).find('#aCustomer_' + tempCustID).val();

                    if (tempCustomerName == null || tempCustomerName == '') {
                        $(this).find('#aCustomer_' + tempCustID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResCustomer.Customer';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResCustomer.Customer';
                        }
                    }
                    else {
                        $(this).find('#aCustomer_' + tempCustID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("account")' == 'True') {
                    var tempAccount = $(this).find('#aAccount_' + tempCustID).val();

                    if (tempAccount == null || tempAccount == '') {
                        $(this).find('#aAccount_' + tempCustID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResCustomer.Account';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResCustomer.Account';
                        }
                    }
                    else {
                        $(this).find('#aAccount_' + tempCustID).css('border-color', '#DDD');
                    }
                }

                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CostUOMMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempCostID = $(this).find('#CostID').text();
                if ('@arrcolumns.Contains("costuom")' == 'True') {
                    var tempCost = $(this).find('#aCost_' + tempCostID).val();

                    if (tempCost == null || tempCost == '') {
                        $(this).find('#aCost_' + tempCostID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResCostUOMMaster.CostUOM';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResCostUOMMaster.CostUOM';
                        }
                    }
                    else {
                        $(this).find('#aCost_' + tempCostID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("costuomvalue")' == 'True') {
                    var tempCostvalue = $(this).find('#aCostvalue_' + tempCostID).val();

                    if (tempCostvalue == null || tempCostvalue == '') {
                        $(this).find('#aCostvalue_' + tempCostID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResCostUOMMaster.CostUOMValue';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResCostUOMMaster.CostUOMValue';
                        }
                    }
                    else {
                        if (!CheckIntegerValue(tempCostvalue)) {
                            $(this).find('#aCostvalue_' + tempCostID).css('border-color', 'red');
                            checkval = true;
                        }
                        else {
                            $(this).find('#aCostvalue_' + tempCostID).css('border-color', '#DDD');
                        }
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.FreightTypeMaster)') {

            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempFreightID = $(this).find('#FreightID').text();
                if ('@arrcolumns.Contains("freighttype")' == 'True') {
                    var tempFreightType = $(this).find('#aFreightType_' + tempFreightID).val();

                    if (tempFreightType == null || tempFreightType == '') {
                        $(this).find('#aFreightType__' + tempFreightID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResFreightType.FreightType';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResFreightType.FreightType';
                        }
                    }
                    else {
                        $(this).find('#aFreightType__' + tempFreightID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GLAccountsMaster)') {
            //checkval = trueaCategory;
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempGLAccountID = $(this).find('#GLAccountID').text();
                if ('@arrcolumns.Contains("glaccount")' == 'True') {
                    var tempGLAccount = $(this).find('#aGLAccount_' + tempGLAccountID).val();

                    if (tempGLAccount == null || tempGLAccount == '') {
                        $(this).find('#aGLAccount_' + tempGLAccountID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResGLAccount.GLAccount';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResGLAccount.GLAccount';
                        }
                    }
                    else {
                        $(this).find('#aGLAccount_' + tempGLAccountID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster)') {
            //checkval = trueaCategory;
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempInvLocId = $(this).find('#InvLocId').text();
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    var tempItemNumber = $(this).find('#aItemNumber_' + tempInvLocId).val();

                    if (tempItemNumber == null || tempItemNumber == '') {
                        $(this).find('#aItemNumber_' + tempInvLocId).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@eTurns.DTO.ResItemMaster.ItemNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@eTurns.DTO.ResItemMaster.ItemNumber';
                        }
                    }
                    else {
                        $(this).find('#aItemNumber_' + tempInvLocId).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("locationname")' == 'True') {
                    var tempLocationName = $(this).find('#aLocationName_' + tempInvLocId).val();

                    if (tempLocationName == null || tempLocationName == '') {
                        $(this).find('#aLocationName_' + tempInvLocId).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@eTurns.DTO.ResBin.BinNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@eTurns.DTO.ResBin.BinNumber';
                        }
                    }
                    else {
                        $(this).find('#aLocationName_' + tempInvLocId).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("cost")' == 'True') {
                    var tempCost = $(this).find('#acost_' + tempInvLocId).val();

                    if (tempCost == null || tempCost == '') {
                        $(this).find('#acost_' + tempInvLocId).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@eTurns.DTO.ResItemLocationDetails.Cost';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@eTurns.DTO.ResItemLocationDetails.Cost';
                        }
                    }
                    else {
                        $(this).find('#acost_' + tempInvLocId).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("customerownedquantity")' == 'True') {
                    var tempCustomerOwnedQTY = $(this).find('#acustomerownedquantity_' + tempInvLocId).val();

                    if (tempCustomerOwnedQTY == null || tempCustomerOwnedQTY == '') {
                        $(this).find('#acustomerownedquantity_' + tempInvLocId).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@eTurns.DTO.ResBin.CustomerOwnedQuantity';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@eTurns.DTO.ResBin.CustomerOwnedQuantity';
                        }
                    }
                    else {
                        $(this).find('#acustomerownedquantity_' + tempInvLocId).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("consignedquantity")' == 'True') {
                    var tempConsignedQTY = $(this).find('#aconsignedquantity_' + tempInvLocId).val();

                    if (tempConsignedQTY == null || tempConsignedQTY == '') {
                        $(this).find('#aconsignedquantity_' + tempInvLocId).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@eTurns.DTO.ResBin.ConsignedQuantity';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@eTurns.DTO.ResBin.ConsignedQuantity';
                        }
                    }
                    else {
                        $(this).find('#aconsignedquantity_' + tempInvLocId).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("receiveddate")' == 'True') {
                    var tempCustomerOwnedQTY = $(this).find('#acustomerownedquantity_' + tempInvLocId).val();
                    if (tempCustomerOwnedQTY == null || tempCustomerOwnedQTY == '') {
                        tempCustomerOwnedQTY = 0;
                    }
                    var tempConsignedQTY = $(this).find('#aconsignedquantity_' + tempInvLocId).val();
                    if (tempConsignedQTY == null || tempConsignedQTY == '') {
                        tempConsignedQTY = 0;
                    }
                    var tempReceived = $(this).find('#aReceived_' + tempInvLocId).val();

                    if (tempReceived != null && tempReceived != '') {
                        var datemsg = CheckDateBYCompanyConfig(tempReceived);
                        if (datemsg.indexOf("invalid") > -1) {
                            var mstarr = datemsg.split("-");
                            $(this).find('#aReceived_' + tempInvLocId).css('border-color', 'red');
                            checkval = true;
                            if (strmsg == '') {
                                strmsg = mstarr[0] + ' please provide ' + mstarr[1];
                            }
                            else {
                                strmsg = strmsg + ', ' + mstarr[0] + ' please provide ' + mstarr[1];
                            }

                        }
                        else {
                            $(this).find('#aReceived_' + tempInvLocId).css('border-color', '#DDD');
                        }
                    }
                    if (tempReceived == null || tempReceived == '') {
                        // && tempCustomerOwnedQTY > 0
                        if ((tempConsignedQTY + tempCustomerOwnedQTY) > 0) {
                            $(this).find('#aReceived_' + tempInvLocId).css('border-color', 'red');
                            checkval = true;
                            if (strmsg == '') {
                                strmsg = '@eTurns.DTO.ResItemLocationDetails.ReceivedDate';
                            }
                            else {
                                strmsg = strmsg + ', ' + '@eTurns.DTO.ResItemLocationDetails.ReceivedDate';
                            }
                        }
                        else {
                            $(this).find('#aReceived_' + tempInvLocId).css('border-color', '#DDD');
                        }
                    }
                    else {
                        $(this).find('#aReceived_' + tempInvLocId).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    if (strmsg.indexOf('invalid please provide') > -1) {
                        strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    }

                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.eVMISetup)') {
            //checkval = trueaCategory;
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempInvLocId = $(this).find('#InvLocId').text();
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    var tempItemNumber = $(this).find('#aItemNumber_' + tempInvLocId).val();

                    if (tempItemNumber == null || tempItemNumber == '') {
                        $(this).find('#aItemNumber_' + tempInvLocId).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@eTurns.DTO.ResItemMaster.ItemNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@eTurns.DTO.ResItemMaster.ItemNumber';
                        }
                    }
                    else {
                        $(this).find('#aItemNumber_' + tempInvLocId).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("locationname")' == 'True') {
                    var tempLocationName = $(this).find('#aLocationName_' + tempInvLocId).val();

                    if (tempLocationName == null || tempLocationName == '') {
                        $(this).find('#aLocationName_' + tempInvLocId).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@eTurns.DTO.ResBin.BinNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@eTurns.DTO.ResBin.BinNumber';
                        }
                    }
                    else {
                        $(this).find('#aLocationName_' + tempInvLocId).css('border-color', '#DDD');
                    }
                }

                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';

                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ManufacturerMaster)') {
            //checkval = trueaCategory;
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempManufacturerID = $(this).find('#ManufacturerID').text();
                if ('@arrcolumns.Contains("manufacturer")' == 'True') {
                    var tempManufacturer = $(this).find('#aManufacturer_' + tempManufacturerID).val();

                    if (tempManufacturer == null || tempManufacturer == '') {
                        $(this).find('#aManufacturer_' + tempManufacturerID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResManufacturer.ManufacturerName';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResManufacturer.ManufacturerName';
                        }
                    }
                    else {
                        $(this).find('#aManufacturer_' + tempManufacturerID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.MeasurementTermMaster)') {
            //checkval = trueaCategory;
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempMeasurementTermID = $(this).find('#MeasurementTermID').text();
                if ('@arrcolumns.Contains("measurementterm")' == 'True') {
                    var tempMeasurementTerm = $(this).find('#aMeasurementTerm_' + tempMeasurementTermID).val();

                    if (tempMeasurementTerm == null || tempMeasurementTerm == '') {
                        $(this).find('#aMeasurementTerm_' + tempMeasurementTermID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResMeasurementTerm.MeasurementTerm';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResMeasurementTerm.MeasurementTerm';
                        }
                    }
                    else {
                        $(this).find('#aMeasurementTerm_' + tempMeasurementTermID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ShipViaMaster)') {
            //checkval = trueaCategory;
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempShipViaID = $(this).find('#ShipViaID').text();
                if ('@arrcolumns.Contains("shipvia")' == 'True') {
                    var tempShipVia = $(this).find('#aShipVia_' + tempShipViaID).val();

                    if (tempShipVia == null || tempShipVia == '') {
                        $(this).find('#aShipVia_' + tempShipViaID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResShipVia.ShipVia';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResShipVia.ShipVia';
                        }
                    }
                    else {
                        $(this).find('#aShipVia_' + tempShipViaID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempSupplierID = $(this).find('#SupplierID').text();
                if ('@arrcolumns.Contains("suppliername")' == 'True') {
                    var tempSupplierName = $(this).find('#aSupplier_' + tempSupplierID).val();

                    if (tempSupplierName == null || tempSupplierName == '') {
                        $(this).find('#aSupplier_' + tempSupplierID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResSupplierMaster.Supplier';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResSupplierMaster.Supplier';
                        }
                    }
                    else {
                        $(this).find('#aSupplier_' + tempSupplierID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("email")' == 'True') {
                    var tempSupplierEmail = $(this).find('#aEmail_' + tempSupplierID).val();

                    if (tempSupplierEmail == null || tempSupplierEmail == '') {
                        $(this).find('#aEmail_' + tempSupplierID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResCommon.Email';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResCommon.Email';
                        }
                    }
                    else {

                        var pattern = /^\b[A-Z0-9._%-]+@@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i
                        if (!pattern.test(tempSupplierEmail)) {
                            $(this).find('#aEmail_' + tempSupplierID).css('border-color', 'red');
                            checkval = true;
                            if (strmsg == '') {
                                strmsg = '@ResImportMasters.ImportEmailMsg';
                            }
                            else {
                                strmsg = strmsg + ', ' + '@ResImportMasters.ImportEmailMsg';
                            }
                        }
                        else {
                            $(this).find('#aEmail_' + tempSupplierID).css('border-color', '#DDD');
                        }
                    }
                }

                if ('@arrcolumns.Contains("maximumordersize")' == 'True') {
                    var tempMaximumOrderSize = $(this).find('#aMaximumOrderSize_' + tempSupplierID).val();
                    if (!isNaN(parseInt(tempMaximumOrderSize))) {
                        if (parseInt(tempMaximumOrderSize) <= 0) {
                            //if (tempMaximumOrderSize == 0 || tempMaximumOrderSize == '0') {
                            $(this).find('#aMaximumOrderSize_' + tempSupplierID).css('border-color', 'red');
                            checkval = true;
                            if (strmsg == '') {
                                strmsg = '@ResMessage.InvalidValue';
                            }
                            else {
                                strmsg = strmsg + ', ' + '@ResMessage.InvalidValue';
                            }
                        }
                    }

                    //                    if ('@arrcolumns.Contains("maximumordersize")' == 'True')
                    //                    {
                    //                        var tempMaximumOrderSize = $(this).find('#aMaximumOrderSize_' + tempSupplierID).val();

                    //                        if (tempMaximumOrderSize == 0 || tempMaximumOrderSize == '0')
                    //                        {
                    //                            $(this).find('#aMaximumOrderSize_' + tempSupplierID).css('border-color', 'red');
                    //                            checkval = true;
                    //                            if (strmsg == '') {
                    //                                strmsg = '@ResMessage.InvalidValue';
                    //                            }
                    //                            else {
                    //                                strmsg = strmsg + ', ' + '@ResMessage.InvalidValue';
                    //                            }
                    //                        }
                    //                        else {
                    //                            $(this).find('#aMaximumOrderSize_' + tempSupplierID).css('border-color', '#DDD');
                    //                        }
                    //                    }

                    if (strmsg != '') {
                        strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                        $(this).find('#Reason').html(strmsg);
                        $(this).find('#Status').html('Fail');
                        $(this).find('#Status').css('color', 'red');
                        $(this).find('#Reason').css('color', 'red');
                    }
                    else {
                        $(this).find('#aMaximumOrderSize_' + tempSupplierID).css('border-color', '#DDD');
                    }
                }

                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempTechnicianID = $(this).find('#TechnicianID').text();
                if ('@arrcolumns.Contains("technician")' == 'True') {
                    var tempTechnician = $(this).find('#aTechnician_' + tempTechnicianID).val();
                    var tempTechnicianCode = $(this).find('#aTechnicianCode_' + tempTechnicianID).val();

                    @*if (tempTechnician == null || tempTechnician == '') {
                        $(this).find('#aTechnician_' + tempTechnicianID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResTechnician.Technician';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResTechnician.Technician';
                        }
                    }

                    else {
                        $(this).find('#aTechnician_' + tempTechnicianID).css('border-color', '#DDD');
                }*@
                    if (tempTechnicianCode == null || tempTechnicianCode == '') {
                        $(this).find('#aTechnicianCode_' + tempTechnicianID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResTechnician.TechnicianCode';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResTechnician.TechnicianCode';
                        }
                    }
                    else {
                        $(this).find('#aTechnicianCode_' + tempTechnicianID).css('border-color', '#DDD');
                    }

                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolCategory)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempToolCategoryID = $(this).find('#ToolCategoryID').text();
                if ('@arrcolumns.Contains("toolcategory")' == 'True') {
                    var tempToolCategory = $(this).find('#aToolCategory_' + tempToolCategoryID).val();

                    if (tempToolCategory == null || tempToolCategory == '') {
                        $(this).find('#aToolCategory_' + tempToolCategoryID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = ' @ResToolCategory.ToolCategory';
                        }
                        else {
                            strmsg = strmsg + ', ' + ' @ResToolCategory.ToolCategory';
                        }
                    }
                    else {
                        $(this).find('#aToolCategory_' + tempToolCategoryID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.LocationMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempLocationID = $(this).find('#LocationID').text();
                if ('@arrcolumns.Contains("location")' == 'True') {
                    var tempLocation = $(this).find('#aLocation_' + tempLocationID).val();

                    if (tempLocation == null || tempLocation == '') {
                        $(this).find('#aLocation_' + tempLocationID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResLocation.Location';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResLocation.Location';
                        }
                    }
                    else {
                        $(this).find('#aLocation_' + tempLocationID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempUnitID = $(this).find('#UnitID').text();
                if ('@arrcolumns.Contains("unit")' == 'True') {
                    var tempUnitName = $(this).find('#aUnit_' + tempUnitID).val();

                    if (tempUnitName == null || tempUnitName == '') {
                        $(this).find('#aUnit_' + tempUnitID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResUnitMaster.Unit';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResUnitMaster.Unit';
                        }
                    }
                    else {
                        $(this).find('#aUnit_' + tempUnitID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempItemID = $(this).find('#ItemID').text();
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    var tempItemNumber = $(this).find('#aItemNumber_' + tempItemID).val();

                    if (tempItemNumber == null || tempItemNumber == '') {
                        $(this).find('#aItemNumber_' + tempItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.ItemNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.ItemNumber';
                        }
                    }
                    else {
                        $(this).find('#aItemNumber_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                //Wi-1505
                //                if ('@arrcolumns.Contains("manufacturer")' == 'True' && '@arrcolumns.Contains("manufacturernumber")' == 'True') {
                //                    var tempItemManu = $(this).find('#aManufacturer_' + tempItemID).val();
                //                    var tempItemManuNumber = $(this).find('#aManufacturerNumber_' + tempItemID).val();

                //                    if ((tempItemManu == '') && (tempItemManuNumber != '')) {
                //                        //if(tempItemManu.length==0 && tempItemManuNumber.length!=0)
                //                        $(this).find('#aManufacturer_' + tempItemID).css('border-color', 'red');
                //                        checkval = true;
                //                        if (strmsg == '') {
                //                            strmsg = '@ResItemMaster.ManufacturerName';
                //                        }
                //                        else {
                //                            strmsg = strmsg + ', ' + '@ResItemMaster.ManufacturerName';
                //                        }
                //                    }
                //                    else {
                //                        $(this).find('#aManufacturer_' + tempItemID).css('border-color', '#DDD');
                //                    }

                //                    if ((tempItemManu != '') && (tempItemManuNumber == '')) {
                //                        $(this).find('#aManufacturerNumber_' + tempItemID).css('border-color', 'red');
                //                        checkval = true;
                //                        if (strmsg == '') {
                //                            //strmsg = '@ResItemMaster.ManufacturerNumber';
                //                            strmsg = '@ResItemMaster.ManufacturerNumber';
                //                        }
                //                        else {
                //                            strmsg = strmsg + ', ' + '@ResItemMaster.ManufacturerNumber';
                //                        }
                //                    }
                //                    else {
                //                        $(this).find('#aManufacturerNumber_' + tempItemID).css('border-color', '#DDD');
                //                    }
                //                }

                if ('@arrcolumns.Contains("suppliername")' == 'True') {
                    var tempSupplierName = $(this).find('#aSupplierName_' + tempItemID).val();
                    var tempItemType = $(this).find('#aItemType_' + tempItemID).val();

                    if ((tempSupplierName == null || tempSupplierName == '') && (tempItemType == null || tempItemType != 'Labor')) {
                        $(this).find('#aSupplierName_' + tempItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.Supplier';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.Supplier';
                        }
                    }
                    else {
                        $(this).find('#aSupplierName_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("supplierpartno")' == 'True') {
                    var tempSupplierName = $(this).find('#aSupplierPartNo_' + tempItemID).val();
                    var tempItemType = $(this).find('#aItemType_' + tempItemID).val();

                    if ((tempSupplierName == null || tempSupplierName == '') && (tempItemType == null || tempItemType != 'Labor')) {
                        $(this).find('#aSupplierPartNo_' + tempItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.SupplierPartNo';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.SupplierPartNo';
                        }
                    }
                    else {
                        $(this).find('#aSupplierPartNo_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("uom")' == 'True') {
                    var tempItemUOM = $(this).find('#aUOM_' + tempItemID).val();

                    if (tempItemUOM == null || tempItemUOM == '') {
                        $(this).find('#aUOM_' + tempItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResUnitMaster.Unit';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResUnitMaster.Unit';
                        }
                    }
                    else {
                        $(this).find('#aUOM_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("costuom")' == 'True') {
                    var tempItemCostUOM = $(this).find('#aCostUOM_' + tempItemID).val();

                    if (tempItemCostUOM == null || tempItemCostUOM == '') {
                        $(this).find('#aCostUOM_' + tempItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResUnitMaster.Unit';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResUnitMaster.Unit';
                        }
                    }
                    else {
                        $(this).find('#aCostUOM_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("defaultreorderquantity")' == 'True') {
                    var tempDefaultReorderQuantity = $(this).find('#aDefaultReorderQuantity_' + tempItemID).val();

                    if (tempDefaultReorderQuantity == null || tempDefaultReorderQuantity == '') {
                        $(this).find('#aDefaultReorderQuantity_' + tempItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.DefaultReorderQuantity';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.DefaultReorderQuantity';
                        }
                    }
                    else {
                        $(this).find('#aDefaultReorderQuantity_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("defaultpullquantity")' == 'True') {
                    var tempDefaultPullQuantity = $(this).find('#aDefaultPullQuantity_' + tempItemID).val();

                    if (tempDefaultPullQuantity == null || tempDefaultPullQuantity == '') {
                        $(this).find('#aDefaultPullQuantity_' + tempItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.DefaultPullQuantity';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.DefaultPullQuantity';
                        }
                    }
                    else {
                        $(this).find('#aDefaultPullQuantity_' + tempItemID).css('border-color', '#DDD');
                    }
                }



                //                if ('@arrcolumns.Contains("maximumquantity")' == 'True') {
                //                    var tempMaximumQuantity = $(this).find('#aMaximumQuantity_' + tempItemID).val();

                //                    if (tempMaximumQuantity == null || tempMaximumQuantity == '') {
                //                        $(this).find('#aMaximumQuantity_' + tempItemID).css('border-color', 'red');
                //                        checkval = true;
                //                        if (strmsg == '') {
                //                            strmsg = '@ResItemMaster.MaximumQuantity';
                //                        }
                //                        else {
                //                            strmsg = strmsg + ', ' + '@ResItemMaster.MaximumQuantity';
                //                        }
                //                    }
                //                    else {
                //                        $(this).find('#aMaximumQuantity_' + tempItemID).css('border-color', '#DDD');
                //                    }
                //                }
                //                if ('@arrcolumns.Contains("criticalquantity")' == 'True') {
                //                    var tempCriticalQuantity = $(this).find('#aCriticalQuantity_' + tempItemID).val();

                //                    if (tempCriticalQuantity == null || tempCriticalQuantity == '') {
                //                        $(this).find('#aCriticalQuantity_' + tempItemID).css('border-color', 'red');
                //                        checkval = true;
                //                        if (strmsg == '') {
                //                            strmsg = '@ResItemMaster.CriticalQuantity';
                //                        }
                //                        else {
                //                            strmsg = strmsg + ', ' + '@ResItemMaster.CriticalQuantity';
                //                        }
                //                    }
                //                    else {
                //                        $(this).find('#aCriticalQuantity_' + tempItemID).css('border-color', '#DDD');
                //                    }
                //                }
                //                if ('@arrcolumns.Contains("minimumquantity")' == 'True') {
                //                    var tempMinimumQuantity = $(this).find('#aMinimumQuantity_' + tempItemID).val();

                //                    if (tempMinimumQuantity == null || tempMinimumQuantity == '') {
                //                        $(this).find('#aMinimumQuantity_' + tempItemID).css('border-color', 'red');
                //                        checkval = true;
                //                        if (strmsg == '') {
                //                            strmsg = '@ResItemMaster.MinimumQuantity';
                //                        }
                //                        else {
                //                            strmsg = strmsg + ', ' + '@ResItemMaster.MinimumQuantity';
                //                        }
                //                    }
                //                    else {
                //                        $(this).find('#aMinimumQuantity_' + tempItemID).css('border-color', '#DDD');
                //                    }
                //                }
                if ('@arrcolumns.Contains("itemtype")' == 'True') {
                    var tempItemType = $(this).find('#aItemType_' + tempItemID).val();

                    if (tempItemType == null || tempItemType == '') {
                        $(this).find('#aItemType_' + tempItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.ItemType';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.ItemType';
                        }
                    }
                    else {
                        $(this).find('#aItemType_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("inventrylocation")' == 'True') {
                    var tempItemLoc = $(this).find('#aInventryLocation_' + tempItemID).val();
                    var imageType = $(this).find('#aItemType_' + tempItemID).val();
                    if ((tempItemLoc == null || tempItemLoc == '') && imageType.toString().toLowerCase() != 'labor') {
                        $(this).find('#aInventryLocation_' + tempItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.DefaultLocation';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.DefaultLocation';
                        }
                    }
                    else {
                        $(this).find('#aInventryLocation_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("itemimageexternalurl")' == 'True') {
                    var tempItemImgURL = $(this).find('#aItemImageExternalURL_' + tempItemID).val();
                    if (tempItemImgURL != null && tempItemImgURL != '') {
                        var isValidURL = false;
                        isValidURL = CheckValidURLForImage(tempItemImgURL);
                        if (isValidURL == false) {
                            checkval = true;
                            if (strmsg == '') {
                                strmsg = 'Please enter valid URL for image';
                            }
                            else {
                                strmsg = strmsg + ', ' + 'Please enter valid URL for image';;
                            }
                            $(this).find('#aItemImageExternalURL_' + tempItemID).css('border-color', 'red');
                        }
                        else {
                            $(this).find('#aItemImageExternalURL_' + tempItemID).css('border-color', '#DDD');
                        }

                    }
                    else {
                        $(this).find('#aItemImageExternalURL_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("itemdocexternalurl")' == 'True') {
                    var tempItemDocURL = $(this).find('#aItemDocExternalURL_' + tempItemID).val();
                    if (tempItemDocURL != null && tempItemDocURL != '') {
                        var isValidURL = false;
                        isValidURL = is_valid_url(tempItemDocURL);
                        if (isValidURL == false) {
                            checkval = true;
                            if (strmsg == '') {
                                strmsg = 'Please enter valid URL for document';
                            }
                            else {
                                strmsg = strmsg + ', ' + 'Please enter valid URL for document';;
                            }
                            $(this).find('#aItemDocExternalURL_' + tempItemID).css('border-color', 'red');
                        }
                        else {
                            $(this).find('#aItemDocExternalURL_' + tempItemID).css('border-color', '#DDD');
                        }

                    }
                    else {
                        $(this).find('#aItemDocExternalURL_' + tempItemID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BOMItemMaster)') {

            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';

                var tempBOMItemID = $(this).find('#BOMItemID').text();
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    var tempBOMItemNumber = $(this).find('#aBOMItemNumber_' + tempBOMItemID).val();

                    if (tempBOMItemNumber == null || tempBOMItemNumber == '') {
                        $(this).find('#aBOMItemNumber_' + tempBOMItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResBomItemMaster.ItemNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResBomItemMaster.ItemNumber';
                        }
                    }
                    else {
                        $(this).find('#aBOMItemNumber_' + tempBOMItemID).css('border-color', '#DDD');
                    }
                }



                if ('@arrcolumns.Contains("suppliername")' == 'True') {
                    var tempBOMSupplierName = $(this).find('#aBOMSupplierName_' + tempBOMItemID).val();

                    if (tempBOMSupplierName == null || tempBOMSupplierName == '') {
                        $(this).find('#aBOMSupplierName_' + tempBOMItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResBomItemMaster.Supplier';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResBomItemMaster.Supplier';
                        }
                    }
                    else {
                        $(this).find('#aBOMSupplierName_' + tempBOMItemID).css('border-color', '#DDD');
                    }
                }

                if ('@arrcolumns.Contains("supplierpartno")' == 'True') {
                    var tempBOMSupplierPartNo = $(this).find('#aBOMSupplierPartNo_' + tempBOMItemID).val();

                    if (tempBOMSupplierPartNo == null || tempBOMSupplierPartNo == '') {
                        $(this).find('#aBOMSupplierPartNo_' + tempBOMItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResBomItemMaster.SupplierPartNo';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResBomItemMaster.SupplierPartNo';
                        }
                    }
                    else {
                        $(this).find('#aBOMSupplierPartNo_' + tempBOMItemID).css('border-color', '#DDD');
                    }
                }

                if ('@arrcolumns.Contains("unit")' == 'True') {
                    var tempBOMItemUnit = $(this).find('#aBOMUnit_' + tempBOMItemID).val();

                    if (tempBOMItemUnit == null || tempBOMItemUnit == '') {
                        $(this).find('#aBOMUnit_' + tempBOMItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResUnitMaster.Unit';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResUnitMaster.Unit';
                        }
                    }
                    else {
                        $(this).find('#aBOMUnit_' + tempBOMItemID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("itemtype")' == 'True') {
                    var tempBOMItemType = $(this).find('#aBOMItemType_' + tempBOMItemID).val();

                    if (tempBOMItemType == null || tempBOMItemType == '') {
                        $(this).find('#aBOMItemType_' + tempBOMItemID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResBomItemMaster.ItemType';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResBomItemMaster.ItemType';
                        }
                    }
                    else {
                        $(this).find('#aBOMItemType_' + tempBOMItemID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Assets)') {

            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempAssetID = $(this).find('#AssetID').text();
                if ('@arrcolumns.Contains("assetname")' == 'True') {
                    var tempAssetName = $(this).find('#aAssetName_' + tempAssetID).val();

                    if (tempAssetName == null || tempAssetName == '') {
                        $(this).find('#aAssetName_' + tempAssetID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResAssetMaster.AssetName';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResAssetMaster.AssetName';
                        }
                    }
                    else {
                        $(this).find('#aAssetName_' + tempAssetID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempToolID = $(this).find('#ToolID').text();
                if ('@arrcolumns.Contains("toolname")' == 'True') {
                    var tempToolName = $(this).find('#aToolName_' + tempToolID).val();

                    if (tempToolName == null || tempToolName == '') {
                        $(this).find('#aToolName_' + tempToolID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResToolMaster.ToolName';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResToolMaster.ToolName';
                        }
                    }
                    else {
                        $(this).find('#aToolName_' + tempToolID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("quantity")' == 'True') {
                    var tempToolQunatity = $(this).find('#aQuantity_' + tempToolID).val();

                    if (tempToolQunatity == null || tempToolQunatity == '') {
                        $(this).find('#aQuantity_' + tempToolID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResToolMaster.Quantity';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResToolMaster.Quantity';
                        }
                    }
                    else {
                        $(this).find('#aQuantity_' + tempToolID).css('border-color', '#DDD');
                    }
                }
                var tempCheckOutQty = $(this).find('#aCheckOutQty_' + tempToolID).val();
                var tempCheckInQty = $(this).find('#aCheckInQty_' + tempToolID).val();
                var tempTechnician = $(this).find('#aTechnician_' + tempToolID).val();
                if ((tempCheckInQty > 0 || tempCheckOutQty > 0) && tempTechnician == '') {
                    $(this).find('#aTechnician_' + tempToolID).css('border-color', 'red');
                    checkval = true;
                    if (strmsg == '') {
                        strmsg = '@ResToolMaster.Technician';
                    }
                    else {
                        strmsg = strmsg + ', ' + '@ResToolMaster.Technician';
                    }
                }
                else {
                    $(this).find('#aTechnician_' + tempToolID).css('border-color', '#DDD');
                }
                //                if ('@arrcolumns.Contains("isgroupofitems")' == 'True') {
                //                    var tempisgroupofitems = $(this).find('#aIsGroupOfItems_' + tempToolID).is(':checked');
                //                    //var tempToolQunatity = $(this).find('#aQuantity_' + tempToolID).val();

                //                    if (tempisgroupofitems == null || tempisgroupofitems == '') {
                //                        $(this).find('#aIsGroupOfItems_' + tempToolID).css('border-color', 'red');
                //                        checkval = true;
                //                        if (strmsg == '') {
                //                            strmsg = '@ResToolMaster.IsGrpOfItemReq';
                //                        }
                //                        else {
                //                            strmsg = strmsg + ', ' + '@ResToolMaster.IsGrpOfItemReq';
                //                        }
                //                    }
                //                    else {
                //                        $(this).find('#aIsGroupOfItems_' + tempToolID).css('border-color', '#DDD');
                //                    }
                //                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission)') {

            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempQuickListID = $(this).find('#QuickListID').text();
                if ('@arrcolumns.Contains("name")' == 'True') {
                    var tempQuickListname = $(this).find('#aQuickListname_' + tempQuickListID).val();

                    if (tempQuickListname == null || tempQuickListname == '') {
                        $(this).find('#aQuickListname_' + tempQuickListID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResQuickList.Name';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResQuickList.Name';
                        }
                    }
                    else {
                        $(this).find('#aQuickListname_' + tempQuickListID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    var tempQuickItemNumber = $(this).find('#aItemNumber_' + tempQuickListID).val();

                    if (tempQuickItemNumber == null || tempQuickItemNumber == '') {
                        $(this).find('#aItemNumber_' + tempQuickListID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResQuickList.ItemNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResQuickList.ItemNumber';
                        }
                    }
                    else {
                        $(this).find('#aItemNumber_' + tempQuickListID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("quantity")' == 'True') {
                    var tempQuickListQuantity = $(this).find('#aQuantity_' + tempQuickListID).val();

                    if (tempQuickListQuantity == null || tempQuickListQuantity == '') {
                        $(this).find('#aQuantity_' + tempQuickListID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResQuickList.Quantity';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResQuickList.Quantity';
                        }
                    }
                    else {
                        $(this).find('#aQuantity_' + tempQuickListID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Kits)') {

            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempKitID = $(this).find('#KitID').text();
                if ('@arrcolumns.Contains("kitpartnumber")' == 'True') {
                    var tempaKitPartNumber = $(this).find('#aKitPartNumber_' + tempKitID).val();

                    if (tempaKitPartNumber == null || tempaKitPartNumber == '') {
                        $(this).find('#aKitPartNumber_' + tempKitID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResKitMaster.KitPartNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResKitMaster.KitPartNumber';
                        }
                    }
                    else {
                        $(this).find('#aKitPartNumber_' + tempKitID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    var tempaKitItemNumber = $(this).find('#aKitItemNumber_' + tempKitID).val();

                    if (tempaKitItemNumber == null || tempaKitItemNumber == '') {
                        $(this).find('#aKitItemNumber_' + tempKitID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.ItemNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.ItemNumber';
                        }
                    }
                    else {
                        $(this).find('#aKitItemNumber_' + tempKitID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("quantityperkit")' == 'True') {
                    var tempaQuantityPerKit = $(this).find('#aQuantityPerKit_' + tempKitID).val();

                    if (tempaQuantityPerKit == null || tempaQuantityPerKit == '') {
                        $(this).find('#aQuantityPerKit_' + tempKitID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResKitMaster.QuantityPerKit';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResKitMaster.QuantityPerKit';
                        }
                    }
                    else {
                        $(this).find('#aQuantityPerKit_' + tempKitID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemManufacturer)') {

            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempManufacturerID = $(this).find('#ManufacturerID').text();
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    var tempaItemnumber = $(this).find('#aItemNumber_' + tempManufacturerID).val();

                    if (tempaItemnumber == null || tempaItemnumber == '') {
                        $(this).find('#aItemNumber_' + tempManufacturerID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.ItemNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.ItemNumber';
                        }
                    }
                    else {
                        $(this).find('#aItemNumber_' + tempManufacturerID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("manufacturername")' == 'True') {
                    var tempaManufacturername = $(this).find('#aManufacturerName_' + tempManufacturerID).val();

                    if (tempaManufacturername == null || tempaManufacturername == '') {
                        $(this).find('#aManufacturerName_' + tempManufacturerID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.ItemNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.ManufacturerName';
                        }
                    }
                    else {
                        $(this).find('#aManufacturerName_' + tempManufacturerID).css('border-color', '#DDD');
                    }
                }

                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemSupplier)') {

            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempSupplierID = $(this).find('#SupplierID').text();
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    var tempaItemnumber = $(this).find('#aItemNumber_' + tempSupplierID).val();

                    if (tempaItemnumber == null || tempaItemnumber == '') {
                        $(this).find('#aItemNumber_' + tempSupplierID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.ItemNumber';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.ItemNumber';
                        }
                    }
                    else {
                        $(this).find('#aItemNumber_' + tempSupplierID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("suppliername")' == 'True') {
                    var tempaSuppliername = $(this).find('#aSupplierName_' + tempSupplierID).val();

                    if (tempaSuppliername == null || tempaSuppliername == '') {
                        $(this).find('#aSupplierName_' + tempSupplierID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResItemMaster.Supplier';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.Supplier';
                        }
                    }
                    else {
                        $(this).find('#aSupplierName_' + tempSupplierID).css('border-color', '#DDD');
                    }
                }

                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BarcodeMaster)') {

            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                var tempBarcodeID = $(this).find('#BarcodeID').text();
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    var tempaItemnumber = $(this).find('#aItemNumber_' + tempBarcodeID).val();

                    if (tempaItemnumber == null || tempaItemnumber == '') {
                        $(this).find('#aItemNumber_' + tempBarcodeID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            var tempaModule = $(this).find('#aModuleName_' + tempBarcodeID).val();
                            if (tempaModule != '' && tempaModule.toLowerCase() == 'item master')
                            {
                                strmsg = '@ResItemMaster.ItemNumber';
                            }
                            else if (tempaModule != '' && tempaModule.toLowerCase() == 'assets') {
                                strmsg = '@ResAssetMaster.AssetName';
                            }
                            else {
                                strmsg = '@ResItemMaster.ItemNumber' + ' or ' + '@ResAssetMaster.AssetName';
                            }
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResItemMaster.ItemNumber' + ' or '+'@ResAssetMaster.AssetName';
                        }
                    }
                    else {
                        $(this).find('#aItemNumber_' + tempBarcodeID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("modulename")' == 'True') {
                    var tempaModule = $(this).find('#aModuleName_' + tempBarcodeID).val();

                    if (tempaModule == null || tempaModule == '') {
                        $(this).find('#aModuleName_' + tempBarcodeID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = 'Module';
                        }
                        else {
                            strmsg = strmsg + ', ' + 'Module';
                        }
                    }
                    else {

                        $(this).find('#aModuleName_' + tempBarcodeID).css('border-color', '#DDD');

                    }
                }
                if ('@arrcolumns.Contains("barcodestring")' == 'True') {
                    var tempaBarcodeString = $(this).find('#aBarCodeString_' + tempBarcodeID).val();

                    if (tempaBarcodeString == null || tempaBarcodeString == '') {
                        $(this).find('#aBarCodeString_' + tempBarcodeID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = '@ResCommon.BarCode';
                        }
                        else {
                            strmsg = strmsg + ', ' + '@ResCommon.BarCode';
                        }
                    }
                    else {
                        $(this).find('#aBarCodeString_' + tempBarcodeID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UDF)') {

            $('#myImportDataTable tbody tr').each(function () {
                var strmsg = '';
                
                var tempUDFID = $(this).find('#UDFID').text();
                if ('@arrcolumns.Contains("modulename")' == 'True') {
                    var tempaModuleName = $(this).find('#aModuleName_' + tempUDFID).val();

                    if (tempaModuleName == null || tempaModuleName == '') {
                        $(this).find('#aModuleName_' + tempUDFID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {

                                strmsg = 'Modulename';

                        }
                        else {
                            strmsg = strmsg + ', ' + 'Modulename';
                        }
                    }
                    else {
                        $(this).find('#aModuleName_' + tempUDFID).css('border-color', '#DDD');
                    }
                }
                if ('@arrcolumns.Contains("udfcolumnname")' == 'True') {
                    var tempaModule = $(this).find('#aUDFColumnName_' + tempUDFID).val();

                    if (tempaModule == null || tempaModule == '') {
                        $(this).find('#aUDFColumnName_' + tempUDFID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = 'UDF Column Name';
                        }
                        else {
                            strmsg = strmsg + ', ' + 'UDF Column Name';
                        }
                    }
                    else {

                        $(this).find('#aUDFColumnName_' + tempUDFID).css('border-color', '#DDD');

                    }
                }
                if ('@arrcolumns.Contains("udfname")' == 'True') {
                    var tempaModule = $(this).find('#aUDFName_' + tempUDFID).val();

                    if (tempaModule == null || tempaModule == '') {
                        $(this).find('#aUDFName_' + tempUDFID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = 'UDF Name';
                        }
                        else {
                            strmsg = strmsg + ', ' + 'UDF Name';
                        }
                    }
                    else {

                        $(this).find('#aUDFName_' + tempUDFID).css('border-color', '#DDD');

                    }
                }
                if ('@arrcolumns.Contains("controltype")' == 'True') {
                    var tempaBarcodeString = $(this).find('#aControlType_' + tempUDFID).val();

                    if (tempaBarcodeString == null || tempaBarcodeString == '') {
                        $(this).find('#aControlType_' + tempUDFID).css('border-color', 'red');
                        checkval = true;
                        if (strmsg == '') {
                            strmsg = 'ControlType';
                        }
                        else {
                            strmsg = strmsg + ', ' + 'ControlType';
                        }
                    }
                    else {
                        $(this).find('#aControlType_' + tempUDFID).css('border-color', '#DDD');
                    }
                }
                if (strmsg != '') {
                    strmsg = strmsg + '@ResImportMasters.ImportBlankMsg';
                    $(this).find('#Reason').html(strmsg);
                    $(this).find('#Status').html('Fail');
                    $(this).find('#Status').css('color', 'red');
                    $(this).find('#Reason').css('color', 'red');
                }
                else {
                    if ($(this).find('#Status').html() != 'Success') {
                        $(this).find('#Reason').html('N/A');
                        $(this).find('#Status').html('N/A');
                        $(this).find('#Status').css('color', '#000000');
                        $(this).find('#Reason').css('color', '#000000');
                    }
                }
            });
            FillRowColor();
        }

        if (checkval == true) {
            return false;

        }
        else {
            return true;
        }

    }
    function CheckDoubleValue(val) {
        var pattern = /^\d+.?\d*$/;

        if (val.match(pattern) == null)
            return false;
        else
            return true;

    }

    function CheckValidURLForImage(strURL) {
        if (strURL != '' && strURL != null) {
            $("<img>", {
                src: strURL,
                error: function () {
                    return false;
                },
                load: function () {
                    return true;
                }
            });
        }
        else {
            return true;
        }
    }


    function is_valid_url(url) {
        if (url != '' && url != null) {
            var IsValidURL = /^(http(s)?:\/\/)?(www\.)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/.test(url);
            if (IsValidURL == false) {
                return false;
            }
            else {
                return true;
            }
        }
    }

    function CheckIntegerValue(val) {
        var pattern = /^[0-9]+$/;

        if (val.match(pattern) == null)
            return false;
        else
            return true;

    }

    $('#btnSave').click(function () {

        $('#ImportProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');
        //$('#DivLoading').show();

        if (!ValidateValueWithDataType()) {
            closeImportInfoModel();
            $('#DivLoading').hide();
            return;
        }


        $('#btnSave').prop("disabled", "disabled");

        var arrItems = new Array();
        var selectedModuleVal = $('#ddlModule option:selected').attr('value');
        if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempINVLocID = $(this).find('#InvLocId').text();
                var tempItemname = $(this).find('#aItemNumber_' + tempINVLocID).val();
                var tempLocationName = $(this).find('#aLocationName_' + tempINVLocID).val();
                var tempcustomerownedQTY = $(this).find('#acustomerownedquantity_' + tempINVLocID).val();
                var tempconsignedQTY = $(this).find('#aconsignedquantity_' + tempINVLocID).val();
                var tempSerialNumber = $(this).find('#aSerialNumber_' + tempINVLocID).val();
                var tempLotNumber = $(this).find('#aLotNumber_' + tempINVLocID).val();
                var tempExpiration = $(this).find('#aExpiration_' + tempINVLocID).val();
                //var tempReceived = $(this).find('#aReceived_' + tempINVLocID).val();
                var tempaCost = $(this).find('#acost_' + tempINVLocID).val();

                var data = {
                    "ID": tempINVLocID, "ItemNumber": tempItemname, "BinNumber": tempLocationName,
                    "customerownedquantity": tempcustomerownedQTY, "consignedquantity": tempconsignedQTY,
                    "SerialNumber": tempSerialNumber, "LotNumber": tempLotNumber, "Expiration": tempExpiration,
                    "Cost": tempaCost
                };
                arrItems.push(data);
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.eVMISetup)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempINVLocID = $(this).find('#InvLocId').text();
                var tempItemname = $(this).find('#aItemNumber_' + tempINVLocID).val();
                var tempLocationName = $(this).find('#aLocationName_' + tempINVLocID).val();
                var tempminimumquantity = $(this).find('#aminimumquantity_' + tempINVLocID).val();
                var tempmaximumquantity = $(this).find('#amaximumquantity_' + tempINVLocID).val();
                var tempcriticalquantity = $(this).find('#acriticalquantity_' + tempINVLocID).val();
                var tempSensorId = $(this).find('#aSensorAddress_' + tempINVLocID).val();
                var tempSensorPort = $(this).find('#aSensorPort_' + tempINVLocID).val();
                var tempisdefault = $(this).find('#aisdefault_' + tempINVLocID).is(':checked');
                var tempisdeleted = $(this).find('#aisdeleted_' + tempINVLocID).is(':checked');

                var data = {
                    "ID": tempINVLocID, "ItemNumber": tempItemname, "BinNumber": tempLocationName,
                    "MinimumQuantity": tempminimumquantity, "MaximumQuantity": tempmaximumquantity,
                    "CriticalQuantity": tempcriticalquantity, "SensorId": tempSensorId, "SensorPort": tempSensorPort, "IsDefault": tempisdefault, "IsDeleted": tempisdeleted
                };
                arrItems.push(data);
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.LocationMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempLocationID = $(this).find('#LocationID').text();
                var tempLocation = $(this).find('#aLocation_' + tempLocationID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempLocationID, "BinNumber": tempLocation, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolCategory)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempToolCategoryID = $(this).find('#ToolCategoryID').text();
                var tempToolCategory = $(this).find('#aToolCategory_' + tempToolCategoryID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempToolCategoryID, "ToolCategory": tempToolCategory, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CategoryMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempCatID = $(this).find('#CatID').text();
                var tempCategory = $(this).find('#aCategory_' + tempCatID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                if (vUDF1 == null)
                    vUDF1 = null;

                if (vUDF2 == null)
                    vUDF2 = null;
                if (vUDF3 == null)
                    vUDF3 = null;
                if (vUDF4 == null)
                    vUDF4 = null;
                if (vUDF5 == null)
                    vUDF5 = null;


                var data = { "Category": tempCategory, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CostUOMMaster)') {

            $('#myImportDataTable tbody tr').each(function () {
                var tempCostID = $(this).find('#CostID').text();
                var tempCost = $(this).find('#aCost_' + tempCostID).val();
                var tempCostvalue = $(this).find('#aCostvalue_' + tempCostID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempCostID, "CostUOM": tempCost, "CostUOMValue": tempCostvalue, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempInvID = $(this).find('#InvID').text();
                var tempInv = $(this).find('#aInv_' + tempInvID).val();
                var tempBase = $(this).find('#aBase_' + tempInvID).val();
                var tempStart = $(this).find('#aStart_' + tempInvID).val();
                var tempEnd = $(this).find('#aEnd_' + tempInvID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempInvID, "InventoryClassification": tempInv, "BaseOfInventory": tempBase, "RangeStart": tempStart, "RangeEnd": tempEnd, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempCustID = $(this).find('#CustID').text();
                var tempCustomer = $(this).find('#aCustomer_' + tempCustID).val();
                var tempAccount = $(this).find('#aAccount_' + tempCustID).val();
                var tempContact = $(this).find('#aContact_' + tempCustID).val();
                var tempAddress = $(this).find('#aAddress_' + tempCustID).val();
                var tempCity = $(this).find('#aCity_' + tempCustID).val();
                var tempState = $(this).find('#aState_' + tempCustID).val();
                var tempZipCode = $(this).find('#aZipCode_' + tempCustID).val();
                var tempCountry = $(this).find('#aCountry_' + tempCustID).val();
                var tempPhone = $(this).find('#aPhone_' + tempCustID).val();
                var tempEmail = $(this).find('#aEmail_' + tempCustID).val();
                var remarks = $(this).find('#aRemarks_' + tempCustID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempCustID, "Customer": tempCustomer, "Account": tempAccount, "Contact": tempContact, "Address": tempAddress, "City": tempCity, "State": tempState, "ZipCode": tempZipCode, "Country": tempCountry, "Phone": tempPhone, "Email": tempEmail, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, "remarks": remarks };
                arrItems.push(data);
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.FreightTypeMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempFreightID = $(this).find('#FreightID').text();
                var tempFreightType = $(this).find('#aFreightType_' + tempFreightID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempFreightID, "FreightType": tempFreightType, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GLAccountsMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempGLAccountID = $(this).find('#GLAccountID').text();
                var tempGLAccount = $(this).find('#aGLAccount_' + tempGLAccountID).val();
                var tempDesc = $(this).find('#aDesc_' + tempGLAccountID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempGLAccountID, "GLAccount": tempGLAccount, "Description": tempDesc, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GXPRConsignedJobMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempGXPRID = $(this).find('#GXPRID').text();
                var tempGXPRConsigmentJob = $(this).find('#aGXPRConsinged_' + tempGXPRID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempGXPRID, "GXPRConsigmentJob": tempGXPRConsigmentJob, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.JobTypeMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempJobTypeID = $(this).find('#JobTypeID').text();
                var tempJobType = $(this).find('#aJobType_' + tempJobTypeID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempJobTypeID, "JobType": tempJobType, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ShipViaMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempShipViaID = $(this).find('#ShipViaID').text();
                var tempShipVia = $(this).find('#aShipVia_' + tempShipViaID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempShipViaID, "ShipVia": tempShipVia, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempTechnicianID = $(this).find('#TechnicianID').text();
                var tempTechnician = $(this).find('#aTechnician_' + tempTechnicianID).val();
                var tempTechnicianCode = $(this).find('#aTechnicianCode_' + tempTechnicianID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempTechnicianID, "Technician": tempTechnician, "TechnicianCode": tempTechnicianCode, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ManufacturerMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempManufacturerID = $(this).find('#ManufacturerID').text();
                var tempManufacturer = $(this).find('#aManufacturer_' + tempManufacturerID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempManufacturerID, "Manufacturer": tempManufacturer, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.MeasurementTermMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempMeasurementTermID = $(this).find('#MeasurementTermID').text();
                var tempMeasurementTerm = $(this).find('#aMeasurementTerm_' + tempMeasurementTermID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = { "ID": tempMeasurementTermID, "MeasurementTerm": tempMeasurementTerm, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5 };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempUnitID = $(this).find('#UnitID').text();
                var tempUnit = $(this).find('#aUnit_' + tempUnitID).val();

                var tempDescription = $(this).find('#aDescription_' + tempUnitID).val();
                var tempOdometer = $(this).find('#aOdometer_' + tempUnitID).val();
                var tempOpHours = $(this).find('#aOpHours_' + tempUnitID).val();
                var tempSerialNo = $(this).find('#aSerialNo_' + tempUnitID).val();
                var tempYear = $(this).find('#aYear_' + tempUnitID).val();
                var tempMake = $(this).find('#aMake_' + tempUnitID).val();
                var tempModel = $(this).find('#aModel_' + tempUnitID).val();
                var tempPlate = $(this).find('#aPlate_' + tempUnitID).val();
                var tempEngineModel = $(this).find('#aEngineModel_' + tempUnitID).val();
                var tempEngineSerialNo = $(this).find('#aEngineSerialNo_' + tempUnitID).val();
                var tempMarkupParts = $(this).find('#aMarkupParts_' + tempUnitID).val();
                var tempMarkupLabour = $(this).find('#aMarkupLabour_' + tempUnitID).val();

                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = {
                    "ID": tempUnitID, "Unit": tempUnit, "Description": tempDescription, "Odometer": tempOdometer,
                    "OpHours": parseFloat(tempOpHours), "SerialNo": parseFloat(tempSerialNo), "Year": parseFloat(tempYear), "Make": tempMake, "Model": tempModel, "Plate": tempPlate,
                    "EngineModel": tempEngineModel, "EngineSerialNo": tempEngineSerialNo, "MarkupParts": parseFloat(tempMarkupParts),
                    "MarkupLabour": parseFloat(tempMarkupLabour),
                    UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5
                };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempSupplierID = $(this).find('#SupplierID').text();
                var tempSupplier = $(this).find('#aSupplier_' + tempSupplierID).val();

                var tempSupplierColor = $(this).find('#aSupplierColor_' + tempSupplierID).val();
                var tempDescription = $(this).find('#aDescription_' + tempSupplierID).val();
                var tempBranchNumber = $(this).find('#aBranchNumber_' + tempSupplierID).val();
                var tempMaximumOrderSize = $(this).find('#aMaximumOrderSize_' + tempSupplierID).val();

                //var tempAccountNo = $(this).find('#aAccountNo_' + tempSupplierID).val();
                //var tempReceiverID = $(this).find('#aReceiverID_' + tempSupplierID).val();
                var tempAddress = $(this).find('#aAddress_' + tempSupplierID).val();
                var tempCity = $(this).find('#aCity_' + tempSupplierID).val();
                var tempState = $(this).find('#aState_' + tempSupplierID).val();
                var tempZipCode = $(this).find('#aZipCode_' + tempSupplierID).val();
                var tempCountry = $(this).find('#aCountry_' + tempSupplierID).val();
                var tempContact = $(this).find('#aContact_' + tempSupplierID).val();
                var tempPhone = $(this).find('#aPhone_' + tempSupplierID).val();
                var tempFax = $(this).find('#aFax_' + tempSupplierID).val();
                //var tempEmail = $(this).find('#aEmail_' + tempSupplierID).val();

                //                var tempIsEmailPOInBody = $(this).find('#aIsEmailPOInBody_' + tempSupplierID).is(':checked');
                //                var tempIsEmailPOInPDF = $(this).find('#aIsEmailPOInPDF_' + tempSupplierID).is(':checked');
                //                var tempIsEmailPOInCSV = $(this).find('#aIsEmailPOInCSV_' + tempSupplierID).is(':checked');
                //                var tempIsEmailPOInX12 = $(this).find('#aIsEmailPOInX12_' + tempSupplierID).is(':checked');

                var tempIsSendtoVendor = $(this).find('#aIsSendtoVendor_' + tempSupplierID).is(':checked');
                var tempIsVendorReturnAsn = $(this).find('#aIsVendorReturnAsn_' + tempSupplierID).is(':checked');
                var tempIsSupplierReceivesKitComponents = $(this).find('#aIsSupplierReceivesKitComponents_' + tempSupplierID).is(':checked');

                var tempOrderNumberTypeBlank = $(this).find('#aOrderNumberTypeBlank_' + tempSupplierID).is(':checked');
                var tempOrderNumberTypeFixed = $(this).find('#aOrderNumberTypeFixed_' + tempSupplierID).is(':checked');
                var tempOrderNumberTypeBlanketOrderNumber = $(this).find('#aOrderNumberTypeBlanketOrderNumber_' + tempSupplierID).is(':checked');
                var tempOrderNumberTypeIncrementingOrderNumber = $(this).find('#aOrderNumberTypeIncrementingOrderNumber_' + tempSupplierID).is(':checked');
                var tempOrderNumberTypeIncrementingbyDay = $(this).find('#aOrderNumberTypeIncrementingbyDay_' + tempSupplierID).is(':checked');
                var tempOrderNumberTypeDateIncrementing = $(this).find('#aOrderNumberTypeDateIncrementing_' + tempSupplierID).is(':checked');
                var tempOrderNumberTypeDate = $(this).find('#aOrderNumberTypeDate_' + tempSupplierID).is(':checked');

                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var tempAccountNumber = $(this).find('#aAccountNumber_' + tempSupplierID).val();
                var tempAccountName = $(this).find('#aAccountName_' + tempSupplierID).val();
                var tempBlanketPONumber = $(this).find('#aBlanketPONumber_' + tempSupplierID).val();
                var tempStartDate = $(this).find('#aStartDate_' + tempSupplierID).val();
                var tempEndDate = $(this).find('#aEndDate_' + tempSupplierID).val();
                var tempMaxLimit = $(this).find('#aMaxLimit_' + tempSupplierID).val();
                var tempDoNotExceed = $(this).find('#aDoNotExceed_' + tempSupplierID).is(':checked');

                var tempPullPurchaseNumberFixed = $(this).find('#aPullPurchaseNumberFixed_' + tempSupplierID).is(':checked');
                var tempPullPurchaseNumberBlanketOrder = $(this).find('#aPullPurchaseNumberBlanketOrder_' + tempSupplierID).is(':checked');
                var tempPullPurchaseNumberDateIncrementing = $(this).find('#aPullPurchaseNumberDateIncrementing_' + tempSupplierID).is(':checked');
                var tempPullPurchaseNumberDate = $(this).find('#aPullPurchaseNumberDate_' + tempSupplierID).is(':checked');
                var tempLastPullPurchaseNumberUsed = $(this).find('#aLastPullPurchaseNumberUsed_' + tempSupplierID).val();


                var data = {
                    "ID": tempSupplierID, "SupplierName": tempSupplier, "SupplierColor": tempSupplierColor, "Description": tempDescription,
                    "BranchNumber": tempBranchNumber, "MaximumOrderSize": tempMaximumOrderSize, //"ReceiverID": tempReceiverID,
                    "Address": tempAddress, "City": tempCity, "State": tempState, "ZipCode": tempZipCode, "Country": tempCountry,
                    "Contact": tempContact, "Phone": tempPhone, "Fax": tempFax, "IsSendtoVendor": tempIsSendtoVendor,
                    "IsVendorReturnAsn": tempIsVendorReturnAsn, "IsSupplierReceivesKitComponents": tempIsSupplierReceivesKitComponents,
                    //"Email": tempEmail, "IsEmailPOInBody": tempIsEmailPOInBody, "IsEmailPOInPDF": tempIsEmailPOInPDF, "IsEmailPOInCSV": tempIsEmailPOInCSV,
                    //"IsEmailPOInX12": tempIsEmailPOInX12,
                    "OrderNumberTypeBlank": tempOrderNumberTypeBlank, "OrderNumberTypeFixed": tempOrderNumberTypeFixed, "OrderNumberTypeBlanketOrderNumber": tempOrderNumberTypeBlanketOrderNumber,
                    "OrderNumberTypeIncrementingOrderNumber": tempOrderNumberTypeIncrementingOrderNumber, "OrderNumberTypeIncrementingbyDay": tempOrderNumberTypeIncrementingbyDay,
                    "OrderNumberTypeDateIncrementing": tempOrderNumberTypeDateIncrementing, "OrderNumberTypeDate": tempOrderNumberTypeDate,
                    UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5,
                    "AccountNumber": tempAccountNumber, "AccountName": tempAccountName, "BlanketPONumber": tempBlanketPONumber, "StartDate": tempStartDate, "EndDate": tempEndDate,
                    "MaxLimit": tempMaxLimit, "IsNotExceed": tempDoNotExceed, "PullPurchaseNumberFixed": tempPullPurchaseNumberFixed, "PullPurchaseNumberBlanketOrder": tempPullPurchaseNumberBlanketOrder,
                    "PullPurchaseNumberDateIncrementing": tempPullPurchaseNumberDateIncrementing, "PullPurchaseNumberDate": tempPullPurchaseNumberDate, "LastPullPurchaseNumberUsed": tempLastPullPurchaseNumberUsed
                };
                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster)') {
            if (!ValidateCriticalMinMax()) {
                $('#DivLoading').hide();
                $('#btnSave').removeProp("disabled");
                closeImportInfoModel();
                return;
            }
            if (!ValidateImageName()) {
                $('#DivLoading').hide();
                $('#btnSave').removeProp("disabled");
                closeImportInfoModel();
                return;
            }
            $('#myImportDataTable tbody tr').each(function () {
                var tempItemID = $(this).find('#ItemID').text();

                var tempItemNumber = $(this).find('#aItemNumber_' + tempItemID).val();
                var tempManufacturer = $(this).find('#aManufacturer_' + tempItemID).val();
                var tempManufacturerNumber = $(this).find('#aManufacturerNumber_' + tempItemID).val();
                var tempSupplierName = $(this).find('#aSupplierName_' + tempItemID).val();
                var tempBlanketOrderNumber = $(this).find('#aBlanketOrderNumber_' + tempItemID).val();
                var tempSupplierPartNo = $(this).find('#aSupplierPartNo_' + tempItemID).val();
                var tempUPC = $(this).find('#aUPC_' + tempItemID).val();
                var tempUNSPSC = $(this).find('#aUNSPSC_' + tempItemID).val();
                var tempDescription = $(this).find('#aDescription_' + tempItemID).val();
                var tempLongDescription = $(this).find('#aLongDescription_' + tempItemID).val();
                var tempCategoryName = $(this).find('#aCategoryName_' + tempItemID).val();
                var tempGLAccount = $(this).find('#aGLAccount_' + tempItemID).val();
                var tempUOM = $(this).find('#aUOM_' + tempItemID).val();
                var tempCostUOM = $(this).find('#aCostUOM_' + tempItemID).val();
                //var tempPricePerTerm = $(this).find('#aPricePerTerm_' + tempItemID).val();
                var DefaultReorderQuantity = $(this).find('#aDefaultReorderQuantity_' + tempItemID).val();
                var DefaultPullQuantity = $(this).find('#aDefaultPullQuantity_' + tempItemID).val();
                var Cost = $(this).find('#aCost_' + tempItemID).val();
                var Markup = $(this).find('#aMarkup_' + tempItemID).val();
                var SellPrice = $(this).find('#aSellPrice_' + tempItemID).val();
                var ExtendedCost = $(this).find('#aExtendedCost_' + tempItemID).text();
                var LeadTimeInDays = $(this).find('#aLeadTimeInDays_' + tempItemID).val();
                var Link1 = $(this).find('#aLink1_' + tempItemID).val();
                var Link2 = $(this).find('#aLink2_' + tempItemID).val();
                var Trend = $(this).find('#aTrend_' + tempItemID).is(':checked');
                var Taxable = $(this).find('#aTaxable_' + tempItemID).is(':checked');
                var Consignment = $(this).find('#aConsignment_' + tempItemID).is(':checked');
                var StagedQuantity = $(this).find('#aStagedQuantity_' + tempItemID).text();
                var InTransitquantity = $(this).find('#aIn_Transitquantity_' + tempItemID).text();
                var OnOrderQuantity = $(this).find('#aOnOrderQuantity_' + tempItemID).text();
                var OnTransferQuantity = $(this).find('#aOnTransferQuantity_' + tempItemID).text();
                var SuggestedOrderQuantity = $(this).find('#aSuggestedOrderQuantity_' + tempItemID).text();
                var RequisitionedQuantity = $(this).find('#aRequisitionedQuantity_' + tempItemID).text();
                var AverageUsage = $(this).find('#aAverageUsage_' + tempItemID).text();
                var Turns = $(this).find('#aTurns_' + tempItemID).text();
                var OnHandQuantity = $(this).find('#aOn_HandQuantity_' + tempItemID).val();
                var CriticalQuantity = $(this).find('#aCriticalQuantity_' + tempItemID).val();
                var MinimumQuantity = $(this).find('#aMinimumQuantity_' + tempItemID).val();
                var MaximumQuantity = $(this).find('#aMaximumQuantity_' + tempItemID).val();
                var WeightPerPiece = $(this).find('#aWeightPerPiece_' + tempItemID).val();
                var ItemUniqueNumber = $(this).find('#aItemUniqueNumber_' + tempItemID).val();
                var IsTransfer = $(this).find('#aIsTransfer_' + tempItemID).is(':checked');
                var IsPurchase = $(this).find('#aIsPurchase_' + tempItemID).is(':checked');
                var InventryLocation = $(this).find('#aInventryLocation_' + tempItemID).val();
                var InventoryClassification = $(this).find('#aInventoryClassification_' + tempItemID).val();
                var SerialNumberTracking = $(this).find('#aSerialNumberTracking_' + tempItemID).is(':checked');
                var LotNumberTracking = $(this).find('#aLotNumberTracking_' + tempItemID).is(':checked');
                var DateCodeTracking = $(this).find('#aDateCodeTracking_' + tempItemID).is(':checked');
                var ItemType = $(this).find('#aItemType_' + tempItemID).val();
                var ImagePath = $(this).find('#aImagePath_' + tempItemID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();
                var IsLotSerialExpiryCost = $(this).find('#aIsLotSerialExpiryCost_' + tempItemID).val();
                var ItemLevelMinMaxQtyRequired = $(this).find('#aItemLevelMinMaxQtyRequired_' + tempItemID).is(':checked');

                var IsBuildBreak = $(this).find('#aIsBuildBreak_' + tempItemID).is(':checked');
                var IsAutoInventoryClassification = $(this).find('#aIsAutoInventoryClassification_' + tempItemID).is(':checked');
                var PullQtyScanOverride = $(this).find('#aPullQtyScanOverride_' + tempItemID).is(':checked');
                var EnforceDefaultReorderQuantity = $(this).find('#aEnforceDefaultReorderQuantity_' + tempItemID).is(':checked');
                var TrendingSetting = $(this).find('#atrendingsetting_' + tempItemID).val();

                var IsPackslipMandatoryAtReceive = $(this).find('#aIsPackslipMandatoryAtReceive_' + tempItemID).is(':checked');

                var tempItemImageExternalURL = $(this).find('#aItemImageExternalURL_' + tempItemID).val();
                var tempItemDocExternalURL = $(this).find('#aItemDocExternalURL_' + tempItemID).val();
                var ItemIsDeleted = $(this).find('#aItemIsDeleted_' + tempItemID).is(':checked');
                //alert($(this).find('#aIsPackslipMandatoryAtReceive' + tempItemID).is(':checked'));

                if (CriticalQuantity == null || CriticalQuantity == '') {
                    CriticalQuantity = 0;
                }
                if (MinimumQuantity == null || MinimumQuantity == '') {
                    MinimumQuantity = 0;
                }
                if (MaximumQuantity == null || MaximumQuantity == '') {
                    MaximumQuantity = 0;
                }

                var data = {
                    // "ID": tempItemID,
                    "ItemNumber": tempItemNumber,
                    "ManufacturerName": tempManufacturer,
                    "ManufacturerNumber": tempManufacturerNumber,
                    "SupplierName": tempSupplierName,
                    "BlanketOrderNumber": tempBlanketOrderNumber,
                    "SupplierPartNo": tempSupplierPartNo,
                    "UPC": tempUPC,
                    "UNSPSC": tempUNSPSC,
                    "Description": tempDescription,
                    "LongDescription": tempLongDescription,
                    "CategoryName": tempCategoryName,
                    "GLAccount": tempGLAccount,
                    "Unit": tempUOM,
                    // CommentBY Esha For Cost UOM
                    //"PricePerTerm": parseFloat(tempPricePerTerm),
                    // Added BY Esha
                    //"PricePerTerm": 0,
                    "CostUOMName": tempCostUOM,
                    // End

                    "DefaultReorderQuantity": parseFloat(DefaultReorderQuantity),
                    "DefaultPullQuantity": parseFloat(DefaultPullQuantity),
                    "Cost": parseFloat(Cost),
                    "Markup": parseFloat(Markup),
                    "SellPrice": parseFloat(SellPrice),
                    "ExtendedCost": parseFloat(ExtendedCost),
                    "LeadTimeInDays": parseInt(LeadTimeInDays),
                    "Link1": Link1,
                    "Link2": Link2,
                    "Trend": Trend,
                    "Taxable": Taxable,
                    "Consignment": Consignment,
                    "StagedQuantity": parseFloat(StagedQuantity),
                    "InTransitquantity": parseFloat(InTransitquantity),
                    "OnOrderQuantity": parseFloat(OnOrderQuantity),
                    "OnTransferQuantity": parseFloat(OnTransferQuantity),
                    "SuggestedOrderQuantity": parseFloat(SuggestedOrderQuantity),
                    "RequisitionedQuantity": parseFloat(RequisitionedQuantity),
                    "AverageUsage": parseFloat(AverageUsage),
                    "Turns": parseFloat(Turns),
                    "OnHandQuantity": parseFloat(OnHandQuantity),
                    "CriticalQuantity": parseFloat(CriticalQuantity),
                    "MinimumQuantity": parseFloat(MinimumQuantity),
                    "MaximumQuantity": parseFloat(MaximumQuantity),
                    "WeightPerPiece": parseFloat(WeightPerPiece),
                    "ItemUniqueNumber": ItemUniqueNumber,
                    "IsTransfer": IsTransfer,
                    "IsPurchase": IsPurchase,
                    "InventryLocation": InventryLocation,
                    "InventoryClassificationName": InventoryClassification,
                    "SerialNumberTracking": SerialNumberTracking,
                    "LotNumberTracking": LotNumberTracking,
                    "DateCodeTracking": DateCodeTracking,
                    "ItemTypeName": ItemType,
                    "ImagePath": ImagePath,
                    "UDF1": vUDF1,
                    "UDF2": vUDF2,
                    "UDF3": vUDF3,
                    "UDF4": vUDF4,
                    "UDF5": vUDF5,
                    "IsLotSerialExpiryCost": IsLotSerialExpiryCost,
                    "IsItemLevelMinMaxQtyRequired": ItemLevelMinMaxQtyRequired,
                    "TrendingSettingName": TrendingSetting,
                    "PullQtyScanOverride": PullQtyScanOverride,
                    "IsEnforceDefaultReorderQuantity": EnforceDefaultReorderQuantity,
                    "IsAutoInventoryClassification": IsAutoInventoryClassification,
                    "IsBuildBreak": IsBuildBreak,
                    "IsPackslipMandatoryAtReceive": IsPackslipMandatoryAtReceive,
                    "ItemImageExternalURL": tempItemImageExternalURL,
                    "ItemDocExternalURL": tempItemDocExternalURL,
                    "IsDeleted": ItemIsDeleted
                };


                //                var data = { "ID": tempItemID, "SupplierName": tempSupplier, "Description": tempDescription, "AccountNo": tempAccountNo,
                //                    "ReceiverID": tempReceiverID, "Address": tempAddress, "City": tempCity, "State": tempState, "ZipCode": tempZipCode, "Country": tempCountry,
                //                    "Contact": tempContact, "Phone": tempPhone, "Fax": tempFax,
                //                    "Email": tempEmail, "IsEmailPOInBody": tempIsEmailPOInBody, "IsEmailPOInPDF": tempIsEmailPOInPDF, "IsEmailPOInCSV": tempIsEmailPOInCSV,
                //                    "IsEmailPOInX12": tempIsEmailPOInX12, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5
                //                };
                arrItems.push(data);

            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BOMItemMaster)') {

            $('#myImportDataTable tbody tr').each(function () {
                var tempItemID = $(this).find('#BOMItemID').text();

                var tempItemNumber = $(this).find('#aBOMItemNumber_' + tempItemID).val();
                var tempManufacturer = $(this).find('#aBOMManufacturer_' + tempItemID).val();
                var tempManufacturerNumber = $(this).find('#aBOMManufacturerNumber_' + tempItemID).val();
                var tempSupplierName = $(this).find('#aBOMSupplierName_' + tempItemID).val();
                var tempSupplierPartNo = $(this).find('#aBOMSupplierPartNo_' + tempItemID).val();
                var tempUPC = $(this).find('#aBOMUPC_' + tempItemID).val();
                var tempUNSPSC = $(this).find('#aBOMUNSPSC_' + tempItemID).val();
                var tempDescription = $(this).find('#aBOMDescription_' + tempItemID).val();
                var tempCategoryName = $(this).find('#aBOMCategoryName_' + tempItemID).val();
                var tempGLAccount = $(this).find('#aBOMGLAccount_' + tempItemID).val();
                var tempUnit = $(this).find('#aBOMUnit_' + tempItemID).val();
                var LeadTimeInDays = $(this).find('#aLeadTimeInDays_' + tempItemID).val();
                var Taxable = $(this).find('#aBOMTaxable_' + tempItemID).is(':checked');
                var Consignment = $(this).find('#aBOMConsignment_' + tempItemID).is(':checked');
                var ItemUniqueNumber = $(this).find('#aBOMItemUniqueNumber_' + tempItemID).val();
                var IsTransfer = $(this).find('#aBOMIsTransfer_' + tempItemID).is(':checked');
                var IsPurchase = $(this).find('#aBOMIsPurchase_' + tempItemID).is(':checked');
                //var InventryLocation = $(this).find('#aBOMInventryLocation_' + tempItemID).val();
                var InventoryClassification = $(this).find('#aBOMInventoryClassification_' + tempItemID).val();
                var SerialNumberTracking = $(this).find('#aBOMSerialNumberTracking_' + tempItemID).is(':checked');
                var LotNumberTracking = $(this).find('#aBOMLotNumberTracking_' + tempItemID).is(':checked');
                var DateCodeTracking = $(this).find('#aBOMDateCodeTracking_' + tempItemID).is(':checked');
                var ItemType = $(this).find('#aBOMItemType_' + tempItemID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = {
                    // "ID": tempItemID,
                    "ItemNumber": tempItemNumber,
                    "ManufacturerName": tempManufacturer,
                    "ManufacturerNumber": tempManufacturerNumber,
                    "SupplierName": tempSupplierName,
                    "SupplierPartNo": tempSupplierPartNo,
                    "UPC": tempUPC,
                    "UNSPSC": tempUNSPSC,
                    "Description": tempDescription,
                    "CategoryName": tempCategoryName,
                    "GLAccount": tempGLAccount,
                    "Unit": tempUnit,
                    "LeadTimeInDays": LeadTimeInDays,
                    "Taxable": Taxable,
                    "Consignment": Consignment,
                    "ItemUniqueNumber": ItemUniqueNumber,
                    "IsTransfer": IsTransfer,
                    "IsPurchase": IsPurchase,
                    //"InventryLocation": InventryLocation,
                    "InventoryClassificationName": InventoryClassification,
                    "SerialNumberTracking": SerialNumberTracking,
                    "LotNumberTracking": LotNumberTracking,
                    "DateCodeTracking": DateCodeTracking,
                    "ItemTypeName": ItemType,
                    UDF1: vUDF1,
                    UDF2: vUDF2,
                    UDF3: vUDF3,
                    UDF4: vUDF4,
                    UDF5: vUDF5
                };

                arrItems.push(data);

            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster)') {


            if (!isUniqueSerial()) {
                $('#DivLoading').hide();
                $('#btnSave').removeProp("disabled");
                closeImportInfoModel();
                return;
            }

            $('#myImportDataTable tbody tr').each(function () {
                var tempToolID = $(this).find('#ToolID').text();

                var tempToolName = $(this).find('#aToolName_' + tempToolID).val();

                var tempSerial = $(this).find('#aSerial_' + tempToolID).val();
                var tempDescription = $(this).find('#aDescription_' + tempToolID).val();
                var tempCost = $(this).find('#aCost_' + tempToolID).val();
                var tempQuantity = $(this).find('#aQuantity_' + tempToolID).val();
                var tempToolCategory = $(this).find('#aToolCategory_' + tempToolID).val();
                var tempLocation = $(this).find('#aLocation_' + tempToolID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();
                var vTechnician = $(this).find('#aTechnician_' + tempToolID).val();
                var vCheckOutQty = $(this).find('#aCheckOutQty_' + tempToolID).val();
                var vCheckInQty = $(this).find('#aCheckInQty_' + tempToolID).val();
                var tempIsGrpofItems = 0;
                var vCheckOutUDF1 = $(this).find('#aCheckOutUDF1').val();
                var vCheckOutUDF2 = $(this).find('#aCheckOutUDF2').val();
                var vCheckOutUDF3 = $(this).find('#aCheckOutUDF3').val();
                var vCheckOutUDF4 = $(this).find('#aCheckOutUDF4').val();
                var vCheckOutUDF5 = $(this).find('#aCheckOutUDF5').val();

                if ($(this).find("input[type='checkbox'][id*='aisgroupofitems']").is(':checked'))
                    tempIsGrpofItems = 1;
                else
                    tempIsGrpofItems = 0;
                var data = {
                    "ID": tempToolID, "ToolName": tempToolName, "Serial": tempSerial, "Description": tempDescription,
                    "Cost": parseFloat(tempCost), "Quantity": parseFloat(tempQuantity), "ToolCategory": tempToolCategory, "Location": tempLocation,
                    UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, IsGroupOfItems: tempIsGrpofItems, "Technician": vTechnician, "CheckOutQuantity": vCheckOutQty,
                    "CheckInQuantity": vCheckInQty, "CheckOutUDF1": vCheckOutUDF1, "CheckOutUDF2": vCheckOutUDF2, "CheckOutUDF3": vCheckOutUDF3, "CheckOutUDF4": vCheckOutUDF4, "CheckOutUDF5": vCheckOutUDF5
                };
                arrItems.push(data);



            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Assets)') {
            //if (!ValidatePurchaseDate()) {
            //    $('#DivLoading').hide();
            //    $('#btnSave').removeProp("disabled");
            //    closeImportInfoModel();
            //    return;
            //}
            $('#myImportDataTable tbody tr').each(function () {
                var tempAssetID = $(this).find('#AssetID').text();
                var tempAssetName = $(this).find('#aAssetName_' + tempAssetID).val();
                var tempSerial = $(this).find('#aSerial_' + tempAssetID).val();
                var tempDescription = $(this).find('#aDescription_' + tempAssetID).val();
                var tempMake = $(this).find('#aMake_' + tempAssetID).val();
                var tempModel = $(this).find('#aModel_' + tempAssetID).val();
                var tempToolCategory = $(this).find('#aToolCategory_' + tempAssetID).val();
                var tempPurchaseDate = $(this).find('#aPurchaseDate_' + tempAssetID).val();


                var tempPurchasePrice = $(this).find('#aPurchasePrice_' + tempAssetID).val();
                var tempDepreciatedValue = $(this).find('#aDepreciatedValue_' + tempAssetID).val();
                var tempAssetCategory = $(this).find('#aAssetCategoryValue_' + tempAssetID).val();

                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var vUDF6 = $(this).find('#aUDF6').val();
                var vUDF7 = $(this).find('#aUDF7').val();
                var vUDF8 = $(this).find('#aUDF8').val();
                var vUDF9 = $(this).find('#aUDF9').val();
                var vUDF10 = $(this).find('#aUDF10').val();


                var data = {
                    "ID": tempAssetID, "AssetName": tempAssetName, "Serial": tempSerial, "Description": tempDescription,
                    "Make": tempMake, "Model": tempModel, "ToolCategory": tempToolCategory, "PurchaseDateString": tempPurchaseDate,
                    "PurchasePrice": tempPurchasePrice, "DepreciatedValue": tempDepreciatedValue, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5,
                    UDF6: vUDF6, UDF7: vUDF7, UDF8: vUDF8, UDF9: vUDF9, UDF10: vUDF10,
                    "AssetCategory": tempAssetCategory
                };

                arrItems.push(data);

            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempQuickListID = $(this).find('#QuickListID').text();
                var tempQuickListname = $(this).find('#aQuickListname_' + tempQuickListID).val();
                var tempComments = $(this).find('#aComments_' + tempQuickListID).val();
                var tempItemNumber = $(this).find('#aItemNumber_' + tempQuickListID).val();
                var tempQuantity = $(this).find('#aQuantity_' + tempQuickListID).val();
                var vUDF1 = $(this).find('#aUDF1').val();
                var vUDF2 = $(this).find('#aUDF2').val();
                var vUDF3 = $(this).find('#aUDF3').val();
                var vUDF4 = $(this).find('#aUDF4').val();
                var vUDF5 = $(this).find('#aUDF5').val();

                var data = {
                    "ID": tempQuickListID, "QuickListname": tempQuickListname, "Comments": tempComments,
                    "ItemNumber": tempItemNumber, "Quantity": tempQuantity, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5
                };
                arrItems.push(data);
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Kits)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempKitID = $(this).find('#KitID').text();
                var tempKitPartNumber = $(this).find('#aKitPartNumber_' + tempKitID).val();

                var tempKitItemNumber = $(this).find('#aKitItemNumber_' + tempKitID).val();
                var tempQuantityPerKit = $(this).find('#aQuantityPerKit_' + tempKitID).val();
                var tempOnHandQuantity = $(this).find('#aOnHandQuantity_' + tempKitID).val();
                var tempIsBuildBreak = 1;
                if ($(this).find("input[type='checkbox'][id*='aIsBuildBreak_" + tempKitID + "']").is(':checked'))
                    tempIsBuildBreak = true;
                else
                    tempIsBuildBreak = false;
                var tempIsDelete = 1;
                if ($(this).find("input[type='checkbox'][id*='aIsDelete_" + tempKitID + "']").is(':checked'))
                    tempIsDelete = true;
                else
                    tempIsDelete = false;

                var data = {
                    "ID": tempKitID, "KitPartNumber": tempKitPartNumber, "ItemNumber": tempKitItemNumber, "QuantityPerKit": tempQuantityPerKit,"OnHandQuantity":tempOnHandQuantity, "IsBuildBreak": tempIsBuildBreak, "IsDeleted": tempIsDelete
                };
                arrItems.push(data);
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemManufacturer)') {
            $('#myImportDataTable tbody tr').each(function () {
                var tempManufacturerID = $(this).find('#ManufacturerID').text();
                var tempItemnumber = $(this).find('#aItemNumber_' + tempManufacturerID).val();

                var tempManufacturerName = $(this).find('#aManufacturerName_' + tempManufacturerID).val();
                var tempManufacturerNumber = $(this).find('#aManufacturerNumber_' + tempManufacturerID).val();

                var tempIsDefault = 1;
                if ($(this).find("input[type='checkbox'][id*='aIsDefault_" + tempManufacturerID + "']").is(':checked'))
                    tempIsDefault = true;
                else
                    tempIsDefault = false;

                var data = {
                    "ID": tempManufacturerID, "Itemnumber": tempItemnumber, "ManufacturerName": tempManufacturerName, "ManufacturerNumber": tempManufacturerNumber, "IsDefault": tempIsDefault
                };
                arrItems.push(data);
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemSupplier)') {
            if (!isUniqueSupplierPartNumber()) {
                $('#DivLoading').hide();
                $('#btnSave').removeProp("disabled");
                closeImportInfoModel();
                return;
            }

            $('#myImportDataTable tbody tr').each(function () {
                var tempSupplierID = $(this).find('#SupplierID').text();
                var tempItemnumber = $(this).find('#aItemNumber_' + tempSupplierID).val();

                var tempSupplierName = $(this).find('#aSupplierName_' + tempSupplierID).val();
                var tempSupplierNumber = $(this).find('#aSupplierNumber_' + tempSupplierID).val();
                var tempBlanketPOID = $(this).find('#aBlanketPOID_' + tempSupplierID).val();

                var tempIsDefault = 1;
                if ($(this).find("input[type='checkbox'][id*='aIsDefault_']").is(':checked'))
                    tempIsDefault = true;
                else
                    tempIsDefault = false;

                var data = {
                    "ID": tempSupplierID, "Itemnumber": tempItemnumber, "SupplierName": tempSupplierName, "SupplierNumber": tempSupplierNumber, "IsDefault": tempIsDefault, "BlanketPOName": tempBlanketPOID
                };
                arrItems.push(data);
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BarcodeMaster)') {
            if (!checkModuleName()) {
                $('#DivLoading').hide();
                $('#btnSave').removeProp("disabled");
                closeImportInfoModel();
                return;
            }
            $('#myImportDataTable tbody tr').each(function () {
                var tempBarcodeID = $(this).find('#BarcodeID').text();
                var tempModuleName = $(this).find('#aModuleName_' + tempBarcodeID).val();
                var tempItemnumber = $(this).find('#aItemNumber_' + tempBarcodeID).val();
                var tempBarCodeString = $(this).find('#aBarCodeString_' + tempBarcodeID).val();
                var tempBinNumber = $(this).find('#aBinNumber_' + tempBarcodeID).val();



                var data = {
                    "ID": tempBarcodeID, "Itemnumber": tempItemnumber, "ModuleName": tempModuleName, "BarCodeString": tempBarCodeString, "BinNumber": tempBinNumber
                };
                arrItems.push(data);
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UDF)') {
            //if (!checkModuleName()) {
            //    $('#DivLoading').hide();
            //    $('#btnSave').removeProp("disabled");
            //    closeImportInfoModel();
            //    return;
            //}
            $('#myImportDataTable tbody tr').each(function () {
                var tempUDFID = $(this).find('#UDFID').text();
                var tempModuleName = $(this).find('#aModuleName_' + tempUDFID).val();
                var tempControlType = $(this).find('#aControlType_' + tempUDFID).val();
                var tempUDFName = $(this).find('#aUDFName_' + tempUDFID).val();
                var tempUDFColumnName = $(this).find('#aUDFColumnName_' + tempUDFID).val();
                var tempDefaultValue = $(this).find('#aDefaultValue_' + tempUDFID).val();
                var tempOptionName = $(this).find('#aOptionName_' + tempUDFID).val();
                var tempIsRequired = $(this).find('#aIsRequired_' + tempUDFID).is(":checked");
                var tempIsDeleted = $(this).find('#aIsDeleted_' + tempUDFID).is(":checked");
                var tempIncludeInNarrowSearch = $(this).find('#aIncludeInNarrowSearch_' + tempUDFID).is(":checked");



                var data = {
                    "ID": tempUDFID, "UDFName": tempUDFName, "UDFColumnName": tempUDFColumnName, "ModuleName": tempModuleName, "ControlType": tempControlType, "DefaultValue": tempDefaultValue, "OptionName": tempOptionName, "IsRequired": tempIsRequired, "IsDeleted": tempIsDeleted, "IncludeInNarrowsearch": tempIncludeInNarrowSearch
                };
                arrItems.push(data);
            });
        }
        var IDs = '';
        $('#ImportProcessing').modal();
        $.ajax({
            url: '@Url.Content("~/Import/SaveImport")'
                        , type: 'POST'
                        , data: { 'TableName': '@Session["CurModule"]', 'para': JSON.stringify(arrItems) }
                        , cache: false
                        , timeout: 2400000
                        , success: function (response) {
                            oTable.fnDraw();
                            //$('div#target').fadeToggle();
                            IDs = response.savedOnlyitemIds;

                            $("div#target").delay(2000).fadeOut(200, function () {
                                CheckValidation(true, response.allSuccesfulRecords);
                                $('#btnSave').removeProp("disabled");
                                $('#DivLoading').hide();
                            });

                            $("input#uploadZIPFile").hide();
                            $('#ImportInfoDialog').find("#ImportMSG").html("<b style='color:green'>Records imported successfully.</b>");
                            closeImportInfoModel();
                            $('#ImportInfoDialog').modal();
                            //                            $("#spanGlobalMessage").text(response.Message);
                            //                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        }
                        , error: function (xhr, status, error) {

                            var FinalErr = xhr.responseText;

                            $('#ImportInfoDialog').find("#ImportMSG").html(FinalErr);
                            closeImportInfoModel();
                            $('#ImportInfoDialog').modal();
                            //                            $("#spanGlobalMessage").text(message.statusText);
                            //                            $('div#target').fadeToggle();
                            //                            $("div#target").delay(2000).fadeOut(200);
                            $('#btnSave').removeProp("disabled");
                            //$('#DivLoading').hide();
                        },
            complete: function () {
                if ($.trim($('#ddlModule option:selected').text()) == 'Items') {

                    if (document.getElementById("uploadZIPFile").value != '') {

                        uploadZIPFile(IDs);
                    }
                }


            }
        });


    });
    function uploadZIPFile(IDs) {
        $("#loading")
 .ajaxStart(function () {
     $(this).show();
 })
 .ajaxComplete(function () {
     $(this).hide();
 });

        $.ajaxFileUpload
    (
        {
            url: '/api/fileupload/uploadZIPFILE',
            secureuri: false,
            type: "POST",

            fileElementId: 'uploadZIPFile',
            dataType: 'json',
            success: function (data, status) {
                //window.location.reload();
            },
            error: function (xhr) {

            }
        }
    )
        return false;
    }
    function parseMDY(txtDate) {


        var currVal = txtDate;

        if (currVal == '')

            return false;
        //Declare Regex

        var rxDatePattern = /^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$/;

        var dtArray = currVal.match(rxDatePattern); // is format OK?

        if (dtArray == null)

            return false;

        //Checks for mm/dd/yyyy format.

        dtMonth = dtArray[1];

        dtDay = dtArray[3];

        dtYear = dtArray[5];
        if (dtMonth < 1 || dtMonth > 12)

            return false;

        else if (dtDay < 1 || dtDay > 31)

            return false;

        else if ((dtMonth == 4 || dtMonth == 6 || dtMonth == 9 || dtMonth == 11) && dtDay == 31)

            return false;

        else if (dtMonth == 2) {

            var isleap = (dtYear % 4 == 0 && (dtYear % 100 != 0 || dtYear % 400 == 0));

            if (dtDay > 29 || (dtDay == 29 && !isleap))

                return false;

        }

        return true;

    }
    function ValidatePurchaseDate() {
        var checkval = false;
        $('#myImportDataTable tbody tr').each(function () {
            var strmsg = ''
            var tempAssetID = $(this).find('#AssetID').text();
            var tempPurchaseDate = $(this).find('#aPurchaseDate_' + tempAssetID).val();
            if (tempPurchaseDate != '') {

                if (parseMDY(tempPurchaseDate)) {
                    $(this).find('#aPurchaseDate_' + tempAssetID).css('border-color', '#DDD');
                }
                else {
                    checkval = true;
                    $(this).find('#aPurchaseDate_' + tempAssetID).css('border-color', 'red');

                    strmsg = 'Purchase Date should be in mm/dd/yyyy format.';
                }
            }
            if (strmsg != '') {

                $(this).find('#Reason').html(strmsg);
                $(this).find('#Status').html('Fail');
                $(this).find('#Status').css('color', 'red');
                $(this).find('#Reason').css('color', 'red');
                $(this).css("background-color", "pink");
            }
            else {
                if ($(this).find('#Status').html() != 'Success') {
                    $(this).find('#Reason').html('N/A');
                    $(this).find('#Status').html('N/A');
                    $(this).find('#Status').css('color', '#000000');
                    $(this).find('#Reason').css('color', '#000000');
                }
                if ($(this).attr("class") == 'even') {
                    $(this).css("background-color", "#FFF");
                }
                else {
                    $(this).css("background-color", "#EFF7FF");
                }
            }

        });
        if (checkval == true) {
            return false;

        }
        else {
            return true;
        }
    }
    $('#btnCancel').click(function () {

        $.ajax({
            url: '@Url.Content("~/Import/ClearCurrentResourceList")'
                        , type: 'POST'
                        , cache: false
                        , success: function (response) {
                            oTable.fnDraw();
                            $("#divbtnBlock").hide();
                        }
                        , error: function (message) {

                        }
        });


    });
    $('#ddlModule').change(function () {
        var selectedText = $('#ddlModule option:selected').attr('text');
        var selectedVal = $('#ddlModule option:selected').attr('value');

        if (selectedVal != "") {
            $.ajax({
                url: '@Url.Content("~/Import/SetSelectedModule")'
                                        , type: 'GET'
                                        , data: { 'CurModule': selectedVal }
                                        , contentType: "application/json"
                                        , success: function (result) { }
                                        , error: function (msg) { }
            });
        }
    });
    function closeImportInfoModel() {
        $.modal.impl.close();
    }

    function closeFromOk() {
        $.modal.impl.close();
    }

    function closeErrorDialog() {
        $.modal.impl.close();
        return false;
    }
</script>
@if (Session["CurModulevalue"] != null)
{
    <script language="javascript" type="text/javascript">
        var drpSelectValue = '@Session["CurModulevalue"].ToString()';
        var drpSelectText = '@Session["CurModule"].ToString()';
        $("#ddlModule").val(drpSelectValue);
        //$('#ddlModule option:selected').attr('value') = drpSelectValue;
    </script>
}
@if (Session["importedData"] != null)
{
    <script language="javascript" type="text/javascript">
        $("#divbtnBlock").show();
        //var LoadAjaxSource = $('#ddlModule option:selected').attr('text');
        //$("#ddlModule").val(drpSelectValue);

        var ColumnObject = new Array();
        var UpdateURL;
        var selectedModuleVal = $('#ddlModule option:selected').attr('value');

        if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster)') {
            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aItemNumber_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='InvLocId' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }

                if ('@arrcolumns.Contains("locationname")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.BinNumber == null ? "" : obj.aData.BinNumber.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aLocationName_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("customerownedquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDatacustomerownedQnt = obj.aData.customerownedquantity == null ? "" : obj.aData.customerownedquantity;
                            return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempDatacustomerownedQnt + "'  class='importtext-box' id='acustomerownedquantity_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("consignedquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataconsignedQnt = obj.aData.consignedquantity == null ? "" : obj.aData.consignedquantity;
                            return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempDataconsignedQnt + "'  class='importtext-box' id='aconsignedquantity_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("cost")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDatacost = obj.aData.Cost == null ? "" : obj.aData.Cost;
                            return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempDatacost + "'  class='importtext-box' id='acost_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("serialnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataserialnumber = obj.aData.SerialNumber == null ? "" : obj.aData.SerialNumber;
                            return "<input type='text' maxLength='128'   value='" + tempDataserialnumber + "'  class='importtext-box' id='aSerialNumber_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("lotnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDatalotnumber = obj.aData.LotNumber == null ? "" : obj.aData.LotNumber;
                            return "<input type='text' maxLength='128'   value='" + tempDatalotnumber + "'  class='importtext-box' id='aLotNumber_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("expirationdate")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value

                            var tempDataexpirydate = obj.aData.Expiration == null ? "" : obj.aData.Expiration;
                            var Date = tempDataexpirydate.split(' ');
                            return "<input type='text' maxLength='128'   value='" + Date[0] + "'  class='importtext-box' id='aExpiration_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                //                if ('@arrcolumns.Contains("receiveddate")' == 'True') {
                //                    ColumnObject.push({
                //                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                //                        "fnRender": function (obj, val) {
                //                            //limitField.value
                //                            var tempDatareceivedate = obj.aData.Received == null ? "" : obj.aData.Received;
                //                            return "<input type='text' maxLength='128'   onblur='return ValidateValueWithDataType();' value='" + tempDatareceivedate + "'  class='importtext-box' id='aReceived_" + obj.aData.ID + "' style='width:300px;' />"

                //                        }
                //                    });
                //                }

            });

        }
        if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.eVMISetup)') {
            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aItemNumber_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='InvLocId' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }

                if ('@arrcolumns.Contains("locationname")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.BinNumber == null ? "" : obj.aData.BinNumber.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aLocationName_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("minimumquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempminimumquantity = obj.aData.MinimumQuantity == null ? "" : obj.aData.MinimumQuantity;
                            return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempminimumquantity + "'  class='importtext-box' id='aminimumquantity_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("maximumquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempMaximumQuantity = obj.aData.MaximumQuantity == null ? "" : obj.aData.MaximumQuantity;
                            return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempMaximumQuantity + "'  class='importtext-box' id='amaximumquantity_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("criticalquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempCriticalQuantity = obj.aData.CriticalQuantity == null ? "" : obj.aData.CriticalQuantity;
                            return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);' onblur='return ValidateValueWithDataType();' value='" + tempCriticalQuantity + "'  class='importtext-box' id='acriticalquantity_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("sensorid")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataSensorId = obj.aData.SensorId == null ? "" : obj.aData.SensorId;
                            return "<input type='text' maxLength='128'  onkeypress='return isNumberKey(event);'  value='" + tempDataSensorId + "'  class='importtext-box' id='aSensorAddress_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("sensorport")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataSensorPort = obj.aData.SensorPort == null ? "" : obj.aData.SensorPort;
                            return "<input type='text' maxLength='128'  value='" + tempDataSensorPort + "'  class='importtext-box' id='aSensorPort_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("isdefault")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var isdefault = obj.aData.IsDefault == null ? "" : obj.aData.IsDefault;
                            if (isdefault != "" || isdefault == "true") {
                                isdefault = "checked=\"checked\""
                            }
                            else { isdefault = ""; }
                            return "<input type='checkbox'" + isdefault + "id='aisdefault_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("isdeleted")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var isdeleted = obj.aData.IsDeleted == null ? "" : obj.aData.IsDeleted;

                            if (isdeleted != "" || isdeleted == "TRUE") {
                                isdeleted = "checked=\"checked\""
                            }
                            else { isdeleted = ""; }
                            return "<input type='checkbox'" + isdeleted + "id='aisdeleted_" + obj.aData.ID + "'  />"
                        }
                    });
                }


            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster)') {
            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("toolname")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.ToolName == null ? "" : obj.aData.ToolName.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aToolName_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='ToolID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("serial")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.Serial == null ? "" : obj.aData.Serial.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aSerial_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("description")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.Description == null ? "" : obj.aData.Description.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' class='importtext-box' id='aDescription_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("cost")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.Cost == null ? "" : obj.aData.Cost;
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onkeypress='return isNumberKey(event);' class='numericDecimalinput importtext-box' id='aCost_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("quantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.Quantity == null ? "" : obj.aData.Quantity;
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();'  onkeypress='return isNumberKey(event);' class='numericDecimalinput importtext-box' id='aQuantity_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("toolcategory")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.ToolCategory == null ? "" : obj.aData.ToolCategory.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aToolCategory_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("location")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.Location == null ? "" : obj.aData.Location.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aLocation_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "' maxLength='255' class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "' maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255' class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("isgroupofitems")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempisgrpitems = obj.aData.IsGroupOfItems == null ? "0" : obj.aData.IsGroupOfItems;
                            if (tempisgrpitems != "" || tempisgrpitems == "1") {
                                tempisgrpitems = "checked=\"checked\""
                            }
                            else { tempisgrpitems = ""; }
                            return "<input type='checkbox'" + tempisgrpitems + " id='aisgroupofitems_" + obj.aData.ID + "' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("technician")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempTechnician = obj.aData.Technician == null ? "" : obj.aData.Technician.substring(0, 255);
                            return "<input type='text' value='" + tempTechnician + "'  maxLength='255' class='importtext-box'  id='aTechnician_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("checkoutquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCheckOutQty = obj.aData.CheckOutQuantity == null ? "" : obj.aData.CheckOutQuantity;
                            return "<input type='text' maxLength='128'  value='" + tempCheckOutQty + "' onblur='return ValidateValueWithDataType();'  onkeypress='return isNumberKey(event);' class='numericDecimalinput importtext-box' id='aCheckOutQty_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("checkinquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCheckInQty = obj.aData.CheckInQuantity == null ? "" : obj.aData.CheckInQuantity;
                            return "<input type='text' maxLength='128'  value='" + tempCheckInQty + "' onblur='return ValidateValueWithDataType();'  onkeypress='return isNumberKey(event);' class='numericDecimalinput importtext-box' id='aCheckInQty_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("checkoutudf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCheckOutUDF1 = obj.aData.CheckOutUDF1 == null ? "" : obj.aData.CheckOutUDF1;
                            return "<input type='text' maxLength='128'  value='" + tempCheckOutUDF1 + "' class='importtext-box' id='aCheckOutUDF1' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("checkoutudf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCheckOutUDF2 = obj.aData.CheckOutUDF2 == null ? "" : obj.aData.CheckOutUDF2;
                            return "<input type='text' maxLength='128'  value='" + tempCheckOutUDF2 + "' class='importtext-box' id='aCheckOutUDF2' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("checkoutudf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCheckOutUDF3 = obj.aData.CheckOutUDF3 == null ? "" : obj.aData.CheckOutUDF3;
                            return "<input type='text' maxLength='128'  value='" + tempCheckOutUDF3 + "' class='importtext-box' id='aCheckOutUDF3' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("checkoutudf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCheckOutUDF4 = obj.aData.CheckOutUDF4 == null ? "" : obj.aData.CheckOutUDF4;
                            return "<input type='text' maxLength='128'  value='" + tempCheckOutUDF4 + "' class='importtext-box' id='aCheckOutUDF4' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("checkoutudf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCheckOutUDF5 = obj.aData.CheckOutUDF5 == null ? "" : obj.aData.CheckOutUDF5;
                            return "<input type='text' maxLength='128'  value='" + tempCheckOutUDF5 + "' class='importtext-box' id='aCheckOutUDF5' style='width:300px;' />"

                        }
                    });
                }
            });


        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Assets)') {
            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("assetname")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.AssetName == null ? "" : obj.aData.AssetName.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aAssetName_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='AssetID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("description")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.Description == null ? "" : obj.aData.Description.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aDescription_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("make")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.Make == null ? "" : obj.aData.Make.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aMake_" + obj.aData.ID + "' style='width:300px;' />"
                            "<span id='ToolID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("model")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.Model == null ? "" : obj.aData.Model.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aModel_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("serial")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.Serial == null ? "" : obj.aData.Serial.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aSerial_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("toolcategory")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.ToolCategory == null ? "" : obj.aData.ToolCategory.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aToolCategory_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("purchasedate")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value

                            var tempDataPullQnt = obj.aData.PurchaseDateString.split(' ')[0] == null ? "" : obj.aData.PurchaseDateString.split(' ')[0];
                            if (tempDataPullQnt != "") {
                                return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aPurchaseDate_" + obj.aData.ID + "' style='width:300px;' />"
                            }
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'  class='importtext-box' id='aPurchaseDate_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("purchaseprice")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.PurchasePrice == null ? "" : obj.aData.PurchasePrice;
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'   class='numericDecimalinput importtext-box' id='aPurchasePrice_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("depreciatedvalue")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.DepreciatedValue == null ? "" : obj.aData.DepreciatedValue;
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "'   class='numericDecimalinput importtext-box' id='aDepreciatedValue_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }


                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "' maxLength='255' class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "' maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255' class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("udf6")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF6 = obj.aData.UDF6 == null ? "" : obj.aData.UDF6.substring(0, 255);
                            return "<input type='text' value='" + tempUDF6 + "' maxLength='255' class='importtext-box' id='aUDF6' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf7")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF7 = obj.aData.UDF7 == null ? "" : obj.aData.UDF7.substring(0, 255);
                            return "<input type='text' value='" + tempUDF7 + "' maxLength='255'  class='importtext-box'  id='aUDF7' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf8")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF8 = obj.aData.UDF8 == null ? "" : obj.aData.UDF8.substring(0, 255);
                            return "<input type='text' value='" + tempUDF8 + "'  maxLength='255'  class='importtext-box'  id='aUDF8' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf9")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF9 = obj.aData.UDF9 == null ? "" : obj.aData.UDF9.substring(0, 255);
                            return "<input type='text' value='" + tempUDF9 + "'  maxLength='255'  class='importtext-box'  id='aUDF9' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf10")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF10 = obj.aData.UDF10 == null ? "" : obj.aData.UDF10.substring(0, 255);
                            return "<input type='text' value='" + tempUDF10 + "'  maxLength='255' class='importtext-box'  id='aUDF10' style='width:100px;' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("assetcategory")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + obj.aData.AssetCategory + "'  maxLength='255' class='importtext-box'  id='aAssetCategoryValue_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }

            });


        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.LocationMaster)') {
            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("location")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.BinNumber == null ? "" : obj.aData.BinNumber.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aLocation_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='LocationID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "' maxLength='255' class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "' maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255' class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataLocationSession")';
            });


        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ToolCategory)') {
            $(function (event) {
                // ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("toolcategory")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            //limitField.value
                            var tempDataPullQnt = obj.aData.ToolCategory == null ? "" : obj.aData.ToolCategory.substring(0, 128);
                            return "<input type='text' maxLength='128'  value='" + tempDataPullQnt + "' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aToolCategory_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='ToolCategoryID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "' maxLength='255' class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "' maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255' class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataToolCategorySession")';
            });


        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CategoryMaster)') {
            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempDataPullQnt = obj.aData.Category == null ? "" : obj.aData.Category.substring(0, 128);
                        return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='128'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aCategory_" + obj.aData.ID + "' style='width:300px;' />" +
                                                "<span id='CatID' style='display:none'>" + obj.aData.ID + "</span>"
                    }
                });

                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({

                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }

                    });

                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataCategorySession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission)') {
            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("name")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.QuickListname == null ? "" : obj.aData.QuickListname;
                            return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='128'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aQuickListname_" + obj.aData.ID + "' style='width:300px;' />" +
                                                "<span id='QuickListID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("comment")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.Comments == null ? "" : obj.aData.Comments;
                            return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='128'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aComments_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber;
                            return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='128'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aItemNumber_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }

                if ('@arrcolumns.Contains("quantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.Quantity == null ? "" : obj.aData.Quantity;
                            return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='128' onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType();' class='numericDecimalinput importtext-box' id='aQuantity_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({

                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }

                    });

                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CostUOMMaster)') {
            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("costuom")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.CostUOM == null ? "" : obj.aData.CostUOM.substring(0, 50);
                            return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='50'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aCost_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='CostID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("costuomvalue")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt1 = obj.aData.CostUOMValue == null ? "" : obj.aData.CostUOMValue;
                            return "<input type='text' value='" + tempDataPullQnt1 + "'  maxLength='50' onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType();' class='numericDecimalinput importtext-box' id='aCostvalue_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='Costvalue' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataCostUOMSession")';
            });
        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster)') {
            $(function (event) {
                // ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("inventoryclassification")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.InventoryClassification == null ? "" : obj.aData.InventoryClassification.substring(0, 50);
                            return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='50'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aInv_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='InvID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("baseofinventory")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt1 = obj.aData.BaseOfInventory == null ? "" : obj.aData.BaseOfInventory;
                            return "<input type='text' value='" + tempDataPullQnt1 + "'  maxLength='50'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aBase_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='Base' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("rangestart")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt2 = obj.aData.RangeStart == null ? "" : obj.aData.RangeStart;
                            return "<input type='text' value='" + tempDataPullQnt2 + "'  maxLength='10'  class='numericDecimalinput importtext-box' id='aStart_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='Start' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("rangeend")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt3 = obj.aData.RangeEnd == null ? "" : obj.aData.RangeEnd;
                            return "<input type='text' value='" + tempDataPullQnt3 + "'  maxLength='10'  class='numericDecimalinput importtext-box' id='aEnd_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='End' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataInventoryClassificationSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster)') {
            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("customer")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.Customer == null ? "" : obj.aData.Customer.substring(0, 255);
                            return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='255' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aCustomer_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='CustID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("account")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempAccount = obj.aData.Account == null ? "" : obj.aData.Account.substring(0, 255);
                            return "<input type='text' value='" + tempAccount + "'   maxLength='255'  onblur='return ValidateValueWithDataType();'  class='importtext-box' id='aAccount_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("contact")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempContact = obj.aData.Contact == null ? "" : obj.aData.Contact.substring(0, 512);
                            return "<input type='text' value='" + tempContact + "'  maxLength='512'  class='importtext-box' id='aContact_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("address")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempAddress = obj.aData.Address == null ? "" : obj.aData.Address.substring(0, 1024);
                            return "<input type='text' value='" + tempAddress + "'   maxLength='1024' class='importtext-box' id='aAddress_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("city")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCity = obj.aData.City == null ? "" : obj.aData.City.substring(0, 255);
                            return "<input type='text' value='" + tempCity + "'   maxLength='255' class='importtext-box' id='aCity_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("state")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempState = obj.aData.State == null ? "" : obj.aData.State.substring(0, 255);
                            return "<input type='text' value='" + tempState + "'   maxLength='255' class='importtext-box' id='aState_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("zipcode")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempZipCode = obj.aData.ZipCode == null ? "" : obj.aData.ZipCode.substring(0, 24);
                            return "<input type='text' value='" + tempZipCode + "'   maxLength='24' class='importtext-box' id='aZipCode_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("country")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCountry = obj.aData.Country == null ? "" : obj.aData.Country.substring(0, 64);
                            return "<input type='text' value='" + tempCountry + "'  maxLength='64'  class='importtext-box' id='aCountry_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("phone")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempPhone = obj.aData.Phone == null ? "" : obj.aData.Phone.substring(0, 20);
                            return "<input type='text' value='" + tempPhone + "'  maxLength='20'  class='importtext-box' id='aPhone_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("email")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempEmail = obj.aData.Email == null ? "" : obj.aData.Email.substring(0, 255);
                            return "<input type='text' value='" + tempEmail + "'  maxLength='255'  onblur='return CheckEmailValidataion(this);' class='importtext-box' id='aEmail_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("remarks")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {


                            var remarks = obj.aData.Remarks == null ? "" : obj.aData.Remarks.substring(0, 255);
                            return "<input type='text' value='" + remarks + "'  maxLength='255'  class='importtext-box'  id='aRemarks_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }


                UpdateURL = '@Url.Content("~/Import/UpdateDataCustomerSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.FreightTypeMaster)') {
            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("freighttype")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.FreightType == null ? "" : obj.aData.FreightType.substring(0, 128);
                            return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aFreightType_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='FreightID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataFreightTypeSession")';
            });


        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GLAccountsMaster)') {
            $(function (event) {
                // ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("glaccount")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.GLAccount == null ? "" : obj.aData.GLAccount.substring(0, 128);
                            return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aGLAccount_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='GLAccountID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("description")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDescription = obj.aData.Description == null ? "" : obj.aData.Description.substring(0, 1024);
                            return "<input type='text' value='" + tempDescription + "' maxLength='1024'  class='importtext-box' id='aDesc_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataGLAccountSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.GXPRConsignedJobMaster)') {
            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }
                ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempDataPullQnt = obj.aData.GXPRConsigmentJob == null ? "" : obj.aData.GXPRConsigmentJob.substring(0, 128);
                        return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aGXPRConsinged_" + obj.aData.ID + "' style='width:300px;' />" +
                                                "<span id='GXPRID' style='display:none'>" + obj.aData.ID + "</span>"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                        return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                        return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                        return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                        return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                        return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                    }
                });

                UpdateURL = '@Url.Content("~/Import/UpdateDataGXPRConsignedSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.JobTypeMaster)') {
            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempDataPullQnt = obj.aData.JobType == null ? "" : obj.aData.JobType.substring(0, 128);
                        return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128' onblur='return checkBlankValidation(this);' class='importtext-box' id='aJobType_" + obj.aData.ID + "' style='width:300px;' />" +
                                                "<span id='JobTypeID' style='display:none'>" + obj.aData.ID + "</span>"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                        return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                        return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                        return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                        return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                    }
                });
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                        return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                    }
                });

                UpdateURL = '@Url.Content("~/Import/UpdateDataJobTypeSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ShipViaMaster)') {
            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("shipvia")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.ShipVia == null ? "" : obj.aData.ShipVia.substring(0, 128);
                            return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aShipVia_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='ShipViaID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataShipViaSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.TechnicianMaster)') {
            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("technician")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.Technician == null ? "" : obj.aData.Technician.substring(0, 128);
                            return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aTechnician_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='TechnicianID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("techniciancode")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.TechnicianCode == null ? "" : obj.aData.TechnicianCode.substring(0, 128);
                            return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aTechnicianCode_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataTechnicianSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ManufacturerMaster)') {
            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("manufacturer")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.Manufacturer == null ? "" : obj.aData.Manufacturer.substring(0, 128);
                            return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aManufacturer_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='ManufacturerID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataManufacturerSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.MeasurementTermMaster)') {
            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("measurementterm")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.MeasurementTerm == null ? "" : obj.aData.MeasurementTerm.substring(0, 128);
                            return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aMeasurementTerm_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='MeasurementTermID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataMeasurementTermSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster)') {
            $(function (event) {
                // ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("unit")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.Unit == null ? "" : obj.aData.Unit.substring(0, 128);
                            return "<input type='text' value='" + tempDataPullQnt + "' maxLength='128' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aUnit_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='UnitID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("description")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDescription = obj.aData.Description == null ? "" : obj.aData.Description.substring(0, 1024);
                            return "<input type='text' value='" + tempDescription + "' maxLength='1024' class='importtext-box' id='aDescription_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("odometer")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOdometer = obj.aData.Odometer == null ? "" : obj.aData.Odometer.substring(0, 128);
                            return "<input type='text' value='" + tempOdometer + "' maxLength='128' class='importtext-box' id='aOdometer_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("ophours")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOpHours = obj.aData.OpHours == null ? "" : obj.aData.OpHours;
                            return "<input type='text' value='" + tempOpHours + "' onkeypress='return isNumberKey(event);'  maxLength='10' class='importtext-box' id='aOpHours_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("serialno")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempSerialNo = obj.aData.SerialNo == null ? "" : obj.aData.SerialNo;
                            return "<input type='text' value='" + tempSerialNo + "'  onkeypress='return isNumberKey(event);'  class='importtext-box' id='aSerialNo_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("year")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempYear = obj.aData.Year == null ? "" : obj.aData.Year;
                            return "<input type='text' value='" + tempYear + "'  onkeypress='return isNumberKey(event);'  class='importtext-box' id='aYear_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("make")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempMake = obj.aData.Make == null ? "" : obj.aData.Make.substring(0, 128);
                            return "<input type='text' value='" + tempMake + "' maxLength='128' class='importtext-box' id='aMake_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("model")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempModel = obj.aData.Model == null ? "" : obj.aData.Model.substring(0, 128);
                            return "<input type='text' value='" + tempModel + "' maxLength='128' class='importtext-box' id='aModel_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("plate")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempPlate = obj.aData.Plate == null ? "" : obj.aData.Plate.substring(0, 128);
                            return "<input type='text' value='" + tempPlate + "' maxLength='128' class='importtext-box' id='aPlate_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("enginemodel")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempEngineModel = obj.aData.EngineModel == null ? "" : obj.aData.EngineModel.substring(0, 128);
                            return "<input type='text' value='" + tempEngineModel + "' maxLength='128' class='importtext-box' id='aEngineModel_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("engineserialno")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempEngineSerialNo = obj.aData.EngineSerialNo == null ? "" : obj.aData.EngineSerialNo.substring(0, 128);
                            return "<input type='text' value='" + tempEngineSerialNo + "' maxLength='128' class='importtext-box' id='aEngineSerialNo_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("markupparts")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempMarkupParts = obj.aData.MarkupParts == null ? "" : obj.aData.MarkupParts;
                            return "<input type='text' value='" + tempMarkupParts + "' onkeypress='return isNumberKey(event);'  class='importtext-box' id='aMarkupParts_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("markuplabour")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempMarkupLabour = obj.aData.MarkupLabour == null ? "" : obj.aData.MarkupLabour;
                            return "<input type='text' value='" + tempMarkupLabour + "'  onkeypress='return isNumberKey(event);' class='importtext-box' id='aMarkupLabour_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

                UpdateURL = '@Url.Content("~/Import/UpdateDataUnitSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster)') {
            $(function (event) {
                // ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("suppliername")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDataPullQnt = obj.aData.SupplierName == null ? "" : obj.aData.SupplierName.substring(0, 255);
                            return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='255' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aSupplier_" + obj.aData.ID + "' style='width:300px;' />" +
                                                    "<span id='SupplierID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("suppliercolor")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempSupplierColor = obj.aData.SupplierColor == null ? "" : obj.aData.SupplierColor.substring(0, 127);
                            return "<input type='text' value='" + tempSupplierColor + "'  maxLength='127' class='importtext-box' id='aSupplierColor_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("description")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDescription = obj.aData.Description == null ? "" : obj.aData.Description.substring(0, 1024);
                            return "<input type='text' value='" + tempDescription + "'  maxLength='1024' class='importtext-box' id='aDescription_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                    //                ColumnObject.push({ "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    //                    "fnRender": function (obj, val) {
                    //                        var tempAccountNo = obj.aData.AccountNo == null ? "" : obj.aData.AccountNo.substring(0, 64);
                    //                        return "<input type='text' value='" + tempAccountNo + "'  maxLength='64'  class='importtext-box' id='aAccountNo_" + obj.aData.ID + "' style='width:100px;'  />"
                    //                    }
                    //                });
                }
                //                if ('@arrcolumns.Contains("receiverid")' == 'True') {
                //                    ColumnObject.push({
                //                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                //                        "fnRender": function (obj, val) {
                //                            var tempReceiverID = obj.aData.ReceiverID == null ? "" : obj.aData.ReceiverID.substring(0, 64);
                //                            return "<input type='text' value='" + tempReceiverID + "'  maxLength='64' class='importtext-box' id='aReceiverID_" + obj.aData.ID + "' style='width:100px;'  />"
                //                        }
                //                    });
                //                }

                if ('@arrcolumns.Contains("branchnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempBranchNumber = obj.aData.BranchNumber == null ? "" : obj.aData.BranchNumber.substring(0, 127);
                            return "<input type='text' value='" + tempBranchNumber + "'  maxLength='127' class='importtext-box' id='aBranchNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("maximumordersize")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempMaximumOrderSize = obj.aData.MaximumOrderSize == null ? "" : obj.aData.MaximumOrderSize;
                            return "<input type='text' value='" + tempMaximumOrderSize + "'  maxLength='127' class='importtext-box' id='aMaximumOrderSize_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("address")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempAddress = obj.aData.Address == null ? "" : obj.aData.Address.substring(0, 1027);
                            return "<input type='text' value='" + tempAddress + "'  maxLength='1027' class='importtext-box' id='aAddress_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("city")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCity = obj.aData.City == null ? "" : obj.aData.City.substring(0, 127);
                            return "<input type='text' value='" + tempCity + "'  maxLength='127' class='importtext-box' id='aCity_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("state")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempState = obj.aData.State == null ? "" : obj.aData.State.substring(0, 255);
                            return "<input type='text' value='" + tempState + "'  maxLength='255' class='importtext-box' id='aState_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("zipcode")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempZipCode = obj.aData.ZipCode == null ? "" : obj.aData.ZipCode.substring(0, 20);
                            return "<input type='text' value='" + tempZipCode + "'  maxLength='20' class='importtext-box' id='aZipCode_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("country")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCountry = obj.aData.Country == null ? "" : obj.aData.Country.substring(0, 127);
                            return "<input type='text' value='" + tempCountry + "'  maxLength='127' class='importtext-box' id='aCountry_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("contact")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempContact = obj.aData.Contact == null ? "" : obj.aData.Contact.substring(0, 127);
                            return "<input type='text' value='" + tempContact + "'  maxLength='127' class='importtext-box' id='aContact_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("phone")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempPhone = obj.aData.Phone == null ? "" : obj.aData.Phone.substring(0, 20);
                            return "<input type='text' value='" + tempPhone + "'  maxLength='20' class='importtext-box' id='aPhone_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("fax")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempFax = obj.aData.Fax == null ? "" : obj.aData.Fax.substring(0, 20);
                            return "<input type='text' value='" + tempFax + "' maxLength='20'  class='importtext-box' id='aFax_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("issendtovendor")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempIsSendtoVendor = obj.aData.IsSendtoVendor == null ? "" : obj.aData.IsSendtoVendor;
                            if (tempIsSendtoVendor != "" || tempIsSendtoVendor == "true") {
                                tempIsSendtoVendor = "checked=\"checked\""
                            }
                            else { tempIsSendtoVendor = ""; }
                            return "<input type='checkbox'" + tempIsSendtoVendor + " id='aIsSendtoVendor_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("isvendorreturnasn")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempIsVendorReturnAsn = obj.aData.IsVendorReturnAsn == null ? "" : obj.aData.IsVendorReturnAsn;
                            if (tempIsVendorReturnAsn != "" || tempIsVendorReturnAsn == "true") {
                                tempIsVendorReturnAsn = "checked=\"checked\""
                            }
                            else { tempIsVendorReturnAsn = ""; }
                            return "<input type='checkbox'" + tempIsVendorReturnAsn + " id='aIsVendorReturnAsn_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("issupplierreceiveskitcomponents")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempIsSupplierReceivesKitComponents = obj.aData.IsSupplierReceivesKitComponents == null ? "" : obj.aData.IsSupplierReceivesKitComponents;
                            if (tempIsSupplierReceivesKitComponents != "" || tempIsSupplierReceivesKitComponents == "true") {
                                tempIsSupplierReceivesKitComponents = "checked=\"checked\""
                            }
                            else { tempIsSupplierReceivesKitComponents = ""; }
                            return "<input type='checkbox'" + tempIsSupplierReceivesKitComponents + " id='aIsSupplierReceivesKitComponents_" + obj.aData.ID + "' />"
                        }
                    });
                }

                //                if ('@arrcolumns.Contains("email")' == 'True') {
                //                    ColumnObject.push({
                //                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                //                        "fnRender": function (obj, val) {
                //                            var tempEmail = obj.aData.Email == null ? "" : obj.aData.Email.substring(0, 255);
                //                            return "<input type='text' value='" + tempEmail + "' maxLength='255'   onblur='return ValidateValueWithDataType();' class='importtext-box' id='aEmail_" + obj.aData.ID + "' style='width:100px;'  />"
                //                        }
                //                    });
                //                }
                //                if ('@arrcolumns.Contains("isemailpoinbody")' == 'True') {
                //                    ColumnObject.push({
                //                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                //                        "fnRender": function (obj, val) {
                //                            var tempIsEmailPOInBody = obj.aData.IsEmailPOInBody == null ? "false" : obj.aData.IsEmailPOInBody;
                //                            if (tempIsEmailPOInBody != "" || tempIsEmailPOInBody == "true") {
                //                                tempIsEmailPOInBody = "checked=\"checked\""
                //                            }
                //                            else { tempIsEmailPOInBody = ""; }
                //                            return "<input type='checkbox' " + tempIsEmailPOInBody + " id='aIsEmailPOInBody_" + obj.aData.ID + "'  />"
                //                        }
                //                    });
                //                }
                //                if ('@arrcolumns.Contains("isemailpoinpdf")' == 'True') {
                //                    ColumnObject.push({
                //                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                //                        "fnRender": function (obj, val) {
                //                            var tempIsEmailPOInPDF = obj.aData.IsEmailPOInPDF == null ? "false" : obj.aData.IsEmailPOInPDF;
                //                            if (tempIsEmailPOInPDF != "" || tempIsEmailPOInPDF == "true") {
                //                                tempIsEmailPOInPDF = "checked=\"checked\""
                //                            }
                //                            else { tempIsEmailPOInPDF = ""; }
                //                            return "<input type='checkbox' " + tempIsEmailPOInPDF + " id='aIsEmailPOInPDF_" + obj.aData.ID + "'  />"
                //                        }
                //                    });
                //                }
                //                if ('@arrcolumns.Contains("isemailpoincsv")' == 'True') {
                //                    ColumnObject.push({
                //                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                //                        "fnRender": function (obj, val) {
                //                            var tempIsEmailPOInCSV = obj.aData.IsEmailPOInCSV == null ? "false" : obj.aData.IsEmailPOInCSV;
                //                            if (tempIsEmailPOInCSV != "" || tempIsEmailPOInCSV == "true") {
                //                                tempIsEmailPOInCSV = "checked=\"checked\""
                //                            }
                //                            else { tempIsEmailPOInCSV = ""; }
                //                            return "<input type='checkbox' " + tempIsEmailPOInCSV + " id='aIsEmailPOInCSV_" + obj.aData.ID + "'  />"
                //                        }
                //                    });
                //                }
                //                if ('@arrcolumns.Contains("isemailpoinx12")' == 'True') {
                //                    ColumnObject.push({
                //                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                //                        "fnRender": function (obj, val) {
                //                            var tempIsEmailPOInX12 = obj.aData.IsEmailPOInX12 == null ? "" : obj.aData.IsEmailPOInX12;
                //                            if (tempIsEmailPOInX12 != "" || tempIsEmailPOInX12 == "true") {
                //                                tempIsEmailPOInX12 = "checked=\"checked\""
                //                            }
                //                            else { tempIsEmailPOInX12 = ""; }
                //                            return "<input type='checkbox'" + tempIsEmailPOInX12 + "id='aIsEmailPOInX12_" + obj.aData.ID + "' />"
                //                        }
                //                    });
                //                }
                if ('@arrcolumns.Contains("ordernumbertypeblank")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOrderNumberTypeBlank = obj.aData.OrderNumberTypeBlank == null ? "" : obj.aData.OrderNumberTypeBlank;
                            if (tempOrderNumberTypeBlank != "" || tempOrderNumberTypeBlank == "true") {
                                tempOrderNumberTypeBlank = "checked=\"checked\""
                            }
                            else { tempOrderNumberTypeBlank = ""; }
                            return "<input type='checkbox'" + tempOrderNumberTypeBlank + " id='aOrderNumberTypeBlank_" + obj.aData.ID + "' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("ordernumbertypefixed")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOrderNumberTypeFixed = obj.aData.OrderNumberTypeFixed == null ? "" : obj.aData.OrderNumberTypeFixed;
                            if (tempOrderNumberTypeFixed != "" || tempOrderNumberTypeFixed == "true") {
                                tempOrderNumberTypeFixed = "checked=\"checked\""
                            }
                            else { tempOrderNumberTypeFixed = ""; }
                            return "<input type='checkbox'" + tempOrderNumberTypeFixed + " id='aOrderNumberTypeFixed_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("ordernumbertypeblanketordernumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOrderNumberTypeBlanketOrderNumber = obj.aData.OrderNumberTypeBlanketOrderNumber == null ? "" : obj.aData.OrderNumberTypeBlanketOrderNumber;
                            if (tempOrderNumberTypeBlanketOrderNumber != "" || tempOrderNumberTypeBlanketOrderNumber == "true") {
                                tempOrderNumberTypeBlanketOrderNumber = "checked=\"checked\""
                            }
                            else { tempOrderNumberTypeBlanketOrderNumber = ""; }
                            return "<input type='checkbox'" + tempOrderNumberTypeBlanketOrderNumber + " id='aOrderNumberTypeBlanketOrderNumber_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("ordernumbertypeincrementingordernumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOrderNumberTypeIncrementingOrderNumber = obj.aData.OrderNumberTypeIncrementingOrderNumber == null ? "" : obj.aData.OrderNumberTypeIncrementingOrderNumber;
                            if (tempOrderNumberTypeIncrementingOrderNumber != "" || tempOrderNumberTypeIncrementingOrderNumber == "true") {
                                tempOrderNumberTypeIncrementingOrderNumber = "checked=\"checked\""
                            }
                            else { tempOrderNumberTypeIncrementingOrderNumber = ""; }
                            return "<input type='checkbox'" + tempOrderNumberTypeIncrementingOrderNumber + " id='aOrderNumberTypeIncrementingOrderNumber_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("ordernumbertypeincrementingbyday")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOrderNumberTypeIncrementingbyDay = obj.aData.OrderNumberTypeIncrementingbyDay == null ? "" : obj.aData.OrderNumberTypeIncrementingbyDay;
                            if (tempOrderNumberTypeIncrementingbyDay != "" || tempOrderNumberTypeIncrementingbyDay == "true") {
                                tempOrderNumberTypeIncrementingbyDay = "checked=\"checked\""
                            }
                            else { tempOrderNumberTypeIncrementingbyDay = ""; }
                            return "<input type='checkbox' " + tempOrderNumberTypeIncrementingbyDay + " id='aOrderNumberTypeIncrementingbyDay_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("ordernumbertypedateincrementing")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOrderNumberTypeDateIncrementing = obj.aData.OrderNumberTypeDateIncrementing == null ? "" : obj.aData.OrderNumberTypeDateIncrementing;
                            if (tempOrderNumberTypeDateIncrementing != "" || tempOrderNumberTypeDateIncrementing == "true") {
                                tempOrderNumberTypeDateIncrementing = "checked=\"checked\""
                            }
                            else { tempOrderNumberTypeDateIncrementing = ""; }
                            return "<input type='checkbox' " + tempOrderNumberTypeDateIncrementing + " id='aOrderNumberTypeDateIncrementing_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("ordernumbertypedate")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOrderNumberTypeDate = obj.aData.OrderNumberTypeDate == null ? "" : obj.aData.OrderNumberTypeDate;
                            if (tempOrderNumberTypeDate != "" || tempOrderNumberTypeDate == "true") {
                                tempOrderNumberTypeDate = "checked=\"checked\""
                            }
                            else { tempOrderNumberTypeDate = ""; }
                            return "<input type='checkbox' " + tempOrderNumberTypeDate + " id='aOrderNumberTypeDate_" + obj.aData.ID + "' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("accountnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempAccountNumber = obj.aData.AccountNumber == null ? "" : obj.aData.AccountNumber.substring(0, 255);
                            return "<input type='text' value='" + tempAccountNumber + "'  maxLength='255'  class='importtext-box'  id='aAccountNumber_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("accountname")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempAccountName = obj.aData.AccountName == null ? "" : obj.aData.AccountName.substring(0, 255);
                            return "<input type='text' value='" + tempAccountName + "'  maxLength='255'  class='importtext-box'  id='aAccountName_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("blanketponumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempBlanketPONumber = obj.aData.BlanketPONumber == null ? "" : obj.aData.BlanketPONumber.substring(0, 255);
                            return "<input type='text' value='" + tempBlanketPONumber + "'  maxLength='255'  class='importtext-box'  id='aBlanketPONumber_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("startdate")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempStartDate = obj.aData.StartDate == null ? "" : JSONDate(obj.aData.StartDate);
                            return "<input type='text' value='" + tempStartDate + "'  maxLength='255'  class='importtext-box'  id='aStartDate_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("enddate")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempEndDate = obj.aData.EndDate == null ? "" : JSONDate(obj.aData.EndDate);
                            return "<input type='text' value='" + tempEndDate + "'  maxLength='255'  class='importtext-box'  id='aEndDate_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("maxlimit")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempMaxLimit = obj.aData.MaxLimit == null ? "" : obj.aData.MaxLimit;
                            return "<input type='text' value='" + tempMaxLimit + "'  maxLength='255'  class='importtext-box'  id='aMaxLimit_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("donotexceed")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDoNotExceed = obj.aData.IsNotExceed == null ? "" : obj.aData.IsNotExceed;
                            if (tempDoNotExceed != "" || tempDoNotExceed == "true") {
                                tempDoNotExceed = "checked=\"checked\""
                            }
                            else { tempDoNotExceed = ""; }
                            return "<input type='checkbox' " + tempDoNotExceed + " id='aDoNotExceed_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("pullpurchasenumberfixed")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempPullPurchaseNumberFixed = obj.aData.PullPurchaseNumberFixed == null ? "" : obj.aData.PullPurchaseNumberFixed;
                            if (tempPullPurchaseNumberFixed != "" || tempPullPurchaseNumberFixed == "true") {
                                tempPullPurchaseNumberFixed = "checked=\"checked\""
                            }
                            else { tempPullPurchaseNumberFixed = ""; }
                            return "<input type='checkbox'" + tempPullPurchaseNumberFixed + " id='aPullPurchaseNumberFixed_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("pullpurchasenumberblanketorder")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempPullPurchaseNumberBlanketOrder = obj.aData.PullPurchaseNumberBlanketOrder == null ? "" : obj.aData.PullPurchaseNumberBlanketOrder;
                            if (tempPullPurchaseNumberBlanketOrder != "" || tempPullPurchaseNumberBlanketOrder == "true") {
                                tempPullPurchaseNumberBlanketOrder = "checked=\"checked\""
                            }
                            else { tempPullPurchaseNumberBlanketOrder = ""; }
                            return "<input type='checkbox'" + tempPullPurchaseNumberBlanketOrder + " id='aPullPurchaseNumberBlanketOrder_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("pullpurchasenumberdateincrementing")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempPullPurchaseNumberDateIncrementing = obj.aData.PullPurchaseNumberDateIncrementing == null ? "" : obj.aData.PullPurchaseNumberDateIncrementing;
                            if (tempPullPurchaseNumberDateIncrementing != "" || tempPullPurchaseNumberDateIncrementing == "true") {
                                tempPullPurchaseNumberDateIncrementing = "checked=\"checked\""
                            }
                            else { tempPullPurchaseNumberDateIncrementing = ""; }
                            return "<input type='checkbox'" + tempPullPurchaseNumberDateIncrementing + " id='aPullPurchaseNumberDateIncrementing_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("pullpurchasenumberdate")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempPullPurchaseNumberDate = obj.aData.PullPurchaseNumberDate == null ? "" : obj.aData.PullPurchaseNumberDate;
                            if (tempPullPurchaseNumberDate != "" || tempPullPurchaseNumberDate == "true") {
                                tempPullPurchaseNumberDate = "checked=\"checked\""
                            }
                            else { tempPullPurchaseNumberDate = ""; }
                            return "<input type='checkbox'" + tempPullPurchaseNumberDate + " id='aPullPurchaseNumberDate_" + obj.aData.ID + "' />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("lastpullpurchasenumberused")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempLastPullPurchaseNumberUsed = obj.aData.LastPullPurchaseNumberUsed == null ? "" : obj.aData.LastPullPurchaseNumberUsed.substring(0, 20);
                            return "<input type='text' value='" + tempLastPullPurchaseNumberUsed + "' maxLength='20'  class='importtext-box' id='aLastPullPurchaseNumberUsed_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                UpdateURL = '@Url.Content("~/Import/UpdateDataSupplierSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster)') {


            $(function (event) {
                //ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:450px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempDataPullQnt = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 100);
                        return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='100' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aItemNumber_" + obj.aData.ID + "' style='width:300px;' />" +
                                                "<span id='ItemID' style='display:none'>" + obj.aData.ID + "</span>"
                    }
                });
                if ('@arrcolumns.Contains("link1")') {

                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            return "<input type='text' maxLength='128'  value='" + obj.aData.Link1 + "'  class='importtext-box' id='aLink1_" + obj.aData.ID + "' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("link2")') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            return "<input type='text' maxLength='128'  value='" + obj.aData.Link2 + "' class='importtext-box' id='aLink2_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("manufacturer")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempManufacturer = obj.aData.ManufacturerName == null ? "" : obj.aData.ManufacturerName.substring(0, 128);
                            return "<input type='text' value='" + tempManufacturer + "'  maxLength='128' onblur='return ValidateValueWithDataType(this);' class='importtext-box' id='aManufacturer_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("manufacturernumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempManufacturerNumber = obj.aData.ManufacturerNumber == null ? "" : obj.aData.ManufacturerNumber.substring(0, 50);
                            return "<input type='text' value='" + tempManufacturerNumber + "'   maxLength='50' onblur='return ValidateValueWithDataType(this);' class='importtext-box' id='aManufacturerNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("suppliername")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempSupplierName = obj.aData.SupplierName == null ? "" : obj.aData.SupplierName.substring(0, 150);
                            return "<input type='text' value='" + tempSupplierName + "'  maxLength='150'  onblur='return ValidateValueWithDataType(this);'  class='importtext-box' id='aSupplierName_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("supplierpartno")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempSupplierPartNo = obj.aData.SupplierPartNo == null ? "" : obj.aData.SupplierPartNo.substring(0, 50);
                            return "<input type='text' value='" + tempSupplierPartNo + "'   onblur='return ValidateValueWithDataType(this);' maxLength='50' class='importtext-box' id='aSupplierPartNo_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("blanketordernumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempBlanketOrderNumber = obj.aData.BlanketOrderNumber == null ? "" : obj.aData.BlanketOrderNumber.substring(0, 255);
                            return "<input type='text' value='" + tempBlanketOrderNumber + "'  maxLength='255'  onblur='return ValidateValueWithDataType(this);'  class='importtext-box' id='aBlanketOrderNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("upc")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUPC = obj.aData.UPC == null ? "" : obj.aData.UPC.substring(0, 20);
                            return "<input type='text' value='" + tempUPC + "'  maxLength='20' class='importtext-box' id='aUPC_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("unspsc")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUNSPSC = obj.aData.UNSPSC == null ? "" : obj.aData.UNSPSC.substring(0, 20);
                            return "<input type='text' value='" + tempUNSPSC + "'  maxLength='20' class='importtext-box' id='aUNSPSC_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("description")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDescription = obj.aData.Description == null ? "" : obj.aData.Description.substring(0, 500);
                            return "<input type='text' value='" + tempDescription + "'  maxLength='500' class='importtext-box' id='aDescription_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("longdescription")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempLongDescription = obj.aData.LongDescription == null ? "" : obj.aData.LongDescription.substring(0, 2000);
                            return "<input type='text' value='" + tempLongDescription + "' maxLength='2000'  class='importtext-box' id='aLongDescription_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("categoryname")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCategoryName = obj.aData.CategoryName == null ? "" : obj.aData.CategoryName.substring(0, 128);
                            return "<input type='text' value='" + tempCategoryName + "'  maxLength='128' class='importtext-box' id='aCategoryName_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("glaccount")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempGLAccount = obj.aData.GLAccount == null ? "" : obj.aData.GLAccount.substring(0, 128);
                            return "<input type='text' value='" + tempGLAccount + "'  maxLength='128' class='importtext-box' id='aGLAccount_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("uom")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUOM = obj.aData.Unit == null ? "" : obj.aData.Unit.substring(0, 128);
                            return "<input type='text' value='" + tempUOM + "' maxLength='128'  onblur='return ValidateValueWithDataType(this);' class='importtext-box' id='aUOM_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("costuom")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCostUOM = obj.aData.CostUOMName == null ? "" : obj.aData.CostUOMName;
                            return "<input type='text' value='" + tempCostUOM + "'  class='importtext-box' id='aCostUOM_" + obj.aData.ID + "' style='width:100px;'  />"
                        }

                    });
                }
                if ('@arrcolumns.Contains("defaultreorderquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var DefaultReorderQuantity = obj.aData.DefaultReorderQuantity == null ? "" : obj.aData.DefaultReorderQuantity;
                            return "<input type='text' value='" + DefaultReorderQuantity + "'  onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aDefaultReorderQuantity_" + obj.aData.ID + "' style='width:100px;'  />"

                        }
                    });

                }
                if ('@arrcolumns.Contains("defaultpullquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var DefaultPullQuantity = obj.aData.DefaultPullQuantity == null ? "" : obj.aData.DefaultPullQuantity;
                            return "<input type='text' value='" + DefaultPullQuantity + "'  onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aDefaultPullQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });

                }
                if ('@arrcolumns.Contains("cost")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var Cost = obj.aData.Cost == null ? "" : obj.aData.Cost;
                            return "<input type='text' value='" + Cost + "'  onkeypress='return isNumberKey(event);'  class='numericDecimalinput importtext-box' id='aCost_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });

                }
                if ('@arrcolumns.Contains("markup")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var Markup = obj.aData.Markup == null ? "" : obj.aData.Markup;
                            return "<input type='text' value='" + Markup + "'  onkeypress='return isNumberKey(event);'  class='numericDecimalinput importtext-box' id='aMarkup_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("sellprice")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var SellPrice = obj.aData.SellPrice == null ? "" : obj.aData.SellPrice;
                            return "<input type='text' value='" + SellPrice + "'  onkeypress='return isNumberKey(event);'  class='numericDecimalinput importtext-box' id='aSellPrice_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("extendedcost")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ExtendedCost = obj.aData.DispExtendedCost == null ? "" : obj.aData.DispExtendedCost;
                            return "<span id='aExtendedCost_" + obj.aData.ID + "'>" + ExtendedCost + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("leadtimeindays")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var LeadTimeInDays = obj.aData.LeadTimeInDays == null ? "" : obj.aData.LeadTimeInDays;
                            return "<input type='text' value='" + LeadTimeInDays + "'  onkeypress='return isNumberKey(event);'  class='numericDecimalinput importtext-box' id='aLeadTimeInDays_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("trend")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var Trend = obj.aData.Trend == null ? "false" : obj.aData.Trend;
                            if (Trend != "" || Trend == "true") {
                                Trend = "checked=\"checked\""
                            }
                            else { Trend = ""; }
                            return "<input type='checkbox' " + Trend + " id='aTrend_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("taxable")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var Taxable = obj.aData.Taxable == null ? "false" : obj.aData.Taxable;
                            if (Taxable != "" || Taxable == "true") {
                                Taxable = "checked=\"checked\""
                            }
                            else { Taxable = ""; }
                            return "<input type='checkbox' " + Taxable + " id='aTaxable_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("consignment")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var Consignment = obj.aData.Consignment == null ? "false" : obj.aData.Consignment;
                            if (Consignment != "" || Consignment == "true") {
                                Consignment = "checked=\"checked\""
                            }
                            else { Consignment = ""; }
                            return "<input type='checkbox' " + Consignment + " id='aConsignment_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("stagedquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var StagedQuantity = obj.aData.DispStagedQuantity == null ? "" : obj.aData.DispStagedQuantity;
                            return "<span id='aStagedQuantity_" + obj.aData.ID + "'>" + StagedQuantity + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("intransitquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var InTransitquantity = obj.aData.DispInTransitquantity == null ? "" : obj.aData.DispInTransitquantity;
                            return "<span id='aIn_Transitquantity_" + obj.aData.ID + "'>" + InTransitquantity + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("onorderquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var OnOrderQuantity = obj.aData.DispOnOrderQuantity == null ? "" : obj.aData.DispOnOrderQuantity;
                            return "<span id='aOnOrderQuantity_" + obj.aData.ID + "'>" + OnOrderQuantity + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("ontransferquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var OnTransferQuantity = obj.aData.DispOnTransferQuantity == null ? "" : obj.aData.DispOnTransferQuantity;
                            return "<span id='aOnTransferQuantity_" + obj.aData.ID + "'>" + OnTransferQuantity + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("suggestedorderquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var SuggestedOrderQuantity = obj.aData.DispSuggestedOrderQuantity == null ? "" : obj.aData.DispSuggestedOrderQuantity;
                            return "<span id='aSuggestedOrderQuantity_" + obj.aData.ID + "'>" + SuggestedOrderQuantity + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("requisitionedquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var RequisitionedQuantity = obj.aData.DispRequisitionedQuantity == null ? "" : obj.aData.DispRequisitionedQuantity;
                            return "<span id='aRequisitionedQuantity_" + obj.aData.ID + "'>" + RequisitionedQuantity + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("averageusage")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var AverageUsage = obj.aData.DispAverageUsage == null ? "" : obj.aData.DispAverageUsage;
                            return "<span id='aAverageUsage_" + obj.aData.ID + "'>" + AverageUsage + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("turns")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var Turns = obj.aData.DispTurns == null ? "" : obj.aData.DispTurns;
                            return "<span id='aTurns_" + obj.aData.ID + "'>" + Turns + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("onhandquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var OnHandQuantity = obj.aData.DispOnHandQuantity == null ? "" : obj.aData.DispOnHandQuantity;
                            return "<input type='text' onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' value='" + OnHandQuantity + "' id='aOn_HandQuantity_" + obj.aData.ID + "' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("isitemlevelminmaxqtyrequired")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ItemLevelMinMaxQtyRequired = obj.aData.IsItemLevelMinMaxQtyRequired == null ? "false" : obj.aData.IsItemLevelMinMaxQtyRequired;
                            if (ItemLevelMinMaxQtyRequired != "" || ItemLevelMinMaxQtyRequired == "true") {
                                ItemLevelMinMaxQtyRequired = "checked=\"checked\""
                            }
                            else { ItemLevelMinMaxQtyRequired = ""; }
                            return "<input type='checkbox' " + ItemLevelMinMaxQtyRequired + " id='aItemLevelMinMaxQtyRequired_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("criticalquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var CriticalQuantity = obj.aData.CriticalQuantity == null ? "" : obj.aData.CriticalQuantity;
                            return "<input type='text' value='" + CriticalQuantity + "'  onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aCriticalQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("minimumquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var MinimumQuantity = obj.aData.MinimumQuantity == null ? "" : obj.aData.MinimumQuantity;
                            return "<input type='text' value='" + MinimumQuantity + "' onkeypress='return isNumberKey(event);'   onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aMinimumQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("maximumquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var MaximumQuantity = obj.aData.MaximumQuantity == null ? "" : obj.aData.MaximumQuantity;
                            return "<input type='text' value='" + MaximumQuantity + "' onkeypress='return isNumberKey(event);'  onblur='return ValidateValueWithDataType(this);'   class='numericDecimalinput importtext-box' id='aMaximumQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("weightperpiece")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var WeightPerPiece = obj.aData.WeightPerPiece == null ? "" : obj.aData.WeightPerPiece;
                            return "<input type='text' value='" + WeightPerPiece + "' onkeypress='return isNumberKey(event);'   class='numericDecimalinput importtext-box' id='aWeightPerPiece_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("itemuniquenumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ItemUniqueNumber = obj.aData.ItemUniqueNumber == null ? "" : obj.aData.ItemUniqueNumber.substring(0, 10);
                            return "<input type='text' value='" + ItemUniqueNumber + "'  maxLength='10' class='importtext-box' id='aItemUniqueNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("istransfer")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsTransfer = obj.aData.IsTransfer == null ? "" : obj.aData.IsTransfer;
                            if (IsTransfer != "" || IsTransfer == "true") {
                                IsTransfer = "checked=\"checked\""
                            }
                            else { IsTransfer = ""; }
                            return "<input type='checkbox'" + IsTransfer + "id='aIsTransfer_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("ispurchase")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsPurchase = obj.aData.IsPurchase == null ? "" : obj.aData.IsPurchase;
                            if (IsPurchase != "" || IsPurchase == "true") {
                                IsPurchase = "checked=\"checked\""
                            }
                            else { IsPurchase = ""; }
                            return "<input type='checkbox'" + IsPurchase + "id='aIsPurchase_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("inventrylocation")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var InventryLocation = obj.aData.InventryLocation == null ? "" : obj.aData.InventryLocation.substring(0, 128);
                            return "<input type='text' value='" + InventryLocation + "'  maxLength='128' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aInventryLocation_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("inventoryclassification")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var InventoryClassification = obj.aData.InventoryClassificationName == null ? "" : obj.aData.InventoryClassificationName;
                            return "<input type='text' value='" + InventoryClassification + "'    class='importtext-box' id='aInventoryClassification_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("serialnumbertracking")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var SerialNumberTracking = obj.aData.SerialNumberTracking == null ? "" : obj.aData.SerialNumberTracking;
                            if (SerialNumberTracking != "" || SerialNumberTracking == "true") {
                                SerialNumberTracking = "checked=\"checked\""
                            }
                            else { SerialNumberTracking = ""; }
                            return "<input type='checkbox'" + SerialNumberTracking + "id='aSerialNumberTracking_" + obj.aData.ID + "' onchange='CheckLotSerial(this);' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("lotnumbertracking")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var LotNumberTracking = obj.aData.LotNumberTracking == null ? "" : obj.aData.LotNumberTracking;
                            if (LotNumberTracking != "" || LotNumberTracking == "true") {
                                LotNumberTracking = "checked=\"checked\""
                            }
                            else { LotNumberTracking = ""; }
                            return "<input type='checkbox'" + LotNumberTracking + " id='aLotNumberTracking_" + obj.aData.ID + "' onchange='CheckLotSerial(this);'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("datecodetracking")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var DateCodeTracking = obj.aData.DateCodeTracking == null ? "" : obj.aData.DateCodeTracking;
                            if (DateCodeTracking != "" || DateCodeTracking == "true") {
                                DateCodeTracking = "checked=\"checked\""
                            }
                            else { DateCodeTracking = ""; }
                            return "<input type='checkbox'" + DateCodeTracking + "id='aDateCodeTracking_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("itemtype")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ItemTypeName = obj.aData.ItemTypeName == null ? "" : obj.aData.ItemTypeName.substring(0, 10);
                            return "<input type='text' value='" + ItemTypeName + "'  onblur='return ValidateValueWithDataType(this);' maxLength='10' class='importtext-box' id='aItemType_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("imagepath")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ImagePath = obj.aData.ImagePath == null ? "" : obj.aData.ImagePath.substring(0, 255);

                            return "<input type='text' value='" + ImagePath + "' maxLength='255'  class='importtext-box' id='aImagePath_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("islotserialexpirycost")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsLotSerialExpiryCost = obj.aData.IsLotSerialExpiryCost == null ? "" : obj.aData.IsLotSerialExpiryCost.substring(0, 10);
                            return "<input type='text' value='" + IsLotSerialExpiryCost + "'  maxLength='10' class='importtext-box' id='aIsLotSerialExpiryCost_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });

                }

                if ('@arrcolumns.Contains("isbuildbreak")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var Isbuildbreak = obj.aData.IsBuildBreak == null ? "" : obj.aData.IsBuildBreak;
                            if (Isbuildbreak != "" || Isbuildbreak == "true") {
                                Isbuildbreak = "checked=\"checked\""
                            }
                            else { Isbuildbreak = ""; }
                            return "<input type='checkbox'" + Isbuildbreak + "id='aIsBuildBreak_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("enforcedefaultpullquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsPullQtyScanOverride = obj.aData.PullQtyScanOverride == null ? "" : obj.aData.PullQtyScanOverride;
                            if (IsPullQtyScanOverride != "" || IsPullQtyScanOverride == "true") {
                                IsPullQtyScanOverride = "checked=\"checked\""
                            }
                            else { IsPullQtyScanOverride = ""; }
                            return "<input type='checkbox'" + IsPullQtyScanOverride + "id='aPullQtyScanOverride_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("enforcedefaultreorderquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsEnforceDefaultReorderQuantity = obj.aData.IsEnforceDefaultReorderQuantity == null ? "" : obj.aData.IsEnforceDefaultReorderQuantity;
                            if (IsEnforceDefaultReorderQuantity != "" || IsEnforceDefaultReorderQuantity == "true") {
                                IsEnforceDefaultReorderQuantity = "checked=\"checked\""
                            }
                            else { IsEnforceDefaultReorderQuantity = ""; }
                            return "<input type='checkbox'" + IsEnforceDefaultReorderQuantity + "id='aEnforceDefaultReorderQuantity_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("isautoinventoryclassification")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsAutoInventoryClassification = obj.aData.IsAutoInventoryClassification == null ? "" : obj.aData.IsAutoInventoryClassification;
                            if (IsAutoInventoryClassification != "" || IsAutoInventoryClassification == "true") {
                                IsAutoInventoryClassification = "checked=\"checked\""
                            }
                            else { IsAutoInventoryClassification = ""; }
                            return "<input type='checkbox'" + IsAutoInventoryClassification + "id='aIsAutoInventoryClassification_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("trendingsetting")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var TrendingSettingName = obj.aData.TrendingSettingName == null ? "" : obj.aData.TrendingSettingName.substring(0, 255);
                            return "<input type='text' value='" + TrendingSettingName + "'  maxLength='255'  class='importtext-box'  id='atrendingsetting_" + obj.aData.ID + "' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("ispackslipmandatoryatreceive")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsPackslipMandatoryAtReceive = obj.aData.IsPackslipMandatoryAtReceive == null ? "" : obj.aData.IsPackslipMandatoryAtReceive;
                            if (IsPackslipMandatoryAtReceive != "" || IsPackslipMandatoryAtReceive == "true") {
                                IsPackslipMandatoryAtReceive = "checked=\"checked\""
                            }
                            else { IsPackslipMandatoryAtReceive = ""; }
                            return "<input type='checkbox'" + IsPackslipMandatoryAtReceive + "id='aIsPackslipMandatoryAtReceive_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("itemimageexternalurl")') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            return "<input type='text' maxLength='500'  value='" + obj.aData.ItemImageExternalURL + "' class='importtext-box' id='aItemImageExternalURL_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("itemdocexternalurl")') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            return "<input type='text' maxLength='500'  value='" + obj.aData.ItemDocExternalURL + "' class='importtext-box' id='aItemDocExternalURL_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("isdeleted")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ItemIsDeleted = obj.aData.IsDeleted == null ? "" : obj.aData.IsDeleted;
                            if (ItemIsDeleted != "" || ItemIsDeleted == "true") {
                                ItemIsDeleted = "checked=\"checked\""
                            }
                            else { ItemIsDeleted = ""; }
                            return "<input type='checkbox'" + ItemIsDeleted + "id='aItemIsDeleted_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                UpdateURL = '@Url.Content("~/Import/UpdateDataItemSession")';
            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.Kits)') {
            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("kitpartnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempkitpartnumber = obj.aData.KitPartNumber == null ? "" : obj.aData.KitPartNumber;
                            return "<input type='text' value='" + tempkitpartnumber + "'  maxLength='128'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aKitPartNumber_" + obj.aData.ID + "' style='width:300px;' />" +
                                                "<span id='KitID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempKitItemNumber = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber;
                            return "<input type='text' value='" + tempKitItemNumber + "'  maxLength='128'  onblur='return ValidateValueWithDataType();' class='importtext-box' id='aKitItemNumber_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("quantityperkit")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempquantityperkit = obj.aData.QuantityPerKit == null ? "" : obj.aData.QuantityPerKit;
                            return "<input type='text' value='" + tempquantityperkit + "'  maxLength='128'  class='numericDecimalinput importtext-box' id='aQuantityPerKit_" + obj.aData.ID + "' style='width:300px;' />"

                        }
                    });
                }
                if ('@arrcolumns.Contains("onhandquantity")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var OnHandQuantity = obj.aData.OnHandQuantity == null ? "0" : obj.aData.OnHandQuantity;
                            return "<input type='text' value='" + OnHandQuantity + "'  maxLength='10' class='importtext-box' id='aOnHandQuantity_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });

                }

                if ('@arrcolumns.Contains("isbuildbreak")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ItemIsBuildBreak = obj.aData.IsBuildBreak == null ? "" : obj.aData.IsBuildBreak;
                            if (ItemIsBuildBreak != "" || ItemIsBuildBreak == "true") {
                                ItemIsBuildBreak = "checked=\"checked\""
                            }
                            else { ItemIsDeleted = ""; }
                            return "<input type='checkbox'" + ItemIsBuildBreak + "id='aIsBuildBreak_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("isdeleted")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ItemIsDeleted = obj.aData.IsDeleted == null ? "" : obj.aData.IsDeleted;
                            if (ItemIsDeleted != "" || ItemIsDeleted == "true") {
                                ItemIsDeleted = "checked=\"checked\""
                            }
                            else { ItemIsDeleted = ""; }
                            return "<input type='checkbox'" + ItemIsDeleted + "id='aIsDeleted_" + obj.aData.ID + "'  />"
                        }
                    });
                }


            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BOMItemMaster)') {


            $(function (event) {

                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempDataPullQnt = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 100);
                        return "<input type='text' value='" + tempDataPullQnt + "'  maxLength='100' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aBOMItemNumber_" + obj.aData.ID + "' style='width:300px;' />" +
                                                "<span id='BOMItemID' style='display:none'>" + obj.aData.ID + "</span>"
                    }
                });
                if ('@arrcolumns.Contains("manufacturer")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempManufacturer = obj.aData.ManufacturerName == null ? "" : obj.aData.ManufacturerName.substring(0, 128);
                            return "<input type='text' value='" + tempManufacturer + "'  maxLength='128' class='importtext-box' id='aBOMManufacturer_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("manufacturernumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempManufacturerNumber = obj.aData.ManufacturerNumber == null ? "" : obj.aData.ManufacturerNumber.substring(0, 20);
                            return "<input type='text' value='" + tempManufacturerNumber + "'   maxLength='20' class='importtext-box' id='aBOMManufacturerNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("suppliername")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempSupplierName = obj.aData.SupplierName == null ? "" : obj.aData.SupplierName.substring(0, 255);
                            return "<input type='text' value='" + tempSupplierName + "'  maxLength='255'  onblur='return ValidateValueWithDataType();'  class='importtext-box' id='aBOMSupplierName_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("supplierpartno")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempSupplierPartNo = obj.aData.SupplierPartNo == null ? "" : obj.aData.SupplierPartNo.substring(0, 20);
                            return "<input type='text' value='" + tempSupplierPartNo + "' onblur='return ValidateValueWithDataType();'  maxLength='20' class='importtext-box' id='aBOMSupplierPartNo_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("upc")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUPC = obj.aData.UPC == null ? "" : obj.aData.UPC.substring(0, 20);
                            return "<input type='text' value='" + tempUPC + "'  maxLength='20' class='importtext-box' id='aBOMUPC_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("unspsc")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUNSPSC = obj.aData.UNSPSC == null ? "" : obj.aData.UNSPSC.substring(0, 20);
                            return "<input type='text' value='" + tempUNSPSC + "'  maxLength='20' class='importtext-box' id='aBOMUNSPSC_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("description")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDescription = obj.aData.Description == null ? "" : obj.aData.Description.substring(0, 500);
                            return "<input type='text' value='" + tempDescription + "'  maxLength='500' class='importtext-box' id='aBOMDescription_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("categoryname")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempCategoryName = obj.aData.CategoryName == null ? "" : obj.aData.CategoryName.substring(0, 128);
                            return "<input type='text' value='" + tempCategoryName + "'  maxLength='128' class='importtext-box' id='aBOMCategoryName_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("glaccount")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempGLAccount = obj.aData.GLAccount == null ? "" : obj.aData.GLAccount.substring(0, 128);
                            return "<input type='text' value='" + tempGLAccount + "'  maxLength='128' class='importtext-box' id='aBOMGLAccount_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("unit")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUnit = obj.aData.Unit == null ? "" : obj.aData.Unit.substring(0, 128);
                            return "<input type='text' value='" + tempUnit + "' maxLength='128' onblur='return ValidateValueWithDataType();'  class='importtext-box' id='aBOMUnit_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("leadtimeindays")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var LeadTimeInDays = obj.aData.LeadTimeInDays == null ? "" : obj.aData.LeadTimeInDays;
                            return "<input type='text' value='" + LeadTimeInDays + "'  onkeypress='return isNumberKey(event);'  class='importtext-box' id='aLeadTimeInDays_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("taxable")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var Taxable = obj.aData.Taxable == null ? "false" : obj.aData.Taxable;
                            if (Taxable != "" || Taxable == "true") {
                                Taxable = "checked=\"checked\""
                            }
                            else { Taxable = ""; }
                            return "<input type='checkbox' " + Taxable + " id='aBOMTaxable_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("consignment")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var Consignment = obj.aData.Consignment == null ? "false" : obj.aData.Consignment;
                            if (Consignment != "" || Consignment == "true") {
                                Consignment = "checked=\"checked\""
                            }
                            else { Consignment = ""; }
                            return "<input type='checkbox' " + Consignment + " id='aBOMConsignment_" + obj.aData.ID + "'  />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("itemuniquenumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ItemUniqueNumber = obj.aData.ItemUniqueNumber == null ? "" : obj.aData.ItemUniqueNumber.substring(0, 10);
                            return "<input type='text' value='" + ItemUniqueNumber + "'  maxLength='10' class='importtext-box' id='aBOMItemUniqueNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("istransfer")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsTransfer = obj.aData.IsTransfer == null ? "" : obj.aData.IsTransfer;
                            if (IsTransfer != "" || IsTransfer == "true") {
                                IsTransfer = "checked=\"checked\""
                            }
                            else { IsTransfer = ""; }
                            return "<input type='checkbox'" + IsTransfer + "id='aBOMIsTransfer_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("ispurchase")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsPurchase = obj.aData.IsPurchase == null ? "" : obj.aData.IsPurchase;
                            if (IsPurchase != "" || IsPurchase == "true") {
                                IsPurchase = "checked=\"checked\""
                            }
                            else { IsPurchase = ""; }
                            return "<input type='checkbox'" + IsPurchase + "id='aBOMIsPurchase_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                //                if ('@arrcolumns.Contains("inventrylocation")' == 'True') {
                //                    ColumnObject.push({
                //                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                //                        "fnRender": function (obj, val) {
                //                            var InventryLocation = obj.aData.InventryLocation == null ? "" : obj.aData.InventryLocation.substring(0, 128);
                //                            return "<input type='text' value='" + InventryLocation + "'  maxLength='128' class='importtext-box' id='aBOMInventryLocation_" + obj.aData.ID + "' style='width:100px;'  />"
                //                        }
                //                    });
                //                }
                if ('@arrcolumns.Contains("inventoryclassification")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var InventoryClassification = obj.aData.InventoryClassificationName == null ? "" : obj.aData.InventoryClassificationName;
                            return "<input type='text' value='" + InventoryClassification + "'    class='importtext-box' id='aBOMInventoryClassification_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("serialnumbertracking")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var SerialNumberTracking = obj.aData.SerialNumberTracking == null ? "" : obj.aData.SerialNumberTracking;
                            if (SerialNumberTracking != "" || SerialNumberTracking == "true") {
                                SerialNumberTracking = "checked=\"checked\""
                            }
                            else { SerialNumberTracking = ""; }
                            return "<input type='checkbox'" + SerialNumberTracking + "id='aBOMSerialNumberTracking_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("lotnumbertracking")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var LotNumberTracking = obj.aData.LotNumberTracking == null ? "" : obj.aData.LotNumberTracking;
                            if (LotNumberTracking != "" || LotNumberTracking == "true") {
                                LotNumberTracking = "checked=\"checked\""
                            }
                            else { LotNumberTracking = ""; }
                            return "<input type='checkbox'" + LotNumberTracking + "id='aBOMLotNumberTracking_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("datecodetracking")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var DateCodeTracking = obj.aData.DateCodeTracking == null ? "" : obj.aData.DateCodeTracking;
                            if (DateCodeTracking != "" || DateCodeTracking == "true") {
                                DateCodeTracking = "checked=\"checked\""
                            }
                            else { DateCodeTracking = ""; }
                            return "<input type='checkbox'" + DateCodeTracking + "id='aBOMDateCodeTracking_" + obj.aData.ID + "'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("itemtype")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var ItemTypeName = obj.aData.ItemTypeName == null ? "" : obj.aData.ItemTypeName.substring(0, 10);
                            return "<input type='text' value='" + ItemTypeName + "'  onblur='return ValidateValueWithDataType();' maxLength='10' class='importtext-box' id='aBOMItemType_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("udf1")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF1 = obj.aData.UDF1 == null ? "" : obj.aData.UDF1.substring(0, 255);
                            return "<input type='text' value='" + tempUDF1 + "'  maxLength='255'  class='importtext-box' id='aUDF1' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf2")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF2 = obj.aData.UDF2 == null ? "" : obj.aData.UDF2.substring(0, 255);
                            return "<input type='text' value='" + tempUDF2 + "'  maxLength='255'  class='importtext-box'  id='aUDF2' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf3")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF3 = obj.aData.UDF3 == null ? "" : obj.aData.UDF3.substring(0, 255);
                            return "<input type='text' value='" + tempUDF3 + "'  maxLength='255'  class='importtext-box'  id='aUDF3' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf4")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF4 = obj.aData.UDF4 == null ? "" : obj.aData.UDF4.substring(0, 255);
                            return "<input type='text' value='" + tempUDF4 + "'  maxLength='255'  class='importtext-box'  id='aUDF4' style='width:100px;' />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("udf5")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.UDF5 == null ? "" : obj.aData.UDF5.substring(0, 255);
                            return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='aUDF5' style='width:100px;' />"
                        }
                    });
                }

            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemManufacturer)') {

            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                ColumnObject.push({
                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {
                        var tempItemNumber = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 100);
                        return "<input type='text' value='" + tempItemNumber + "'  maxLength='100' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aItemNumber_" + obj.aData.ID + "' style='width:300px;' />" +
                                                "<span id='ManufacturerID' style='display:none'>" + obj.aData.ID + "</span>"
                    }
                });

                if ('@arrcolumns.Contains("manufacturername")' == 'True') {

                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {

                            var tempManufacturer = obj.aData.ManufacturerName == null ? "" : obj.aData.ManufacturerName.substring(0, 150);
                            return "<input type='text' value='" + tempManufacturer + "'  maxLength='150' class='importtext-box' id='aManufacturerName_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("manufacturernumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempManufacturerNumber = obj.aData.ManufacturerNumber == null ? "" : obj.aData.ManufacturerNumber.substring(0, 50);
                            return "<input type='text' value='" + tempManufacturerNumber + "'   maxLength='50' class='importtext-box' id='aManufacturerNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("isdefault")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsDefault = obj.aData.IsDefault == null ? "" : obj.aData.IsDefault;
                            if (IsDefault != "" || IsDefault == "true") {
                                IsDefault = "checked=\"checked\""
                            }
                            else { IsDefault = ""; }
                            return "<input type='checkbox'" + IsDefault + " id='aIsDefault_" + obj.aData.ID + "'  />"
                        }
                    });
                }



            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.ItemSupplier)') {

            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                ColumnObject.push({

                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {

                        var tempItemNumber = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 100);

                        return "<input type='text' value='" + tempItemNumber + "'  maxLength='100' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aItemNumber_" + obj.aData.ID + "' style='width:300px;' />" +
                                                "<span id='SupplierID' style='display:none'>" + obj.aData.ID + "</span>"
                    }
                });

                if ('@arrcolumns.Contains("suppliername")' == 'True') {

                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {

                            var tempSupplier = obj.aData.SupplierName == null ? "" : obj.aData.SupplierName.substring(0, 128);
                            return "<input type='text' value='" + tempSupplier + "'  maxLength='128' class='importtext-box' id='aSupplierName_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("suppliernumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempSupplierNumber = obj.aData.SupplierNumber == null ? "" : obj.aData.SupplierNumber.substring(0, 50);
                            return "<input type='text' value='" + tempSupplierNumber + "'   maxLength='50' class='importtext-box' id='aSupplierNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("blanketponame")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempBlanketPOName = obj.aData.BlanketPOName == null ? "" : obj.aData.BlanketPOName;
                            return "<input type='text' value='" + tempBlanketPOName + "'   maxLength='255' class='importtext-box' id='aBlanketPOID_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }

                if ('@arrcolumns.Contains("isdefault")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var IsDefault = obj.aData.IsDefault == null ? "" : obj.aData.IsDefault;
                            if (IsDefault != "" || IsDefault == "true") {
                                IsDefault = "checked=\"checked\""
                            }
                            else { IsDefault = ""; }
                            return "<input type='checkbox'" + IsDefault + "id='aIsDefault_" + obj.aData.ID + "'  />"
                        }
                    });
                }



            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.BarcodeMaster)') {

            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("modulename")' == 'True') {

                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {

                            var tempSupplier = obj.aData.ModuleName == null ? "" : obj.aData.ModuleName.substring(0, 128);
                            return "<input type='text' value='" + tempSupplier + "'  maxLength='128' class='importtext-box' id='aModuleName_" + obj.aData.ID + "' style='width:100px;'  />"+
                            "<span id='BarcodeID' style='display:none'>" + obj.aData.ID + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("itemnumber")' == 'True') {
                ColumnObject.push({

                    "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                    "fnRender": function (obj, val) {

                        var tempItemNumber = obj.aData.ItemNumber == null ? "" : obj.aData.ItemNumber.substring(0, 500);

                        return "<input type='text' value='" + tempItemNumber + "'  maxLength='500' onblur='return ValidateValueWithDataType();' class='importtext-box' id='aItemNumber_" + obj.aData.ID + "' style='width:300px;' />"
                    }
                });
}


                if ('@arrcolumns.Contains("barcodestring")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var BarCode = obj.aData.BarcodeString == null ? "" : obj.aData.BarcodeString.substring(0, 512);

                            return "<input type='text' value='" + BarCode + "'   maxLength='512' class='importtext-box' id='aBarCodeString_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }
                if ('@arrcolumns.Contains("binnumber")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempBinNumber = obj.aData.BinNumber == null ? "" : obj.aData.BinNumber;
                            return "<input type='text' value='" + tempBinNumber + "'   maxLength='500' class='importtext-box' id='aBinNumber_" + obj.aData.ID + "' style='width:100px;'  />"
                        }
                    });
                }





            });

        }
        else if (selectedModuleVal == '@((int)eTurnsWeb.Helper.SessionHelper.ModuleList.UDF)') {
            
            $(function (event) {
                if ('@arrcolumns.Count()' > 0) {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Status == null ? "" : obj.aData.Status.substring(0, 255);
                            var forcol = "#000000";
                            var bodcol = "#DDD";
                            if (obj.aData.Status != null && obj.aData.Status == "Fail") {
                                forcol = "Red";
                                bodcol = "Red";
                            }

                            else if (obj.aData.Status != null && obj.aData.Status == "Success") {
                                forcol = "Green";
                                bodcol = "Green";
                            }

                            // return "<input type='text' value='" + tempUDF5 + "'  maxLength='255'  class='importtext-box'  id='Status' style='width:100px;color:" + forcol + ";border:1px solid " + bodcol + "' />"
                            return "<span id='Status'  style='width:100px;color:" + forcol + ";'>" + tempUDF5 + "</span>"
                        }
                    });
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempUDF5 = obj.aData.Reason == null ? "" : obj.aData.Reason.substring(0, 255);
                            return "<span id='Reason'  style='width:100px;'>" + tempUDF5 + "</span>"
                        }
                    });
                }
                if ('@arrcolumns.Contains("modulename")' == 'True') {

                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {

                            var tempModuleName = obj.aData.ModuleName == null ? "" : obj.aData.ModuleName;
                            return "<input type='text' value='" + tempModuleName + "'  maxLength='128' class='importtext-box' id='aModuleName_" + obj.aData.ID + "' style='width:100px;'  />" +
                            "<span id='UDFID' style='display:none'>" + obj.aData.ID + "</span>";
                        }
                    });
                }
                if ('@arrcolumns.Contains("udfcolumnname")' == 'True') {

                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {

                            var tempModuleUDFName = obj.aData.UDFColumnName == null ? "" : obj.aData.UDFColumnName;
                            return "<input type='text' value='" + tempModuleUDFName + "'  maxLength='128' class='importtext-box' id='aUDFColumnName_" + obj.aData.ID + "' style='width:100px;'  />";
                        }
                    });
                }
                if ('@arrcolumns.Contains("udfname")' == 'True') {

                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {

                            var tempModuleUDFName = obj.aData.UDFName == null ? "" : obj.aData.UDFName;
                            return "<input type='text' value='" + tempModuleUDFName + "'  maxLength='128' class='importtext-box' id='aUDFName_" + obj.aData.ID + "' style='width:100px;'  />";
                        }
                    });
                }
                if ('@arrcolumns.Contains("controltype")' == 'True') {
                    ColumnObject.push({

                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {

                            var tempControlType = obj.aData.ControlType == null ? "" : obj.aData.ControlType;

                            return "<input type='text' value='" + tempControlType + "'  maxLength='500' class='importtext-box' id='aControlType_" + obj.aData.ID + "' style='width:300px;' />";
                        }
                    });
                }


                if ('@arrcolumns.Contains("defaultvalue")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempDefaultValue = obj.aData.DefaultValue == null ? "" : obj.aData.DefaultValue;

                            return "<input type='text' value='" + tempDefaultValue + "'   maxLength='512' class='importtext-box' id='aDefaultValue_" + obj.aData.ID + "' style='width:100px;'  />";
                        }
                    });
                }
                if ('@arrcolumns.Contains("optionname")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempOptionName = obj.aData.OptionName == null ? "" : obj.aData.OptionName;
                            return "<input type='text' value='" + tempOptionName + "'   maxLength='500' class='importtext-box' id='aOptionName_" + obj.aData.ID + "' style='width:100px;'  />";
                        }
                    });
                }
                if ('@arrcolumns.Contains("isrequired")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempIsRequired = obj.aData.IsRequired == null ? "" : obj.aData.IsRequired;
                            if (tempIsRequired != "" || tempIsRequired == "true") {
                                tempIsRequired = "checked=\"checked\""
                            }
                            else { tempIsRequired = ""; }
                             return "<input type='checkbox' " + tempIsRequired + " id='aIsRequired_" + obj.aData.ID + "' />";
                            //return obj.aData.IsRequired;
                        }
                    });
                }
                 if ('@arrcolumns.Contains("isdeleted")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempIsDeleted = obj.aData.IsDeleted == null ? "" : obj.aData.IsDeleted;
                            if (tempIsDeleted != "" || tempIsDeleted == "true") {
                                tempIsDeleted = "checked=\"checked\""
                            }
                            else { tempIsDeleted = ""; }
                            return "<input type='checkbox' " + tempIsDeleted + " id='aIsDeleted_" + obj.aData.ID + "' />";
                            //return obj.aData.IsDeleted;
                        }
                    });
                 }
                if ('@arrcolumns.Contains("includeinnarrowsearch")' == 'True') {
                    ColumnObject.push({
                        "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                        "fnRender": function (obj, val) {
                            var tempIncludeInNarrowsearch = obj.aData.IncludeInNarrowSearch == null ? "" : obj.aData.IncludeInNarrowSearch;
                            if (tempIncludeInNarrowsearch != "" || tempIncludeInNarrowsearch == "true") {
                                tempIncludeInNarrowsearch = "checked=\"checked\""
                            }
                            else { tempIncludeInNarrowsearch = ""; }
                            return "<input type='checkbox' " + tempIncludeInNarrowsearch + " id='aIncludeInNarrowSearch_" + obj.aData.ID + "' />";
                        }
                    });
                }
                




            });

        }
        else {

        }
        
        setTimeout(function () { GenerateDataTable(); }, 5000);


        //        $(document).ready(function () {
        //            $('input:text').blur(function () {
        ////                if (!($(this).IsValidEmailAddress())) {
        ////                    alert('Please enter proper email address');
        ////                }


        //            });
        //        });
        //        $.fn.IsValidEmailAddress = function () {
        //            var pattern = /^([\w-\.]+([\w-]+\.)+[\w-]{2,4})?$/;
        //
        //            return pattern.test($(this).val());
        //        }
        function isValidEmailAddress(emailAddress) {

            //            var pattern = /^\b[A-Z0-9._%-]+[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i
            //            return pattern.test(emailAddress);
        };

        function JSONDate(dateStr) {
            var m, day;
            jsonDate = dateStr;
            var d = new Date(parseInt(jsonDate.substr(6)));
            m = d.getMonth() + 1;
            if (m < 10)
                m = '0' + m
            if (d.getDate() < 10)
                day = '0' + d.getDate()
            else
                day = d.getDate();
            return (m + '/' + day + '/' + d.getFullYear())
        }
        function GenerateDataTable() {
            
            $("#divbtnBlock").show();

            var IsRefreshGrid = false;
            var IsDeletePopupOpen = false;
            var AllowDeletePopup = true;
            var SelectedHistoryRecordID = 0;
            $(document).ready(function () {
                $('#DivGridLoading').show();

                var gaiSelected = [];
                oTable = $('#myImportDataTable').dataTable({
                    "bJQueryUI": true,
                    "bScrollCollapse": true,
                    "sScrollX": "90%",
                    "sDom": 'rti<"clear">>T',
                    "oColVis": {},
                    //"aaSorting": [[1, "asc"]],
                    "bSort": false,
                    "oColReorder": {},
                    "sPaginationType": "full_numbers",
                    "bProcessing": false,
                    "bStateSave": true,
                    "oLanguage": {
                        "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                        "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                        "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                        "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                    },
                    "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

                        if (aData.IsDeleted == true && aData.IsArchived == true)
                            nRow.className = "GridDeleatedArchivedRow";
                        else if (aData.IsDeleted == true)
                            nRow.className = "GridDeletedRow";
                        else if (aData.IsArchived == true)
                            nRow.className = "GridArchivedRow";
                        return nRow;
                    },
                    "fnStateSaveParams": function (oSettings, oData) {
                        oData.oSearch.sSearch = "";
                        $.ajax({
                            "url": '@Url.Content("~/Master/SaveGridState")',
                            "type": "POST",
                            data: { Data: JSON.stringify(oData), ListName: 'ImportList' },
                            "async": false,
                            "dataType": "json",
                            "success": function (json) {
                                o = json;
                            }
                        });
                    },
                    "fnStateLoad": function (oSettings) {
                        var o;
                        $.ajax({
                            "url": '@Url.Content("~/Master/LoadGridState")',
                            "type": "POST",
                            data: { ListName: 'ImportList' },
                            "async": false,
                            cache: false,
                            "dataType": "json",
                            "success": function (json) {
                                if (json.jsonData != '')
                                    o = JSON.parse(json.jsonData);
                            }
                        });

                        return o;
                    },
                    "bServerSide": true,
                    "sAjaxSource": '@Url.Content("~/Import/GetImportList")',
                    "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                        var arrCols = new Array();
                        var objCols = this.fnSettings().aoColumns;
                        for (var i = 0; i <= objCols.length - 1; i++) {
                            arrCols.push(objCols[i].mDataProp);
                        }
                        for (var j = 0; j <= aoData.length - 1; j++) {
                            if (aoData[j].name == "sColumns") {
                                aoData[j].value = arrCols.join("|");
                                break;
                            }
                        }
                        if (oSettings.aaSorting.length != 0)
                            aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                        else
                            aoData.push({ "name": "SortingField", "value": "0" });

                        aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                        aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                        oSettings.jqXHR = $.ajax({
                            "dataType": 'json',
                            "type": "POST",
                            cache: false,
                            "url": sSource,
                            "data": aoData,
                            "success": fnCallback,
                            beforeSend: function () {
                            },
                            complete: function () {
                                //ValidateValueWithDataType();
                                $('#DivGridLoading').hide();
                            }
                        })
                    },
                    "fnInitComplete": function () {
                        $('.ColVis').detach().appendTo(".setting-arrow");
                        CheckValidation(false, false);
                    },
                    "aoColumns": ColumnObject
                }).makeEditable({
                    sUpdateURL: UpdateURL
                });

                //HIDE PRINT CONTAINER
                $('.DTTT_container').css('z-index', '-1');

                $('#myImportDataTable tbody tr').click(function (e) {
                    $(this).removeClass('row_selected');
                });
                setTimeout(function () {

                    FillRowColor();

                }, 500);

            });

        }
        function CheckDateFormat(objval) {
            //alert(objval);
            var retval = true;
            //alert(CheckDateBYCompanyConfig(objval));
            //            if (GetDateInYYYYMMDDFormat(objval) == "") {
            //                retval = false;
            //            }
            return retval;
        }
    </script>
}
@if (Session["ErrorMessage"] != null)
{
    <script language="javascript" type="text/javascript">
        alert('@(eTurns.DTO.ResImportMasters.ErrorInvalidFile)');
    </script>
    Session["ErrorMessage"] = null;

}
