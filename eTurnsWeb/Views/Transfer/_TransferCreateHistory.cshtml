@model eTurns.DTO.TransferMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
<div class="userHead">
    @using (Ajax.BeginForm("SaveTransfer", "Transfer", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmTransferHistory" }))
    {   
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)     
        if (Model.ID != 0)
        {        
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.ReceivedOnWebDate)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    : <span>@(Model.ReceivedOnDate)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        } 
         
        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContentInHistory" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px; background: none">
                <div id="CollapsedContentInHistory" class="edtForm">
                    <ul>
                        <li style="border-right: none; padding: 0px">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.TransferNumber)<em style="color: Red"> *</em>
                            </label>
                            @Html.TextBoxFor(model => model.TransferNumber, new { id = "txtTransferNumber", @class = "text-box", @style = "background:white", maxlength = 255, @readonly = "readonly" })
                            <br />
                            @Html.ValidationMessageFor(model => model.TransferNumber)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 130px; float: left; padding: 1.3% 0;">
                                @if (Model.RequestType == (int)RequestType.In)
                            {
                                @Html.LabelFor(model => model.ReplenishingRoomID) <em style="color: Red">*</em>
                            }
                            else
                            {
                                @Html.LabelFor(model => model.RequestingRoomID) <em style="color: Red">*</em>
                            }
                            </label>
                            @Html.DropDownListFor(x => x.ReplenishingRoomID, new SelectList(ViewBag.ReplenishingRoom, "ID", "RoomName", Model.ReplenishingRoomID), new { @id = "ddlReplenishingRoom", @class = "selectBox", @style = "width:120px" })
                            <br />
                            @Html.ValidationMessageFor(model => model.ReplenishingRoomID)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequireDate) <em style="color: Red">*</em>
                            </label>
                            @Html.TextBoxFor(model => model.RequireDate, new { @class = "text-box", id = "txtRequiredDate", @readonly = "readonly", @style = "background:white", maxlength = 128, @Value = Model.RequireDate.ToString("MM/dd/yyyy") })
                            <br />
                            @Html.ValidationMessageFor(model => model.RequireDate)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.TransferStatus)
                            </label>
                            @Html.DropDownListFor(model => model.TransferStatus, new SelectList(ViewBag.TransferStatusList, "value", "Text", Model.TransferStatus), new { id = "ddlTransferStatus", @class = "selectBox", @style = "width:120px" })
                            @Html.ValidationMessageFor(model => model.TransferStatus)
                        </li>
                        <li style="border-right: none; padding: 0px">
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.RequestType)
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.RoomID)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.RefTransferGUID)
                            @Html.HiddenFor(model => model.ReceivedOn)
                            @Html.HiddenFor(model => model.ReceivedOnWeb)
                            @Html.HiddenFor(model => model.AddedFrom)
                            @Html.HiddenFor(model => model.EditedFrom)
                        </li>
                    </ul>
                </div>
            </div>
        </div> 
        
        <div id="ExpandedContentInHistory" style="display: none">
            <ul>
                <li style="border: none">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Comment)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.Comment, new { @class = "text-box", maxlength = 1024 })
                                    @Html.ValidationMessageFor(model => model.Comment)
                                </div>
                            </li>
                            @if (Model.RequestType == (int)RequestType.In)
                            {
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.StagingName)
                                    </div>
                                    <div class="editor-field">
                                        @Html.TextBoxFor(model => model.StagingName, new { id = "txtStagingName", @class = "text-box", @readonly = "readonly" })
                                        @*@Html.DropDownListFor(model => model.StagingID, new SelectList(ViewBag.StagginLocations, "ID", "BinNumber", Model.StagingID), new { id = "ddlStaging", @class = "selectBox", @style = "width:120px" })
                                        @Html.ValidationMessageFor(model => model.StagingID)*@
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="editorForm padRightNone">
                        <ul>
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResTransfer())
                            <li id="liReject" style="display: none;">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.RejectionReason)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.RejectionReason, new { @style = "-webkit-border-radius: 5px;-moz-border-radius: 5px;border-radius: 5px;behavior: url(/pie1.htc);background: #fff;border: 1px solid #dddddd;width: 34%;padding: 5px;" })
                                    @Html.ValidationMessageFor(model => model.RejectionReason)
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="editor-label" style="width: 100%; float: left">
                        &nbsp;
                    </div>
                </li>
            </ul>
        </div>
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancelInHistory" class="CreateBtn" />
                    </div>
                </li>
            </ul>
        </div>
    }
</div>
@Html.Partial("_RequiredMessages")
<div id="ItemModel">
</div>
<div id="divLineItems">
</div>
<script type="text/javascript">
    var ID = '@Model.ID';
    var HistoryID = '@Model.HistoryID';
    var TransferStatus = '@Model.TransferStatus';

    function onSuccess(response) {

    }

    function onFailure(message) {

    }
</script>
<script type="text/javascript">

    var IsGridFilling = 0;
    $('#btnCancel').click(function (e) {
        if (IsRefreshGrid)
            $('#NarroSearchClear').click();
        SwitchTransferTab('CreateTransfer', 'frmTransfer');
        if (oTable !== undefined && oTable != null)
            oTable.fnDraw();
    });

    $('#ancHideShowContentInHistory').click(function () {
        if ($('#ExpandedContentInHistory').css('display') == 'none') {
            $('#ExpandedContentInHistory').css('display', '');
            $('#ancHideShowContentInHistory img').attr('src', '/Content/images/drildown_close.jpg');
        }
        else {
            $('#ExpandedContentInHistory').css('display', 'none');
            $('#ancHideShowContentInHistory img').attr('src', '/Content/images/drildown_open.jpg');
        }
    });

    $(document).ready(function () {

        disableControls('frmTransferHistory');
        $('#ExpandedContentInHistory').css('display', 'none');
        $('#ancHideShowContentInHistory').css('display', '');
        FillTransferDetailHistoryGrid();
    });
    
    function FillTransferDetailHistoryGrid() {
        $('#DivLoading').show();
        $('#divLineItems').empty();
        var url = '@Url.Action("LoadTransferLineItemsHistory")';
        $.get(url, { 'historyID': HistoryID }, function (responseData) {
            $('#divLineItems').html(responseData);
            $('#DivLoading').hide();
            IsGridFilling = 0;
        });
    }

    $('#btnCancelInHistory').removeAttr('disabled');
    $('#btnCancelInHistory').unbind('click');
    $('#btnCancelInHistory').click(function (e) {
        $("#divLineItemHistory").dialog('close')
        $("#HistoryText").val("");
        $('#HistoryTable').dataTable().fnFilter('', null, null, null);
    });
</script>
