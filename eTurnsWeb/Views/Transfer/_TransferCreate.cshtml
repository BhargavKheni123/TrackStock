@model eTurns.DTO.TransferMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    string priceformate1 = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits.ToString();
    bool IsApprove = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.TransferApproval, eTurnsWeb.Helper.SessionHelper.PermissionType.Approval);
    bool IsReportView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.View);
    string CurrencySymbol = "";
    if (eTurnsWeb.Helper.SessionHelper.CurrencySymbol != null
        && !string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencySymbol))
    {
        CurrencySymbol = eTurnsWeb.Helper.SessionHelper.CurrencySymbol;
    }
}

@using (Ajax.BeginForm("SaveTransfer", "Transfer", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmTransfer" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.CreatedDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.UpdatedDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                    @if (IsReportView && (Model.IsDeleted ?? false) == false && (Model.IsArchived ?? false) == false)
                    {
                        <li style="border: none; text-align: right;">
                            <a href="javascript:void(null);" id="aRptSingle">
                                <img alt="" src="@Url.Content("~/Content/images/print.png")" title="Print Purchase Order" />
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }

        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContent" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px; background: none">
                <div id="CollapsedContent" class="edtForm">
                    <ul>
                        <li style="border-right: none; padding: 0px">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.TransferNumber)<em style="color: Red"> *</em>
                            </label>
                            @Html.TextBoxFor(model => model.TransferNumber, new { id = "txtTransferNumber", @class = "text-box", @style = "background:white", maxlength = 255, @readonly = "readonly" })
                            <br />
                            @Html.ValidationMessageFor(model => model.TransferNumber)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 130px; float: left; padding: 1.3% 0;">
                                @if (Model.RequestType == (int)RequestType.In)
                                {
                                    @Html.LabelFor(model => model.ReplenishingRoomID) <em style="color: Red">*</em>
                                }
                                else
                                {
                                    if (Model.RefTransferGUID.HasValue)
                                    {
                                        @Html.LabelFor(model => model.RequestingRoomID) <em style="color: Red">*</em>
                                    }
                                    else
                                    {
                                        @Html.Label("Receiving Room")<em style="color: Red">*</em>
                                    }
                                }
                            </label>
                            @Html.DropDownListFor(x => x.ReplenishingRoomID, new SelectList(ViewBag.ReplenishingRoom, "ID", "RoomName", Model.ReplenishingRoomID), new { @id = "ddlReplenishingRoom", @class = "selectBox", @style = "width:120px" })
                            <br />
                            @Html.ValidationMessageFor(model => model.ReplenishingRoomID)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.RequiredDateString) <em style="color: Red">*</em>
                            </label>
                            @Html.TextBoxFor(model => Model.RequiredDateString, new { @class = "text-box", id = "txtRequiredDate1", @readonly = "readonly", @style = "background:white", maxlength = 128 })
                            <br />
                            @Html.ValidationMessageFor(model => model.RequiredDateString)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.TransferStatus)
                            </label>
                            @Html.DropDownListFor(model => model.TransferStatus, new SelectList(ViewBag.TransferStatusList, "value", "Text", Model.TransferStatus), new { id = "ddlTransferStatus", @class = "selectBox", @style = "width:120px" })
                            @Html.ValidationMessageFor(model => model.TransferStatus)
                        </li>
                        <li style="border-right: none; padding: 0px">
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.RequestType)
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.RoomID)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.RefTransferGUID)
                            @Html.HiddenFor(model => model.ReceivedOn)
                            @Html.HiddenFor(model => model.ReceivedOnWeb)
                            @Html.HiddenFor(model => model.AddedFrom)
                            @Html.HiddenFor(model => model.EditedFrom)
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div id="ExpandedContent" style="display: none">
            <ul>
                <li style="border: none">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Comment)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.Comment, new { @class = "text-box", maxlength = 1024 })
                                    <span class="ErrorMessage" >@Html.ValidationMessageFor(model => model.Comment)</span>
                                </div>
                            </li>
                            @if (Model.RequestType == (int)RequestType.In)
                            {
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.StagingName)
                                    </div>
                                    <div class="editor-field">
                                        @if (Model.ID > 0)
                                        {
                                            @Html.TextBoxFor(model => model.StagingName, new { id = "txtStagingName", @class = "text-box", @readonly = "readonly" })
                                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.StagingName)</span>
                                        }
                                        else
                                        {
                                            <span style='position:relative'>
                                                @Html.TextBoxFor(model => model.StagingName, new { id = "txtStagingName", @class = "AutoCompleteddl text-box" })
                                                <a id='lnkShowAllOptions' href='javascript:void(0);' style='position:absolute; right:5px; top:0px;' class="ShowAllOptions">
                                                    <img src='/Content/images/arrow_down_black.png' alt='select' />
                                                </a>
                                            </span>
                                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.StagingName)</span>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="editorForm padRightNone">
                        <ul>
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResTransfer())
                            <li id="liReject" style="display: none;">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.RejectionReason) <em style="color: Red">*</em>
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.RejectionReason, new { @style = "-webkit-border-radius: 5px;-moz-border-radius: 5px;border-radius: 5px;behavior: url(/pie1.htc);background: #fff;border: 1px solid #dddddd;width: 34%;padding: 5px;" })
                                    @Html.ValidationMessageFor(model => model.RejectionReason)
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="editor-label" style="width: 100%; float: left">
                        &nbsp;
                    </div>
                </li>
            </ul>
        </div>
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        @if (!Model.IsRecordNotEditable || Model.IsOnlyStatusUpdate)
                        {
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                            if (Model.IsRecordNotEditable && Model.IsOnlyStatusUpdate)
                            {
                                <script type="text/javascript">
                                    disableControls('frmTransfer');
                                    $('#ddlTransferStatus').removeAttr('disabled');
                                    $('#btnSave').removeAttr('disabled');
                                </script>
                            }
                        }
                        else
                        {
                            <script type="text/javascript">
                                disableControls('frmTransfer');
                            </script>
                        }
                    </div>
                </li>
                @if (Model.ID > 0)
                {
                    <li>
                        <div class="BtnBlockform">
                            @if (!Model.IsRecordNotEditable)
                            {
                                <input type="button" value="@eTurns.DTO.ResOrder.AddNewItemButton" id="btnAddNewItem" class="CreateBtn" style="float: left;
                                    margin-left: 20px;" />
                            }
                        </div>
                    </li>
                }
            </ul>
        </div>

        <div class="infoBlock" style="margin-bottom: 10px; margin-top: 10px;">
            <ul>
                <li style="width: auto;">
                    <label for="RoomName">
                        <label>
                            @eTurns.DTO.ResTransfer.NoOfItems
                        </label>
                    </label>
                    : <span id="spnNoOfItems">@Model.NoOfItems.GetValueOrDefault(0)</span>
                </li>
                <li style="border: none; width: auto;">
                    <label for="RoomName">
                            <label>
                                @eTurns.DTO.ResTransfer.TotalCost
                            </label>
                    </label>
                    : <span id="spnTotalTransferCost">@CurrencySymbol @Model.TotalCost.GetValueOrDefault(0).ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture)</span>
                </li>
             
            </ul>
        </div>

    </div>
    <div id="divLineItems">
    </div>
}
<div class="dialog" id="TransferApprdInfoDialog" style="float: left; display: none; width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="Message" style="float: left; text-align: left; padding-left: 10px;">
            <b>@ResOrder.ConfirmApprQuantiyMassage </b>
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="ModelYesClick()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />@eTurns.DTO.Resources.ResCommon.Yes
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="ModelCancelClick()">
                <img src="~/Content/images/no.png" alt="@eTurns.DTO.Resources.ResCommon.Cancel" />@eTurns.DTO.Resources.ResCommon.Cancel
            </a>
        </p>
    </div>
</div>
@Html.Partial("_RequiredMessages")
<div id="ItemModel">
</div>

<div id="DivTransferSelection">
</div>

<script type="text/javascript">
    var ID = '@Model.ID';
    var GUID = '@Model.GUID';
    var TransferStatus = '@Model.TransferStatus';
    var isFromLotSerialSelectionPopup = false;

    function ModelCancelClick() {
        $.modal.impl.close();
    }

    function onSuccess(response) {

        if (isFromLotSerialSelectionPopup)
        {
            return true
        }
        IsRefreshGrid = true;
        IsRefreshGrid1 = true;

        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {

            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#Name").val("");
            $("#Name").focus();
            $('#DivLoading').hide();
        }
        else if (idValue == 0) {

            $("#Name").val("");
            $("#Name").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                NeedToOpenItemPopupNow = true;
                if (response.objModel.RequestType === 0)
                    ShowTransferInEditTab("TransferEdit/" + response.objModel.ID, "frmTransfer", response.objModel.ID);
                else if (response.objModel.RequestType === 1)
                    ShowTransferOutEditTab("TransferEdit/" + response.objModel.ID, "frmTransfer", response.objModel.ID);
            }
            $('#DivLoading').hide();
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#Name").val("");
                $("#Name").focus();
                $('#DivLoading').hide();
            }
            else {
                if (IsRefreshGrid)
                    $('#NarroSearchClear').click();

                $('#DivLoading').hide();
                var url = document.location;
                if (url.toString().indexOf("?FromItem") > 0)
                    document.location = '@Url.Content("~/Transfer/TransferList")';
                else {
                    SwitchTransferTab('CreateTransfer', 'frmTransfer');
                }

            }
        }
    }

    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        showNotificationDialog();
        $("#Name").focus();
    }
</script>
<script type="text/javascript">
    checkRememberUDFValues($("#hdnPageName").val(), parseInt(ID, 10));
    var IsGridFilling = 0;
    $('#btnCancel').click(function (e) {
        //$('#txtTransferFilter').val('');
        if (IsRefreshGrid)
            $('#NarroSearchClear').click();
        var url = document.location;
        if (url.toString().indexOf("?FromItem") > 0) {
            document.location = '@Url.Content("~/Transfer/TransferList")';
        }
        else {
            SwitchTransferTab('CreateTransfer', 'frmTransfer');
            //if (oTable !== undefined && oTable != null)
            //    oTable.fnDraw();
        }
        //$('#txtTransferFilter').val('');
        //$('#myDataTable').dataTable().fnFilter('', null, null, null);
    });

    $('#btnAddNewItem').click(function () {
        TempNarrow = '';
        IsRetainNarrow = false;
        return OpenItemPopup();
    });

    function OpenItemPopup() {
        ClearVariables();
        $("#ItemModel").empty();
        var strUrl = '@Url.Action("LoadItemMasterModel")';
        strUrl = strUrl + '?ParentId=' + ID;
        $('#ItemModel').data({ "url": strUrl, "strupc": '' }).dialog('open');
        if ($("input#global_filter").length > 0) {
            $("input#global_filter").focus();
            setTimeout(function () {
                $("input#global_filter").focus();
            }, 600);
        }
        if ($("input.searchinput").length > 0) {
            $("input.searchinput").focus();
            setTimeout(function () {
                $("input.searchinput").focus();
            }, 600);

        }
        //return false;
    }

    $('#ancHideShowContent').click(function () {
        if ($('#ExpandedContent').css('display') == 'none') {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_open.jpg');
        }
    });

    $('#btnSave').click(function () {
        if ($('#ExpandedContent').css('display') == 'none') {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
        }
        
        if ('@(IsApprove.ToString())' === 'True' && $('#ddlTransferStatus').val() == '@((int)TransferStatus.Submitted)' && '@(Model.RequestType)' == '1') {
            $('#ddlTransferStatus').val('@((int)TransferStatus.Approved)')
        }

        if ($('#ddlTransferStatus').val() == '@((int)TransferStatus.Approved)' && '@(Model.RequestType)' == '1') {
            DoApproveAllProcessOnMasterSave();
            return false;
        }

        if (ID > 0) {
            $('#DivLoading').show();
            //UpdateLineItemGrid($('#ddlStaging').val(), false);
            UpdateLineItemGrid(0, false);                      
        }
        $("form").submit();
        $('#myDataTable').dataTable().fnFilter('', null, null, null);
        return true;
    });

    $(document).ready(function () {
        $('form').areYouSure();
        window.location.hash = '';
        $('.ShowAllOptions').click(function () {
            $(this).siblings('.AutoCompleteddl').trigger("focus");
            $(this).siblings(".AutoCompleteddl").autocomplete("search", " ");
        });

        $("form").submit(function (e) {
            $(':input', '#frmTransfer').removeAttr('disabled');
            //$(':select', '#frmTransfer').removeAttr('disabled');

            $.validator.unobtrusive.parse("#frmTransfer");

            if ($(this).valid()) {
                rememberUDFValues($("#hdnPageName").val(), parseInt(ID))
            }
            e.preventDefault();
        });

        //$('#txtRequiredDate').blur(function () { }).datepicker({ dateFormat: RoomDateJSFormat });
        $("#txtRequiredDate1").datepicker({
            dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat', showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            clearText: 'Clear', onClose: function () { this.focus(); }
        });

        $("#ItemModel").dialog({
            autoOpen: false, modal: true, draggable: true, resizable: true, width: '82%', height: 710, title: '@eTurns.DTO.ResTransfer.PageHeader',
            open: function () {
                $('#DivLoading').show();
                var strUrl = $(this).data("url");
                var strupc = $(this).data("strupc");
                $.get(strUrl, function (data) {
                    $("#ItemModel").html(data);
                    if (strupc == undefined || strupc == '') {

                    }
                    else {
                        if ($("#ItemModel_filter") != undefined) {
                            $("#ItemModel_filter").val(strupc);
                            fnFilterGlobalIM();
                        }
                    }
                });
            },
            close: function () {
                $("#ItemModel").empty();
                if (IsGridFilling === 0) {
                    IsGridFilling = 1;
                    FillTransferDetailGrid();
                    $('#ddlReplenishingRoom').attr('disabled', 'disabled');
                }
            }


        });

        if (parseInt(ID) <= 0) {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent').css('display', 'none');
            $('#txtTransferNumber').removeAttr('readonly');
            $('#DivLoading').hide();
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent').css('display', '');
            FillTransferDetailGrid();

            //// need to call below block in case of New Item saved and open POPUP Item ... START
            if (NeedToOpenItemPopupNow) {
                NeedToOpenItemPopupNow = false;
                setTimeout("OpenItemPopup()", 1000);
                return false;
            }
            //// need to call below block in case of New Item saved and open POPUP Item ... END

        }



        $('#ddlTransferStatus').change(function () {
            if ($(this).find('option:selected').text() == '@(TransferStatus.Rejected)') {
                $('#liReject').attr('style', 'display:block');
                $('#RejectionReason').removeAttr('disabled');
                $('#RejectionReason').focus();

                $('#ExpandedContent').css('display', '');
                $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
            }
            else {
                $('#liReject').attr('style', 'display:none');
                $('#RejectionReason').attr('disabled', 'disabled');
                $('#RejectionReason').val('');
            }
        });

        if (ID > 0) {
            $('#txtTransferNumber').attr('readonly', 'readonly');
            $('#ddlReplenishingRoom').attr('disabled', 'disabled');
        }


        $("#CtabNew").on('focus', "input.AutoCompleteddl", function (e) {
            var ctrlID = $(this).attr('id');
            var type = "";
            var ajaxURL = '';

            if (ctrlID == "txtStagingName") {
                type = 'Staging';
                ajaxURL = '/Inventory/GetAllStagingHeaders';
            }


            $(this).autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: ajaxURL,
                        contentType: 'application/json',
                        dataType: 'json',
                        data: { NameStartWith: request.term },
                        success: function (data) {
                            response($.map(data, function (Items) {
                                if (type == 'Staging') {
                                    return {
                                        label: Items.StagingName,
                                        value: Items.StagingName,
                                        selval: Items.ID
                                    }
                                }
                            }));
                        },
                        error: function (err) {
                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                change: function (event, ui) {
                }
            });
        });



    });


    function FillTransferDetailGrid() {
        $('#DivLoading').show();
        $('#divLineItems').empty();
        var url = '@Url.Action("LoadTransferLineItems")';
        $.get(url, { 'TransferID': ID }, function (responseData) {
            $('#divLineItems').html(responseData);
            $('#DivLoading').hide();
            IsGridFilling = 0;
        });
    }

    $('#aRptSingle').on('click', function () {
        ReportExecutionSingleRecord('TransferMasterList', '@Model.GUID');
    });
    _Common.addRequiredSign();
</script>
