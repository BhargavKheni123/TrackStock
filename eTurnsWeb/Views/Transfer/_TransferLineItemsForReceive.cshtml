@model eTurns.DTO.TransferMasterDTO
@{
    GridHeaderSettings settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplaySaveButton = true, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = false, DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = true, ShowSelectAll = true, DataTableName = "TransferLineItemForReceive" + Model.ID };

    string DefaultBinName = ViewBag.DefaultBinNameInStagingHeader;
}
<div class="userListingWrapper">
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99.5%">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search</span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="InnerItem_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_QLItem_filter" />
                        </a>
                    </div>
                </div>
                <input type="button" id="btnDiv" value="Div" style="visibility: hidden" />
            </div>
            @Html.QuickListItemsGridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Orders)
            <div class="userContentInnerGrid" style="width: 99% !important; margin-left: 5px !important;
                float: left;">
                <table id="TransferLineItemForReceive@(Model.ID)" class="display">
                    <thead>
                        <tr>
                            <th>
                                Expand
                            </th>
                            <th>
                                Receive
                            </th>
                            <th>
                                Qty. To Receive
                            </th>
                            <th>
                                @ResTransfer.Location
                            </th>
                            <th>
                                @ResCommon.ID
                            </th>
                            <th>
                                @ResItemMaster.ItemNumber
                            </th>
                            <th>
                                @ResTransfer.RequireDate
                            </th>
                            <th>
                                @ResTransfer.RequestedQuantity
                            </th>
                            <th>
                                @ResTransfer.Approved
                            </th>
                            <th>
                                @ResTransfer.ReceivedQuantity
                            </th>
                            <th>
                                @ResTransfer.FulFillQuantity
                            </th>
                            <th>
                                @ResTransfer.InTransitQuantity
                            </th>

                            <th>
                                @ResItemMaster.Description
                            </th>
                            <th>
                                @ResItemMaster.Cost
                            </th>
                            <th>
                                @ResItemMaster.OnHandQuantity
                            </th>
                            <th>
                                @ResItemMaster.OnTransferQuantity
                            </th>
                            <th>
                                @ResItemMaster.StagedQuantity
                            </th>
                            @Html.RenderColumnsHeader("ItemMaster", typeof(eTurns.DTO.ResItemMaster), "Item")
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.TransferDetailList != null && Model.TransferDetailList.Count > 0)
                        {
                            foreach (var item in Model.TransferDetailList)
                            {
                                var totalOfReceivedAndReturnedQuantity = (item.ReceivedQuantity.GetValueOrDefault(0) + item.ReturnedQuantity.GetValueOrDefault(0));
                                <tr id="tr_@item.ID">
                                    <td>
                                        <a href="javascript:void(0);" id="aPlusMinus" onclick="return ShowHideInnerGrid(this,@item.ID);">
                                            <img src="/Content/images/drildown_open.jpg" alt="" />
                                        </a>
                                    </td>
                                    <td>
                                        @if (item.FulFillQuantity.GetValueOrDefault(0) - (totalOfReceivedAndReturnedQuantity) > 0)
                                        {
                                            <input id='btnInlineTransfer' type='button' style="width:93%" onclick="return QuantityReceive(this,@item.ID,'@item.GUID.ToString()','@item.ItemGUID.ToString()');"
                                                   value='Receive' class='GridBtnStyle inLineBtn btnInlineReceiveTrf' name="btnInlineTransfer" />
                                        }
                                    </td>
                                    <td>
                                        <input type="text" id="txtQtyToReceive" name="txtQtyToReceive" class="numericinput" value="@(item.FulFillQuantity.GetValueOrDefault(0)-totalOfReceivedAndReturnedQuantity)" />
                                    </td>
                                    <td>
                                        <span style="display:none">@item.BinName</span>
                                        @if (ViewBag.DefaultBinNameInStagingHeader != null && ViewBag.DefaultBinNameInStagingHeader != "")
                                        {
                                            @Html.TextBox("txtReceiveBin", DefaultBinName, new { id = "txtReceiveBin", @class = "text-boxinner text-boxQuantityFormat ", @style = "width:93%;", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            <span style='position:relative'>
                                                @Html.TextBox("txtReceiveBin", item.BinName, new { id = "txtReceiveBin", @class = "OrdDetailAuto text-boxinner", @style = "width:93%;" , @data_binid = @item.Bin })
                                                <a id='lnkShowAllOptions' href='javascript:void(0);' style='position:absolute; right:5px; top:0px;' class="ShowAllOptions">
                                                    <img src='/Content/images/arrow_down_black.png' alt='select' />
                                                </a>
                                                <input type="hidden" value="false" id="hdnIsLoadMoreLocations" />
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        @item.ID
                                    </td>
                                    <td>
                                        @item.ItemNumber
                                        <input id="hdnID" type="hidden" value="@item.ID" />
                                        <input id="hdnGUID" type="hidden" value="@item.GUID" />
                                        <input id="hdnItemGUID" type="hidden" value="@item.ItemGUID" />
                                        <input id="hdnItemNumber" type="hidden" value="@item.ItemNumber" />
                                        <input id="hdnSerialNumberTracking" type="hidden" value="@item.SerialNumberTracking.ToString()" />
                                        <input id="hdnLotNumberTracking" type="hidden" value="@item.LotNumberTracking.ToString()" />
                                        <input id="hdnIsLotSelectionRequire" type="hidden" value="@item.IsLotSelectionRequire.ToString()" />
                                        <input id="hdnTotalOfReceivedAndReturnedQuantity" type="hidden" value="@totalOfReceivedAndReturnedQuantity" />
                                    </td>
                                    <td>
                                        <input type='text' style="width:93%;background:white;" readonly="readonly" class='myDatePicker text-box' value='@item.RequiredDateString' id='hiddenDatePicker@(item.ID)' />

                                    </td>
                                    <td>
                                        @if (item.SerialNumberTracking)
                                        {
                                            @Html.TextBox("txtQty", item.RequestedQuantity, "{0:0}", new { @style = "width:93%;display:none;", @maxlength = "10", @class = "text-boxQuantityFormatSR text-boxinner" })
                                        }
                                        else
                                        {
                                            @Html.TextBox("txtQty", item.RequestedQuantity, eTurnsWeb.Helper.SessionHelper.QuantityFormat, new { @readonly = "readonly", @style = "width:93%;display:none;", @maxlength = "10", @class = "text-boxQuantityFormat text-boxinner" })
                                        }
                                        @*<input type="text" onkeydown="return OnlyNumeric(event,this);" readonly="readonly" id="txtQty" value='@(item.RequestedQuantity)' class="text-box" style="width:90px;background:white;" />*@
                                        @item.RequestedQuantity
                                    </td>
                                    <td>
                                        @item.ApprovedQuantity
                                        <input type="hidden" id="hdnApprovedQty" value="@item.ApprovedQuantity" />
                                    </td>
                                    <td>
                                        <span id="spnReceivedQty">@item.ReceivedQuantity</span>
                                    </td>
                                    <td>
                                        <span id="spnFullFillQty">@item.FulFillQuantity</span>
                                    </td>
                                    <td>
                                        <span id="spnIntransitQty">@item.IntransitQuantity</span>
                                    </td>

                                    <td>
                                        @item.Description
                                    </td>
                                    <td>
                                        @item.Cost
                                    </td>
                                    <td>
                                        @item.OnHandQuantity
                                    </td>
                                    <td>
                                        @item.OnTransferQuantity
                                    </td>
                                    <td>
                                        @item.StagedQuantity
                                    </td>
                                    @(Html.RenderColumnsArrayForDOM("ItemMaster", item, "Item"))
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div style="float:left;width:100%;">
                <input id="btnReceiveALL" type="button" value="Receive ALL" style="float: left;display:none;" class="CreateBtn" />&nbsp;
                <input id="btnCloseTransfer" type="button" value="Close Transfer" style="float: left;" class="CreateBtn" />
            </div>
        </div>
    </div>
</div>
<div class="dialog" id="TrnReceiveProcessing" style="display: none;">
    <div class="inner">
        <p class="text" id="TrnReceiveGWait" style="text-align: left; padding-left: 10px;">
            <b style="color: Red;">
                @*Kindly wait, transfer receive transaction is going on.....*@
                @eTurns.DTO.Resources.ResMessage.PleaseWaitTransGoingOn
            </b>
        </p>
        <p class="text" id="TrnReceiveGWaitImg" style="text-align: center; padding-left: 10px;">
            <img src="@Url.Content("~/Content/images/ajax.gif")" alt="loding" />
        </p>
    </div>
</div>
<div class="dialog" id="TrnReceivedInfoDialog" style="display: none; width: 470px;">
    <div class="inner" style="width: 470px;">
        <p class="text" id="TrnReceivedMSG" style="text-align: left; padding-left: 10px;">
        </p>
        <p class="text" style="text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="no" onclick="closeTrnReceiveInfoModel()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a>
        </p>
    </div>
</div>
<div class="dialog" id="CloseTrnDialog" style="display: none;">
    <div class="inner">
        <p class="text">
            Are you sure you want to close this transfer?
        </p>
        <a href="JavaScript:void(0)" id="bntCloseConfirmYes" class="yes yesornooryes">
            <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no"
               onclick="closeModalCloseTrnDialog();">
            <img src="~/Content/images/no.png" alt="@eTurns.DTO.Resources.ResCommon.No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<script type="text/javascript">

    $('#aSelectAll').on('click', function (e) {
        $('#TransferLineItemForReceive' + '@(Model.ID)').find("tbody tr").each(function (e) {
            if ($(this).hasClass('row_selected') == false)
                $(this).addClass('row_selected');

        });

        $(this).css('display', 'none');
        $('#aDeSelectAll').css('display', 'block');
        return false;
    });

    $('#aDeSelectAll').on('click', function (e) {
        $('#TransferLineItemForReceive' + '@(Model.ID)').find("tbody tr").each(function (e) {
            if ($(this).hasClass('row_selected'))
                $(this).removeClass('row_selected');
        });
        $(this).css('display', 'none');
        $('#aSelectAll').css('display', 'block');
        return false;
    });


    function closeTrnReceiveInfoModel() {
        $.modal.impl.close();
    }
    function closeModalCloseTrnDialog() {
        $.modal.impl.close();
    }

    $('#btnCloseTransfer').click(function () {
        $('#CloseTrnDialog').modal();
    });

    $('#bntCloseConfirmYes').click(function () {
        $.ajax({
            'url': 'UpdateTransferToClose',
            'data': { 'TransferID': '@Model.ID' },
            'success': function (result) {
                closeModalCloseTrnDialog();
                if (result.Status == "fail") {
                    var errorMsg = '<b style="color: Olive;">' + result.Message + '</b> <br />';
                    errorMsg = '<b> Not able to close the transfer due to following reasons.</b><br />' + errorMsg;
                    $('#TrnReceivedInfoDialog').find("#TrnReceivedMSG").html(errorMsg);
                    $('#TrnReceivedInfoDialog').modal();
                    FillTransferDetailGrid();
                }
                else {
                    SwitchTransferTab('CreateTransfer', 'frmTransfer');
                }
            },
            'error': function (result) {
                closeModalCloseTrnDialog();
                alert('@ResCommon.ErrorInProcess');
            }

        });
    });

    $('#btnReceiveALL').click(function () {

        if ($('#TransferLineItemForReceive' + '@Model.ID' + ' tbody tr.row_selected').length == 0) {
            alert("Please select single row to Receive");
            return false;
        }
        $('#TransferLineItemForReceive' + '@Model.ID' + ' tbody tr').each(function (i) {
            $(this).removeAttr('style');
        });
        $('#TrnReceiveProcessing').modal();
        $('#TrnReceiveProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');
        //setTimeout('ReceiveAllItem()', 1000);
        ReceiveAllItemOnbyOne();
        return false;
    });

    function ReceiveAllItemOnbyOne() {
        var errorMsg = '';
        var iserror = 0;
        var ErrorSrNo = 0;
        var duration = 500;
        var isLotSerialTypeItemToBeReceived = false;
        var lotSerialItems = new Array();

        $('#TransferLineItemForReceive' + '@Model.ID' + ' tbody tr.row_selected').each(function (i) {
            var tr = $(this);
            var serialNumberTracking = $(tr).find('#hdnSerialNumberTracking').val();
            var lotNumberTracking = $(tr).find('#hdnLotNumberTracking').val();
            var isLotSelectionRequire = $(tr).find('#hdnIsLotSelectionRequire').val();
            var id = $(tr).find('#hdnID').val();
            var itemGUId = $(tr).find('#hdnItemGUID').val();
            var itemNumber = $(tr).find('#hdnItemNumber').val();
            var GUid = $(tr).find('#hdnGUID').val();
            var qty = $(tr).find("#spnFullFillQty").text();
            var receivedQty = $(tr).find('#spnReceivedQty').text();
            var totalOfReceivedAndReturnedQuantity = $(tr).find('#hdnTotalOfReceivedAndReturnedQuantity').val(); // this will be sum of received quantity and returnedquantity
            var qtyToReceive = $(tr).find('#txtQtyToReceive').val();
            //var binID = $(tr).find("#ddlBin" + id).val();
            var txtBinName = $(tr).find("#txtReceiveBin").val();
            var binId = $(tr).find("#txtReceiveBin").attr('data-binid');
            var inTransitQty = parseFloat($(tr).find('#spnIntransitQty').text());
            var approvQty = $(tr).find('#hdnApprovedQty').val();

            var isStage = false;
            var stagingName = $('#txtStagingName').val();
            if ($.trim(stagingName).length > 0) {
                isStage = true;
            }
            if (isNaN(parseFloat(qty)) || parseFloat(qty) <= 0)
                qty = 0;
            if (isNaN(parseFloat(qtyToReceive)) || parseFloat(qtyToReceive) <= 0)
                qtyToReceive = 0;
            if (qtyToReceive == '') {
                qtyToReceive = '0';
            }

            if (qty == '') {
                qty = '0';
            }

            if (receivedQty == '') {
                receivedQty = '0';
            }

            if (totalOfReceivedAndReturnedQuantity == '') {
                totalOfReceivedAndReturnedQuantity = '0';
            }

            if ((isNaN(parseFloat(qtyToReceive)) == false && parseFloat(qtyToReceive) > 0) && (parseFloat(qty) - parseFloat(totalOfReceivedAndReturnedQuantity) > 0 && (parseFloat(qtyToReceive) <= (parseFloat(qty) - parseFloat(totalOfReceivedAndReturnedQuantity))))) {

                if (txtBinName.length > 0) {

                    if ((serialNumberTracking == "True" || (lotNumberTracking == "True" && isLotSelectionRequire == "True")) && ((parseFloat(totalOfReceivedAndReturnedQuantity) + parseFloat(qtyToReceive)) < parseFloat(qty)))
                    {
                        isLotSerialTypeItemToBeReceived = true;
                    }

                    lotSerialItems.push({ 'ItemGUID': itemGUId, 'GUID': GUid, "Bin": parseInt(binId), 'BinName': txtBinName, 'ReceivedQuantity': parseFloat(receivedQty), 'IntransitQuantity': inTransitQty, "ApprovedQuantity": parseFloat(qtyToReceive), 'IsStaging': isStage });
                }
            }

        });

        if (isLotSerialTypeItemToBeReceived == true) {
            openLotSerialSelectionPopUp(lotSerialItems);
        }
        else {
            $('#TransferLineItemForReceive' + '@Model.ID' + ' tbody tr.row_selected').each(function (i) {

                var tr = $(this);
                setTimeout(function () {

                    var trcolor = 'Olive';
                    var arr = new Array();
                    var id = $(tr).find('#hdnID').val();
                    var itemGUId = $(tr).find('#hdnItemGUID').val();
                    var itemNumber = $(tr).find('#hdnItemNumber').val();
                    var GUid = $(tr).find('#hdnGUID').val();
                    var qty = $(tr).find("#spnFullFillQty").text();
                    var receivedQty = $(tr).find('#spnReceivedQty').text();
                    var totalOfReceivedAndReturnedQuantity = $(tr).find('#hdnTotalOfReceivedAndReturnedQuantity').val(); // this will be sum of received quantity and returnedquantity
                    var qtyToReceive = $(tr).find('#txtQtyToReceive').val();
                    //var binID = $(tr).find("#ddlBin" + id).val();
                    var txtBinName = $(tr).find("#txtReceiveBin").val();
                    var isStage = false;
                    var stagingName = $('#txtStagingName').val();

                    if ($.trim(stagingName).length > 0) {
                        isStage = true;
                    }

                    if (isNaN(parseFloat(qty)) || parseFloat(qty) <= 0)
                        qty = 0;

                    if (isNaN(parseFloat(qtyToReceive)) || parseFloat(qtyToReceive) <= 0)
                        qtyToReceive = 0;

                    if (qtyToReceive == '') {
                        qtyToReceive = '0';
                    }

                    if (qty == '') {
                        qty = '0';
                    }

                    if (receivedQty == '') {
                        receivedQty = '0';
                    }

                    if (totalOfReceivedAndReturnedQuantity == '') {
                        totalOfReceivedAndReturnedQuantity = '0';
                    }

                    //if (isNaN(parseFloat(qty)) == false && parseFloat(qty) > 0) {
                    if ((isNaN(parseFloat(qtyToReceive)) == false && parseFloat(qtyToReceive) > 0) && (parseFloat(qty) - parseFloat(totalOfReceivedAndReturnedQuantity) > 0 && (parseFloat(qtyToReceive) <= (parseFloat(qty) - parseFloat(totalOfReceivedAndReturnedQuantity))))) {
                        if (txtBinName.length > 0) {
                            $.ajax({
                                url: '@Url.Action("ReceiveItemQuantity")',
                                type: 'POST',
                                async: false,
                                data: { 'ItemID': itemGUId, 'DetailID': GUid, 'ReceiveBinName': txtBinName, 'IsStaging': isStage, 'QtyToReceive': qtyToReceive },
                                success: function (r) {
                                    if (r.Status)
                                    {
                                        //showGeneralMessage('Record Saved Successfully');
                                        trcolor = 'Green';
                                        ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                        errorMsg = errorMsg + '<b style="color: Green;">' + ErrorSrNo + ') ' + itemNumber + ': Received Successfully. </b> <br />';
                                    }
                                    else
                                    {
                                        iserror = 1;
                                        trcolor = 'Red';
                                        ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                        errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': ' + r.Message + ' </b> <br />';
                                    }
                                    var Recvqty = $(tr).find("#spnReceivedQty").val();
                                    if (isNaN(parseFloat(Recvqty)))
                                        Recvqty = 0;

                                    if (isNaN(parseFloat(qty)))
                                        qty = 0;

                                    Recvqty = Recvqty + qty;
                                    $(tr).find("#spnReceivedQty").val(Recvqty);
                                    $(tr).find("#spnFullFillQty").val(0);

                                },
                                errorMsg: function (f) {
                                    iserror = 1;
                                    trcolor = 'Red';
                                    ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                    errorMsg = errorMsg + '<b style="color: Red;">' + ErrorSrNo + ') Server error occured!!  </b> <br />';
                                }
                            });
                        }
                        else {
                            iserror = 1;
                            ErrorSrNo = parseInt(ErrorSrNo) + 1;
                            errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': Location is mandatory. </b> <br />';
                        }
                    }
                    else {
                        iserror = 1;
                        ErrorSrNo = parseInt(ErrorSrNo) + 1;
                        errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': ' + "@ResTransfer.FulFillQuantityNotExist" +  '</b> <br />';

                    }
                    $(tr).css('background-color', trcolor);
                }, duration * i);
            });

            setTimeout(function () {
                if (iserror >= 1) {
                    closeTrnReceiveInfoModel();
                    errorMsg = '<b>Some of the Item(s) is(are) not able to receive, due to following reasons.</b><br />' + errorMsg;
                    $('#TrnReceivedInfoDialog').find("#TrnReceivedMSG").html(errorMsg);
                    $('#TrnReceivedInfoDialog').modal();
                    window.parent.$("a.editTrfLink[data-id='@Model.ID']").trigger('click'); 
                }
                else {
                    closeTrnReceiveInfoModel();
                    errorMsg = '<b>Transfer Received successfully</b><br />'
                    $('#TrnReceivedInfoDialog').find("#TrnReceivedMSG").html(errorMsg);
                    $('#TrnReceivedInfoDialog').modal();
                    window.parent.$("a.editTrfLink[data-id='@Model.ID']").trigger('click'); 
                    $('#btnCancelInFullFilll').click();
                }

            }, 5000);
        }

    }

    var anOpen = [];
    function ShowHideInnerGrid(ctrl, id) {
        $('#DivLoading').show();

        var tr = $('#tr_' + id);


        var nTr = tr[0];

        var i = $.inArray(nTr, anOpen);

        var dtTable = $('#TransferLineItemForReceive' + TrfID).dataTable();

        if (i === -1) {
            $('img', ctrl).attr('src', sImageUrl + "drildown_close.jpg");
            dtTable.fnOpen(nTr, fnFormatDetails(dtTable, nTr), '');
            anOpen.push(nTr);
        }
        else {

            $('img', ctrl).attr('src', sImageUrl + "drildown_open.jpg");
            dtTable.fnClose(nTr);
            anOpen.splice(i, 1);
            $('#DivLoading').hide();
        }
    }

    function fnFormatDetails(oTable, nTr) {
        var oData = oTable.fnGetData(nTr);
        var sOut = '';
        var ItemGUId = $(nTr).find('#hdnItemGUID').val();
        var GUId = $(nTr).find('#hdnGUID').val();

        $('#DivLoading').show();
        $.ajax({
            "url": '@Url.Content("~/Transfer/ItemRetrived")',
            data: { 'ItemID': ItemGUId, 'DetailID': GUId },
            "async": false,
            cache: false,
            "dataType": "text",
            "success": function (json) {
                sOut = json;
                $('#DivLoading').hide();
            },
            error: function (response) {
            }
        });

        return sOut;
    }
    function QuantityReceive(obj, id, GUid, itemGUId) {
        $('#DivLoading').show();
        var tr = $(obj).parent().parent();
        var txtBinName = $(tr).find("#txtReceiveBin").val();
        var isStage = false;
        var stagingName = $('#txtStagingName').val();
        if ($.trim(stagingName).length > 0) {
            isStage = true;
        }

        var FullQty = $(tr).find('#spnFullFillQty').text();
        var qtyToReceive = $(tr).find('#txtQtyToReceive').val();
        var receivedQty = $(tr).find('#spnReceivedQty').text();
        var totalOfReceivedAndReturnedQuantity = $(tr).find('#hdnTotalOfReceivedAndReturnedQuantity').val(); // this will be sum of received quantity and returnedquantity
        var binId = $(tr).find("#txtReceiveBin").attr('data-binid');
        var inTransitQty = parseFloat($(tr).find('#spnIntransitQty').text());
        var approvQty = $(tr).find('#hdnApprovedQty').val();
        var serialNumberTracking = $(tr).find('#hdnSerialNumberTracking').val();
        var lotNumberTracking = $(tr).find('#hdnLotNumberTracking').val();
        var isLotSelectionRequire = $(tr).find('#hdnIsLotSelectionRequire').val();
        var tempBinID = $(tr).find("#ddlBin" + id).val();
        var itemNumber = $(tr).find('#hdnItemNumber').val();

        if (txtBinName.length > 0) {
            if (isNaN(parseFloat(FullQty)) || parseFloat(FullQty) <= 0)
                FullQty = 0;
            if (isNaN(parseFloat(receivedQty)) || parseFloat(receivedQty) <= 0)
                receivedQty = 0;
            if (isNaN(parseFloat(totalOfReceivedAndReturnedQuantity)) || parseFloat(totalOfReceivedAndReturnedQuantity) <= 0)
                totalOfReceivedAndReturnedQuantity = 0;

            if (parseFloat(FullQty) - parseFloat(totalOfReceivedAndReturnedQuantity) > 0 && (parseFloat(qtyToReceive) <= (parseFloat(FullQty) - parseFloat(totalOfReceivedAndReturnedQuantity)))) {
                if ((isNaN(parseFloat(qtyToReceive)) == false && parseFloat(qtyToReceive) > 0)) {

                    if ((serialNumberTracking == "True" || (lotNumberTracking == "True" && isLotSelectionRequire == "True")) && ((parseFloat(totalOfReceivedAndReturnedQuantity) + parseFloat(qtyToReceive)) < parseFloat(FullQty)))
                    {
                        var lotSerialItems = new Array();
                        lotSerialItems.push({ 'ItemGUID': itemGUId, 'GUID': GUid, "Bin": parseInt(binId), 'BinName': txtBinName, 'ReceivedQuantity': parseFloat(receivedQty), 'IntransitQuantity': inTransitQty, "ApprovedQuantity": parseFloat(qtyToReceive), 'IsStaging': isStage });
                        openLotSerialSelectionPopUp(lotSerialItems);
                    }
                    else
                    {
                        $.ajax({
                            url: '@Url.Action("ReceiveItemQuantity")',
                            type: 'POST',
                            data: { 'ItemID': itemGUId, 'DetailID': GUid, 'ReceiveBinName': txtBinName, 'IsStaging': isStage, 'QtyToReceive': qtyToReceive },
                            success: function (r) {
                                if (r.Status) {
                                    showGeneralMessage('Record Saved Successfully');
                                    $('#DivLoading').hide();
                                }
                                else {
                                    closeTrnReceiveInfoModel();
                                    var errorMsg = '<b style="color: Olive;"> 1) ' + itemNumber + ': ' + r.Message + ' </b> <br />';
                                    errorMsg = '<b> Item is not able to receive, due to following reasons.</b><br />' + errorMsg;
                                    $('#TrnReceivedInfoDialog').find("#TrnReceivedMSG").html(errorMsg);
                                    $('#TrnReceivedInfoDialog').modal();
                                    $('#DivLoading').hide();
                                }
                                var receiveButtonCount = $('[name="btnInlineTransfer"]');
                                if (receiveButtonCount === undefined || receiveButtonCount.length < 2) {
                                    window.parent.$("a.editTrfLink[data-id='@Model.ID']").trigger('click'); //window.parent.$('#aEditLink').trigger('click');
                                }
                                else {
                                    FillTransferDetailGrid();
                                }
                            }
                        });
                    }
                }
                else {
                    //alert('Quantity not available for Receive');
                    //showGeneralMessage('Quantity not available for Receive');
                    showGeneralMessage('Please enter quantity to Receive');
                    $('#DivLoading').hide();
                }
            }
            else {
                showGeneralMessage('Quantity not available for Receive or Received Qty is not more than transfered quantity');
                $('#DivLoading').hide();
            }
        }
        else {
            //alert('Please Select Bin Location');
            showGeneralMessage('Please Select Bin Location');
            $('#DivLoading').hide();
        }
        return false;
    }

    function showGeneralMessage(text) {
        $("#spanGlobalMessage").html(text);
        showNotificationDialog();
    }

    function openLotSerialSelectionPopUp(lotSerialItems)
    {
        var errorMsg = '';
        $('#DivLoading').show();

        if (lotSerialItems.length > 0) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("TransferItemQuantityForReceive", "Transfer")',
                dataType: 'html',
                data: { 'para': JSON.stringify(lotSerialItems) },
                async: false,
                success: function (RetData) {
                    $('#DivLoading').hide();
                    $.modal.impl.close();
                    $("#DivTransferSelection").html("").html(RetData)
                    $("#DivTransferSelection").dialog('open');

                },
                error: function (err) {
                    console.log(err);
                }
            });
        }
        return false;
    }

    $(document).ready(function () {
        var inlineReceiveButtonCount =  $(".btnInlineReceiveTrf:visible").length;

        if (typeof (inlineReceiveButtonCount) != "undefined" && inlineReceiveButtonCount != null && (parseInt(inlineReceiveButtonCount) || 0) > 0)
        {
            $("#btnReceiveALL").show();
        }
        
        $("#DivTransferSelection").dialog({
            autoOpen: false,
            show: "blind",
            hide: "explode",
            height: 700,
            title: "Receive Details",
            width: 900,
            modal: true,
            open: function () {
            },
            beforeClose: function () {
            },
            close: function () {
                $('#DivLoading').hide();
                $("#DivTransferSelection").empty();
            }
        });
    });
</script>
<script type="text/javascript">
    var TrfID = '@Model.ID';
    var TrfStatus = '@Model.TransferStatus';
    var NotAllowedCharCodes = [9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40];
    var oTableTransferLineItemForReceives;
    var bIsFilter = false;
    var objTransferReceiveGridColumns = {};
    var trfInOutQtyOpenTrList = [];

    $('#TransferLineItemForReceive' + TrfID).on('click', ".ShowAllOptions", function (e) {
        $(this).siblings('.OrdDetailAuto').trigger("focus");
        $(this).siblings(".OrdDetailAuto").autocomplete("search", " ");
    });

    $('#TransferLineItemForReceive' + TrfID).on('focus', "input.OrdDetailAuto", function (e) {
        var ajaxURL = '/Master/GetBinForItemOrStaging';
        var itmGuid = $(this).parent().parent().parent().find('#hdnItemGUID').val();
        var stagingName = $('#txtStagingName').val();
        var tr = $(this).parent().parent().parent();
        var hdnIsLoadMoreLocations = $(tr).find("#hdnIsLoadMoreLocations").val();

        $(this).autocomplete("destroy");
        $(this).autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: ajaxURL,
                    type: 'POST',
                    data: JSON.stringify({ 'ItemGuid': itmGuid, 'StagingHeaderName': stagingName, 'IncludeQty': false, 'NameStartWith': request.term, 'IsLoadMoreLocations': hdnIsLoadMoreLocations }),
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data) {
                        response($.map(data, function (Items) {
                            return {
                                label: Items.Value,
                                value: Items.Key
                            }
                        }));
                    },
                    error: function (err) {
                    }
                });
            },
            autoFocus: false,
            minLength: 1,
            select: function (event, ui) {
                //$(this).val(ui.item.value);
                if (ui.item.value == MoreLocation) {
                    $(tr).find("#hdnIsLoadMoreLocations").val("true");
                    $(this).trigger("focus");
                    $(this).autocomplete("search", " ");
                    return false;
                }
                else {
                    $(this).val(ui.item.value);
                }
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                $('ul.ui-autocomplete').css('overflow-y', 'auto');
                $('ul.ui-autocomplete').css('max-height', '300px');
                $('ul.ui-autocomplete').css('z-index', '99999');
            },
            close: function () {
                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            },
            change: function (event, ui) {
            }
        });
    });

    $(document).ready(function () {
        objTransferReceiveGridColumns = GetGridChildGridColumnsObject('TransferLineItemForReceive' + TrfID);
        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });

        $(".text-boxQuantityFormatSR").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 0
        });

        var ColumnObject = new Array();
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });

        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });

        //ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });


        var gaiSelected = [];
        oTableTransferLineItemForReceives = $('#TransferLineItemForReceive' + TrfID).dataTable({
            "bJQueryUI": true,
            "bRetrieve": true,
            "bDestroy": true,
            "bScrollCollapse": true,
            "sScrollX": "110%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[0, "desc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },

            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                //  if (!bIsFilter) {
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'TransferLineItemForReceiveList' },
                    "async": true,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = json;
                    }
                });
                // }
                bIsFilter = false;
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'TransferLineItemForReceiveList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");

            }
             , "aoColumns": ColumnObject
        });

        $('.DTTT_container').css('z-index', '-1');
        $('#btnblock').css({ 'margin-right': '45px' });

        $.fn.dataTableExt.afnSortData['dom-text'] = function (oSettings, iColumn) {
            var aData = [];
            $('td:eq(' + iColumn + ') input', oSettings.oApi._fnGetTrNodes(oSettings)).each(function () {
                aData.push(this.value);
            });
            return aData;
        }
        $('#deleteRows1').css('display', 'none');
        $('#saveRows').css('display', 'none');




    });




    if ('@Model.IsRecordNotEditable' === 'True') {
        $('select', '#TransferLineItemForReceive' + TrfID)
         .not('#btnInlineTransfer,#aPlusMinus')
            .attr('disabled', 'disabled');

        $(':input[type=text], textarea', '#TransferLineItemForReceive' + TrfID)
            .attr('readonly', 'readonly');

        $('#saveRows').attr('style', 'display:none');
        $('#deleteRows1').attr('style', 'display:none');


    }


    $('#TransferLineItemForReceive' + TrfID + ' tbody tr').die('tap click');
    $('#deleteRows1').unbind("click");
    $('#Gobtn1').unbind("click");
    $('#clear_QLItem_filter').unbind("click");
    $('#saveRows').die('click');
    $('#PageNumber1').unbind("keydown");
    $('#btnModelYesInnerGrid').die('click');
    var lastChecked1;
    var starttrvalue1 = "";
    $('#TransferLineItemForReceive' + TrfID + ' tbody tr').live('tap click', function (e) {
        //$(this).toggleClass('row_selected');
        //return false;

        if ($(e.target).hasClass("control") == true || e.target.nodeName.toLowerCase() == "img" || e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text" || e.target.type == "button" || $(e.target).is('a') == true || $(e.target).is('span') == true
            || $(e.target).hasClass("selectBox")
        ) {
            e.stopPropagation();
        }
        else {
            if (lastChecked1 !== undefined && lastChecked1 != null && !lastChecked1) {
                lastChecked1 = this;
            }

            if (e.shiftKey) {
                var start = $('#TransferLineItemForReceive' + TrfID + ' tbody tr').index(this);
                var end = $('#TransferLineItemForReceive' + TrfID + ' tbody tr').index(lastChecked1);

                var stringval1 = readCookieforshift("selectstartindex");
                if (stringval1 != null) {
                    var endindex = $(this).closest('tr').attr('id');
                    createCookieforshift("selectendindex", endindex, 1);
                    if ($("#hdnPageName").val() !== undefined) {
                        var pagename = '';
                        pagename = $("#hdnPageName").val();
                        GetOnlyIdsForPassPagesForshift(pagename, true);
                    }
                }

                for (i = Math.min(start, end); i <= Math.max(start, end); i++) {
                    if (!$('#TransferLineItemForReceive' + TrfID + ' tbody tr').eq(i).hasClass('row_selected')) {
                        $('#TransferLineItemForReceive' + TrfID + ' tbody tr').eq(i).addClass("row_selected");
                    }
                }
                if (window.getSelection) {
                    if (window.getSelection().empty) {  // Chrome
                        window.getSelection().empty();
                    } else if (window.getSelection().removeAllRanges) {  // Firefox
                        window.getSelection().removeAllRanges();
                    }
                } else if (document.selection) {  // IE?
                    document.selection.empty();
                }
            } else if ((e.metaKey || e.ctrlKey)) {
                $(this).toggleClass('row_selected');
            } else {
                $(this).toggleClass('row_selected');


                if ($(this).hasClass('row_selected')) {
                    (starttrvalue1 == "") ? starttrvalue1 = $(this).closest('tr').attr('id') : starttrvalue1 = starttrvalue1 + "," + $(this).closest('tr').attr('id');
                    createCookieforshift("selectstartindex", starttrvalue1, 1);
                } else {

                    var stringval = readCookieforshift("selectstartindex");
                    if (stringval != "undefined") {
                        if (stringval != null) {
                            var tmp = stringval.split(',');
                            var index = tmp.indexOf($(this).closest('tr').attr('id'));
                            if (index !== -1) {
                                tmp.splice(index, 1);
                                stringval = tmp.join(',');
                                createCookieforshift("selectstartindex", stringval, 1);
                            }
                        }
                    }

                }
            }

            lastChecked1 = this;
        }

    });


    $('#PageNumber1').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#Gobtn1").click();
            return false;
        }
    });

    $("#Gobtn1").click(function () {
        var pval = $('#PageNumber1').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (pval == 0)
            return;

        $('#TransferLineItemForReceive' + TrfID).dataTable().fnPageChange(Number(pval - 1));
        $('#PageNumber1').val('');
    });

    /* global search function */
    function fnFilterTransferLineItemForReceive() {
        //set filter only if more than 2 characters are pressed
        //if (typeof $("#InnerItem_filter") != 'undefined' && ($("#InnerItem_filter").val().length > 2 || $("#InnerItem_filter").val().length == 0)) {

        bIsFilter = true;
        var searchtext = $("#InnerItem_filter").val().replace(/'/g, "''");
        $('#TransferLineItemForReceive' + TrfID).dataTable().fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );

        $('#TransferLineItemForReceive' + TrfID + ' td').removeHighlight();

        if (searchtext.length > 0)
            $('#TransferLineItemForReceive' + TrfID + ' td').highlight($("#InnerItem_filter").val());
        // }
    }


    $("#InnerItem_filter").on("keyup", function (e) {

        var code = (e.keyCode ? e.keyCode : e.which);
        var index = $.inArray(code, NotAllowedCharCodes);
        if (index >= 0) return false;

        fnFilterTransferLineItemForReceive();

    });

    $("#InnerItem_filter").on("keydown", function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            fnFilterTransferLineItemForReceive();
        }

    });


    $("#clear_QLItem_filter").click(function () {
        $("#InnerItem_filter").val('');
        fnFilterTransferLineItemForReceive();
        $("#InnerItem_filter").focus();
        return false;
    });
    $("#ColumnOrderSetup1").off('click')
    $("#ColumnOrderSetup1").on('click', function () {
        $("#divDetailGridReorderPopup").data({ 'DataTableName': 'TransferLineItemForReceive' + TrfID, 'ListName': 'TransferLineItemForReceiveList', 'ColumnObjectName': 'objTransferReceiveGridColumns' }).dialog("open");
        return false;
    });

    function FillDetailGridDiv() {
        $('#divLineItems').empty();
        $('#divLineItems').load('@Url.Action("LoadTransferLineItemsForReceive", new { ID = @Model.ID })', function () {
            $('#DivLoading').hide();
            $("#divDetailGridReorderPopup").dialog("close");
        });
    }
</script>
