@model eTurns.DTO.LabelPrinting.LabelFieldModuleTemplateDetailDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
<script src="../../Scripts/RemoveOverflowContent.js" type="text/javascript"></script>
<style type="text/css">
    .tdselect
    {
        background-color: #9BB3DA;
    }
    
    .nottdselect
    {
        height: auto;
    }
</style>
<div class="userHead">
    @{             
        bool isUpdate;
        bool isInsert;
        if (ViewBag.ViewOnly == true)
        {
            isUpdate = false;
            isInsert = false;
        }
        else
        {

            isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.LabelPrinting, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
            isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.LabelPrinting, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        }
    }
    @using (Ajax.BeginForm("LabelConfigurationSave", "LabelPrinting", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onBinSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmLabelConfiguration" }))
    {   
        @Html.ValidationSummary(true) 
        if (Model.ID != 0)
        {        
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.Label("")
                    </label>
                    <span></span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedOn)
                    </label>
                    : <span>@(Model.CreatedOn)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedOn)
                    </label>
                    : <span>@(Model.UpdatedOn)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        }         
        <div class="editorForm" style="float: left; width: 40%;">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.Label(eTurns.DTO.LabelPrinting.ResLabelPrinting.CaptionTemplateDropdown)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(x => x.TemplateID, new SelectList(ViewBag.LabelTemplateList, "ID", "TemplateName", Model.TemplateID), new { id = "ddlLabelTemplateList", @class = "selectBox", @style = "width:150px;" })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.TemplateID)</span>
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.UpdatedBy)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Name)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Name, new { id = "NameNew", @class = "text-box", maxlength = 128, @style = "width:135px;" })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Name)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                        @Html.HiddenFor(model => model.CreatedOn)
                        @Html.HiddenFor(model => model.UpdatedOn)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.UpdatedBy)
                        @Html.HiddenFor(model => model.CompanyID)
                        @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                        @Html.HiddenFor(model => model.IsDeleted)
                        @Html.HiddenFor(model => model.IsArchived)
                        @Html.HiddenFor(model => model.LabelHTML, new { @id = "hdnHTML", @name = "hdnHTML" })
                        @Html.HiddenFor(model => model.LabelXML, new { @id = "hdnXML", @name = "hdnXML" })
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.Label(eTurns.DTO.LabelPrinting.ResLabelPrinting.CaptionModuleDropdown)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(x => x.ModuleID, new SelectList(ViewBag.LabelModuleList, "ID", "ModuleName", Model.ModuleID), new { id = "ddlLabelModuleList", @class = "selectBox", @style = "width:150px;" })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ModuleID)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(x => x.FontSize)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.FontSize, "{0:0}", new { @id = "txtFontSize", @class = "text-boxPriceFormat", @style = "width:135px;" })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.FontSize)</span>
                    </div>
                </li>
            </ul>
        </div>        
        <div id="divFieldsDetails" class="editorForm padRightNone" style="width: 55%;">
        </div>    
        <div style="width: 100%; float: left; text-align: center;">
            &nbsp;
        </div>
        <div style="width: 100%; float: left; text-align: center;">
            &nbsp;
        </div>
        <div id="divLabelDesingMain" style="width: 100%; float: left; text-align: center;">
            <div style="width: 100%; float: left; height: 25px; vertical-align: middle; text-align: center;">
                <input type="button" id="btnAddRow" name="btnAddRow" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonRowAdd" class="CreateBtn"
                    style="float: none; margin: 0px 2px; padding: 3px;" />
                <input type="button" id="btnAddCol" name="btnAddCol" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonColumnAdd " class="CreateBtn"
                    style="float: none; margin: 0px 2px; padding: 3px;" />
                <input type="button" id="btnAddBarcode" name="btnAddBarcode" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonBarcodeAdd" class="CreateBtn"
                    style="float: none; margin: 0px 2px; padding: 3px;" />
                <input type="button" id="btnMerge" name="btnMerge" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonMergeCell" class="CreateBtn"
                    style="float: none; margin: 0px 2px; padding: 3px;" />
            </div>
            <div id="divLabelDesing" style="float: left; text-align: center; width: 100%; height: auto;
                padding: 15px 0px;">
                <span id="spnLabelWidth" style="float: left; width: 100%; padding: 0px; margin: 0px;
                    font-weight: bold; font-family: Verdana;"></span><span id="spnLabelHeight" style="float: left;
                        padding: 0px; margin: 0px; font-weight: bold; width: auto; font-family: Verdana;"
                        class="vertical-text-inner"></span>
                <table id="tblDynamic" border="0" cellpadding="0" cellspacing="0" style="margin: 0px auto;
                    border: 1px solid Gray; background-color: White; border-collapse: collapse;">
                    <tbody style="table-layout: auto; height: 99%; width: 99%; float: left;">
                    </tbody>
                </table>
            </div>
            <div style="width: 100%; float: left; text-align: center;">
                @eTurns.DTO.LabelPrinting.ResLabelPrinting.Note
            </div>
            <div style="width: 100%; float: left; text-align: center;">
                &nbsp;
            </div>
            <div style="width: 100%; float: left; height: 25px; vertical-align: middle; text-align: center;">
                <input type="button" id="btnRemoveRow" name="btnRemoveRow" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonRowRemove" class="CreateBtn"
                    style="float: none; margin: 0px 2px; padding: 3px;" />
                <input type="button" id="btnRemoveCol" name="btnRemoveCol" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonColumnRemove" class="CreateBtn"
                    style="float: none; margin: 0px 2px; padding: 3px;" />
                <input type="button" id="btnRemoveBarcodeRow" name="btnRemoveBarcodeRow" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonBarcodeRemove"
                    class="CreateBtn" style="float: none; margin: 0px 2px; padding: 3px;" />
                <input type="button" id="btnReset" name="btnReset" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonReset" class="CreateBtn"
                    style="float: none; margin: 0px 2px; padding: 3px;" />
                <input type="button" id="btnSplit" name="btnSplit" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonSplitCell" class="CreateBtn"
                    style="float: none; margin: 0px 2px; padding: 3px;" />
            </div>
        </div>
        
        <div style="width: 100%; float: left; text-align: center;">
            &nbsp;
        </div>
        <div class="editorForm" style="width: 100%; float: left; text-align: center;">
            <ul>
                <li>@*<div class="editor-label">
                        &nbsp;
                    </div>*@
                    <div class="BtnBlockform" style="width: 50%;">
                        <input type="button" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonCancel" id="btnCancel" class="CreateBtn" />
                        @if (isInsert == true && Model.ID == 0)
                        {                            
                            <input type="submit"  value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonSave" id="btnSave" class="CreateBtn" />                            
                        }
                        else if (isUpdate == true)
                        {                            
                            <input type="submit" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.ButtonSave" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == false && isInsert == false)
                        {                             
                            <script type="text/javascript">
                                disableControls('frmLabelConfiguration');
                                $('#btnCancel').removeAttr('disabled');
                            </script>
                        }
                    </div>
                </li>
            </ul>
        </div>            
    }
</div>
<script type="text/javascript">
    $("form").submit(function (e) {
        $('#DivLoading').show();
        $('#hdnHTML').val($('#divLabelDesing').html());

        $('#hdnXML').val('');
        var xml = GetXML();
        $('#hdnXML').val(xml);
        $.validator.unobtrusive.parse("#frmLabelConfiguration");
        if ($(this).valid()) {

        }
        e.preventDefault();
    });
</script>
<script type="text/javascript">
    $(".text-boxPriceFormat").priceFormat({
        prefix: '',
        thousandsSeparator: '',
        centsLimit: parseInt('0')
    });

    function onBinSuccess(response) {
        IsRefreshGrid = true;
        showNotificationDialog();
        $("#spanGlobalMessage").text(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();
        $('#DivLoading').hide();
        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#NameNew").val("");
            $("#NameNew").focus();
        }
        else if (idValue == 0) {
            $("#NameNew").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                clearControls('frmLabelConfiguration');
                ShowNewTab('LabelConfigurationCreate', 'frmLabelConfiguration');
            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#NameNew").val("");
                $("#NameNew").focus();
            }
            else
                SwitchTextTab(0, 'LabelConfigurationCreate', 'frmLabelConfiguration');
        }
    }
    function onFailure(message) {

        $("#spanGlobalMessage").text(message.statusText);
        showNotificationDialog();
        $("#NameNew").focus();
    }

    $('#ddlLabelModuleList').change(function () {
        $('#btnReset').click();
        GetFields($(this).val())

    });
    $('#btnCancel').click(function (e) {
        SwitchTextTab(0, 'LabelConfigurationCreate', 'frmLabelConfiguration');
    });
    function GetFields(val) {

        $('#divFieldsDetails').html('');
        if (val != '' && isNaN(parseInt(val)) == false && parseInt(val) > 0) {
            $('#DivLoading').show();
            $.get('GetFieldsForModules', JSON.stringify($('#frmLabelConfiguration').serialize()), function (result) {
                $('#divFieldsDetails').html(result);
                $('#spnBKErrorMsg').find('span').text('')
                $("#divFieldList label").draggable({
                    appendTo: "body",
                    helper: "clone"
                });
                $('#DivLoading').hide();
            });
        }

    }

    $('#ddlLabelTemplateList').change(function () {
        $('#btnReset').click();
        GetTemplateDetail($(this).val())

    });
    function GetTemplateDetail(val) {
        if (val != '' && isNaN(parseInt(val)) == false && parseInt(val) > 0) {
            $('#DivLoading').show();
            $('#divLabelDesingMain').show();
            $.get('GetTemplateDetailByID', { 'TemplateID': val }, function (result) {
                var width = result.TemplateDetail.LabelWidth + 'in';
                var height = result.TemplateDetail.LabelHeight + 'in';
                $('#tblDynamic tbody').css('width', width);

                $('#tblDynamic tbody').css('height', height);


                $('#spnLabelHeight').css('height', height);
                $('#spnLabelWidth').text(width);
                $('#spnLabelHeight').text(height);
                $("#spnLabelHeight").offset({ left: 0 });
                $("#spnLabelHeight").offset({ left: ($('#tblDynamic').offset().left) - 15 })
                $('#DivLoading').hide();
            });
        }
        else {
            $('#divLabelDesingMain').hide();
        }

    }

    $(document).ready(function () {
        GetFields($('#ddlLabelModuleList').val())
        var thml = $('#hdnHTML').val();
        if ($.trim(thml).length > 0) {
            $('#divLabelDesing').html('');
            $('#divLabelDesing').append(thml.toString());
            $(this).find('.ui-resizable-handle').remove();
            SetRowID();
        }
        else
            GetTemplateDetail($('#ddlLabelTemplateList').val())
    });

    $('#txtFontSize').blur(function () {
        SetRowID();
    });
    function SetRowID() {

        var rowIndex = 1;
        var colIndex = 1;
        var maxCol = GetMaxColumns();
        var width = $('#tblDynamic tbody').css('width');
        var wdt = ((99) / maxCol);
        $('#tblDynamic tr').each(function () {
            $(this).attr('id', 'tr_' + rowIndex);
            colIndex = 1;
            $(this).find('td').each(function () {
                if ($(this).find('#div_barcode').length == 0) {
                    $(this).attr('id', 'td_' + rowIndex + '_' + colIndex);
                    $(this).css('width', wdt + '%');

                    var colspn = $(this).attr('colspan');
                    if (width != null && width.length > 0) {
                        var wd = width.replace('px', '');
                        wd = (wd / maxCol)
                        wd = wd - maxCol;

                        $(this).css('width', wd + 'px');
                        if (colspn != null && colspn != undefined && !isNaN(parseInt(colspn)) && parseInt(colspn) > 1) {
                            wd = (wd * parseInt(colspn));
                            if (parseInt(colspn) <= 2)
                                wd += 2;
                            else
                                wd += (parseInt(colspn) + 1);

                            $(this).css('width', wd + 'px');
                        }
                        else {
                            $(this).attr('colspan', 1);
                        }
                    }

                    $(this).css('font-size', '9pt');

                    var fs = $.trim($('#txtFontSize').val());
                    if (fs.length > 0) {
                        $(this).css('font-size', fs + 'pt');
                    }
                    $(this).css('font-family', 'Verdana');

                    $(this).css('border-collapse', 'collapse');
                    $(this).css('text-align', 'left');
                    //$(this).css('height', '20px');
                    //$(this).css('height', (100 / $('#tblDynamic tr').length) + '%');

                }
                else {

                    $(this).attr('colspan', maxCol);
                    $(this).css('width', '99%');
                    if (width != null && width.length > 0) {
                        var wd = width.replace('px', '');
                        wd = (wd)
                        wd = wd - 1;
                        $(this).css('width', wd + 'px');
                    }

                    var maxwdth = $('#tblDynamic tbody').css('width').replace('px', '');
                    var maxHght = $('#tblDynamic tbody').css('height').replace('px', '');
                    var minwdth = $(this).css('width').replace('px', '');
                    var minhght = $(this).css('height').replace('px', '');
                    maxHght = parseInt(maxHght) - 2;
                    minhght = parseInt(minhght)
                    var trother = $(this).parent();
                    var trHight = 0;
                    var nooftr = $('#tblDynamic tr').length - 1;
                    //                    if (rowIndex >= 2 && $('#tr_' + (rowIndex - 1)).length > 0) {
                    //                        trHight = nooftr * parseFloat($('#tr_' + (rowIndex - 1)).css('height').replace('px', ''));
                    //                    }
                    //                    else if ($('#tr_' + (rowIndex + 1)).length > 0) {
                    //                        trHight = nooftr * parseFloat($('#tr_' + (rowIndex + 1)).css('height').replace('px', ''));
                    //                    }
                    $('#tblDynamic tr').each(function () {
                        if ($(this).find('#div_barcode').length == 0) {
                            trHight += parseFloat($(this).css('height').replace('px', ''));
                        }
                    });

                    maxHght = maxHght - (trHight + 2);
                    //                    $(this).find('.ui-resizable-handle').remove();
                    $(this).resizable({
                        maxHeight: maxHght,
                        maxWidth: minwdth,
                        minHeight: 25,
                        minWidth: minwdth,
                        alsoResize: "#imgBrc"
                    });

                }

                colIndex += 1;
            });
            rowIndex += 1;

        });
        $('#tblDynamic tbody').removeOverflow();
        $('.nottdselect').droppable({
            accept: ":not(.ui-sortable-helper)",
            drop: function (event, ui) {
                var chkID = $(ui.draggable).attr('for');
                var chk = $('#' + chkID);
                if ($(chk).attr('checked') == "checked") {
                    $(this).html('');
                    var id = $(chk).attr('value');
                    $(this).append("<span id='spnText_" + id + "' style='display:block;float:left;width:99%;'> " + ui.draggable.text() + "</span>");
                    //                    $(this).append("<span id='spnVal" + chkID + "' style='display:none;'> " +  + "</span>");


                }
            }
        });

    }

    function GetMaxColumns() {
        var maxCells = 1;
        $('#tblDynamic tr').each(function () {
            if (maxCells < $(this).find("td").length) {
                maxCells = $(this).find("td").length;
            }
        });
        return maxCells;
    }

    $('#btnRemoveCol').click(function () {

        $('.tdselect').each(function () {
            var id = $(this).attr('id');
            var colNo = id.split('_')[2];
            var rowi = 1;
            $('#tblDynamic tbody tr').each(function () {
                var colj = 1;
                $(this).find('td').each(function () {
                    var colspan = $(this).attr('colspan');
                    if (colspan > 0) {
                        colspan -= 1;
                        $(this).attr('colspan', colspan);
                    }

                    if (colNo == colj) {
                        $(this).remove();
                        SetRowID();
                    }
                    colj += 1;
                });
                rowi += 1;
            });
        });
        SetRowID();

    });

    $('#btnAddCol').click(function () {
        var maxCol = GetMaxColumns() + 1;
        var rowi = 1;
        $('#tblDynamic tbody tr').each(function () {
            if ($(this).find('#div_barcode').length == 0) {
                var td = "<td class='nottdselect' rowspan='1' colspan='1' style='width:50px;float:left;border:solid 1px Gray' id='tdTemp'>&nbsp;</td>"
                $(this).append(td);
            }
            else

                rowi += 1;
        });
        SetRowID();
    });
    $('#btnAddRow').click(function () {
        $('#spnLabelHeight').css('position', '');

        var maxCol = GetMaxColumns();
        var tr = "<tr id='trTemp' class='dropble' style='width:100%;float:left;' ></tr>";
        $('#tblDynamic tbody').append(tr);
        for (var i = 0; i < maxCol; i++) {
            var td = "<td class='nottdselect' rowspan='1' colspan='1' style='width:50px;float:left;border:solid 1px Gray;' id='tdTemp" + i + "'>&nbsp;</td>"
            $('#trTemp').append(td);
        }
        $('#tblDynamic tbody').removeOverflow();
        SetRowID();
        $('#spnLabelHeight').css('position', 'relative');
    });

    $('#btnRemoveRow').click(function () {
        $('.tdselect').parent().remove();
        SetRowID();
    });


    $('#btnAddBarcode').click(function () {
        if ($('#div_barcode').length == 0) {
            var maxCells = GetMaxColumns();
            var tr = "<tr id='trBarcode' style='width:100%;float:left;' ><td colspan='" + maxCells + "'  rowspan='1' id='BarcodeTD' style='width:99%;border:solid 1px Gray;float:left;'></td></tr>";
            $('#tblDynamic tbody').append(tr);
            var html = "<div class='bstileone' id='div_barcode' style='text-align:left; width:99%; padding:0px;float:left;'> <img id='imgBrc' src='../../Content/images/SampleBarcodeImage.jpg' style='width:100%;float:left;height:25px;'  /> </div>";
            $('#BarcodeTD').append(html);
            //$('#div_barcode').css('background-image', 'url("../../Content/images/SampleBarcodeImage.PNG")');
            //            $("#div_barcode").resizable({
            //                containment: "#tblDynamic"
            //            });
            SetRowID();
        }
    });

    $('#btnRemoveBarcodeRow').click(function () {
        if ($('#div_barcode').length != 0) {
            $('#div_barcode').parent().parent().remove();
            SetRowID();
        }
    });


    $(document).on('dblclick', '.nottdselect', function () {
        if ($(this).hasClass('tdselect')) {
            $(this).removeClass('tdselect');
        }
        else {
            $(this).addClass('tdselect');
        }
    });


    $(document).on("change", '#divFieldList :checkbox', function () {
        if ($(this).attr('checked') == 'checked') {
        }
        else {
            var thisid = $(this).attr('id');
            var findText = $('label[for=' + thisid + ']').html();

            $('#tblDynamic tr').each(function () {
                $(this).find('td').each(function () {
                    var innerText = $(this).find('span').text();
                    if ($.trim(innerText) === $.trim(findText)) {
                        $(this).html('&nbsp;');
                    }
                });
            });

        }
    });
    $('#btnSplit').click(function () {
        if ($('#tblDynamic .tdselect').length > 0) {
            $('#tblDynamic .tdselect').each(function () {
                var colspn = $(this).attr('colspan');
                if (colspn != null && colspn !== undefined && !isNaN(parseInt(colspn)) && parseInt(colspn) > 1) {
                    $(this).attr('colspan', (parseInt(colspn) - 1));
                    var td = "<td class='nottdselect' colspan='1'  style='width:50px;float:left;border:solid 1px Gray' id='tdTemp'>&nbsp;</td>"
                    $(this).parent().append(td);
                    // var td = this.outerHTML;
                    // debugger;
                    // var id = $(this).attr('id');
                    // td.toString().replace(id, id + 'spl');


                    // $(this).parent().add(td);
                    // $('#' + id).attr('colspan', 1);
                    // $('#' + id).html('');
                    SetRowID();
                }
            });
        }
    });

    $('#btnMerge').click(function () {
        MegeHorizontalCells();
        //MegeVerticleCells();
        $('#tblDynamic .tdselect').each(function () {
            $(this).removeClass('tdselect');
        });
        return false;
        if ($('#tblDynamic .tdselect').length > 1) {
            var StartCellIndex = 0;
            var EndCellIndex = 0;
            var i = 1;
            var currRowNo = 0;
            $('#tblDynamic .tdselect').each(function () {
                var cellId = $(this).attr('id');
                var rowNo = cellId.split('_')[1];
                if (currRowNo <= 0) {
                    currRowNo = rowNo;
                }

                var cellNo = cellId.split('_')[2];
                if (currRowNo == rowNo && StartCellIndex <= 0) {
                    StartCellIndex = cellNo;
                }

                if ((parseInt(StartCellIndex) + 1) === parseInt(cellNo) && parseInt(currRowNo) === parseInt(rowNo)) {
                    var colspan = $('#td_' + rowNo + '_' + StartCellIndex).attr('colspan');
                    if (colspan == null || colspan == undefined) {
                        colspan = 2;
                    }
                    else
                        colspan = parseInt(colspan) + 1;

                    $('#td_' + rowNo + '_' + StartCellIndex).attr('colspan', colspan);
                    $('#td_' + rowNo + '_' + StartCellIndex).removeClass('tdselect');
                    $(this).remove();
                    SetRowID();
                }
                i += 1;
            });
        }
    });


    function MegeHorizontalCells() {
        if ($('#tblDynamic .tdselect').length > 1) {
            $('#tblDynamic tr').each(function () {
                if ($(this).find('td.tdselect').length > 1) {
                    $(this).find('td.tdselect').each(function () {
                        var CurrRowSpan = $(this).attr('rowspan');
                        var NextRowSpan = $(this).next().attr('rowspan');

                        if (isNaN(parseInt(CurrRowSpan)) || parseInt(CurrRowSpan) <= 0) {
                            CurrRowSpan = 1;
                        }

                        if (isNaN(parseInt(NextRowSpan)) || parseInt(NextRowSpan) <= 0) {
                            NextRowSpan = 1;
                        }

                        if (CurrRowSpan === NextRowSpan) {
                            var CurrCellId = $(this).attr('id');
                            var NextCellId = $(this).next().attr('id');

                            var CurrCellNo = CurrCellId.split('_')[2];
                            var NextCellNo = NextCellId.split('_')[2];
                            var CurrRowNo = CurrCellId.split('_')[1];

                            if ((parseInt(CurrCellNo) + 1) === parseInt(NextCellNo)) {
                                var CurrColSpan = $(this).attr('colspan');
                                if (isNaN(parseInt(CurrColSpan)) || parseInt(CurrColSpan) <= 0) {
                                    CurrColSpan = 1;
                                }
                                CurrColSpan = parseInt(CurrColSpan) + 1;

                                $(this).attr('colspan', CurrColSpan);
                                $(this).attr('rowspan', CurrRowSpan);
                                $(this).next().remove();
                                SetRowID();
                                MegeHorizontalCells();
                            }
                        }


                    });


                }
            });
        }
    }

    function MegeVerticleCells() {
        if ($('#tblDynamic .tdselect').length > 1) {
            $('#tblDynamic tr ').each(function () {
                if ($(this).find('td.tdselect').length > 0) {

                    $(this).find('td.tdselect').each(function () {

                        var CurrCellId = $(this).attr('id');
                        var CurrRowNo = parseInt(CurrCellId.split('_')[1]);
                        var CurrCellNo = parseInt(CurrCellId.split('_')[2]);
                        var nextRowTD = 'td_' + (CurrRowNo + 1) + "_" + CurrCellNo;
                       

                        if ($('#' + nextRowTD).hasClass('tdselect')) {
                            var CurrColSpan = $(this).attr('colspan');
                            var NextColSpan = $('#' + nextRowTD).attr('colspan');
                          
                            if (CurrColSpan === NextColSpan) {
                                var CurrRowSpan = $(this).attr('rowspan');
                                if (isNaN(parseInt(CurrRowSpan)) || parseInt(CurrRowSpan) <= 0) {
                                    CurrRowSpan = 1;
                                }
                                CurrRowSpan = parseInt(CurrRowSpan) + 1;
                                $('#' + nextRowTD).remove();
                                $(this).attr('colspan', CurrColSpan);
                                $(this).attr('rowspan', CurrRowSpan);
                                
                                SetRowID();
                                MegeVerticleCells();
                            }
                        }
                    });
                }
            });
        }
    }


    $('#btnReset').click(function () {
        $('#hdnHTML').val('');
        $('#hdnXML').val('');
        $('#tblDynamic tbody tr').each(function () {
            $(this).remove();
        });
    });


    function GetXML() {
        if ($('#tblDynamic tr').length <= 0) {
            return "";
        }
        else if ($('#tblDynamic').find("span").length <= 0 && $('#tblDynamic').find('#div_barcode').length <= 0) {
            return "";
        }
        var ridx = 1;
        var xmlDocument = "<mytable>\n"
        $('#tblDynamic tr').each(function () {
            // alert('Row:' + ridx);
            var cidx = 1;
            var xmlRow = "<row>\n";
            $(this).find('td').each(function () {
                //alert('Row:' + ridx + ' Col:' + cidx);
                var innerText = '';
                var fieldID = '';
                var colSpan = 1;
                if ($(this).attr('colspan') !== undefined) {
                    colSpan = $(this).attr('colspan');
                }

                var xmlCol = "\t<column ";
                xmlCol += "\t id=\"" + $(this).attr('id') + "\" ";
                xmlCol += "\t colspan=\"" + colSpan + "\" ";
                xmlCol += "\t width=\"" + $(this).css('width') + "\" ";
                xmlCol += "\t height=\"" + $(this).css('height') + "\" ";
                if ($(this).find('#div_barcode').length == 0) {
                    if ($(this).find("span").length > 0) {
                        var spn = $(this).find("span");
                        innerText = $(spn).text()
                        fieldID = $(spn).attr('id').split('_')[1];
                    }
                }
                else {
                    innerText = 'Barcode';
                }

                xmlCol += "\t FieldText=\"" + innerText + "\" ";
                xmlCol += "\t FieldID=\"" + fieldID + "\" ";
                xmlCol += " >" + innerText + " </column>";
                xmlRow += xmlCol;
                cidx += 1;
            });

            xmlRow += "\n</row>";
            xmlDocument += "\n" + xmlRow;
            ridx += 1;
        });
        xmlDocument += "\n</mytable>";
        //alert(xmlDocument);
        //console.log(xmlDocument);
        return xmlDocument;
    }

</script>
