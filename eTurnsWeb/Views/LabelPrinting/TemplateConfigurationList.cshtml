@{
    ViewBag.Title = eTurns.DTO.LabelPrinting.ResLabelPrinting.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayUDFButton = false, DisplaySettings = true, DisplayDeleteButton = true, DisplayColumnSetupButton = true, ColumnSetupFor = "TemplateConfigurationList", ShowCopyButton = true };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "LabelPrinting" };
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.LabelPrinting, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.LabelPrinting, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    Session["IsInsert"] = "";
    string LabelPrintingPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Label Design.pdf", DateTime.Now.Ticks);
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.LabelPrinting, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Label Design", (int)HelpDocType.Module);
    
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script type="text/javascript">
        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/LabelPrinting/DeleteLabelFieldModuleTemplateDetailRecords";
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var HistorySelected;
        var objColumns = {};
        $(document).ready(function () {
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];
            deleteURL = "/LabelPrinting/DeleteLabelFieldModuleTemplateDetailRecords";
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "100%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (aData.IsDeleted == true && aData.IsArchived == true)
                        nRow.className = "GridDeleatedArchivedRow";
                    else if (aData.IsDeleted == true)
                        $(nRow).css('background-color', '#FFCCCC');//nRow.className = "GridDeletedRow";
                    else if (aData.IsArchived == true)
                        nRow.className = "GridArchivedRow";

                    if (!isNaN(parseInt(aData.CompanyID)) && parseInt(aData.CompanyID) === parseInt('-1')) {
                        $(nRow).css('background-color', '#C8F6C8');
                        //$(nRow).find('#aEditLink').removeAttr('onclick');
                    }
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";

                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'TemplateConfigurationList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });

                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'TemplateConfigurationList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '') {
                                o = JSON.parse(json.jsonData);
                            }
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/LabelPrinting/LabelFieldModuleTemplateDetailListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    //if (oSettings.aaSorting.length != 0)
                    //    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    //else
                    //    aoData.push({ "name": "SortingField", "value": "0" });
                    if (oSettings.aaSorting.length != 0) {
                        //aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                        var sortValue = "";
                        for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];

                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        cache: false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            //if ($("#txtLPFilter").val() != '') {
                            //    $('#myDataTable').highlight($("#txtLPFilter").val());
                            //}

                            if ($("#txtLPFilter").val() != '') {

                                var SearchText = $("#txtLPFilter").val();
                                var count = (SearchText.match(/"/g) || []).length;

                                if (count == 2 && SearchText.indexOf('"') == 0) {
                                    SearchText = SearchText.replace('"', '').replace('"', '');
                                    $('#myDataTable').highlight(SearchText);
                                }
                                if (count == 0) {
                                    $('#myDataTable').highlight($("#txtLPFilter").val());
                                }
                            }                           

                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                },
                "aoColumns": [
                //                            {
                //                                "mDataProp": null,
                //                                "bSortable": false,
                //                                "sClass": "read_only control center",
                //                                "sDefaultContent": '<a id="aShowLabelDesign_1" class="previewlnk" onclick="javascript:return ShowPreview(this)" title="Label Preview" href="javascript:void(0);" style="display:inline"> <img style="margin-top: 5px; width: 10px;" src="/Content/images/search.png" alt="preview"></a>'
                //                            },
                           { mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' },
                           { "mDataProp": "ID", "sClass": "read_only" },
			                {
			                    "mDataProp": "Name",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false,
			                    "fnRender": function (obj, val) {
			                        return "<a id='aEditLink' onclick='return ShowEditTab(&quot;TemplateConfigurationEdit/" + obj.aData.ID + "&quot;,&quot;frmLabelConfiguration&quot;)' href='JavaScript:void(0);'>" + val + "</a>";
			                    }
			                },
                            { "mDataProp": "TemplateName", "sClass": "read_only" },
                            { "mDataProp": "ModuleName", "sClass": "read_only" },
                            { "mDataProp": "BarcodeKeyName", "sClass": "read_only" },
                            {
                                "mDataProp": "BarcodeFont", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    if (val === "128")
                                        return "Code 128";
                                    else if (val === "39")
                                        return "Code 3 of 9";
                                    else if (val === "93")
                                        return "Code 93";
                                    else
                                        return "";
                                }
                            },
                            { "mDataProp": "FontSize", "sClass": "read_only" },

                            { "mDataProp": "IncludeBin", "sClass": "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } },
                            { "mDataProp": "IsSelectedInModuleConfig", "sClass": "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } },
                            { "mDataProp": "IncludeQuantity", "sClass": "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } },
                            { "mDataProp": "QuantityField", "sClass": "read_only" },
			                { "mDataProp": "CreatedByName", "sClass": "read_only" },
			                { "mDataProp": "UpdatedByName", "sClass": "read_only" },
			                {
			                    "mDataProp": "CreatedOn", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return obj.aData.CreatedDate;
			                    }
			                },
			                {
			                    "mDataProp": "UpdatedOn", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return obj.aData.UpdatedDate;
			                    }
			                },
                //{ "mDataProp": "SelectedFieldsName", "sClass": "read_only" },
                //{ "mDataProp": "LabelHTML", "sClass": "read_only" }
                ]
            }).makeEditable();

            $('.DTTT_container').css('z-index', '-1');
        });


        //        //$(".previewlnk").click(function (e) {
        //        function ShowPreview(obj) {
        //            var tr = $(obj).parent().parent();
        //            var oData = oTable.fnGetData($(tr));
        //            alert(aData.ID);
        //            var ddlID = oData.ID;
        //            if (!isNaN(ddlID) && parseInt(ddlID) > 0) {
        //                $('#DivLoading').show();
        //                $('#divInnerPrev').html('');
        //                $.get('GetLabelHTMLByDetailID', { ID: ddlID }, function (result) {
        //                    $('#divInnerPrev').html(result.HTMLString);
        //                    $('#divInnerPrev').css('width', $('#divInnerPrev').find('#tblDynamic').css('width'));
        //                    $('#divInnerPrev').find('.ui-resizable-handle').remove();
        //                    $('#divInnerPrev').find('#spnLabelWidth').remove();
        //                    $('#divInnerPrev').find('#spnLabelHeight').remove();
        //                    $("#divPreview").dialog("option", "position", [e.clientX + 10, e.clientY - 5]);
        //                    $('#divPreview').dialog('open');
        //                });
        //            }
        //        }//);
    </script>
}
<div class="dialog" id="divCopyLabelInfo" style="display: none; width: 400px; height: 100px;">
    <div class="inner" style="width: 400px;; height: 100px;">
        @*<p class="text" id="CloseMessage" style="text-align: left; padding-left: 10px;">
            </p>*@
        <p class="text" id="DisplayControl" style="text-align: left; padding-left: 10px;">
            <span id="spanmsg" style="color: Red; font-size: small;"></span>
            <br />
            <br />
            <span>@eTurns.DTO.LabelPrinting.ResLabelPrinting.TemplateName:</span>&nbsp;&nbsp;
            <input type="text" id="txtCopyName" style="width: 150px;" value="" maxlength="200" /><br />
        </p>
        <p class="text btnA" style="text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="no" onclick="javascript:return CopyLabel()">
                <img src="~/Content/images/yes.png" alt="Copy" />@ResSchedulerReportList.Copy
            </a>
        </p>
    </div>
</div>
<script type="text/javascript">

    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
                    new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true),
                    new TabClass('CtabModuleConfig', '@eTurns.DTO.LabelPrinting.ResLabelPrinting.TabModuleConfigure', 'callbackModuleConfiguration();', true, true)];

    function callbacknew() {
        window.location.hash = '#new';
        ShowNewTab('LabelConfigurationCreate', 'frmLabelConfiguration');
    }

    function callbackhistory() {
        window.location.hash = '#list';
        fillLPNarrowSearchDiv();
        AllowDeletePopup = true;
    }

    function callbackModuleConfiguration() {
        window.location.hash = '#moduleconfig';
        $('#DivLoading').show();
        $('#CtabModuleConfiguration').html('');
        $('#tab1').find("#spnTabName").html(NewNameRes);
        $.get('ModuleWiseConfiguration', function (result) {
            $('#CtabModuleConfiguration').html(result);
            $('#DivLoading').hide();
        });
    }
    function closeErrorDialog() {
        $.modal.impl.close();
        return false;
    }
    function CopyLabel() {
        if (document.getElementById("txtCopyName").value != null && document.getElementById("txtCopyName").value != '') {
            var TempNewName = document.getElementById("txtCopyName").value;
            var TempOldName = '';
            var anSelected = fnGetSelected(oTable);
            if (anSelected.length > 0 && anSelected.length == 1) {
                TempOldName = $(anSelected).find('#aEditLink')[0].innerText;
            }
            $('#DivLoading').show();
            $.ajax({
                url: 'LabelCopyTemplateConfiguration',
                data: { 'NewTemplateName': TempNewName, 'OldTemplateName': TempOldName },
                type: 'POST',
                dataType: 'json',
                success: function (response) {
                    if (response.Status == "ok") {
                        closeErrorDialog();
                        $("#spanGlobalMessage").html("@eTurns.DTO.LabelPrinting.ResLabelPrinting.CopySuccessfully");
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        $('#myDataTable').dataTable().fnDraw();
                    }
                    else {
                        var ErrorMassage = response.Message;
                        document.getElementById("spanmsg").innerHTML = ErrorMassage;
                        $('#OrdReceivedErrorDialog').modal();
                    }
                    $('#DivLoading').hide();
                },
                error: function (xhr) {
                    $("#spanGlobalMessage").html("@ResCommon.ErrorInProcess");
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    $('#DivLoading').hide();
                }
            });


        }
        else {
            var ErrorMassage = "@eTurns.DTO.LabelPrinting.ResLabelPrinting.TemplateNameCantBeBlank";
            document.getElementById("spanmsg").innerHTML = ErrorMassage;
            //$('#OrdReceivedErrorDialog').find("#OrdReceivErrorMSG").html(ErrorMassage);
            $('#DivLoading').hide();
            $('#OrdReceivedErrorDialog').modal();
            return false;
        }
    }
</script>
<div class="userListingWrapper">
    <h2>
        @eTurns.DTO.LabelPrinting.ResLabelPrinting.PageHeader
    </h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'></ul>
        <div id="CtabNew" class="tabContener" style="float: left;">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="txtLPFilter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="imgClearLPFilter" />
                        </a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.LabelPrinting)
            <div id="divNarrowSearch" style="float: left; padding: 0 5px 0 0; width: 18%;">
                <div style="float: left; display: block; margin: 5px 5px 5px 5px; width: 100%;">
                    @if (isInsert && false)
                    {
                        <input type="button" id="btnCopyAllBaseTemplate" style="float:left;" class="CreateBtn" value="@eTurns.DTO.LabelPrinting.ResLabelPrinting.btnCopyALLBaseTemplate" />
                    }
                    else
                    {
                        <span style="width: 100%; height: 27px; float: left;">&nbsp;</span>
                    }
                </div>
                <div id="divNarrowSearchData" style="float: left; padding: 0 0 0 0; width: 99%;">
                    &nbsp;
                </div>
            </div>
            <div class="userContent ">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.UserDefineTemplateName
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.CaptionTemplateDropdown
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.GridHeaderModuleName
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.BarcodeKey
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.CaptionBarcodeFont
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.FontSize
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.IncludeBin
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.GridHeaderSelectedInModuleConfig
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.GridHeaderIncludeQuantity
                            </th>
                            <th>
                                @eTurns.DTO.LabelPrinting.ResLabelPrinting.GridHeaderQuantityField
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div style="display: block;">
                    <div id="divQTYLegends" style="display: none; clear: both; width: 90%; margin-top: 10px;
                        display: block; float: left">
                        <div>
                            <span class="SpanCriticalLegend" style="background-color: #C8F6C8; float: left; width: 40px;
                                margin-right: 10px;">&nbsp;</span> @eTurns.DTO.LabelPrinting.ResLabelPrinting.LegendGridBottom
                            </div>
                        </div>
                    </div>
                </div>
                @*Note: check user have copy permision or not*@
            </div>
            <div id='CtabModuleConfiguration' class="tabContener">
            </div>
            @*  <div id='CtabCL' class="tabContener">
                </div>*@
        </div>
    </div>
    <div id="divBaseTemplateList">
    </div>
    <div class="dialog" id="OrdReceivedErrorDialog" style="display: none; width: 470px;">
        <div class="inner" style="width: 470px;">
            <p class="text" id="OrdReceivErrorMSG" style="text-align: left; padding-left: 10px;">
            </p>
            <p class="text btnA" style="text-align: center; padding-left: 10px;">
                <a href="javascript:void(0)" class="no" onclick="javascript:return closeErrorDialog()">
                    <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
                </a>
            </p>
        </div>
    </div>
    <script type="text/javascript">
        var _IsArchived = false;
        var _IsDeleted = false;
        var isTabClick = false;

        $('#deleteRows').click(function () {
            deleteURL = "/LabelPrinting/DeleteLabelFieldModuleTemplateDetailRecords";
            var anSelected = fnGetSelected(oTable);
            var stringIDs = new Array();
            if (parseInt('@eTurnsWeb.Helper.SessionHelper.UserType') <= parseInt('2')) {
                for (var i = 0; i < anSelected.length; i++) {
                    var aPos = oTable.fnGetPosition($(anSelected[i])[0]);
                    var aData = oTable.fnGetData(aPos);
                    //stringIDs = stringIDs + anSelected[i].id + ",";
                    stringIDs.push(anSelected[i].id);
                }

            }
            else {
                for (var i = 0; i < anSelected.length; i++) {
                    var aPos = oTable.fnGetPosition($(anSelected[i])[0]);
                    var aData = oTable.fnGetData(aPos);
                    if (parseInt(aData.CompanyID) > 0) {
                        //stringIDs = stringIDs + anSelected[i].id + ",";
                        stringIDs.push(anSelected[i].id);
                    }
                    else {
                        $(anSelected[i]).removeClass('row_selected');
                    }
                }
            }

            if (stringIDs.length > 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
        });


        $('#btnCopyAllBaseTemplate').on('click', function () {
            $('#DivLoading').show();
            $.ajax({
                url: 'CopyAllBaseTemplate',
                data: {},
                type: 'POST',
                dataType: 'json',
                success: function (response) {
                    if (response.Status) {
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        if (!isNaN(parseInt(response.RowsCopied)) && parseInt(response.RowsCopied) > 0) {
                            $('#myDataTable').dataTable().fnDraw();
                        }
                        showNotificationDialog();
                    }
                    else {
                        $("#spanGlobalMessage").html("@ResCommon.ErrorInProcess");
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                        showNotificationDialog();
                    }
                    $('#DivLoading').hide();
                },
                error: function (xhr) {
                    $("#spanGlobalMessage").html("@ResCommon.ErrorInProcess");
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    showNotificationDialog();
                    $('#DivLoading').hide();
                }
            });
        });

        $(document).ready(function () {
            if (typeof ($('#IsArchivedRecords')) != undefined)
                _IsArchived = $('#IsArchivedRecords').is(':checked');

            if (typeof ($('#IsDeletedRecords')) != undefined)
                _IsDeleted = $('#IsDeletedRecords').is(':checked');

            var anSelected = fnGetSelected(oTable);
            if (anSelected != null && anSelected.length == 0) {
                $('#actionCopyItems').attr("style", "display:none");
            }

            fillLPNarrowSearchDiv();
            $('.userHead').css('float', 'right');
            $('.userHead').css('margin', '0.7% 1% 0.5%');
            $('.userHead').css('width', '78.5%');

            $('.print').hide();
            
            if (window.location.hash.toLowerCase() == "#list") {
                $("#tab5").click();
            }
            else if (window.location.hash.toLowerCase() == "#moduleconfig") {
                $("#CtabModuleConfig").click();
            }
            else if (window.location.hash.toLowerCase() == "#new")
            {
                $("#tab1").click();
            }
            $(window).on('hashchange', function () {
                if (isTabClick == false) {
                    SetTabView();
                }
                else {
                    isTabClick = false;
                }
            });

        });

        function SetTabView() {
            var tabname = window.location.hash.toLowerCase();
            switch (tabname) {
                case "#list":
                    $("#tab5").click();
                    break
                case "#moduleconfig":
                    $("#CtabModuleConfig").click();
                    break
                case "#new":
                    $("#tab1").click();
                    break
            }
        }
        $('#IsDeletedRecords').live('click', function () {
            deleteURL = "/LabelPrinting/DeleteLabelFieldModuleTemplateDetailRecords";
            if ($('#IsDeletedRecords').is(':checked') == false) {
                $('#deleteRows').attr("style", "display:");
                $('#undeleteRows').attr("style", "display:none");
                var anSelected = fnGetSelected(oTable);
                if (anSelected != null && anSelected.length == 0) {
                    $('#actionCopyItems').attr("style", "display:none");
                }
            }
            else {
                $('#actionCopyItems').attr("style", "display:none");
                $('#deleteRows').attr("style", "display:none");
                $('#undeleteRows').attr("style", "display:");
            }

            fillLPNarrowSearchDiv();
            $('#myDataTable').dataTable().fnDraw();
        });
        $('#IsArchivedRecords').live('click', function () {
            fillLPNarrowSearchDiv();
            $('#myDataTable').dataTable().fnDraw();
        });

        function fnFilterLPList(searchtext) {
            bIsFilter = true;
            var appendedText = '';
            if (appendedText.length > 0) {
                searchtext = searchtext + "[^]" + appendedText;
            }
            //alert(searchtext);
            $('#myDataTable').dataTable().fnFilter(searchtext, null, null, null);

            $('#myDataTable' + ' td').removeHighlight();
            $('#tab11').hide();
            if (searchtext.length > 0)
                $('#myDataTable' + ' td').highlight(searchtext);
        }


        var timeoutsc1;
        $('#txtLPFilter').bind('textchange', function () {
            clearTimeout(timeoutsc1);
            var self = this;
            timeoutsc1 = setTimeout(function () {
                //alert("asd");
                //fnFilterLPList($("#txtLPFilter").val().replace(/'/g, "''"));
                DoLPNarrowSearch();
            }, 200);
        });
        $("#txtLPFilter").keydown(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            //alert(fnFilterLPList($("#txtLPFilter").val());
            if (code == 13) {
                DoLPNarrowSearch();
                //fnFilterLPList($("#txtLPFilter").val().replace(/'/g, "''"));
                if ($('#myDataTable').dataTable().fnGetData().length === 1) {
                    $('#myDataTable tr').find('#aEditLink').click();
                }
                return false;
            }
        });

        $("#imgClearLPFilter").click(function () {
            $("#txtLPFilter").val('');
            $("#txtLPFilter").focus();
            $("#txtLPFilter").change();
            return false;
        });

        function fillLPNarrowSearchDiv() {
            $('#divNarrowSearchData').html('&nbsp');
            $.get('@Url.Action("GetLPNarrwSearchHTML")', function (data) {
                $('#divNarrowSearchData').html(data);
                $('#CopyButton').css('display', 'block');
            });
        }


        $(document).on('dblclick', '.nottdselect', function () {
            if ($(this).hasClass('tdselect')) {
                $(this).removeClass('tdselect');
            }
            else if ($(this).find('img').length <= 0 || $(this).find('div').length <= 0) {
                $(this).addClass('tdselect');
            }
            showHideCustomizeFont();
        });
        $(document).on("change", '#divFieldList :checkbox', function () {
            if ($(this).attr('checked') == 'checked') {
            }
            else {
                var thisid = $(this).attr('id');
                var chkValue = $(this).attr('value');
                var findText = $('label[for=' + thisid + ']').html();
                $('#tblDynamic tr').each(function () {
                    $(this).find('td').each(function () {
                        if (($.trim(findText) === "Item Image" || $.trim(findText) === "ItemImage") && $(this).find('#div_ItemImg_' + chkValue).length > 0) {
                            $(this).find('#div_ItemImg_' + chkValue).remove();
                            $(this).html('&nbsp;');
                        }
                        else if (($.trim(findText) === "Enterprise Logo" || $.trim(findText) === "EnterpriseLogo") && $(this).find('#div_EntLogo_' + chkValue).length > 0) {
                            $(this).find('#div_EntLogo_' + chkValue).remove();
                            $(this).html('&nbsp;');
                        }
                        else if (($.trim(findText) === "Company Logo" || $.trim(findText) === "CompanyLogo") && $(this).find('#div_CompLogo_' + chkValue).length > 0) {
                            $(this).find('#div_CompLogo_' + chkValue).remove();
                            $(this).html('&nbsp;');
                        }
                        else if (($.trim(findText) === "Supplier Logo" || $.trim(findText) === "SupplierLogo") && $(this).find('#div_SupplierLogo_' + chkValue).length > 0) {
                            $(this).find('#div_SupplierLogo_' + chkValue).remove();
                            $(this).html('&nbsp;');
                        }
                        //                    else {
                        //                        var innerText = $(this).find('span').text();
                        //                        if ($.trim(innerText) === $.trim(findText)) {
                        //                            $(this).html('&nbsp;');
                        //                        }
                        //                    }
                    });
                });

            }
        });

        function GetListofUnfitItems() {

            var obj = {};
            obj.TemplateID = $('#ddlLabelTemplateList').val();
            obj.ModuleID = $('#ddlLabelModuleList').val();
            obj.BarcodeFont = $('#ddlBarcodeFont').val();
            obj.BarcodePattern = $('#ddlBarcodePattern').val();
            obj.BarcodeKey = $('#ddlBarcodeKey').val();
            obj.IncludeBin = false;
            obj.IncludeQuantity = false;
            if (isNaN(parseInt(obj.TemplateID)) || parseInt(obj.TemplateID) <= 0)
                return false;

            if (isNaN(parseInt(obj.ModuleID)) || parseInt(obj.ModuleID) <= 0)
                return false;

            if (isNaN(parseInt(obj.BarcodeKey)) || parseInt(obj.BarcodeKey) <= 0)
                return false;

            if ($('#chkIncludeBin').length > 0 && $("#chkIncludeBin").is(':checked')) {
                obj.IncludeBin = true;
            }

            if ($('#chkIncludeQty').length > 0 && $("#chkIncludeQty").is(':checked')) {
                obj.IncludeQuantity = true;
                obj.QuantityField = $('#ddlQuantityField').val();
            }

            $.ajax({
                url: 'GetListUnfitBarcodeItems',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({ 'objLabelDetail': obj }),
                success: function (response) {
                    if (response.Status) {
                        if (response.Items != null && response.Items.length > 0) {
                            $(response.Items).each(function (i) {
                                var item = response.Items[i];
                                $('#lstunfitItems').append('<option value="' + item + '">' + item + '</option>');
                            });
                        }
                        else {
                            alert("All barcodes are fit into this label.");
                        }
                    }
                    else {
                        $('#DivLoading').hide();
                        alert(response.Message);
                    }
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    alert('@ResCommon.ErrorInProcess');
                }
            });



            return false;
        }

        function ShowHideCopyButton() {
            if ($('#IsDeletedRecords').is(':checked') == false) {
                var anSelected = fnGetSelected(oTable);
                if (anSelected.length > 0 && anSelected.length == 1) {
                    $('#actionCopyItems').attr("style", "display:visible");
                }
                else {
                    $('#actionCopyItems').attr("style", "display:none");
                }
            }
            else {
                $('#actionCopyItems').attr("style", "display:none");
            }
        }
        $("#actionCopyItems").on("click", function (e) {
            var anSelected = fnGetSelected(oTable);
            if (anSelected.length > 0 && anSelected.length == 1) {
                var TemplateName = $(anSelected).find('#aEditLink')[0].innerText;
                TemplateName = TemplateName + " -Copy ";
                document.getElementById("txtCopyName").value = TemplateName;
                //alert(document.getElementById("txtCopyName").value);

                $('#divCopyLabelInfo').modal();

            }

        });
        _Common.setGloblaSearch('txtLPFilter', 'myDataTable');
    </script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
