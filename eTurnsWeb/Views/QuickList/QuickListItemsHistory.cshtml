@model eTurns.DTO.QuickListMasterDTO
@{
    GridHeaderSettings settings = null;
    settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayDeleteButton = false, DisplaySaveButton = false, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = false, DisplayColumnSetupButton = false, ColumnSetupFor = "QuickListDetailHistory", DataTableName = "DTQLItemHistory", DisplayContextMenu = false, DisplayPrintBlock = false };
}
<div class="userListingWrapper">
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99.5%">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search</span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="QLItem_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_QLItem_filter" /></a>
                    </div>
                </div>
                <input type="button" id="btnDiv" value="Div" style="visibility: hidden" />
            </div>
            @Html.QuickListItemsGridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission)
            <div class="userContent" style="width: 99% !important; margin-left: 5px !important;
                float: left;">
                <table id="DTQLItemHistory" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.HistoryID
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.HistoryAction
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ItemNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Description
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.Quantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.OnHandQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.OnTransferQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.LongDescription
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.Supplier
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.Category
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.QuickListHistoryID
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var objColumns1 = {};
    objColumns1 = {
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.HistoryID)': 0,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.HistoryAction)': 1,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ID)': 2,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.ItemNumber)': 3,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.Description)': 4,
        '@MvcHtmlString.Create(@eTurns.DTO.ResQuickList.Quantity)': 5,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.OnHandQuantity)': 6,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.OnTransferQuantity)': 7,
        '@MvcHtmlString.Create(eTurns.DTO.ResItemMaster.LongDescription)': 8,
        '@MvcHtmlString.Create(eTurns.DTO.ResQuickList.Supplier)': 9,
        '@MvcHtmlString.Create(eTurns.DTO.ResQuickList.Category)': 10,
        '@MvcHtmlString.Create("Quick List History ID")': 11
    };

</script>
<script type="text/javascript">
    var oTableQLItemHistory
    var IsRefreshGrid1 = false;
    var AllowDeletePopup = false;
    var historyLIDTName = 'DTQLItemHistory';
    var ColumnObject = new Array();
    var bIsQLIHFilter = false;
    $(document).ready(function () {

        ColumnObject.push({ mDataProp: "HistoryID", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "Action", sClass: "read_only" });

        ColumnObject.push({ mDataProp: "ID", sClass: "read_only" });
        ColumnObject.push({
            mDataProp: "ItemDetail.ItemNumber",
            sClass: "read_only",
            sDefaultContent: '',
            bSortable: true,
            bSearchable: false,
            "fnRender": function (obj, val) {
                return "<span id='spnItemNummber'>" + val + "</span>" + "<span id='spnID'  style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnQuickListItemID'  style='display:none'>" + obj.aData.ItemID + "</span>" + "<span id='spnQuickListItemGUID'  style='display:none'>" + obj.aData.ItemGUID + "</span>";
            }
        });
        ColumnObject.push({ mDataProp: "ItemDetail.Description", sClass: "read_only", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                return "<div class='comment more'>" + val + "</div>";
            } 
        });
        ColumnObject.push({ mDataProp: "Quantity", "sClass": "read_only" });
        ColumnObject.push({ mDataProp: "ItemDetail.OnHandQuantity", bSortable: true, sClass: "read_only" });
        ColumnObject.push({ mDataProp: "ItemDetail.OnTransferQuantity", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "ItemDetail.LongDescription", sClass: "read_only", "sDefaultContent": '',
            "fnRender": function (obj, val) {
                return "<div class='comment more'>" + val + "</div>";
            } 
        });
        ColumnObject.push({ mDataProp: "ItemDetail.SupplierName", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "ItemDetail.CategoryName", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "QuickListHistoryID", sClass: "read_only" });


        var gaiSelected = [];
        oTableQLItemHistory = $('#DTQLItemHistory').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "99.5%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[0, "desc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                if (!bIsQLIHFilter) {
                    $.ajax({
                        "url": '@Url.Content("/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'QuickListDetailHistory' },
                        "async": false,
                        "cache": false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = json;

                        }
                    });
                }
                bIsQLIHFilter = false;
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'QuickListDetailHistory' },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);

                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content("~/QuickList/GetQuickListItems")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {

                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                //aoData.push({ "name": "QuickListID", "value": '0' });
                aoData.push({ "name": "QuickListHistoryID", "value": '@Model.ID' });
                aoData.push({ "name": "QuickListHistoryGUID", "value": '@Model.GUID' });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    cache: false,
                    "async": false,
                    "url": sSource,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#DTQLItemHistory td').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });

                    },
                    complete: function (response) {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        if ($("#QLItem_filter").val() != '') {
                            $('#DTQLItemHistory td').highlight($("#QLItem_filter").val());
                        }
                        CallShowHideData();
                        $('#DivLoading').hide();
                        
                    }
                });
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");

            },
            "aoColumns": ColumnObject
        }).makeEditable();

        $('.DTTT_container').css('z-index', '-1');
        $('#divContextMenu1').hide();

    });

    $('#DTQLItemHistory tbody tr').live('tap click', function () {
        $(this).toggleClass('row_selected');
        return false;
    });

    $('#PageNumber1').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#Gobtn1").click();
            return false;
        }
    });

    $("#Gobtn1").click(function () {
        var pval = $('#PageNumber1').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (parseInt(pval, 10) <= 0)
            return;

        oTableQLItemHistory.fnPageChange(Number(pval - 1));
        $('#PageNumber1').val('');
    });

    $("#reordersetting1").click(function () {
        $("#divRefreshBlock1").toggle();
    });

    /* Get the rows which are currently selected */
    function fnGetSelected1(oTableLocal) {
        return oTableLocal.$('#DTQLItemHistory tr.row_selected');
    }

    /* global search function */
    function fnFilterQuickListItemsHistory() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#QLItem_filter") != 'undefined' && ($("#QLItem_filter").val().length > 2 || $("#QLItem_filter").val().length == 0)) {
        //if (typeof $("#QLItem_filter") != 'undefined') {
            bIsQLIHFilter = true;
            var searchtext = $("#QLItem_filter").val().replace(/'/g, "''");

            $('#' + historyLIDTName + ' td').removeHighlight();

            $('#' + historyLIDTName).dataTable().fnFilter(
                searchtext,
                null,
                null,
                null
            );

            if (searchtext.length > 0)
                $('#' + historyLIDTName + ' td').highlight($("#QLItem_filter").val());
        }
    }

    $("#QLItem_filter").keyup(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
        }
        else {
            fnFilterQuickListItemsHistory();
        }
    });

    //Keydown event is required to handle ENTER KEY to work in IE
    $("#QLItem_filter").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            fnFilterQuickListItemsHistory();
        }
    });

    //Clear Filter
    $("#clear_QLItem_filter").click(function () {
        $("#QLItem_filter").val('');
        fnFilterQuickListItemsHistory();
        $("#QLItem_filter").focus();
        return false;
    });

    var timeoutscheduler;
    $(document).on('propertychange input', "#QLItem_filter", function () {
        clearTimeout(timeoutscheduler);
        timeoutscheduler = setTimeout(function () {
            if (SearchPattern == 2 || SearchPattern == "2") {
                fnFilterQuickListItemsHistory();
            }
            else {
                $('#QLItem_filter').unbind("keypress");
                $('#QLItem_filter').keypress(function (event) {
                    var keycode = (event.keyCode ? event.keyCode : event.which);
                    if (keycode == 13) {
                        fnFilterQuickListItemsHistory();
                    }
                });
                if ($("#QLItem_filter").val().length == 0) {
                    setTimeout(function () { fnFilterQuickListItemsHistory(); }, 200);
                }
            }
        }, 500);
    });

    function callPrint1(DataTableName) {
        var oConfig = {
            "sInfo": "<h6>Print view</h6><p>Please use your browser's print function to " + "print this table. Press escape when finished.",
            "sMessage": null,
            "bShowAll": false,
            "sToolTip": "View print view",
            "sButtonClass": "DTTT_button_print",
            "sButtonText": "Print"
        };
        if (typeof (TableTools) != undefined && typeof (TableTools) != 'undefined')
            TableTools.fnGetInstance(DataTableName).fnPrint(true, oConfig);
    }



    $("#ColumnSortableModal1").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        title: '@eTurns.DTO.Resources.ResCommon.ReorderColumnPopupHeader',
        draggable: false,
        resizable: false,
        open: function () {
            GenerateColumnSortable1();
            $("#ColumnSortable1").sortable({ axis: "y", containment: "parent" });
        }
    });

    $("#ColumnOrderSetup1").click(function () {
        $("#ColumnSortableModal1").dialog("open");
        return false;
    });

    $("#ColumnOrderSetup_Context1").click(function () {
        $("#ColumnSortableModal1").dialog("open");
        return false;
    });

    var GetColumnIndex1 = function (ColumnName) {
        return objColumns1[ColumnName];
    };

    function UpdateColumnOrder1(_ListName) {

        $('#divContextMenu1').hide();
        if ($("#divRefreshBlock1").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlock1").toggle();

        var _Order = $('#ColumnSortable1').sortable("toArray");

        var __Order = _Order.toString().split(",");
        for (var i = 0; i < __Order.length; i++) {
            __Order[i] = parseInt(__Order[i], 10);
        }

        if (oTableQLItemHistory.fnSettings().oLoadedState === null) {
            $('.ui-dialog-titlebar-close').click();
            return;
        }

        oTableQLItemHistory.fnSettings().oLoadedState.ColReorder = __Order;

        var _abVisCols = [];
        for (i = 0, iLen = oTableQLItemHistory.fnSettings().aoColumns.length; i < iLen; i++) {
            var checked = $("#" + i + "_").is(":checked");
            _abVisCols.push(checked);
        }

        oTableQLItemHistory.fnSettings().oLoadedState.abVisCols = _abVisCols;

        $.ajax({
            "url": '@Url.Content("~/Master/SaveGridState")',
            data: { Data: JSON.stringify(oTableQLItemHistory.fnSettings().oLoadedState), ListName: 'QuickListDetailHistory' },
            "dataType": "json",
            cache: false,
            "async": false,
            "success": function (json) {
                o = json;
                $('#divQuickListItemsHistory').html('');
                var url = '@Url.Action("LoadQLLineItemsHistory")' + '?historyID=' + '@Model.ID ';
                $.get(url, function (data) { $('#divQuickListItemsHistory').html(data); });
            }
        });
    }



    function GenerateColumnSortable1() {

        $('#ColumnSortable1 li').each(function (index) {
            $(this).remove();
        });

        for (i = 0, iLen = oTableQLItemHistory.fnSettings().aoColumns.length; i < iLen; i++) {
            var oColumn = oTableQLItemHistory.fnSettings().aoColumns[i];
            var li = document.createElement('li');

            li.id = GetColumnIndex1(oColumn.sTitle.trim());

            li.className = 'ui-state-default';
            li.innerHTML = oColumn.sTitle.trim();
            if (oColumn.bVisible) {
                if (li.id == 1) {
                    li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                } else {
                    li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
            }
            else
                li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex1(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
            $('#ColumnSortable1').append(li);
        }
    }


    // used for refresh the grid manually...
    $('#refreshGrid1').live('click', function () {
        $('#divContextMenu1').hide();
        if ($("#divRefreshBlock1").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlock1").toggle();
        oTableQLItemHistory.fnDraw();
    });

    $("#DTQLItemHistory_length").attr("style", "margin-left:2px;");

</script>
