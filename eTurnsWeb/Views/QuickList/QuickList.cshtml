@model IEnumerable<eTurns.DTO.QuickListMasterDTO>
@{
    ViewBag.Title = eTurns.DTO.ResQuickList.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DisplaySaveButton = false, DisplayUDFButton = false, UDFSetupFor = "QuickList&UDFHeader=" + @eTurns.DTO.ResQuickList.PageHeader, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "QuickList" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "QuickListMaster" };
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    Session["IsInsert"] = "";
    string QuicklistPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Quicklist.pdf", DateTime.Now.Ticks);
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    string QuickListBasicVideo = "";
    //HelpDocumentMasterDTO objHelpDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentMaster("Quicklist");
    //if (objHelpDTO != null)
    //{
    //    QuickListBasicVideo = objHelpDTO.ModuleVideoPath.Replace("../Uploads/HelpVideo/", "");
    //}
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Quicklist", (int)HelpDocType.Module);
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script type="text/javascript">
        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/QuickList/DeleteQuickListMasterRecords";
        var IsDeletePopupOpen = false;
        var SelectedHistoryRecordID = '';
        var AllowDeletePopup = true;
        var objColumns = {};
        var IsReloadQuickList = false;

        $(document).ready(function () {
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "200%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[1, "desc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": MsgShowRecordsGridBtn,
                    "sEmptyTable": MsgNoDataAvailableInTable,
                    "sInfo": MsgShowingNoOfEntries,
                    "sInfoEmpty": MsgShowingZeroEntries,
                    "sZeroRecords": MsgNoDataAvailableInTable,
                    "sInfoFiltered": ""
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

                    if ($(aData.IsDeleted).text() == 'Yes' && $(aData.IsArchived).text() == 'Yes')
                     $(nRow).css('background-color','#B9BCBF');
                        //nRow.className = "GridDeleatedArchivedRow";
                    else if ($(aData.IsDeleted).text() == 'Yes')
                    $(nRow).css('background-color','#FFCCCC');
                       // nRow.className = "GridDeletedRow";
                    else if ($(aData.IsArchived).text() == 'Yes')
                     $(nRow).css('background-color','#CCFFCC');
                        //nRow.className = "GridArchivedRow";
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'QuickList' },
                         "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = json;
                        }
                    });
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'QuickList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });

                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/QuickList/GetQuickList")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }

                    if (oSettings.aaSorting.length != 0) {
                          var sortValue = "";
                          for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                              if (sortValue.length > 0)
                                  sortValue += ", "
                              sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];
                           
                          }
                        //alert(sortValue);
                        aoData.push({ "name": "SortingField", "value": sortValue });
                        //aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });


                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        cache: false,
                        "url": sSource,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                            //TODO: Barcode Changes
                            // if(oTable.fnGetData().length <= 0 && $("#global_filter").val().length>0){
                            //     $('#cnfBarcodeAddmdl').modal();
                            // }
                            if ($("#global_filter").val().length > 0) {
                                if ($('#myDataTable').dataTable().fnGetData().length <= 0) {
                                //    $('#cnfBarcodeAddmdl').modal();
                                }
                                //                                else if ($('#myDataTable').dataTable().fnGetData().length === 1) {
                                //                                    $('#myDataTable tr').find('#aEditLink').click();
                                //                                    $('#global_filter').val('');
                                //                                    $('#myDataTable').dataTable().fnFilter('', null, null, null);

                                //                                }
                            }
                            
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                },
                "aoColumns": [
                            { "mDataProp": null, "sClass": "read_only center NotHide RowNo","sWidth":'100px', "bSortable": false, "sDefaultContent": ''},
			                { "mDataProp": "ID", "sClass": "read_only" },
			                { "mDataProp": "Name", "sClass": "read_only", "sDefaultContent": '', "fnRender": function (obj, val) {
			                    return "<a id='aEditLink' onclick='BlankSession(); return ShowEditTabGUID(&quot;QuickListEdit?QuickListGUID=" + obj.aData.GUID.toString() + "&quot;,&quot;frmQuickList&quot;)' href='JavaScript:void(0);'>" + obj.aData.Name + "</a>" + "<span id='QuickListId' style='display:none'>" + obj.aData.ID + "</span>" + " <input type='hidden' id='QuickListGUID' value='" + obj.aData.GUID.toString() + "' />";
			                    //return "<a onclick='return BlankSession("+obj.aData.ID+");' href='JavaScript:void(0);'>" + obj.aData.Name + "</a>" + "<span id='QuickListId' style='display:none'>" + obj.aData.ID + "</span> ";
			                }
			                },
                            { "mDataProp": "Comment", "sClass": "read_only" },
                            { "mDataProp": "Type", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.Type == '@Convert.ToString((int)eTurns.DTO.QuickListType.General)')
                                        return '@eTurns.DTO.QuickListType.General.ToString()';
                                    else if (obj.aData.Type == '@Convert.ToString((int)eTurns.DTO.QuickListType.Asset)')
                                        return '@eTurns.DTO.QuickListType.Asset.ToString()';
                                    else if (obj.aData.Type == '@Convert.ToString((int)eTurns.DTO.QuickListType.Count)')
                                        return '@eTurns.DTO.QuickListType.Count.ToString()';
                                    else
                                        return "";
                                }
                            },
                            { "mDataProp": "NoOfItems", "sClass": "read_only numericalign" },

			                { "mDataProp": "RoomName", "sClass": "read_only" },
                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "EditedFrom", "sClass": "read_only" },
                            { "mDataProp": "ReceivedOn", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.ReceivedOnDate; } },
			                { "mDataProp": "ReceivedOnWeb", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.ReceivedOnWebDate; } },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "Created", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.CreatedDate; } },
			                { "mDataProp": "LastUpdated", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.UpdatedDate; } },
                            { "mDataProp": "IsArchived", "sClass": "read_only", "fnRender": function (obj, val) { return '<span id="spnIsArchived">' + GetBoolInFormat(obj, val) + '</span>'; } },
                            { "mDataProp": "IsDeleted", "sClass": "read_only", "fnRender": function (obj, val) { return '<span id="spnIsDeleted">' + GetBoolInFormat(obj, val) + '</span>'; } }
                            @Html.RenderColumnsArray("QuickListMaster")
		    ]
            }).makeEditable({
                sUpdateURL: '@Url.Content("~/QuickList/UpdateQuickMasterData")'
            });


            //This is Most important
            jQuery("#btnDiv").click(function (e) {
                var offset = $(this).offset();
                var leftpx = (parseInt(e.clientX) + parseInt($(this).css("width").toString().replace("px", "")) + parseInt(15)) + 'px';
                var toppx = (parseInt(e.clientY) + parseInt(5)) + 'px';
                jQuery('#myDataTable_wrapper div.ColVis .ColVis_Button').click();
                jQuery('.ColVis_collection').css("left", leftpx);
                jQuery('.ColVis_collection').css("top", toppx);
                e.preventDefault();

            });

            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');

            $('#myDataTable').on('tap click', 'a[id^="aEditLink"]', function () {
                var tr = $(this).parent().parent();
                $("#myDataTable").find("tbody tr").removeClass("row_selected");
                $(tr).addClass('row_selected');

            });

        });

     

        /* HISTORY related data deleated and archived START */
        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }
        function HistoryTabClick() {
            GetHistoryData();
        }
        function GetHistoryData() {

            HistorySelected = fnGetSelected(oTable);
            if (HistorySelected !== undefined && HistorySelected.length === 1) {
                var QLGUID = $(HistorySelected).find('#QuickListGUID')[0].value;
                //if (SelectedHistoryRecordID != QLGUID) {
                SelectedHistoryRecordID = QLGUID;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabCL").show();
                $('#CtabCL').load('/Master/QuickListHistory', function () { $('#DivLoading').hide(); });
                //}
            }
            else {
                $('#CtabCL').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                showNotificationDialog();
                return false;
            }
        }
        /* HISTORY related data deleated and archived END */
    </script>
}
<script type="text/javascript">
    var isTabClick = false;
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true),

    ];
    if ('@IsShowChangeLog.ToString().ToUpper()' == 'TRUE') {
        TabsArry.push(new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true));
    }

    function callbacknew() { window.location.hash = '#new'; ShowNewTab('QuickListCreate', 'frmQuickList'); HideDisplayIcon(); }
    //function callbackhistory() { window.location.hash = '#list'; fillQLNarrowSearchDiv(); AllowDeletePopup = true; HideDisplayIcon(); } //HistoryTabClick(); }
    function callbackhistory() {
        
        window.location.hash = '#list';
        if (IsReloadQuickList == true) {
            $('#myDataTable').dataTable().fnDraw();
            IsReloadQuickList = false;
        }
        AllowDeletePopup = true;
        HideDisplayIcon();
    }
    function callbackCL() { HistoryTabClick(); HideDisplayIcon(); }
    function HideDisplayIcon() {
        if ($('#IsDeletedRecords').is(':checked')) {
            $('#undeleteRows').css('display', '');
            $('#deleteRows').css('display', 'none');
            $(".print").attr("style", "display:none");
        }
        else {
            $('#undeleteRows').css('display', 'none');
            $('#deleteRows').css('display', '');
            $(".print").attr("style", "display:block");
        }
    }
    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
        }

    }
    $(document).ready(function () {
        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
        //SetTabView();
    });
</script>
<div class="userListingWrapper">
    <h2>
        @eTurns.DTO.ResQuickList.PageHeader</h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'>
        </ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search</span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" /></a>
                    </div>
                </div>
                <input type="button" id="btnDiv" value="Div" style="visibility: hidden" />
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission)
            @*@Html.Partial("NarrowSearchLayout", modelCommon)*@
            <div id="divNarrowSearch" style="float: left; padding: 0 5px 0 0; width: 18%;">
                &nbsp;
            </div>
            <div class="userContent">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                               @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.Name
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.Comment
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.ListType
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.NoOfItems
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RoomName
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.IsArchived
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.IsDeleted
                            </th>
                            @Html.RenderColumnsHeader("QuickListMaster", typeof(eTurns.DTO.ResQuickList))
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
        <div id='CtabCL' class="tabContener">
        </div>
    </div>
</div>
<script type="text/javascript">
    var _IsArchived = false;
    var _IsDeleted = false;

    function BlankSession(ID) {
        $("form").off(".areYouSure");
        $(window).off('beforeunload');
        
        bIsFilter = false;
        $.ajax({ url: '@Url.Content("~/QuickList/BlankSession")'
                                    , type: 'GET'
                                    , contentType: "application/json"
                                    , success: function (result) {
                                    },
            error: function (msg) {
            }
        });
    }

    $(document).ready(function () {
        if (typeof ($('#IsArchivedRecords')) != undefined)
            _IsArchived = $('#IsArchivedRecords').is(':checked');

        if (typeof ($('#IsDeletedRecords')) != undefined)
            _IsDeleted = $('#IsDeletedRecords').is(':checked');


        fillQLNarrowSearchDiv();
    });

    function fillQLNarrowSearchDiv() {
        $('#divNarrowSearch').html('&nbsp');
        $.get('@Url.Action("GetQLNarrwSearchHTML")', function (data) {
            $('#divNarrowSearch').html(data);
        });
    }
    isDirtyForm = false;

    $('#IsDeletedRecords, #IsArchivedRecords').live('click', function () {
        if (typeof ($('#IsArchivedRecords')) != undefined)
            _IsArchived = $('#IsArchivedRecords').is(':checked');

        if (typeof ($('#IsDeletedRecords')) != undefined)
            _IsDeleted = $('#IsDeletedRecords').is(':checked');
        fillQLNarrowSearchDiv();
    });

    $('#IsDeletedRecords').live('click', function () {
        $('#myDataTable').dataTable().fnFilter($("#global_filter").val(), null, null, null)
        callbackhistory();
        HideDisplayIcon();

    });
    $('#IsArchivedRecords').live('click', function () {
        $('#myDataTable').dataTable().fnFilter($("#global_filter").val(), null, null, null)
        callbackhistory();

    }); 


</script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
