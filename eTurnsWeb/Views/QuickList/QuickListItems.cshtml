@model eTurns.DTO.QuickListMasterDTO
@{
    GridHeaderSettings settings = null;
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);

    if (Model.IsDeleted.GetValueOrDefault(false) || Model.IsArchived.GetValueOrDefault(false))
    {
        settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayDeleteButton = false, DisplaySaveButton = false, DisplayUDFButton = true, UDFSetupFor = "QuickListItems&UDFHeader=" + @eTurns.DTO.ResQuickList.PageHeader, DisplaySettings = false, DisplayColumnSetupButton = false, ColumnSetupFor = "QuickListItems", DataTableName = "myDataTable1", DisplayContextMenu = false, DisplayPrintBlock = false };
    }
    else
    {
        settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayDeleteButton = true, DisplaySaveButton = false, DisplayUDFButton = true, UDFSetupFor = "QuickListItems&UDFHeader=" + @eTurns.DTO.ResQuickList.PageHeader, DisplaySettings = true, DisplayColumnSetupButton = false, ColumnSetupFor = "QuickListItems", DataTableName = "myDataTable1", DisplayContextMenu = false, DisplayPrintBlock = false };
    }

    //---------------------------------------------------------------
    //
    string[] arr = new string[] { };
    string newStrinVal = "";
    string str = Convert.ToString(Html.RenderColumnsArrayEditableObject("QuickListItems", IsObjectRender: true, PushColumnObject: "ColumnObject", isUDFOrderRequire: true)) ?? string.Empty;
    if (!string.IsNullOrWhiteSpace(str))
    {
        arr = str.Split(new string[] { "[#]" }, StringSplitOptions.RemoveEmptyEntries);
    }
    if (arr != null && arr.Length > 0)
    {
        foreach (var item in arr)
        {
            string ActralUDF = string.Empty;
            if (item.ToString().ToLower().IndexOf("udf1") >= 0)
            {
                ActralUDF = "UDF1";
            }
            if (item.ToString().ToLower().IndexOf("udf2") >= 0)
            {
                ActralUDF = "UDF2";
            }
            if (item.ToString().ToLower().IndexOf("udf3") >= 0)
            {
                ActralUDF = "UDF3";
            }
            if (item.ToString().ToLower().IndexOf("udf4") >= 0)
            {
                ActralUDF = "UDF4";
            }
            if (item.ToString().ToLower().IndexOf("udf5") >= 0)
            {
                ActralUDF = "UDF5";
            }
            newStrinVal = newStrinVal + item.Replace("return \"<", "return \"<input type='hidden' id='hdn" + ActralUDF + "' value='\"+obj.aData." + ActralUDF + "+\"' /><");

        }

    }
    MvcHtmlString strtoPutarra = new MvcHtmlString(newStrinVal);
}

<div class="userListingWrapper">
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99.5%">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search</span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="QLItem_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_QLItem_filter" />
                        </a>
                    </div>
                </div>
                <input type="button" id="btnDiv" value="Div" style="visibility: hidden" />
            </div>
            @Html.QuickListItemsGridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.QuickListPermission)
            <div class="userContent" style="width: 99.5%; margin-left: 5px !important;
                float: left;">
                <table id="myDataTable1" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ItemNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Description
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.Quantity
                            </th>
                            @if (ViewBag.SelectedQuicklistType == 3)
                            {
                                <th id="thConsignedQuantity">
                                    @eTurns.DTO.ResQuickList.ConsignedQuantity
                                </th>
                            }
                            <th>
                                @eTurns.DTO.ResBin.BinNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.OnHandQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.Category
                            </th>
                            <th>
                                @eTurns.DTO.ResQuickList.Supplier
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.SupplierPartNo
                            </th>
                            <th>
                                @eTurns.DTO.ResUnitMaster.Unit
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.DefaultPullQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Cost
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Markup
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.SellPrice
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ManufacturerName
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ManufacturerNumber
                            </th>
                            @Html.RenderColumnsHeader("QuickListItems", typeof(eTurns.DTO.ResQuickListItems))
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="dialog" id="mdlQLYesNo" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.DeleteConfirm
        </p>
        <a href="JavaScript:void{}" id="btnQLModelYes" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no"
               onclick="QLcloseModal()">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>

<script type="text/javascript">
    $(document).keyup(function (e) {
        if ('@Model.IsDeleted.GetValueOrDefault(false)' !== 'True' && '@Model.IsArchived.GetValueOrDefault(false)' !== 'True') {

            /*START - HANDLING OF GLOBAL DELETE KEYPRESS BUG*/
            if (e.target.type == 'text' && e.target.localName == 'input')
                return false;
            /*END - HANDLING OF GLOBAL DELETE KEYPRESS BUG*/

            if (AllowDeletePopup1 == true) {
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code == 46) {
                    $('#deleteRows1').click();
                }
                if (code == 89 && IsDeletePopupOpen1 == true) {
                    $("#btnQLModelYes").click();
                    IsDeletePopupOpen1 = false;
                }
                else if (code == 78 && IsDeletePopupOpen1 == true) {
                    QLcloseModal();
                    IsDeletePopupOpen1 = false;
                }
            }
        }
    });

    $('#deleteRows1').unbind("click");
    $('#deleteRows1').click(function () {
        if ('@Model.IsDeleted.GetValueOrDefault(false)' !== 'True' && '@Model.IsArchived.GetValueOrDefault(false)' !== 'True') {
            var anSelected = fnGetSelected1(oTable1);
            var stringIDs = "";
            for (var i = 0; i <= anSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnGUID').text() + ",";
            }
            if (anSelected.length !== 0) {
                $('#mdlQLYesNo').modal();
                IsDeletePopupOpen1 = true;
            }
        }
    });

    $('#btnQLModelYes').unbind("click");
    $("#btnQLModelYes").click(function () {
        var anSelected = fnGetSelected1(oTable1);
        var stringIDs = "";
        for (var i = 0; i <= anSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anSelected[i]).find('#spnGUID').text() + ",";
        }
        if (anSelected.length !== 0) {

            $.ajax({
                'url': deleteURL1,
                data: { ids: stringIDs },
                success: function (response) {
                    if (response == "ok") {
                        for (var i = 0; i <= anSelected.length - 1; i++) {
                            oTable1.fnDeleteRow(anSelected[i]);
                        }
                        if (anSelected.length > 0)
                            $("#spanGlobalMessage").html("@ResCommon.RecordDeletedSuccessfully".replace("{0}", "(" + anSelected.length + ")"));
                        showNotificationDialog();
                    }
                },
                complete: function (response) {
                    oTable.fnDraw();
                },
                error: function (response) {
                }
            });
            QLcloseModal();
            IsDeletePopupOpen1 = false;
        }
    });

</script>
<script type="text/javascript">
    var oTable1;
    var IsRefreshGrid1 = false;
    var IsDeletePopupOpen1 = false;
    var deleteURL1 = "/QuickList/DeleteQuickListItem";
    var AllowDeletePopup1 = true;
    var objQLDetailGridColumns = {};

    function OpenItemModel() {
        $('#ItemModel').load('@Url.Action("LoadItemMasterModel", new { ParentId = @Model.ID })', function () {
            $('#ItemModel').modal();
        });
        return false;
    }
    function CallThisFunctionFromModel(msg) {
        if (msg == 'success') {
            oTable1.fnDraw();
        }
        else if (json.Status == 'fail') {
            alert(json.Message);
            return false;
        }
    }



    var ColumnObject = new Array();
    $(document).ready(function () {
        $('form').areYouSure();

        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormatSR").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 0
        });
        ColumnObject.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: ''});
        ColumnObject.push({ mDataProp: "ID", bSortable: true, sClass: "read_only" });
        ColumnObject.push({
            mDataProp: "ItemNumber",
            sClass: "read_only",
            sDefaultContent: '',
            bSortable: true,
            bSearchable: false,
            "fnRender": function (obj, val) {
                return "<span id='spnItemNummber'>" + val + "</span>"
                        + "<span id='spnID'  style='display:none'>" + obj.aData.ID + "</span>"
                        + "<span id='spnGUID'  style='display:none'>" + obj.aData.GUID + "</span>"
                        + "<span id='spnQuickListItemID'  style='display:none'>" + obj.aData.ItemID + "</span>"
                        + "<span id='spnQuickListItemGUID'  style='display:none'>" + obj.aData.ItemGUID + "</span>"
                        + "<span id='spnSerialNumberTracking'  style='display:none'>" + obj.aData.SerialNumberTracking + "</span>";
            }
        });
        ColumnObject.push({ mDataProp: "Description", sClass: "read_only", "sDefaultContent": '', "fnRender": function (obj, val) { return "<div class='comment more'>" + val + "</div>"; } });

        if ('@Model.IsDeleted.GetValueOrDefault(false)' !== 'True' && '@Model.IsArchived.GetValueOrDefault(false)' !== 'True') {
            if ('@Session["IsInsert"]' == 'True' || '@isUpdate' == 'True') {
                ColumnObject.push({
                    mDataProp: "Quantity", "sClass": "read_only numericalign", sDefaultContent: '',
                    "fnRender": function (obj, val) {
                        if (obj.aData.SerialNumberTracking == true) {
                            if (val == "" || val === null || val === undefined || isNaN(val)) {
                                return "<input type='text' id='txtQLQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericalign' value=''/>";
                            }
                            else {
                                return "<input type='text' id='txtQLQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericalign' value='" + parseFloat(val).toFixed(0) + "'/>";
                            }
                        }
                        else {
                            if (val == "" || val === null || val === undefined || isNaN(val))
                            {
                                return "<input type='text' id='txtQLQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericalign' value=''/>";
                            }
                            else
                            {
                                return "<input type='text' id='txtQLQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericalign' value='" + parseFloat(val).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + "'/>";
                            }
                        }
                    }
                });

                if ('@ViewBag.SelectedQuicklistType' == '3')
                {
                    ColumnObject.push({
                        mDataProp: "ConsignedQuantity", "sClass": "read_only numericalign", sDefaultContent: '',
                        "fnRender": function (obj, val) {
                            if (obj.aData.Consignment == true) {
                                if (obj.aData.SerialNumberTracking == true) {
                                    if (val == "" || val === null || val === undefined || isNaN(val)) {
                                        return "<input type='text' id='txtConsignedQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericalign' value=''/>";
                                    }
                                    else {
                                        return "<input type='text' id='txtConsignedQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericalign' value='" + parseFloat(val).toFixed(0) + "'/>";
                                    }
                                }
                                else {
                                    if (val == "" || val === null || val === undefined || isNaN(val)) {
                                        return "<input type='text' id='txtConsignedQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericalign' value=''/>";
                                    }
                                    else {
                                        return "<input type='text' id='txtConsignedQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericalign' value='" + parseFloat(val).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10)) + "'/>";
                                    }
                                    
                                }
                            }
                            else
                            {
                                if (obj.aData.SerialNumberTracking == true) {
                                    return "<input type='text' id='txtConsignedQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericsonly disableBack' value='NA' />";
                                }
                                else {
                                    return "<input type='text' id='txtConsignedQty_" + obj.aData.ID + "' style='width:75%' maxLength='10' class='numericinput text-boxinner numericsonly disableBack' value='NA' />";
                                }
                            }
                        }
                    });
                }
            }
            else {
                ColumnObject.push({ mDataProp: "Quantity", "sClass": "read_only numericalign", sDefaultContent: '' });
                if (ViewBag.SelectedQuicklistType == 3) {
                    ColumnObject.push({ mDataProp: "ConsignedQuantity", "sClass": "read_only numericalign", sDefaultContent: '' });
                }
            }
        }
        else {
            ColumnObject.push({ mDataProp: "Quantity", "sClass": "read_only numericalign" });
            if (ViewBag.SelectedQuicklistType == 3) {
                ColumnObject.push({ mDataProp: "ConsignedQuantity", "sClass": "read_only numericalign" });
            }
        }
        ColumnObject.push({
            "mDataProp": "BinName",
            "bSortable": true,
            "sClass": "read_only control center ",
            "sDefaultContent": '',
            "fnRender": function (obj, val) {
                var select = '<span style="display:none" >' + obj.aData.BinName + '</span> <span style="position:relative">'
                    + '<input class="OrdDetailAuto text-boxinner udf-editable-dropdownbox" id="ddlItemSourceBinsQL" maxlength="128" name="ddlItemSourceBinsQL" type="text" value="' + obj.aData.BinName + '" autocomplete="off" role="textbox" aria-autocomplete="list" aria-haspopup="true" style="width:93%;" />'
                    + '<input type="hidden" id="hdnItemGuid" value="' + obj.aData.ItemGUID + '" />'
                    + '<input type="hidden" id="hdnLocationId" value="' + obj.aData.BinID + '" />'
                    + '<input type="hidden" id="hdnIsLoadMoreLocations" value="false"  />'
                    + '<input type="hidden" id="hdnselectedIDs" />'
                    + '<a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:1px;z-index:999 !important;" class="ShowAllOptions">'
                    + '<img src="/Content/images/arrow_down_black.png" alt="select"></a>'
                    + '</span>';

                return select;
            }
        })
        ColumnObject.push({
            mDataProp: "OnHandQuantity", bSortable: true, sClass: "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.OnHandQuantity != null && obj.aData.OnHandQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.OnHandQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        });
        ColumnObject.push({ mDataProp: "CategoryName", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "SupplierName", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "SupplierPartNo", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "Unit", sClass: "read_only" });
        ColumnObject.push({
            mDataProp: "DefaultReorderQuantity", sClass: "read_only numericalign",
            "fnRender": function (obj, val) {
                if (obj.aData.DefaultPullQuantity != null && obj.aData.DefaultReorderQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.DefaultReorderQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        });
        ColumnObject.push({
            mDataProp: "DefaultPullQuantity", sClass: "read_only numericalign isCost",
            "fnRender": function (obj, val) {
                if (obj.aData.DefaultPullQuantity != null && obj.aData.DefaultPullQuantity != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.DefaultPullQuantity, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        });
        ColumnObject.push({
            mDataProp: "Cost", sClass: "read_only numericalign isCost",
            "fnRender": function (obj, val) {
                if (obj.aData.Cost != null && obj.aData.Cost != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.Cost, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        });
        ColumnObject.push({ mDataProp: "Markup", sClass: "read_only numericalign isCost" });
        ColumnObject.push({
            mDataProp: "SellPrice", sClass: "read_only numericalign isCost",
            "fnRender": function (obj, val) {
                if (obj.aData.SellPrice != null && obj.aData.SellPrice != NaN)
                    return "<span>" + FormatedCostQtyValues(obj.aData.SellPrice, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        });
        ColumnObject.push({ mDataProp: "ManufacturerName", sClass: "read_only" });
        ColumnObject.push({ mDataProp: "ManufacturerNumber", sClass: "read_only" });
        @strtoPutarra
        objQLDetailGridColumns = GetGridChildGridColumnsObject('myDataTable1');

        var gaiSelected = [];
        oTable1 = $('#myDataTable1').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "99.5%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[1, "desc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'QuickListDetail' },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = json;

                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'QuickListDetail' },
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content("~/QuickList/GetQuickListItems")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {

                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "QuickListGUID", "value": '@Model.GUID' });
                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });


                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    cache: false,
                    "async": false,
                    "url": sSource,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#myDataTable1 td').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });

                    },
                    complete: function (response) {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        if ($("#QLItem_filter").val() != '') {
                            $('#myDataTable1 td').highlight($("#QLItem_filter").val());
                        }

                        if ('@Model.IsDeleted.GetValueOrDefault(false)' !== 'True' && '@Model.IsArchived.GetValueOrDefault(false)' !== 'True') {
                            var conv = jQuery.parseJSON(response.responseText);
                        }

                        CallShowHideData();

                        $(".text-boxQuantityFormat").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
                        });

                        $(".text-boxQuantityFormatSR").priceFormat({
                            prefix: '',
                            thousandsSeparator: '',
                            centsLimit: 0
                        });

                        UDFfillEditableOptionsForGrid();
                        SetUDFSelected(oSettings);
                    }
                });
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
            },
            "fnDrawCallback": function () {
                //LoadGridSavedState('myDataTable1');
                //SaveGridStateChangeState('myDataTable1', '', true);
                //SaveGridStateChangeState('myDataTable1', 'spnGUID', false);
            },
            "aoColumns": ColumnObject
        }).makeEditable({});
        $('.DTTT_container').css('z-index', '-1');
        if ('@isCost' == '@Boolean.FalseString') {
            HideColumnUsingClassName("myDataTable1");
        }
        $('#divContextMenu1').hide();

        $('#DivLoading').hide();

        //if (QuicklistType == null || QuicklistType == undefined || QuicklistType != 3) {
        //    $('#thConsignedQuantity').hide();
        //    $('[id*="txtConsignedQty_"]').parent().hide();
        //}

    });

    function SetUDFSelected(objParams) {

        $("#" + objParams.sInstance).find("tbody").find("tr").each(function () {

            var binId = $(this).find("input[name='hdnBinID']").val();
            //            $(this).find("#slctBinName").val(binId);

            var $objUdf1 = $(this).find("#UDF1");
            var $spnUDF1 = $(this).find("#hdnUDF1");
            var $objUdf2 = $(this).find("#UDF2");
            var $spnUDF2 = $(this).find("#hdnUDF2");
            var $objUdf3 = $(this).find("#UDF3");
            var $spnUDF3 = $(this).find("#hdnUDF3");
            var $objUdf4 = $(this).find("#UDF4");
            var $spnUDF4 = $(this).find("#hdnUDF4");
            var $objUdf5 = $(this).find("#UDF5");
            var $spnUDF5 = $(this).find("#hdnUDF5");

            if ($objUdf1 != undefined && $spnUDF1 != undefined) {
                if ($spnUDF1.val() == null || $spnUDF1.val() == undefined || $spnUDF1.val() == 'null' || $spnUDF1.val() == 'NULL') {
                    if ($objUdf1.is("select")) {
                        $objUdf1.find("option:first-child").attr('selected', true);
                    }
                    else if ($objUdf1.is("input[type='text']")) {
                        $objUdf1.val('');
                    }
                }
                else {
                    if ($objUdf1.is("select")) {
                        $objUdf1.find("option").filter(function () {
                            return this.text == $spnUDF1.val();
                        }).attr('selected', true);
                    }
                    else if ($objUdf1.is("input[type='text']")) {
                        $objUdf1.val($spnUDF1.val());
                    }
                }
            }
            if ($objUdf2 != undefined && $spnUDF2 != undefined) {
                if ($spnUDF2.val() == null || $spnUDF2.val() == undefined || $spnUDF2.val() == 'null' || $spnUDF2.val() == 'NULL') {
                    if ($objUdf2.is("select")) {
                        $objUdf2.find("option:first-child").attr('selected', true);
                    }
                    else if ($objUdf2.is("input[type='text']")) {
                        $objUdf2.val('');
                    }
                }
                else {
                    if ($objUdf2.is("select")) {
                        $objUdf2.find("option").filter(function () {
                            return this.text == $spnUDF2.val();
                        }).attr('selected', true);
                    }
                    else if ($objUdf2.is("input[type='text']")) {
                        $objUdf2.val($spnUDF2.val());
                    }
                }
            }
            if ($objUdf3 != undefined && $spnUDF3 != undefined) {
                if ($spnUDF3.val() == null || $spnUDF3.val() == undefined || $spnUDF3.val() == 'null' || $spnUDF3.val() == 'NULL') {
                    if ($objUdf3.is("select")) {
                        $objUdf3.find("option:first-child").attr('selected', true);
                    }
                    else if ($objUdf3.is("input[type='text']")) {
                        $objUdf3.val('');
                    }
                }
                else {
                    if ($objUdf3.is("select")) {
                        $objUdf3.find("option").filter(function () {
                            return this.text == $spnUDF3.val();
                        }).attr('selected', true);
                    }
                    else if ($objUdf3.is("input[type='text']")) {
                        $objUdf3.val($spnUDF3.val());
                    }
                }
            }
            if ($objUdf4 != undefined && $spnUDF4 != undefined) {
                if ($spnUDF4.val() == null || $spnUDF4.val() == undefined || $spnUDF4.val() == 'null' || $spnUDF4.val() == 'NULL') {
                    if ($objUdf4.is("select")) {
                        $objUdf4.find("option:first-child").attr('selected', true);
                    }
                    else if ($objUdf4.is("input[type='text']")) {
                        $objUdf4.val('');
                    }
                }
                else {
                    if ($objUdf4.is("select")) {
                        $objUdf4.find("option").filter(function () {
                            return this.text == $spnUDF4.val();
                        }).attr('selected', true);
                    }
                    else if ($objUdf4.is("input[type='text']")) {
                        $objUdf4.val($spnUDF4.val());
                    }
                }
            }

            if ($objUdf5 != undefined && $spnUDF5 != undefined) {
                if ($spnUDF5.val() == null || $spnUDF5.val() == undefined || $spnUDF5.val() == 'null' || $spnUDF5.val() == 'NULL') {
                    if ($objUdf5.is("select")) {
                        $objUdf5.find("option:first-child").attr('selected', true);
                    }
                    else if ($objUdf5.is("input[type='text']")) {
                        $objUdf5.val('');
                    }
                }
                else {
                    if ($objUdf5.is("select")) {
                        $objUdf5.find("option").filter(function () {
                            return this.text == $spnUDF5.val();
                        }).attr('selected', true);
                    }
                    else if ($objUdf5.is("input[type='text']")) {
                        $objUdf5.val($spnUDF5.val());
                    }
                }
            }
        });
    }



    $('#myDataTable1 tbody tr').die('tap click');
    var lastChecked1;
    var starttrvalue1 = "";
    $('#myDataTable1 tbody tr').live('tap click', function (e) {
        //$(this).toggleClass('row_selected');
        //return false;
         
        if ($(e.target).hasClass("control") == true || e.target.nodeName.toLowerCase() == "img" || e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text" || e.target.type == "button" || $(e.target).is('a') == true || $(e.target).is('span') == true
            || $(e.target).hasClass("selectBox")
        ) {
            e.stopPropagation();
        }
        else {
            if (lastChecked1 !== undefined && lastChecked1 != null && !lastChecked1) {
                lastChecked1 = this;
            }

            if (e.shiftKey) {
                var start = $('#myDataTable1 tbody tr').index(this);
                var end = $('#myDataTable1 tbody tr').index(lastChecked1);

                var stringval1 = readCookieforshift("selectstartindex");
                if (stringval1 != null) {
                    var endindex = $(this).closest('tr').attr('id');
                    createCookieforshift("selectendindex", endindex, 1);
                    if ($("#hdnPageName").val() !== undefined) {
                        var pagename = '';
                        pagename = $("#hdnPageName").val();
                        GetOnlyIdsForPassPagesForshift(pagename, true);
                    }
                }

                for (i = Math.min(start, end); i <= Math.max(start, end); i++) {
                    if (!$('#myDataTable1 tbody tr').eq(i).hasClass('row_selected')) {
                        $('#myDataTable1 tbody tr').eq(i).addClass("row_selected");
                    }
                }
                if (window.getSelection) {
                    if (window.getSelection().empty) {  // Chrome
                        window.getSelection().empty();
                    } else if (window.getSelection().removeAllRanges) {  // Firefox
                        window.getSelection().removeAllRanges();
                    }
                } else if (document.selection) {  // IE?
                    document.selection.empty();
                }
            } else if ((e.metaKey || e.ctrlKey)) {
                $(this).toggleClass('row_selected');
            } else {
                $(this).toggleClass('row_selected');


                if ($(this).hasClass('row_selected')) {
                    (starttrvalue1 == "") ? starttrvalue1 = $(this).closest('tr').attr('id') : starttrvalue1 = starttrvalue1 + "," + $(this).closest('tr').attr('id');
                    createCookieforshift("selectstartindex", starttrvalue1, 1);
                } else {

                    var stringval = readCookieforshift("selectstartindex");
                    if (stringval != "undefined") {
                        if (stringval != null) {
                            var tmp = stringval.split(',');
                            var index = tmp.indexOf($(this).closest('tr').attr('id'));
                            if (index !== -1) {
                                tmp.splice(index, 1);
                                stringval = tmp.join(',');
                                createCookieforshift("selectstartindex", stringval, 1);
                            }
                        }
                    }

                }
            }

            lastChecked1 = this;
        }

    });

    $('#PageNumber1').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#Gobtn1").click();
            return false;
        }
    });

    $("#Gobtn1").click(function () {
        var pval = $('#PageNumber1').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (parseInt(pval, 10) <= 0)
            return;


        oTable1.fnPageChange(Number(pval - 1));
        $('#PageNumber1').val('');
    });



    $("#reordersetting1").click(function () {
        $("#divRefreshBlock1").toggle();
    });

    /* Get the rows which are currently selected */
    function fnGetSelected1(oTableLocal) {
        return oTableLocal.$('#myDataTable1 tr.row_selected');
    }

    /* global search function */







    function callPrint1(DataTableName) {
        var oConfig = {
            "sInfo": "<h6>Print view</h6><p>Please use your browser's print function to " + "print this table. Press escape when finished.",
            "sMessage": null,
            "bShowAll": false,
            "sToolTip": "View print view",
            "sButtonClass": "DTTT_button_print",
            "sButtonText": "Print"
        };
        if (typeof (TableTools) != undefined && typeof (TableTools) != 'undefined')
            TableTools.fnGetInstance(DataTableName).fnPrint(true, oConfig);
    }




    $("#ColumnOrderSetup_Context1").click(function () {
        $("#ColumnSortableModal1").dialog("open");
        return false;
    });



    // used for refresh the grid manually...
    $('#refreshGrid1').live('click', function () {
        $('#divContextMenu1').hide();
        if ($("#divRefreshBlock1").css("display").toUpperCase() == 'BLOCK')
            $("#divRefreshBlock1").toggle();
        oTable1.fnDraw();
    });

    $("#myDataTable1_length").attr("style", "margin-left:2px;");

    $('#myDataTable1').find('input.OrdDetailAuto').off('focus');
    $('#myDataTable1').on('focus', "input.OrdDetailAuto", function (e) {
        $('#myDataTable1').find('input.OrdDetailAuto').off('focus');
        var ajaxURL = '/Master/GetBinsOfItemByOrderId';
        var stagingName = $('#txtStagingName').val();
        var includeQty = false;
        var tr = $(this).parent().parent().parent();
        var itmGuid = $(tr).find('#spnQuickListItemGUID').text();
        var hdnIsLoadMoreLocations = $(tr).find("#hdnIsLoadMoreLocations").val();
        $(this).autocomplete("destroy");

        $(this).autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: ajaxURL,
                    type: 'POST',
                    data: JSON.stringify({ 'StagingHeaderName': '', 'NameStartWith': request.term, 'ItemGUID': itmGuid, 'QtyRequired': false, 'OnlyHaveQty': false, 'OrderId': 0, 'IsLoadMoreLocations': hdnIsLoadMoreLocations }),
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data) {
                        response($.map(data, function (Items) {
                            return {
                                label: Items.Value,
                                value: Items.Key
                            }
                        }));
                    },
                    error: function (err) {
                    }
                });
            },
            autoFocus: false,
            minLength: 1,
            select: function (event, ui) {
                if (ui.item.value == MoreLocation) {
                    $(tr).find("#hdnIsLoadMoreLocations").val("true");
                    $(this).trigger("focus");
                    $(this).autocomplete("search", " ");
                    return false;
                }
                else {
                    $(this).val(ui.item.value);
                    $(this).parents("td").find("input#hdnLocationId").val(ui.item.selval);
                }
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                $('ul.ui-autocomplete').css('overflow-y', 'auto');
                $('ul.ui-autocomplete').css('max-height', '300px');
                $('ul.ui-autocomplete').css('z-index', '99999');
            },
            close: function () {
                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            },
            change: function (event, ui) {
            }
        }).bind("focus", function () {
            $(this).autocomplete("search", " ");
            //$(objTxtselector).autocomplete("search", $(objTxtselector).val());
        });
        $('#myDataTable1').find('input.OrdDetailAuto').on('focus');
    });

    $(document).ready(function () {
        //$('.show-all-options').click(function () {
        //    $(this).siblings('.OrdDetailAuto').trigger("focus");
        //    $(this).siblings(".OrdDetailAuto").autocomplete("search", " ");
        //});
        //alert('dsaf');
        //$('.ShowAllOptions').click(function () {
        //    alert("dsf");
        //    $(this).siblings('.OrdDetailAuto').trigger("focus");
        //    $(this).siblings(".OrdDetailAuto").autocomplete("search", " ");
        //});




    });

    $("#ColumnOrderSetup1").off('click')
    $("#ColumnOrderSetup1").on('click', function () {
        $("#divDetailGridReorderPopup").data({ 'DataTableName': 'myDataTable1', 'ListName': 'QuickListDetail', 'ColumnObjectName': 'objQLDetailGridColumns' }).dialog("open");
        return false;
    });

    function FillDetailGridDiv() {
        $('#divQuickListItems').empty();
        @*$('#divQuickListItems').load('@Url.Action("LoadQuickListItems", new { QuickListGUID = @Model.GUID })', function () {
            $('#DivLoading').hide();
            $("#divDetailGridReorderPopup").dialog("close");
        });*@
        $('#divQuickListItems').load('LoadQuickListItems?QuickListGUID=' + '@Model.GUID.ToString()' + '&QuicklistType=' + '@ViewBag.SelectedQuicklistType.ToString()', function () {
            $('#DivLoading').hide();
            $("#divDetailGridReorderPopup").dialog("close");
        });
    }

</script>
