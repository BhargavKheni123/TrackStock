@model IEnumerable<eTurns.DTO.ReceivedOrderTransferDetailDTO>
@{
    bool isUpdate = false;
    bool isInsert = false;
    isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    var settings = new GridHeaderSettings() { DisplaySaveButton = false, DisplaySettings = false, DisplayColumnSetupButton = true,DisplayDeleteButton =false, ColumnSetupFor = "ItemLocationList" };
}
<script type="text/javascript" src="@Url.Content("~/Scripts/DynemicDataTable.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())" ></script>
<div class="innerGrid" style="background: none repeat scroll 0 0 #F8F8F8; padding: 10px 0 0 0px">
    <table style="width: 880px;">
        <tr>
            <td class="BtnBlock" style="float: none; border: 1px solid #F8F8F8; height: 2px;">
                <div class="innerHeadSec">
                    <div style="position: absolute; left: 470px; top: -11px; width: 350px; z-index: 10;">
                        @*<a href="javascript:void(null);" title="@ViewBag.OrderDetailGUID" id="btnDeleteRecords@(ViewBag.OrderDetailGUID)" style="float:right">
                            <img src="~/Content/images/delete.png" alt="" />
                        </a>*@
                        <input type="button" id="InnerGridGobtn" class="go" value=@eTurns.DTO.Resources.ResGridHeader.Go />
                        <input type="text" id="InnerGridPageNumber" class="inputNum" />
                        <span class="label">@eTurns.DTO.Resources.ResGridHeader.GoToPage</span>
                        @Html.GridChildGridTopHeader(settings);
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top: 14px; padding-bottom: 35px; border: 1px solid #F8F8F8;">
                <div class="userContentInnerGrid">
                    <input type="hidden" value="@ViewBag.ItemGUID" id="hdnItemGuid" />
                    <table id="ItemLocationTable@(ViewBag.OrderDetailGUID)" class="display">
                        <thead>
                            <tr>
                               @* <th class="NotSortable">
                                </th>*@
                                <th>
                                    @eTurns.DTO.ResBin.BinNumber
                                </th>
                                @if (ViewBag.IsSerialNumberTracking)
                                {
                                    <th>@eTurns.DTO.ResItemLocationDetails.SerialNumber
                                    </th>
                                }
                                @if (ViewBag.IsLotNumberTracking)
                                {
                                    <th>@eTurns.DTO.ResItemLocationDetails.LotNumber
                                    </th>
                                }
                                @if (ViewBag.IsDateCodeTracking)
                                {
                                    <th>@eTurns.DTO.ResItemLocationDetails.ExpirationDate
                                    </th>
                                }
                                <th>@eTurns.DTO.ResOrder.ReturnDate
                                </th>
                                <th>@eTurns.DTO.ResItemLocationDetails.CustomerOwnedQuantity
                                </th>
                                <th>@eTurns.DTO.ResItemLocationDetails.ConsignedQuantity
                                </th>
                                <th>@eTurns.DTO.ResOrder.PackSlipNumber
                                </th>
                                @if (ViewBag.IsItemLevelMinMaxQtyRequired != true)
                                {
                                    <th>@eTurns.DTO.ResItemMaster.MinimumQuantity
                                    </th>
                                    <th>@eTurns.DTO.ResItemMaster.MaximumQuantity
                                    </th>
                                    <th>@eTurns.DTO.ResItemMaster.CriticalQuantity
                                    </th>
                                }
                                <th>@eTurns.DTO.ResItemLocationDetails.Cost
                                </th>
                                <th>@eTurns.DTO.ResItemLocationDetails.Created
                                </th>
                                <th>@eTurns.DTO.ResItemLocationDetails.Updated
                                </th>
                                <th>@eTurns.DTO.ResItemLocationDetails.CreatedBy
                                </th>
                                <th>@eTurns.DTO.ResItemLocationDetails.LastUpdatedBy
                                </th>
                                <th>
                                    @eTurns.DTO.ResReceiveOrderDetails.IsEDISent

                                </th>
                                <th>
                                    @eTurns.DTO.ResReceiveOrderDetails.LastEDIDate

                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.AddedFrom
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.EditedFrom
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                                </th>
                                <th>
                                    @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                                </th>
                                @Html.RenderColumnsHeader("ReceivedOrderTransferDetail", typeof(eTurns.DTO.ResReceiveOrderDetails), "")
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </td>
        </tr>
    </table>
</div>
@*<div class="dialog" id="ReceivedOrderInnerGrid" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.DeleteConfirm</p>
        <a href="JavaScript:void(0)" id="btnYesReceiveOrderInnerGrid" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes</a><a href="javascript:void(0)" class="no"
                onclick="closeModal()">
                <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo</a>
    </div>
</div>
<div id="divEditReceive">
</div>*@
<script type="text/javascript">
    var DTName = 'ItemLocationTable' + '@(ViewBag.OrderDetailGUID)';
    var ReceivedOrderGridColumns;
    $(document).ready(function () {
        ReceivedOrderGridColumns = GetGridHeaderColumnsObject('ItemLocationTable' + '@(ViewBag.OrderDetailGUID)');
        if ($("input#OrderStatusChar").val().toLowerCase().trim() == "c" || $("select#ddlOrderStatus").val() == "8") {
            $("div.innerHeadSec").find("a").hide();
        }
        else {
            $("div.innerHeadSec").find("a").show();
        }
        AllowDeletePopup = false;

        var objColumns = new Array();
        objColumns.push({ mDataProp: "BinNumber", sClass: "read_only" });
        if ('@ViewBag.IsSerialNumberTracking' == 'True') {
            objColumns.push({ mDataProp: "SerialNumber", sClass: "read_only" });
        }
        if ('@ViewBag.IsLotNumberTracking' == 'True') {
            objColumns.push({ mDataProp: "LotNumber", sClass: "read_only" });
        }
        if ('@ViewBag.IsDateCodeTracking' == 'True') {
            objColumns.push({ mDataProp: "Expiration", sClass: "read_only" });
        }
        objColumns.push({ mDataProp: "Created", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.CreatedDate } });
        objColumns.push({
            mDataProp: "CustomerOwnedQuantity", sClass: "read_only",
            fnRender: function (obj, val) {
                if (!isNaN(parseFloat(val)) && parseFloat(val) > 0)
                    return "<span>" + FormatedCostQtyValues(val, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        });
        objColumns.push({
            mDataProp: "ConsignedQuantity", sClass: "read_only",
            fnRender: function (obj, val) {
                if (!isNaN(parseFloat(val)) && parseFloat(val) > 0)
                    return "<span>" + FormatedCostQtyValues(val, 2) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
            }
        })
        objColumns.push({ mDataProp: "PackSlipNumber", sClass: "read_only" });

        if (!('@ViewBag.IsItemLevelMinMaxQtyRequired' == 'True')) {
            objColumns.push({
                mDataProp: "MinimumQuantity", sClass: "read_only",
                fnRender: function (obj, val) {
                    if (!isNaN(parseFloat(val)) && parseFloat(val) > 0)
                        return "<span>" + FormatedCostQtyValues(val, 2) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            });
            objColumns.push({
                mDataProp: "MaximumQuantity", sClass: "read_only",
                fnRender: function (obj, val) {
                    if (!isNaN(parseFloat(val)) && parseFloat(val) > 0)
                        return "<span>" + FormatedCostQtyValues(val, 2) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            });
            objColumns.push({
                mDataProp: "CriticalQuantity", sClass: "read_only",
                fnRender: function (obj, val) {
                    if (!isNaN(parseFloat(val)) && parseFloat(val) > 0)
                        return "<span>" + FormatedCostQtyValues(val, 2) + "</span>";
                    else
                        return "<span>" + FormatedCostQtyValues(0, 2) + "</span>";
                }
            });
        }

        objColumns.push({
            mDataProp: "Cost", sClass: "read_only",
            fnRender: function (obj, val) {
                if (!isNaN(parseFloat(val)) && parseFloat(val) > 0)
                    return "<span>" + FormatedCostQtyValues(val, 1) + "</span>";
                else
                    return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
            }
        });
        objColumns.push({ mDataProp: "Created", sClass: "read_only", fnRender: function (obj, val) { return "<input type='hidden' name='hdnGUID' value='" + obj.aData.GUID + "' />" + obj.aData.CreatedDate; } });
        objColumns.push({ mDataProp: "Updated", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.UpdatedDate; } });
        objColumns.push({ mDataProp: "CreatedByName", sClass: "read_only" });
        objColumns.push({ mDataProp: "UpdatedByName", sClass: "read_only" });
        objColumns.push({ mDataProp: "IsEDISent", sClass: "read_only", fnRender: function (obj, val) { return "<span id='spnIsEDISent'>" + GetBoolInFormat(obj, val) + "</span>"; } }),
        objColumns.push({ mDataProp: "LastEDIDate", sClass: "read_only", fnRender: function (obj, val) { return GetDateInFullFormat(val); } });
        objColumns.push({ mDataProp: "AddedFrom", sClass: "read_only" });
        objColumns.push({ mDataProp: "EditedFrom", sClass: "read_only" });
        objColumns.push({ mDataProp: "ReceivedOn", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDate; } });
        objColumns.push({ mDataProp: "ReceivedOnWeb", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDateWeb; } });
        //        objColumns.push({ mDataProp: "ReceivedOnDate", sClass: "read_only" });
        //        objColumns.push({ mDataProp: "ReceivedOnDateWeb", sClass: "read_only" });
        objColumns.push(@(Html.RenderColumnsArray("ReceivedOrderTransferDetail", false, "")));

        OrderDetailGUID = '@ViewBag.OrderDetailGUID'
        PrepareItemLocationDataTable("ItemLocationTable", '@ViewBag.OrderDetailGUID', '@Url.Content("~/Order/ReceivedItemLocationsListAjax")', 'ItemLocationList', objColumns);

        if ($('#IsDeletedRecords').is(':checked') || $('#IsArchivedRecords').is(':checked') || $("body").hasClass('DTTT_Print')) {
            $('#btnDeleteRecords@(ViewBag.OrderDetailGUID)').css({ 'display': 'none' });
            $('#btnNewLocations@(ViewBag.OrderDetailGUID)').css({ 'display': 'none' });
        }

        setInterval(function () {
            $('#ItemLocationTable' + '@(ViewBag.OrderDetailGUID)' + ' tbody tr').on('click', function (e) {
                var td = $(this).find('#spnIsEDISent');
                if ($.trim(td.text()).toLowerCase() === 'yes') {
                    return false;
                }
            });

        }, 1000);
       
        $('.ColVis_MasterButton').hide();
        $('.innerGrid .refresh').css('margin-top', '-25px');
        $('.innerGrid .refresh').css('left', '44px');
    });

    $("#ColumnOrderSetupChildGrid").off('click')
    $("#ColumnOrderSetupChildGrid").on('click', function () {
        $("#divDetailGridReorderPopup").data({ 'DataTableName': DTName, 'ListName': 'ItemLocationList', 'ColumnObjectName': 'ReceivedOrderGridColumns' }).dialog("open");
        return false;
    });

    function FillDetailGridDiv() {
        $("#divDetailGridReorderPopup").dialog("close");
        $("#" + "RecieveOrderLineItem" + OrdID).find("tbody tr").each(function (index, tr) {
            if ($(tr).find("#hdnGUID").val() == OrderDetailGUID) {
                $(tr).find('td.sorting_1 img').click();
                $(tr).find('td.sorting_1 img').click();               
                return;
            }
        });
    }
</script>
