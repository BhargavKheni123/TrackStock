@model eTurns.DTO.OrderMasterDTO
@{
    GridHeaderSettings settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplaySaveButton = false, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = false, DisplayColumnSetupButton = false, DisplayContextMenu = false, DisplayPrintBlock = false, DisplayDeleteButton = false, DataTableName = "RecieveStagingOrderLineItem" + Model.ID };
}
<div class="userListingWrapper">
    <div class="userListBlock">
        <div class="searchWrapper">
            <div class="searchBlock">
                <span class="label">@eTurns.DTO.Resources.ResCommon.Search</span>
                <div class="searchinputB">
                    <input type="text" class="searchinput" id="StagingReceiveItem_filter" />
                    <a href="" class="xclose">
                        <img src="~/Content/images/x.png" alt="X" id="ClearStagingSearchReceive" /></a>
                </div>
            </div>
            <input type="button" id="btnDiv" value="Div" style="visibility: hidden" />
        </div>
        @Html.QuickListItemsGridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Orders)
        <div class="userContentInnerGrid" style="width: 99% !important; margin-left: 5px !important;
            float: left;">
            <table id="RecieveStagingOrderLineItem@(Model.ID)" class="display">
                <thead>
                    <tr>
                        <th>
                        </th>
                        <th>
                        </th>
                        <th>
                            @eTurns.DTO.ResItemLocationDetails.LotNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemLocationDetails.ExpirationDate
                        </th>
                        <th>
                            Quantity To Receive
                        </th>
                        <th>
                            @eTurns.DTO.ResItemLocationDetails.Cost
                        </th>
                        <th>
                            @eTurns.DTO.ResItemLocationDetails.ReceivedDate
                        </th>
                        <th>
                            @eTurns.DTO.ResOrder.Bin
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ItemNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResOrder.RequestedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResOrder.ApprovedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResOrder.RequiredDate
                        </th>
                        <th>
                            @eTurns.DTO.ResOrder.ReceivedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.OnHandQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.StagedQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.Markup
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SellPrice
                        </th>
                        <th>
                            @eTurns.DTO.ResCategoryMaster.Category
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.PackingQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.DefaultReorderQuantity
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ManufacturerName
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.ManufacturerNumber
                        </th>
                        <th>
                            @eTurns.DTO.ResItemMaster.SupplierPartNo
                        </th>
                        <th>
                            Send To EDI
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.OrderListItem != null && Model.OrderListItem.Count > 0)
                    {
                        foreach (var item in Model.OrderListItem)
                        { 
                        <tr id="tr_@item.ID">
                            <td>
                                <a href="javascript:void(0);" id="aPlusMinus" onclick="return ShowHideInnerGrid(this,@item.ID);">
                                    <img src="/Content/images/drildown_open.jpg" alt="" />
                                </a>
                            </td>
                            <td>
                                <input id="btnInlineStagingReceive@(item.ID)"  type="button"  onclick='return SingleStagingItemReceive(@item.ID);' value="Receive" class="GridBtnStyle inLineBtn"  />
                            </td>
                            <td>
                                @if (item.LotNumberTracking)
                                {
                                    <input id="txtStagingLotNumber@(item.ID)" type="text" class="text-boxinner LotNumberClass" style="width:80px;background:white;" /> //onblur = "return isDuplicateLot(this,0)"

                                }
                            </td>
                            <td>
                                @if (item.DateCodeTracking)
                                {
                                    <input id="txtStagingExpireDate@(item.ID)"  type="text" style="width:80px;background:white;" readonly="readonly"  class="myDatePicker text-box" />
                                }
                            </td>
                            <td>
                                @if (!item.SerialNumberTracking)
                                {
                                    double recQty = (item.ApprovedQuantity.GetValueOrDefault(0) - item.ReceivedQuantity.GetValueOrDefault(0));
                                    if (recQty <= 0)
                                    {
                                        recQty = 0;
                                    }

                                    @Html.TextBox("txtReceiveStagingQty" + item.ID, recQty, eTurnsWeb.Helper.SessionHelper.QuantityFormat, new { @class = "text-boxinner text-boxQuantityFormat", })
                                    
                                }
                                else
                                {
                                    double recQty = (item.ApprovedQuantity.GetValueOrDefault(0) - item.ReceivedQuantity.GetValueOrDefault(0));
                                    if (recQty <= 0)
                                    {
                                        recQty = 0;
                                    }
                                    
                                    @Html.TextBox("txtReceiveStagingQty" + item.ID, recQty, "{0:0}", new { @class = "text-boxinner text-boxQuantityFormatSR", @readonly = "readonly" })
                                    
                                }
                            </td>
                            <td>
                                @if (!item.SerialNumberTracking)
                                {
                                    @Html.TextBox("txtStagingCostBox" + item.ID, item.Cost, eTurnsWeb.Helper.SessionHelper.PriceFormat, new { @class = "text-boxinner text-boxPriceFormat" })
                                }
                            </td>
                            <td>
                                @if (!item.SerialNumberTracking)
                                {
                                    <input id="txtStagingReceiveDate@(item.ID)" type="text" style="width:80px;background:white;" readonly="readonly" 
                                class="myDatePicker text-boxinner" value="@DateTime.Now.ToString("MM/dd/yyyy")"  />
                                }
                            </td>
                            <td>
                                @if (!item.SerialNumberTracking)
                                {
                                    @Html.DropDownList("ddlStagingReceiveBin" + item.ID, new SelectList(ViewBag.BinList, "ID", "BinNumber", item.Bin), new { @class = "selectBox", @style = "width:90px;" })
                                }
                            </td>
                            <td>@item.ItemNumber
                                <input id="hdnID" type="hidden" value="@item.ID" />
                                <input id="hdnGUID" type="hidden" value="@item.GUID" />
                                <input id="hdnItemGUID" type="hidden" value="@item.ItemGUID" />
                                <input id="hdnOrderGUID" type="hidden" value="@item.OrderGUID" />
                                <input id="hdnBin" type="hidden" value="@item.Bin" />
                                <input id="hdnItemType" type="hidden" value="@item.ItemType" />
                                <input id="hdnItemDOCTrack" type="hidden" value="@item.DateCodeTracking.ToString()" />
                                <input id="hdnItemLOTTrack" type="hidden" value="@item.LotNumberTracking.ToString()" />
                                <input id="hdnItemSRTrack" type="hidden" value="@item.SerialNumberTracking.ToString()" />
                            </td>
                            <td>
                                <span id="spnRequestedQty">@item.RequestedQuantity</span>
                            </td>
                            <td>
                                <span id="spnApprovedQty">@item.ApprovedQuantity</span>
                            </td>
                            <td>
                                @item.RequiredDate.GetValueOrDefault(DateTime.MinValue).ToString("MM/dd/yyyy")
                            </td>
                            <td>
                                <span id="spnReceivedQty">@item.ReceivedQuantity</span>
                            </td>
                            <td>
                                <span id="spnOnHandQty">@item.OnHandQuantity</span>
                            </td>
                            <td>
                                <span id="spnOnStageQty">@item.StagedQuantity</span>
                            </td>
                            <td>
                                @item.Markup
                            </td>
                            <td>
                                @item.SellPrice
                            </td>
                            <td>
                                @item.Category
                            </td>
                            <td>
                                @item.PackingQuantity
                            </td>
                            <td>
                                @item.DefaultReorderQuantity
                            </td>
                            <td>
                                @item.Manufacturer
                            </td>
                            <td>
                                @item.ManufacturerNumber
                            </td>
                            <td>
                                @item.SupplierPartNo
                            </td>
                            <td>
                                @(item.IsEDISent.GetValueOrDefault(false) == true ? "True" : "False")
                            </td>
                        </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
    <input id="btnStagingReceiveALL" type="button" value="Receive ALL" style="float: left;
        margin-left: 5%; margin-top: -2%" class="CreateBtn" />&nbsp;
    <input id="btnStagingCloseOrder" type="button" value="Close Order" style="float: left;
        margin-left: 3%; margin-top: -2%" class="CreateBtn" />
</div>
<div id="StagingForItemReceive">
</div>
<div class="dialog" id="OrdReceiveProcessing" style="display: none;">
    <div class="inner">
        <p class="text" id="OrdReceiveGWait" style="text-align: left; padding-left: 10px;">
            <b style="color: Red;">Kindly wait, order receive transaction is going on..... </b>
        </p>
        <p class="text" id="OrdReceiveGWaitImg" style="text-align: center; padding-left: 10px;">
            <img src="../../Content/images/ajax.gif" alt="loding" />
        </p>
    </div>
</div>
<div class="dialog" id="OrdReceivedInfoDialog" style="display: none; width: 470px;">
    <div class="inner" style="width: 470px;">
        <p class="text" id="OrdReceivedMSG" style="text-align: left; padding-left: 10px;">
        </p>
        <p class="text" style="text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="no" onclick="closeOrdReceiveInfoModel()">
                <img src="~/Content/images/yes.png" alt="ok" />Ok</a></p>
    </div>
</div>
<div class="dialog" id="CloseOderDialog" style="display: none;">
    <div class="inner">
        <p class="text">
            Are you sure you want to close this order?</p>
        <a href="JavaScript:void(0)" id="bntStagingCloseConfirmYes" class="yes yesornooryes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes</a><a href="javascript:void(0)" class="no"
                onclick="closeModalCloseStagingOderDialog();">
                <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo</a>
    </div>
</div>
<script language="javascript" type="text/javascript">

    var OrdID = '@Model.ID';
    var oTableReceiveStagingOrderLineItems;
    var bIsReceiveFilter = false;
    var NotAllowedCharCodes = [9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40];
    var anOpen = [];

    function closeOrdReceiveInfoModel() {
        $.modal.impl.close();
    }

    $('#btnStagingReceiveALL').click(function () {
        $('#RecieveStagingOrderLineItem' + OrdID + ' tbody tr').each(function (i) {
            $(this).removeAttr('style');
        });


        $('#OrdReceiveProcessing').modal();
        $('#OrdReceiveProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');

        ReceiveAllItemOnbyOne();
        return false;
    });

    function ReceiveAllItemOnbyOne() {

        var errorMsg = '';
        var iserror = 0;
        var ErrorSrNo = 0;
        var duration = 500;
        $('#RecieveStagingOrderLineItem' + OrdID + ' tbody tr').each(function (i) {
            var tr = $(this);
            setTimeout(function () {
                var arr = new Array();
                var id = $(tr).find('#hdnID').val();
                var itemNumber = $(tr).find('#hdnItemNumber').val();
                var DOCtrack = $(tr).find('#hdnItemDOCTrack').val();
                var LOTTrack = $(tr).find('#hdnItemLOTTrack').val();
                var SRTrack = $(tr).find('#hdnItemSRTrack').val();
                var ReqQty = $(tr).find('#spnRequestedQty').text();
                var ApprQty = $(tr).find('#spnApprovedQty').text();
                var RecvQty = $(tr).find('#spnReceivedQty').text();
                var qty = $(tr).find("#txtReceiveStagingQty" + id).val();
                var trcolor = '';
                duration = 500;


                if (SRTrack == "False") {

                    var ItemGUID = $(tr).find('#hdnItemGUID').val();
                    var itemType = $(tr).find('#hdnItemType').val();
                    var binID = $(tr).find('#ddlStagingReceiveBin' + id).val();
                    var ordDetailId = $(tr).find('#hdnGUID').val();
                    var idtype = ItemGUID + '#' + itemType + '#' + ordDetailId + '#' + binID;
                    var receiveDate = $(tr).find("#txtStagingReceiveDate" + id).val();
                    var cost = $(tr).find("#txtStagingCostBox" + id).val();


                    var lotnumber = "";
                    var expireDATE = "";

                    if (parseFloat(qty) != NaN && parseFloat(qty) > 0) {
                        if (parseInt(binID) != NaN && parseInt(binID) > 0) {

                            if (DOCtrack == 'False' && LOTTrack == "False") {
                                var obj = { LotNumber: lotnumber, ExpirationDate: expireDATE, Quantity: qty, OrderDetailID: ordDetailId.toString(), LocationID: binID, ReceiveDate: receiveDate, Cost: cost };
                                arr.push(obj);
                            }
                            else if (DOCtrack == 'True' && LOTTrack == "True") {
                                expireDATE = $(tr).find("#txtStagingExpireDate" + id).val();
                                lotnumber = $(tr).find("#txtStagingLotNumber" + id).val();
                                if (expireDATE.trim() == '' && lotnumber.trim() == '') {
                                    iserror = 1;
                                    ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                    errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': Expire date and Lotnumber are mandatory. </b> <br />';
                                    //$(tr).css('background-color', 'Olive');
                                    trcolor = 'Olive';

                                }
                                else if (expireDATE.trim() == '') {
                                    iserror = 1;
                                    ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                    errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': Expire date is mandatory.  </b> <br />';

                                    trcolor = 'Olive';
                                }
                                else if (lotnumber.trim() == '') {
                                    iserror = 1;
                                    ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                    errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': Lotnumber is mandatory.  </b> <br />';
                                    trcolor = 'Olive';
                                }
                                else {
                                    var obj = { LotNumber: lotnumber, ExpirationDate: expireDATE, Quantity: qty, OrderDetailID: ordDetailId.toString(), LocationID: binID, ReceiveDate: receiveDate, Cost: cost };
                                    arr.push(obj);
                                    trcolor = 'Green';
                                }

                            }
                            else if (DOCtrack == 'True' && LOTTrack == "False") {
                                expireDATE = $(tr).find("#txtStagingExpireDate" + id).val();
                                if (expireDATE.trim() == '') {
                                    iserror = 1;
                                    ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                    errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': Expire date is mandatory.  </b> <br />';
                                    trcolor = 'Olive';
                                }
                                else {
                                    var obj = { LotNumber: lotnumber, ExpirationDate: expireDATE, Quantity: qty, OrderDetailID: ordDetailId.toString(), LocationID: binID, ReceiveDate: receiveDate, Cost: cost };
                                    arr.push(obj);
                                }
                            }
                            else if (LOTTrack == "True" && DOCtrack == 'False') {
                                lotnumber = $(tr).find("#txtStagingLotNumber" + id).val();
                                if (lotnumber.trim() == '') {
                                    iserror = 1;
                                    ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                    errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': Lotnumber is mandatory.  </b> <br />';
                                    trcolor = 'Olive';
                                }
                                else {
                                    var obj = { LotNumber: lotnumber, ExpirationDate: expireDATE, Quantity: qty, OrderDetailID: ordDetailId.toString(), LocationID: binID, ReceiveDate: receiveDate, Cost: cost };
                                    arr.push(obj);
                                }
                            }
                        }
                        else {
                            if (parseInt(binID) == NaN || parseInt(binID) <= 0) {
                                iserror = 1;
                                ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': Location is mandatory.  </b> <br />';
                                trcolor = 'Olive';
                            }
                        }
                    }
                    else {
                        if (parseFloat(ApprQty) > 0) {
                            if (parseFloat(RecvQty) != NaN && (parseFloat(ApprQty) - parseFloat(RecvQty)) > 0) {
                                iserror = 1;
                                ErrorSrNo = parseInt(ErrorSrNo) + 1;
                                errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': Receivable Qty is zero or not define.  </b> <br />';
                                trcolor = 'Olive';
                            }
                            else {
                                trcolor = '#85CEE6';
                            }
                        }
                        else {
                            iserror = 1;
                            ErrorSrNo = parseInt(ErrorSrNo) + 1;
                            errorMsg = errorMsg + '<b style="color: Olive;">' + ErrorSrNo + ') ' + itemNumber + ': Approved Qty is zero or not define.  </b> <br />';
                            trcolor = 'Olive';
                        }
                    }
                }
                else {
                    iserror = 1
                    ErrorSrNo = parseInt(ErrorSrNo) + 1;
                    errorMsg = errorMsg + '<b style="color: #FF9933;">' + ErrorSrNo + ') ' + itemNumber + ': Serial tracking. click to inline receive button. </b> <br />';
                    trcolor = '#FF9933';
                }

                if (arr.length > 0) {
                    //duration = 10;
                    $.ajax({
                        url: '@Url.Content("~/Order/ReceiveStagingOrderItemOneByOne")',
                        data: JSON.stringify(arr[0]),
                        dataType: 'json',
                        contentType: 'application/json',
                        type: 'POST',
                        async: false,
                        success: function (json) {
                            isDirtyForm = false;
                            var SRTrack = $(tr).find('#hdnItemSRTrack').val();
                            if (SRTrack == "False") {
                                var id = $(tr).find('#hdnID').val();
                                var DOCtrack = $(tr).find('#hdnItemDOCTrack').val();
                                if (DOCtrack == "True") {
                                    $(tr).find("#txtStagingExpireDate" + id).val("");
                                }
                                var LOTTrack = $(tr).find('#hdnItemLOTTrack').val();
                                if (LOTTrack == "True") {
                                    $(tr).find("#txtStagingLotNumber" + id).val("");
                                }
                                var ReqQty = $(tr).find('#spnRequestedQty').text();
                                var ApprQty = $(tr).find('#spnApprovedQty').text();
                                var qnty = $(tr).find("#txtReceiveStagingQty" + id).val();
                                var RecvQty = $(tr).find('#spnReceivedQty').text();


                                if (isNaN(parseFloat(RecvQty)))
                                    RecvQty = 0;

                                RecvQty = parseFloat(RecvQty) + parseFloat(qnty);

                                var onHndQty = $(tr).find('#spnOnStageQty').text();

                                if (isNaN(parseInt(onHndQty)))
                                    onHndQty = 0;

                                onHndQty = parseFloat(onHndQty) + parseFloat(qnty);
                                $(tr).find('#spnOnStageQty').text(onHndQty);


                                $(tr).find('#spnReceivedQty').text(RecvQty);
                                if (parseFloat(ApprQty) - parseFloat(RecvQty) > 0)
                                    $(tr).find("#txtReceiveStagingQty" + id).val(parseFloat(ApprQty) - parseFloat(RecvQty));
                                else
                                    $(tr).find("#txtReceiveStagingQty" + id).val("0");

                            }

                            trcolor = "green";
                        },
                        error: function (xhr) {
                            iserror = 1;
                            trcolor = 'Red';
                            ErrorSrNo = parseInt(ErrorSrNo) + 1;
                            errorMsg = errorMsg + '<b style="color: Red;">' + ErrorSrNo + ') Searver error occured!!  </b> <br />';
                        }

                    });
                }
                else {
                    iserror = 1;
                }

                $(tr).css('background-color', trcolor);
            }, duration * i);
        });

        setTimeout(function () {
            if (iserror >= 1) {
                closeOrdReceiveInfoModel();
                errorMsg = '<b>Some of the Item(s) is(are) not able to receive, due to following reasons.</b><br />' + errorMsg;
                $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html(errorMsg);
                //$('#RecieveOrderLineItem' + OrdID).dataTable().fnDraw();
                $('#OrdReceivedInfoDialog').modal();

            }
            else {
                closeOrdReceiveInfoModel();
                errorMsg = '<b>Order Received success fully</b><br />'
                $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html(errorMsg);
                //$('#RecieveOrderLineItem' + OrdID).dataTable().fnDraw();
                $('#OrdReceivedInfoDialog').modal();
            }
        }, 5000);
        return false;

    }

    function ShowHideInnerGrid(ctrl, id) {
        $('#DivLoading').show();
        var tr = $('#tr_' + id);
        var nTr = tr[0];
        var i = $.inArray(nTr, anOpen);
        var dtTable = $('#RecieveStagingOrderLineItem' + OrdID).dataTable();
        if (i === -1) {
            $('img', ctrl).attr('src', sImageUrl + "drildown_close.jpg");
            dtTable.fnOpen(nTr, fnFormatDetails(dtTable, nTr), '');
            anOpen.push(nTr);
        }
        else {

            $('img', ctrl).attr('src', sImageUrl + "drildown_open.jpg");
            dtTable.fnClose(nTr);
            anOpen.splice(i, 1);
            //  dtTable.fnDraw();
            $('#DivLoading').hide();
        }
    }

    function fnFormatDetails(oTable, nTr) {
        var oData = oTable.fnGetData(nTr);
        var sOut = '';
        var ItemGUID = $(nTr).find('#hdnItemGUID').val();
        var GUId = $(nTr).find('#hdnGUID').val();
        ItemUniqueGUID = ItemGUID;
        $('#DivLoading').show();
        $.ajax({
            "url": '@Url.Content("~/Order/ReceivedOrderDetail")',
            data: { 'ItemGUID': ItemGUID, 'ordDetailGUID': GUId },
            "async": false,
            cache: false,
            "dataType": "text",
            "success": function (json) {
                sOut = json;
                $('#DivLoading').hide();
            },
            error: function (response) {
            }
        });

        return sOut;
    }

    function isDuplicateLot(txtLot, id) {
        if ($(txtLot).val() != '') {
            $('#DivLoading').show();
            $('#RecieveStagingOrderLineItem' + OrdID + ' tbody tr').each(function () {
                var LOTTrack = $(this).find('#hdnItemLOTTrack').val();
                if (LOTTrack == "True") {
                    var trid = $(this).find('#hdnID').val();
                    var txtStagingLotNumber = $(this).find("#txtStagingLotNumber" + trid);
                    if (txtLot.id != $(txtStagingLotNumber)[0].id && $(txtLot).val() == txtStagingLotNumber.val()) {
                        $(txtLot).val('');
                        $('#DivLoading').hide();
                        alert('Duplicate Lot Number Found');
                        $(txtLot).focus();
                        return false;
                    }
                }
            });
        }
        if ($(txtLot).val() != '') {
            $.ajax({
                "url": '@Url.Content("~/Inventory/DuplicateCheckLotNumber")',
                data: { LotNumber: $(txtLot).val(), ID: id },
                "async": false,
                cache: false,
                "dataType": "text",
                "success": function (response) {
                    if (response == "duplicate") {
                        alert('Duplicate Lot Number Found');
                        $(txtLot).val('');
                        $(txtLot).focus();
                        $('#DivLoading').hide();
                        return false;
                    }
                    else {
                        $('#DivLoading').hide();
                        return false;
                    }
                },
                error: function (response) {
                    $('#DivLoading').hide();
                    $("#spanGlobalMessage").text(response);
                }
            });
        }
        else {
            return true;
        }
    }



    function closeModalCloseStagingOderDialog() {
        $.modal.impl.close();
    }
    $('#btnStagingCloseOrder').click(function () {
        $('#CloseOderDialog').modal();
    });

    $('#bntStagingCloseConfirmYes').click(function () {
        $.ajax({
            'url': 'UpdateOrderToClose',
            'data': { 'OrderID': '@Model.ID' },
            'success': function (result) {
                closeModalCloseStagingOderDialog();
                FillRedCount();
                SwitchOrderTab('OrderCreate', 'frmOrder');
            },
            'error': function (result) {
                closeModalCloseStagingOderDialog();
                alert('error');
            }

        });
    });
    //    $('#btnStagingReceiveALL').click(function () {
    //        $('#DivLoading').show();
    //        var arr = new Array();
    //        var iserror = 0;
    //        $('#RecieveStagingOrderLineItem' + OrdID + ' tbody tr').each(function () {
    //            var tr = $(this);
    //            var id = $(tr).find('#hdnID').val();

    //            var DOCtrack = $(tr).find('#hdnItemDOCTrack').val();
    //            var LOTTrack = $(tr).find('#hdnItemLOTTrack').val();
    //            var SRTrack = $(tr).find('#hdnItemSRTrack').val();
    //            if (SRTrack == "False") {
    //                var ItemGUID = $(tr).find('#hdnItemGUID').val();
    //                var itemType = $(tr).find('#hdnItemType').val();
    //                var binID = $(tr).find('#ddlStagingReceiveBin' + id).val();
    //                var ordDetailId = $(tr).find('#hdnGUID').val();
    //                var idtype = ItemGUID + '#' + itemType + '#' + ordDetailId + '#' + binID;


    //                var receiveDate = $(tr).find("#txtStagingReceiveDate" + id).val();
    //                var cost = $(tr).find("#txtStagingCostBox" + id).val();
    //                var qty = $(tr).find("#txtReceiveStagingQty" + id).val();

    //                var lotnumber = "";
    //                var expireDATE = "";

    //                if (parseInt(binID) == NaN || parseInt(binID) <= 0) {
    //                    alert('please select location');
    //                    $('#DivLoading').hide();
    //                    $(tr).find("#ddlStagingReceiveBin" + id).focus();
    //                    iserror = 1;
    //                    return false;
    //                }


    //                if (DOCtrack == 'True') {
    //                    expireDATE = $(tr).find("#txtStagingExpireDate" + id).val();
    //                    if (expireDATE.trim() == '') {
    //                        alert('please select expire date');
    //                        iserror = 1;
    //                        $(tr).find("#txtStagingExpireDate" + id).focus();
    //                        return false;
    //                    }
    //                }
    //                if (LOTTrack == "True") {
    //                    lotnumber = $(tr).find("#txtStagingLotNumber" + id).val();
    //                    if (lotnumber.trim() == '') {
    //                        alert('please enter lot number');
    //                        iserror = 1;
    //                        $(tr).find("#txtStagingLotNumber" + id).focus();
    //                        return false;
    //                    }
    //                }

    //                var obj = { LotNumber: lotnumber, ExpirationDate: expireDATE, Quantity: qty, OrderDetailID: ordDetailId.toString(), LocationID: binID, ReceiveDate: receiveDate, Cost: cost };
    //                arr.push(obj);
    //            }
    //        });

    //        if (iserror == 0) {
    //            SaveReceive(arr);
    //        }
    //        else {
    //            $('#DivLoading').hide();
    //        }
    //        return false;
    //    });

    function SingleStagingItemReceive(id) {
        $('#DivLoading').show();
        var tr = $('#tr_' + id);
        var SRTrack = $(tr).find('#hdnItemSRTrack').val();
        if (SRTrack == "False") {
            var ItemGUID = $(tr).find('#hdnItemGUID').val();
            var itemType = $(tr).find('#hdnItemType').val();
            var binID = $(tr).find('#ddlStagingReceiveBin' + id).val();
            var ordDetailId = $(tr).find('#hdnGUID').val();
            var idtype = ItemGUID + '#' + itemType + '#' + ordDetailId + '#' + binID;
            var DOCtrack = $(tr).find('#hdnItemDOCTrack').val();
            var LOTTrack = $(tr).find('#hdnItemLOTTrack').val();

            var receiveDate = $(tr).find("#txtStagingReceiveDate" + id).val();
            var cost = $(tr).find("#txtStagingCostBox" + id).val();
            var qty = $(tr).find("#txtReceiveStagingQty" + id).val();
            var arr = new Array();
            var lotnumber = "";
            var expireDATE = "";

            if (parseInt(binID) == NaN || parseInt(binID) <= 0) {
                alert('please select location');
                $('#DivLoading').hide();
                $(tr).find("#ddlStagingReceiveBin" + id).focus();
                return false;

            }
            if (DOCtrack == 'True') {
                expireDATE = $(tr).find("#txtStagingExpireDate" + id).val();
                if (expireDATE.trim() == '') {
                    alert('please select expire date');
                    $('#DivLoading').hide();
                    $(tr).find("#txtStagingExpireDate" + id).focus();
                    return false;
                }
            }
            if (LOTTrack == "True") {
                lotnumber = $(tr).find("#txtStagingLotNumber" + id).val();
                if (lotnumber.trim() == '') {
                    alert('please enter lot number');
                    $('#DivLoading').hide();
                    $(tr).find("#txtStagingLotNumber" + id).focus();
                    return false;
                }
            }

            var obj = { LotNumber: lotnumber, ExpirationDate: expireDATE, Quantity: qty, OrderDetailID: ordDetailId.toString(), LocationID: binID, ReceiveDate: receiveDate, Cost: cost };
            arr.push(obj);
            SaveReceive(arr);
        }
        else {

            $("#StagingForItemReceive").empty();
            var ItemGUID = $(tr).find('#hdnItemGUID').val();
            var itemType = $(tr).find('#hdnItemType').val();
            var binID = $(tr).find('#hdnBin').val();
            var ordDetailId = $(tr).find('#hdnGUID').val();
            var idtype = ItemGUID + '#' + itemType + '#' + ordDetailId + '#' + binID;
            var strData = { 'ItemID_ItemType': idtype };
            $('#StagingForItemReceive').data("cdata", strData).dialog('open');


            return false;
        }
        return false;
    }

    function SaveReceive(arr) {
        if (arr.length > 0) {
            $.ajax({
                url: '@Url.Content("~/Order/ReceiveStagingOrderItem")',
                data: { 'objDTO': JSON.stringify(arr) },
                dataType: 'json',
                type: 'POST',
                success: function (json) {
                    //$('#RecieveStagingOrderLineItem' + OrdID).dataTable().fnDraw();
                    isDirtyForm = false;
                    LoadReceiveTab("ReceivedOrder/" + OrdID, "frmReceiveOrder");
                    $('#DivLoading').hide();
                },
                error: function (xhr) {
                    $('#RecieveStagingOrderLineItem' + OrdID).dataTable().fnDraw();
                    $('#DivLoading').hide();
                }
            });
        }
        else
            $('#DivLoading').hide();
    }

    $(document).ready(function () {

        $("#StagingForItemReceive").dialog({ autoOpen: false, modal: true, draggable: true, resizable: true, width: '70%', height: 600, title: 'Item Locations',
            open: function () {
                $('#DivLoading').show();
                var strdata = $(this).data("cdata");
                $.get('@Url.Content("~/Inventory/LocationDetailsMS")', strdata, function (data) {
                    $("#StagingForItemReceive").html(data);
                    $('#DivLoading').hide();
                });
            },
            close: function () {
                CallThisFunctionFromModel('success');
                $("#StagingForItemReceive").empty();
            }
        });

        var ColumnObject = new Array();
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });

        var gaiSelected = [];
        oTableReceiveStagingOrderLineItems = $('#RecieveStagingOrderLineItem' + OrdID).dataTable({
            "bJQueryUI": true,
            "bRetrieve": true,
            "bDestroy": true,
            "bScrollCollapse": true,
            "sScrollX": "150%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[1, "desc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },

            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                if (!bIsReceiveFilter) {
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        data: { Data: JSON.stringify(oData), ListName: 'ReceiveStagingOrderLineItem' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = json;
                        }
                    });
                }
                bIsReceiveFilter = false;
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    data: { ListName: 'ReceiveStagingOrderLineItem' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            }
            , "aoColumns": ColumnObject
        });

        $('.DTTT_container').css('z-index', '-1');
        $('#btnblock').css({ 'margin-right': '45px' });

        $('#RecieveStagingOrderLineItem' + OrdID).delegate(".myDatePicker", "focusin", function () {
            $(this).datepicker({ dateFormat: 'm/d/yy' });
        });

        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormatSR").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 0
        });

        //        $('.text-boxPriceFormat').keydown(function (e) {
        //            var keyCode = e.which;
        //            if ($(this).val().indexOf('.') == -1 && keyCode != 8 && keyCode != 9 && keyCode != 13 && keyCode != 37 && keyCode != 38 && keyCode != 39 && keyCode != 40 && keyCode != 46 && keyCode != 110 && keyCode != 190) {
        //                if (keyCode < 48) {
        //                    e.preventDefault();
        //                }
        //                else if (keyCode > 57 && keyCode < 96) {
        //                    e.preventDefault();
        //                }
        //                else if (keyCode > 105) {
        //                    e.preventDefault();
        //                }
        //            }
        //            else if ($(this).val().indexOf('.') != -1) {
        //                if (keyCode != 8 && keyCode != 9 && keyCode != 13 && keyCode != 37 && keyCode != 38 && keyCode != 39 && keyCode != 40 && keyCode != 46) {
        //                    if (keyCode == 110) {
        //                        e.preventDefault();
        //                    }
        //                    else if (keyCode == 190) {
        //                        e.preventDefault();
        //                    }
        //                    else if (keyCode < 48) {
        //                        e.preventDefault();
        //                    }
        //                    else if (keyCode > 57 && keyCode < 96) {
        //                        e.preventDefault();
        //                    }
        //                    else if (keyCode > 105) {
        //                        e.preventDefault();
        //                    }
        //                    else {
        //                        var arrVal = $(this).val().split('.');
        //                        if (arrVal[1].length >= 3) {
        //                            e.preventDefault();
        //                        }
        //                    }
        //                }

        //            }
        //        });

        //        $('.text-boxQuantityFormat').keydown(function (e) {

        //            var keyCode = e.which; // Capture the event
        //            if ($(this).val().indexOf('.') == -1 && keyCode != 8 && keyCode != 9 && keyCode != 13 && keyCode != 37 && keyCode != 38 && keyCode != 39 && keyCode != 40 && keyCode != 46 && keyCode != 110 && keyCode != 190) {
        //                if (keyCode < 48) {
        //                    e.preventDefault();
        //                }
        //                else if (keyCode > 57 && keyCode < 96) {
        //                    e.preventDefault();
        //                }
        //                else if (keyCode > 105) {
        //                    e.preventDefault();
        //                }
        //            }
        //            else if ($(this).val().indexOf('.') != -1) {
        //                if (keyCode != 8 && keyCode != 9 && keyCode != 13 && keyCode != 37 && keyCode != 38 && keyCode != 39 && keyCode != 40 && keyCode != 46) {
        //                    if (keyCode == 110) {
        //                        e.preventDefault();
        //                    }
        //                    else if (keyCode == 190) {
        //                        e.preventDefault();
        //                    }
        //                    else if (keyCode < 48) {
        //                        e.preventDefault();
        //                    }
        //                    else if (keyCode > 57 && keyCode < 96) {
        //                        e.preventDefault();
        //                    }
        //                    else if (keyCode > 105) {
        //                        e.preventDefault();
        //                    }
        //                    else {
        //                        var arrVal = $(this).val().split('.');
        //                        if (arrVal[1].length >= 3) {
        //                            e.preventDefault();
        //                        }
        //                    }
        //                }

        //            }
        //        });

    });


    $('#PageNumber1').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#Gobtn1").click();
            return false;
        }
    });

    $("#Gobtn1").click(function () {
        var pval = $('#PageNumber1').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (pval == 0)
            return;

        $('#RecieveStagingOrderLineItem' + OrdID).dataTable().fnPageChange(Number(pval - 1));
        $('#PageNumber1').val('');
    });




    $(".searchBlock").on({
        keyup: function (e) {

            var code = (e.keyCode ? e.keyCode : e.which);
            var index = $.inArray(code, NotAllowedCharCodes);
            if (index >= 0) return false;

            fnFilterReciveOrderLineItem();
        },
        keydown: function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                fnFilterReciveOrderLineItem();
            }
        },
        paste: function (e) {
            setTimeout(function () {
                fnFilterReciveOrderLineItem();
            }, 50);
        },
        drop: function (e) {
            setTimeout(function () {
                fnFilterReciveOrderLineItem();
            }, 50);
        }
    }, "#StagingReceiveItem_filter");



    $(".xclose #ClearStagingSearchReceive").click(function () {
        $("#StagingReceiveItem_filter").val('');
        fnFilterReciveOrderLineItem();
        $("#StagingReceiveItem_filter").focus();
        return false;
    });

    /* global search function */
    function fnFilterReciveOrderLineItem() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#StagingReceiveItem_filter") != 'undefined' && ($("#StagingReceiveItem_filter").val().length > 2 || $("#StagingReceiveItem_filter").val().length == 0)) {

            bIsReceiveFilter = true;
            var searchtext = $("#StagingReceiveItem_filter").val().replace(/'/g, "''");
            $('#RecieveStagingOrderLineItem' + OrdID).dataTable().fnFilter(
                            searchtext,
                            null,
                            null,
                            null
                        );

            $('#RecieveStagingOrderLineItem' + OrdID + ' td').removeHighlight();

            if (searchtext.length > 0)
                $('#RecieveStagingOrderLineItem' + OrdID + ' td').highlight($("#StagingReceiveItem_filter").val());
        }
    }


    function UpdateReceiveQty(OrdDetailGUID) {
        $.ajax({
            'url': '@Url.Content("~/Order/GetReceivedQuantity")',
            'data': { 'OrderDetailGUID': OrdDetailGUID },
            "async": true,
            'success': function (response) {
                if (response.Status = "ok") {
                    $('#tr_' + response.ReturnDTO.ID).find("#spnReceivedQty").text(response.ReturnDTO.ReceivedQuantity);
                }
            }
        });
    }
</script>
