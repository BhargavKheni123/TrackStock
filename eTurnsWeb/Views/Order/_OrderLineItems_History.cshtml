@model eTurns.DTO.OrderMasterDTO
@{
    GridHeaderSettings settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplaySaveButton = false, DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = false, DisplayColumnSetupButton = true, DisplayContextMenu = false, DisplayPrintBlock = true, DisplayDeleteButton = false, DataTableName = "OrderLineItem" + Model.ID };
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
}
<div class="userListingWrapper">
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99.5%">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search</span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="InnerItem_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_QLItem_filter" /></a>
                    </div>
                </div>
                <input type="button" id="btnDiv" value="Div" style="visibility: hidden" />
            </div>
            @Html.QuickListItemsGridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Orders)
            <div class="userContentInnerGrid" style="width: 99% !important; margin-left: 5px !important;
                float: left;">
                <table id="OrderLineItem@(Model.ID)" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.HistoryID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Action
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.ItemNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.Bin
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.RequestedQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.ApprovedQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.RequiredDate
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.ReceivedQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Description
                            </th>
                            <th>
                                @eTurns.DTO.ResUnitMaster.Unit
                            </th>
                            <th>
                                @eTurns.DTO.ResGLAccount.GLAccount
                            </th>
                            @if (isCost)
                            {
                                <th>
                                    @eTurns.DTO.ResItemMaster.Cost
                                </th>
                            }
                            <th>
                                @eTurns.DTO.ResSupplierMaster.Supplier
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.OnOrderQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.InTransitquantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.MinimumQuantity
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.MaximumQuantity
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.OrderListItem != null && Model.OrderListItem.Count > 0)
                        {
                            foreach (var item in Model.OrderListItem)
                            { 
                            <tr>
                                <td>@item.HistoryID
                                </td>
                                <td>@item.Action
                                </td>
                                <td>@item.ID
                                </td>
                                <td>@item.ItemNumber
                                </td>
                                <td>
                                    @if (Model.StagingID.GetValueOrDefault(0) <= 0 && String.IsNullOrEmpty(Model.CustomerAddress))
                                    {
                                        @item.BinName
                                    }
                                    else if (Model.StagingID.GetValueOrDefault(0) > 0)
                                    {
                                        @Model.StagingName
                                    }
                                </td>
                                <td>
                                    @(item.RequestedQuantity)
                                </td>
                                <td>
                                    @(item.ApprovedQuantity)
                                </td>
                                <td>
                                    @item.RequiredDate.GetValueOrDefault(Model.RequiredDate).ToString(eTurnsWeb.Helper.SessionHelper.RoomDateFormat)
                                </td>
                                <td>
                                    @item.ReceivedQuantity
                                </td>
                                <td>
                                    @item.ItemDescription
                                </td>
                                <td>
                                    @item.Unit
                                </td>
                                <td>
                                    @item.GLAccount
                                </td>
                                @if (isCost)
                                {
                                    <td>
                                        @item.Cost
                                    </td>
                                }
                                <td>
                                    @item.SupplierName
                                </td>
                                <td>
                                    @item.OnOrderQuantity
                                </td>
                                <td>
                                    @item.OnOrderInTransitQuantity
                                </td>
                                <td>
                                    @item.MinimumQuantity
                                </td>
                                <td>
                                    @item.MaximumQuantity
                                </td>
                                <td>
                                    @item.AddedFrom
                                </td>
                                <td>
                                    @item.EditedFrom
                                </td>
                                <td>
                                    @item.ReceivedOnDateWeb
                                </td>
                                <td>
                                    @item.ReceivedOnDate
                                </td>
                            </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var OrdID = '@Model.ID';
    var OrdStatus = '@Model.OrderStatus';
    var NotAllowedCharCodes = [9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40];
    var oTableOrderLineItems;
    var bIsFilter = false;
    var DTName = 'OrderLineItem' + OrdID

    $(document).ready(function () {
        var ColumnObject = new Array();
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });

        @*if ('@Model.StagingID.GetValueOrDefault(0)' <= 0) {
            ColumnObject.push({ bSortable: false });
        }
        else {*@
            ColumnObject.push({ "bSortable": true });
        //}

        ColumnObject.push({ "bSortable": false }); //, "sSortDataType": "dom-text", "sType": "numeric" });
        ColumnObject.push({ "bSortable": false });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });
        ColumnObject.push({ "bSortable": true });

        var gaiSelected = [];
        oTableOrderLineItems = $('#OrderLineItem' + OrdID).dataTable({
            "bJQueryUI": true,
            "bRetrieve": true,
            "bDestroy": true,
            "bScrollCollapse": true,
            "sScrollX": "150%",
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[0, "desc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },

            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                if (!bIsFilter) {
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'OrderLineItemListHistory' },
                        "async": true,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = json;
                        }
                    });
                }
                bIsFilter = false;
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'OrderLineItemListHistory' },
                    "async": true,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            }
            /*, "aoColumns": ColumnObject*/
        });

        $('.DTTT_container').css('z-index', '-1');

        $('#btnblock').css({ 'margin-right': '45px' });

        $.fn.dataTableExt.afnSortData['dom-text'] = function (oSettings, iColumn) {
            var aData = [];
            $('td:eq(' + iColumn + ') input', oSettings.oApi._fnGetTrNodes(oSettings)).each(function () {
                aData.push(this.value);
            });
            return aData;
        }
    });



    $('select', '#OrderLineItem' + OrdID)
            .attr('disabled', 'disabled');

    $(':input[type=text], textarea', '#OrderLineItem' + OrdID)
            .attr('readonly', 'readonly');

    $('#OrderLineItem' + OrdID + ' tbody tr').die('tap click');

    $('#Gobtn1').unbind("click");
    $('#clear_QLItem_filter').unbind("click");
    $('#PageNumber1').unbind("keydown");

    $('#OrderLineItem' + OrdID + ' tbody tr').live('tap click', function () {
        $(this).toggleClass('row_selected');
        return false;
    });

    $('#PageNumber1').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $("#Gobtn1").click();
            return false;
        }
    });

    $("#Gobtn1").click(function () {
        var pval = $('#PageNumber1').val();
        if (pval == "" || pval.match(/[^0-9]/)) {
            return;
        }
        if (pval == 0)
            return;

        $('#OrderLineItem' + OrdID).dataTable().fnPageChange(Number(pval - 1));
        $('#PageNumber1').val('');
    });

    /* global search function */
    function fnFilterOrderLineItemsHistory() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#InnerItem_filter") != 'undefined' && ($("#InnerItem_filter").val().length > 2 || $("#InnerItem_filter").val().length == 0)) {
            //if (typeof $("#InnerItem_filter") != 'undefined') {
            bIsFilter = true;
            var searchtext = $("#InnerItem_filter").val().replace(/'/g, "''");
            $('#' + DTName).dataTable().fnFilter(
                searchtext,
                null,
                null,
                null
            );
            $('#' + DTName + ' td').removeHighlight();

            if (searchtext.length > 0)
                $('#' + DTName + ' td').highlight($("#InnerItem_filter").val());
        }
    }


    //Apply filter
    $("#InnerItem_filter").keyup(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        //var index = $.inArray(code, NotAllowedCharCodes);
        if (code == 13) {
            fnFilterOrderLineItemsHistory();
        }
    });

    //Keydown event is required to handle ENTER KEY to work in IE
    $("#InnerItem_filter").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            fnFilterOrderLineItemsHistory();
        }
    });

    //Clear Filter
    $("#clear_QLItem_filter").click(function () {
        $("#InnerItem_filter").val('');
        fnFilterOrderLineItemsHistory();
        $("#InnerItem_filter").focus();
        return false;
    });
    var timeoutscheduler;
    $(document).on('propertychange input', "#InnerItem_filter", function () {
        clearTimeout(timeoutscheduler);
        var self = this;
        timeoutscheduler = setTimeout(function () {
            if (SearchPattern == 2 || SearchPattern == "2") {
                fnFilterOrderLineItemsHistory();
            }
            else {
                $('#InnerItem_filter').unbind("keypress");
                $('#InnerItem_filter').keypress(function (event) {
                    var keycode = (event.keyCode ? event.keyCode : event.which);
                    if (keycode == 13) {
                        fnFilterOrderLineItemsHistory();
                    }
                });
                if ($("#InnerItem_filter").val().length == 0) {
                    setTimeout(function () { fnFilterOrderLineItemsHistory(); }, 200);
                }
            }
        }, 500);
    });
</script>
