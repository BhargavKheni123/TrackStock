@model eTurns.DTO.OrderMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Orders, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
}
<div class="userHead">
    @using (Ajax.BeginForm("SaveReceiveOrder", "Order", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmReceiveOrder" }))
    {                                
        @Html.ValidationSummary(true)     
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.OrderNumber)
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.OrderStatus)
                    </label>
                    : <span>@Model.OrderNumber</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Comment)
                    </label>
                    : <span>@Model.Comment</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.ShippingMethod)
                    </label>
                    : <span>@Model.ShippingMethod</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.StagingName)
                    </label>
                    : <span>@Model.StagingName</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.ReleaseNumber)
                    </label>
                    : <span>@Model.ReleaseNumber</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.PackSlipNumber)
                    </label>
                    : <span>@Model.PackSlipNumber</span> </li>
                @*<li>
                    @foreach (var i in ViewBag.UDFs)
                    {

                        string UDFColumnName = eTurnsWeb.Helper.ResourceUtils.GetResource(Model.GetType().Name, (string)i.UDFColumnName);

                        if (!i.IsDeleted && !String.IsNullOrEmpty(i.UDFControlType))
                        {
                        <div class="editor-label">
                            @Html.Label(UDFColumnName)
                        </div>   <div class="colDiv">
                            :</div>
                        <div class="editor-field">
                            <span></span>
                        </div>
                        }
                    }
                </li>*@ @* <li>@Html.Partial("UDFLayout") </li>*@
            </ul>
        </div>
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RequiredDate)
                    </label>
                    : <span>@Model.RequiredDate</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.ShipVia)
                    </label>
                    : <span>@Model.ShipViaName</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Supplier)
                    </label>
                    : <span>@Model.SupplierName</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.OrderStatus)
                    </label>
                    : <span>@Model.OrderStatusText</span> @*@Html.DropDownListFor(model => model.OrderStatus, new SelectList(ViewBag.OrderStatusList, "value", "Text", Model.OrderStatus), new { id = "ddlOrderStatus", @class = "selectBox" })
                            @Html.ValidationMessageFor(model => model.OrderStatus)*@ </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Customer)
                    </label>
                    : <span>@Model.Customer</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.ShippingTrackNumber)
                    </label>
                    : <span>@Model.ShippingTrackNumber</span> </li>
            </ul>
        </div>
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    :<span>@(Model.Created)</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.LastUpdated)
                    </label>
                    : <span>@(Model.LastUpdated)</span> </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span> </li>
            </ul>
        </div>
        <div class="mainForm" style="padding: 0px;">
            <ul>
                <li>
                    <div class="BtnBlockform">
                        <input type="button" style="margin:0px;" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                    </div>
                </li>
            </ul>
        </div>
        <div class="mainForm" style="padding: 0px;">
            <ul>
                <li>&nbsp;</li>
            </ul>
        </div>
        <div id="divReceiveOrderLineItems">
        </div>
    }
</div>
<script language="javascript" type="text/javascript">
    $("form").submit(function (e) {
        $(':input', '#frmReceiveOrder')
            .not('#btnCancel, #btnSave, #ddlOrderStatus')
            .removeAttr('disabled');
        $.validator.unobtrusive.parse("#frmReceiveOrder");
        if ($(this).valid()) { } e.preventDefault();

    });

    $('#btnSave').click(function () {
        var arrItems = new Array();
        $('#ReceiveOrderLineItem' + ItemUniqueID + ' tbody tr').each(function () {
            var tr = $(this);
            var txtRecQty = tr.find('#txtCurrentReceiveQty');
            var RecQty = txtRecQty.val();
            var RecDate = tr.find('.myDatePicker').val();
            var RecBin = tr.find('#ddlReceiveOrdBin').val();
            var OrderDetailId = tr.find('#spnID').text();
            var itemNumber = tr.find('#spnItemNummber').text();

            if (parseFloat(RecQty) > 0 && parseInt(RecBin) && Date.parse(RecDate) >= Date.parse('@Model.Created') && new Date(RecDate) <= new Date()) {
                var obj = { ReceiveBin: RecBin, ReceiveDate: RecDate, ReceiveQuantity: RecQty, ID: OrderDetailId };
                arrItems.push(obj);
            }
            else {
                arrItems = {};
                $('div#target').fadeToggle();
                $("div#target").delay(2000).fadeOut(200);
                $("#spanGlobalMessage").text("Not proper value selected for item:" + itemNumber);
            }
        });

        if (arrItems.length != undefined && arrItems.length > 0) {
            var objOrdMaster = { ID: '@Model.ID', OrderStatus: '@Model.OrderStatus', Room: '@Model.Room', CompanyID: '@Model.CompanyID' };
            $.ajax({
                url: '@Url.Content("~/Order/SaveReceiveLineItem")'
                        , type: 'POST'
                        , data: { 'Params': JSON.stringify(arrItems), 'OrdMasterParams': JSON.stringify(objOrdMaster), 'IsSaveAll': true }
                        , success: function (response) {
                            $('div#target').fadeToggle();
                            $("div#target").delay(2000).fadeOut(200);
                            if (response.Status == 'ok') {
                                $("#spanGlobalMessage").text(response.Message);
                                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                                SwitchTab(0, 'OrderCreate', 'frmOrder');
                                $('.tab3').hide();
                                $('#divReceiveOrderLineItems').empty();
                                oTable.fnDraw();

                            }
                            else {
                                $("#spanGlobalMessage").text(response.Message);
                            }
                        }
                        , error: function (xhr) {
                            $('div#target').fadeToggle();
                            $("div#target").delay(2000).fadeOut(200);
                            $("#spanGlobalMessage").text("Error");
                        }
            });
        }
    });

    function onSuccess(response) {
        IsRefreshGrid = true;
        IsRefreshGrid1 = true;
        $('div#target').fadeToggle();
        $("div#target").delay(2000).fadeOut(200);
        $("#spanGlobalMessage").text(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {

            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#Name").val("");
            $("#Name").focus();
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#Name").val("");
                $("#Name").focus();
            }
            else {
                if (oTable !== undefined && oTable != null)
                    oTable.fnDraw();

                SwitchTab(0, 'OrderCreate', 'frmReceiveOrder');
                ClearReceiveSessionOrderItem();

            }
        }

    }
    function onFailure(message) {
        $("#spanGlobalMessage").text(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(2000).fadeOut(200);
        $("#Name").focus();
    }



    $(document).ready(function () {
        $(':input', '#frmReceiveOrder')
        .not('#btnCancel, #btnSave')
        .attr('disabled', 'disabled');
        $('#DivLoading').show();
        $('#divReceiveOrderLineItems').load('@Url.Action("LoadReceiveOrderLineItems", new { orderID = @Model.ID })', function () {
        });

        $('#btnCancel').click(function (e) {
            $('#divReceiveOrderLineItems').empty();
            $('#atab7').click();
        });

    });

    function ClearReceiveSessionOrderItem() {
        $.ajax({
            "url": '@Url.Content("~/Order/ClearReceiveOrderSession")',
            "async": false,
            cache: false,
            "dataType": "json",
            "success": function (json) {
                //o = JSON.parse(json.jsonData);
            }
        });
    }

</script>
