@model eTurns.DTO.OrderMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
<div class="userHead">
    @{
        bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Orders, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Orders, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        bool isApprove = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OrderApproval, eTurnsWeb.Helper.SessionHelper.PermissionType.Approval);         
    }
    @using (Ajax.BeginForm("SaveOrder", "Order", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmOrder" }))
    {                                
        @Html.ValidationSummary(true)     
        if (Model.ID != 0)
        {        
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.Created)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.LastUpdated)
                    </label>
                    : <span>@(Model.LastUpdated)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        } 
                
        <div class="mainForm">
            <div class="editorForm">
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.OrderNumber)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.OrderNumber, new { id = "txtOrderNumber", @class = "text-box", maxlength = 255 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.OrderNumber)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.LastUpdated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Comment)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.Comment, new { @class = "text-box", maxlength = 1024 })
                            @Html.ValidationMessageFor(model => model.Comment)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.StagingName)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.StagingName)
                            @Html.ValidationMessageFor(model => model.StagingName)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ReleaseNumber)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.ReleaseNumber)
                            @Html.ValidationMessageFor(model => model.ReleaseNumber)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PackSlipNumber)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.PackSlipNumber)
                            @Html.ValidationMessageFor(model => model.PackSlipNumber)
                        </div>
                    </li>
                    @Html.Partial("UDFLayout")
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                            @if ((isInsert == true && Model.ID == 0) || (isUpdate == true && Model.ID > 0))
                            {                            
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />                            
                            }
                        </div>
                    </li>
                    <li>
                        <div class="BtnBlockform">
                            @if ((isInsert == true && Model.ID == 0) || (isUpdate == true && Model.ID > 0))
                            {                            
                                <input type="button" value="@eTurns.DTO.ResOrder.AddNewItemButton" id="btnAddNewItem" class="CreateBtn" style="float: left;
                                    margin-left: 20px;" />
                            }
                        </div>
                    </li>
                </ul>
            </div>
            <div class="editorForm padRightNone">
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.RequiredDate)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.RequiredDate, new { @class = "text-box", id = "txtRequiredDate", maxlength = 128, @Value = Model.RequiredDate.ToString("MM/dd/yyyy") })
                            @Html.ValidationMessageFor(model => model.RequiredDate)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ShipVia)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.ShipVia, new SelectList(ViewBag.ShipViaList, "ID", "ShipVia", Model.ShipVia), new { id = "ddlShipVia", @class = "selectBox" })
                            @Html.ValidationMessageFor(model => model.ShipVia)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Supplier)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.Supplier, new SelectList(ViewBag.SupplierID, "ID", "Text", Model.Supplier), new { @class = "selectBox" })
                            @Html.ValidationMessageFor(model => model.Supplier)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.OrderStatus)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.OrderStatus, new SelectList(ViewBag.OrderStatusList, "value", "Text", Model.OrderStatus), new { id = "ddlOrderStatus", @class = "selectBox" })
                            @Html.ValidationMessageFor(model => model.OrderStatus)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CustomerName)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.CustomerID, new SelectList(ViewBag.CustomerList, "ID", "Customer", Model.CustomerID), new { id = "ddlCustomerList", @class = "selectBox" })
                            @Html.ValidationMessageFor(model => model.CustomerID)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ShippingTrackNumber)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.ShippingTrackNumber)
                            @Html.ValidationMessageFor(model => model.ShippingTrackNumber)
                        </div>
                    </li>
                    <li id="liReject" style="display: none;">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.RejectionReason)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.RejectionReason, new { @style = "-webkit-border-radius: 5px;-moz-border-radius: 5px;border-radius: 5px;behavior: url(pie1.htc);background: #fff;border: 1px solid #dddddd;width: 34%;padding: 5px;" })
                            @Html.ValidationMessageFor(model => model.RejectionReason)
                        </div>
                    </li>
                </ul>
            </div>
        </div>  
        <div id="divOrderLineItems">
        </div>
    }
    <div id="ItemModel">
    </div>
</div>
<script type="text/javascript">
    var NotAllowedCharCodes = [9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40];
    $("form").submit(function (e) {
        $(':input', '#frmOrder')
        .not('#btnCancel, #btnSave, #ddlOrderStatus')
        .removeAttr('disabled');
        $.validator.unobtrusive.parse("#frmOrder");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        } e.preventDefault();
    });

    $(document).ready(function () {
        $('#txtRequiredDate').on("keydown", function (e) {

            if (e.keyCode !== 9 && e.keyCode !== 46 && e.keyCode !== 13)
                return false;
        });
        $('#txtRequiredDate').blur(function () {
        }).datepicker({ dateFormat: 'm/d/yy' });

        $("#ItemModel").dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '82%',
            height: 710,
            title: '@eTurns.DTO.ResOrder.PageHeader',
            open: function () {
                $('#DivLoading').show();
                //$("#ItemModel").load('@Url.Action("LoadItemMasterModel", new { ParentId = @Model.ID })');
                $("#ItemModel").load('@Url.Action("LoadItemMasterModel")' + '?ParentId=@Model.ID' + '&supplierID=' + $('#Supplier').val());
            },
            close: function () {
                CallThisFunctionFromModel('success');
            }
        });

        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');

        if ('@Model.IsHistory' != 'True') {
            $('#btnCancel').click(function (e) {

                ClearSessionOrderItem();
                if (IsRefreshGrid)
                    $('#NarroSearchClear').click();
                SwitchTab(0, 'OrderCreate', 'frmOrder');
                if (oTable !== undefined && oTable != null)
                    oTable.fnDraw();


            });
            $('#DivLoading').show();

            $('#divOrderLineItems').load('@Url.Action("LoadOrderLineItems", new { orderID = @Model.ID, supplierID = @Model.Supplier })', function () {
            });
        }
        else {
            $('#DivLoading').show();
            $('#btnCancel').click(function (e) {
                $('.tab9').removeClass("tab9").addClass("tab1");
                $('#atab5').click();
            });

            $('#divOrderLineItems').load('@Url.Action("LoadOrderLineItemsHistory", new { historyID = @Model.HistoryID })', function () {
            });
        }

    });


    //    $('#Supplier').change(function (e) {
    //        ClearSessionOrderItem();
    //        CallThisFunctionFromModel('success');
    //    });

    $('#btnAddNewItem').click(function () {
        $('#ItemModel').dialog('open');
        return false;
    });

    function onSuccess(response) {
        IsRefreshGrid = true;
        IsRefreshGrid1 = true;

        $('div#target').fadeToggle();

        $("div#target").delay(2000).fadeOut(200);
        $("#spanGlobalMessage").text(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {

            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#Name").val("");
            $("#Name").focus();
        }
        else if (idValue == 0) {

            $("#Name").val("");
            $("#Name").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                clearControls('frmOrder');
                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                ClearSessionOrderItem();
                CallThisFunctionFromModel('success');
            }
        }
        else if (idValue > 0) {

            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#Name").val("");
                $("#Name").focus();
            }
            else {
                if (oTable !== undefined && oTable != null)
                    oTable.fnDraw();
                if (IsRefreshGrid)
                    $('#NarroSearchClear').click();
                SwitchTab(0, 'OrderCreate', 'frmOrder');
                ClearSessionOrderItem();
                CallThisFunctionFromModel('success');
                // window.location = window.location;
            }
        }

    }
    function onFailure(message) {
        $("#spanGlobalMessage").text(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(2000).fadeOut(200);
        $("#Name").focus();
    }

    function ClearSessionOrderItem() {
        $.ajax({
            "url": '@Url.Content("~/Order/ClearOrderSession")',
            "async": false,
            cache: false,
            "dataType": "json",
            "success": function (json) {
                //o = JSON.parse(json.jsonData);
            }
        });
    }

    $(document).ready(function () {

        if ('@Model.OrderStatus' != 0 && '@Model.OrderStatus' != 2) {
            $(':input', '#frmOrder')
        .not('#btnCancel, #btnSave, #ddlOrderStatus')
        .attr('disabled', 'disabled');

            // $(':input', '#divOrderLineItems').attr('disabled', 'disabled');
        }

        if ('@Model.IsHistory' == 'True') {
            $(':input', '#frmOrder')
        .not('#btnCancel')
        .attr('disabled', 'disabled');

            $('#btnSave, #btnAddNewItem').attr('style', 'display:none');
        }
        if ('@Model.ID' > 0)
            $('#txtOrderNumber').attr('disabled', 'disabled');

        $('#ddlOrderStatus').change(function () {
            if ($(this).val() == '@((int)eTurns.DTO.OrderStatus.Rejected)') {
                $('#liReject').attr('style', 'display:block');
                $('#RejectionReason').removeAttr('disabled');
            }
            else {
                $('#liReject').attr('style', 'display:none');
                $('#RejectionReason').attr('disabled', 'disabled');
            }
        });

        if ('@isApprove' == 'False' && '@Model.OrderStatus' >= 2) {
            $(':input', '#frmOrder')
            .not('#btnCancel, #btnSave')
            .attr('disabled', 'disabled');
            $('#btnSave, #btnAddNewItem').attr('style', 'display:none');
        }
    });

</script>
