@{
    ViewBag.Title = eTurns.DTO.ResOrder.PageTitle;
    OrderType OrdType = OrderType.Order;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowCloseButton = true, ShowSelectAll = true, DisplayUDFButton = true, UDFSetupFor = "OrderMaster&UDFHeader=" + @eTurns.DTO.ResOrder.PageHeader, DisplaySettings = true, DisplayColumnSetupButton = true, DisplayContextMenu = true, ColumnSetupFor = "OrderMasterList", DisplayDeleteButton = true, DisplayArchiveButton = true };

    if (HttpContext.Current.Request.Url.ToString().Contains("ReturnOrderList"))
    {
        OrdType = OrderType.RuturnOrder;
        ViewBag.Title = eTurns.DTO.ResOrder.PageTitleRO;
        settings.UDFSetupFor = "OrderMaster&UDFHeader=" + @eTurns.DTO.ResOrder.PageHeaderRO;
    }

    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "OrderMaster", ListName = "OrderMaster" };
    bool isInsert = false;
    bool isUpdate = false;

    if (OrdType == OrderType.Order)
    {
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Orders, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Orders, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    }
    else
    {
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ReturnOrder, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ReturnOrder, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);

    }
    bool isUncloseOrder = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowAnOrderToBeUnclose);
    bool isApproveList = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OrderApproval, eTurnsWeb.Helper.SessionHelper.PermissionType.Approval);
    bool isChangeOrder = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ChangeOrder, eTurnsWeb.Helper.SessionHelper.PermissionType.ChangeOrder);

    Session["IsInsert"] = "";
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    var sImageUrl = "/Content/images/";
    string OrdersPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Orders.pdf", DateTime.Now.Ticks);

    string ModuleName = "Orders";
    if (OrdType == OrderType.RuturnOrder)
    {
        OrdersPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/ReturnOrder.pdf", DateTime.Now.Ticks);
        ModuleName = "ReturnOrder";
    }

    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Orders, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    //HelpDocumentMasterDTO objHelpDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentMaster(ModuleName);
    //string OrderBasicVideo = "";
    //if (objHelpDTO != null)
    //{
    //    OrderBasicVideo = objHelpDTO.ModuleVideoPath.Replace("../Uploads/HelpVideo/", "");
    //}
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail(ModuleName, (int)HelpDocType.Module);
}
<style>
    .paginationBlock {
        float: left !important;
        position: absolute !important;
        right: 290px !important;
        top: -4px !important;
    }
</style>
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script type="text/javascript">
        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Order/DeleteOrderMasterRecords";
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var SelectedTechnicianID = 0;
        var HistorySelected;
        var HistorySelectedID = 0;
        var bIsFilter = true;
        var anOpen = [];
        var objColumns = {};
        var MsgSelectClosedOrdersOnly = '@eTurns.DTO.ResOrder.MsgValidationSelectOnlyclosedOrder';
        var MsgSelectRow = '@ResCommon.SelectRow';
        var MsgResErrorInProcess = '@ResCommon.ErrorInProcess';

        $(document).ready(function () {
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "250%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (!isNaN(parseInt(aData.ChangeOrderRevisionNo)) && parseInt(aData.ChangeOrderRevisionNo) > 0) {
                        $(nRow).find('#imgPlusMinus').css('display', '');
                    }

                    if ($(aData.IsDeleted).text() == 'Yes' && $(aData.IsArchived).text() == 'Yes')
                        $(nRow).css('background-color', '#B9BCBF');
                        //                        nRow.className = "GridDeleatedArchivedRow";
                    else if ($(aData.IsDeleted).text() == 'Yes')
                        $(nRow).css('background-color', '#FFCCCC');
                        //                        nRow.className = "GridDeletedRow";
                    else if ($(aData.IsArchived).text() == 'Yes')
                        $(nRow).css('background-color', '#CCFFCC');
                    //                        nRow.className = "GridArchivedRow";

                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    // if (!bIsFilter) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'OrderMasterList' },
                        "async": true,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = json;
                        }
                    });

                    //  }
                    bIsFilter = false;
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'OrderMasterList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },

                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Order/OrderMasterListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    //PostCount = PostCount + 1;
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    if (oSettings.aaSorting.length != 0) {
                        //   aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                        var sortValue = "";
                        for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];

                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });


                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        cache: false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function (result) {

                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#txtOrderFilter").val() != '') {
                                $('#myDataTable').highlight($("#txtOrderFilter").val());
                            }
                            // if(oTable.fnGetData().length <= 0 && $("#txtOrderFilter").val().length > 0){
                            //     $('#cnfBarcodeAddmdl').modal();
                            // }
                            //                            if ($("#txtOrderFilter").val().length > 0) {
                            //                                if ($('#myDataTable').dataTable().fnGetData().length <= 0) {
                            //                                    $('#cnfBarcodeAddmdl').modal();
                            //                                }
                            //                           }

                            $("a#ColumnOrderSetup").off("click");
                            $(document).on("click", "a#ColumnOrderSetup", function () {
                                $("#ColumnSortableModal").dialog("open");
                            });
                            setCloseButton();
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                    $('#divQTYLegends').show(1000);
                },
                "aoColumns": [
                            { mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' },
                            {
                                "mDataProp": null,
                                "bSortable": false,
                                "sClass": "read_only control center",
                                "sDefaultContent": '',
                                "bSearchable": false,
                                "fnRender": function (obj, val) {
                                    if (!isNaN(parseInt(obj.aData.ChangeOrderRevisionNo)) && parseInt(obj.aData.ChangeOrderRevisionNo) > 0) {
                                        return '<img  id="imgPlusMinus" src="' + sImageUrl + 'drildown_open.jpg' + '">';
                                    }
                                    else {
                                        return '';
                                    }
                                }
                            },
			                { "mDataProp": "ID", "sClass": "read_only" },
			                {
			                    "mDataProp": "OrderNumber",
			                    "sClass": "read_only NotHide",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false,
			                    "fnRender": function (obj, val) {
			                        if (parseInt(obj.aData.OrderStatus) > parseInt("@((int)OrderStatus.Approved)") && parseInt(obj.aData.OrderStatus) < parseInt("@((int)OrderStatus.Closed)")) {
			                            return "<a name='receiveorder' id='aReceivelnk_" + obj.aData.ID + "' href='JavaScript:void(0);'>" + obj.aData.OrderNumber + "</a>";
			                        }
			                        else {
			                            return "<a name='editorder' id='aEditlnk_" + obj.aData.ID + "' href='JavaScript:void(0);'>" + obj.aData.OrderNumber + "</a>";
			                        }
			                    }
			                },
			                { "mDataProp": "ReleaseNumber", "sClass": "read_only" },
			                { "mDataProp": "ShipViaName", "sClass": "read_only" },
			                { "mDataProp": "SupplierName", "sClass": "read_only" },

			                { "mDataProp": "StagingName", "sClass": "read_only" },
			                { "mDataProp": "Comment", "sClass": "read_only" },
                            { "mDataProp": "RequiredDate", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.RequiredDateStr; } },
			                //{ "mDataProp": "RequiredDateStr", "sClass": "read_only", "fnRender": function (obj, val) { return (val); } },
			                {
			                    "mDataProp": "OrderStatusChar", "sClass": "read_only NotHide", "fnRender": function (obj, val) {
			                        return "<span id='spnOrdStatus'>" + val + "</span>"
                                         + "<span id='spnIsNotEditable' style='display:none'>" + obj.aData.IsRecordNotEditable + "</span>"
                                         + "<span id='spnIsableToDelete' style='display:none'>" + obj.aData.IsAbleToDelete + "</span>"
                                         + "<span id='spnOrderStatus' style='display:none'>" + obj.aData.OrderStatus + "</span>"
                                         + "<span id='spnOrderMasterID' style='display:none'>" + obj.aData.ID + "</span>"
                                         + "<span id='spnOrderGUID' style='display:none'>" + obj.aData.GUID + "</span>"
                                         + "<span id='spnOrderIsInReceive' style='display:none'>" + obj.aData.OrderIsInReceive + "</span>"
                                         + "<span id='spnhdnIsDeleted' style='display:none'>" + obj.aData.IsDeleted + "</span>"
                                         + "<span id='spnhdnIsArchived' style='display:none'>" + obj.aData.IsArchived + "</span>"
			                             + "<span id='spnhdnNoOfItem' style='display:none'>" + obj.aData.NoOfLineItems + "</span>";
			                    }
			                },
                            { "mDataProp": "NoOfLineItems", "sClass": "read_only numericalign", "fnRender": function (obj, val) { return val; } },
			                {
			                    "mDataProp": "OrderCost", "sClass": "read_only numericalign isCost", //"fnRender": function (obj, val) { return val; }

			                    "fnRender": function (obj, val) {

			                        if (obj.aData.PriseSelectionOption != null && obj.aData.PriseSelectionOption == 1) {
			                            if (obj.aData.OrderPrice != null && obj.aData.OrderPrice != NaN)
			                                return "<span>" + FormatedCostQtyValues(obj.aData.OrderPrice, 1) + "</span>";
			                            else
			                                return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
			                        }
			                        else if (obj.aData.PriseSelectionOption != null && obj.aData.PriseSelectionOption == 2) {
			                            if (obj.aData.OrderCost != null && obj.aData.OrderCost != NaN)
			                                return "<span>" + FormatedCostQtyValues(obj.aData.OrderCost, 1) + "</span>";
			                            else
			                                return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
			                        }
			                        else {
			                            return FormatedCostQtyValues(0, 1);
			                        }
			                    }
			                },
			                { "mDataProp": "CustomerName", "sClass": "read_only" },

			                //{ "mDataProp": "OMPackSlipNumbers", "sClass": "read_only" },
                            { "mDataProp": "PackSlipNumber", "sClass": "read_only" },
			                { "mDataProp": "ShippingTrackNumber", "sClass": "read_only" },
                            { "mDataProp": "ChangeOrderRevisionNo", "sClass": "read_only" },
                           // { "mDataProp": "Indicator", "sClass": "read_only" },
			                { "mDataProp": "Created", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.CreatedDate; } },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
			                { "mDataProp": "LastUpdated", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.UpdatedDate; } },
			                { "mDataProp": "UpdatedByName", "sClass": "read_only" },
			                { "mDataProp": "RoomName", "sClass": "read_only" },
			                { "mDataProp": "IsArchived", "sClass": "read_only", "fnRender": function (obj, val) { return '<span id="spnIsArchived">' + GetBoolInFormat(obj, val) + '</span>'; } },
                            { "mDataProp": "IsDeleted", "sClass": "read_only", "fnRender": function (obj, val) { return '<span id="spnIsDeleted">' + GetBoolInFormat(obj, val) + '</span>'; } },
                            { "mDataProp": "ShippingVendorName", "sClass": "read_only" },
                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "EditedFrom", "sClass": "read_only" },
                            {
                                "mDataProp": "ReceivedOn", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    return obj.aData.ReceivedOnDate;
                                }
                            },
			                {
			                    "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return obj.aData.ReceivedOnDateWeb;
			                    }
			                },
			                { "mDataProp": "SupplierAccountNumberName", "sClass": "read_only" },
			                { "mDataProp": "SalesOrder", "sClass": "read_only" }
//                            { "mDataProp": "ReceivedOnDate", "sClass": "read_only" },
//                            { "mDataProp": "ReceivedOnDateWeb", "sClass": "read_only" }
                            @Html.RenderColumnsArray("OrderMaster")
                ]
            }).makeEditable();

            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');

            if ('@(isCost)' == '@(Boolean.FalseString)') {
                HideColumnUsingClassName("myDataTable");
            }


            var QueryStringParam1 = getParameterByName('fromdashboard');
            var QueryStringParam2 = getParameterByName('OrderID');
            if (QueryStringParam1 == 'yes' && QueryStringParam2 != '') {
                var tabid = $(".tabs li div.selected").attr('id');
                //BlankSession();
                if (tabid == 'tab7') {
                    LoadReceiveTab("OrderEdit/" + QueryStringParam2, "frmOrder");
                }
                else {
                    ShowEditTab("OrderEdit/" + QueryStringParam2, "frmOrder");
                }

            }

            $("#myDataTable").on("click", "td.control", function (event) {

                var nTr = this.parentNode;
                var i = $.inArray(nTr, anOpen);

                if (i === -1) {
                    $('img', this).attr('src', sImageUrl + "drildown_close.jpg");
                    if ($(this).find("img").length > 0) {
                        oTable.fnOpen(nTr, fnFormatDetails(oTable, nTr), '');
                        anOpen.push(nTr);
                        var trWidth = $(nTr).css('width');
                        if (trWidth != null && trWidth.length > 0) {
                            var innerWidth = parseInt(trWidth.replace('px', '')) - 100;

                            var newInnerWidth = innerWidth + 'px';
                            //                    if(innerWidth>1550){
                            //                    newInnerWidth = '1550px';
                            //                    }
                            $('#divChangeOrderHistory').css('width', newInnerWidth);
                        }
                    }

                }
                else {
                    $('img', this).attr('src', sImageUrl + "drildown_open.jpg");
                    oTable.fnClose(nTr);
                    anOpen.splice(i, 1);
                }
            });

            function fnFormatDetails(oTable, nTr) {
                var oData = oTable.fnGetData(nTr);
                var sOut = '';
                $('#DivLoading').show();
                $.ajax({
                    "url": '@Url.Content("~/Order/GetChangeOrders")',
                    "data": { OrderGuid: oData.GUID, OrdType: oData.OrderType },
                    "async": false,
                    "cache": false,
                    "dataType": "text",
                    "success": function (json) {
                        sOut = json;
                        $('#DivLoading').hide();
                    },
                    error: function (response) {
                    }
                });

                return sOut;
            }



        });

        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.search);
            if (results == null)
                return "";
            else
                return decodeURIComponent(results[1].replace(/\+/g, " "));
        }

        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.search);
            if (results == null)
                return "";
            else
                return decodeURIComponent(results[1].replace(/\+/g, " "));
        }
    </script>
}
<div class="userListingWrapper">
    @if (OrdType == OrderType.RuturnOrder)
    {
        <h2>
            @eTurns.DTO.ResOrder.PageHeaderRO
        </h2>
    }
    else
    {
        <h2>
            @eTurns.DTO.ResOrder.PageHeader
        </h2>
    }
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <input type="hidden" id="hdnModuleName" name="hdnModuleName" value="Order" />
        <ul class='tabs'></ul>
        <div id="CtabNew" class="tabContener" style="min-height: 1020px;">
        </div>
        <div id="Ctab" class="tabContener" style="min-height: 1020px;">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="txtOrderFilter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="imgClearOrderFilter" />
                        </a>
                    </div>
                </div>
            </div>
            @if (OrdType == OrderType.Order)
            {
                @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Orders)
            }
            else
            {
                @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.ReturnOrder)
            }
            <div id="divNarrowSearch" style="float: left; padding: 0 5px 0 0; width: 18%;">
                &nbsp;
            </div>
            <div class="userContent ">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.ResItemMaster.Expand
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            @if (OrdType == OrderType.RuturnOrder)
                            {
                                <th class="NotHide">
                                    @eTurns.DTO.ResOrder.ReturnOrderNumber
                                </th>
                            }
                            else
                            {
                                <th class="NotHide">
                                    @eTurns.DTO.ResOrder.OrderNumber
                                </th>
                            }
                            <th>
                                @eTurns.DTO.ResOrder.ReleaseNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.ShippingMethod
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.Supplier
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.StagingName
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.Comment
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.RequiredDate
                            </th>
                            @if (OrdType == OrderType.RuturnOrder)
                            {
                                <th class="NotHide">
                                    @eTurns.DTO.ResOrder.ReturnOrderStatus
                                </th>
                            }
                            else
                            {
                                <th class="NotHide">
                                    @eTurns.DTO.ResOrder.OrderStatus
                                </th>
                            }
                            <th>
                                @eTurns.DTO.ResOrder.NoOfLineItems
                            </th>
                            @if (OrdType == OrderType.RuturnOrder)
                            {
                                <th>
                                    @eTurns.DTO.ResOrder.ReturnOrderCost
                                </th>
                            }
                            else
                            {
                                <th>
                                    @eTurns.DTO.ResOrder.OrderCost
                                </th>
                            }
                            <th>
                                @eTurns.DTO.ResOrder.Customer
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.PackSlipNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.ShippingTrackNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.ChangeOrderRevisionNo
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RoomName
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.IsDeleted
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.IsArchived
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.ShippingVendor
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.SupplierAccountDetail
                            </th>
                            <th>
                                @eTurns.DTO.ResOrder.SalesOrder
                            </th>
                            @Html.RenderColumnsHeader("OrderMaster", typeof(eTurns.DTO.ResOrder))
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <br />
                @if (isUncloseOrder)
                {
                    <div class="BtnBlockform" id="divEditOrderLineItem" style="display: none">
                        @*<input type="button" value="@eTurns.DTO.ResOrder.EditReceipts" id="btnEditOrderRecieptFromList" class="CreateBtn" /><span>&nbsp;
                            &nbsp;</span>*@
                        <input type="button" value="@eTurns.DTO.ResOrder.EditOrderLineItems" id="bntEditOrderLineItemsFromList" class="CreateBtn" />
                        <input type="button" value="@ResOrder.UncloseOrder" id="bntUnclosedOrder" class="CreateBtn" />
                    </div>
                }
                <input type="button" value="@ResOrder.ViewReceived" id="btnDeleteReceived" class="CreateBtn" style="display:none;" />
                <div id="divQTYLegends" style="clear: both; width: 90%; margin-top: 10px; display: none">
                    <div>
                        U = @ResOrder.GetOrderStatusText(OrderStatus.UnSubmitted.ToString()), S = @ResOrder.GetOrderStatusText(OrderStatus.Submitted.ToString()), A = @ResOrder.GetOrderStatusText(OrderStatus.Approved.ToString()), T = @ResOrder.GetOrderStatusText(OrderStatus.Transmitted.ToString()), I = @ResOrder.GetOrderStatusText(OrderStatus.TransmittedIncomplete.ToString()),
                        P = @ResOrder.GetOrderStatusText(OrderStatus.TransmittedInCompletePastDue.ToString()), C = @ResOrder.GetOrderStatusText(OrderStatus.Closed.ToString())
                    </div>
                </div>
            </div>
        </div>
        <input type="button" id="btnSendPendingOrderMail" value="Send Mail" style="display: none"
               class="CreateBtn" />
        <input type="button" id="btnShowOrderReports" value="Show Order Report With Detail"
               style="display: none" class="CreateBtn" />
        <input type="button" id="btnUpdateOrderNumberForSorting" value="Update Order# Sorting"
               style="display: none" class="CreateBtn" />
        <div id="CtabCL" class="tabContener" style="min-height: 1020px;">
        </div>
    </div>

</div>
<div id="divReceivedItem">

</div>
<div class="dialog" id="divUnCloseOrderReceiptEdit" style="float: left; display: none;
    width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="UCORE" style="float: left; text-align: left; padding-left: 10px;">
            <b>a.</b>&nbsp;Only the receipts of the selected order may be edited.
            <br />
            <b>b.</b>&nbsp;All unreceived items will placed back on order.
            <br />
            <b>c.</b>&nbsp;All previously received quantities will remain received.
            <br />
            <b>d.</b>&nbsp;Orders Created from EDI are not to be unclosed
            <br />
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="UnCloseOrderReceiptEdit()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="UnCloseOrderCancel()">
                <img src="~/Content/images/no.png" alt="@eTurns.DTO.Resources.ResCommon.Cancel" />@eTurns.DTO.Resources.ResCommon.Cancel
            </a>
        </p>
    </div>
</div>
<div class="dialog" id="OrderListCloseConfirm" style="display: none;">
    <div class="inner">
        <p class="text">
            Are you sure you want to close selected order(s)?
        </p>
        <a href="JavaScript:void(0)" id="bntCloseOrderListConfirmYes" class="yes yesornooryes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no" onclick="closeModalCloseOderListDialog();">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div class="dialog" id="divUnCloseOrderLineItemEdit" style="float: left; display: none;
    width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="UCOLIE" style="float: left; text-align: left; padding-left: 10px;">
            <b>a.</b>&nbsp;All received quantities will be unreceived
            <br />
            <b>b.</b>&nbsp;All order items may be edited or deleted
            <br />
            <b>c.</b>&nbsp;New order Items may be added to the order
            <br />
            <b>d.</b>&nbsp;The order will need to be approved once submitted
            <br />
            <b>e.</b>&nbsp;The order will be re-transmitted to the supplier once approved
            <br />
            <b>f.</b>&nbsp;Orders Created from EDI are not to be unclosed
            <br />
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="UnCloseOrderLineItemEdit()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="UnCloseOrderCancel()">
                <img src="~/Content/images/no.png" alt="@eTurns.DTO.Resources.ResCommon.Cancel" />@eTurns.DTO.Resources.ResCommon.Cancel
            </a>
        </p>
    </div>
</div>
<script type="text/javascript">
    var sLengthMenu = '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
        sEmptyTable = '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
        sInfo = '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
        sInfoEmpty = '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries';

    var saveGridStateURL = '@Url.Content("~/Master/SaveGridState")',
        receiveItemURL = '@Url.Content("~/Receive/ReceiveItem")',
        loadGridStateURL = '@Url.Content("~/Master/LoadGridState")',
        receiveListAjaxURL = '@Url.Content("~/Receive/ReceiveListAjax")',
        deleteRecieveAndUpdateReceivedQtyURL = '@Url.Content("~/Order/DeleteRecieveAndUpdateReceivedQty")',
        openDialogForEditReceiptURL = '@Url.Content("~/Receive/OpenDialogForEditReceipt")',
        getItemLocationsURL = '/Receive/GetItemLocations',
        getReceivedQuantityURL = '@Url.Content("~/Order/GetReceivedQuantity")',
        saveReceiveWithOrderURL = '@Url.Content("~/Receive/SaveReceiveWithOrder")',
        closeOrderDetailLineItemsURL = '@Url.Content("~/Order/CloseOrderDetailLineItems")',
        unCloseOrderLineItemsURL = '@Url.Content("~/Order/UnCloseOrderLineItems")',
        receivedItemDetailURL = '@Url.Content("~/Receive/ReceivedItemDetail")',
        duplicateCheckSrNumberURL = '@Url.Content("~/Inventory/DuplicateCheckSrNumber")';
    var lblExpirationDate = '@ResItemLocationDetails.ExpirationDate';
    var lblAndExpiration = '@ResItemLocationDetails.AndExpiration';
    var lblTrackingItem = '@ResItemLocationDetails.TrackingItem';
    var MsgReceivedSuccessfully = '@ResReceiveOrderDetails.MsgReceivedSuccessfully';
    var MsgSelectRowToReceive = '@eTurns.DTO.ResReceiveOrderDetails.MsgSelectRowToReceive';
    var ResReceiveOrderDetails = '@ResReceiveOrderDetails.MsgErrorWhileReceving';
    var MsgEnterQuantityReceive = '@ResReceiveOrderDetails.MsgEnterQuantityReceive';
    var MsgSelectLocationToReceive = '@ResReceiveOrderDetails.MsgSelectLocationToReceive';
    var MsgClosedOrderNotReceive = '@ResReceiveOrderDetails.MsgClosedOrderNotReceive';
    var SomeItemsNotReceivedDueToReason = '@ResOrder.SomeItemsNotReceivedDueToReason';
    var TitlePreReceiveInfo = '@ResReceiveOrderDetails.TitlePreReceiveInfo';
    var btnReceive = '@ResOrder.Receive';


</script>
<script type='text/javascript' src="@Url.Content("~/Scripts/PageScripts/ReceiveList.js?v=" + version)"></script>
<script type='text/javascript' src="@Url.Content("~/Scripts/PageScripts/ReceiveItemDetail.js?v=" + version)"></script>
<script type="text/javascript">
    _ReceiveList.initUrls(saveGridStateURL, receiveItemURL, receiveListAjaxURL, loadGridStateURL
        , deleteRecieveAndUpdateReceivedQtyURL, openDialogForEditReceiptURL,
        getItemLocationsURL, getReceivedQuantityURL,
        saveReceiveWithOrderURL, closeOrderDetailLineItemsURL,
        receivedItemDetailURL, unCloseOrderLineItemsURL, duplicateCheckSrNumberURL);
</script>
<script type="text/javascript">

    $('#btnUpdateOrderNumberForSorting').on('click', function () {
        $('#DivLoading').show();
        $.ajax({
            url: 'TempUpdateOrderNumberForSorting',
            type: 'Post',
            dataType: 'json',
            success: function (result) {
                alert(result.Message);
                $('#DivLoading').hide();
            }
        });
    });
    $('#btnShowOrderReports').on('click', function () {
        var arrOrderGUIDs = new Array();
        $('#myDataTable tbody tr.row_selected').each(function () {
            arrOrderGUIDs.push($(this).find('#spnOrderGUID').text());
        });
        ReportExecutionSingleRecord('Order', arrOrderGUIDs.join(','));
    });
    var isTabClick = false;
    var CurrentListTabID = 'tab5'
    var _IsArchived = false;
    var _IsDeleted = false;
    var tab11Text = '@eTurns.DTO.ResOrder.ReceiveButton';
    var tab4Text = '@eTurns.DTO.ResOrder.ChangeOrder';
    var tab7Text = '@eTurns.DTO.Resources.ResCommon.Receivable';

    if ('@OrdType' == 'RuturnOrder') {
        tab11Text = '@eTurns.DTO.ResOrder.ReturnTab';
        tab4Text = '@eTurns.DTO.ResOrder.ChangeReturnOrder';
        tab7Text = '@eTurns.DTO.ResOrder.ReturnListTab';
    }

    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
                    new TabClass('tab11', tab11Text, 'callbackRecieve();', false, true),
                    new TabClass('tab2', '@eTurns.DTO.Resources.ResCommon.Unsubmitted', 'CallBackTabs("tab2");', true, true, '@(ViewBag.iunsubmittedCount)', 'divUnsubmitted'),
                    new TabClass('tab3', '@eTurns.DTO.Resources.ResCommon.Approved', 'CallBackTabs("tab3");', true, true, '@(ViewBag.iSubmitttedCount)', 'divSubmittted'),
    //new TabClass('tab4', tab4Text, 'CallBackTabs("tab4");', true, true, '@(ViewBag.iChangOrderCount)', 'divChangeOrder'),
                    new TabClass('tab4', tab4Text, 'CallBackTabs("tab4");', true, true, '', 'divChangeOrder'),
                    new TabClass('tab7', tab7Text, 'CallBackTabs("tab7");', true, true, '@(ViewBag.iApproveCount)', 'divApproved'),
                    new TabClass('tab8', '@eTurns.DTO.Resources.ResCommon.Close', 'CallBackTabs("tab8");', false, false),
                    new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.History', 'CallBackTabs("tab5");', true, true),
    ];

    if ('@IsShowChangeLog.ToString().ToUpper()' == 'TRUE') {
        TabsArry.push(new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true));
    }

    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
            case "#unsubmitted":
                $("#tab2").click();
                break
            case "#approve":
                $("#tab3").click();
                break
            case "#changeorder":
                $("#tab4").click();
                break;
            case "#receive":
                $("#tab7").click();
                break;
        }
    }

    $(document).ready(function () {
        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
        //SetTabView();
    });


    var TempNarrow = '';
    var EmptyNarrow = '[###]~~~~~~~~~~~~~[###]';
    var IsRetainNarrow = false;
    var LastTab = '';
    var tabName = '';
    function CallBackTabs(tab) { 
        IsRetainNarrow =false;
        switch (tab) {
            case "tab5":
                LastTab = window.location.hash;
                window.location.hash = '#list';
                IsRetainNarrow = true;
                if (LastTab != '#list' && LastTab != '') {
                    IsRetainNarrow = false;
                    TempNarrow = '';
                }
                tabName = '';
                break;
            case "tab2":
                window.location.hash = '#UnSubmitted';
                IsRetainNarrow = false;
                TempNarrow = '';
                tabName = 'UnSubmitted';
                break;
            case "tab3":
                window.location.hash = '#Approve';
                IsRetainNarrow = false;
                TempNarrow = '';
                tabName = 'Approve';
                break;
            case "tab4":
                window.location.hash = '#ChangeOrder';
                IsRetainNarrow = false;
                TempNarrow = '';
                tabName = 'ChangeOrder';
                break;
            case "tab7":
                window.location.hash = '#Receive';
                IsRetainNarrow = false;
                TempNarrow = '';
                tabName = 'Receive';
                break;
            default:
                window.location.hash = '';
                TempNarrow = '';
                tabName = '';
                break;
        }

        if ($('#IsArchivedRecords').is(':checked')) {
            $('#aUnArchiveRows').css('display', '');
            $('#actionCloseOrder').css('display', 'none');
            $('#aArchiveRows').css('display', 'none');
        }
        else {
            $('#aUnArchiveRows').css('display', 'none');
            $('#aArchiveRows').css('display', '');
            $('#actionCloseOrder').css('display', '');
        }

        $('#deleteRows').css('display', '');
        if ($('#IsDeletedRecords').is(':checked')) {
            $('#undeleteRows').css('display', '');
            $('#deleteRows').css('display', 'none');
            $('#actionCloseOrder').css('display', 'none');
            $('#aArchiveRows').css('display', 'none');
        }
        else {
            $('#undeleteRows').css('display', 'none');
            $('#deleteRows').css('display', '');
            if (!$('#IsArchivedRecords').is(':checked')) {
                $('#actionCloseOrder').css('display', '');
            } else {
                $('#actionCloseOrder').css('display', 'none');
            }
            //$('#aArchiveRows').css('display', '');
        }

        if ($('#IsDeletedRecords').is(':checked')
            || $('#IsArchivedRecords').is(':checked')) {
            $(".print").attr("style", "display:none");
        }
        else {
            $(".print").attr("style", "display:block");
        }

        if ($('#IsArchivedRecords').is(':checked'))
        {
            $("#deleteRows").attr("style", "display:none");
        }

        $('#tab11').hide();
        if (tab == 'tab4' || tab == 'tab7' || tab == 'tab8') {
            $('#deleteRows').css('display', 'none');
            $('#undeleteRows').css('display', 'none');
        }
        
        if (IsRetainNarrow == false || TempNarrow == '') {
            fillOrderNarrowSearchDiv(tabName);
        }
        //FillRedCount();
        SetReplenishRedCount();

        if (TempNarrow != '' && IsRetainNarrow) {
            fnFilterOrderList(TempNarrow);
        }
        else {
            fnFilterOrderList('');
        }
        CurrentListTabID = tab;
        $("#btnChangeOrder").css('display', 'none');
        $('#btnChangeOrder').parent().css('right', '208px');
        $("#btnChangeOrder").removeAttr("onclick")
        SetFocus();
    }
    function SetFocus() {
        if ($("input#txtOrderFilter").length > 0) {
            $("input#txtOrderFilter").focus();
            setTimeout(function () {
                $("input#txtOrderFilter").focus();
            }, 600);
        }
        if ($("input.searchinput").length > 0) {
            $("input.searchinput").focus();
            setTimeout(function () {
                $("input.searchinput").focus();
            }, 600);

        }
    }
    function callbacknew() {
        window.location.hash = '#new';
        ShowNewTab('OrderCreate', 'frmOrder');
    }

    function callbackRecieve() {
        window.location.hash = '';
        var rowSelected = fnGetSelected(oTable);
        if (rowSelected != undefined && rowSelected.length == 1) {
            var orderID = $(rowSelected).find('#spnOrderMasterID').text();
            var ostatus = $(rowSelected).find('#spnOrderStatus').text();
            var ishdnDeleted = $(rowSelected).find('#spnhdnIsDeleted').text();
            var ishdnArchived = $(rowSelected).find('#spnhdnIsArchived').text();
            var OrderIsInReceive = $(rowSelected).find('#spnOrderIsInReceive').text();
            if ((parseInt(ostatus) >= parseInt("@((int)OrderStatus.Transmitted)") && parseInt(ostatus) <= parseInt("@((int)OrderStatus.TransmittedInCompletePastDue)")) && (ishdnDeleted.toString().toLowerCase() == 'false' || ishdnDeleted.toString().toLowerCase() == 'no') && (ishdnArchived.toString().toLowerCase() == 'false' || ishdnArchived.toString().toLowerCase() == 'no')) {
                $('#DivLoading').show();
                $('#CtabNew').empty();
                $('#CtabNew').show();
                $.get("OrderEdit/" + orderID, function (data) { $('#CtabNew').html(data); });
                $.validator.unobtrusive.parseDynamicContent('#frmOrder input:last');
                $('#tab11').show();
            }
        }
    }

    function LoadReceiveTab(action, formName) {
        $('#DivLoading').show();
        $('#CtabNew').empty();
        $('#CtabNew').show();
        $('#tab11').show();
        $('#tab11').click();
        $.get(action, function (data) { $('#CtabNew').html(data); });
        $.validator.unobtrusive.parseDynamicContent('#' + formName + ' input:last');
    }

    function callbackCL() { HistoryTabClick(); }

    function SwitchOrderTab(action, frmName) {
        isDirtyForm = false;
        if (!dirtyCheck()) {
            return false;
        }
        else {
            removeDirtyclass();
        }
        if (HasInsertPermission == "False") {
            $('#tab1').hide();
        }
        $('#tab1').find("#spnTabName").text(NewNameRes);
        AllowDeletePopup = true;
        $("#" + CurrentListTabID).click();
        $('#CtabNew').hide();
        if (IsRefreshGrid) {
            IsRefreshGrid = false;
            oTable.fnDraw();
        }
        //FillRedCount();
        //SetReplenishRedCount(); commented for: 5551-5552: $("#" + CurrentListTabID).click(); already fired SetReplenishRedCount()
    }

    function fnGetSelected(oTableLocal) {
        return oTableLocal.$('tr.row_selected');
    }
    function HistoryTabClick() {
        GetHistoryData();
    }
    function GetHistoryData() {
        HistorySelected = fnGetSelected(oTable);
        if (HistorySelected != undefined && HistorySelected.length == 1) {
            var orderID = $(HistorySelected).find('#spnOrderMasterID').text();
            HistorySelectedID = orderID;
            $('#DivLoading').show();
            $("#CTab").hide();
            $("#CtabCL").show();
            $('#CtabCL').load('OrderMasterListHistory', function () { $('#DivLoading').hide(); });
        }
        else {
            $('#CtabCL').html('');
            $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
            showNotificationDialog();
            return false;
        }
    }

    /* HISTORY related data deleated and archived START */
    $('#IsDeletedRecords').live('click', function () {
        CallBackTabs($(".tabs li div.selected").attr('id'));
    });
    $('#IsArchivedRecords').live('click', function () {
        CallBackTabs($(".tabs li div.selected").attr('id'));
    });

    $('#ViewHistory').live('click', function () {
        HistorySelected = fnGetSelected(oTable);
        if (HistorySelected != undefined && HistorySelected.length == 1) {
            $("#atab5").click();
        }
        else {
            $('#tab5').html('');
            $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
            showNotificationDialog();
            return false;
        }
    });

    function GetCurrentSelectedTab() {
        //var tabid = '';

        var tabid = $(".tabs li div.selected").attr('id');

        if (tabid == 'tab2') {
            return "@((int)OrderStatus.UnSubmitted)";
        }
        else if (tabid == 'tab3') {
            return "@((int)OrderStatus.Submitted)";
        }
        else if (tabid == 'tab4') {
            return "@((int)OrderStatus.Transmitted),@((int)OrderStatus.TransmittedPastDue),@((int)OrderStatus.TransmittedInCompletePastDue)";
        }
        else if (tabid == 'tab7') {
            return "@((int)OrderStatus.Transmitted),@((int)OrderStatus.TransmittedIncomplete),@((int)OrderStatus.TransmittedPastDue),@((int)OrderStatus.TransmittedInCompletePastDue)";
        }
        else if (tabid == 'tab8') {
            return "@((int)OrderStatus.Closed)";
        }
        else {
            return "";
        }
    }


    function fnFilterOrderList(searchtext) {
        bIsFilter = true;
        if (searchtext.length > 0 && searchtext != EmptyNarrow) {
            TempNarrow = searchtext;
        }
        else {
            TempNarrow = '';
            IsRetainNarrow = false;
        }
        var appendedText = GetCurrentSelectedTab();
        if (appendedText.length > 0) {
            searchtext = searchtext + "[^]" + appendedText;
        }

        $('#myDataTable').dataTable().fnFilter(searchtext, null, null, null);

        $('#myDataTable' + ' td').removeHighlight();

        $('#tab11').hide();
        if (searchtext.length > 0)
            $('#myDataTable' + ' td').highlight(searchtext);
    }

    var txtFilerId = 'txtOrderFilter';
    var myDataTableId = 'myDataTable';
    var $myDataTable = $('#' + myDataTableId);

    _Common.setGloblaSearch(txtFilerId, myDataTableId, function (txtSearch) {
        DoOrderNarrowSearch();
        if ($myDataTable.dataTable().fnGetData().length === 1) {
            //$('#myDataTable tr').find('#aEditLink').click();
            $myDataTable.find('tr').find('#aEditLink').click();
        }
    },
        function (txtSearch, keycode) {
            DoOrderNarrowSearch_OnEnter(keycode);
        }
    );


    //var timeoutsc1;
    //// $('#txtOrderFilter').bind('textchange', function () {
    //$(document).on('propertychange input', "#txtOrderFilter", function () {
    //    clearTimeout(timeoutsc1);
    //    var self = this;
    //    timeoutsc1 = setTimeout(function () {
    //        // fnFilterOrderList($("#txtOrderFilter").val().replace(/'/g, "''"));
    //        if (SearchPattern == 2 || SearchPattern == "2") {
    //            DoOrderNarrowSearch();
    //        }
    //        else {
    //            $('#txtOrderFilter').unbind("keypress");
    //            $('#txtOrderFilter').keypress(function (event) {
    //                var keycode = (event.keyCode ? event.keyCode : event.which);
    //                setTimeout(function () { DoOrderNarrowSearch_OnEnter(keycode); }, 200);
    //            });
    //            if ($("#txtOrderFilter").val().length == 0) {
    //                setTimeout(function () { DoOrderNarrowSearch_OnEnter(0); }, 200);
    //            }
    //        }
    //    }, 600);
    //});
    //if (SearchPattern == 2 || SearchPattern == "2") {
    //    $("#txtOrderFilter").keydown(function (e) {
    //        var code = (e.keyCode ? e.keyCode : e.which);
    //        if (code == 13 && $("#global_filter").val().length >= 2) {
    //            //fnFilterOrderList($("#txtOrderFilter").val().replace(/'/g, "''"));
    //            DoOrderNarrowSearch();
    //            if ($('#myDataTable').dataTable().fnGetData().length === 1) {
    //                $('#myDataTable tr').find('#aEditLink').click();
    //            }
    //            return false;
    //        }
    //    });
    //}


    //$("#imgClearOrderFilter").click(function () {
    //    $("#txtOrderFilter").val('');
    //    $("#txtOrderFilter").focus();
    //    $("#txtOrderFilter").change();
    //    return false;
    //});

    $(document).on("tap click touchstart", "#imgClearOrderFilter", function () {
        if ($("#txtOrderFilter").val().length > 0) {
            $("#txtOrderFilter").val("");
            $("#txtOrderFilter").trigger("input");
        }
        return false;
    });

    function fillOrderNarrowSearchDiv(tabName) {
        $('#divNarrowSearch').html('&nbsp');
        $.ajax({
            url: 'GetOrderNarrwSearchHTML',
            data: { tabName: tabName },
            async: true,
            success: function (data) {
                $('#divNarrowSearch').html(data);
                return;
            }
        });
        //$.get('@Url.Action("GetOrderNarrwSearchHTML")', function (data) {
        //    $('#divNarrowSearch').html(data);
        //});
    }
</script>
<script type="text/javascript">

    $('#bntEditOrderLineItemsFromList').off('click');
    $('#bntEditOrderLineItemsFromList').on('click', function () {
        //('#bntEditOrderLineItemsFromList').on('click', function (e) {
        ClickFrom = '';
        var anSelectedRows = fnGetSelected(oTable);
        if (anSelectedRows.length <= 0) {
            //alert('@ResOrder.ReqClosedOrders');
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#spanGlobalMessage").html('@ResOrder.ReqClosedOrders');
            showNotificationDialog();
            return false;
        }
        ////$('#divUnCloseOrderLineItemEdit').modal();
        ////$('.simplemodal-close').css('display', 'none');
        var vOrderID = $(anSelectedRows[0]).find('#spnOrderMasterID').text();
        $('#divEditOrderLineItem').css("display", "none");
        ShowEditTab('OrderEdit/' + vOrderID +'?callfor=editOrderItem', 'frmOrder');

    });

    $('#bntUnclosedOrder').off('click');
    $('#bntUnclosedOrder').on('click', function () {
        var anSelectedRows = fnGetSelected(oTable);
        if (anSelectedRows.length == 1) {
            /*
            OrderGUID = $(anSelectedRows[0]).find('#spnOrderGUID').text();
            $.ajax({
                url: 'ToUnclosedOrder',
                'type': 'Post',
                'data': { 'OrderGuid': OrderGUID },
                'dataType': 'json',
                //'contentType': 'application/json',
                'success': function (result) {
                    if (result.Status) {
                        oTable.fnStandingRedraw();
                    }
                    else {
                        alert(result.Message);
                    }
                },
                'error': function (xhr) {
                    alert('ajaxError');
                }

            });
            */
            var vUOrderID = $(anSelectedRows[0]).find('#spnOrderMasterID').text();
            ShowEditTab('OrderEdit/' + vUOrderID + '?callfor=UnCloseOrder', 'frmOrder');
        }
    });

    $('#btnDeleteReceived').off('click');
    $('#btnDeleteReceived').on('click', function () {
        var anSelectedOrders = fnGetSelected(oTable);
        var stringOrderIDs = "";
        if (anSelectedOrders.length == 1) {
            $('#DivLoading').show();
            var orderGUID = $(anSelectedOrders[0]).find('#spnOrderGUID').text();
            var Url = '/Receive/ReceivedItemsByOrder';
            $("#divReceivedItem").data({ 'Guid': orderGUID, 'Url': Url }).dialog("open");
        }
        else {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#spanGlobalMessage").html('@ResOrder.SelectSingleRow');
            showNotificationDialog();
            //alert('@ResOrder.SelectSingleRow');
        }

        return false;
    });

    $('#btnChangeOrder').live('click', function () {
        var anSelectedRows = fnGetSelected(oTable);
        var aPos = oTable.fnGetPosition($(anSelectedRows)[0]);
        var aData = oTable.fnGetData(aPos);
        var ChangeOrdRvsionNo = 1;
        if (!isNaN(parseInt(aData.ChangeOrderRevisionNo)) && parseInt(aData.ChangeOrderRevisionNo) > 0) {
            ChangeOrdRvsionNo = parseInt(aData.ChangeOrderRevisionNo) + 1;
        }
        var orderID = aData.ID;
        var obj = new Array();
        obj.push({ "name": "IsChangeOrder", "value": "true" });
        obj.push({ "name": "ChangeOrderRevisionNo", "value": ChangeOrdRvsionNo });
        ShowEditTabWithParams('OrderEdit/' + orderID, 'frmOrder', obj);

    });

    $(document).ready(function () {
        //$('#tab11').hide();

        var ShowEdittabonLoad = '@Request.Params["FromItem"]';
        var OID = '@Request.Params["OID"]';;
        var oStatus = '@Request.Params["OrderStatus"]';;

        if (ShowEdittabonLoad == 'true') {
            if (parseInt(oStatus) < 4)
                ShowEditTab("OrderEdit/" + OID, "frmOrder");
            else {
                LoadReceiveTab("OrderEdit/" + OID, "frmOrder")
            }
        }

        if (typeof ($('#IsArchivedRecords')) != undefined)
            _IsArchived = $('#IsArchivedRecords').is(':checked');

        if (typeof ($('#IsDeletedRecords')) != undefined)
            _IsDeleted = $('#IsDeletedRecords').is(':checked');



        //$('#myDataTable').on('tap click', 'tbody tr', function () {
        //    setTimeout(function () { setCurrentRow(); }, 1000);
        //});

        if (window.location.hash.toLowerCase() == "#unsubmitted") {
            $("#tab2").click();
        }
        else if (window.location.hash.toLowerCase() == "#approve") {
            $("#tab3").click();
        }
        else if (window.location.hash.toLowerCase() == "#changeorder") {
            $("#tab4").click();
        }
        else if (window.location.hash.toLowerCase() == "#receive") {
            $("#tab7").click();
        }

        //$('#myDataTable').on('tap click', 'a[name="receiveorder"]', function () {
        $('#myDataTable').on('tap click', 'a[id^="aReceivelnk_"]', function () {
            var linkid = $(this).attr('id');
            if (linkid.toString().indexOf('aEditlnk_') >= 0)
                return false;

            $('#DivLoading').show();
            BlankSession();
            var orderid = linkid.split('_')[1];
            var tr = $(this).parent().parent();
            $("#myDataTable").find("tbody tr").removeClass("row_selected");
            $(tr).addClass('row_selected');
            $('#tab11').click();

            return false;
        });


        $('#myDataTable').on('tap click', 'a[id^="aEditlnk_"]', function () {
            var linkid = $(this).attr('id');
            if (linkid.toString().indexOf('aReceivelnk_') >= 0)
                return false;

            $('#DivLoading').show();
            BlankSession();

            var orderid = linkid.split('_')[1];
            var tr = $(this).parent().parent();
            $("#myDataTable").find("tbody tr").removeClass("row_selected");
            $(tr).addClass('row_selected');

            ShowEditTab('OrderEdit/' + orderid, 'frmOrder');
            return false;
        });
        //SetReplenishRedCount();
        fillOrderNarrowSearchDiv(tabName);
        if (gblActionName.toLowerCase() == "returnorderlist") {
            $('#btnDeleteReceived').val('View Returned')
        }


        $('#actionCloseOrder').click(function () {

            var anSelected = fnGetSelected(oTable);
            var cntIDs = 0;
            for (var i = 0; i <= anSelected.length - 1; i++) {
                var aData = oTable.fnGetData(anSelected[i]);
                if (parseInt(aData.OrderStatus) != parseInt("@((int)OrderStatus.Closed)")) {
                    cntIDs = cntIDs + 1;
                }

            }
            if (cntIDs > 0) {
                $('#OrderListCloseConfirm').modal();
            }
            else {
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').html("@ResOrder.ReqOneUnClosedOrder");
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            }
        });

        $('#bntCloseOrderListConfirmYes').click(function () {

            $('#DivLoading').show();
            var anSelected = fnGetSelected(oTable);
            var stringIDs = "";
            var cntIDs = 0;
            if (anSelected.length !== 0) {
                for (var i = 0; i <= anSelected.length - 1; i++) {
                    var aData = oTable.fnGetData(anSelected[i]);
                    if (parseInt(aData.OrderStatus) != parseInt("@((int)OrderStatus.Closed)")) {
                        stringIDs = stringIDs + aData.ID + ",";
                        cntIDs = cntIDs + 1;
                    }
                }

                if (cntIDs > 0) {
                    $.ajax({
                        url: '@Url.Action("UpdateSelectedOrdersToClose", "Order")',
                        type: "POST",
                        data: { ids: stringIDs },
                        success: function (responce) {
                            if (responce.Status == "ok") {
                                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon').html("@ResCommon.RecordClosedSuccessfully".replace("{0}", "(" + cntIDs + ")"));
                                $('div#target').fadeToggle();
                                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                                oTable.fnDraw();
                            }
                            else {
                                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').html("@ResOrder.ErrortoPerformOperation");
                                $('div#target').fadeToggle();
                                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            }
                            closeModalCloseOderListDialog();
                        },
                        error: function (err) {
                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').html(responce.Message);
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
                    });
                }
                else {
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon').html("@ResOrder.ReqOneUnClosedOrder");
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    closeModalCloseOderListDialog();
                    $('#DivLoading').hide();
                }

            }
        });

    });

    var lastChecked;
    $("#myDataTable").on("tap click", "tbody tr", function (e) {

        if (e.target.type == "checkbox" || e.target.type == "select" || e.target.type == "radio" || e.target.type == "button") {
            e.stopPropagation();
        } else {
            if (IsDeleteItemPictureViewRecord)
                $(this).parent().parent().parent().parent().parent().toggleClass('row_selected');
            else {

                if (!lastChecked) {
                    lastChecked = this;
                }
                if (e.shiftKey) {
                    var start = $('#myDataTable tbody tr').index(this);
                    var end = $('#myDataTable tbody tr').index(lastChecked);

                    for (i = Math.min(start, end) ; i <= Math.max(start, end) ; i++) {
                        if (!$('#myDataTable tbody tr').eq(i).hasClass('row_selected')) {
                            $('#myDataTable tbody tr').eq(i).addClass("row_selected");
                        }
                    }
                    if (window.getSelection) {
                        if (window.getSelection().empty) {  // Chrome
                            window.getSelection().empty();
                        } else if (window.getSelection().removeAllRanges) {  // Firefox
                            window.getSelection().removeAllRanges();
                        }
                    } else if (document.selection) {  // IE?
                        document.selection.empty();
                    }
                } else if ((e.metaKey || e.ctrlKey)) {
                    $(this).toggleClass('row_selected');
                } else {
                    $(this).toggleClass('row_selected');
                }

                lastChecked = this;
            }
            setCurrentRow();
            ShowHideOrderChangeLog();
            return false;
        }
    });

    function ShowHideOrderChangeLog() {
        var $tab6 = $("#tab6");
        if ($tab6.length <= 0) {
            return false;
        }

        var anSelectedRows = fnGetSelected(oTable);
        if (anSelectedRows != null) {
            if (anSelectedRows.length == 1) {
                $tab6.show();
            }
            else {
                if (IsShowHistory) {
                    $tab6.show();
                    IsShowHistory = false;
                }
                else {
                    $tab6.hide();
                }
            }
        }
    }


    $('#amnuOrderNewLink,#amnuReturnOrderNewLink').click(function () {
        $("#tab1").click();
    });


    $('#amnuOrderUnsubmittedLink,#amnuReturnOrderUnsubmittedLink').click(function () {
        $("#tab2").click();
    });
    $('#amnuOrderApproveLink,#amnuReturnOrderApproveLink').click(function () {
        $("#tab3").click();
    });
    $('#amnuChangeOrderLink,#amnuChangeReturnOrderLink').click(function () {
        $("#tab4").click();
    });
    $('#amnuOrderReceiveLink,#amnuReturnOrderReceiveLink').click(function () {
        $("#tab7").click();
    });
    $('#amnuOrderHistoryLink,#amnuReturnOrderHistoryLink').click(function () {
        $("#tab5").click();
    });

    function closeModalCloseOderListDialog() {
        $.modal.impl.close();
    }


    //function GetSelectedRecordsIds() {
    //    var anSelected = fnGetSelected(oTable);
    //    var stringIDs = '';
    //    for (var i = 0; i <= anSelected.length - 1; i++) {
    //        var orderGUID = $(anSelected[i]).find('#spnOrderGUID').text();
    //        if (stringIDs.length > 0)
    //            stringIDs += ',';

    //        stringIDs += orderGUID;
    //    }
    //    var obj = { SelectedIDs: stringIDs, ModuleName: 'PurchaseOrder' }
    //    return obj;
    //}


    $('#deleteRows').click(function () {

        if ($("body").hasClass('DTTT_Print')) {
            return false;
        }
        var deleteURL = "/Order/DeleteOrderMasterRecords";
        var anSelectedOrders = fnGetSelected(oTable);
        var stringOrderIDs = "";
        if (anSelectedOrders.length == 0) {
            //$("#spanGlobalMessage").text("Only UnSubmitted / Submitted record(s) can be deleted.");
            $("#spanGlobalMessage").html('@eTurns.DTO.ResCartItem.SelectOneRecrod');
            showNotificationDialog();
        }


        for (var i = 0; i <= anSelectedOrders.length - 1; i++) {
            var IsDeleteable = $(anSelectedOrders[i]).find('#spnIsableToDelete').text();

            if (IsDeleteable == 'true') {
                var orderID = $(anSelectedOrders[i]).find('#spnOrderMasterID').text();
                stringOrderIDs = stringOrderIDs + orderID + ",";
            }
        }
        if (stringOrderIDs.length !== 0) {
            $('#basic-modal-content').modal();
            IsDeletePopupOpen = true;
        }

    });

    //    $('#undeleteRows').click(function () {
    //        var anSelectedOrders = fnGetSelected(oTable);
    //        var stringOrderIDs = "";
    //        for (var i = 0; i <= anSelectedOrders.length - 1; i++) {
    //            var orderID = $(anSelectedOrders[i]).find('#spnOrderMasterID').text();
    //            stringOrderIDs = stringOrderIDs + orderID + ",";
    //        }
    //        if (stringOrderIDs.length !== 0) {
    //            $('#basic-Undelmodal-content').modal();
    //            IsDeletePopupOpen = true;
    //        }
    //    });

    function setCurrentRow() {

        var anSelectedRows = fnGetSelected(oTable);
        $('#divEditOrderLineItem').css('display', 'none');
        $('#btnDeleteReceived').css('display', 'none');

        if (anSelectedRows.length == 1) {
            var orderID = $(anSelectedRows).find('#spnOrderMasterID').text();
            var ostatus = $(anSelectedRows).find('#spnOrderStatus').text();
            var isDeleted = $(anSelectedRows).find('#spnIsDeleted').text();
            var isArchived = $(anSelectedRows).find('#spnIsArchived').text();
            var OrderIsInReceive = $(anSelectedRows).find('#spnOrderIsInReceive').text();
            var vNoOfItem = $(anSelectedRows).find('#spnhdnNoOfItem').text();
            var IsArchivedList = $('#IsArchivedRecords').is(':checked');

            if ((parseInt(ostatus) >= parseInt("@((int)OrderStatus.Transmitted)") && parseInt(ostatus) <= parseInt("@((int)OrderStatus.TransmittedInCompletePastDue)")) && isDeleted != 'Yes' && isArchived != 'Yes' && !IsArchivedList ) {
                if (parseInt(ostatus) == parseInt("@((int)OrderStatus.Transmitted)") && '@isChangeOrder' == 'True') {
                    $("#btnChangeOrder").css('display', '');
                    $('#btnChangeOrder').parent().css('right', '150px');
                }
                else {
                    $('#btnDeleteReceived').css('display', '');
                }
                $('#tab11').show();
            }
            else {
                $("#btnChangeOrder").css('display', 'none');
                $('#btnChangeOrder').parent().css('right', '208px');
                $("#btnChangeOrder").removeAttr("onclick");

                $('#tab11').hide();
                if (parseInt(ostatus) == parseInt("@((int)OrderStatus.Closed)") && isDeleted == "No" && !IsArchivedList ) {
                    $('#divEditOrderLineItem').css('display', '');
                    $('#btnDeleteReceived').css('display', '');
                    if (vNoOfItem > 0) {
                        $("#bntEditOrderLineItemsFromList").show();
                    }
                    else {
                        $("#bntEditOrderLineItemsFromList").hide();
                    }
                }
            }
        }
        else {
            $("#btnChangeOrder").css('display', 'none');
            $('#btnChangeOrder').parent().css('right', '208px');
            $("#btnChangeOrder").removeAttr("onclick");
            $('#tab11').hide();
        }
    }
    function setCloseButton() {
        $('#divEditOrderLineItem').css('display', 'none');
        $('#btnDeleteReceived').css('display', 'none');
    }
    function BlankSession(ID) {
        $.ajax({
            url: '@Url.Content("~/ProjectSpend/BlankSession")'
                                    , type: 'GET'
                                    , contentType: "application/json"
                                    , success: function (result) {
                                    },
            error: function (msg) {
            }
        });
    }

    $('#btnEditOrderReciept').live('click', function (e) {
        ClickFrom = 'CreateOrder';
        $('#divUnCloseOrderReceiptEdit').modal();
        $('.simplemodal-close').css('display', 'none');
    });

    $('#bntEditOrderLineItems').live('click', function (e) {
        ClickFrom = 'CreateOrder';
        $('#divUnCloseOrderLineItemEdit').modal();
        $('.simplemodal-close').css('display', 'none');
    });

    $(document).on('click', 'a#ancHideShowContent', function () {
        if ($('#ExpandedContent').css('display') == 'none') {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_open.jpg');
        }
    });



    function PrintAttachedDocs(lnk) {
        var rowSelected = fnGetSelected(oTable);
        var arrIds = new Array();
        if (rowSelected.length > 0) {
            for (var i = 0; i < rowSelected.length; i++) {
                var ReqGUID = $(rowSelected[i]).find('#spnOrderGUID').text();
                arrIds.push(ReqGUID);
            }
        }

        if (arrIds.length) {
            $.ajax({
                url: 'DownloadOrdersDocument',
                type: 'Post',
                data: JSON.stringify(arrIds),
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                success: function (result) {
                    if (result.Status) {
                        var isURLHttps = false;
                        var CurrentURL = window.location.href;
                        if (CurrentURL.indexOf("localhost:") < 0
                            && CurrentURL.toLowerCase().indexOf("demo") < 0) {
                            if (CurrentURL.indexOf("https:") >= 0) {
                                isURLHttps = true;
                            }
                        }

                        if (result.ReturnFiles.length > 0) {
                            for (var i = 0; i < result.ReturnFiles.length; i++) {
                                if (isURLHttps == false) {
                                    if (result.ReturnFiles[i].indexOf("https:") >= 0) {
                                        result.ReturnFiles[i] = result.ReturnFiles[i].replace("https:", "http:");
                                    }
                                }
                                if (isURLHttps == true) {
                                    if (result.ReturnFiles[i].indexOf("http:") >= 0) {
                                        result.ReturnFiles[i] = result.ReturnFiles[i].replace("http:", "https:");
                                    }
                                }
                                window.open(result.ReturnFiles[i]);
                            }
                        } else {
                        $("#spanGlobalMessage").removeClass('succesIcon errorIcon').addClass('WarningIcon');
                        $("#spanGlobalMessage").html('@ResCommon.NoDocsToDownload');
                        showNotificationDialog();
                    }
                    }
                },
                error: function (xhr) {
                    alert(MsgResErrorInProcess);
                }
            });
        }
        else {
            alert(MsgSelectRow);

        }
    }


</script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
