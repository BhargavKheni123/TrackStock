@model eTurns.DTO.ToolsSchedulerMappingDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Assets, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Assets, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    List<SelectListItem> lstitems = new List<SelectListItem>();

    SelectListItem objSelectListItem = new SelectListItem();
    objSelectListItem.Value = Convert.ToString((int)MaintenanceScheduleType.Mileage);
    objSelectListItem.Text = ResToolsScheduler.Mileage;
    lstitems.Add(objSelectListItem);


    objSelectListItem = new SelectListItem();
    objSelectListItem.Value = Convert.ToString((int)MaintenanceScheduleType.OperationalHours);
    objSelectListItem.Text = ResToolsScheduler.OperationalHours;
    lstitems.Add(objSelectListItem);

    SelectList lstTrackingmsrmnt = new SelectList(lstitems, "Value", "Text", "");

}
@using (Ajax.BeginForm("SchedulerMappingSave", "Tool", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmSchedulermapping" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    if (Model.ID != 0)
    {
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span>
                </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    @*: <span>@eTurnsWeb.Helper.CommonUtility.ToClientDateTime(Model.Created)</span></li>*@
                    : <span>@(Model.CreatedDate)</span>
                </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span>
                </li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    @*: <span>@eTurnsWeb.Helper.CommonUtility.ToClientDateTime(Model.Updated)</span></li>*@
                    : <span>@(Model.UpdatedDate)</span>
                </li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span>
                </li>
            </ul>
        </div>
    }

    <div class="editorForm">
        <ul>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.SchedulerFor)<em> *</em>
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.SchedulerFor, new SelectList(ViewBag.SheduleItemType, "ID", "Text", Model.SchedulerFor), "", new { @class = "selectBox", @style = "width:100px;", @id = "dlScheduleItemType" })
                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SchedulerFor)</span>
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Itemname)<em> *</em>
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.AssetToolGUID, new SelectList(ViewBag.SheduleAssetTool, "GUID", "Text", Model.AssetToolGUID), "", new { @class = "selectBox", @style = "width:200px;", @id = "ddlToolAsset" })
                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.AssetToolGUID)</span>
                </div>
            </li>

            @*<li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.SchedulerTypeName)
                    </div>
                    <div class="editor-field">
                        <fieldset id="divTimebased">
                            @Html.RadioButtonFor(model => model.SchedulerType, "1", new { @id = "rbScheduleType", @class = "checkbox" })
                            @Html.Label("Scheduled") @Html.Raw("&nbsp;&nbsp;")
                            @Html.RadioButtonFor(model => model.SchedulerType, "2", new { @id = "rbScheduleType", @class = "checkbox" })
                            @Html.Label("Unscheduled")@Html.Raw("&nbsp;&nbsp;")
                        </fieldset>
                    </div>
                </li>*@
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.SchedulerName)<em> *</em>
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.ToolSchedulerGuid, new SelectList(ViewBag.SchedulerForName, "GUID", "Text", Model.ToolSchedulerGuid), "", new { @class = "selectBox", @style = "width:200px;", @id = "ddlslScheduleName" })
                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ToolSchedulerGuid)</span>
                </div>
            </li>
            <li id="litrackingmsrmnt">
                <div class="editor-label">
                    @Html.LabelFor(model => model.TrackingMeasurement)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.TrackingMeasurement, lstitems, "", new { @class = "selectBox", @style = "width:200px;", @id = "ddlToolAsset" })
                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.AssetToolGUID)</span>
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.MaintenanceName)
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.MaintenanceName, new { id = "txtMaintenanceName", @class = "text-box", maxlength = 256 })
                    @Html.ValidationMessageFor(model => model.MaintenanceName)
                </div>
                @Html.HiddenFor(model => model.ID, new { id = "hiddenSchID" })
                @Html.HiddenFor(model => model.GUID)
                @Html.HiddenFor(model => model.Created)
                @Html.HiddenFor(model => model.Updated)
                @Html.HiddenFor(model => model.CreatedBy)
                @Html.HiddenFor(model => model.LastUpdatedBy)
                @Html.HiddenFor(model => model.CompanyID)
                @Html.HiddenFor(model => model.Room)
                @Html.HiddenFor(model => model.RoomName)
                @Html.HiddenFor(model => model.CreatedByName)
                @Html.HiddenFor(model => model.UpdatedByName)
                @Html.HiddenFor(model => model.IsDeleted)
                @Html.HiddenFor(model => model.IsArchived)
            </li>
            <li>
                <div class="editor-label">
                    &nbsp;
                </div>
                <div class="BtnBlockform">
                    <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                    @if (isInsert == true && Model.ID == 0)
                    {
                        <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                    }
                    @* else if (isUpdate == true)
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }*@
                </div>
            </li>
        </ul>
    </div>
    <div class="editorForm padRightNone">
        <ul>
            @Html.Partial("UDFLayout", new eTurns.DTO.ResToolsSchedulerMapping())
        </ul>
    </div>
}
<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        $("#litrackingmsrmnt").hide();
        $("#ddlslScheduleName").change(function () {
            if ($("#ddlslScheduleName").val() != "") {
                $.ajax({
                    url: '@Url.Action("GetSchedulByGUID", "Tool")'
                    , type: 'POST'
                    , data: "{ ScheduleGUID: '" + $("#ddlslScheduleName").val() + "'}"
                    , contentType: "application/json"
                    , success: function (result) {
                        if (result.SchedulerType == 1) {
                            $("#litrackingmsrmnt").show();
                        }
                        else {
                            $("#litrackingmsrmnt").hide();
                        }
                    }
                , error: function (msg) {

                }
                });
            }
            else {
                $("#litrackingmsrmnt").hide();
            }
        });
        GetItemsbasedOnScheduleFor($('#dlScheduleItemType option:selected').val());
        $('form').areYouSure();
        $.validator.unobtrusive.parse("#frmSchedulermapping");
        $('#dlScheduleItemType').change(function (e) {
            GetItemsbasedOnScheduleFor($('#dlScheduleItemType option:selected').val());
        });
        $('#btnCancel').click(function (e) {

            SwitchTextTab(0, 'ScheduleMappingCreate', 'frmSchedulermapping');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();

            }
        });
    });

    function GetItemsbasedOnScheduleFor(selectedVal) {
        var RequestURL = '@Url.Action("GetToolAsset", "Tool")';
        var URLToGetScheduler = '@Url.Action("GetToolAssetsScheduler", "Tool")';
        if (selectedVal == 1) {
            $("label[for='Itemname']").text('@ResAssetMaster.AssetName');
            RequestURL = '@Url.Action("GetAssets", "Assets")';
            URLToGetScheduler = '@Url.Action("GetAssetsScheduler", "Assets")';
        }
        else if (selectedVal == 2) {
            $("label[for='Itemname']").text('@ResToolMaster.ToolName');
            RequestURL = '@Url.Action("GetTools", "Tool")';
            URLToGetScheduler = '@Url.Action("GetToolsScheduler", "Tool")';
        }
        else {
            $("label[for='Itemname']").text('@ResToolsSchedulerMapping.Itemname');
            RequestURL = '@Url.Action("GetToolAsset", "Assets")';
            URLToGetScheduler = '@Url.Action("GetToolAssetsScheduler", "Assets")';
        }

        if (selectedVal >= 1) {
            //var selectedVal = $('#dlScheduleItemType option:selected').attr('value');

            $.ajax({
                url: RequestURL
                , type: 'GET'
                , data: { 'ScheduleType': selectedVal }
                , contentType: "application/json"
                , success: function (result) {
                    var items = "";
                    var maintenanceType = 0;
                    items += "<option value=''></option>";
                    $.each(result, function (i, result) {
                        if (result.Value == '@Model.ToolGUID' || result.Value == '@Model.AssetGUID') {
                            items += "<option selected='selected' value='" + result.Value + "'>" + result.Text + "</option>";
                        }
                        else {
                            items += "<option value='" + result.Value + "'>" + result.Text + "</option>";
                        }
                    });
                    $("#ddlToolAsset").html(items);

                    $.ajax({
                        url: URLToGetScheduler
                        , type: 'GET'
                        , data: { 'ScheduleType': selectedVal, 'ToolGUID': '@Model.ToolGUID', 'AssetGUID': '@Model.AssetGUID' }
                        , contentType: "application/json"
                        , success: function (result) {

                            var items = "";
                            items += "<option value=''></option>";
                            $.each(result, function (i, result) {
                                items += "<option value='" + result.Value + "'>" + result.Text + "</option>";
                            });
                            $("#ddlslScheduleName").html(items);
                        }
                        , error: function (msg) {

                        }
                    });
                }
            , error: function (msg) {

            }
            });


        }
        else {
            $("#ddlToolAsset").html('');
            $("#ddlslScheduleName").html('');
        }

    }
    function onSuccess(response) {
        IsRefreshGrid = true;

        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        //        var idValue = $("#hiddenID").val();

        //        if (response.Status == "fail") {
        //            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
        //            $("#AssetName").val("");
        //            $("#AssetName").focus();
        //        }
        //        else if (idValue == 0) {
        //            $("#AssetName").val("");
        //            $("#AssetName").focus();
        //            if (response.Status == "duplicate")
        //                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
        //            else {
        //                //                clearControls('frmAsset');
        //                //                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
        //                ShowNewTab('AssetCreate', 'frmAsset');
        //            }

        //        }
        //        else if (idValue > 0) {
        //            if (response.Status == "duplicate") {
        //                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
        //                $("#AssetName").focus();
        //            }
        //            else {
        //                clearControls('frmSchedulermapping');
        //                SwitchTextTab(0, 'AssetCreate', 'frmSchedulermapping');
        //            }
        //        }
        return false;
    }

</script>
