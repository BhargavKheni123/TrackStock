@model IEnumerable<eTurns.DTO.ToolMasterDTO>
@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    ViewBag.Title = ResToolMaster.PageTitle;
    var settings = new GridHeaderSettings() { DisplaySaveButton = false, ShowSelectAll = true, DisplayUDFButton = true, UDFSetupFor = "Tools&UDFHeader=" + @ResToolMaster.PageHeader, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "ToolListNew" };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ToolMasterNew", IDsufix = "_Tool", IDsufix2 = "_tech", ListName = "ToolMasterNew" };
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    bool AllowCheckinCheckOut = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowCheckInCheckout);
    bool isToolUDF = new eTurns.DAL.UDFDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetNonDeletedUDFCountByUDFTableName("ToolCheckInOutHistory", eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID) > 0;
    string ViewNewToolbuttons = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["ViewNewToolbuttons"]);
    if (string.IsNullOrWhiteSpace(ViewNewToolbuttons))
    {
        ViewNewToolbuttons = "no";
    }
    string ToolsPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Tools.pdf", DateTime.Now.Ticks);
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));
    string UNCPathRootLink2 = eTurns.DTO.SiteSettingHelper.ToolPhoto; // Settinfile.Element("ToolPhoto").Value;
    Int64 EnterpriseId = eTurnsWeb.Helper.SessionHelper.EnterPriceID;
    Int64 CompanyID = eTurnsWeb.Helper.SessionHelper.CompanyID;
    Int64 RoomID = eTurnsWeb.Helper.SessionHelper.RoomID;
    UNCPathRootLink2 = UNCPathRootLink2.Replace("~", string.Empty);
    string LogoPathImage = (UNCPathRootLink2 + EnterpriseId + "/" + CompanyID + "/" + RoomID);
    string TechnicianRequired = ResCommon.TechnicianRequired;
    string version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    bool AvailableTool = eTurnsWeb.Helper.SessionHelper.AllowToolOrdering;
    bool haveToolWrittenOffRights = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowToolWrittenOff);
    //HelpDocumentMasterDTO objHelpDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentMaster("Tools");
    //string ToolBasicVideo = "";
    //if (objHelpDTO != null)
    //{
    //    ToolBasicVideo = objHelpDTO.ModuleVideoPath.Replace("../Uploads/HelpVideo/", "");
    //}
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Tools", (int)HelpDocType.Module);
}
<style type="text/css">
    #myDataTable_wrapper div.top:first-child div.dataTables_length:first-child {
        top: -82px;
    }

    /*WI-2589 - Maintanance Checkbox not able to checked*/
    #myDataTable_paginate {
        top: -72px;
    }
    /*.dataTables_paginate {
        top: -72px;
    }*/
    /*WI-2589 - Maintanance Checkbox not able to checked*/

    .td-udfs {
        padding: 3px;
    }

    #tblPullCommonUDF .selectBox {
        width: 90% !important;
    }

    #tblPullCommonUDF .text-boxinner {
        width: 90% !important;
    }

    .tblPullCommonUDFthead {
        padding-right: 5px;
        padding-left: 5px;
    }
</style>

@*<link rel="stylesheet" type="text/css" href="@Url.Content(" ~/Content/tabstyle.css")" />*@
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script language="javascript" type="text/javascript">
        var DrillDownItemGuid = '';
        var DrillDownBinId = '';
        var ToolIDToOpen = '';
        var ArrToolColumns = new Array();
        var allowCheckinCheckOut = false;
        var PullToolQuantityUrl = '@Url.Action("CheckOutPullQuantity", "Tool")';
        var PullToolLotSrSelectionUrl = '@Url.Content("~/Tool/PullToolLotSrSelection")';
        var BoolTrueString = '@Boolean.TrueString';
        var ValidateSerialLotNumberUrl = '@Url.Action("ValidateSerialLotNumber", "Tool")';
        var WrittenOffToolURL = '@Url.Action("WrittenOffTool", "Tool")';
        var msgSelectToolToWrittenOff = '@ResMessage.SelectRecordToWrittenOff'
        var msgAvailableQtyCantBeLessThanOne = '@ResToolMaster.AvailableQtyCantBeLessThanOne';
        var msgQtyNotAvailableToWrittenOff = '@ResToolMaster.QtyNotAvailableToWrittenOff';
        var msgWrittenOffOnlyAvailableQty = '@ResToolMaster.WrittenOffOnlyAvailableQty';
        var ohq = 0;
        var msgInvalidTechnician = '@ResToolCheckInOutHistory.MsgRemoveInvalidValueFromTechnician';
        var MsgInsertProperQuantityValue = '@ResAssetMaster.MsgInsertProperQuantityValue';
        var MsgKindlyFillTechnician = '@ResTechnician.MsgKindlyFillTechnician';
        var MsgInvalidTechnician = '@ResTechnician.MsgInvalidTechnician';
        var MsgCheckinCheckoutValidation = '@ResAssetMaster.MsgCheckinCheckoutValidation';
        var MsgInvalidOperationNoCheckout = '@ResAssetMaster.MsgInvalidOperationNoCheckout';
        var MsgNoQuantityForCheckout = '@ResToolMaster.MsgNoQuantityForCheckout';
        var MsgCheckoutOnlyAvailableQuantity = '@ResToolMaster.MsgCheckoutOnlyAvailableQuantity';
        var MsgRecordSucessfullyUpdated = '@ResCommon.MsgRecordSucessfullyUpdated';
        var MsgAllPulldone = '@ResPullMaster.AllPulldon';
        var MsgCheckoutDoneSuccess = '@ResToolMaster.MsgCheckoutDoneSuccess';
        var MsgRescommonError = '@ResCommon.ErrorInProcess';
        var MsgPullDoneSuccess = '@ResToolMaster.MsgPullDoneSuccess';
        var MsgNoPullReasons = '@ResToolMaster.MsgNoPullReasons';
        var MsgCheckoutMoreQuantityValidation = '@ResToolMaster.MsgCheckoutMoreQuantityValidation';
        var MsgPullMoreQuantityValidation = '@ResToolMaster.MsgPullMoreQuantityValidation';
        var MsgPullCreditQuantity = '@ResToolMaster.MsgPullCreditQuantity';
        var MsgRowShouldExists = '@ResToolMaster.MsgRowShouldExists';
        var MsgSelectToolToCheckIn = '@ResToolMaster.MsgSelectToolToCheckIn';
        var MsgSelectToolMainGridCheckIn = '@ResToolMaster.MsgSelectToolMainGridCheckIn';
        var MsgEnterQuantityToCheckIn = '@ResToolMaster.MsgEnterQuantityToCheckIn';
        var MsgInsertQuantityCheckOut = '@ResToolMaster.MsgInsertQuantityCheckOut';
        var MsgSelectRecordCheckout = '@ResToolMaster.MsgSelectRecordCheckout';
        var SelectProperRecordToCheckout = '@ResToolMaster.SelectProperRecordToCheckout';


        if ('@AllowCheckinCheckOut' == 'True') {
            allowCheckinCheckOut = true;
        }

        ArrToolColumns.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });
        ArrToolColumns.push({ mDataProp: "ID", sClass: "read_only" });
        ArrToolColumns.push({
            mDataProp: null,
            bSortable: false,
            sClass: "read_only control alignCenter",
            sDefaultContent: '',
            fnRender: function (obj, val) {
                var Qty = isNaN(parseInt(obj.aData.Quantity)) ? 0 : obj.aData.Quantity;
                var CheckedoutQty = isNaN(parseInt(obj.aData.CheckedOutQTY)) ? 0 : obj.aData.CheckedOutQTY;
                var CheckedOutMQTY = isNaN(parseInt(obj.aData.CheckedOutMQTY)) ? 0 : obj.aData.CheckedOutMQTY;
                var availQty = Qty - (parseInt(CheckedoutQty) + parseInt(CheckedOutMQTY));
                var SerialNumberTracking = obj.aData.SerialNumberTracking;

                if (((Qty > availQty)) && !obj.aData.IsDeleted) {
                    return '<img class="Expand" src="' + sImageUrl + 'drildown_open.jpg' + '"><input type="hidden" value="' + obj.aData.IsCheckOutSerialAvailable + '" id="hdnIsCheckOutSerialAvailable" />';
                }
                else {
                    return '';
                }

            }
        });
        ArrToolColumns.push({
            mDataProp: null, sClass: "read_only alignCenter", bSortable: false, sDefaultContent: '', fnRender: function (obj, val) {
                if (allowCheckinCheckOut) {
                    var MCheckOutQTY = obj.aData.CheckedOutMQTY == null ? 0 : obj.aData.CheckedOutMQTY;
                    var CheckOutQTY = obj.aData.CheckedOutQTY == null ? 0 : obj.aData.CheckedOutQTY;
                    var ToolTrackQty = obj.aData.SerialNumberTracking;
                    var Qty;
                    if (isNaN(parseInt(obj.aData.Quantity))) {
                        $("#DivTmpSpan").append(obj.aData.Quantity);
                        var Qty = (isNaN(parseInt($("#spnQty" + obj.aData.GUID).text())) ? 0 : parseInt($("#spnQty" + obj.aData.GUID).text()));
                        $("#DivTmpSpan").empty();
                    }
                    else {
                        Qty = obj.aData.Quantity;
                    }

                    if ((parseInt(Qty) - (parseInt(CheckOutQTY) + parseInt(MCheckOutQTY))) > 0 && !obj.aData.IsDeleted) {
                        if (ToolTrackQty == false) {
                            return "<span id='spnCheckOutStatus' style='display:none'>" + obj.aData.CheckOutStatus + "</span>" + "<span id='spnCheckedOutQTY' style='display:none'>" + obj.aData.CheckedOutQTY + "</span><span id='spnCheckedOutMQTY' style='display:none'>" + obj.aData.CheckedOutMQTY + "</span>" + "<span id='spnCheckInCheckOutID'  style='display:none'>" + obj.aData.CheckInCheckOutID + "</span>" + "<span id='spnQuantity'  style='display:none'>" + Qty + "</span>" + "<span id='spnToolID'  style='display:none'>" + obj.aData.GUID + "</span>" + "<span id='spnToolPKID'  style='display:none'>" + obj.aData.ID + "</span>" + "<input type='button' value='Check Out' id='btnCheckOut' onclick='return PerformTCICO(this,2);' class='CreateBtn pull' />" + "<span id='spnToolType'  style='display:none'>" + obj.aData.Type + "</span><span id='spnToolIsBuildBreak' style='display:none'>" + obj.aData.IsBuildBreak + "</span>";
                        }
                        else {
                            //return "<input type='button' value='CheckOut' onclick='return OpenCheckOutPopup(this);' id='btnCheckOut' class='CreateBtn pull' value='Check Out' />" + "<span id='spnToolPKID' style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnOn_HandQuantity' style='display:none'>" + obj.aData.OnHandQuantity + "</span>" + "<span id='spnOrderItemType'  style='display:none'>" + obj.aData.Type + "</span><span id='spnToolType'  style='display:none'>" + obj.aData.Type + "</span>";
                            return "<span id='spnCheckOutStatus' style='display:none'>" + obj.aData.CheckOutStatus + "</span>" + "<span id='spnCheckedOutQTY' style='display:none'>" + obj.aData.CheckedOutQTY + "</span><span id='spnCheckedOutMQTY' style='display:none'>" + obj.aData.CheckedOutMQTY + "</span>" + "<span id='spnCheckInCheckOutID'  style='display:none'>" + obj.aData.CheckInCheckOutID + "</span>" + "<span id='spnQuantity'  style='display:none'>" + Qty + "</span>" + "<span id='spnToolID'  style='display:none'>" + obj.aData.GUID + "</span>" + "<span id='spnToolPKID'  style='display:none'>" + obj.aData.ID + "</span>" + "<input type='button' value='CheckOut' onclick='return OpenCheckOutPopup(this);' id='btnCheckOut' class='CreateBtn pull' value='Check Out' />" + "<span id='spnToolType'  style='display:none'>" + obj.aData.Type + "</span><span id='spnToolIsBuildBreak' style='display:none'>" + obj.aData.IsBuildBreak + "</span><span id='spnOn_HandQuantity' style='display:none'>" + obj.aData.OnHandQuantity + "</span>";
                        }
                    }
                    else {
                        return "<span id='spnCheckOutStatus' style='display:none'>" + obj.aData.CheckOutStatus + "</span>" + "<span id='spnCheckedOutQTY' style='display:none'>" + obj.aData.CheckedOutQTY + "</span><span id='spnCheckedOutMQTY' style='display:none'>" + obj.aData.CheckedOutMQTY + "</span>" + "<span id='spnCheckInCheckOutID'  style='display:none'>" + obj.aData.CheckInCheckOutID + "</span>" + "<span id='spnQuantity'  style='display:none'>" + Qty + "</span>" + "<span id='spnToolID'  style='display:none'>" + obj.aData.GUID + "</span>" + "<span id='spnToolPKID'  style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnToolType'  style='display:none'>" + obj.aData.Type + "</span><span id='spnToolIsBuildBreak' style='display:none'>" + obj.aData.IsBuildBreak + "</span>";
                    }
                }
                else {
                    return "<span id='spnCheckOutStatus' style='display:none'>" + obj.aData.CheckOutStatus + "</span>" + "<span id='spnCheckedOutQTY' style='display:none'>" + obj.aData.CheckedOutQTY + "</span><span id='spnCheckedOutMQTY' style='display:none'>" + obj.aData.CheckedOutMQTY + "</span>" + "<span id='spnCheckInCheckOutID'  style='display:none'>" + obj.aData.CheckInCheckOutID + "</span>" + "<span id='spnQuantity'  style='display:none'>" + Qty + "</span>" + "<span id='spnToolID'  style='display:none'>" + obj.aData.GUID + "</span>" + "<span id='spnToolPKID'  style='display:none'>" + obj.aData.ID + "</span>" + "<span id='spnToolType'  style='display:none'>" + obj.aData.Type + "</span><span id='spnToolIsBuildBreak' style='display:none'>" + obj.aData.IsBuildBreak + "</span>";
                }
            }
        });
        ArrToolColumns.push({
            mDataProp: null,
            bSortable: false,
            sClass: "read_only alignCenter",
            sDefaultContent: '',
            fnRender: function (obj, val) {
                if (allowCheckinCheckOut) {
                    var Qty;
                    if (isNaN(parseInt(obj.aData.Quantity))) {
                        $("#DivTmpSpan").append(obj.aData.Quantity);
                        var Qty = (isNaN(parseInt($("#spnQty" + obj.aData.GUID).text())) ? 0 : parseInt($("#spnQty" + obj.aData.GUID).text()));
                        $("#DivTmpSpan").empty();
                    }
                    else {
                        Qty = obj.aData.Quantity;
                    }

                    var CheckedoutQty = isNaN(parseInt(obj.aData.CheckedOutQTY)) ? 0 : obj.aData.CheckedOutQTY;
                    var CheckedOutMQTY = isNaN(parseInt(obj.aData.CheckedOutMQTY)) ? 0 : obj.aData.CheckedOutMQTY;

                    if ((Qty - (parseInt(CheckedoutQty) + parseInt(CheckedOutMQTY))) > 0 && !obj.aData.IsDeleted) {
                        return "<input type='checkbox' id='chkMaintance' name='manintancechk' value='maintanence' />";
                    }
                    else
                        return "";
                }
            }
        });
        ArrToolColumns.push({
            mDataProp: null,
            bSortable: false,
            sClass: "read_only control center NotHide",
            sDefaultContent: '',
            fnRender: function (obj, val) {
                var Qty;
                if (isNaN(parseInt(obj.aData.Quantity))) {
                    $("#DivTmpSpan").append(obj.aData.Quantity);
                    var Qty = (isNaN(parseInt($("#spnQty" + obj.aData.GUID).text())) ? 0 : parseInt($("#spnQty" + obj.aData.GUID).text()));
                    $("#DivTmpSpan").empty();
                }
                else {
                    Qty = obj.aData.Quantity;
                }
                var CheckedoutQty = isNaN(parseInt(obj.aData.CheckedOutQTY)) ? 0 : obj.aData.CheckedOutQTY;
                var CheckedOutMQTY = isNaN(parseInt(obj.aData.CheckedOutMQTY)) ? 0 : obj.aData.CheckedOutMQTY;
                if ((Qty - (CheckedoutQty + CheckedOutMQTY)) > 0) {
                    if (obj.aData.IsGroupOfItems == 0) {
                        return "<input type='text' value='" + 1 + "' class='numericinput numericalign' onkeypress='return false;'  id='txtQty' style='width:93%;disabled:true;' />";
                    }
                    else {
                        return "<input type='text' value='1' class='numericinput numericalign' onkeypress='return onlyNumeric(event)'  id='txtQty' style='width:93%;' />";
                    }
                }
                else
                    return "";
            }
        });
        ArrToolColumns.push({
            mDataProp: "Quantity", sClass: "read_only numericalign",
            sDefaultContent: '',
            fnRender: function (obj, val) {
                var spnid = "spnQty" + obj.aData.GUID;
                ohq = obj.aData.Quantity;
                return "<span id=" + spnid + ">" + FormatedCostQtyValues(obj.aData.Quantity, 2) + "</span>";
            }
        });
        ArrToolColumns.push({
            mDataProp: null,
            bSortable: false,
            sClass: "read_only center numericalign",
            sDefaultContent: '',
            fnRender: function (obj, val) {

                var spniAQd = "spnAvailQty" + obj.aData.GUID;
                //return FormatedCostQtyValues((obj.aData.Quantity - (obj.aData.CheckedOutQTY + obj.aData.CheckedOutMQTY)), 2);
                var Qty;
                if (isNaN(parseInt(obj.aData.Quantity))) {
                    $("#DivTmpSpan").append(obj.aData.Quantity);
                    var Qty = (isNaN(parseInt($("#spnQty" + obj.aData.GUID).text())) ? 0 : parseInt($("#spnQty" + obj.aData.GUID).text()));
                    $("#DivTmpSpan").empty();
                }
                else {
                    Qty = obj.aData.Quantity;
                }
                var CheckedOutQTY = parseFloat(obj.aData.CheckedOutQTY);
                var CheckedOutMQTY = parseFloat(obj.aData.CheckedOutMQTY);
                if (!isNaN(Qty) && !isNaN(CheckedOutQTY) && !isNaN(CheckedOutMQTY)) {
                    return "<span id=" + spniAQd + ">" + FormatedCostQtyValues((Qty - (CheckedOutQTY + CheckedOutMQTY)), 2) + "</span>";
                }
                else if (!isNaN(Qty) && !isNaN(CheckedOutQTY)) {
                    return "<span id=" + spniAQd + ">" + FormatedCostQtyValues((Qty - (CheckedOutQTY)), 2) + "</span>";
                }
                else if (!isNaN(Qty) && !isNaN(CheckedOutMQTY)) {
                    return "<span id=" + spniAQd + ">" + FormatedCostQtyValues((Qty - (CheckedOutMQTY)), 2) + "</span>";
                }
                else if (!isNaN(Qty)) {
                    return "<span id=" + spniAQd + ">" + FormatedCostQtyValues((Qty), 2) + "</span>";
                }
                else {
                    return "<span id=" + spniAQd + ">" + FormatedCostQtyValues(0, 2) + "</span>";
                }

            }
        });
        ArrToolColumns.push({
            mDataProp: "ToolName",
            sClass: "read_only",
            sDefaultContent: '',
            bSortable: true,
            "bSearchable": false,
            fnRender: function (obj, val) {
                return "<a onclick='return ShowEditTab(&quot;ToolEdit/" + obj.aData.ID + "&quot;,&quot;frmTool&quot;)' id='ToolName' href='JavaScript:void(0);'>" + obj.aData.ToolName + "</a>" + " <input type='hidden' id='hdnGUID' value='" + obj.aData.GUID.toString() + "' />" + "<span id='spnToolMasterID' style='display:none'>" + obj.aData.ID + "</span><span id='spnToolTypeTracking' style='display:none'>" + obj.aData.ToolTypeTracking + "</span><span id='spnItemGUID' style='display:none'>" + obj.aData.GUID + "</span><span id='spnToolSerialNumberTracking' style='display:none'>" + obj.aData.SerialNumberTracking + "</span><span id='spnToolLotNumberTracking' style='display:none'>" + obj.aData.LotNumberTracking + "</span><span id='spnToolDateCodeTracking' style='display:none'>" + obj.aData.DateCodeTracking + "</span>";
            }
        });
        ArrToolColumns.push({
            mDataProp: "CheckedOutQTY", sClass: "read_only numericalign",
            sDefaultContent: '',
            fnRender: function (obj, val) {
                if (obj.aData.CheckedOutQTY != null) {
                    return FormatedCostQtyValues((obj.aData.CheckedOutQTY), 2);
                }
                else {
                    return FormatedCostQtyValues((0), 2);
                }
            }
        });
        ArrToolColumns.push({
            mDataProp: "CheckedOutMQTY", sClass: "read_only numericalign",
            sDefaultContent: '',
            fnRender: function (obj, val) {
                if (obj.aData.CheckedOutMQTY != null) {
                    return FormatedCostQtyValues((obj.aData.CheckedOutMQTY), 2);
                }
                else {
                    return FormatedCostQtyValues((0), 2);
                }

            }
        });

        ArrToolColumns.push({ mDataProp: "Serial", sClass: "read_only" });
        ArrToolColumns.push({ mDataProp: "Description", sClass: "read_only" });
        ArrToolColumns.push({
            mDataProp: "IsGroupOfItems", sClass: "read_only"
            , fnRender: function (obj, val) {
                if (val == 0)
                    return "No";
                else if (val == 1)
                    return "Yes";
                else
                    return "";
            }
        });

        ArrToolColumns.push({
            mDataProp: "Cost", sClass: "read_only numericalign isCost",
            fnRender: function (obj, val) {
                //return GetDateInFullFormat(val);

                if (obj.aData.Cost != null && obj.aData.Cost != '') {
                    return FormatedCostQtyValues(obj.aData.Cost, 1);
                }
                else {
                    return '';
                }
            }
        });
        ArrToolColumns.push({ mDataProp: "ToolCategory", sClass: "read_only" });
        ArrToolColumns.push({ mDataProp: "DefaultLocationName", sClass: "read_only" });
        //ArrToolColumns.push({ mDataProp: "RoomName", sClass: "read_only" });
        ArrToolColumns.push({
            mDataProp: "Created", sClass: "read_only",
            fnRender: function (obj, val) {
                //return GetDateInFullFormat(val);
                return obj.aData.CreatedDate;
            }
        });
        ArrToolColumns.push({
            mDataProp: "Updated", sClass: "read_only",
            fnRender: function (obj, val) {
                //return GetDateInFullFormat(val);
                return obj.aData.UpdatedDate;
            }
        });
        ArrToolColumns.push({ mDataProp: "UpdatedByName", sClass: "read_only" });
        ArrToolColumns.push({ mDataProp: "CreatedByName", sClass: "read_only" });
        ArrToolColumns.push({ mDataProp: "AddedFrom", sClass: "read_only" });
        ArrToolColumns.push({ mDataProp: "EditedFrom", sClass: "read_only" });
        ArrToolColumns.push({
            mDataProp: "ReceivedOn", sClass: "read_only",
            fnRender: function (obj, val) {
                return obj.aData.ReceivedOnDate;
            }
        });
        ArrToolColumns.push({
            mDataProp: "ReceivedOnWeb", sClass: "read_only",
            fnRender: function (obj, val) {
                return obj.aData.ReceivedOnDateWeb;
            }
        });
        ArrToolColumns.push({
            mDataProp: "TechnicianList", sClass: "read_only", bSortable: false,
            fnRender: function (obj, val) {
                var strReturn = '<span style="position:relative"><input type="text" id="txtTechnician" class="text-boxinner AutoTechnician" style = "width:93%;" value="' + '@eTurns.DTO.Resources.ResCommon.SelectTechnicianText' + '" />';
                strReturn = strReturn + ' <input type="hidden" id="TechnicianGUID" value="" />';
                strReturn = strReturn + ' <a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;" class="ShowAllOptions" ><img src="/Content/images/arrow_down_black.png" alt="select" /></a></span>';
                return strReturn

            }
        });
        ArrToolColumns.push({
            "mDataProp": "ImagePath", sClass: "read_only", "bVisible": false, "fnRender": function (obj, val) {

                if ((obj.aData.ImagePath != '' && obj.aData.ImagePath != null) || (obj.aData.ToolImageExternalURL != '' && obj.aData.ToolImageExternalURL != null)) {

                    if (obj.aData.ImagePath != '' && obj.aData.ImagePath != null) {
                        // var path = '@eTurnsWeb.Helper.SessionHelper.CompanyID.ToString()';
                        var path = '@LogoPathImage';
                        @*var entid = '@eTurnsWeb.Helper.SessionHelper.EnterPriceID.ToString()';
                        var companyid = '@eTurnsWeb.Helper.SessionHelper.CompanyID.ToString()';
                        var roomid = '@eTurnsWeb.Helper.SessionHelper.RoomID.ToString()';*@


                        return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + path + "/" + obj.aData.ID + "/" + obj.aData.ImagePath + '">';
                    }
                    else if (obj.aData.ToolImageExternalURL != '' && obj.aData.ToolImageExternalURL != null) {
                        return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + obj.aData.ToolImageExternalURL + '">';
                    }
                    else {
                        return "<img src='../Content/images/no-image.jpg' />";
                    }
                }
                else {
                    return "<img src='../Content/images/no-image.jpg' />";
                }
            }
        });
        ArrToolColumns.push({
            mDataProp: null,
            bSortable: false,
            sClass: "read_only control center NotHide ",
            sDefaultContent: '',
            fnRender: function (obj, val) {

                var Qty = isNaN(parseInt(ohq)) ? 0 : ohq;
                var CheckedoutQty = isNaN(parseInt(obj.aData.CheckedOutQTY)) ? 0 : obj.aData.CheckedOutQTY;
                var CheckedOutMQTY = isNaN(parseInt(obj.aData.CheckedOutMQTY)) ? 0 : obj.aData.CheckedOutMQTY;

                //if ((Qty - (CheckedoutQty + CheckedOutMQTY)) < Qty) {
                if (CheckedoutQty > 0 || CheckedOutMQTY > 0) {
                    if (obj.aData.IsGroupOfItems == 0) {
                        return "<input type='text' value='" + 1 + "' class='numericinput numericalign' onkeypress='return false;'  id='txtCheckInQty' style='width:93%;disabled:true;display:none;' />";
                    }
                    else {

                        if ((CheckedoutQty + CheckedOutMQTY) == 1 || obj.aData.CheckedOutQTYTotal == 1) {
                            return " <input type='text' value='1' class='numericinput numericalign' onkeypress='return onlyNumeric(event)'  id='txtCheckInQty' style='width:93%;display:none;' />";
                        }
                        else {
                            return " <input type='text' value='' class='numericinput numericalign' onkeypress='return onlyNumeric(event)'  id='txtCheckInQty' style='width:93%;display:none;' />";
                        }
                    }
                }
                else
                    return "";
            }
        });
        ArrToolColumns.push({
            mDataProp: null,
            bSortable: false,
            sClass: "read_only center",
            sDefaultContent: '',
            fnRender: function (obj, val) {
                if (obj.aData.Type == 1) {
                    return "Tool";
                }
                else {
                    return "Kit Tool";
                }

            }
        });
        ArrToolColumns.push({
            mDataProp: null,
            bSortable: false,
            sClass: "read_only control alignCenter",
            sDefaultContent: ''
             , fnRender: function (obj, val) {
                 return obj.aData.ToolTypeTrackingStr;
             }
        });
        ArrToolColumns.push({
            mDataProp: null,
            bSortable: false,
            sClass: "read_only control alignCenter",
            sDefaultContent: '',
            fnRender: function (obj, val) {
                return '<img class="ExpandLocationSerials" src="' + sImageUrl + 'drildown_open.jpg' + '"><input type="hidden" value="' + obj.aData.IsSerialAvailable + '" id="hdnIsSerialAvail" />';
            }
        });
        ArrToolColumns.push({
            "mDataProp": null,
            "sClass": "read_only NotHide",
            "bSortable": true,
            "bSearchable": false,
            "sDefaultContent": '',
            "fnRender": function (obj, val) {
                //var ToolTypeTracking = obj.aData.ToolTypeTracking == "" ? "1" : obj.aData.ToolTypeTracking;
                // if (ToolTypeTracking.indexOf("2") >= 0)
                {

                    {
                        var vDefaultLocationName = '';
                        if (obj.aData.ItemType != 4) {
                            vDefaultLocationName = obj.aData.Location;
                        }

                        vDefaultLocationName = ((obj.aData.Location != undefined && obj.aData.Location != null && obj.aData.Location != "") ? obj.aData.Location : obj.aData.Location);
                        if (vDefaultLocationName == null) {
                            vDefaultLocationName = '';
                        }
                        var strReturn = '<span style="display:none">"' + vDefaultLocationName + '"</span><span style="position:relative"><input type="text" id="txtBinNumber" class="text-boxinner AutoPullBins bin-input-readonly" style = "width:93%;" value="' + vDefaultLocationName + '" />';
                        var binID = obj.aData.DefaultLocation;

                        binID = ((obj.aData.BinID != undefined && obj.aData.BinID != null && obj.aData.BinID != "" && obj.aData.BinID > 0) ? obj.aData.BinID : obj.aData.DefaultLocation);

                        if (isNaN(parseInt(binID)) || parseInt(binID) <= 0)
                            binID = '';

                        strReturn = strReturn + ' <input type="hidden" id="BinID" value="' + binID + '" />';
                        strReturn = strReturn + ' <a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;" class="ShowAllOptionsBin" ><img src="/Content/images/arrow_down_black.png" alt="select" /></a></span>';
                        return strReturn
                    }
                }
                //else
                //{
                //    return '';
                //}

            }
        });
        ArrToolColumns.push(@Html.RenderColumnsArray("ToolMaster", false, "Tool"));
        ArrToolColumns.push(@Html.RenderColumnsArrayEditableObject("ToolCheckInOutHistory", false, isUDFOrderRequire: true));


        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Tool/DeleteToolRecords";
        var sImageUrl = "/Content/images/";
        var anOpen = [];
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var SelectedHistoryRecordID = 0;
        var HistorySelected;
        HasScheduleTab = true;
        var objColumns = {};
        var masterGridColumns = {};
        //var ToolGridColumns = {};
        var TopGlobalSearch = '';

        $(document).ready(function () {

            if ('@AvailableTool' == 'True') {
                AllowNewTool = true;
            }
            $('#myDataTable').on('focus', "input.AutoTechnician", function (e) {
                var ajaxURL = '/Tool/GetTechnician';
                var tr = $(this).parent().parent().parent();
                var itmGuid = $(tr).find('#hdnGUID').text();
                var stagName = '';
                $(this).autocomplete({
                    source: function (request, response) {
                        $('#DivLoading').show()
                        $.ajax({
                            url: ajaxURL,
                            type: 'POST',
                            data: JSON.stringify({ 'NameStartWith': request.term }),
                            contentType: 'application/json',
                            dataType: 'json',
                            success: function (data) {
                                $('#DivLoading').hide()
                                response($.map(data, function (Items) {
                                    return {
                                        label: Items.Value,
                                        value: Items.Key,
                                        id: Items.GUID
                                    }
                                }));
                            },
                            error: function (err) {
                                $('#DivLoading').hide();
                            }
                        });
                    },
                    autoFocus: false,
                    minLength: 1,
                    select: function (event, ui) {
                        $(this).val(ui.item.value);
                        if ($.trim(ui.item.value).length > 0) {

                            if ($(this).parent().find('#TechnicianGUID') != undefined)
                                $(this).parent().find('#TechnicianGUID').val(ui.item.id);
                        }
                        else {
                            $(this).parent().find('#TechnicianGUID').val('');
                        }
                    },
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    },
                    close: function () {
                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                    },
                    change: function (event, ui) {
                        if (ui.item != null && ui.item != undefined && $.trim(ui.item.id).length > 0) {
                            if ($(this).parent().find('#TechnicianGUID') != undefined)
                                $(this).parent().find('#TechnicianGUID').val(ui.item.id);
                        }
                        else {
                            $(this).parent().find('#TechnicianGUID').val('');
                        }
                    }
                });
            });
            $('body').on('focus', "input.UseThisAutoTechnician", function (e) {
                var ajaxURL = '/Tool/GetTechnician';
                var tr = $(this).parent().parent().parent();
                var itmGuid = $(tr).find('#spnItemGUID').text();
                var stagName = '';
                $(this).autocomplete({
                    source: function (request, response) {
                        $('#DivLoading').show()
                        $.ajax({
                            url: ajaxURL,
                            type: 'POST',
                            data: JSON.stringify({ 'NameStartWith': request.term }),
                            contentType: 'application/json',
                            dataType: 'json',
                            success: function (data) {
                                $('#DivLoading').hide()
                                response($.map(data, function (Items) {
                                    return {
                                        label: Items.Value,
                                        value: Items.Key,
                                        id: Items.GUID
                                    }
                                }));
                            },
                            error: function (err) {
                                $('#DivLoading').hide();
                            }
                        });
                    },
                    autoFocus: false,
                    minLength: 1,
                    select: function (event, ui) {
                        $(this).val(ui.item.value);
                        if ($.trim(ui.item.value).length > 0) {

                            if ($(this).parent().find('#UseThisTechnicianGUID') != undefined)
                                $(this).parent().find('#UseThisTechnicianGUID').val(ui.item.id);
                        }
                        else {
                            $(this).parent().find('#UseThisTechnicianGUID').val('');
                        }
                    },
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    },
                    close: function () {
                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                    },
                    change: function (event, ui) {
                        if (ui.item != null && ui.item != undefined && $.trim(ui.item.id).length > 0) {
                            if ($(this).parent().find('#UseThisTechnicianGUID') != undefined)
                                $(this).parent().find('#UseThisTechnicianGUID').val(ui.item.id);
                        }
                        else {
                            $(this).parent().find('#UseThisTechnicianGUID').val('');
                        }
                    }
                });
            });
            $('.UseThisShowAllOptions').click(function () {
                $(this).siblings('.UseThisAutoTechnician').trigger("focus");
                $(this).siblings(".UseThisAutoTechnician").autocomplete("search", " ");
            });
            $('#myDataTable').on('focus', "input.AutoPullBins", function (e) {
                var ajaxURL = '/Tool/GetToolLocationsForCheckOut';
                var tr = $(this).parent().parent().parent();
                var tolGuid = $(tr).find('#hdnGUID').val();
                var stagName = '';

                $(this).autocomplete({
                    source: function (request, response) {
                        $('#DivLoading').show()
                        $.ajax({
                            url: ajaxURL,
                            type: 'POST',
                            data: JSON.stringify({ 'ToolGuid': tolGuid, 'NameStartWith': request.term }),
                            contentType: 'application/json',
                            dataType: 'json',
                            success: function (data) {
                                $('#DivLoading').hide()

                                response($.map(data, function (Items) {
                                    return {
                                        label: Items.Value,
                                        value: Items.Value,
                                        id: Items.ID
                                    }
                                }));
                            },
                            error: function (err) {
                                $('#DivLoading').hide();
                            }
                        });
                    },
                    autoFocus: false,
                    minLength: 1,
                    select: function (event, ui) {
                        $(this).val(ui.item.value);
                        if (ui.item != null && ui.item != undefined && $.trim(ui.item.id).length > 0 && $.trim(ui.item.value).length > 0) {
                            $(this).parent().find('#BinID').val(ui.item.id);
                        }
                        else {
                            $(this).parent().find('#BinID').val('');
                        }
                    },
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    },
                    close: function () {
                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                    },
                    change: function (event, ui) {

                    }
                });
            });
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            masterGridColumns = objColumns;
            //ToolGridColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "100%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (typeof (ToolTechnicianValue) != undefined && typeof (ToolTechnicianValue) != "undefined") {
                        if (ToolTechnicianValue.length == 1) {
                            $(nRow).find("input#txtCheckInQty").show();
                        }
                        else {
                            $(nRow).find("input#txtCheckInQty").hide();
                        }
                    }
                    if (aData.IsDeleted == true && aData.IsArchived == true)
                        // nRow.className = "GridDeleatedArchivedRow";
                        $(nRow).css('background-color', '#B9BCBF');
                    else if (aData.IsDeleted == true)
                        //nRow.className = "GridDeletedRow";
                        $(nRow).css('background-color', '#FFCCCC');
                    else if (aData.IsArchived == true)
                        // nRow.className = "GridArchivedRow";
                        $(nRow).css('background-color', '#CCFFCC');
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    //if (PostCount > 1) {
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'ToolListNew' }, //ToolListNew
                        "async": false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                    //}
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'ToolListNew' }, //ToolListNew
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Tool/ToolListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    //PostCount = PostCount + 1;
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    if (oSettings.aaSorting.length != 0)
                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                    aoData.push({ "name": "ToolType", "value": "1,2" });
                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        cache: false,
                        "url": sSource,
                        "data": aoData,
                        "headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.ShowAllOptions').click(function () {
                                $(this).siblings('.AutoTechnician').trigger("focus");
                                $(this).siblings(".AutoTechnician").autocomplete("search", " ");
                            });
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                            $("input[type='radio']").filter('[value=ci]').attr('checked', 'checked');

                            if ($("#global_filter").val().length > 0) {
                                if ($('#myDataTable').dataTable().fnGetData().length <= 0) {

                                }
                                OpenLocationChildGrid();

                            }
                            $('.ShowAllOptionsBin').click(function () {
                                $(this).siblings('.AutoPullBins').trigger("focus");
                                $(this).siblings(".AutoPullBins").autocomplete("search", " ");
                            });

                            UDFfillEditableOptionsForGrid();

                            if (ToolIDToOpen.length > 0) {
                                $('#myDataTable').find("tbody tr").each(function (index, tr) {
                                    if ($(tr).find('#hdnGUID').val() == ToolIDToOpen) {
                                        $(tr).find('img.ExpandLocationSerials').click();
                                        ToolIDToOpen = '';
                                        return;
                                    }
                                });
                            }

                        },
                        error: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            $('#myDataTable').removeHighlight();
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");


                },
                "aoColumns": ArrToolColumns
            }).makeEditable();
            $('.DTTT_container').css('z-index', '-1');

            if ('@isCost' == '@Boolean.FalseString') {

                //ColumnsToHideinPopUp.push(12);
                // ColumnsToHideinPopUp.push(13);

                HideColumnUsingClassName("myDataTable");
                // oTable.fnSetColumnVis(12, false);
                //oTable.fnSetColumnVis(13, false);


            }
            //   alert($('#IsDeletedRecords').is(':checked'));


            /*Functions used for nasted data binding START*/
            $("#myDataTable").on("click", "td.control", function (event) {
                if (!$(this).find("img").hasClass("Expand") && !$(this).find("img").hasClass("ExpandLocationSerials"))
                    return;

                var nTr = this.parentNode;
                var i = $.inArray(nTr, anOpen);
                if ($(this).find("img").hasClass("Expand")) {
                    if (i === -1) {

                        $('img', this).attr('src', sImageUrl + "drildown_close.jpg");
                        oTable.fnOpen(nTr, fnFormatDetails(oTable, nTr), '');
                        anOpen.push(nTr);
                    }
                    else {
                        $('img', this).attr('src', sImageUrl + "drildown_open.jpg");
                        oTable.fnClose(nTr);
                        anOpen.splice(i, 1);
                        //oTable.fnDraw(); // commented for WI-4229
                    }
                    $(".ColVis_MasterButton").hide();
                }
                else {
                    if (i === -1) {
                        $('img', this).attr('src', sImageUrl + "drildown_close.jpg");
                        anOpen.push(nTr);
                        oTable.fnOpen(nTr, fnLocationDetails(oTable, nTr), '');
                    }
                    else {
                        $('img', this).attr('src', sImageUrl + "drildown_open.jpg");
                        oTable.fnClose(nTr);
                        anOpen.splice(i, 1);

                    }
                    $(".ColVis_MasterButton").hide();
                }
            });

            function fnFormatDetails(oTable, nTr) {
                var oData = oTable.fnGetData(nTr);
                var vcsearch = "";
                if (oData.IsCheckOutSerialAvailable == "Yes") {
                    vcsearch = $("#global_filter").val();
                }
                var sOut = '';
                $('#DivLoading').show();
                $.ajax({
                    "url": '@Url.Content("~/Tool/CheckInCheckOutData")',
                    data: { ToolGUID: oData.GUID, _isSerialAvail: oData.IsCheckOutSerialAvailable, _searchTerm: vcsearch },
                    "async": false,
                    cache: false,
                    "dataType": "text",
                    "success": function (json) {
                        sOut = json;
                        $('#DivLoading').hide();
                    },
                    error: function (response) {
                    }
                });

                return sOut;
            }
            function fnLocationDetails(oTable, nTr) {
                var oData = oTable.fnGetData(nTr);
                var vsearch = "";
                if (oData.IsSerialAvailable == "Yes") {
                    vsearch = $("#global_filter").val();
                }
                var sOut = '';
                $('#DivLoading').show();
                $.ajax({
                    "url": '@Url.Content("~/Tool/GetLocationsMainGrid")',
                    data: { ToolID: oData.ID, ToolGUID: oData.GUID, _isSerialAvail: oData.IsSerialAvailable, _searchTerm: vsearch },
                    "async": false,
                    cache: false,
                    "dataType": "text",
                    "success": function (json) {
                        sOut = json;
                        $('#DivLoading').hide();
                    },
                    error: function (response) {
                    }
                });

                return sOut;
            }
            /*Functions used for nasted data binding END*/

            function OpenLocationChildGrid() {
                $('#myDataTable').find("tbody tr").each(function (index, tr) {

                    var vIsCHKSerialAvail = $(tr).find('input#hdnIsCheckOutSerialAvailable').val();
                    var vIsSerialAvail = $(tr).find('input#hdnIsSerialAvail').val();

                    if (vIsCHKSerialAvail == "Yes") {
                        $(tr).find("img.Expand").click();
                    }
                    else {
                        if (vIsSerialAvail == "Yes") {
                            $(tr).find("img.ExpandLocationSerials").click();
                        }
                    }

                });
            }


            var QueryStringParam1 = getParameterByName('fromdashboard');
            var QueryStringParam2 = getParameterByName('ToolGUID');
            if (QueryStringParam1 == 'yes' && QueryStringParam2 != '') {

                setTimeout(function () { ShowEditTab("ToolEdit/" + QueryStringParam2, "frmTool"); }, 4000);
            }
            $('#myDataTable').on('tap click', 'a[id^="ToolName"]', function () {

                var _search = _Common.getGlobalFilterVal(true, 'global_filter');
                TopGlobalSearch = '';

                if (_search != '' && _search != undefined) {
                    TopGlobalSearch = _search;
                }

                var tr = $(this).parent().parent();
                $("#myDataTable").find("tbody tr").removeClass("row_selected");
                $(tr).addClass('row_selected');
                $("#tabBuildBreak").show();
            });

            $("#DivPullSelection").dialog({
                autoOpen: false,
                show: "blind",
                hide: "explode",
                height: 700,
                title: "Pull Details",
                width: 900,
                modal: true,
                open: function () {
                },
                beforeClose: function () {
                },
                close: function () {
                    //$('.ui-widget-overlay').css('position', 'absolute');
                    IsRefreshGrid = true;
                    $('#DivLoading').hide();
                    $("#DivPullSelection").empty();

                    $('#myDataTable').dataTable().fnStandingRedraw();

                }
            });
        });


        /* HISTORY related data deleated and archived START */
        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }
        function HistoryTabClick() {
            GetHistoryData();
        }
        function GetHistoryData() {
            HistorySelected = fnGetSelected(oTable);
            if (HistorySelected != undefined && HistorySelected.length == 1) {
                //SelectedHistoryRecordID = HistorySelected[0].id;
                var ToolID = $(HistorySelected).find('#spnToolMasterID').text();
                SelectedHistoryRecordID = ToolID;
                $('#DivLoading').show();
                $('#CTab').hide();
                $('#CtabCL').show();
                $('#CtabCL').load('/Master/ToolHistory', function () { $('#DivLoading').hide(); });
            }
            else {
                $('#CtabCL').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                //$('div#target').fadeToggle();
                //$("div#target").delay(2000).fadeOut(200);
                showNotificationDialog();
                return false;
            }
        }

        function GetSchedulerData() {
            var HistorySelectedCL = fnGetSelected(oTable);
            if (HistorySelectedCL != undefined && HistorySelectedCL.length == 1) {
                var hdnguid = $(HistorySelectedCL[0]).find('#hdnGUID')[0].value;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabSCH").empty();
                $("#CtabSCH").show();
                $('#CtabSCH').load('/Tool/ScheduleMappingCreate?ToolGUID=' + hdnguid, function () { $('#DivLoading').hide(); });
                // $('#tabScheduleList').click();
            }
            else {
                $('#CtabSCH').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                //$('div#target').fadeToggle();
                //$("div#target").delay(2000).fadeOut(200);
                showNotificationDialog();
                return false;
            }
        }

        function GetSchedulerListData() {
            var HistorySelectedCL = fnGetSelected(oTable);
            if (HistorySelectedCL != undefined && HistorySelectedCL.length == 1) {
                var hdnguid = $(HistorySelectedCL[0]).find('#hdnGUID')[0].value;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabSchedulerList").empty();
                $("#CtabSchedulerList").show();
                $('#CtabSchedulerList').load('/Tool/LoadScheduleList?ToolGUID=' + hdnguid, function () {
                    $('#DivLoading').hide();
                });
            }
            else {
                $('#CtabSchedulerList').html('');
                $("#spanGlobalMessage").html("@ResToolMaster.msgtoviewScheduleList");
                //$('div#target').fadeToggle();
                //$("div#target").delay(2000).fadeOut(200);
                showNotificationDialog();
                return false;
            }
        }

        function GetOdometerData() {
            var HistorySelectedCL = fnGetSelected(oTable);
            if (HistorySelectedCL != undefined && HistorySelectedCL.length == 1) {
                var hdnguid = $(HistorySelectedCL[0]).find('#hdnGUID')[0].value;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabOdometer").empty();
                $("#CtabOdometer").show();
                $('#CtabOdometer').load('/Tool/OdometerCreate?ToolGUID=' + hdnguid, function () { $('#DivLoading').hide(); });
            }
            else {
                $('#CtabOdometer').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                //$('div#target').fadeToggle();
                //$("div#target").delay(2000).fadeOut(200);
                showNotificationDialog();
                return false;
            }
        }

        function GetOdometerListData() {
            var HistorySelectedCL = fnGetSelected(oTable);
            if (HistorySelectedCL != undefined && HistorySelectedCL.length == 1) {
                var hdnguid = $(HistorySelectedCL[0]).find('#hdnGUID')[0].value;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabOdometerList").empty();
                $("#CtabOdometerList").show();
                $('#CtabOdometerList').load('/Tool/LoadOdometerList?ToolGUID=' + hdnguid, function () { $('#DivLoading').hide(); });
            }
            else {
                $('#CtabOdometerList').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                //$('div#target').fadeToggle();
                //$("div#target").delay(2000).fadeOut(200);
                showNotificationDialog();
                return false;
            }
        }

        function GetMainenanceData() {
            var QueryStringParam1 = getParameterByName('fromdashboard');
            var QueryStringParam2 = getParameterByName('ToolGUID');
            if (QueryStringParam1 == 'yes' && QueryStringParam2 != '') {
                var hdnguid = QueryStringParam2;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabMaintenance").empty();
                $("#CtabMaintenance").show();
                $('#CtabMaintenance').load('/Tool/LoadMaintenanceList?ToolGUID=' + hdnguid, function () { $('#DivLoading').hide(); });
            }
            else {
                var HistorySelectedCL = fnGetSelected(oTable);
                if (HistorySelectedCL != undefined && HistorySelectedCL.length == 1) {
                    var hdnguid = $(HistorySelectedCL[0]).find('#hdnGUID')[0].value;
                    $('#DivLoading').show();
                    $("#CTab").hide();
                    $("#CtabMaintenance").empty();
                    $("#CtabMaintenance").show();
                    $('#CtabMaintenance').load('/Tool/LoadMaintenanceList?ToolGUID=' + hdnguid, function () { $('#DivLoading').hide(); });
                }
                else {
                    $('#CtabMaintenance').html('');
                    $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                    //$('div#target').fadeToggle();
                    //$("div#target").delay(2000).fadeOut(200);
                    showNotificationDialog();
                    return false;
                }
            }
        }

        function ShowScheduleEditTab(action, formName) {
            var IsArchived = $('#IsArchivedRecords').is(':checked');
            var IsDeleted = $('#IsDeletedRecords').is(':checked');
            action += '&IsArchived=' + IsArchived + '&IsDeleted=' + IsDeleted;
            IsEditMode = true;
            IsShowHistory = true;
            AllowDeletePopup = false;
            $('#DivLoading').show();
            $('#tabSchedule').show();
            $('#tabSchedule').click();
            $(formName).append($('#CtabSCH').load(action, function () { $('#DivLoading').hide(); $("#" + formName + " :input:text:visible:first").focus(); }));
            $.validator.unobtrusive.parseDynamicContent('#' + formName + ' input:last');
        }
        /* HISTORY related data deleated and archived END */
        /* Cost Narrow Search Related Code  START */
        function CostNarroSearch(CostDDLObject) {
            //oTable.fnFilter($(CostDDLObject).val(),null,null,null);
            if ($(CostDDLObject).val() != "0_-1") {
                ToolCostValue = $(CostDDLObject).val();
                _NarrowSearchSave.objSearch.ToolsCostNew = ToolCostValue;
                DoNarrowSearch();
            }
            else {
                ToolCostValue = '';
                _NarrowSearchSave.objSearch.ToolsCostNew = ToolCostValue;
                DoNarrowSearch();
            }
            //_NarrowSearchSave.setControlValue("ToolsCostNew");
        }

        function SSNarroSearch(SSDDLObject) {
            //         alert('SSDDLObject: '+$(SSDDLObject).val());
            //         alert('ToolStatusValue' + ToolStatusValue);
            //oTable.fnFilter($(CostDDLObject).val(),null,null,null);

            if ($(SSDDLObject).val() != "0") {
                ToolStatusValue = $(SSDDLObject).val();
                DoNarrowSearch();
            }
            else {
                ToolStatusValue = '';
                DoNarrowSearch();
            }
        }

        /* Cost Narrow Search Related Code  END */

        function GetToolListHistory() {
            //alert("In GetToolListHistory");
            $("#CtabToolListHistory").show();
            $('#DivLoading').show();
            $.get('/Tool/LoadToolHistoryList',
                function (data) {
                    $("#CtabToolListHistory").html(data);
                    $('#DivLoading').hide();
                });
        }

        function GetWrittenOffToolList() {
            $('#DivLoading').show();
            $("#CTab").hide();
            //$("#CtabWrittenOffTool").html('');
            $("#CtabWrittenOffTool").empty().show();
            
            //$("#CtabWrittenOffTool").show();
            $.get('/Assets/LoadWrittenOffToolList',
                function (data) {
                    $("#CtabWrittenOffTool").html(data);
                    $('#DivLoading').hide();
                });
            $("#tabWrittenOffTool").removeClass("unselected").addClass("selected");
        }
        //function GenerateColumnSortable() {
        //    //clear the old elements
        //    var blankNUmber = 0;
        //    $('#ColumnSortable li').each(function (index) {
        //        $(this).remove();
        //    });
        //    var div = document.createElement('div');
        //    div.id = "CheckAll";
        //    //li.className = 'ui-state-default';
        //    //    li.innerHTML = oColumn.sTitle.trim();
        //    div.innerHTML = "<input type='hidden' value ='ColumnSortable' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
        //                    "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
        //    $('div.sortableContainer').find("div#CheckAll").remove();
        //    $('div.sortableContainer').prepend(div);
        //    //get current columns order and generate li sortable accordingly

        //    var oTableReorder = null;

        //    if ((typeof oTable) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        //        return false;

        //    if ((typeof oTable) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        //        oTableReorder = $('#' + oTableReorderId).dataTable();
        //    else
        //        oTableReorder = oTable;

        //    for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {

        //        var oColumn = oTableReorder.fnSettings().aoColumns[i];
        //        var style = '';
        //        var LiStyle = 'display:block';
        //        var LiClassName = 'ui-state-default'
        //        if (oColumn.sClass.indexOf('NotHide') >= 0) {
        //            //style = ' style="display:none" ';
        //            style = ' disabled="disabled" ';
        //            //LiStyle = 'display:none';
        //            LiClassName = LiClassName + ' HiddenLi';
        //        }

        //        var colindxbyname = '';
        //        if (oColumn.sTitle.trim() != '') {
        //            colindxbyname = GetToolColumnIndex(oColumn.sTitle.trim());
        //        }
        //        else {
        //            colindxbyname = GetToolColumnIndex('blankFieldName' + blankNUmber);
        //        }


        //        if (gblColumnsToHideinPopUp == 'True') {

        //            var li = document.createElement('li');
        //            li.id = colindxbyname;
        //            li.className = LiClassName;
        //            li.innerHTML = oColumn.sTitle.trim();
        //            li.style = LiStyle;
        //            if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
        //                if (oColumn.sTitle.trim() != '') {
        //                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetToolColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                }
        //                else {
        //                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetToolColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                    blankNUmber++;
        //                }
        //            }
        //            else {

        //                if (oColumn.sTitle.trim() != '') {
        //                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetToolColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                }
        //                else {

        //                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetToolColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                    blankNUmber++;
        //                }
        //            }
        //            $('#ColumnSortable').append(li);
        //        }
        //        else {

        //            if (jQuery.inArray(colindxbyname, ColumnsToHideinPopUp) < 0) {

        //                var li = document.createElement('li');
        //                li.id = colindxbyname;
        //                li.className = LiClassName;
        //                li.innerHTML = oColumn.sTitle.trim();
        //                li.style = LiStyle;
        //                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
        //                    if (oColumn.sTitle.trim() != '') {
        //                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetToolColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                    }
        //                    else {
        //                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetToolColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                    }
        //                }

        //                else {
        //                    if (oColumn.sTitle.trim() != '') {
        //                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetToolColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                    }
        //                    else {
        //                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetToolColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                    }
        //                }

        //                $('#ColumnSortable').append(li);
        //            }
        //            else {
        //                var li = document.createElement('li');
        //                li.id = colindxbyname;
        //                li.className = LiClassName;
        //                li.innerHTML = oColumn.sTitle.trim();
        //                if (oColumn.sTitle.trim() != '') {
        //                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetToolColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
        //                }
        //                else {
        //                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetToolColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
        //                }
        //                $(li).hide();
        //                $('#ColumnSortable').append(li);
        //            }
        //        }

        //    }

        //}
        //var GetToolColumnIndex = function (ColumnName) {
        //    if (typeof (ToolGridColumns) != "undefined") {
        //        return ToolGridColumns[ColumnName];
        //    }
        //};
    </script>
}
<script type="text/javascript">
    var isTabClick = false;
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
        new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true),
        new TabClass('tabToolHistory', '@eTurns.DTO.Resources.ResCommon.ToolHistoryList', 'callbacktoolhistory();', true, true),
        new TabClass('tabWrittenOffTool', '@eTurns.DTO.Resources.ResCommon.WrittenOffToolList', 'callbackWrittenOffTool();', true, true),

    ];
    TabsArry.push(new TabClass('tabBuildBreak', '@eTurns.DTO.Resources.ResLayout.KitToolBuildBreak', 'callKitToolBuildBreak();', false, true));
    if ('@IsShowChangeLog.ToString().ToUpper()' == 'TRUE') {
        TabsArry.push(new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true));
    }
    TabsArry.push(new TabClass('tabSchedule', '@eTurns.DTO.Resources.ResCommon.AddScheduler', 'callbackScheduler();', false, true));
    TabsArry.push(new TabClass('tabScheduleList', '@eTurns.DTO.Resources.ResCommon.SchedulerList', 'callbackSchedulerList();', false, true));
    TabsArry.push(new TabClass('tabOdometer', '@eTurns.DTO.Resources.ResCommon.UpdateMilesHours', 'callbackOdometer();', false, true));
    TabsArry.push(new TabClass('tabMaintenance', '@eTurns.DTO.Resources.ResCommon.Maintenance', 'callbackMaintenance();', false, true));
    function callbacknew() { window.location.hash = '#new'; ShowNewTab('ToolCreate', 'frmTool'); }
    function callbackhistory() { window.location.hash = '#list'; }
    function callbackCL() { window.location.hash = ''; HistoryTabClick(); }
    function callbackScheduler() { window.location.hash = ''; GetSchedulerData(); }
    function callbackSchedulerList() { window.location.hash = ''; GetSchedulerListData(); }
    function callbackOdometer() { window.location.hash = ''; GetOdometerData(); }
    function callbackOdometerList() { window.location.hash = ''; GetOdometerListData(); }
    function callbackMaintenance() { window.location.hash = ''; GetMainenanceData(); }
    function callbacktoolhistory() { window.location.hash = '#history'; $("#CtabToolHistoryList").html(''); GetToolListHistory(); }
    function callbackWrittenOffTool() { window.location.hash = '#writtenoff'; $("#CtabWrittenOffTool").html(''); GetWrittenOffToolList(); }
    function callKitToolBuildBreak() { window.location.hash = ''; GetBuildBreak(); }

    function GetBuildBreak() {

        HistorySelected = fnGetSelected(oTable);
        if (HistorySelected != undefined && HistorySelected.length == 1) {
            var ToolGUID = $(HistorySelected).find('#spnToolID').html();
            var ToolType = $(HistorySelected).find('#spnToolType').html();
            var ToolIsBuildBreak = $(HistorySelected).find('#spnToolIsBuildBreak').html();
            if (ToolType == "2") {
                if (ToolIsBuildBreak == "true") {
                    SelectedHistoryRecordID = ToolGUID;
                    $('#DivLoading').show();
                    $("#CTab").hide();
                    $("#CtabCL").show();
                    //$('#CtabCL').load('/Master/ItemHistory', function () { $('#DivLoading').hide(); });
                    $('#CtabCL').load('/Kit/ToolKitBuildBreak?KitToolGUID=' + ToolGUID + '', function () { $('#DivLoading').hide(); });
                }
                else {
                    $('#CtabCL').html('');
                    $("#spanGlobalMessage").html("@ResKitToolMaster.ReqKitisBuildBreak");
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    $("div#tab5").click();
                    return false;
                }
            }
            else {
                $('#CtabCL').html('');
                $("#spanGlobalMessage").html("@ResToolMaster.MsgSelectToolKitTypeOnly");
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                $("div#tab5").click();
                return false;
            }
        }
        else {
            $('#CtabCL').html('');
            $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("div#tab5").click();
            return false;
        }
    }

    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
            case "#history":
                $("#tabToolHistory").click();
                break
            case "#writtenoff":
                $("#tabWrittenOffTool").removeClass("unselected").addClass("selected");
                $("#tab5,#tab1,#tabToolHistory").removeClass("selected").addClass("unselected");
                $("#tabWrittenOffTool").click();
                break

        }

    }
    $(document).ready(function (e) {
        if (window.location.hash.toLowerCase() == "#history") {
           // alert('hi 1');
            $("#tabToolHistory").click();
        }
        if (window.location.hash.toLowerCase() == "#list") {
            $("#tab5").click();
        }
        else if (window.location.hash.toLowerCase() == "#new") {
            $("#tab1").click();
        }
        else if (window.location.hash.toLowerCase() == "#writtenoff") {
            //$("#tabWrittenOffTool").removeClass("unselected").addClass("selected");
            //$("#tab5,#tab1,#tabToolHistory").removeClass("selected").addClass("unselected");
            $("#tabWrittenOffTool").click();
        }
        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
        //SetTabView();
        if ('@isInsert.ToString().ToUpper()' == 'FALSE') {
            $("#tab1").hide();
        }

    });
</script>

<div class="userListingWrapper">
    <h2>
        @ResToolMaster.PageHeader
    </h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'></ul>
        <div id="CtabNew" class="tabContener" style="min-height: 970px;">
        </div>
        <div id="Ctab" class="tabContener" style="min-height: 970px;">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                    @*<input type="button" value="Search" class="searchBtn" />*@
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster)
            @Html.Partial("NarrowSearchLayout", modelCommon)
            <div class="userContent">

                <table style="margin-bottom: 1px; margin-top: 1px;" id="tblPullCommonUDF">
                    <thead>
                        <tr>

                            <th>
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.TechnicianList
                            </th>
                            @if (isToolUDF)
                            {
                                @Html.RenderColumnsHeaderByName("ToolCheckInOutHistory", typeof(eTurns.DTO.ResToolCheckInOutHistory))
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <b style="font-size: 13px;">&nbsp;&nbsp;&nbsp;Use this</b>
                                <input type="checkbox" id="chkUseToolCommonUDF" />
                            </td>
                            <td>
                                <span style="position:relative">
                                    <input type="text" id="txtUseThisTechnician" class="text-boxinner UseThisAutoTechnician" style="width:120px;" value="@eTurns.DTO.Resources.ResCommon.SelectTechnicianText" autocomplete="off" role="textbox" aria-autocomplete="list" aria-haspopup="true">
                                    <input type="hidden" id="UseThisTechnicianGUID" value="">
                                    <a id="UseThislnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;" class="UseThisShowAllOptions">
                                        <img src="/Content/images/arrow_down_black.png" alt="select">
                                    </a>
                                </span>

                            </td>
                            @if (isToolUDF)
                            {
                                @Html.RenderColumnsArrayEditableObjectForDOMByName("ToolCheckInOutHistory", controlIDPostfix: "ToolCommon")
                            }

                        </tr>
                    </tbody>
                </table>

                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @ResCommon.ID
                            </th>
                            <th>
                                @ResItemMaster.Expand
                            </th>
                            <th>
                                @ResToolMaster.CheckOut
                            </th>
                            <th>
                                @ResToolMaster.ForMaintanence
                            </th>
                            <th>
                                @ResToolMaster.QuantityTexBox
                            </th>
                            <th>
                                @ResToolMaster.Quantity
                            </th>
                            <th>
                                @ResToolCheckInOutHistory.AvailableQty
                            </th>
                            <th>
                                @ResToolMaster.ToolName
                            </th>
                            <th>
                                @ResToolCheckInOutHistory.CheckedOutQTY
                            </th>
                            <th>
                                @ResToolCheckInOutHistory.CheckedOutMQTY
                            </th>
                            <th>
                                @ResToolMaster.Serial
                            </th>
                            <th>
                                @ResToolMaster.Description
                            </th>
                            <th>
                                @ResToolMaster.IsGroupOfItems
                            </th>
                            <th>
                                @ResToolMaster.Cost
                            </th>
                            <th>
                                @ResToolMaster.ToolCategory
                            </th>
                            <th>
                                @ResToolMaster.DefaultLocation
                            </th>
                            <th>
                                @ResCommon.CreatedOn
                            </th>
                            <th>
                                @ResCommon.UpdatedOn
                            </th>
                            <th>
                                @ResCommon.UpdatedBy
                            </th>
                            <th>
                                @ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.TechnicianList
                            </th>
                            <th>
                                @ResToolMaster.ToolImage
                            </th>
                            <th>
                                @ResToolCheckInOutHistory.CheckinQuantity
                            </th>
                            <th>
                                @ResToolMaster.ToolType
                            </th>
                            <th>
                                @ResToolMaster.ToolTypeTracking
                            </th>
                            <th>
                                @ResToolMaster.LocationSerialsExpand
                            </th>
                            <th class="NotHide">
                                @ResToolMaster.Location
                            </th>
                            @Html.RenderColumnsHeader("ToolMaster", typeof(eTurns.DTO.ResToolMaster), "Tool")
                            @Html.RenderColumnsHeader("ToolCheckInOutHistory", typeof(eTurns.DTO.ResToolCheckInOutHistory), "")
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

                <div style="clear: both; width: 90%; margin-top: 10px;">
                    @if (AllowCheckinCheckOut)
                    {
                        <input type="button" value="@eTurns.DTO.ResToolMaster.ToolCheckoutAllButton" id="btnToolCheckoutAllNewFlow" class="CreateBtn" style="float: left;" />
                        <input type="button" value="@eTurns.DTO.ResToolMaster.ToolCheckInAllButton" id="btnToolCheckInAllBottom" class="CreateBtn" style="float: left;display:none;" />
                    }
                    @if (haveToolWrittenOffRights)
                    {
                        <input type="button" value="@eTurns.DTO.ResToolMaster.ToolWrittenOffAllButton" id="btnToolWrittenOffAllNewFlow" class="CreateBtn" style="float: left;" />
                    }
                    @if (AllowCheckinCheckOut)
                    {
                        <input type="button" value="@eTurns.DTO.ResToolMaster.ReassignTechnician" id="btnReassignTechnician" class="CreateBtn" style="float: left;" />
                    }
                </div>

            </div>
        </div>
        <div id='CtabCL' class="tabContener" style="min-height: 970px;">
        </div>
        <div id='CtabSCH' class="tabContener" style="min-height: 970px;">
        </div>
        <div id='CtabSchedulerList' class="tabContener" style="min-height: 970px;">
        </div>
        <div id='CtabOdometer' class="tabContener" style="min-height: 970px;">
        </div>
        <div id='CtabOdometerList' class="tabContener" style="min-height: 970px;">
        </div>
        <div id='CtabMaintenance' class="tabContener" style="min-height: 970px;">
        </div>
        <div id="CtabToolListHistory" class="tabContener" style="min-height: 750px;">
        </div>
        <div id="CtabWrittenOffTool" class="tabContener" style="min-height: 970px;">
        </div>
    </div>
    <div id="DivPullSelection">
    </div>
    <div id="divMoveMaterialModel">
    </div>
    <div id="divMoveMaterialPopup">
    </div>
    <div id="DivTmpSpan" style="display:none;">
    </div>
    <div class="dialog" id="dlgCommonErrorMsg" style="display: none; width: 600px;">
        <div class="inner" style="width: 600px; max-height: 300px; overflow: scroll;">
            <p class="text" id="pErrMessage" style="text-align: left; padding-left: 10px;">
            </p>
            <p id="pOkbtn" class="text" style="text-align: center; padding-left: 10px; display: block;">
                <a href="#" class="no" onclick="closeModalPSLimit()">
                    <img src="~/Content/images/yes.png" alt="ok" />@ResCommon.Ok
                </a>
            </p>
            <p id="pYesNobtn" class="text" style="text-align: center; padding-left: 10px; display: none;">
                <a href="javascript:void(0);" id="btnYesForPS" class="yes">
                    <img src="~/Content/images/yes.png" alt="Yes" />
                    @eTurns.DTO.Resources.ResMessage.ConfirmYes
                </a><a href="#" class="no" onclick="closeModalPSLimit()">
                    <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
                </a>
            </p>
        </div>
    </div>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
    <script type='text/javascript' src="@Url.Content("~/Scripts/PageScripts/ToolPage.js?v=" + version)"></script>
    <script type="text/javascript" language="javascript">

    var TechnicianText = '@eTurns.DTO.Resources.ResCommon.SelectTechnicianText';
    var TechnicianRequired = '@TechnicianRequired';
    var ChecInOutURL = '@Url.Content("~/Tool/CheckOutCheckIn")';
    var CheckOutAll = '@Url.Content("~/Tool/CheckOutAll")';
    var CheckInAllNew = '@Url.Content("~/Tool/CheckInAllNew")';
    var PullSerialsAndLotsNewUrl = '@Url.Action("PullToolSerialsAndLotsNew", "Tool")';
    var GetLocationDAta = '@Url.Content("~/Tool/GetToolLocationsForCheckOut")';
    var urlWrittenOffToolQuantity = '@Url.Action("WrittenOffToolQuantity", "Tool")';
    var WrittenOffSerialSelectionUrl = '@Url.Action("WrittenOffLotSrSelection", "Tool")';
    var urlReassignTechnician = '@Url.Action("ReassignTechnician", "Tool")';
    var msgSelectCheckOutTool = '@ResMessage.SelectCheckOutTool';
    var msgCheckUseThis = '@ResMessage.CheckUseThis';
    var msgInvalidTechnicianForReassign = '@ResMessage.InvalidTechnician';
    var msgFailToReassign = '@ResMessage.FailToReassign';
    var MsgKindlyFillTechnician = '@ResTechnician.MsgKindlyFillTechnician';
    var MsgInsertQuantityCheckOut = '@ResToolMaster.MsgInsertQuantityCheckOut';
    var MsgSelectLocationCheckout = '@ResToolMaster.MsgSelectLocationCheckout';
    var MsgQtyCheckOutMandatory = '@ResToolMaster.MsgQtyCheckOutMandatory';
    var InventoryLocationMandatory = '@ResPullMaster.InventoryLocationMandatory';
    var MsgSelectRowToDelete = '@ResPullMaster.MsgSelectRowToDelete';
    var MsgQTYCheckOutQTYValidation = '@ResToolMaster.MsgQTYCheckOutQTYValidation';
    var MsgDuplicateLotNumber = '@ResToolMaster.MsgDuplicateLotNumber';
        var MsgDuplicateSerialNumberValidation = '@ResReceiveOrderDetails.MsgDuplicateSerialNumberValidation';
        var MsgDuplicateNumber = '@ResMessage.DuplicateNumber';



    function ResetNarrowSearchTechnicianList() {
        $("#ToolsTechnicianNewCollapse").html('');
        $("#ToolsTechnicianNew").empty();

        var selectedToolTechnician = ToolTechnicianValue;//$("#ToolsTechnician").val(); //$("#ToolsTechnician").multiselect("getChecked");
        var wasTechnicianSelected = (typeof (selectedToolTechnician) != undefined && selectedToolTechnician !== undefined && selectedToolTechnician != null && selectedToolTechnician != '' && selectedToolTechnician.length > 0)
                                    ? true : false;
        ToolTechnicianValue = '';

        if ($("#ToolsTechnicianNew option").length == 0) {
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: 'ToolMasterNew', TextFieldName: 'ToolsTechnician', IsArchived: false, IsDeleted: false, RequisitionCurrentTab: "ToolList" },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });
                    $("#ToolsTechnicianNew").empty();
                    $("#ToolsTechnicianNew").multiselect('destroy');
                    $("#ToolsTechnicianNew").multiselectfilter('destroy');
                    $("#ToolsTechnicianNew").append(s);

                    if (typeof (wasTechnicianSelected) != undefined && wasTechnicianSelected !== undefined && wasTechnicianSelected == true) {
                        for (var i = 0; i < selectedToolTechnician.length; i++) {
                            $("#ToolsTechnicianNew").multiselect("widget").find(":checkbox[value='" + selectedToolTechnician[i] + "']").attr("checked", "checked");
                            $("#ToolsTechnicianNew option[value='" + selectedToolTechnician[i] + "']").attr("selected", 1);
                            var text = $("#ToolsTechnicianNew option[value='" + selectedToolTechnician[i] + "']").text()
                            if ($("#ToolsTechnicianNewCollapse").text().indexOf(text) == -1) {
                                $("#ToolsTechnicianNewCollapse").append("<span>" + text + "</span>");
                            }
                        }
                        //$("select").multiselect('reload');
                        $("#ToolsTechnicianNew").multiselect('reload');
                        //$("#ToolsTechnician").multiselect("refresh");
                    }
                    //$("#ToolsTechnicianNew").multiselect("refresh");
                    //$("#ToolsTechnicianNew").multiselectfilter("refresh");

                    $("#ToolsTechnicianNew").multiselect(
                    {
                        noneSelectedText: TechnicianList, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return TechnicianList + ': ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ToolsTechnicianNewCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ToolsTechnicianNewCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ToolsTechnicianNewCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ToolsTechnicianNewCollapse").show();
                        }
                    }
                )
                    .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                    .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                        if (ui.checked) {
                            if ($("#ToolsTechnicianNewCollapse").text().indexOf(ui.text) == -1) {
                                $("#ToolsTechnicianNewCollapse").append("<span>" + ui.text + "</span>");
                            }
                        }
                        else {
                            if (ui.checked == undefined) {
                                $("#ToolsTechnicianNewCollapse").html('');
                            }
                            else if (!ui.checked) {
                                var text = $("#ToolsTechnicianNewCollapse").html();
                                text = text.replace("<span>" + ui.text + "</span>", '');
                                $("#ToolsTechnicianNewCollapse").html(text);
                            }
                            else
                                $("#ToolsTechnicianNewCollapse").html('');
                        }
                        ToolTechnicianValue = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        })

                        _NarrowSearchSave.objSearch.ToolsTechnicianNew = ToolTechnicianValue;

                        if ($("#ToolsTechnicianNewCollapse").text().trim() != '')
                            $("#ToolsTechnicianNewCollapse").show();
                        else
                            $("#ToolsTechnicianNewCollapse").hide();


                        if ($("#ToolsTechnicianNewCollapse").find('span').length <= 2) {
                            $("#ToolsTechnicianNewCollapse").scrollTop(0).height(50);
                        }
                        else {
                            $("#ToolsTechnicianNewCollapse").scrollTop(0).height(100);
                        }
                        clearGlobalIfNotInFocus();

                        DoNarrowSearch();
                        if (ToolTechnicianValue.length == 1) {
                            $("input#btnToolCheckInAllBottom").show();
                        }
                        else {
                            $("input#btnToolCheckInAllBottom").hide();
                        }
                    }).multiselectfilter();
                    _NarrowSearchSave.setControlValue("ToolsTechnicianNew");
                },
                error: function (response) {
                    // through errror message
                }
                ,
                complete: function () {

                    ToolTechnicianValue = $.map($("#ToolsTechnicianNew").multiselect("getChecked"), function (input) { return input.value; })
                    _NarrowSearchSave.objSearch.ToolsTechnicianNew = ToolTechnicianValue;

                    if (ToolTechnicianValue.length == 1) {
                        $("input#btnToolCheckInAllBottom").show();
                    }
                    else {
                        $("input#btnToolCheckInAllBottom").hide();
                    }
                    DoNarrowSearch();
                }
            });
        }

        //$("#ToolsTechnicianNew").multiselect('destroy');
        //$("#ToolsTechnicianNew").multiselectfilter('destroy');

        //$("#ToolsTechnicianNew").multiselect(
        //    {
        //        noneSelectedText: TechnicianList, selectedList: 5,
        //        selectedText: function (numChecked, numTotal, checkedItems) {
        //            return TechnicianList + ': ' + numChecked + ' selected';
        //        }
        //    },
        //    {
        //        checkAll: function (ui) {
        //            $("#ToolsTechnicianNewCollapse").html('');
        //            for (var i = 0; i <= ui.target.length - 1; i++) {
        //                if ($("#ToolsTechnicianNewCollapse").text().indexOf(ui.target[i].text) == -1) {
        //                    $("#ToolsTechnicianNewCollapse").append("<span>" + ui.target[i].text + "</span>");
        //                }
        //            }
        //            $("#ToolsTechnicianNewCollapse").show();
        //        }
        //    },
        //    {
        //        beforeopen: function () {
        //            if ($("#ToolsTechnicianNew option").length == 0) {
        //                $.ajax({
        //                    'url': '/Master/GetNarrowDDData',
        //                    data: { TableName: 'ToolMasterNew', TextFieldName: 'ToolsTechnician', IsArchived: false, IsDeleted: false, RequisitionCurrentTab: "ToolList" },
        //                    success: function (response) {
        //                        var s = '';
        //                        $.each(response.DDData, function (ValData, ValCount) {
        //                            var ArrData = ValData.toString().split('[###]');
        //                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
        //                        });
        //                        $("#ToolsTechnicianNew").empty();
        //                        $("#ToolsTechnicianNew").append(s);
        //                        $("#ToolsTechnicianNew").multiselect("refresh");
        //                        $("#ToolsTechnicianNew").multiselectfilter("refresh");
        //                    },
        //                    error: function (response) {
        //                        // through errror message
        //                    }
        //                });
        //            }
        //        }
        //    }
        //)
        //    .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
        //    .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
        //        if (ui.checked) {
        //            if ($("#ToolsTechnicianNewCollapse").text().indexOf(ui.text) == -1) {
        //                $("#ToolsTechnicianNewCollapse").append("<span>" + ui.text + "</span>");
        //            }
        //        }
        //        else {
        //            if (ui.checked == undefined) {
        //                $("#ToolsTechnicianNewCollapse").html('');
        //            }
        //            else if (!ui.checked) {
        //                var text = $("#ToolsTechnicianNewCollapse").html();
        //                text = text.replace("<span>" + ui.text + "</span>", '');
        //                $("#ToolsTechnicianNewCollapse").html(text);
        //            }
        //            else
        //                $("#ToolsTechnicianNewCollapse").html('');
        //        }
        //        ToolTechnicianValue = $.map($(this).multiselect("getChecked"), function (input) {
        //            return input.value;
        //        })

        //        if ($("#ToolsTechnicianNewCollapse").text().trim() != '')
        //            $("#ToolsTechnicianNewCollapse").show();
        //        else
        //            $("#ToolsTechnicianNewCollapse").hide();


        //        if ($("#ToolsTechnicianCollapse").find('span').length <= 2) {
        //            $("#ToolsTechnicianCollapse").scrollTop(0).height(50);
        //        }
        //        else {
        //            $("#ToolsTechnicianNewCollapse").scrollTop(0).height(100);
        //        }
        //        clearGlobalIfNotInFocus();

        //        DoNarrowSearch();
        //    }).multiselectfilter();

        //if ($("select#ToolsTechnicianNew").parent("li").find("div#ToolsTechnicianNewCollapse:visible").length != 0) {

        //    $("select#ToolsTechnicianNew").parent("li").find(".downarrow").click();
        //    $("select#ToolsTechnicianNew").parent("li").find("ToolsTechnicianNewCollapse").attr("style", "display: none; height: 100px; overflow: hidden;");
        //}

        //$("#ToolsTechnicianCollapse").html('');

        //$.ajax({
        //    'url': '/Master/GetNarrowDDData',
        //    data: { TableName: 'ToolMaster', TextFieldName: 'ToolsTechnician', IsArchived: false, IsDeleted: false },
        //    success: function (response) {

        //        var s = '';
        //        $.each(response.DDData, function (ValData, ValCount) {
        //            var ArrData = ValData.toString().split('[###]');
        //            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
        //        });
        //        //Destroy widgets before reapplying the filter
        //        $("#ToolsTechnician").empty();
        //        $("#ToolsTechnician").multiselect('destroy');
        //        $("#ToolsTechnician").multiselectfilter('destroy');

        //        $("#ToolsTechnician").append(s);
        //        $("#ToolsTechnician").multiselect(
        //                    {
        //                        noneSelectedText: TechnicianList, selectedList: 5,
        //                        selectedText: function (numChecked, numTotal, checkedItems) {
        //                            return TechnicianList + ': ' + numChecked + ' selected';
        //                        }
        //                    },
        //                    {
        //                        checkAll: function (ui) {
        //                            $("#ToolsTechnicianCollapse").html('');
        //                            for (var i = 0; i <= ui.target.length - 1; i++) {
        //                                if ($("#ToolsTechnicianCollapse").text().indexOf(ui.target[i].text) == -1) {
        //                                    $("#ToolsTechnicianCollapse").append("<span>" + ui.target[i].text + "</span>");
        //                                }
        //                            }
        //                            $("#ToolsTechnicianCollapse").show();
        //                        }
        //                    }
        //        )
        //      .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
        //        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
        //            if (ui.checked) {
        //                if ($("#ToolsTechnicianCollapse").text().indexOf(ui.text) == -1) {
        //                    $("#ToolsTechnicianCollapse").append("<span>" + ui.text + "</span>");
        //                }
        //            }
        //            else {
        //                if (ui.checked == undefined) {
        //                    $("#ToolsTechnicianCollapse").html('');
        //                }
        //                else if (!ui.checked) {
        //                    var text = $("#ToolsTechnicianCollapse").html();
        //                    text = text.replace("<span>" + ui.text + "</span>", '');
        //                    $("#ToolsTechnicianCollapse").html(text);
        //                }
        //                else
        //                    $("#ToolsTechnicianCollapse").html('');
        //            }
        //            ToolTechnicianValue = $.map($(this).multiselect("getChecked"), function (input) {
        //                return input.value;
        //            })

        //            if ($("#ToolsTechnicianCollapse").text().trim() != '')
        //                $("#ToolsTechnicianCollapse").show();
        //            else
        //                $("#ToolsTechnicianCollapse").hide();


        //            if ($("#ToolsTechnicianCollapse").find('span').length <= 2) {
        //                $("#ToolsTechnicianCollapse").scrollTop(0).height(50);
        //            }
        //            else {
        //                $("#ToolsTechnicianCollapse").scrollTop(0).height(100);
        //            }
        //            clearGlobalIfNotInFocus();

        //            DoNarrowSearch();
        //        }).multiselectfilter();

        //        if ($("select#ToolsTechnician").parent("li").find("div#ToolsTechnicianCollapse:visible").length != 0) {

        //            $("select#ToolsTechnician").parent("li").find(".downarrow").click();
        //            $("select#ToolsTechnician").parent("li").find("ToolsTechnicianCollapse").attr("style", "display: none; height: 100px; overflow: hidden;");
        //        }
        //        DoNarrowSearch();
        //        //$("input#NarroSearchClear").click();

        //    },
        //    error: function (response) {
        //        // through errror message
        //    },
        //    complete: function () {
        //        ToolTechnicianValue = $.map($("#ToolsTechnician").multiselect("getChecked"), function (input) { return input.value; })
        //        DoNarrowSearch();
        //    }
        //});

        var selectedToolCheckout = ToolCheckoutValue;//$("#ToolCheckout").val();
        var wasToolCheckoutSelected = (typeof (selectedToolCheckout) != undefined && selectedToolCheckout !== undefined && selectedToolCheckout != null && selectedToolCheckout != '' && selectedToolCheckout.length > 0)
                                    ? true : false;
        ToolCheckoutValue = '';

        $.ajax({
            'url': '/Master/GetNarrowDDData',
            data: { TableName: 'ToolMaster', TextFieldName: 'ToolMaintenance', IsArchived: false, IsDeleted: false },
            success: function (response) {
                var s = '';
                $.each(response.DDData, function (ValData, ValCount) {
                    var ArrData = ValData.toString().split('###');
                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                });

                //Destroy widgets before reapplying the filter
                $("#ToolCheckoutNewCollapse").html('');
                $("#ToolCheckoutNew").empty();
                $("#ToolCheckoutNew").multiselect('destroy');
                $("#ToolCheckoutNew").multiselectfilter('destroy');

                $("#ToolCheckoutNew").append(s);
                if (typeof (wasToolCheckoutSelected) != undefined && wasToolCheckoutSelected !== undefined && wasToolCheckoutSelected == true) {
                    for (var i = 0; i < selectedToolCheckout.length; i++) {
                        $("#ToolCheckoutNew").multiselect("widget").find(":checkbox[value='" + selectedToolCheckout[i] + "']").attr("checked", "checked");
                        $("#ToolCheckoutNew option[value='" + selectedToolCheckout[i] + "']").attr("selected", 1);
                        var text = $("#ToolCheckoutNew option[value='" + selectedToolCheckout[i] + "']").text()
                        if ($("#ToolCheckoutNewCollapse").text().indexOf(text) == -1) {
                            $("#ToolCheckoutNewCollapse").append("<span>" + text + "</span>");
                        }
                        //$("#ToolsTechnician").multiselect("refresh");
                    }
                    //$("select").multiselect('reload');
                    $("#ToolCheckoutNew").multiselect('reload');
                    //$("#ToolsTechnician").multiselect("refresh");
                }
                $("#ToolCheckoutNew").multiselect(
        {
            noneSelectedText: 'Tool Status', selectedList: 5,
            selectedText: function (numChecked, numTotal, checkedItems) {
                return 'Tool Status: ' + numChecked + ' ' + selected;
            }
        },
        {
            checkAll: function (ui) {
                $("#ToolCheckoutNewCollapse").html('');
                for (var i = 0; i <= ui.target.length - 1; i++) {
                    if ($("#ToolCheckoutNewCollapse").text().indexOf(ui.target[i].text) == -1) {
                        $("#ToolCheckoutNewCollapse").append("<span>" + ui.target[i].text + "</span>");
                    }
                }
                $("#ToolCheckoutNewCollapse").show();
            }
        }
    )
        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {

            if (ui.checked) {
                if ($("#ToolCheckoutNewCollapse").text().indexOf(ui.text) == -1) {
                    $("#ToolCheckoutNewCollapse").append("<span>" + ui.text + "</span>");
                }
            }
            else {
                if (ui.checked == undefined) {
                    $("#ToolCheckoutNewCollapse").html('');
                }
                else if (!ui.checked) {
                    var text = $("#ToolCheckoutNewCollapse").html();
                    text = text.replace("<span>" + ui.text + "</span>", '');
                    $("#ToolCheckoutNewCollapse").html(text);
                }
                else
                    $("#ToolCheckoutNewCollapse").html('');
            }
            ToolCheckoutValue = $.map($(this).multiselect("getChecked"), function (input) {
                return input.value;
            })

            _NarrowSearchSave.objSearch.ToolCheckoutNew = ToolCheckoutValue;

            if ($("#ToolCheckoutNewCollapse").text().trim() != '')
                $("#ToolCheckoutNewCollapse").show();
            else
                $("#ToolCheckoutNewCollapse").hide();


            if ($("#ToolCheckoutNewCollapse").find('span').length <= 2) {
                $("#ToolCheckoutNewCollapse").scrollTop(0).height(50);
            }
            else {
                $("#ToolCheckoutNewCollapse").scrollTop(0).height(100);
            }
            clearGlobalIfNotInFocus();
            DoNarrowSearch();
        }).multiselectfilter();

                _NarrowSearchSave.setControlValue("ToolCheckoutNew");
            },
            error: function (response) {
                // through errror message
            }
            , complete: function () {
                ToolTechnicianValue = $.map($("#ToolsTechnicianNew").multiselect("getChecked"), function (input) { return input.value; })
                _NarrowSearchSave.objSearch.ToolsTechnicianNew = ToolTechnicianValue;
                ToolCheckoutValue = $.map($("#ToolCheckoutNew").multiselect("getChecked"), function (input) { return input.value; })
                _NarrowSearchSave.objSearch.ToolCheckoutNew = ToolCheckoutValue;
                DoNarrowSearch();
            }
        });
        CommonUDFNarrowSearch();
    }
    </script>
    <script language="javascript" type="text/javascript">
    $(document).ready(function () {
        var QueryStringParam1 = getParameterByName('fromdashboard');
        var QueryStringParam2 = getParameterByName('ToolGUID');
        if (QueryStringParam1 == 'yes' && QueryStringParam2 != '') {

            $('#tab5').removeClass('selected');
            $('#tabMaintenance').addClass('selected');
            CurrentListTabID = 'tabMaintenance';
            $("#" + CurrentListTabID).click();
        }


        $("#divMoveMaterialPopup").dialog(
          {
              autoOpen: false, show: "blind", hide: "explode", height: 450, width: 800
            , modal: true, title: '@ResToolAssetMoveMaterial.DailogTitle',
              open: function () {

                  $('#DivLoading').show();
                  var obj = $(this).data("objData");
                  if ((obj.LotNumberTracking != null && obj.LotNumberTracking.toLowerCase() == 'true') || (obj.SerialNumberTracking != null && obj.SerialNumberTracking.toLowerCase() == 'true')) {
                      OpenMoveMaterialPopupByToolGuidForLotSerial(obj);
                  }
                  else {
                      OpenMoveMaterialPopupByToolGuid(obj);
                  }


              },
              close: function () {
                  // alert('@(ViewBag.ItemGUID)');
                  $("#divMoveMaterialPopup").empty();
                  $('#DivLoading').hide();

                  var obj = $(this).data("objData");
                  //  alert(obj.ItemGUID);
                  //$('#ItemModeDataTable').dataTable().fnDraw();
                  ToolIDToOpen = obj.ToolGUID;
                  $('#myDataTable').dataTable().fnDraw();
                  //                  if ($('#ItemBinWiseSummaryTable' + obj.ItemGUID) != undefined) {
                  //                      $("#ItemBinWiseSummaryTable" + obj.ItemGUID).DataTable().fnDraw();
                  //                  }

              }
          });

    });
    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(window.location.search);
        if (results == null)
            return "";
        else
            return decodeURIComponent(results[1].replace(/\+/g, " "));
    }


    function ToolAssetMoveMaterial(btn, BinId) {

        var itemGuid = $(btn).parent().parent().find('#ToolGUID').val();
        var serialNumberTracking = $(btn).parent().parent().find('#SerialNumberTracking').val();
        var lotNumberTracking = $(btn).parent().parent().find('#LotNumberTracking').val();
        $("#divMoveMaterialPopup").empty();
        var objData = { "ToolGUID": itemGuid, "MoveType": '@((int)ToolMoveType.InvToInv)', "OpenFrom": '@ToolMoveDialogOpenFrom.FromTool', "SourceToolBinID": BinId, "SerialNumberTracking": serialNumberTracking, "LotNumberTracking": lotNumberTracking };
        $('#divMoveMaterialPopup').data({ "objData": objData }).dialog('open');
    }

    </script>
