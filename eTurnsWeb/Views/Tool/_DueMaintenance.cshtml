@model dynamic
@{
    
    Guid? ToolGUID = null, AssetGUID = null;
    if (Model.GetType().Name == "AssetMasterDTO")
    {
        AssetGUID = Model.GUID;
    }
    if (Model.GetType().Name == "ToolMasterDTO")
    {
        ToolGUID = Model.GUID;
    }
}
<h4>
    Next Maintenance Due
</h4>
<ul>
    <li>
        <table id="tblMaintenances" class="display">
            <thead>
                <tr>
                    <th>
                        @eTurns.DTO.ResToolsScheduler.SchedulerName
                    </th>
                    <th>
                        @eTurns.DTO.ResToolsMaintenance.MaintenanceName
                    </th>
                    <th>
                        @eTurns.DTO.ResToolsMaintenance.ScheduleDate
                    </th>
                   
                    @*<th>
                        @eTurns.DTO.ResToolsMaintenance.MaintenanceDate
                    </th>*@
               
                  
                    <th>
                        @eTurns.DTO.ResToolsMaintenance.TrackingMeasurement
                    </th>
                    <th>
                        @eTurns.DTO.ResToolsMaintenance.TrackingMeasurementValue
                    </th>
                    <th>
                        @eTurns.DTO.ResToolsMaintenance.LastMaintenanceDate
                    </th>
                    <th>
                        @eTurns.DTO.ResToolsMaintenance.LastMeasurementValue
                    </th>
                    <th>
                        @eTurns.DTO.ResToolsMaintenance.WorkorderID
                    </th>
                    <th>
                        @eTurns.DTO.ResToolsMaintenance.RequisitionID
                    </th>
                    <th>@ResToolsMaintenance.TrackingMeasurementTimeBase</th>
                    <th>@ResToolsMaintenance.ReadingValue</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </li>
</ul>

<script type="text/javascript">
    var tblMaintenances;
    var columnArr = new Array();
    columnArr.push({ mDataProp: "SchedulerName", sClass: "read_only" });
    columnArr.push({ mDataProp: "MaintenanceName", sClass: "read_only" });
    columnArr.push({ mDataProp: "ScheduleDateStr", sDefaultContent: '', sClass: "read_only" });
   // columnArr.push({ mDataProp: "MaintenanceDate", sDefaultContent: '', sClass: "read_only", fnRender: function (obj, val) { return GetDateInShortFormat(val); } });


    columnArr.push({
        mDataProp: "TrackngMeasurement", sClass: "read_only", fnRender: function (obj, val) {
            if (val == 1) {
                return "<span>@ResToolsScheduler.TimeBased</span>";
            }
            else if (val == 2) {
                return "<span>@ResToolsScheduler.OperationalHours</span>";
            }
            else if (val == 3) {
                return "<span>@ResToolsScheduler.Mileage</span>";
            }
            else {
                return "<span></span>";
            }
        }
    });
    columnArr.push({ mDataProp: "TrackingMeasurementValue", sClass: "read_only" });
    columnArr.push({ mDataProp: "LastMaintenanceDateStr", sDefaultContent: '', sClass: "read_only" });
    columnArr.push({ mDataProp: "LastMeasurementValue", sClass: "read_only" });
    columnArr.push({ mDataProp: "WOName", sClass: "read_only" });
    columnArr.push({ mDataProp: "RequisitionName", sClass: "read_only" });

    columnArr.push({
        mDataProp: "TrackingMeasurementTimeBase", sClass: "read_only", fnRender: function (obj, val) {
            if (obj.aData.TrackngMeasurement == 1) {
                return "<span>@ResToolsScheduler.TimeBased</span>";
            }
            else {
                return "<span></span>";
            }
        }
    });

    columnArr.push({
        mDataProp: "ReadingValue", sClass: "read_only", fnRender: function (obj, val) {
            if (obj.aData.TrackngMeasurement == 1) {
                return "<span>@ResToolsScheduler.TimeBased</span>";
            }
            else {
                return "<span></span>";
            }
        }
    });



    $(document).ready(function () {
        tblMaintenances = $("#tblMaintenances").dataTable({
            "bPaginate": false,
            "bLengthChange": false,
            "bFilter": false,
            "bSort": false,
            "bInfo": false,
            "bAutoWidth": false,
            "bRetrieve": true,
            "bDestroy": true,
            "sScrollX": "100%",
            "bServerSide": true,
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) { },
            "sAjaxSource": '@Url.Action("ToolMaintenanceListAjax", "Assets")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];

                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                else
                    aoData.push({ "name": "SortingField", "value": "0" });
                aoData.push({ "name": "IsArchived", "value": false });
                aoData.push({ "name": "IsDeleted", "value": false });
                aoData.push({ "name": "AssetGUID", "value": '@AssetGUID' });
                aoData.push({ "name": "ToolGUID", "value": '@ToolGUID' });
                aoData.push({ "name": "tabname", "value": 'due' });
                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    "cache": false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    "beforeSend": function () {
                        $('#myDataTable').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    "error": function (xhr, status, error) {
                        console.log(xhr);
                    },
                    "complete": function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                    }
                })
            },
            "aoColumns": columnArr,
            "fnInitComplete": function () { },

        });
        $('.DTTT_container').css('z-index', '-1');
    });
</script>
