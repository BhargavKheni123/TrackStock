@model IList<eTurns.DTO.ToolMasterDTO>

@{
    string viewRight = "ViewOverwrite";
}

@if (Model != null && Model.Count > 0)
{
    <div style="width: 100%; padding-bottom: 10px;">
        <input type="button" class="btnGeneral" value="Written Off All" id="btnPullAllPopUp" name="btnPullAllPopUp" />
    </div>

    string jsonWrittenOffCategories = Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ToolWrittenOffCategories);
    <input type="hidden" id="hdnWrittenOffCategories" value="@jsonWrittenOffCategories" name="hdnWrittenOffCategories" />

    foreach (ToolMasterDTO Tool in Model)
    {
        string jsonPullMasterDTO = Newtonsoft.Json.JsonConvert.SerializeObject(Tool);

        <div style="padding: 10px; margin-bottom: 10px; border: 1px solid red;" id="divItem_@(Tool.GUID)">
            <input type="hidden" id="hdnPullIds_@(Tool.GUID)" value="PullIds_@(Tool.GUID)" />
            <table style="width: 100%" class="display" id="tblItemPullheader_@(Tool.GUID)">
                <thead>
                    <tr>
                        <th>
                          <input type="hidden" id="hdnPullMasterDTO_@(Tool.GUID)" value="@jsonPullMasterDTO" name="hdnPullMasterDTO" />                         
                            <span>
                                @ResToolMaster.ToolName
                            </span>                            
                        </th>
                        <th>@ResToolMaster.Serial</th>
                        <th>
                            @ResItemMaster.TrackingDetails
                        </th>                       
                        <th>
                            <span>@ResToolMaster.WrittenOffQuantity</span>
                        </th>                    
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>                            
                                <span>@Tool.ToolName</span>                            
                        </td>
                        <td>
                            <span>@Tool.Serial</span>
                        </td>
                        <td>
                            @if (Tool.SerialNumberTracking)
                            {
                                <text>Serial Number Tracking</text>
                                <input type='hidden' id='hdnTrackingType_@(Tool.GUID)' value='SerialNumberTracking' />
                            }                            
                            else
                            {
                                <text>No tracking</text>
                                <input type='hidden' id='hdnTrackingType_@(Tool.GUID)' value='NoTracking' />
                            }
                        </td>                        
                        <td>
                             <input type='text' value='@Tool.Quantity' id='txtPoolQuantity_@(Tool.GUID)' name='txtPoolQuantity_@(Tool.GUID)' class='text-boxinner pull-quantity' />
                        </td>              
                    </tr>
                </tbody>
            </table>
            <table>
                <tr>
                    <td>
                        &nbsp;
                    </td>
                </tr>
            </table>
            @if (Tool.Quantity > 0)
            {
                string htmltableName = "tblItemPull_" + Tool.GUID;
                
                    <table style="width: 100%" class="display tbl-item-pull" id="@htmltableName">
                        <thead>
                            <tr>                                
                                <th style="text-align: left;" >
                                    @if (Tool.SerialNumberTracking)
                                    {
                                        @eTurns.DTO.ResItemLocationDetails.SerialNumber
                                    }
                                    else
                                    {
                                        @eTurns.DTO.ResPullMaster.LotSrnumber
                                    }
                                </th>
                                @*<th style="text-align: left;">
                                    @eTurns.DTO.ResPullMaster.BinID
                                </th>*@
                                <th style="text-align: left;">
                                    @eTurns.DTO.ResToolMaster.Quantity
                                </th>
                                <th>
                                    @ResToolMaster.WrittenOffQuantity
                                </th>
                                <th>@ResToolMaster.WrittenOffCategory</th>
                                <th>@ResToolMaster.WrittenOffDescription</th>
                                <th>
                                    @eTurns.DTO.ResItemLocationDetails.ReceivedDate
                                </th>                                
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                
                <script type="text/javascript">
                    var IsCheckViewRight = true;
                    var objPullItemDTO = {
                        tableID: '@htmltableName',                        
                        ToolGUID: '@Tool.GUID',                        
                        PullQuantity: '@Tool.Quantity',                        
                        SerialNumberTracking: '@Tool.SerialNumberTracking',                        
                        ViewRight: '@viewRight',
                        ToolKitDetailGUID: '@Tool.ToolKitDetailGUID',
                        ToolKitGUID: '@Tool.ToolKitGuid'
                    };

                    PrepareWrittenOffDataTable(objPullItemDTO);

                </script>
            }
            <div style="width: 100%; padding-top: 10px;">
                @*@if (viewRight != "ViewOnly" )
                {
                    <input type="button" class="btnGeneral" value="Add" id="btnLoadMoreLots_@(Tool.GUID)" name="btnLoadMoreLots" />
                    <input type="button" class="btnGeneral" value="Delete" id="btnDeleteLots_@(Tool.GUID)" name="btnDeleteLots" />
                }*@
               <input type="button" class="btnGeneral" value="Written Off" id="btnPullPopup_@(Tool.GUID)" name="btnPullPopup" />
               <input type="hidden" name="hdnSelectedId" id="hdnSelectedId_@(Tool.GUID)" />
               <input type="hidden" name="hdnCurrentLoadedIds" id="hdnCurrentLoadedIds_@(Tool.GUID)" />
            </div>
        </div>
    }
}
<table style="width: 100%">
    <tr>
        <td>
            &nbsp;
        </td>
    </tr>
    <tr>
        <td style="text-align: right;">
            <input type="button" class="btnGeneral" value="Written Off All" id="btnPullAllPopUp1" name="btnPullAllPopUp" />
            <input type="button" class="btnGeneral" value="Cancel" id="btnCancel1" name="btnCancelPullPopup" />
        </td>
    </tr>
</table>
<div class="dialog" id="dlgCommonErrorMsgPopup" style="display: none; width: 600px;">
    <div class="inner" style="width: 600px; max-height: 300px; overflow: scroll;">
        <p class="text" id="pErrMessage" style="text-align: left; padding-left: 10px;">
        </p>
        <p id="pOkbtn" class="text" style="text-align: center; padding-left: 10px; display: none;">
            <a href="#" class="no" onclick="closeMessageModalInPopup()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a>
        </p>
    </div>
</div>
<script type="text/javascript">
    var ValidateSerialNumberUrl = '@Url.Action("ValidateSerialNumber", "Tool")';
    var GetSerailNumberListUrl = '@Url.Action("GetSerailNumberList", "Tool")';
    @*var WrittenOffToolURL = '@Url.Action("WrittenOffTool", "Tool")';*@
    var MsgWrittenOffSuccessfully = '@ResToolMaster.ToolWrittenOffSuccessfully';
    var MsgCantWrittenOffMoreThanAvailableQty = '@ResMessage.CantWrittenOffMoreThanAvailableQty'; //You can not Written Off more QTY than available QTY.
    var MsgSomeToolsAreNotWrittenOff = '@ResMessage.SomeToolsAreNotWrittenOff'; //
    var MsgNoLocationToAdd = '@ResPullMaster.MsgNoLocationToAdd';
    $(document).ready(function () {

        if ('@viewRight' == "ViewOnly") {
            $("input[type='text'][name^='txtPoolQuantity_']").keypress(function () {
                return false;
            });
        }

        $("#DivPullSelection").off('change', "input[type='text'][name^='txtLotOrSerailNumber']");
        $("#DivPullSelection").on('change', "input[type='text'][name^='txtLotOrSerailNumber']", function (e) {
            var objCurtxt = $(this);
            var oldValue = $(objCurtxt).val();
            var ids = $(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().find("[id^='hdnPullIds_']").val().split('_');
            var aPos = $("#tblItemPull_" + ids[1].toString()).dataTable().fnGetPosition($(this).parent().parent().parent()[0]);
            var aData = $("#tblItemPull_" + ids[1].toString()).dataTable().fnGetData(aPos);

            var dtThisItem = $("#tblItemPull_" + ids[1].toString()).dataTable();
            var currentTR = $(objCurtxt).parent().parent().parent()[0];
            var row_id = dtThisItem.fnGetPosition(currentTR);

            if ($.trim(oldValue) == '')
                return;

            var isDuplicateEntry = false;
            var OtherPullQuantity = 0;
            var strpullobj = JSON.parse($("#hdnPullMasterDTO_" + ids[1].toString()).val());
            var toolKitDetailGUID = strpullobj.ToolKitDetailGUID;

            $("#tblItemPull_" + ids[1].toString() + " tbody tr").each(function (i) {
                if (i != row_id) {
                    var tr = $(this);
                    var SerialOrLotNumber = $(tr).find('#' + objCurtxt.prop("id")).val();
                    if (SerialOrLotNumber == $(objCurtxt).val()) {
                        isDuplicateEntry = true;
                    }
                    else {
                        var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                        OtherPullQuantity = OtherPullQuantity + parseFloat(txtPullQty);
                    }
                }
            });

            if (isDuplicateEntry == true) {

                if ($("#hdnTrackingType_" + ids[1].toString()).val() == "SerialNumberTracking")
                    alert("Duplicate serial number.");
                else
                    alert("Duplicate number.");

                $(objCurtxt).val("");
                $(objCurtxt).focus();
            }
            else {
                $.ajax({
                    type: "POST",
                    url: ValidateSerialNumberUrl,
                    contentType: 'application/json',
                    dataType: 'json',                                                                      
                    data: "{ ToolGuid: '" + ids[1].toString() + "', SerialOrLotNumber: '" + $.trim($(objCurtxt).val()) + "', ToolKitDetailGuid: '" + toolKitDetailGUID + "' }",
                    success: function (RetData) {

                        if (RetData.ID > 0) {
                            IsCheckViewRight = false;

                            var spnPoolQuantity = parseFloat($("#txtPoolQuantity_" + ids[1].toString()).val());
                            if ((spnPoolQuantity - OtherPullQuantity) > 0) {
                                if ((spnPoolQuantity - OtherPullQuantity) < RetData.PullQuantity)
                                    RetData.PullQuantity = spnPoolQuantity - OtherPullQuantity;
                            }
                            else {
                                RetData.PullQuantity = 0;
                            }

                            dtThisItem.fnUpdate(RetData, row_id, undefined, false, false);
                            IsCheckViewRight = true;

                            $('.ShowAllOptionsSL').click(function () {
                                $(this).siblings('.AutoSerialLot').trigger("focus");
                                $(this).siblings(".AutoSerialLot").autocomplete("search", "");
                            });

                            if (RetData.IsConsignedLotSerial) {
                                $(currentTR).addClass("trconsigned");
                            }
                            else {
                                $(currentTR).removeClass("trconsigned");
                            }
                        }
                        else {
                            $(objCurtxt).val("");
                            $(objCurtxt).focus();
                        }
                    },
                    error: function (err) {
                        console.log(err);
                    }
                });
            }
        });

        $("#DivPullSelection").off('focus', "input[type='text'][name^='txtLotOrSerailNumber']");
        $("#DivPullSelection").on('focus', "input[type='text'][name^='txtLotOrSerailNumber']", function (e) {
            var objCurtxt = $(this);
            var ids = $(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().find("[id^='hdnPullIds_']").val().split('_');
            var aPos = $("#tblItemPull_" + ids[1].toString()).dataTable().fnGetPosition($(this).parent().parent().parent()[0]);
            var aData = $("#tblItemPull_" + ids[1].toString()).dataTable().fnGetData(aPos);
            var dtItemPull = "#tblItemPull_" + ids[1].toString();
            var strSerialLotNos = "";
            var strpullobj = JSON.parse($("#hdnPullMasterDTO_" + ids[1].toString()).val());
            var toolKitDetailGUID = strpullobj.ToolKitDetailGUID;

            $(dtItemPull).find("tbody").find("tr").each(function (index, tr) {

                if (index != aPos) {
                    var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();

                    if (hdnSerialNumberTracking == "true") {
                        var txtLotOrSerailNumber = $.trim($(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val());
                        if (txtLotOrSerailNumber != undefined)
                            strSerialLotNos = strSerialLotNos + txtLotOrSerailNumber + "|#|";
                    }
                    //else {
                    //    var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
                    //    if (hdnBinNumber != undefined)
                    //        strSerialLotNos = strSerialLotNos + hdnBinNumber + "|#|";
                    //}
                }

            });

            if ($(this).hasClass("AutoSerialLot")) {
                $(this).autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: GetSerailNumberListUrl,
                            contentType: 'application/json',
                            dataType: 'json',
                            data: {
                                maxRows: 1000,
                                name_startsWith: request.term,
                                ToolGuid: ids[1].toString(),
                                //BinID: aData.BinID,
                                prmSerialNos: strSerialLotNos,
                                //materialStagingGUID: materialStagingGuid
                                ToolKitDetailGuid: toolKitDetailGUID
                            },
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return {
                                        label: item.LotOrSerailNumber,
                                        value: item.LotOrSerailNumber,
                                        selval: item.LotOrSerailNumber
                                    }
                                }));
                            },
                            error: function (err) {

                            }
                        });
                    },
                    autoFocus: false,
                    minLength: 0,
                    select: function (event, ui) {
                    },
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        $(this).autocomplete('widget').css('z-index', 9000);
                        $('ul.ui-autocomplete').css('overflow-y', 'auto');
                        $('ul.ui-autocomplete').css('max-height', '300px');
                    },
                    close: function () {
                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                        $(objCurtxt).trigger("change");
                    }
                });
            }
        });

        $("#DivPullSelection").off("click", "input[type='button'][name='btnPullPopup']");
        $("#DivPullSelection").on("click", "input[type='button'][name='btnPullPopup']", function () {
            var vItemGUID = $(this).prop("id").split('_')[1];
            var dtID = "#tblItemPull_" + vItemGUID;
            var arrItemDetails;
            var ErrorMessage = ValidateSingleWrittenOff(vItemGUID);
            var isFromToolKit = false;
            var toolKitGUID = "";

            if (ErrorMessage == "") {

                arrItemDetails = new Array();
                var ID = vItemGUID;
                var SpanQty = $("#DivPullSelection").find("#txtPoolQuantity_" + vItemGUID);
                var dt = $("#tblItemPull_" + vItemGUID).dataTable();
                var currentData = dt.fnGetData();
                var strpullobj = JSON.parse($("#hdnPullMasterDTO_" + vItemGUID).val());

                $("#tblItemPull_" + vItemGUID).find("tbody").find("tr").each(function (index, tr) {
                    var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                    var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();
                    //var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
                    var writtenOffCategoryId = $(tr).find("select[name='ddlCategory']").val();
                    var writtenOffDescription = $(tr).find("[name='WrittenOffDescription']").val();

                    
                    var hdnToolGUID = $(tr).find("input[name='hdnToolGUID']").val();
                    var hdnToolKitDetailGUID = $(tr).find("input[name='hdnToolKitDetailGUID']").val();
                    var hdnToolKitGUID = $(tr).find("input[name='hdnToolKitGUID']").val();

                    if ((hdnToolKitGUID !== undefined && hdnToolKitGUID != null && hdnToolKitGUID != "" && hdnToolKitGUID != '00000000-0000-0000-0000-000000000000')
                            && (hdnToolKitDetailGUID !== undefined && hdnToolKitDetailGUID != null && hdnToolKitDetailGUID != "" && hdnToolKitDetailGUID != '00000000-0000-0000-0000-000000000000')) {
                        isFromToolKit = true;
                        toolKitGUID = hdnToolKitGUID;
                    }

                    if (txtPullQty != "") {
                        var txtLotOrSerailNumber = "";
                        if (hdnSerialNumberTracking == "true")
                            var txtLotOrSerailNumber = $(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val();

                        var vSerialNumber = "";

                        if (hdnSerialNumberTracking == "true")
                            vSerialNumber = $.trim(txtLotOrSerailNumber);
                        else
                            vSerialNumber = null;

                        var ToolWrittenOff = { ToolGUID: strpullobj.GUID, Quantity: parseFloat(txtPullQty.toString()), ToolWrittenOffCategoryID: parseInt(writtenOffCategoryId), Details: writtenOffDescription, Serial: vSerialNumber, ToolKitDetailGUID: hdnToolKitDetailGUID, ToolKitGUID: hdnToolKitGUID };
                        arrItemDetails.push(ToolWrittenOff);
                    }
                });

                if (arrItemDetails.length > 0) {
                    WrittenOff(arrItemDetails, isFromToolKit, toolKitGUID);
                }
            }
            else {
                alert(ErrorMessage);
            }
        });

        $("#DivPullSelection").off("click", "input[type='button'][name='btnPullAllPopUp']");
        $("#DivPullSelection").on("click", "input[type='button'][name='btnPullAllPopUp']", function () {
            WrittenOffAll();
        });

        //$("#DivPullSelection").off("tap click", ".tbl-item-pull tbody tr");
        //$("#DivPullSelection").on("tap click", ".tbl-item-pull tbody tr", function (e) {
        //    if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text") {
        //        e.stopPropagation();
        //    }
        //    else if (e.currentTarget.getElementsByTagName("input").btnLoad != undefined) {
        //        e.stopPropagation();
        //    }
        //    else {
        //        if ((e.metaKey || e.ctrlKey)) {
        //            $(this).toggleClass('row_selected');
        //        } else {
        //            $(this).toggleClass('row_selected');
        //        }
        //    }
        //    return false;
        //});

        $("#DivPullSelection").off("click", "input[type='button'][name='btnCancelPullPopup']");
        $("#DivPullSelection").on("click", "input[type='button'][name='btnCancelPullPopup']", function () {
            $("#DivPullSelection").empty();
            $('#DivPullSelection').dialog('close');
        });

        //$("#DivPullSelection").off("click", "input[type='button'][name='btnLoadMoreLots']");
        //$("#DivPullSelection").on("click", "input[type='button'][name='btnLoadMoreLots']", function () {
        //    var vItemGUID = $(this).prop("id").split('_')[1];
        //    //var vRequisitionDetailGUID = $(this).prop("id").split('_')[2];
        //    var dtID = "#tblItemPull_" + vItemGUID;
        //    var strIds = "";
        //    var MaxQuantity = $("#txtPoolQuantity_" + vItemGUID)[0].value;;
        //    var TotalQuantity = 0;

        //    $("#tblItemPull_" + vItemGUID).find("[id*='txtPullQty_']").each(function () {
        //        TotalQuantity = TotalQuantity + parseInt($(this)[0].value);
        //    });

        //    if (parseInt(MaxQuantity) > TotalQuantity) {
        //        IsLoadMoreLotsClicked = true;
        //        $(dtID).find("tbody").find("tr").each(function (index, tr) {
        //            //var hdnLotNumberTracking = $(tr).find("input[name='hdnLotNumberTracking']").val();
        //            var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();
        //            //var hdnDateCodeTracking = $(tr).find("input[name='hdnDateCodeTracking']").val();
        //            var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();

        //            if (txtPullQty != undefined) {
        //                if (txtPullQty == "") {
        //                    txtPullQty = "0";
        //                }
        //                if ((hdnSerialNumberTracking == "true")) {
        //                    var txtLotOrSerailNumber = $.trim($(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val());
        //                    if (txtLotOrSerailNumber != undefined && !IsLotSerialExistsInCurrentLoaded(strIds, txtLotOrSerailNumber))
        //                        strIds = strIds + txtLotOrSerailNumber + "_" + txtPullQty + ",";
        //                }                            
        //                else {
        //                    //var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
        //                    //if (hdnBinNumber != undefined && !IsLotSerialExistsInCurrentLoaded(strIds, hdnBinNumber))
        //                    //    strIds = strIds + hdnBinNumber + "_" + txtPullQty + ",";
        //                    strIds = strIds + "_" + txtPullQty + ",";
        //                }
        //            }
        //        });

        //        $("#hdnCurrentLoadedIds_" + vItemGUID).val(strIds);

        //        var dt = $(dtID).dataTable();
        //        dt.fnStandingRedraw();
        //    }
        //    else {
        //        alert("Can not add new row because total written off Quantity is greater then or equal to written off Quantity.");               
        //    }
        //});

        //$("#DivPullSelection").off('click', "input[type='button'][name='btnDeleteLots']");
        //$("#DivPullSelection").on('click', "input[type='button'][name='btnDeleteLots']", function (e) {
        //    var vItemGUID = $(this).prop("id").split('_')[1];
        //    var dtID = "#tblItemPull_" + vItemGUID;
        //    var TotalRows = $(dtID + ' tbody tr').length;
        //    var SelectedRows = $(dtID + ' tbody tr.row_selected').length;
        //    var RemainingRows = TotalRows - SelectedRows;

        //    if (SelectedRows <= 0) {
        //        alert("Select at least one row to delete.");
        //    }
        //    else {
        //        if (RemainingRows >= 1) {
        //            $(dtID).find("tbody").find("tr.row_selected").each(function (index, tr) {
        //                $(tr).remove();
        //            });

        //            var strIds = "";
        //            $(dtID).find("tbody").find("tr").each(function (index, tr) {

        //                //var hdnLotNumberTracking = $(tr).find("input[name='hdnLotNumberTracking']").val();
        //                var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();
        //                //var hdnDateCodeTracking = $(tr).find("input[name='hdnDateCodeTracking']").val();
        //                var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();

        //                if (txtPullQty == "")
        //                    txtPullQty = "0";

        //                if ((hdnSerialNumberTracking == "true")) {
        //                    var txtLotOrSerailNumber = $.trim($(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val());
        //                    if (txtLotOrSerailNumber != undefined && !IsLotSerialExistsInCurrentLoaded(strIds, txtLotOrSerailNumber))
        //                        strIds = strIds + txtLotOrSerailNumber + "_" + txtPullQty + ",";
        //                }                        
        //                else {
        //                    //var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
        //                    //if (hdnBinNumber != undefined && !IsLotSerialExistsInCurrentLoaded(strIds, hdnBinNumber))
        //                    //    strIds = strIds + hdnBinNumber + "_" + txtPullQty + ",";
        //                    strIds = strIds + "_" + txtPullQty + ",";
        //                }

        //            });

        //            $("#hdnCurrentLoadedIds_" + vItemGUID).val(strIds);
        //            isDeleteSrLotRow = true;
        //            var dtThisItem = $(dtID).dataTable();
        //            dtThisItem.fnStandingRedraw();
        //        }
        //        else {
        //            alert("Can not delete row because at least one row should exists.");                    
        //        }

        //    }
        //});
    });

    function closeMessageModalInPopup() {
        $.modal.impl.close();
    }

    function WrittenOff(ArrItem, IsFromToolKit, ToolKitGUID) {
        $('#DivLoading').show();
        $.ajax({
            type: "POST",
            url: WrittenOffToolURL,
            contentType: 'application/json',
            dataType: 'json',
            data: JSON.stringify(ArrItem),
            success: function (RetData) {
                var errorMessage = "";
                $.each(RetData, function (indx, RetDataItem) {
                    if (RetDataItem.ErrorMessage != null && RetDataItem.ErrorMessage != undefined && RetDataItem.ErrorMessage.trim() > '') {
                        errorMessage += RetDataItem.ErrorMessage + "<br />";
                    }
                    else {
                        $('#divItem_' + RetDataItem.ItemGUID).attr('style', '');
                        $('#divItem_' + RetDataItem.ItemGUID).remove();
                    }
                });

                $('#DivLoading').hide();
                if (errorMessage != "") {
                    $.modal.impl.close();
                    errorMessage = "<b>" + MsgSomeToolsAreNotWrittenOff +"</b><br /><br />" + errorMessage;
                    $('#dlgCommonErrorMsgPopup').find("#pOkbtn").css('display', '');
                    $('#dlgCommonErrorMsgPopup').find("#pErrMessage").html(errorMessage);
                    $('#dlgCommonErrorMsgPopup').modal();
                    $('#dlgCommonErrorMsgPopup').css("z-index", "1104");
                    $('#simplemodal-overlay').css("z-index", "1103");
                    $('#simplemodal-container').css("z-index", "1104");
                }
                else {
                    $.modal.impl.close();
                    $('#dlgCommonErrorMsgPopup').find("#pOkbtn").css('display', '');
                    $('#dlgCommonErrorMsgPopup').find("#pErrMessage").html("<b>" + MsgWrittenOffSuccessfully + "</b><br /><br />");
                    $('#dlgCommonErrorMsgPopup').modal();
                    $('#dlgCommonErrorMsgPopup').css("z-index", "1104");
                    $('#simplemodal-overlay').css("z-index", "1103");
                    $('#simplemodal-container').css("z-index", "1104");
                    if ($('div[id^="divItem_"]').length <= 0) {
                        $('#DivPullSelection').dialog('close');
                        //$('#ItemModeDataTable').dataTable().fnStandingRedraw();
                    }
                }
                
                if (IsFromToolKit == true)
                {
                    UpdateKitCostWIPAndKitParts();
                    if (ToolKitGUID != undefined && ToolKitGUID != null && ToolKitGUID != "")
                    {
                        fillLineItem();                    
                    }
                }                 
            },
            error: function (err) {
                $('#DivLoading').hide();
                $.modal.impl.close();
                $('#dlgCommonErrorMsgPopup').find("#pOkbtn").css('display', '');
                $('#dlgCommonErrorMsgPopup').find("#pErrMessage").html("Not saved, error occured");
                $('#dlgCommonErrorMsgPopup').modal();
                $('#dlgCommonErrorMsgPopup').css("z-index", "1004");
                $('#simplemodal-overlay').css("z-index", "1003");
                $('#simplemodal-container').css("z-index", "1004");
            },
            complete: function () {
            }
        });
    }

    function WrittenOffAll() {
        var arrItemDetails;
        var ErrorMessage = ValidateAllWrittenOff();
        arrItemDetails = new Array();
        var isFromToolKit = false;
        var toolKitGUID = "";

        if (ErrorMessage == "") {
            $("#DivPullSelection").find("table[id^='tblItemPullheader']").each(function (indx, tblHeader) {
                var strpullobj = JSON.parse($(tblHeader).find("input[name='hdnPullMasterDTO']").val());
                //arrItemDetails = new Array();
                var ID = $(tblHeader).prop("id").split('_')[1];
                var vToolGUID = strpullobj.ToolGUID;
                var SpanQty = 0;

                if (ID != '00000000-0000-0000-0000-000000000000')
                    SpanQty = $(tblHeader).find("#txtPoolQuantity_" + ID);
                else
                    SpanQty = $(tblHeader).find("#txtPoolQuantity_" + vToolGUID);

                var dt = null;
                if ($("#tblItemPull_" + ID).length > 0)
                    dt = $("#tblItemPull_" + ID).dataTable();

                if ($("#tblItemPull_" + ID).length > 0) {
                    var currentData = dt.fnGetData();
                    $("#tblItemPull_" + ID).find("tbody").find("tr").each(function (index, tr) {
                        //var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
                        var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                        var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();
                        var writtenOffCategoryId = $(tr).find("select[name='ddlCategory']").val();
                        var writtenOffDescription = $(tr).find("[name='WrittenOffDescription']").val();
                        
                        // Added for Written Off from ToolKit (WI-5078)
                        var hdnToolGUID = $(tr).find("input[name='hdnToolGUID']").val();
                        var hdnToolKitDetailGUID = $(tr).find("input[name='hdnToolKitDetailGUID']").val();
                        var hdnToolKitGUID = $(tr).find("input[name='hdnToolKitGUID']").val();
                        // end for (WI-5078)

                        if ((hdnToolKitGUID !== undefined && hdnToolKitGUID != null && hdnToolKitGUID != "" && hdnToolKitGUID != '00000000-0000-0000-0000-000000000000')
                            && (hdnToolKitDetailGUID !== undefined && hdnToolKitDetailGUID != null && hdnToolKitDetailGUID != "" && hdnToolKitDetailGUID != '00000000-0000-0000-0000-000000000000'))
                        {
                            isFromToolKit = true;
                            toolKitGUID = hdnToolKitGUID;
                        }
                        
                        if (txtPullQty != "") {
                            var txtLotOrSerailNumber = "";
                            if (hdnSerialNumberTracking == "true")
                                var txtLotOrSerailNumber = $(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val();

                            var vSerialNumber = "";

                            if (hdnSerialNumberTracking == "true")
                                vSerialNumber = $.trim(txtLotOrSerailNumber);
                            else
                                vSerialNumber = null;

                            //var ToolWrittenOff = { ToolGUID: strpullobj.GUID, Quantity: parseFloat(txtPullQty.toString()), ToolWrittenOffCategoryID: parseInt(writtenOffCategoryId), Details: writtenOffDescription, Serial: vSerialNumber };
                            var ToolWrittenOff = { ToolGUID: strpullobj.GUID, Quantity: parseFloat(txtPullQty.toString()), ToolWrittenOffCategoryID: parseInt(writtenOffCategoryId), Details: writtenOffDescription, Serial: vSerialNumber, ToolKitDetailGUID: hdnToolKitDetailGUID, ToolKitGUID: hdnToolKitGUID }; // modified for (WI-5078)
                            arrItemDetails.push(ToolWrittenOff);
                        }
                    });
                }
            });

            if (arrItemDetails.length > 0) {
                WrittenOff(arrItemDetails, isFromToolKit, toolKitGUID);
            }
        }
        else {
            alert(ErrorMessage);
        }
    }

    function ValidateAllWrittenOff() {
        var returnVal = true;
        var errormsg = "";
        var isMoreQty = false;
        $("#DivPullSelection").find("table[id^='tblItemPullheader']").each(function (indx, tblHeader) {
            var ID = $(tblHeader).prop("id").split('_')[1];
            var SpanQty = $(tblHeader).find("#txtPoolQuantity_" + ID);
            var TotalEntered = 0;

            if ($("#tblItemPull_" + ID).length > 0) {
                $("#tblItemPull_" + ID).find("tbody").find("tr").each(function (index, tr) {
                    if ($(tr).find("input[type='text'][name='txtPullQty']").length > 0) {
                        var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                        var spnLotSerialQuantity = $(tr).find("span[name='spnLotSerialQuantity']").text();

                        if (parseFloat(txtPullQty) > parseFloat(spnLotSerialQuantity)) {
                            errormsg = "\n" + MsgCantWrittenOffMoreThanAvailableQty;
                            isMoreQty = true;
                            return errormsg;
                        }

                        TotalEntered = TotalEntered + parseFloat(txtPullQty);
                    }
                });

                if (isMoreQty == false) {
                    var pullQty = parseFloat($(SpanQty).val().toString());
                    if (TotalEntered != pullQty) {
                        errormsg = errormsg + "\n You have entered :" + TotalEntered + " QTY. You had entered Written Off Qty :" + pullQty;
                    }
                }
                else {
                    errormsg = MsgCantWrittenOffMoreThanAvailableQty;
                }
            }
        });

        return errormsg;
    }

    function ValidateSingleWrittenOff(vItemGUID) {

        var returnVal = true;
        var errormsg = "";
        var isMoreQty = false;
        var dtID = "#tblItemPull_" + vItemGUID;

        var SpanQty = $("#DivPullSelection").find("#txtPoolQuantity_" + vItemGUID);

        var TotalEntered = 0;
        $("#tblItemPull_" + vItemGUID).find("tbody").find("tr").each(function (index, tr) {
            var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
            var spnLotSerialQuantity = $(tr).find("span[name='spnLotSerialQuantity']").text();

            if (parseFloat(txtPullQty) > parseFloat(spnLotSerialQuantity)) {
                errormsg = "\n" + MsgCantWrittenOffMoreThanAvailableQty;
                isMoreQty = true;
                return errormsg;
            }

            TotalEntered = TotalEntered + parseFloat(txtPullQty);
        });

        if (isMoreQty == false) {
            var pullQty = parseFloat($(SpanQty).val().toString());
            if (TotalEntered != pullQty) {
                errormsg = errormsg + "\n You have entered :" + TotalEntered + " QTY. You had entered Written Off Qty :" + pullQty;
            }
        }
        else {
            errormsg = MsgCantWrittenOffMoreThanAvailableQty;
        }

        return errormsg;
    }

    //function IsLotSerialExistsInCurrentLoaded(strIds, SerialLot) {
    //    if (SerialLot.trim() == '')
    //        return true;

    //    if (strIds.trim() == '')
    //        return false

    //    var ArrIds = strIds.split(',');
    //    var i = 0;
    //    for (i = 0; i < ArrIds.length; i++) {
    //        if (ArrIds[i].split('_')[0].toLowerCase() == SerialLot.toLowerCase()) {
    //            return true;
    //        }
    //    }

    //    return false;
    //}

</script>
