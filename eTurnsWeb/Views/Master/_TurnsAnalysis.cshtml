<div class="tabContener">
    <div id="dvTurnsAnalysis" class="userContent" style="float: left; width: 100%;">
        <div class="searchWrapper" style="margin: 0px; width: 100%;">
            <div class="searchBlock">
                <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                <div class="searchinputB">
                    <input type="text" class="searchinputE" id="global_filterTurnsAnalysis" />
                    <a href="javascript:void(0);" class="xclose">
                        <img src="~/Content/images/x.png" alt="X" id="clear_global_filterTurnsAnalysis" /></a>
                </div>
            </div>
        </div>
        <div style="display: block; padding: 10px; float: right;" class="BtnBlock">

            <div class="print" style="padding:5px;">
                <div class="refresh">
                    <a href="javascript:void(null);">
                        <img src="/content/images/print.png" alt="">
                    </a>
                    <div class="refreshBlock">
                        <ul>
                            <li class="refreshBlockswf">
                                <a id="lnkExpExcelTurns" onclick="ExportDataForDashboardMinMaxTune('TurnsTable', 'TuningList', 'Excel', false);">
                                    <span>@eTurns.DTO.Resources.ResCommon.ExcelExport</span>
                                </a>
                            </li>
                            <li class="refreshBlockswf">
                                <a id="lnkExpExcelTurns" onclick="ExportDataForDashboardMinMaxTune('TurnsTable', 'TuningList', 'CSV', false);">
                                    <span>@eTurns.DTO.Resources.ResCommon.CSVExport</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <a title="Select all" href="javascript:void(null);" id="TurnsTableSelectAll" class="TurnsTableSelectAll" style="float: left;margin-top: 2px;">
                <img src="/content/images/selectall.png" alt="Select all" width="25px" height="25px">
            </a>
            <a title="Select all" href="javascript:void(null);" id="TurnsTableDeSelectAll" class="TurnsTableDeSelectAll" style="float: left;margin-top: 2px;display:none">
                <img src="/content/images/UnSelectAll.png" alt="Select all" width="25px" height="25px">
            </a>
            <a id="TurnsTableColumnOrderSetup"><img src="/content/images/column-setup.png" alt="@ResGridHeader.Reorder" title="@ResGridHeader.Reorder"></a>
        </div>
        <table id="TurnsTable" class="display">
            <thead>
                <tr>
                    <th>
                        @ResInventoryAnalysis.ItemNumber
                    </th>
                    <th>
                        @ResInventoryAnalysis.IsitemLevelMinMax
                    </th>
                    <th>
                        @ResInventoryAnalysis.Description
                    </th>
                    <th>
                        @ResInventoryAnalysis.InventoryClassification
                    </th>
                    <th>
                        @ResInventoryAnalysis.Category
                    </th>
                    <th>
                        @ResInventoryAnalysis.SupplierName
                    </th>
                    <th>
                        @ResInventoryAnalysis.Location
                    </th>
                    <th>
                        @ResInventoryAnalysis.AvailableQty
                    </th>
                    <th>
                        @ResInventoryAnalysis.InventoryValue
                    </th>
                    <th>
                        @ResInventoryAnalysis.AverageCost
                    </th>
                    <th>
                        @ResInventoryAnalysis.PeriodPullValueUsage
                    </th>
                    <th>
                        @ResInventoryAnalysis.AvgDailyPullValueUsage
                    </th>
                    <th>
                        @ResInventoryAnalysis.PeriodPullUsage
                    </th>
                    <th>
                        @ResInventoryAnalysis.AvgDailyPullUsage
                    </th>
                    <th>
                        @ResInventoryAnalysis.PeriodOrdersUsage
                    </th>
                    <th>
                        @ResInventoryAnalysis.AvgDailyOrdersUsage
                    </th>
                    <th>
                        @ResInventoryAnalysis.PullValueTurns
                    </th>
                    <th>
                        @ResInventoryAnalysis.PullTurns
                    </th>
                    <th>
                        @ResInventoryAnalysis.OrderTurns
                    </th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
<div class="refresh setup" style="display:none;">
    <div id="TurnsColumnSortableModal" style="display: none;">
        <div class="sortableContainer">
            <ul id="TurnsColumnSortable"></ul>
        </div>
        <input type="submit" class="CreateBtn" id="btnSaveOrder" value="Reorder" onclick="UpdateTurnsColumnOrder('TurnsTable', 'TurnsTable')" />
    </div>
</div>
<script type="text/javascript">

    $(document).ready(function () {
        $(document).on("click", "a#TurnsTableSelectAll", function () {
            $("#TurnsTable").find("tbody tr").removeClass("row_selected").addClass("row_selected");
            $(this).next("a#TurnsTableDeSelectAll").css('display', '');
            $(this).css('display', 'none');
        });

        $(document).on("click", "a#TurnsTableDeSelectAll", function () {
            $("#TurnsTable").find("tbody tr").removeClass("row_selected");
            $(this).prev("a#TurnsTableSelectAll").css('display', '');
            $(this).css('display', 'none');
        });

        $(document).on("click", "#TurnsTable tbody tr", function (e) {
            $(this).toggleClass('row_selected');
        });

    });

    var TurnsColumns = new Array();
    var oTableTurnsAnalysis;
    var objDashboardTurnsColumns = {}
    var MsgRecordToPrint = '@ResDashboard.MsgRecordToPrint';
    jQuery(function () {
        TurnsColumns.push({
            mDataProp: "ItemNumber", sClass: "read_only", "fnRender": function (obj, val) {
                return '<input type="hidden" id="hdnItemGuid" name="hdnItemGuid" value="' + obj.aData.GUID + '"/> <span>' + obj.aData.ItemNumber + '</span>';
            }
        });
        TurnsColumns.push({ mDataProp: "IsItemLevelMinMaxQtyRequired", sClass: "read_only", "fnRender": function (obj, val) {
            return GetBoolInFormat(obj, val);
        }
        });
        TurnsColumns.push({ mDataProp: "Description", sClass: "read_only" });
        TurnsColumns.push({ mDataProp: "InventoryClassification", sClass: "read_only" });
        TurnsColumns.push({ mDataProp: "Category", sClass: "read_only" });
        TurnsColumns.push({ mDataProp: "SupplierName", sClass: "read_only" });
        TurnsColumns.push({ mDataProp: "BinNumber", sClass: "read_only" });
        TurnsColumns.push({ mDataProp: "OnHandQuantity", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.OnHandQuantity != null && obj.aData.OnHandQuantity != NaN)
                return "<span id='spnOnHand_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.OnHandQuantity, 2) + "</span>";
            else
                return "<span id='spnOnHand_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "ItemInventoryValue", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.ItemInventoryValue != null && obj.aData.ItemInventoryValue != NaN)
                return "<span id='spnIv_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.ItemInventoryValue, 1) + "</span>";
            else
                return "<span id='spnIv_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 2) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "AverageCost", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.AverageCost != null && obj.aData.AverageCost != NaN)
                return "<span id='spnAverageCost_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.AverageCost, 1) + "</span>";
            else
                return "<span id='spnAverageCost_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 1) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "PullCost", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.PullCost != null && obj.aData.PullCost != NaN)
                return "<span id='spnPullCost_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.PullCost, 4) + "</span>";
            else
                return "<span id='spnPullCost_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "AvgDailyPullValueUsage", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.AvgDailyPullValueUsage != null && obj.aData.AvgDailyPullValueUsage != NaN)
                return "<span id='spnAvgDailyPullValueUsage_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.AvgDailyPullValueUsage, 4) + "</span>";
            else
                return "<span id='spnAvgDailyPullValueUsage_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "PullQuantity", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.PullQuantity != null && obj.aData.PullQuantity != NaN)
                return "<span id='spnPullQuantity_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.PullQuantity, 4) + "</span>";
            else
                return "<span id='spnPullQuantity_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "AvgDailyPullUsage", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.AvgDailyPullUsage != null && obj.aData.AvgDailyPullUsage != NaN)
                return "<span id='spnAvgDailyPullUsage_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.AvgDailyPullUsage, 4) + "</span>";
            else
                return "<span id='spnAvgDailyPullUsage_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "OrderedQuantity", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.OrderedQuantity != null && obj.aData.OrderedQuantity != NaN)
                return "<span id='spnOrderedQuantity_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.OrderedQuantity, 4) + "</span>";
            else
                return "<span id='spnOrderedQuantity_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "AvgDailyOrderUsage", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.AvgDailyOrderUsage != null && obj.aData.AvgDailyOrderUsage != NaN)
                return "<span id='spnAvgDailyOrderUsage_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.AvgDailyOrderUsage, 4) + "</span>";
            else
                return "<span id='spnAvgDailyOrderUsage_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "PullValueTurn", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.PullValueTurn != null && obj.aData.PullValueTurn != NaN)
                return "<span id='spnPullValueTurn_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.PullValueTurn, 4) + "</span>";
            else
                return "<span id='spnPullValueTurn_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "PullTurn", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.PullTurn != null && obj.aData.PullTurn != NaN)
                return "<span id='spnPullTurn_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.PullTurn, 4) + "</span>";
            else
                return "<span id='spnPullTurn_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
        });
        TurnsColumns.push({ mDataProp: "OrderTurn", sClass: "read_only", "fnRender": function (obj, val) {
            if (obj.aData.OrderTurn != null && obj.aData.OrderTurn != NaN)
                return "<span id='spnOrderTurn_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(obj.aData.OrderTurn, 4) + "</span>";
            else
                return "<span id='spnOrderTurn_" + obj.aData.GUID + "'>" + FormatedCostQtyValues(0, 4) + "</span>";
        }
        });

        //        TurnsColumns.push({ mDataProp: "IsClosed", sClass: "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } });
        //        TurnsColumns.push({ mDataProp: "Created", sClass: "read_only", fnRender: function (obj, val) { return GetDateInFullFormat(val); } });
        //        TurnsColumns.push({ mDataProp: "Updated", sClass: "read_only", fnRender: function (obj, val) { return GetDateInFullFormat(val); } });
        //        TurnsColumns.push({ mDataProp: "UpdatedByName", sClass: "read_only" });
        //        TurnsColumns.push({ mDataProp: "CreatedByName", sClass: "read_only" });
        objDashboardTurnsColumns = GetGridHeaderColumnsObject('TurnsTable');
        oTableTurnsAnalysis = $('#TurnsTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "100%",
            "sScrollY": "400px",
            //"bScrollAutoCss": false,
            //"sDom": 'R<"top"l<"clear">>rt<"bottom"iS<"clear">>',
            "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[1, "asc"]],
            "oColReorder": {},
            "bDestroy": true,
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,/**/
            "bDeferRender": true,/**/
            //"iDeferLoading": 1,
            "aoColumns": TurnsColumns,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";
                if (aData.IsDeleted || aData.IsArchived) {
                    $(nRow).find("input,select").attr("disabled", "disabled");
                    $("#thUpdate").css("display", 'none');
                    $(nRow).find("input[type='button'][id^='btnUpdateCartItem']").parent("td").hide();
                }
                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {

                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'TurnsTable' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {

                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'TurnsTable' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '') {
                            o = JSON.parse(json.jsonData);
                        }
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("TurnsListAjax", "Master")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        $('#myDataTable').removeHighlight();
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        if ($("#global_filter").val() != '') {
                            $('#myDataTable').highlight($("#global_filter").val());
                        }
                        //                            SetUDFSelected(oSettings);
                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
            }
        }).makeEditable({
            sUpdateURL: '@Url.Content("~/Master/UpdateData")'
        });

        var timeoutsc1;
        $('#global_filterTurnsAnalysis').bind('textchange', function (event) {
            clearTimeout(timeoutsc1);
            var self = this;
            timeoutsc1 = setTimeout(function () {
                if (SearchPattern == 2 || SearchPattern == "2") {
                    fnFilterTurnstable();
                }
                else
                {
                    $('#global_filterTurnsAnalysis').unbind("keypress");
                    $('#global_filterTurnsAnalysis').keypress(function (event) {
                        var KeyCode = (event.keyCode ? event.keyCode : event.which);
                        setTimeout(function () {
                            if (typeof $("#global_filterTurnsAnalysis") != 'undefined' && (KeyCode == 13 || $("#global_filterTurnsAnalysis").val().length == 0)) {
                                fnFilterTurnstable();
                            }
                        }, 200);
                    });
                    if ($("#global_filterTurnsAnalysis").val().length == 0) {
                        var KeyCode = 0;
                        setTimeout(function () {
                            if (typeof $("#global_filterTurnsAnalysis") != 'undefined' && (KeyCode == 13 || $("#global_filterTurnsAnalysis").val().length == 0)) {
                                fnFilterTurnstable();
                            }
                        }, 200);
                    }
                }
            }, 600);
            return false;
        });

        if (SearchPattern == 2 || SearchPattern == "2") {
            $("#global_filterTurnsAnalysis").keydown(function (e) {
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code == 13 && $("#global_filterTurnsAnalysis").val().length >= 2) {
                    fnFilterTurnstable();
                    return false;
                }
            });
        }

        //        $("#dvTurnsAnalysis").find(".dataTables_scrollBody").scroll(function (evnt) {
        //            if ($(this).scrollLeft() >= 276) {
        //                $("#dvTurnsAnalysis").find(".dataTables_scrollBody").scrollLeft(276);
        //            }

        //        });
    });

    function fnFilterTurnstable() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#global_filterTurnsAnalysis") != 'undefined' && ($("#global_filterTurnsAnalysis").val().length > 2 || $("#global_filterTurnsAnalysis").val().length == 0)) {
            clearNarrowSearchFilter();
            var searchtext = $("#global_filterTurnsAnalysis").val().replace(/'/g, "''");
            oTableTurnsAnalysis.fnFilter(searchtext, null, null, null);
            //$("#global_filterTurnsAnalysis").select();
        }
        else {
            $('#TurnsTable td').removeHighlight();
            $('#TurnsTable td').highlight($("#global_filterTurnsAnalysis").val());
        }

        HideOtherTabs();
    }


    $("#clear_global_filterTurnsAnalysis").click(ClearFilterSCTA);

    function ClearFilterSCTA() {

        //Check length first
        if ($("#global_filterTurnsAnalysis").val().length > 0) {
            $("#global_filterTurnsAnalysis").val('');
            $('#TurnsTable').dataTable().fnFilter(
                            $("#global_filterTurnsAnalysis").val(),
                            null,
                            null,
                            null
                        );
        }
        $("#global_filterTurnsAnalysis").focus();
        return false;
    }
    _Common.setGloblaSearch('global_filterTurnsAnalysis', 'TurnsTable');
</script>
