@model eTurns.DTO.eVMISetupDTO
@{

    string PollTime1 = Model.PollTime1.HasValue ? Model.PollTime1.Value.Hours + ":" + Model.PollTime1.Value.Minutes : "00:00";
    string PollTime2 = Model.PollTime2.HasValue ? Model.PollTime2.Value.Hours + ":" + Model.PollTime2.Value.Minutes : "00:00";
    string PollTime3 = Model.PollTime3.HasValue ? Model.PollTime3.Value.Hours + ":" + Model.PollTime3.Value.Minutes : "00:00";
    string PollTime4 = Model.PollTime4.HasValue ? Model.PollTime4.Value.Hours + ":" + Model.PollTime4.Value.Minutes : "00:00";
    string PollTime5 = Model.PollTime5.HasValue ? Model.PollTime5.Value.Hours + ":" + Model.PollTime5.Value.Minutes : "00:00";
    string PollTime6 = Model.PollTime6.HasValue ? Model.PollTime6.Value.Hours + ":" + Model.PollTime6.Value.Minutes : "00:00";
    bool isEVMI = false;
    if (eTurnsWeb.Helper.SessionHelper.isEVMI != null)
    {
        isEVMI = (bool)eTurnsWeb.Helper.SessionHelper.isEVMI;
    }

}
<script src="~/Scripts/jquery-ui-timepicker-addon.js" type="text/javascript"></script>
<script language="javascript" type="text/javascript">
    var IsRefreshGrid = false;
    var IsDeletePopupOpen = false;
    var AllowDeletePopup = true;
</script>
<div class="userListingWrapper">
    <h2>
        @ReseVMISetup.EvmiSetting
    </h2>
    <div class="userListBlock">
        <div id="Ctab" class="tabContener" style="display: block;">

            @using (Ajax.BeginForm("eVMISettingSave", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmeVMISetupOld" }))
            {
                @Html.AntiForgeryToken()
                <div class="userHead">
                    @Html.ValidationSummary(true)
                    @if (Model != null && Model.ID != 0)
                    {
                        <div class="infoBlock">
                            <ul>
                                <li>
                                    <label for="RoomName">
                                        @Html.LabelFor(model => model.RoomName)
                                    </label>
                                    : <span>@(Model.RoomName)</span>
                                </li>
                                <li>
                                    <label for="RoomName">
                                        @Html.LabelFor(model => model.Created)
                                    </label>
                                    : <span>@(Model.CreatedDate)</span>
                                </li>
                                <li>
                                    <label for="RoomName">
                                        @Html.LabelFor(model => model.CreatedByName)
                                    </label>
                                    : <span>@(Model.CreatedByName)</span>
                                </li>
                                <li>
                                    <label for="RoomName">
                                        @Html.LabelFor(model => model.Updated)
                                    </label>
                                    : <span>@(Model.UpdatedDate)</span>
                                </li>
                                <li style="border: none">
                                    <label for="RoomName">
                                        @Html.LabelFor(model => model.UpdatedByName)
                                    </label>
                                    : <span>@(Model.UpdatedByName)</span>
                                </li>
                            </ul>
                        </div>
                    }
                    else
                    {
                        <div class="infoBlock">
                        </div>
                    }
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.RadioButton("rdoTimedPoll", "TimedPoll", Model.PollType == 1 ? true : false, new { onclick = "fnEnableDisableType(this)" })
                                    @Html.Raw(ReseVMISetup.TimedPoll)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.PollInterval, new { id = "txtPollInterval", @onkeypress = "return onlyNumeric(event)", @class = "Smalltext-box", maxlength = 3 })
                                    @Html.Label(ResSchedulerReportList.Minutes)
                                    @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                                    @Html.HiddenFor(model => model.GUID)
                                    @Html.HiddenFor(model => model.Created)
                                    @Html.HiddenFor(model => model.Updated)
                                    @Html.HiddenFor(model => model.CreatedBy)
                                    @Html.HiddenFor(model => model.LastUpdatedBy)
                                    @Html.HiddenFor(model => model.Room)
                                    @Html.HiddenFor(model => model.RoomName)
                                    @Html.HiddenFor(model => model.CompanyID)
                                    @Html.HiddenFor(model => model.CreatedByName)
                                    @Html.HiddenFor(model => model.UpdatedByName)
                                    @Html.HiddenFor(model => model.IsDeleted)
                                    @Html.HiddenFor(model => model.IsArchived)
                                    @Html.HiddenFor(model => model.PollType)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.RadioButton("rdoPollTime", "PollTime", Model.PollType == 2 ? true : false, new { onclick = "fnEnableDisableType(this)" })
                                    @Html.Raw(ReseVMISetup.PollTime)
                                </div>
                                <div class="editor-field">
                                    <fieldset id="divTimebased">
                                        <div style="padding-top: 5px; padding-bottom: 5px;" id="divTimeBased">
                                            <div id="divPollTime" class="editor-field">
                                                <br />
                                                <table>
                                                    <tr>
                                                        <td>
                                                            <div class="editor-field">
                                                                @Html.LabelFor(model => model.PollTime1)
                                                                @Html.TextBoxFor(model => model.PollTime1, new { @class = "text-boxMedium ScheduleTime1" })
                                                                @Html.ValidationMessageFor(model => model.PollTime1)
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <div class="editor-field">
                                                                @Html.LabelFor(model => model.PollTime2)
                                                                @Html.TextBoxFor(model => model.PollTime2, new { @class = "text-boxMedium ScheduleTime2" })
                                                                @Html.ValidationMessageFor(model => model.PollTime2)
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <div class="editor-field">
                                                                @Html.LabelFor(model => model.PollTime3)
                                                                @Html.TextBoxFor(model => model.PollTime3, new { @class = "text-boxMedium ScheduleTime3" })
                                                                @Html.ValidationMessageFor(model => model.PollTime3)
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <div class="editor-field">
                                                                @Html.LabelFor(model => model.PollTime4)
                                                                @Html.TextBoxFor(model => model.PollTime4, new { @class = "text-boxMedium ScheduleTime4" })
                                                                @Html.ValidationMessageFor(model => model.PollTime4)
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <div class="editor-field">
                                                                @Html.LabelFor(model => model.PollTime5)
                                                                @Html.TextBoxFor(model => model.PollTime5, new { @class = "text-boxMedium ScheduleTime5" })
                                                                @Html.ValidationMessageFor(model => model.PollTime5)
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <div class="editor-field">
                                                                @Html.LabelFor(model => model.PollTime6)
                                                                @Html.TextBoxFor(model => model.PollTime6, new { @class = "text-boxMedium ScheduleTime6" })
                                                                @Html.ValidationMessageFor(model => model.PollTime6)
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </div>
                                        </div>
                                    </fieldset>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ErrorEmailAddresses)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.ErrorEmailAddresses, 10, 100, new { @class = "text-box" })
                                    <br />
                                    <b style="padding-left:26%;">@ResMessage.msgMultiemailEntry</b>
                                    @Html.ValidationMessageFor(model => model.ErrorEmailAddresses)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.IsSuggstedOrder)
                                </div>
                                <div class="editor-field">
                                    @Html.EditorFor(model => model.IsSuggstedOrder)
                                    @Html.ValidationMessageFor(model => model.IsSuggstedOrder)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.IsCriticalOrders)
                                </div>
                                <div class="editor-field">
                                    @Html.EditorFor(model => model.IsCriticalOrders)
                                    @Html.ValidationMessageFor(model => model.IsCriticalOrders)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.IsBadPolls)
                                </div>
                                <div class="editor-field">
                                    @Html.EditorFor(model => model.IsBadPolls)
                                    @Html.ValidationMessageFor(model => model.IsBadPolls)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.InactivityReportStart)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.InactivityReportStart, new { @class = "text-boxMedium ScheduleTime" })
                                    @Html.ValidationMessageFor(model => model.InactivityReportStart)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.InactivityReportEnd)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.InactivityReportEnd, new { @class = "text-boxMedium ScheduleTime" })
                                    @Html.ValidationMessageFor(model => model.InactivityReportEnd)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.InactivityonSaturday)
                                </div>
                                <div class="editor-field">
                                    @Html.EditorFor(model => model.InactivityonSaturday)
                                    @Html.ValidationMessageFor(model => model.InactivityonSaturday)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.InactivityonSunday)
                                </div>
                                <div class="editor-field">
                                    @Html.EditorFor(model => model.InactivityonSunday)
                                    @Html.ValidationMessageFor(model => model.InactivityonSunday)
                                </div>
                            </li>
                            @if (isEVMI)
                            {
                                <li>
                                    <div class="editor-label">
                                        &nbsp;
                                    </div>
                                    <div class="BtnBlockform">
                                        <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }

        </div>
    </div>
</div>
<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmeVMISetupOld");
        e.preventDefault();
    });
</script>
<script language="javascript" type="text/javascript">
    function onSuccess(response) {
        IsRefreshGrid = true;
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
        }
        else if (idValue == 0) {

            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                window.location.href = '@Url.Action("eVMISetting","Master")';
            }

        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            }
            else {
                window.location.href = '@Url.Action("eVMISetting","Master")';
            }
        }
        return false;
    }
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        showNotificationDialog();
    }

    function fnEnableDisableType(obj) {
        if ($(obj).val() == 'TimedPoll') {
            $('#txtPollInterval').removeAttr("disabled");
            $('#divPollTime :input').attr("disabled", "disabled");
            $("#rdoTimedPoll").prop("checked", true);
            $("#rdoPollTime").prop("checked", false);
            $("#PollType").val(1);
        }
        else if ($(obj).val() == 'PollTime') {
            $('#txtPollInterval').attr("disabled", "disabled");
            $('#divPollTime :input').removeAttr("disabled");
            $("#rdoTimedPoll").prop("checked", false);
            $("#rdoPollTime").prop("checked", true);
            $("#PollType").val(2);
        }
    }

    $(document).ready(function () {


       var picker = $('.ScheduleTime1').timepicker({ timeFormat: 'HH:mm' });
        if ($("input#PollTime1").val() != '') {
            picker.timepicker('setTime', '@PollTime1');
        }
        var picker2 = $('.ScheduleTime2').timepicker({ timeFormat: 'HH:mm' });
        if ($("input#PollTime2").val() != '') {
            picker2.timepicker('setTime', '@PollTime2');
        }
        var picker3 = $('.ScheduleTime3').timepicker({ timeFormat: 'HH:mm' });
        if ($("input#PollTime3").val() != '') {
            picker3.timepicker('setTime', '@PollTime3');
        }
        var picker4 = $('.ScheduleTime4').timepicker({ timeFormat: 'HH:mm' });
        if ($("input#PollTime4").val() != '') {
            picker4.timepicker('setTime', '@PollTime4');
        }
        var picker5 = $('.ScheduleTime5').timepicker({ timeFormat: 'HH:mm' });
        if ($("input#PollTime5").val() != '') {
            picker5.timepicker('setTime', '@PollTime5');
        }
        var picker6 = $('.ScheduleTime6').timepicker({ timeFormat: 'HH:mm' });
        if ($("input#PollTime6").val() != '') {
            picker6.timepicker('setTime', '@PollTime6');
        }




        $('form').areYouSure({ 'message': MsgLostChangesConfirmation });
    });
</script>
