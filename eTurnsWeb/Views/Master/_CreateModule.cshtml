@model eTurns.DTO.ModuleMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}

    @using (Ajax.BeginForm("ModuleSave", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmModule" }))
    {
        @Html.AntiForgeryToken()
        <div class="userHead">
        @Html.ValidationSummary(true)

        @if (Model.ID != 0)
        {        
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.CreatedDate)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    : <span>@(Model.UpdatedDate)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        } 
                     
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.ModuleName)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.ModuleName, new { id = "ModuleName", @class = "text-box", maxlength = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ModuleName)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.Created)
                        @Html.HiddenFor(model => model.Updated)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.LastUpdatedBy)
                        @Html.HiddenFor(model => model.Room)
                        @Html.HiddenFor(model => model.RoomName)
                         @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Value)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Value, new { id = "txtValue", @class = "text-box", maxlength = 128 })
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.DisplayName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.DisplayName, new { id = "DisplayName", @class = "text-box", maxlength = 1024 })
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsModule)
                    </div>
                    <div class="editor-field" style="padding: 5px">
                        @Html.CheckBox("IsModule", Model.IsModule)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.ParentID)
                    </div>
                    <div class="editor-field" style="padding: 5px">
                        @Html.DropDownListFor(model => model.ParentID, new SelectList(ViewBag.ParentModuleList, "ID", "ModuleName", Model.ParentID), new { id = "ddlParentModuleList", @class = "selectBox" })
                    </div>
                </li>
                  <li>
                    <div class="editor-label">
                        @Html.Label("Group Type")
                    </div>
                    <div class="editor-field" style="padding: 5px">
                        @Html.DropDownListFor(model => model.GroupId, new SelectList(ViewBag.GroupList, "Value", "Text", Model.GroupId), new { id = "ddlGroupList", @class = "selectBox" })
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                    </div>
                </li>
            </ul>
        </div>  
        </div>     
    }


@Html.Partial("_RequiredMessages")

<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmModule");
        if ($(this).valid()) {
        }
        e.preventDefault();
    });    
</script>
<script language="javascript" type="text/javascript">

    function onSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#ModuleName").val("");
            $("#ModuleName").focus();
        }
        else if (idValue == 0) {
            $("#ModuleName").val("");
            $("#ModuleName").focus();
            
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else
                clearControls('frmModule');
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#ModuleName").val("");
                $("#ModuleName").focus();
            }
            else {
                SwitchTab(0, 'ModuleCreate', 'frmModule');
            }
        }
    }

    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#ModuleName").focus();
    }

    $(document).ready(function () {
        $('form').areYouSure();
        //$.ajaxSetup({
        //    beforeSend: function (req) {
        //        $('#DivLoading').show();
        //    },
        //    complete: function (req) {
        //        $('#DivLoading').hide();
        //    }
        //});
        $('#btnCancel').click(function (e) {
            if (IsRefreshGrid)
                $('#NarroSearchClear').click();
            SwitchTab(0, 'ModuleCreate', 'frmModule');
        });

    });

</script>
