@model eTurns.DTO.EmailUserConfigurationDTO
@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    ViewBag.Title = ResEmailUserConfiguration.PageTitle;
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "EmailUserConfiguration" };
    string EmailconfigPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Emailconfig.pdf", DateTime.Now.Ticks);
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Emailconfig", (int)HelpDocType.Module);
}
<style>
    .editorForm li .text-box
    {
        width: 90% !important;
    }
    
    .validationerror
    {
        border: 1px solid red;
        background-color: #FFEAEA;
    }
    
    label.error
    {
        /*background: url("../images/unchecked.gif") no-repeat scroll 0 0 transparent;*/
        color: #EA5200;
        font-weight: bold;
        padding-bottom: 2px;
        padding-left: 16px;
    }
</style>
<script language="javascript" type="text/javascript">
    var AllowDeletePopup = false;
    var oTableEmailUser;
    $(document).ready(function () {

        $("#chkselectall").click(function () {
            var isChecked = $(this).is(':checked');
            if (isChecked) {
                $('#UserList tbody tr').each(function () {
                    var temphdnID = $(this).find('#hdnID').val();
                    // alert(temphdnID);
                    $(this).find('#aEmailUser_' + temphdnID).attr("checked", true);
                });
            }
            else {
                $('#UserList tbody tr').each(function () {
                    var temphdnID = $(this).find('#hdnID').val();
                    $(this).find('#aEmailUser_' + temphdnID).attr("checked", false);
                });
            }
        });

        $("#btnSave").click(function () {
            var selectedVal = $('#ddlEmailTemplate option:selected').attr('value');
            var arrItems = new Array();
            if (selectedVal != "") {
                $('#UserList tbody tr').each(function () {
                    var temphdnID = $(this).find('#hdnID').val();
                    var chkID = $(this).find('#aEmailUser_' + temphdnID).is(':checked');

                    if (chkID == true) {
                        arrItems.push(temphdnID);
                    }
                });
                if (arrItems.length == 0) {
                    //$('div#target').fadeToggle();
                    //$("div#target").delay(2000).fadeOut(200);
                    showNotificationDialog();
                    $("#spanGlobalMessage").html('@ResEmailUserConfiguration.ReqUser');
                    $("#spanGlobalMessage").removeClass('WarningIcon succesIcon').addClass('errorIcon');
                }
                else {
                    $.ajax({
                        url: '@Url.Content("~/Master/SaveUserInTemplate")',
                        type: 'POST',
                        cache: false,
                        data: { 'EmailTemplateName': selectedVal, 'para': JSON.stringify(arrItems) },
                        success: function (response) {
                            //$('div#target').fadeToggle();
                            //$("div#target").delay(2000).fadeOut(200);
                            showNotificationDialog();
                            $("#spanGlobalMessage").html(response.Message);
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                            //CKEDITOR.instances.txtTemplate.setData(result.MessageBody);
                        },
                        error: function (msg) {
                        }
                    });
                }

            }
        });

        $('#ddlEmailTemplate').change(function () {
            oTableEmailUser.fnDraw();
        });


        $('#chkselectedonly').click(function () {
            oTableEmailUser.fnDraw();
        });

        var AllowDeletePopup = true;

        oTableEmailUser = $('#UserList').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "sScrollX": "99%",
            "sDom": 'rti<"clear">>T',
            "oColVis": {},
            "bSort": false,
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": false,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";
                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'EmailUserList' },
                    "async": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'ImportList' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });

                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Content("~/Master/GetEmailUserDetail")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                if (oSettings.aaSorting.length != 0)
                    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                aoData.push({ "name": "EmailTemplateName", "value": $('#ddlEmailTemplate option:selected').attr('value') });
                aoData.push({ "name": "chkselectedonly", "value": $('#chkselectedonly').is(':checked') });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    cache: false,
                    "url": sSource,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                    },
                    complete: function () {
                    }
                })
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
            },
            "aoColumns":
            [
           {
               "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
               "fnRender": function (obj, val) {
                   var tempIsEmailPOInBody = "";
                   if (obj.aData.IsChecked == true) {
                       tempIsEmailPOInBody = "checked=\"checked\""
                   }
                   else { tempIsEmailPOInBody = ""; }
                   return "<input type='checkbox' " + tempIsEmailPOInBody + " id='aEmailUser_" + obj.aData.ID + "'  /><input type='hidden' value='" + obj.aData.ID + "' id='ahdn_" + obj.aData.ID + "' ><input type='hidden' id='hdnEmail' value='" + obj.aData.Email + "' /><input type='hidden' id='hdnID' value='" + obj.aData.ID + "' />"
               }
           },
           { mDataProp: "Name", sClass: "" },
           { mDataProp: "Email", sClass: "" },
           {

               "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
               "fnRender": function (obj, val) {
                   return "<a id='del_" + obj.aData.ID + "' href= 'javascript:DeleteEmailUserConfig(" + obj.aData.ID + ");'>Delete</a>"
               }
           }
            ]
        }).makeEditable({
            sUpdateURL: '@Url.Content("~/Master/UpdateUserTemplate")',
            "aoColumns": [
            null,
            {
                oValidationOptions:
                                     {
                                         rules: {
                                             value: {
                                                 minlength: 5
                                             }
                                         },
                                         messages: {
                                             value: {
                                                 minlength: "Enter at least 5 characters"
                                             }
                                         }
                                     }
            },
            { cssclass: "required email" }, null]

        });

        $('#btnRemove').click(function () {
            var anSelectedMan = fnGetSelected(oTableEmailUser);
            if (anSelectedMan.length > 0) {
                //alert(anSelectedMan[0]);
                var IDAndEmail = anSelectedMan[0].split('__');
                $.ajax({
                    url: '@Url.Content("~/Master/DeleteUserFromTemplate")',
                    type: 'POST',
                    cache: false,
                    data: { 'UserID': IDAndEmail[0] },
                    success: function (response) {
                        //$('div#target').fadeToggle();
                        //$("div#target").delay(2000).fadeOut(200);
                        showNotificationDialog();
                        var message = '';
                        if (response.Message == 'ok') {
                            message = 'Delete recoded successfully';
                        }
                        else {
                            message = "You can not delete '" + IDAndEmail[1] + "' field as it is being used by other module."
                        }
                        $("#spanGlobalMessage").html(message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        oTableEmailUser.fnDraw();
                    },
                    error: function (msg) {
                    }
                });
            }
            else
                alert('@ResMessage.msgSelectRecordForDelete');
        });

        $("#UserList tbody").click(function (event) {
            $(oTableEmailUser.fnSettings().aoData).each(function () {
                $(this.nTr).removeClass('row_selected');
            });
            $(event.target.parentNode).addClass('row_selected');
        });

        function fnGetSelected(oTableLocal) {
            var aReturn = new Array();
            var aTrs = oTableLocal.fnGetNodes();

            for (var i = 0; i < aTrs.length; i++) {
                if ($(aTrs[i]).hasClass('row_selected')) {
                    //aReturn.push(aTrs[i]);
                    aReturn.push($(aTrs[i]).find('#hdnID').val() + "__" + $(aTrs[i]).find('#hdnEmail').val());
                }
            }
            return aReturn;
        }
        $('#btndownload').click(function () {

            $.ajax({
                "url": '/Export/ExportEnterpriseUserList',
                "data": { EntId: '1' },
                "dataType": "json",
                "type": "POST",
                "success": function (response) {

                    window.open("../../Downloads/" + response, "_self");

                },
                "error": function (response) {

                    window.open("../../Downloads/" + response, "_self");

                }
            });

        });
    });


</script>
@using (Ajax.BeginForm("SaveEmailTemplateUser", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmEmailUser" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <div class="dashboardWrapper">
        <h2>
            @ResEmailUserConfiguration.PageTitle
        </h2>
        <div class="Infoclass" style="width:70px !important">
            @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
            {
                var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
                if (VideoCount > 1)
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <a href="#" style="z-index:205 !important">
                            <img src="~/Content/images/InfoVideo.png" alt="Help" />
                        </a>
                        <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                            <ul class="sub_subMenu">
                                @foreach (var item in objHelpDocDtlDTO)
                                {
                                    if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                    {
                                        <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                }
                else
                {
                    HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                    helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                    if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                    {
                        <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                            <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                        </div>
                    }
                }
            }
            @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
            {
                var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
                if (DocCount > 1)
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <a href="#" style="z-index:205 !important">
                            <img src="~/Content/images/Info.png" alt="Help" />
                        </a>
                        <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                            <ul class="sub_subMenu">
                                @foreach (var item in objHelpDocDtlDTO)
                                {
                                    if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                    {
                                        <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                }
                else
                {
                    HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                    helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                    if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                    {
                        <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                            <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                        </div>
                    }
                }
            }
        </div>
        <div class="userListBlock">
            <div id="tab7" class="tabContener" style="width: 99%">
                <div class="userContent" style="padding-left: 5px; width: 99%;">
                    <div class="userHead" style="margin: 0.5% 0.1% 0;">
                        <div class="editorForm" style="width: 98%">
                            <ul>
                                <li style="float: left;">
                                    <div class="editor-label" style="width: 9%; float: left; padding: 0px 0px 5px 0px;">
                                        @Html.Label(ResEmailConfiguration.lbltemplate)
                                    </div>
                                    <div class="editor-field" style="width: 18%; float: left; padding: 0px 0px 5px 0px;">
                                        @*@Html.DropDownList("TemplateName", (List<SelectListItem>)ViewBag.DDLEmailTemplate, new { @style = "width:85%", @class = "selectBox", @id = "ddlEmailTemplate" })*@
                                        @Html.DropDownList("TemplateName", new SelectList(ViewBag.DDLEmailTemplate, "TemplateName", "TemplateName"), new { @id = "ddlEmailTemplate", @class = "selectBox", @style = "width:85%" })
                                    </div>
                                    <div>
                                        @if (eTurnsWeb.Helper.SessionHelper.UserType <= 2)
                                        {

                                            <input type="button" id="btndownload" style="margin: 0px;" class="CreateBtn" value="Enterprise user email list"
                                                name="btndownload" />
                                        }
                                    </div>
                                </li>
                                <li>
                                    <div style="width: 20%; float: left; padding: 0px 0px 5px 0px;">
                                        @Html.LabelFor(model => model.Name)
                                    </div>
                                    <div style="width: 20%; float: left; padding: 0px 0px 5px 0px;">
                                        @Html.LabelFor(model => model.Email)
                                    </div>
                                </li>
                                <li>
                                    <div style="width: 20%; float: left; padding: 0px 0px 5px 0px;">
                                        @Html.TextBoxFor(model => model.Name, new { id = "Name", @class = "text-box", maxlength = 64 })
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Name)</span>
                                    </div>
                                    <div style="width: 20%; float: left; padding: 0px 0px 5px 0px;">
                                        @Html.TextBoxFor(model => model.Email, new { id = "Email", @class = "text-box", maxlength = 255 })
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Email)</span>
                                    </div>
                                    <div style="width: 5%; float: left; padding: 0px 0px 5px 0px;">
                                        @*<input type="button" value="Remove" id="btnRemoveuser" class="CreateBtn" />*@
                                        <input type="submit" value="Add" id="btnAdduser" class="CreateBtn" />
                                    </div>
                                    <div style="width: 6%; float: left; padding: 0px 0px 5px 0px;">
                                        <input type="button" value="Remove" id="btnRemove" class="CreateBtn" />
                                    </div>
                                    <div class="editor-label" style="width: 13%; float: right; padding: 0px 0px 5px 0px;">
                                        Is Selected user only?
                                        <input type="checkbox" id="chkselectedonly" name="chkselectedonly" />
                                    </div>
                                </li>
                                <li>
                                    <div class="userContent" style="width: 100% !important;">
                                        <table cellpadding="0" cellspacing="0" border="0" class="display" id="UserList">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        <input type="checkbox" id="chkselectall" />
                                                    </th>
                                                    <th>
                                                        @ResEmailUserConfiguration.Name
                                                    </th>
                                                    <th>
                                                        @ResEmailUserConfiguration.Email
                                                    </th>
                                                    <th>
                                                        Delete
                                                    </th>
                                                    @*<th>
                                                     @Html.ActionLink("Delete", "DeleteEmailUserConfig", new { id = @ResEmailUserConfiguration.ID }, new { @onclick = "return DeleteEmailUserConfig('" + @ResEmailUserConfiguration.ID + "');" })
                                                    </th>*@
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </li>
                                <li>
                                    <div style="float: left; padding: 0px 0px 0px 0px;">
                                        <input type="button" value="@ResEmailConfiguration.btnSave" id="btnSave" class="CreateBtn" name="btnSave" />
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div style="width: 100%; float: left;">
                </div>
            </div>
        </div>
    </div>
}
<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmEmailUser");
        if ($(this).valid()) {
        }
        e.preventDefault();
    });

    function onSuccess(response) {
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        //LoadUserData();
        //$('#UserList').dataTable().fnDraw();
        oTableEmailUser.fnDraw();
        $('#Name').val('');
        $('#Email').val('');
    }
    function onFailure(message) {
    }

    function DeleteEmailUserConfig(id) {
        if (confirm('Are You Sure, You Want to delete ?')) {

            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Master/DeleteEmailUserConfig")',
                data: "{ 'id':  " + id + " }",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data == "Success") {
                        oTableEmailUser.fnDraw();
                    }
                },
                error: function (msg) { 
                
                }
            });
        }

    }
</script>
