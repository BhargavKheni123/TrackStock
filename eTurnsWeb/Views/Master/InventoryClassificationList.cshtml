@model IEnumerable<eTurns.DTO.InventoryClassificationMasterDTO>
@{
    ViewBag.Title = eTurns.DTO.ResInventoryClassificationMaster.InventoryClassificationMasterHeader;
    bool IsForBOM = false;
    string ColumnSetupFor = string.Empty;
    string PageName = string.Empty;
    RouteValueDictionary obj = ViewContext.Controller.ControllerContext.RouteData.Values;
    string ControllerName = Convert.ToString(obj["controller"]);
    string ActionName = Convert.ToString(obj["action"]);
    if (ControllerName.ToLower() == "master")
    {
        ColumnSetupFor = "InventoryClassificationMasterList";
        PageName = "InventoryClassificationMaster";
    }
    if (ControllerName.ToLower() == "bom")
    {
        ColumnSetupFor = "BomInventoryClassificationMasterList";
        PageName = "BomInventoryClassificationMaster";
        IsForBOM = true;
    }
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DisplayUDFButton = false, UDFSetupFor = "InventoryClassification&UDFHeader=" + @eTurns.DTO.ResInventoryClassificationMaster.InventoryClassificationMasterHeader, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = ColumnSetupFor };
    if (IsForBOM)
    {
        settings.DisplayUDFButton = false;
    }
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = PageName };
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    string InventoryClassificationPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/InventoryClassification.pdf", DateTime.Now.Ticks);
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("InventoryClassification", (int)HelpDocType.Module);
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script language="javascript" type="text/javascript">
        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Master/DeleteInventoryClassificationRecords";
        var PostCount = 0;
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var SelectedHistoryRecordID = 0;
        var SelectedViewRecordID = 0;
        var objColumns = {}
        $(document).ready(function () {
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            var gaiSelected = [];
            LoadTabs();
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "150%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries',
                    "sLoadingRecords": '@eTurns.DTO.Resources.ResMessage.MsgLoading'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (aData.IsDeleted == true && aData.IsArchived == true)
                        //nRow.className = "GridDeleatedArchivedRow";
                        $(nRow).css('background-color', '#B9BCBF');
                    else if (aData.IsDeleted == true)
                        // nRow.className = "GridDeletedRow";
                        $(nRow).css('background-color', '#FFCCCC');
                    else if (aData.IsArchived == true)
                        //nRow.className = "GridArchivedRow";
                        $(nRow).css('background-color', '#CCFFCC');
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: '@ColumnSetupFor' },
                        "async": false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: '@ColumnSetupFor' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Master/InventoryClassificationListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }

                    if (oSettings.aaSorting.length != 0) {
                        var sortValue = "";
                        for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];
                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });


                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                    aoData.push({ "name": "IsForBom", "value": "@IsForBOM" });
                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                },
                "aoColumns": [
                    { mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' },
			                { "mDataProp": "ID", "sClass": "read_only" },
			                {
			                    "mDataProp": "InventoryClassification",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false,
			                    "fnRender": function (obj, val) {
			                        return "<a id='aInvClass' onclick='return ShowEditTab(&quot;/Master/InventoryClassificationEdit/" + obj.aData.ID + "&quot;,&quot;frmInventoryClassification&quot;)' href='JavaScript:void(0);'>" + obj.aData.InventoryClassification + "</a>";
			                    }
			                },
                            {
                                "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                                "fnRender": function (obj, val) {
                                    var tempDataRangeStart = obj.aData.RangeStart == null ? "" : obj.aData.RangeStart;
                                    return "<input type='text' value='" + tempDataRangeStart + "' maxLength='50' onkeypress='return isNumberKey(event);' class='importtext-box' id='atempDataRangeStart_" + obj.aData.ID + "' style='width:90px;' />" +
                                      "<span id='RangeStartvalue' style='display:none'>" + obj.aData.ID + "</span>"
                                }
                            },
                            {
                                "mDataProp": null, "sClass": "read_only", "sDefaultContent": '',
                                "fnRender": function (obj, val) {
                                    var tempDataRangeEnd = obj.aData.RangeEnd == null ? "" : obj.aData.RangeEnd;
                                    return "<input type='text' value='" + tempDataRangeEnd + "'  maxLength='50' onkeypress='return isNumberKey(event);'  class='importtext-box' id='atempDataRangeEnd_" + obj.aData.ID + "' style='width:90px;' />" +
                                                        "<span id='RangeEndvalue' style='display:none'>" + obj.aData.ID + "</span>"
                                }
                            },
                            //{
                            //    "mDataProp": "CycleCountFrequency", "sClass": "read_only", "sDefaultContent": '',
                            //    "fnRender": function (obj, val) {
                            //        var tempCycleCountFrequency = obj.aData.CycleCountFrequency == null ? "" : obj.aData.CycleCountFrequency;
                            //        return tempCycleCountFrequency;//"<input type='text' value='" + tempCycleCountFrequency + "' readonly='readonly'  maxLength='50' onkeypress='return isNumberKey(event);'    class='importtext-box disableBack' id='atempDataCycleCountFrequency_" + obj.aData.ID + "' style='width:90px;' />";
                            //    }
                            //},

                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "EditedFrom", "sClass": "read_only" },
			                {
			                    "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        //return GetDateInFullFormat(val);
			                        return obj.aData.ReceivedOnWebDate;
			                    }
			                },
			                {
			                    "mDataProp": "ReceivedOn", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        //return GetDateInFullFormat(val);
			                        return obj.aData.ReceivedOnDate;
			                    }
			                },

                            {
                                "mDataProp": "Created", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    //return GetDateInFullFormat(val);
                                    return obj.aData.CreatedDate;
                                }
                            },
			                {
			                    "mDataProp": "Updated", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        //return GetDateInFullFormat(val);
			                        return obj.aData.UpdatedDate;
			                    }
			                },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" }
                //@Html.RenderColumnsArray("InventoryClassificationMaster")
                ]
            });
            $('.DTTT_container').css('z-index', '-1');

            $('#myDataTable').on('tap click', 'a[id^="aInvClass"]', function () {
                var tr = $(this).parent().parent();
                $("#myDataTable").find("tbody tr").removeClass("row_selected");
                $(tr).addClass('row_selected');

            });


        });

        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }
        function HistoryTabClick() {
            GetHistoryData();
        }

        function GetHistoryData() {
            HistorySelected = fnGetSelected(oTable);
            if (HistorySelected != undefined && HistorySelected.length == 1) {
                var aData = oTable.fnGetData($(HistorySelected)[0])
                SelectedHistoryRecordID = aData.ID;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabCL").show();
                $('#CtabCL').load('/master/InventoryClassificationHistory', function () { $('#DivLoading').hide(); });
            }
            else {
                $('#CtabCL').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                showNotificationDialog();
                return false;
            }
        }

        function isNumberKey(evt) {
            var keyCode = [evt.keyCode || evt.which];
            if (keyCode == 8 || keyCode == 13 || keyCode == 9 || keyCode == 46)
                return true;
            if (keyCode > 57 || keyCode < 48)
                return false;
            else
                return true;
        }

    </script>
}
<script type="text/javascript">
    var isTabClick = false;
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true),
        
    ];
    if ('@IsShowChangeLog.ToString().ToUpper()' == 'TRUE')
    {
        TabsArry.push(new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true));
    }
    function callbacknew() { window.location.hash = '#new'; ShowNewTab('/Master/InventoryClassificationCreate?isforbom=' + '@IsForBOM', 'frmInventoryClassification'); }
    function callbackhistory() { window.location.hash = '#list'; } //HistoryTabClick(); }
    function callbackCL() { window.location.hash = ''; HistoryTabClick(); }
    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
        }
    }

    $(document).ready(function () {
        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
        //SetTabView();
    });
</script>
<div class="userListingWrapper">
    <h2>
        @eTurns.DTO.ResInventoryClassificationMaster.InventoryClassificationMasterHeader
    </h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'></ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster)
            @Html.Partial("NarrowSearchLayout", modelCommon)
            <div class="userContent">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryClassificationMaster.InventoryClassification
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryClassificationMaster.RangeStart
                            </th>
                            <th>
                                @eTurns.DTO.ResInventoryClassificationMaster.RangeEnd
                            </th>
                            @*<th>
                                @eTurns.DTO.ResInventoryClassificationMaster.CycleCountFrequency
                            </th>*@

                            <th>
                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            @*@Html.RenderColumnsHeader("InventoryClassificationMaster", typeof(eTurns.DTO.ResInventoryClassificationMaster))*@
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <button id="btnDeleteCompany" value="cancel" style="display: none">
                    Delete Selected
                </button>
                <div class="clear">
                </div>
                <button id="btnCancel" value="Cancel" class="CreateBtn">
                    @ResCommon.Cancel
                </button>
                <button id="btnSave" value="Ok" class="CreateBtn">
                    @ResCommon.Save
                </button>
                <div id="processing_message" style="display: none" title="Processing">
                    @eTurns.DTO.Resources.ResMessage.RequestProcessMessage
                </div>
            </div>
        </div>
        <div id="CtabCL" class="tabContener">
        </div>
    </div>
</div>
<script type="text/javascript">

    $('#btnSave').click(function () {
        $('#DivLoading').show();

        var arrList = new Array();
        $('#myDataTable tbody tr').each(function () {
            var ID = $(this).find('#RangeStartvalue').text();
            var RangeStart = $(this).find('#atempDataRangeStart_' + ID).val();
            var RangeEnd = $(this).find('#atempDataRangeEnd_' + ID).val();
           // var CycleCountFrequency = $(this).find('#atempDataCycleCountFrequency_' + ID).val();

            var InvClassName = $(this).find('#aInvClass').text();

            var obj = {};
            obj.ID = ID;
            obj.RangeStart = RangeStart;
            obj.RangeEnd = RangeEnd;
            obj.InventoryClassification = InvClassName;
          //  obj.CycleCountFrequency = CycleCountFrequency;
            obj.IsForBOM = '@IsForBOM';
            arrList.push(obj);
        });

        if (arrList.length > 0) {
            $.ajax({
                "url": '@Url.Content("~/Master/SaveInventoryClassificationRangeData")',
                "type": "POST",
                "dataType": "json",
                "contentType": "application/json",
                "async": false,
                "cache": false,
                "data": JSON.stringify(arrList),
                "success": function (response) {
                    if (response.Success) {
                        oTable.fnDraw();
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").html("@ResMessage.SaveMessage");
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    }
                    else {
                        var msg = "<b>" + '@ResInventoryAnalysis.RangeNotSaved' + "<br/><br/>";

                        for (var i = 0; i < response.ErrorList.length; i++) {
                            msg += response.ErrorList[i] + "<br/>"
                        }
                        msg += "</b>"
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").html(msg);
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    }
                    $('#DivLoading').hide();
                },
                "error": function (message) {
                    $('#DivLoading').hide();
                    $("#spanGlobalMessage").html(message.statusText);
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
            });
        }
        else {
            $('#DivLoading').hide();
        }
    });

    $('#btnSave1111').click(function () {
        var tempCount = 0;
        var tempError = 0;
        var tempStart = 0;
        var tempEnd = 0;
        var temploopcount = 0;
        var temploopcount1 = 0;
        var tempstartrange = 0;
        $('#myDataTable tbody tr').each(function () {
            temploopcount = temploopcount + 1;
            var tempID = $(this).find('#RangeStartvalue').text();
            var tempRangeStart = $(this).find('#atempDataRangeStart_' + tempID).val();
            var tempRangeEnd = $(this).find('#atempDataRangeEnd_' + tempID).val();
            if (tempRangeStart == '') {
                tempstartrange = tempstartrange + 1;
                $(this).find('#atempDataRangeStart_' + tempID).focus();
                return;
            }

            if (tempRangeStart == '' || tempRangeEnd == '') {
                tempCount = tempCount + 1;
                $(this).find('#atempDataRangeEnd_' + tempID).focus();
                $(this).find('#atempDataRangeStart_' + tempID).focus();
            }

            if (tempRangeStart != '' && tempRangeEnd != '') {
                if (parseFloat(tempRangeEnd) <= parseFloat(tempRangeStart)) {
                    $(this).find('#atempDataRangeEnd_' + tempID).focus();
                    tempError = tempError + 1;
                }
            }

            if (tempError == 0 && tempCount <= 1 && tempStart == 0 && tempEnd == 0) {
                $('#myDataTable tbody tr').each(function () {
                    temploopcount1 = temploopcount1 + 1;
                    var tempID1 = $(this).find('#RangeStartvalue').text();
                    var tempRangeStart1 = $(this).find('#atempDataRangeStart_' + tempID1).val();
                    var tempRangeEnd1 = $(this).find('#atempDataRangeEnd_' + tempID1).val();
                    if (temploopcount != temploopcount1) {
                        if (tempRangeStart1 != '' && tempRangeEnd1 != '') {
                            if (parseFloat(tempRangeStart) >= parseFloat(tempRangeStart1) && parseFloat(tempRangeStart) <= parseFloat(tempRangeEnd1)) {
                                tempStart = tempStart + 1;
                                $(this).find('#atempDataRangeStart_' + tempID1).focus();
                                return;
                            }
                            if (tempRangeEnd != '') {
                                if (parseFloat(tempRangeEnd) >= parseFloat(tempRangeStart1) && parseFloat(tempRangeEnd) <= parseFloat(tempRangeEnd1)) {
                                    tempEnd = tempEnd + 1;
                                    $(this).find('#atempDataRangeEnd_' + tempID1).focus();
                                    return;
                                }
                            }
                        }
                    }
                });
                temploopcount1 = 0;
            }
        });

        if (tempstartrange > 0) {
            $("#spanGlobalMessage").html("@ResInventoryClassificationMaster.ReqStartRange");
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        }
        else if (tempCount > 1) {
            $("#spanGlobalMessage").html("@ResInventoryClassificationMaster.EnterProperRange");
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            tempError = tempError + 1;
        }

        else if (tempError > 0) {
            $("#spanGlobalMessage").html("@ResInventoryClassificationMaster.ValidateEndRange");
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        }

        else if (tempStart > 0) {
            $("#spanGlobalMessage").html("@ResInventoryClassificationMaster.DefinedStartRange");
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        }

        else if (tempEnd > 0) {
            $("#spanGlobalMessage").html("@ResInventoryClassificationMaster.DefinedEndRange");
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        }

        if (tempError == 0 && tempCount <= 1 && tempEnd == 0 && tempStart == 0 && tempstartrange == 0) {
            var arrItems = new Array();
            $('#myDataTable tbody tr').each(function () {
                var tempID = $(this).find('#RangeStartvalue').text();
                var tempRangeStart = $(this).find('#atempDataRangeStart_' + tempID).val();
                var tempRangeEnd = $(this).find('#atempDataRangeEnd_' + tempID).val();
                var data = {
                    "ID": tempID, "RangeStart": tempRangeStart, "RangeEnd": tempRangeEnd
                };
                arrItems.push(data);
            });

            $.ajax({
                url: '@Url.Content("~/Master/SaveInventoryClassificationRange")'
                        , type: 'POST'
                        , data: { 'para': JSON.stringify(arrItems) }
                        , cache: false
                        , success: function (response) {
                            oTable.fnDraw();
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                            $("#spanGlobalMessage").html(response.Message);
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        }
                        , error: function (message) {
                            $("#spanGlobalMessage").html(message.statusText);
                            $('div#target').fadeToggle();
                            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        }
            });
        }
    });

</script>
<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
