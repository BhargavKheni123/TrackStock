@{
    var Asset_settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DataTableName = "myAssetsMaintenanceDataTable", ListViewhref = "", PictureViewhref = "", DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "DashboardAssetsMaintenanceDataTable", DisplayDeleteButton = false, DisplayGoToPage = false, ShowReorder = true, ReorderByDataTableName = true, ExportModuleName = "AssetMasterList", ExportDashboardFromReportFile = false };
    var Tools_settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DataTableName = "myToolsMaintenanceDataTable", ListViewhref = "", PictureViewhref = "", DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "DashboardToolsMaintenanceDataTable", DisplayDeleteButton = false, DisplayGoToPage = false, ShowReorder = true, ReorderByDataTableName = true, ExportModuleName = "Tools", ExportDashboardFromReportFile = true };
    eTurns.DAL.ToolMasterDAL objToolMasterDAL = new eTurns.DAL.ToolMasterDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    eTurns.DAL.AssetMasterDAL objAssetMasterDAL = new eTurns.DAL.AssetMasterDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    bool IsToolView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.View);
    bool IsAssetsView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Assets, eTurnsWeb.Helper.SessionHelper.PermissionType.View);
    int intToolCount = objToolMasterDAL.GetToolMaintainanceDueCountForDashboard(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID);
    int intAssetCount = objAssetMasterDAL.GetAssetMaintenceCountForDashboard(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID);

    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));
    string UNCPathRoot = eTurns.DTO.SiteSettingHelper.AssetPhoto; // Settinfile.Element("AssetPhoto").Value;
    UNCPathRoot = UNCPathRoot.Replace("~", string.Empty);
    Int64 EnterpriseId = eTurnsWeb.Helper.SessionHelper.EnterPriceID;
    Int64 CompanyID = eTurnsWeb.Helper.SessionHelper.CompanyID;
    Int64 RoomID = eTurnsWeb.Helper.SessionHelper.RoomID;
    string LogoPath = (UNCPathRoot + EnterpriseId + "/" + CompanyID + "/" + RoomID);
}
<style>
    .dataTables_scrollBody {
        overflow-y: scroll;
        overflow-x: scroll;
        max-height: 3000px !important;
        overflow: scroll !important;
    }

    .Lnavd {
        float: left;
        padding-left: 1px;
    }

        .Lnavd li {
            float: left;
            padding: 2px 4px 1px 0;
            position: relative;
            list-style: none;
        }

            .Lnavd li.clear {
                width: 100%;
                height: 1px;
                float: left;
                margin: 0;
                padding: 0;
            }

    .lia {
        background: none repeat scroll 0 0 #F3F9FF;
        border: 1px solid #C7E3FF;
        border-radius: 5px 5px 5px 5px;
        color: #1971BD;
        float: left;
        font-size: 12px;
        padding: 1px 5px;
        cursor: pointer;
        text-align: center;
        text-decoration: none; /* width: 50px;*/
    }

    .liahover {
        background: no-repeat scroll 90px center #1971BD;
        border: 1px solid #1971BD;
        border-radius: 5px 5px 5px 5px;
        color: #FFFFFF !important;
        cursor: auto;
        text-decoration: none;
    }
    /*  .Lnavd li a
    {
        background: none repeat scroll 0 0 #F3F9FF;
        border: 1px solid #C7E3FF;
        border-radius: 5px 5px 5px 5px;
        color: #1971BD;
        float: left;
        font-size: 12px;
        padding: 1px 5px;
        text-align: center;
        text-decoration: none;
    }*/
    .Lnavd li a:hover {
        text-decoration: none;
    }

    .imgclassd span {
        background: url("../../content/images/num-selected.png") no-repeat scroll 0 0 transparent;
        color: #FFFFFF;
        float: right;
        font-size: 12px;
        font-weight: bold;
        height: 18px;
        margin: -12px 0 0 -6px;
        padding: 6px 0;
        text-align: center;
        width: 29px;
    }

    .gridchartclass {
        float: right;
        margin-right: 0;
        margin-top: -25px;
        padding-bottom: 0;
        padding-left: 0;
        padding-top: 0;
        width: auto;
    }
</style>
<div style="float: left; width: 100%;">
    <div id="dvToolsAssetsmain" class="Lnavd">
        <ul>
            @if (IsAssetsView)
            {
                <li class="imgclassd">
                    <a id="lnkAssets" title="Assets" onclick="BindGrid('lnkAssets','Assets')"
                       class="lia">@eTurns.DTO.ResDashboard.TabAsset</a>
                    @if (intAssetCount != 0)
                {<span>@intAssetCount</span>}
                </li>
            }
            @if (IsToolView)
            {
                <li class="imgclassd">
                    <a id="lnkTools" title="Tools" onclick="BindGrid('lnkTools','Tools')"
                       class="lia">@eTurns.DTO.ResDashboard.TabTool</a>
                    @if (intToolCount != 0)
                    {<span>@intToolCount</span>}
                </li>
            }
        </ul>
    </div>
    <div id="divMainToolsTab" style="float: left; width: 100%;">
        <div class="viewBlock gridchartclass">
            <span class="label">View:</span>
            <a class="view" href="javascript:void(0);" onclick="ShowHideDiv('Tools','Chart');">
                <img alt="" id="imgTOChart" src="/content/images/thumb-view.png">
            </a>
            <a class="view clsLoadTGraph" href="javascript:void(0);" onclick="ShowHideDiv('Tools','Grid');">
                <img alt="" id="imgTOGrid" src="/content/images/list-view.png">
            </a>
        </div>
        <div style="float: left; padding-top: 4px; display: none;">
            <ul>
                <li style="border-right: none; float: left; padding-right: 5px;">
                    <label style="float: left; padding: 1.3% 2px;">
                        @Html.Label("Days")
                    </label>
                    @Html.TextBox("txtToolsDays", "", new { @class = "importtext-box", id = "txtToolsDays", @style = "width:30px;background:white", maxlength = 3 })
                </li>
                <li style="border-right: none; float: left; padding-right: 5px;">
                    <div class="BtnBlockform" style="margin: 0 0 0 5px;">
                        <input type="button" value="GO" id="btnToolsgo" name="btnToolsgo" class="CreateBtn"
                               style="float: left;" />
                    </div>
                </li>
            </ul>
        </div>
        <div id="dvTooltab" class="tabContener">
            <div id="divToolsReorder" class="Lnavd" style="float: left; width: 98%; padding-top: 10px;">
                @Html.GridTopHeader(Tools_settings, eTurnsWeb.Helper.SessionHelper.ModuleList.DashboardToolsMaintenanceDataTable)
            </div>
            <div class="searchWrapper">
                <div class="searchBlockNew">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filterDashTools" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filterDashTools" />
                        </a>
                    </div>
                </div>
            </div>
            <div class="userHead" style="height: 30px;">
            </div>
            <div id="Toolstab" class="tabContener">
                <div id="dvToolsGrid" class="userContent" style="float: left; width: 100%;">
                    <table id="myToolsMaintenanceDataTable" class="display" style="width: 561px; overflow: auto;">
                        <thead>
                            <tr>
                                <th>
                                    @ResToolMaster.ToolName
                                </th>
                                <th>
                                    @ResDashboard.ToolMaintenanceName
                                </th>
                                <th>
                                    @ResDashboard.ToolScheduleDate
                                </th>
                                <th>
                                    @ResDashboard.ToolTrackingMeasurement
                                </th>
                                <th>
                                    @ResCommon.ID
                                </th>
                                <th>
                                    @ResAssetMaster.Description
                                </th>
                                <th>
                                    @ResAssetMaster.Make
                                </th>
                                <th>
                                    @ResAssetMaster.Model
                                </th>
                                <th>
                                    @ResAssetMaster.Serial
                                </th>
                                @*<th>
                                    @ResAssetMaster.AssetCategory
                                </th>*@
                                <th>
                                        @ResToolCategory.ToolCategory
                                </th>
                                <th>
                                    @ResAssetMaster.PurchaseDate
                                </th>
                                <th>
                                    @ResAssetMaster.PurchasePrice
                                </th>
                                <th>
                                    @ResAssetMaster.DepreciatedValue
                                </th>
                                <th>
                                    @ResAssetMaster.SuggestedMaintenanceDate
                                </th>
                                <th>
                                    @ResCommon.RoomName
                                </th>
                                <th>
                                    @ResCommon.CreatedOn
                                </th>
                                <th>
                                    @ResCommon.UpdatedOn
                                </th>
                                <th>
                                    @ResCommon.UpdatedBy
                                </th>
                                <th>
                                    @ResCommon.CreatedBy
                                </th>
                                <th>
                                    @ResCommon.AddedFrom
                                </th>
                                <th>
                                    @ResCommon.EditedFrom
                                </th>
                                <th>
                                    @ResCommon.ReceivedOnDate
                                </th>
                                <th>
                                    @ResCommon.ReceivedOnWebDate
                                </th>
                                <th>
                                    @ResAssetMaster.AssetImage
                                </th>
                                @Html.RenderColumnsHeader("AssetMaster", typeof(eTurns.DTO.ResAssetMaster))
                            </tr>
                        </thead>
                    </table>
                </div>
                <div id="dvToolsChart" style="float: left; width: 100%;">
                </div>
            </div>
        </div>
    </div>
    <div id="divMainAssetsTab" style="float: left; width: 100%;">
        <div class="viewBlock gridchartclass">
            <span class="label">View:</span> <a class="view" href="javascript:void(0);" onclick="ShowHideDiv('Assets','Chart');">
                <img alt="" id="imgAChart" src="/content/images/chart-view-active.png">
            </a>
            <a class="view clsLoadAGraph" href="javascript:void(0);" onclick="ShowHideDiv('Assets','Grid');">
                <img alt="" id="imgAGrid" src="/content/images/list-view-inactive.png">
            </a>
        </div>
        <div style="float: left; padding-top: 4px; display: none;">
            <ul>
                <li style="border-right: none; float: left; padding-right: 5px;">
                    <label style="float: left; padding: 1.3% 2px;">
                        @Html.Label("Days")
                    </label>
                    @Html.TextBox("txtAssetsDays", "", new { @class = "importtext-box", id = "txtAssetsDays", @style = "width:30px;background:white", maxlength = 3 })
                </li>
                <li style="border-right: none; float: left; padding-right: 5px;">
                    <div class="BtnBlockform" style="margin: 0 0 0 5px;">
                        <input type="button" value="GO" id="btnAssetsgo" name="btnAssetsgo" class="CreateBtn"
                               style="float: left;" />
                    </div>
                </li>
            </ul>
        </div>
        <div id="dvAssettab" class="tabContener">
            <div id="divAssetReorder" class="Lnavd" style="float: left; width: 98%; padding-top: 10px; display:none">
                @Html.GridTopHeader(Asset_settings, eTurnsWeb.Helper.SessionHelper.ModuleList.DashboardAssetsMaintenanceDataTable)
            </div>
            <div class="searchWrapper">
                <div class="searchBlockNew">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filterDashAssets" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filterDashAssets" />
                        </a>
                    </div>
                </div>
            </div>
            <div class="userHead" style="height: 30px;">
            </div>
            <div id="Assetstab" class="tabContener">
                <div id="dvAssetsGrid" class="userContent" style="float: left; width: 100%;">
                    <table id="myAssetsMaintenanceDataTable" class="display" style="width: 561px; overflow: auto;">
                        <thead>
                            <tr>
                                <th>
                                    @ResAssetMaster.AssetName
                                </th>
                                <th>
                                    @ResDashboard.AssetMaintenanceName
                                </th>
                                <th>
                                    @ResDashboard.AssetScheduleDate
                                </th>
                                <th>
                                    @ResDashboard.AssetTrackingMeasurement
                                </th>
                                <th>
                                    @ResCommon.ID
                                </th>
                                <th>
                                    @ResAssetMaster.Description
                                </th>
                                <th>
                                    @ResAssetMaster.Make
                                </th>
                                <th>
                                    @ResAssetMaster.Model
                                </th>
                                <th>
                                    @ResAssetMaster.Serial
                                </th>
                                <th>
                                    @ResAssetMaster.AssetCategory
                                </th>
                                @*<th>
                                        @ResToolCategory.ToolCategory
                                    </th>*@
                                <th>
                                    @ResAssetMaster.PurchaseDate
                                </th>
                                <th>
                                    @ResAssetMaster.PurchasePrice
                                </th>
                                <th>
                                    @ResAssetMaster.DepreciatedValue
                                </th>
                                <th>
                                    @ResAssetMaster.SuggestedMaintenanceDate
                                </th>
                                <th>
                                    @ResCommon.RoomName
                                </th>
                                <th>
                                    @ResCommon.CreatedOn
                                </th>
                                <th>
                                    @ResCommon.UpdatedOn
                                </th>
                                <th>
                                    @ResCommon.UpdatedBy
                                </th>
                                <th>
                                    @ResCommon.CreatedBy
                                </th>
                                <th>
                                    @ResCommon.AddedFrom
                                </th>
                                <th>
                                    @ResCommon.EditedFrom
                                </th>
                                <th>
                                    @ResCommon.ReceivedOnDate
                                </th>
                                <th>
                                    @ResCommon.ReceivedOnWebDate
                                </th>
                                <th>
                                    @ResAssetMaster.AssetImage
                                </th>
                                @Html.RenderColumnsHeader("AssetMaster", typeof(eTurns.DTO.ResAssetMaster))
                            </tr>
                        </thead>
                    </table>
                </div>
                <div id="dvAssetsChart" style="float: left; width: 100%;">
                    Chart
                </div>
            </div>
        </div>
    </div>
</div>
<script language="javascript" type="text/javascript">
    var oTableAssets;
    var oTableTools;
    function ShowHideDiv(strdv, str)
    {
        if (strdv == 'Tools')
        {
            if (str == 'Grid')
            {
                $("#global_filterDashTools").val("");
                $('#dvTooltab [id="global_filterDashTools"]').val("");
                $('#myToolsMaintenanceDataTable').dataTable().fnFilter('', null, null, null)
                $("#divToolsReorder").show();
                $("#dvTooltab .searchWrapper").show();
                $("#dvToolsGrid").show();
                $("#dvToolsChart").hide();
                ChangeImgSRC('Grid', 'imgTOGrid', 'imgTOChart');

                if (oTableTools === undefined || oTableTools == null || dashboardReorder == true)
                {
                    dashboardReorder = false;
                    GenerateToolsGrid();
                }
                else
                {
                    oTableTools.fnDraw();
                }
            }
            else {
                $("#dvTooltab .searchWrapper").hide();
                $("#divToolsReorder").hide();
                $("#dvToolsGrid").hide();
                $("#dvToolsChart").show();
                ChangeImgSRC('Chart', 'imgTOGrid', 'imgTOChart');
                $('#dvToolsChart').empty();
                $('#dvToolsChart').load('/ToolChart/LoadChart', function () { });
            }
        }
        else
        {
            if (str == 'Grid')
            {
                $("#global_filterDashAssets").val("");
                $('#dvAssettab [id="global_filterDashAssets"]').val("");
                $('#myAssetsMaintenanceDataTable').dataTable().fnFilter('', null, null, null)
                $("#dvAssettab .searchWrapper").show();
                $("#divAssetReorder").show();
                $("#dvAssetsGrid").show();
                $("#dvAssetsChart").hide();
                ChangeImgSRC('Grid', 'imgAGrid', 'imgAChart');

                if (oTableAssets === undefined || oTableAssets == null || dashboardReorder == true)
                {
                    dashboardReorder = false;
                    GenerateAssetsGrid();                    
                }
                else
                {
                    oTableAssets.fnDraw();
                }
            }
            else
            {
                $("#dvAssettab .searchWrapper").hide();
                $("#divAssetReorder").hide();
                $("#dvAssetsGrid").hide();
                $("#dvAssetsChart").show();
                ChangeImgSRC('Chart', 'imgAGrid', 'imgAChart');
                $('#dvAssetsChart').empty();
                $('#dvAssetsChart').load('/AssetChart/LoadChart', function () { });
            }
        }
    }

    var objColumnsMyAssetsMaintenanceDataTable = {}
    var objColumnsMyToolsMaintenanceDataTable = {}
    $(document).ready(function () {
        objColumnsMyAssetsMaintenanceDataTable = GetGridHeaderColumnsObject('myAssetsMaintenanceDataTable');
        objColumnsMyToolsMaintenanceDataTable = GetGridHeaderColumnsObject('myToolsMaintenanceDataTable');

        $("#lnkTools").addClass("lava");
        $("#lnkTools").removeClass("liahover");

        $("#lnkAssets").addClass("liahover");
        $("#lnkAssets").removeClass("lava");

        $("#divMainAssetsTab").show();
        $("#divMainToolsTab").hide();
        if ('@IsAssetsView' != "False")
        {
            ShowHideDiv('Assets', 'Chart');
        }

        //BindGrid('lnkTools', 'Tools');
        GetDaysValue();
        //GenerateAssetsGrid();

        //$('#dvToolsChart').empty();
        //$('#dvToolsChart').load('/ToolChart/LoadChart', function () { });
        //$('#dvAssetsChart').empty();
        //$('#dvAssetsChart').load('/AssetChart/LoadChart', function () { });
        if (('@IsAssetsView' == "False") && ('@IsToolView' == "True")) {
            setTimeout(function () {
                BindGrid('lnkTools', 'Tools'); $("a#lnkTools").addClass("liahover");
            }, 1000);
        }
        _Common.setGloblaSearch('global_filterDashAssets', 'myAssetsMaintenanceDataTable');
    });

    function GetDaysValue() {
        $.ajax({
            url: '@Url.Action("GetCompanyConfig", "InventoryDashboard")'
                        , type: 'POST'
                        , data: { 'CompanyID': '@eTurnsWeb.Helper.SessionHelper.CompanyID', 'Status': 'ScheduleDays' }
                        , cache: false
                        , success: function (response) {
                            $("#txtAssetsDays").val(response.StatusValue);
                            $("#txtToolsDays").val(response.StatusValue);
                            $("#global_filterDashAssets").val("");
                            $("#global_filterDashAssets").change();
                            //FilterRecordsByStatusAssets();
                        }
                        , error: function () {
                            $("#txtAssetsDays").val(0);
                            $("#txtToolsDays").val(0);
                        }
        });
    }

    function BindGrid(id) {
        if (id == "lnkAssets") {
            $("#lnkTools").addClass("lava");
            $("#lnkTools").removeClass("liahover");

            $("#lnkAssets").addClass("liahover");
            $("#lnkAssets").removeClass("lava");

            $("#divMainAssetsTab").show();
            $("#divMainToolsTab").hide();
            ShowHideDiv('Assets', 'Chart');

            //FilterRecordsByStatusAssets();

        }
        else if (id == "lnkTools") {
            $("#lnkAssets").addClass("lava");
            $("#lnkAssets").removeClass("liahover");

            $("#lnkTools").addClass("liahover");
            $("#lnkTools").removeClass("lava");

            $("#divMainToolsTab").show();
            $("#divMainAssetsTab").hide();
            ShowHideDiv('Tools', 'Chart');

            //FilterRecordsByStatusTools();
        }

    }

    $('#btnAssetsgo').click(function () {
        BindGrid('lnkAssets', 'Assets');
    });

    $('#btnToolsgo').click(function () {
        BindGrid('lnkTools', 'Tools');
    });

    function FilterRecordsByStatusTools() {
        //var searchtext = "";
        var globalSearch = $("#global_filterDashTools").val().replace(/'/g, "''");
        //var projectTabFilter;
        //if (globalSearch == '')
        //    projectTabFilter = "[####]";
        //else {
        //    projectTabFilter = globalSearch + "[####]";
        //}
        $('#myToolsMaintenanceDataTable').dataTable().fnFilter(
                            globalSearch,
                            null,
                            null,
                            null
                        );
        $('.DTTT_container').css('z-index', '-1');
    }

    function FilterRecordsByStatusAssets() {
        var globalSearch = $("#global_filterDashAssets").val().replace(/'/g, "''");
        //alert(globalSearch);
        //var projectTabFilter;
        //if (globalSearch == '')
        //    projectTabFilter = "[####]";
        //else {
        //    projectTabFilter = globalSearch + "[####]";
        //}
        $('#myAssetsMaintenanceDataTable').dataTable().fnFilter(
                            globalSearch,
                            null,
                            null,
                            null
                        );

        $('.DTTT_container').css('z-index', '-1');
    }

    function GenerateAssetsGrid() {

        oTableAssets = $('#myAssetsMaintenanceDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "bAutoWidth": false,
            //"sScrollX": "150%",
            "sScrollX": "100%",
            "sDom": 'R<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[1, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bDestroy": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";

                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                //if (PostCount > 1) {
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'DashboardAssetsMaintenanceDataTable' },
                    "async": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
                //}
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'DashboardAssetsMaintenanceDataTable' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("AssetsMaintenanceListAjax", "InventoryDashboard")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                //PostCount = PostCount + 1;
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                //if (oSettings.aaSorting.length != 0)
                //    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                //else
                //    aoData.push({ "name": "SortingField", "value": "0" });

                if (oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];

                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                aoData.push({ "name": "Days", "value": $('#txtAssetsDays').val() });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
                    "headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        //$('#myAssetsMaintenanceDataTable td').removeHighlight();
                        removeHighlight2('myAssetsMaintenanceDataTable');
                        $('#myAssetsMaintenanceDataTable_wrapper .dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('#myAssetsMaintenanceDataTable_wrapper .dataTables_scroll').css({ "opacity": 1 });
                        if ($("#global_filterDashAssets").val() != '') {
                            $('#myAssetsMaintenanceDataTable td').highlight($("#global_filterDashAssets").val());
                        }

                        $('#myAssetsMaintenanceDataTable tbody tr').unbind("click");
                        $('#myAssetsMaintenanceDataTable tbody tr').click(function (e) {
                            DataTableTRClickToSelect(this, e);
                        });

                        CallShowHideData();
                        //CallNarrowfunctions();
                    }
                });
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
                //GenerateToolsGrid();
            },
            "aoColumns": [

                            {
                                "mDataProp": "AssetName",
                                "sClass": "read_only",
                                "sDefaultContent": '',
                                "bSortable": true,
                                "bSearchable": false,
                                "fnRender": function (obj, val) {
                                    //return "" + obj.aData.MaintenanceName + "";
                                    return "<a id='aEditLink' onclick='return ShowEditTab(&quot;" + obj.aData.AssetID + "&quot;,&quot;frmAsset&quot;)' href='JavaScript:void(0);'>" + obj.aData.AssetName + "</a>" +
			                                                   "<input type='hidden' id='hdnExportId' value='" + obj.aData.AssetID + "' />";
                                }
                            }
                            , {
                                "mDataProp": "MaintenanceName",
                                "sClass": "read_only",
                                "sDefaultContent": '',
                                "bSortable": true,
                                "bSearchable": false,
                                "fnRender": function (obj, val) {
                                    //return "" + obj.aData.MaintenanceName + "";
                                    return obj.aData.MaintenanceName;
                                }
                            },
                            //{ "mDataProp": "ScheduleDate", "sClass": "read_only",
                            //    "fnRender": function (obj, val) {
                            //        return GetDateInFullFormat(val);
                            //    }
                            //},
                            { "mDataProp": "ScheduleDate", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.ScheduleDateStr; } },
                            {
                                "mDataProp": "TrackngMeasurement", "sClass": "read_only",
                                "fnRender": function (obj) {
                                    return "" + obj.aData.TrackngMeasurement + "";
                                }
                            },
                            { "mDataProp": "ID", "sClass": "read_only" },
                            { "mDataProp": "Description", "sClass": "read_only" },
                            { "mDataProp": "Make", "sClass": "read_only" },
                            { "mDataProp": "Model", "sClass": "read_only" },
                            { "mDataProp": "Serial", "sClass": "read_only" },
                            { "mDataProp": "AssetCategory", "sClass": "read_only" },
                            //{ "mDataProp": "ToolCategory", "sClass": "read_only" },
                            {
                                "mDataProp": "PurchaseDate", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    return obj.aData.PurchaseDateString;
                                }
                            },
                            { "mDataProp": "PurchasePrice", "sClass": "read_only numericalign isCost" },
                            { "mDataProp": "DepreciatedValue", "sClass": "read_only numericalign isCost" },
                            //{
                            //    "mDataProp": "SuggestedMaintenanceDate", "sClass": "read_only",
                            //    "fnRender": function (obj, val) {
                            //        return GetDateInFullFormat(val);
                            //    }
                            //},
                            { "mDataProp": "SuggestedMaintenanceDateStr", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.SuggestedMaintenanceDateStr; } },
                            { "mDataProp": "RoomName", "sClass": "read_only" },
                            {
                                "mDataProp": "Created", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    //return GetDateInFullFormat(val);
                                    return obj.aData.CreatedDate;
                                }
                            },
                            {
                                "mDataProp": "Updated", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    //return GetDateInFullFormat(val);
                                    return obj.aData.UpdatedDate;
                                }
                            },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "EditedFrom", "sClass": "read_only" },
                            {
                                "mDataProp": "ReceivedOn", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    return obj.aData.ReceivedOnDate;
                                }
                            },
                            {
                                "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    return obj.aData.ReceivedOnDateWeb;
                                }
                            },
                            {
                                "mDataProp": "ImagePath", sClass: "read_only", "bVisible": false, "fnRender": function (obj, val) {

                                    if ((obj.aData.ImagePath != '' && obj.aData.ImagePath != null) || (obj.aData.AssetImageExternalURL != '' && obj.aData.AssetImageExternalURL != null)) {

                                        if (obj.aData.ImagePath != '' && obj.aData.ImagePath != null) {
                                            @*var path = '@eTurnsWeb.Helper.SessionHelper.CompanyID.ToString()';
                                            return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + "/Uploads/AssetPhoto/" + path + "/" + obj.aData.ImagePath + '">';*@

                                            var path = '@LogoPath';
                                            return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + path + "/" + obj.aData.AssetID + "/" + obj.aData.ImagePath + '">';
                                        }
                                        else if (obj.aData.AssetImageExternalURL != '' && obj.aData.AssetImageExternalURL != null) {
                                            return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + obj.aData.AssetImageExternalURL + '">';
                                        }
                                        else {
                                            return "<img src='../Content/images/no-image.jpg' />";
                                        }
                                    }
                                    else {
                                        return "<img src='../Content/images/no-image.jpg' />";
                                    }
                                }
                            }
                            @Html.RenderColumnsArray("AssetMaster")
            ]
        });
        $('.DTTT_container').css('z-index', '-1');

        //        function openAssetsEdit(guid) {
        //            var url = '@Url.Action("AssetList", "Assets")';
        //            url = url + '?fromdashboard=' + 'yes' + '&AssetGUID=' + guid;
        //            window.location.href = url;
        //            return false;
        //        }
    }

    function ShowEditTab(ID) {
        var url = '@Url.Action("AssetList", "Assets")';
        url = url + '?fromdashboard=' + 'yes' + '&AssetGUID=' + ID;
        window.location.href = url;
        return false;
    }

    function GenerateToolsGrid() {

        oTableTools = $('#myToolsMaintenanceDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "bAutoWidth": false,
            //"sScrollX": "150%",
            "sScrollX": "100%",
            "sDom": 'R<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[1, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bDestroy": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";

                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                //if (PostCount > 1) {
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'DashboardToolsMaintenanceDataTable' },
                    "async": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
                //}
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'DashboardToolsMaintenanceDataTable' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("ToolsMaintenanceListAjax", "InventoryDashboard")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                //PostCount = PostCount + 1;
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                //if (oSettings.aaSorting.length != 0)
                //    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                //else
                //    aoData.push({ "name": "SortingField", "value": "0" });

                if (oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];

                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                aoData.push({ "name": "Days", "value": $('#txtToolsDays').val() });


                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
                    "headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        //$('#myToolsMaintenanceDataTable td').removeHighlight();
                        removeHighlight2('myToolsMaintenanceDataTable');
                        $('#myToolsMaintenanceDataTable_wrapper .dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('#myToolsMaintenanceDataTable_wrapper .dataTables_scroll').css({ "opacity": 1 });
                        if ($("#global_filterDashTools").val() != '') {
                            $('#myToolsMaintenanceDataTable td').highlight($("#global_filterDashTools").val());
                        }

                        $('#myToolsMaintenanceDataTable tbody tr').unbind("click");
                        $('#myToolsMaintenanceDataTable tbody tr').click(function (e) {
                            DataTableTRClickToSelect(this, e);
                        });

                        CallShowHideData();
                        //CallNarrowfunctions();
                    }
                });
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
                //                GenerateProjectGrid();
                //                BindPercentageValue();
            },
            "aoColumns": [
                {
                    "mDataProp": "ToolName",
                    "sClass": "read_only",
                    "sDefaultContent": '',
                    "bSortable": true,
                    "bSearchable": false,
                    "fnRender": function (obj) {
                        //return "" + obj.aData.MaintenanceName + "";
                        return "<a id='aEditLink' onclick='return OpenToolsEdit(&quot;" + obj.aData.ToolID + "&quot;)' href='JavaScript:void(0);'>" + obj.aData.ToolName + "</a>" +
                        "<input type='hidden' id='hdnExportId' value='" + obj.aData.ToolGUID + "' />";
                    }
                },
                            {
                                "mDataProp": "MaintenanceName",
                                "sClass": "read_only",
                                "sDefaultContent": '',
                                "bSortable": true,
                                "bSearchable": false,
                                "fnRender": function (obj) {
                                    //return "" + obj.aData.MaintenanceName + "";
                                    return obj.aData.MaintenanceName;
                                }
                            },
                             //{ "mDataProp": "ScheduleDate", "sClass": "read_only",
                             //    "fnRender": function (obj, val) {
                             //        return GetDateInFullFormat(val);
                             //    }
                             //},
                            { "mDataProp": "ScheduleDate", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.ScheduleDateStr; } },
                            {
                                "mDataProp": "TrackngMeasurement", "sClass": "read_only",
                                "fnRender": function (obj) {
                                    return "" + obj.aData.TrackngMeasurement + "";
                                }
                            },
                            { "mDataProp": "ID", "sClass": "read_only" },
                            { "mDataProp": "Description", "sClass": "read_only" },
                            { "mDataProp": "Make", "sClass": "read_only" },
                            { "mDataProp": "Model", "sClass": "read_only" },
                            { "mDataProp": "Serial", "sClass": "read_only" },
                            //{ "mDataProp": "AssetCategory", "sClass": "read_only" },
                            { "mDataProp": "ToolCategory", "sClass": "read_only" },
                            {
                                "mDataProp": "PurchaseDate", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    return obj.aData.PurchaseDateString;
                                }
                            },
                            { "mDataProp": "PurchasePrice", "sClass": "read_only numericalign isCost" },
                            { "mDataProp": "DepreciatedValue", "sClass": "read_only numericalign isCost" },
                            //{
                            //                            "mDataProp": "SuggestedMaintenanceDate", "sClass": "read_only",
                            //                            "fnRender": function (obj, val) {
                            //                                return GetDateInFullFormat(val);
                            //                            }
                            //},
                            { "mDataProp": "MaintenanceDateStr", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.MaintenanceDateStr; } },
                            { "mDataProp": "RoomName", "sClass": "read_only" },
                            {
                                "mDataProp": "Created", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    //return GetDateInFullFormat(val);
                                    return obj.aData.CreatedDate;
                                }
                            },
                            {
                                "mDataProp": "Updated", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    //return GetDateInFullFormat(val);
                                    return obj.aData.UpdatedDate;
                                }
                            },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "EditedFrom", "sClass": "read_only" },
                            {
                                "mDataProp": "ReceivedOn", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    return obj.aData.ReceivedOnDate;
                                }
                            },
                            {
                                "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    return obj.aData.ReceivedOnDateWeb;
                                }
                            },
                            {
                                "mDataProp": "ImagePath", sClass: "read_only", "bVisible": false, "fnRender": function (obj, val) {

                                    if ((obj.aData.ImagePath != '' && obj.aData.ImagePath != null) || (obj.aData.AssetImageExternalURL != '' && obj.aData.AssetImageExternalURL != null)) {

                                        if (obj.aData.ImagePath != '' && obj.aData.ImagePath != null) {
                                            var path = '@eTurnsWeb.Helper.SessionHelper.CompanyID.ToString()';

                                            return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + "/Uploads/AssetPhoto/" + path + "/" + obj.aData.ImagePath + '">';
                                        }
                                        else if (obj.aData.AssetImageExternalURL != '' && obj.aData.AssetImageExternalURL != null) {
                                            return '<img style="cursor:pointer;"  alt="' + (obj.aData.ItemNumber) + '" id="ItemImageBox" width="120px" height="120px" src="' + obj.aData.AssetImageExternalURL + '">';
                                        }
                                        else {
                                            return "<img src='../Content/images/no-image.jpg' />";
                                        }
                                    }
                                    else {
                                        return "<img src='../Content/images/no-image.jpg' />";
                                    }
                                }
                            }
                            @Html.RenderColumnsArray("AssetMaster")
            ]
        });
        $('.DTTT_container').css('z-index', '-1');


        //        function openToolsEdit(guid) {
        //            var url = '@Url.Action("ToolList", "Assets")';
        //            url = url + '?fromdashboard=' + 'yes' + '&ToolGUID=' + guid;
        //            window.location.href = url;
        //            return false;
        //        }
    }


    function OpenToolsEdit(ToolId) {
        var url = '@eTurnsWeb.Helper.SessionHelper.AllowToolOrdering' == 'True' ? '@Url.Action("ToolList", "Tool")' : '@Url.Action("ToolList", "Assets")';
        url = url + '?fromdashboard=' + 'yes' + '&ToolGUID=' + ToolId;
        window.location.href = url;
        return false;
    }
    /* Global filter JS FOR Project Spend */

    var timeoutsc1;
    $('#global_filterDashAssets').bind('propertychange input', function () {
        clearTimeout(timeoutsc1);
        //var self = this;
        timeoutsc1 = setTimeout(function () {
            fnFilterAssetsGlobal();
        }, 200);
    });
    $("#global_filterDashAssets").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            //var searchtext = $("#global_filterDashAssets").val().replace(/'/g, "''");

            FilterRecordsByStatusAssets();


            //HideOtherTabs();

            return false;
        }
        return true;
    });

    function fnFilterAssetsGlobal() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#global_filterDashAssets") != 'undefined' && ($("#global_filterDashAssets").val().length > 2 || $("#global_filterDashAssets").val().length == 0)) {

            //var searchtext = $("#global_filterDashAssets").val().replace(/'/g, "''");
            FilterRecordsByStatusAssets();

        }
        else {
            $('#myAssetsMaintenanceDataTable td').removeHighlight();
            $('#myAssetsMaintenanceDataTable td').highlight($("#global_filterDashAssets").val());
        }
    }
    $("#clear_global_filterDashAssets").click(function () {
        if ($("#global_filterDashAssets").val().length > 0) {
            $("#global_filterDashAssets").val("");
            $("#global_filterDashAssets").change();
        }
        return false;
    });

    /* Global filter JS */

    /* Global filter JS FOR Project Spend */

    var timeoutsc1;
    $('#global_filterDashTools').bind('textchange', function () {
        clearTimeout(timeoutsc1);
        //var self = this;
        timeoutsc1 = setTimeout(function () {
            fnFilterToolsGlobal();
        }, 200);
    });
    $("#global_filterDashTools").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            //var searchtext = $("#global_filterDashTools").val().replace(/'/g, "''");

            FilterRecordsByStatusTools();


            //HideOtherTabs();

            return false;
        }
        return true;
    });

    function fnFilterToolsGlobal() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#global_filterDashTools") != 'undefined' && ($("#global_filterDashTools").val().length > 2 || $("#global_filterDashTools").val().length == 0)) {

            //var searchtext = $("#global_filterDashTools").val().replace(/'/g, "''");
            FilterRecordsByStatusTools();

        }
        else {
            $('#myToolsMaintenanceDataTable td').removeHighlight();
            $('#myToolsMaintenanceDataTable td').highlight($("#global_filterDashTools").val());
        }
    }
    $("#clear_global_filterDashTools").click(function () {
        if ($("#global_filterDashTools").val().length > 0) {
            $("#global_filterDashTools").val("");
            $("#global_filterDashTools").change();
        }
        return false;
    });

    /* Global filter JS */
</script>
