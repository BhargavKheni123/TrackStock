@model eTurns.DTO.BinMasterDTO
<div class="userHead">
    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)
        <div class="BtnBlockform">
            <input type="button" value="Cancel" class="CreateBtn" />
            <input type="button" value="Save" id="btnSave" class="CreateBtn" />
        </div>
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.BinNumber)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.BinNumber, new { id = "txtBinNumber", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.BinNumber)
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                    </div>
                </li>
            </ul>
        </div>
        <div class="rightside">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.RoomName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.RoomName, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.RoomName)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Created)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Created, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.Created)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.CreatedByName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.CreatedByName, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.CreatedByName)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.UpdatedDate)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.UpdatedDate, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.UpdatedDate)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.UpdatedByName, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.UpdatedByName)
                    </div>
                </li>
            </ul>
        </div>
    }
</div>
<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        $('#btnSave').click(function (e) {
            CheckDuplicateTechnician();
        });
        $('#txtBinNumber').keyup(function (e) {
            if (e.keyCode == 13) {
                if ($("#txtBinNumber").val() != '') {
                    var idValue = $("#hiddenID").val();
                    $.ajax({ 'url': '/Master/BinSave',
                        data: { ID: idValue, Technician: $("#txtBinNumber").val() },
                        success: function (response) {
                            $('#spanGlobalMessage').text(response.Message);
                            $('div#target').fadeToggle();
                            $("div#target").delay(2000).fadeOut(200);
                            $("#txtBinNumber").val("");
                            $("#txtBinNumber").focus();
                            return;
                        }
                    ,
                        error: function (response) {
                            // through errror message
                        }
                    });
                }
                else
                    alert('Kindly add proper Technician name');
            }
        });
    });

    function CheckDuplicateTechnician() {
        if ($("#txtBinNumber").val() != '') {

            var idValue = $("#hiddenID").val();
            var actionName = '';
            if (idValue > 0)
                actionName = 'edit';
            else
                actionName = 'add';

            $.ajax({ 'url': '/Master/DuplicateBinMasterCheck',
                data: { TechnicianName: $("#txtBinNumber").val(), ActionMode: actionName, ID: idValue },
                success: function (response) {
                    if (response == "duplicate") {
                        alert('duplicate record found, kindly add other name for technician.');
                        $("#txtTechnician").focus();
                        return;
                    }
                }
                    ,
                error: function (response) {
                    // through errror message
                }
            });
        }
    }
    
    function getCurrentDateMMDDYYYY() {
        var todayDate = new Date();
        var date = todayDate.getDate();
        var month = todayDate.getMonth() + 1;
        var year = todayDate.getFullYear();
        var hours = todayDate.getHours();
        var minutes = todayDate.getMinutes();
        var seconds = todayDate.getSeconds();
        var ampm = hours >= 12 ? 'PM' : 'AM';
        var hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0' + minutes : minutes;
        seconds = seconds < 10 ? '0' + seconds : seconds;
        strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;
        var curdat = month + "/" + date + "/" + year + " " + strTime;
        return curdat;
    }
</script>
