@model eTurns.DTO.InventoryClassificationMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}

    @{  
        bool isUpdate;
        bool isInsert;
        if (ViewBag.ViewOnly == true)
        {
            isUpdate = false;
            isInsert = false;
        }
        else
        {
            isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
            isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.InventoryClassificationMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        }
    }
    @using (Ajax.BeginForm("InventoryClassificationSave", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnSuccess = "onCatSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmInventoryClassification" }))
    {
        @Html.AntiForgeryToken()
        <div class="userHead">
        @Html.ValidationSummary(true)
       
        @if (Model.ID != 0)
        {        
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.ReceivedOnWebDate)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    : <span>@(Model.ReceivedOnDate)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        }                  
        
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.InventoryClassification)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.InventoryClassification, new { id = "txtInventoryClassification", @class = "text-box", maxlength = 50 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.InventoryClassification)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenCatID" })
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.Created)
                        @Html.HiddenFor(model => model.Updated)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.LastUpdatedBy)
                        @Html.HiddenFor(model => model.CompanyID)
                        @Html.HiddenFor(model => model.Room)
                        @Html.HiddenFor(model => model.RoomName)
                        @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                        @Html.HiddenFor(model => model.IsDeleted)
                        @Html.HiddenFor(model => model.IsArchived)
                        @Html.HiddenFor(model => model.isForBOM)
                        @Html.HiddenFor(model => model.RefBomId)
                        @Html.HiddenFor(model => model.ReceivedOn)
                            @Html.HiddenFor(model => model.ReceivedOnWeb)
                            @Html.HiddenFor(model => model.AddedFrom)
                            @Html.HiddenFor(model => model.EditedFrom)
                            @Html.HiddenFor(model => model.AddedFrom)
                            @Html.HiddenFor(model => model.RangeStart)
                            @Html.HiddenFor(model => model.RangeEnd)
                    </div>
                </li>
                @* <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.BaseOfInventory)<em> *</em>
                    </div>
                    <div class="editor-field" style="width: 300px; float: left">
                        @Html.TextBoxFor(model => model.BaseOfInventory, new { id = "txtBaseOfInventory", @class = "text-box", maxlength = 10 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.BaseOfInventory)</span>
                    </div>
                </li>  
                *@ @*<li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.BaseOfInventory)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.BaseOfInventory, new SelectList(
                           new[] {
                                new {ID = "Cost", Name = "Cost"},
                                new {ID = "Turns", Name = "Turns"},
                                }, "ID", "Name", Model.BaseOfInventory), "", new { @class = "selectBox" })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.BaseOfInventory)</span>
                    </div>
                </li>*@ @*   <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.RangeStart)<em> *</em>
                    </div>
                    <div class="editor-field" style="width: 300px; float: left">
                        @Html.TextBoxFor(model => model.RangeStart, "{0:0.0}", new { id = "txtRangeStart", @class = "text-box ", maxlength = 10 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RangeStart)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.RangeEnd)<em> *</em>
                    </div>
                    <div class="editor-field" style="width: 300px; float: left">
                        @Html.TextBoxFor(model => model.RangeEnd, "{0:0.0}", new { id = "txtRangeEnd", @class = "text-box", maxlength = 10 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.RangeEnd)</span>
                    </div>
                </li>   *@
                @Html.Partial("UDFLayout", new eTurns.DTO.ResInventoryClassificationMaster())
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCatCancel" class="CreateBtn" />
                        @if (isInsert == true && Model.ID == 0)
                        {                            
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />                            
                        }
                        else if (isUpdate == true)
                        {                            
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == false && isInsert == false)
                        {                             
                            <script>
                                //This is the case when archived or deleted record is being viewed..
                                disableControls('frmInventoryClassification');
                                $('#btnCatCancel').removeAttr('disabled');
                            </script>
                        }
                    </div>
                </li>
            </ul>
        </div>
@* <div class="BtnBlockform">
            <input type="button" value="Cancel" id="btnCatCancel" class="CreateBtn" />
            <input type="submit" value="Save" id="btnSave" class="CreateBtn" />
        </div>  *@
</div>    }

@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmInventoryClassification");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
        $('#NarroSearchClear').click();
    });    
</script>
<script language="javascript" type="text/javascript">

    function onCatSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idCatValue = $("#hiddenCatID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            // $("#txtInventoryClassification").val("");
            $("#txtInventoryClassification").focus();
        }
        else if (idCatValue == 0) {
            $("#txtInventoryClassification").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0) {
                    $('#NewMasterPopUP').data("IDVal", response.NewIDForPopUp + '~' + $("#txtInventoryClassification").val()).dialog('close');
                }
                else {
                    clearControls('frmInventoryClassification');
                    setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                }
            }
        }
        else if (idCatValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#txtInventoryClassification").val("");
                $("#txtInventoryClassification").focus();
            }
            else
                SwitchTextTab(0, 'InventoryClassificationCreate', 'frmInventoryClassification');
        }
    }
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        //$("#txtInventoryClassification").focus();
    }

    $(document).ready(function () {
        $('form').areYouSure();
        $('#btnCatCancel').click(function (e) {
            if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0)
                $('#NewMasterPopUP').dialog('close');
            else {
                SwitchTextTab(0, 'InventoryClassificationCreate', 'frmInventoryClassification');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
            }
            $('#NarroSearchClear').click();
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');

        $("#txtRangeStart").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 1
        });

        $("#txtRangeEnd").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 1
        });
    });
    _Common.addRequiredSign();
</script>
