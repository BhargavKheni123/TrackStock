@model eTurns.DTO.UserMasterDTO
@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    List<PermissionTemplateDTO> lstAllTemplates = new eTurns.DAL.PermissionTemplateDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetAllTemplates();
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    List<UserTypeInfo> lstUserTypes = new List<UserTypeInfo>();
    UserTypeInfo objUserTypeInfo;
    if (eTurnsWeb.Helper.SessionHelper.RoleID == -1)
    {
        objUserTypeInfo = new UserTypeInfo();
        objUserTypeInfo.UserType = 1;
        objUserTypeInfo.UserTypeName = "Super admin";
        lstUserTypes.Add(objUserTypeInfo);

    }
    if (eTurnsWeb.Helper.SessionHelper.UserType == 1 || (eTurnsWeb.Helper.SessionHelper.UserType == 2))
    {
        objUserTypeInfo = new UserTypeInfo();
        objUserTypeInfo = new UserTypeInfo();
        objUserTypeInfo.UserType = 2;
        objUserTypeInfo.UserTypeName = "Enterprise admin";
        lstUserTypes.Add(objUserTypeInfo);
    }
    objUserTypeInfo = new UserTypeInfo();
    objUserTypeInfo.UserType = 3;
    objUserTypeInfo.UserTypeName = "Company admin";
    lstUserTypes.Add(objUserTypeInfo);

    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool DisableControl = false;
    //if ((Model != null && Model.ID == eTurnsWeb.Helper.SessionHelper.UserID) || (Model != null && Model.RoleID < 0))
    //{
    //    DisableControl = true;
    //}
}
<div class="userHead">

    @using (Ajax.BeginForm("SaveUserProfile", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onUserProfileSaveSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onUserProfileSaveFailure" }, new { @id = "frmUserProfile" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.IseTurnsAdmin);
        if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.CreatedDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.UpdatedDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="mainForm">
            @Html.Hidden("hdnDisableControl", DisableControl)
            <div class="editorForm">
                <h4>
                    @ResUserMaster.UserDetails
                </h4>
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.UserType)
                        </div>
                        <div class="editor-field">
                            @if (Model.ID < 1)
                            {
                                @Html.DropDownListFor(t => t.UserType, new SelectList(lstUserTypes, "UserType", "UserTypeName"), new { @class = "selectBox", @id = "drpUserType" })
                            }
                            else
                            {
                                @Html.DropDownListFor(t => t.UserType, new SelectList(lstUserTypes, "UserType", "UserTypeName"), new { @class = "selectBox", @id = "drpUserType", @disabled = "disabled" })
                                @Html.HiddenFor(t => t.UserType)
                            }
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UserType)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.UserName)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.UserName, new { id = "txtUserName", @class = "text-box", maxlength = 64 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UserName)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.RoleID, new { id = "hdnRoleID" })
                            @Html.HiddenFor(model => model.SelectedModuleIDs, new { id = "hdnSelectedModuleList" })
                            @Html.HiddenFor(model => model.SelectedNonModuleIDs, new { id = "hdnSelectedNonModuleList" })
                            @Html.HiddenFor(model => model.SelectedDefaultSettings, new { id = "hdnSelectedDefaultSettings" })
                            @Html.HiddenFor(model => model.SelectedRoomAccessValue, new { id = "hdnSelectedRoomAccessValue" })
                            @Html.HiddenFor(model => model.SelectedRoomReplanishmentValue, new { id = "hdnSelectedRoomReplanishmentValue" })
                            @Html.HiddenFor(model => model.SelectedEnterpriseAccessValue, new { id = "hdnSelectedEnterpriseAccessValue" })
                            @Html.HiddenFor(model => model.SelectedCompanyAccessValue, new { id = "hdnSelectedCompanyAccessValue" })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Password)
                            @if (Model.ID == 0)
                            { <em> *</em>}
                        </div>
                        <div class="editor-field">
                            @Html.PasswordFor(model => model.Password, new { id = "txtPassword", @class = "text-box", maxlength = 255, @autocomplete = "off" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Password)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ConfirmPassword)@if (Model.ID == 0)
                            { <em> *</em>}
                        </div>
                        <div class="editor-field">
                            @Html.PasswordFor(model => model.ConfirmPassword, new { id = "txtConfirmPassword", @class = "text-box", maxlength = 255, @autocomplete = "off" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ConfirmPassword)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Phone)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Phone, new { id = "txtPhone", @class = "text-box", maxlength = 20 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Phone)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Email)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Email, new { id = "txtEmail", @class = "text-box", maxlength = 255 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Email)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            Redirect Page
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.RedirectURL, new List<SelectListItem>() { new SelectListItem() { Text = "select", Value = "" } }, new { @class = "selectBox" })
                            @Html.HiddenFor(t => t.RedirectURL, new { @Id = "hdnRedirectURL" })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.FullName)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.FullName, new { id = "txtFullName", @class = "text-box", maxlength = 255 })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EmployeeNumber)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.EmployeeNumber, new { id = "txtEmployeeNumber", @class = "text-box", maxlength = 255 })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CostCenter)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.CostCenter, new { id = "txtCostCenter", @class = "text-box", maxlength = 255 })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.JobTitle)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.JobTitle, new { id = "txtJobTitle", @class = "text-box", maxlength = 255 })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Address)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Address, new { id = "txtAddress", @class = "text-box", maxlength = 255 })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.City)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.City, new { id = "txtCity", @class = "text-box", maxlength = 255 })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.State)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.State, new { id = "txtState", @class = "text-box", maxlength = 255 })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PostalCode)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PostalCode, new { id = "txtPostalCode", @class = "text-box", maxlength = 255 })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Phone2)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Phone2, new { id = "txtPhone2", @class = "text-box", maxlength = 255 })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="editor-field">
                            @ResUserMaster.lblPasswordRules
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@ResCommon.Cancel" id="btnCancel" class="CreateBtn" />


                            <input type="submit" value="@ResCommon.Save" id="btnSave" class="CreateBtn" />

                        </div>
                    </li>
                </ul>
            </div>
        </div>
    }
</div>
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $("form").submit(function (e) {

        $.validator.unobtrusive.parse("#frmUserProfile");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
    });
</script>
<script language="javascript" type="text/javascript">
    function onUserProfileSaveSuccess(response) {
        IsRefreshGrid = true;
        showNotificationDialog();
        var idBinValue = $("#ID").val();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#SFtpName").focus();
        }
        else if (idBinValue == 0) {
            $("#SFtpName").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0) {
                    $('#NewMasterPopUP').data("IDVal", response.NewBinIDPopup + '~' + $("#SFtpName").val()).dialog('close');
                }
                else {
                    setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                    ShowNewTab('SFTPCreate', 'frmUserProfile');
                }
            }
        }
        else if (idBinValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#SFtpName").focus();
            }
            else {
                SwitchTextTab(0, 'SFTPCreate', 'frmUserProfile');
            }
        }
    }
    function onUserProfileSaveFailure(message) {

        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#SFtpName").focus();
    }
    var ddlPageName;
    $(document).ready(function () {
      
        ddlPageName = $("#RedirectURL");

        //My Profile Group

        ddlPageName.append('<optgroup value="javascript:void(0);"> ' + "My Profile");
        ddlPageName.append('<option  value="/Master/MyProfile"> My Profile</option>');
        ddlPageName.append('</optgroup>');

      $('.RightBlock').find('div.Rnav').find("ul[id='rightNav']").find("li:first").each(function (i) {
            var mnuBtnText = $.trim($(this).find('a').first().text());
            var mnuBtnVal = $.trim($(this).find('a').first().attr("href"));
            if (mnuBtnText.length > 0) {
                ddlPageName.append('<optgroup  value="' + mnuBtnVal + '"> ' + mnuBtnText);
                $(this).find('a').first().parent().find('ul').find('li').each(function (j) {
                    if ($(this).parent().hasClass('sub_subMenu') === false) {
                        var subMnuText = $.trim($(this).find('a').first().text());
                        var subMnuVal = $.trim($(this).find('a').attr("href"));
                        ddlPageName.append('<option  value="' + subMnuVal + '"> ' + ' &nbsp;     ' + subMnuText + '</option>');
                    }
                });
                ddlPageName.append('</optgroup>');
            }
        });

        
        $('.Lnav').children("ul").children("li").each(function (i) {

            if (i >= 2) {
                $(this).find("ul[id='nav']").children("li").children("ul").children("li").each(function () {
                    var mnuBtnText = $.trim($(this).find('a').first().text());
                    var mnuBtnVal = $.trim($(this).find('a').first().attr("href"));

                    if ($.trim(mnuBtnText) != '') {
                        ddlPageName.append('<optgroup value="' + mnuBtnVal + '"> ' + mnuBtnText);
                        $(this).children('ul').children('li').each(function (j) {
                            var subMnuText = $.trim($(this).find('a:first').text());
                            var subMnuVal = $.trim($(this).find('a:first').attr("href"));
                            if ($.trim(subMnuText) != '') {
                                ddlPageName.append('<option  value="' + subMnuVal + '"> ' + ' &nbsp;     ' + subMnuText + '</option>');
                            }
                        });
                        ddlPageName.append('</optgroup>');
                    }
                });
            }
            else if (i == 0) {
                ddlPageName.append('<optgroup value="javascript:void(0);"> ' + "Reports");
                $(this).find("ul[id='nav']").children("li").children("ul").children("li").each(function () {
                    var subMnuText = $.trim($(this).find('a:first').text());
                    var subMnuVal = $.trim($(this).find('a:first').attr("href"));
                    if ($.trim(subMnuText) != '') {
                        ddlPageName.append('<option  value="' + subMnuVal + '">' + subMnuText + '</option>');
                    }
                });
                ddlPageName.append('</optgroup>');
            }
            else if (i == 1) {
                ddlPageName.append('<optgroup value="javascript:void(0);"> ' + "Dashboard");
                ddlPageName.append('<option  value="/"> Dashboard</option>');
                ddlPageName.append('</optgroup>');
            }

        });
        $("select#RedirectURL").val($("input#hdnRedirectURL").val());
        $('form').areYouSure({ 'message': 'You have unsaved changes.  Do you want to leave this page and lose your changes?' });
    });
   


</script>
