@model eTurns.DTO.EnterpriseDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    EnterPriseConfigDTO obj = new eTurns.DAL.EnterPriseConfigDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetRecord(eTurnsWeb.Helper.SessionHelper.EnterPriceID);
    string NotAllowedCharacterList = string.Empty;
    string CharCodeList = string.Empty;
    if (obj != null)
    {
        NotAllowedCharacterList = obj.NotAllowedCharacter;
        if (NotAllowedCharacterList != null && (!string.IsNullOrEmpty(NotAllowedCharacterList)))
        {
            foreach (string s in NotAllowedCharacterList.Split(','))
            {
                foreach (char c in s.ToCharArray())
                {
                    int unicode = c;
                    if (!string.IsNullOrEmpty(CharCodeList))
                    {
                        CharCodeList = CharCodeList + "," + unicode;
                    }
                    else
                    {
                        CharCodeList = Convert.ToString(unicode);
                    }
                }
            }
        }
    }
}
<script type='text/javascript' src="@Url.Content("~/Scripts/ajaxfileupload.js")"></script>
<style type="text/css">

    #pswd_info {
        position: absolute;
        /* bottom: -75px; */
        bottom: -115px\9;
        right: 0px;
        width: 11%;
        padding: 15px;
        background: #fefefe;
        font-size: .875em;
        border-radius: 5px;
        box-shadow: 0 1px 3px #ccc;
        border: 1px solid #ddd;
        height: 20%;
        left: 80%;
        top: 50%;
    }

    #pswd_info h4 {
        margin: 0 0 10px 0;
        padding: 0;
        font-weight: normal;
    }
		
	#pswd_info {
        display: none;
    }

    #pswd_info li.invalid {
        background: url(../Content/images/invalid.png) no-repeat 0 50%;
        padding-left: 14px !important;
        line-height: 24px;
        color: #ec3f41;
    }

    #pswd_info li.valid {
        background: url(../Content/images/valid.png) no-repeat 0 50%;
        padding-left: 19px !important;
        line-height: 24px;
        color: #3a7d34;
    }

</style>
@{
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.EnterpriseMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.EnterpriseMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    string CurrentEnterprise = eTurnsWeb.Helper.SessionHelper.EnterPriceID.ToString();
}
@using (Ajax.BeginForm("EnterpriseSave", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, LoadingElementId = "DivLoading", OnFailure = "onFailure" }, new { @id = "frmEnterprise", autocomplete = "off" }))
{
    <div class="userHead">
        @Html.ValidationSummary(true)

        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.CreatedDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.UpdatedDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="mainForm">
            <div class="editorForm">
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Name)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Name, new { @class = "text-box single-line", onkeypress = "return NotAllowCharacter(event);", ondrop = "return false;", onpaste = "return false;" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Name)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.EnterpriseUserID)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsActive)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsActive)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsActive)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Address)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Address)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Address)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.City)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.City)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.City)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.State)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.State)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.State)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PostalCode)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.PostalCode)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PostalCode)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Country)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Country)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Country)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ContactPhone)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.ContactPhone)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ContactPhone)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ContactEmail)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.ContactEmail)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ContactEmail)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.SoftwareBasePrice)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.SoftwareBasePrice)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SoftwareBasePrice)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxBinsPerBasePrice)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.MaxBinsPerBasePrice)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxBinsPerBasePrice)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CostPerBin)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.CostPerBin)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.CostPerBin)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.DiscountPrice1)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.DiscountPrice1, new { @Class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DiscountPrice1)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.DiscountPrice2)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.DiscountPrice2, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DiscountPrice2)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.DiscountPrice3)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.DiscountPrice3, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DiscountPrice3)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxSubscriptionTier1)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxSubscriptionTier1, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxSubscriptionTier1)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxSubscriptionTier2)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxSubscriptionTier2, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxSubscriptionTier2)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxSubscriptionTier3)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxSubscriptionTier3, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxSubscriptionTier3)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxSubscriptionTier4)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxSubscriptionTier4, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxSubscriptionTier4)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxSubscriptionTier5)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxSubscriptionTier5, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxSubscriptionTier5)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxSubscriptionTier6)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxSubscriptionTier6, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxSubscriptionTier6)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceSubscriptionTier1)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceSubscriptionTier1, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceSubscriptionTier1)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceSubscriptionTier2)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceSubscriptionTier2, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceSubscriptionTier2)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceSubscriptionTier3)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceSubscriptionTier3, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceSubscriptionTier3)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceSubscriptionTier4)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceSubscriptionTier4, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceSubscriptionTier4)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceSubscriptionTier5)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceSubscriptionTier5, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceSubscriptionTier5)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceSubscriptionTier6)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceSubscriptionTier6, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceSubscriptionTier6)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                            @if (Model.IsDeleted == false)
                            {
                                if (isInsert == true && Model.ID == 0)
                                {
                                    <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                                }
                                else if (isUpdate == true)
                                {

                                    <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave"
                                           class="CreateBtn" />
                                }
                            }
                        </div>
                    </li>
                </ul>
            </div>
            <div class="editorForm padRightNone">
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IncludeLicenseFees)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IncludeLicenseFees)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IncludeLicenseFees)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxLicenseTier1)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxLicenseTier1, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxLicenseTier1)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxLicenseTier2)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxLicenseTier2, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxLicenseTier2)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxLicenseTier3)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxLicenseTier3, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxLicenseTier3)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxLicenseTier4)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxLicenseTier4, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxLicenseTier4)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxLicenseTier5)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxLicenseTier5, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxLicenseTier5)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxLicenseTier6)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxLicenseTier6, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxLicenseTier6)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceLicenseTier1)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceLicenseTier1, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceLicenseTier1)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceLicenseTier2)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceLicenseTier2, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceLicenseTier2)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceLicenseTier3)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceLicenseTier3, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceLicenseTier3)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceLicenseTier4)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceLicenseTier4, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceLicenseTier4)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceLicenseTier5)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceLicenseTier5, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceLicenseTier5)</span>
                        </div>
                    </li>
                    <li>
                        @*
                            <div class="editor-label">
                                @Html.LabelFor(model => model.PriceLicenseTier6)
                            </div>
                            <div class="editor-field">
                                @Html.EditorFor(model => model.EnterpriseUserEmail) <span class="ErrorMessage">
                                    @Html.ValidationMessageFor(model
                                    => model.EnterpriseUserEmail)
                                </span>
                            </div>*@
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PriceLicenseTier6)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PriceLicenseTier6, new { @class = "numericinput" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PriceLicenseTier6)</span>
                        </div>
                    </li>
                    <li>
                        <h4>
                            @ResEnterprise.hdrEnterpriseUserDetails
                        </h4>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.UserName)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.UserName)
                            <span class="ErrorMessage">
                                @Html.ValidationMessageFor(model => model.UserName)
                            </span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EnterpriseUserEmail)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.EnterpriseUserEmail)
                            @Html.HiddenFor(model => model.IsEmailChanged)
                            <span class="ErrorMessage">
                                @Html.ValidationMessageFor(model => model.EnterpriseUserEmail)

                            </span>
                        </div>
                    </li>

                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EnterpriseUserPassword)<em> *</em>
                        </div>
                        @*<div class="editor-field">
                                @Html.PasswordFor(model => model.EnterpriseUserPassword, new { @id = "txtPassword", @name = "txtPasswordName", @class = "text-box", maxlength = 50, @value = Model.EnterpriseUserPassword })
                            </div>*@
                        <div class="editor-field">
                            @Html.PasswordFor(model => model.EnterpriseUserPassword, new { @id = "txtPassword", autocomplete = "new-password", @name = "txtPasswordName", @class = "text-box", maxlength = 50, @value = @Model.EnterpriseUserPassword })
                            <div id="pswd_info">
                                <h4>Password must meet the following requirements:</h4>
                                <ul class="password">
                                    <li id="letter" class="invalid">At least <strong>one letter</strong></li>
                                    <li id="capital" class="invalid">At least <strong>one capital letter</strong></li>
                                    <li id="number" class="invalid">At least <strong>one number</strong></li>
                                    <li id="special" class="invalid">Be at least <strong>one special letter</strong></li>
                                    <li id="length" class="invalid">Be at least <strong>8 characters</strong></li>
                                </ul>
                            </div>
                            @Html.HiddenFor(model => model.IsPasswordChanged)                            
                            <span class="ErrorMessage">
                                @Html.ValidationMessageFor(model => model.EnterpriseUserPassword)
                            </span>
                        </div>
                    </li>

                    <li>
                        @if (Model != null && Model.ID > 0)
                        {
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResEnterprise())
                        }
                    </li>
                    <li>
                        <h4>
                            @eTurns.DTO.ResItemMaster.ImagePath
                        </h4>
                    </li>
                    <li>
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.EnterpriseLogo)@*<em> *</em>*@
                                </div>
                                <div class="editor-field" style="width: 1000px;">
                                    <input name="EnterpriseLogo" id="EnterpriseLogo" type="file" />
                                    <div style="float: left;">
                                        @if (!string.IsNullOrEmpty(Model.EnterpriseLogo))
                                        {
                                            <img id="previewHolder" style="width:120px;height:120px;" src="@( "/Uploads/EnterpriseLogos/" + Model.ID + "/" + Model.EnterpriseLogo)">
                                        }
                                        else
                                        {
                                            <img id="previewHolder" style="width:120px;height:120px;" alt="No Image" src="~/Content/images/no-image.jpg" />
                                        }
                                    </div>
                                </div>
                            </li>
                        </ul>
                        @*<div class="editor-label">
                                @Html.LabelFor(model => model.EnterpriseLogo)<em> *</em>
                            </div>
                            <div class="editor-field">
                                <input name="EnterpriseLogo" id="EnterpriseLogo" type="file" multiple="multiple" />
                                <span class="ErrorMessage">
                                    @Html.ValidationMessageFor(model => model.EnterpriseLogo)
                                </span>
                            </div>*@
                    </li>
                    <li>
                        <h4>
                            @eTurns.DTO.ResEnterprise.EnterpriseLanguages
                        </h4>
                    </li>
                    <li>
                        <div style="height:100px; width:250px; overflow: auto;">
                            <ul>
                                @if (Model.lstResourceAll != null)
                                {
                                    foreach (var g in Model.lstResourceAll)
                                    {
                                        <li>
                                            @if (Model.strResourceSelected != null && Model.strResourceSelected.Contains(g.Culture))
                                            {
                                                <input type="checkbox" name="ResourceGroups" value="@g.Culture" id="@g.ID" checked="checked" />
                                            }
                                            else
                                            {
                                                <input type="checkbox" name="ResourceGroups" value="@g.Culture" id="@g.ID" />
                                            }

                                            <label for="@g.ID">@g.Language</label>
                                            @Html.Hidden("hidId", g.ID)
                                            @Html.Hidden("hidLanguage", g.Language)
                                            @Html.Hidden("hidCulture", g.Culture)
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    @*<div class="editorForm padRightNone">
        </div>*@
}

@Html.Partial("_RequiredMessages")
@*@if (false)
    {
    <script src="../../Scripts/jquery-1.9.1-vsdoc.js" type="text/javascript"></script>
    }*@
<script type="text/javascript">
   
    $("form").submit(function (e) {

        $.validator.unobtrusive.parse("#frmEnterprise");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
    });
     var charCode = '@CharCodeList';

    $(document).ready(function () {
        var intNotAllowededCode = charCode.split(',');
        if ('@NotAllowedCharacterList' != '') {
            for (i = 0; i < intNotAllowededCode.length; i++) {
                specialKeys.push(parseInt(intNotAllowededCode[i])); //Backspace
            }
        }
    });
   
</script>
<script language="javascript" type="text/javascript">
    function onSuccess(response) {

        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").text(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            clearControls('frmEnterprise');
            $("#Name").focus();
        }
        else if (idValue == 0) {

            $("#Name").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                if (response.retDto.ID > 0) {
                    doResourceOperation(response.retDto.ID);
                    if ($("#EnterpriseLogo").val() != "") {
                        ajaxFileUpload(response.retDto.ID);
                    }
                    else {
                        window.location.reload();
                    }

                    FillTopEnterprise();
                }
                clearControls('frmEnterprise');
                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
            }


            //            else {
            //                location.href = location.href;
            //            }
        }
        else if (idValue > 0) {

            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#Name").focus();
                return;
            }
            else {
                doResourceOperation(idValue);
                SwitchTextTab(0, 'EnterpriseCreate', 'frmEnterprise');
            }
            if ($("#EnterpriseLogo").val() != "") {
                ajaxFileUpload(response.retDto.ID);
            }
            else {
                window.location.reload();
            }
            //            FillEnterprise();
        }
        return false;
    }
    function onFailure(message) {
        $("#spanGlobalMessage").text(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#Name").focus();
    }
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var imagefilename = $("#EnterpriseLogo").val().split('\\').pop();
                if (imagefilename.toString().indexOf("&") >= 0 || imagefilename.toString().indexOf("<") >= 0 || imagefilename.toString().indexOf(">") >= 0
                       || imagefilename.toString().indexOf("*") >= 0 || imagefilename.toString().indexOf(":") >= 0
                       || imagefilename.toString().indexOf("?") >= 0) {
                    alert("Please select correct file name.");
                    $("input#EnterpriseLogo").val('');
                }
                else {
                    $('#previewHolder').attr('src', e.target.result);
                }
            }

            reader.readAsDataURL(input.files[0]);
        }
    }


    $(document).ready(function () {
        $('form').areYouSure();

        if ('@Model.IsDeleted' == '@Boolean.TrueString') {
            disableControls('frmEnterprise');
        }

        $('#btnCancel').click(function (e) {
            SwitchTextTab(0, 'EnterpriseCreate', 'frmEnterprise');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();
            }
        });
        $("#EnterpriseLogo").change(function () {
            readURL(this);
        });

        $("#txtPassword").change(function () {
            $("#IsPasswordChanged").val("1");
        });
        $("#EnterpriseUserEmail").change(function () {
            $("#IsEmailChanged").val("1");
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
    });



    function ajaxFileUpload(retid) {
        $.ajaxFileUpload
        (
            {
                url: '/api/fileupload/PostEnterpriseFile/' + retid,
                secureuri: false,
                type: "POST",
                fileElementId: 'EnterpriseLogo',
                dataType: 'json',
                success: function (data, status) {

                    window.location.reload();
                    //			        if (mode == "Add") {
                    //			            location.href = location.href;
                    //			        }
                    //			        if (typeof (data.error) != 'undefined') {
                    //			            if (data.error != '') {
                    //			                alert(data.error);
                    //			            } else {
                    //			                alert(data.msg);
                    //			            }
                    //			        }
                },
                error: function (data, status, e) {
                    window.location.reload(); // window.location.reload();
                }
            }
        )

        return false;

    }

    function doResourceOperation(idValue) {

        var ResourceValues = $('input[name="ResourceGroups"]:checked').map(function () {
            return this.value;
        }).get();
        //

        $.ajax({
            type: "POST",
            url: "/Master/EditEnterprisesResource",
            data: "{'EnterpriseID':'" + idValue + "','NewResource': '" + ResourceValues + "'}",
            contentType: "application/json;",
            dataType: "json",
            async: false,
            success: function (data) {
            },
            error: function () {
            }
        });
    }

    function OnUpload(cid) {

        var files = $("#EnterpriseLogo").get(0).files;
        if (files.length > 0) {
            if (window.FormData !== undefined) {
                var data = new FormData();
                for (i = 0; i < files.length; i++) {
                    data.append("file" + i, files[i]);
                }
                var request = $.ajax({
                    url: "/api/fileupload/EnterPriseLogoUpload/" + cid,
                    type: "POST",
                    data: data,
                    contentType: false,
                    processData: false
                });

                request.done(function (msg) {
                    $("#log").html(msg);
                });

                request.fail(function (jqXHR, textStatus) {
                    alert("Request failed: " + textStatus);
                });

            } else {
                alert("This browser doesn't support HTML5 multiple file uploads!");
            }
        }
    }

    $(document).ready(function () {

        $('input#txtPassword').keyup(function () {            
            pswd = $(this).val();
            if (pswd.length < 8) {
                $('#length').removeClass('valid').addClass('invalid');
            } else {
                $('#length').removeClass('invalid').addClass('valid');
            }
            if (pswd.match(/[A-z]/)) {
                $('#letter').removeClass('invalid').addClass('valid');
            } else {
                $('#letter').removeClass('valid').addClass('invalid');
            }

            //validate capital letter
            if (pswd.match(/[A-Z]/)) {
                $('#capital').removeClass('invalid').addClass('valid');
            } else {
                $('#capital').removeClass('valid').addClass('invalid');
            }
            if (pswd.match(/\W/g)) {
                $('#special').removeClass('invalid').addClass('valid');
            } else {
                $('#special').removeClass('valid').addClass('invalid');
            }

            //validate number
            if (pswd.match(/\d/)) {
                $('#number').removeClass('invalid').addClass('valid');
            } else {
                $('#number').removeClass('valid').addClass('invalid');
            }
            $('#pswd_info').show();
        });

        //    .focus(function () {
        //    $('#pswd_info').show();
        //}).blur(function () {
        //    $('#pswd_info').hide();
        //});

        $("input#txtPassword").focus(function (e) {
            $('#pswd_info').show();
        });

        $("input#txtPassword").focusout(function (e) {
            $('#pswd_info').hide();
        });

        $("input#txtPassword").click(function (e) {
            $('#pswd_info').show();
        });

    });
</script>
