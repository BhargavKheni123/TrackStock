@model eTurns.DTO.UserMasterDTO
@{
    //Layout = "~/Views/Shared/_PopupMaster.cshtml";
    List<UserTypeInfo> lstUserTypes = new List<UserTypeInfo>();
    UserTypeInfo objUserTypeInfo;
    if (eTurnsWeb.Helper.SessionHelper.RoleID == -1)
    {
        objUserTypeInfo = new UserTypeInfo();
        objUserTypeInfo.UserType = 1;
        objUserTypeInfo.UserTypeName = "Super admin";
        lstUserTypes.Add(objUserTypeInfo);

    }
    if (eTurnsWeb.Helper.SessionHelper.UserType == 1 || (eTurnsWeb.Helper.SessionHelper.UserType == 2 && eTurnsWeb.Helper.SessionHelper.RoleID == -2))
    {
        objUserTypeInfo = new UserTypeInfo();
        objUserTypeInfo = new UserTypeInfo();
        objUserTypeInfo.UserType = 2;
        objUserTypeInfo.UserTypeName = "Enterprise admin";
        lstUserTypes.Add(objUserTypeInfo);
    }
    objUserTypeInfo = new UserTypeInfo();
    objUserTypeInfo.UserType = 3;
    objUserTypeInfo.UserTypeName = "Company admin";
    lstUserTypes.Add(objUserTypeInfo);
}
<div class="userListingWrapper">
    <h2 style="padding: 0% 0 0 3%;">
        User Profile-<span> @Html.DisplayFor(t => t.UserType)</span>
    </h2>
    @*<div class="Infoclass">
        <a href="~/Uploads/HelpDoc/InventoryLocation.pdf" target="_blank">
            <img src="~/Content/images/Info.png" alt="Help" />
        </a>
    </div>*@
    <div class="userHead">
        @{
            bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
            bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
            bool DisableControl = false;
            if (Model != null && Model.ID == eTurnsWeb.Helper.SessionHelper.UserID)
            {
                DisableControl = true;
            }
        }
        @using (Ajax.BeginForm("UserProfile", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmUser" }))
        {
            @Html.AntiForgeryToken()
            <div class="mainForm" style="padding: 0% 0 0 0%;">
                @Html.Hidden("hdnDisableControl", DisableControl)
                <div class="editorForm">
                    <ul>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.UserType)
                            </div>
                            <div class="editor-field">
                                @Html.HiddenFor(t => t.UserType)
                                
                                @Html.DropDownListFor(t => t.UserType, new SelectList(lstUserTypes, "UserType", "UserTypeName"), new { @class = "selectBox", @id = "drpUserType", @disabled = "disabled" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UserType)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.UserName)<em> *</em>
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.UserName, new { id = "txtUserName", @class = "text-box", maxlength = 128 })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UserName)</span>
                                @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                                @Html.HiddenFor(model => model.GUID)
                                @Html.HiddenFor(model => model.Created)
                                @Html.HiddenFor(model => model.Updated)
                                @Html.HiddenFor(model => model.CreatedBy)
                                @Html.HiddenFor(model => model.LastUpdatedBy)
                                @Html.HiddenFor(model => model.CompanyID)
                                @Html.HiddenFor(model => model.Room)
                                @Html.HiddenFor(model => model.RoomName)
                                @Html.HiddenFor(model => model.CreatedByName)
                                @Html.HiddenFor(model => model.UpdatedByName)
                                @Html.HiddenFor(model => model.IsDeleted)
                                @Html.HiddenFor(model => model.IsArchived)
                                @Html.HiddenFor(model => model.RoleID, new { id = "hdnRoleID" })
                                @Html.HiddenFor(model => model.SelectedModuleIDs, new { id = "hdnSelectedModuleList" })
                                @Html.HiddenFor(model => model.SelectedNonModuleIDs, new { id = "hdnSelectedNonModuleList" })
                                @Html.HiddenFor(model => model.SelectedDefaultSettings, new { id = "hdnSelectedDefaultSettings" })
                                @Html.HiddenFor(model => model.SelectedRoomAccessValue, new { id = "hdnSelectedRoomAccessValue" })
                                @Html.HiddenFor(model => model.SelectedRoomReplanishmentValue, new { id = "hdnSelectedRoomReplanishmentValue" })
                                @Html.HiddenFor(model => model.SelectedEnterpriseAccessValue, new { id = "hdnSelectedEnterpriseAccessValue" })
                                @Html.HiddenFor(model => model.SelectedCompanyAccessValue, new { id = "hdnSelectedCompanyAccessValue" })
                            </div>
                        </li>
                        @*<li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Password)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.PasswordFor(model => model.Password, new { id = "txtPassword", @class = "text-box", maxlength = 50 })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Password)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ConfirmPassword)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.PasswordFor(model => model.ConfirmPassword, new { id = "txtConfirmPassword", @class = "text-box", maxlength = 50 })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ConfirmPassword)</span>
                                </div>
                            </li>*@
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Phone)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Phone, new { id = "txtPhone", @class = "text-box", maxlength = 50 })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Phone)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Email)<em> *</em>
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Email, new { id = "txtEmail", @class = "text-box", maxlength = 50 })
                                @*@Html.HiddenFor(t => t.Email)*@
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Email)</span>
                            </div>
                        </li>
                        @* <li>
                                <div class="editor-label">
                                    @ResUserMaster.Role
                                </div>
                                <div class="editor-field">
                                    <select id="ddlRole" name="example-basic" size="1" class="text-box" style="width: 250px;">
                                    </select>
                                </div>
                            </li>*@
                        <li>
                            <div class="editor-label">
                                &nbsp;
                            </div>
                            <div class="BtnBlockform">
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                                <input type="button" value="Change Password" id="btnChangePass" class="CreateBtn" />
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        }
    </div>
</div>
<script type="text/javascript">
    //--------- Variables ----------

    var hdnSelectedRoomReplanishmentValue = $("#hdnSelectedRoomReplanishmentValue");
    var hdnSelectedRoomAccessValue = $("#hdnSelectedRoomAccessValue");
    var hdnRoleID = $("#hiddenID")

    var SelectedModuleList = new Array();
    var SelectedNonModuleList = new Array();
    var SelectedDefaultSettings = new Array();
    var SelectedRooms = new Array();

    var hdnSelectedModuleList = $("#hdnSelectedModuleList");
    var hdnSelectedNonModuleList = $("#hdnSelectedNonModuleList");
    var hdnSelectedDefaultSettings = $("#hdnSelectedDefaultSettings");

    var ddlDefaultPermissionRooms = $("#ddlDefaultPermissionRooms");
    var hdnCurrentSelectedRoom = 0;  //= $("#hdnCurrentSelectedRoom");
    var AllowDeletePopup = false;

    //--------- ----------
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmUser");
        if ($(this).valid()) {
        }
        e.preventDefault();
    });


    function onSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            clearControls('frmUser');
            ClearAllRolesDropdown();

            $('input:checkbox').removeAttr('checked');
            // $("#txtDescription").val("");

            $("#txtUserName").val("");
            $("#txtUserName").focus();
        }
        else if (idValue == 0) {
            //clearControls('frmRole');
            $("#txtUserName").val("");
            $("#txtUserName").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                clearControls('frmUser');
                ClearAllRolesDropdown();
            }
        }
        else if (idValue > 0) {

            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#txtUserName").focus();
            }
            else {
                //                clearControls('frmUser');
            }
        }
    }

    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#txtUserName").focus();
    }


    $(document).ready(function () {
        $("#btnChangePass").click(function () {
            location.href = "/Master/ChangePassword";

        });
    });
</script>
