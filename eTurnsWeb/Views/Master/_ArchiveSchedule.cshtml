@model eTurns.DTO.ArchiveScheduleDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Notifications, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Notifications, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    List<SelectListItem> TimeBaseUnits = new List<SelectListItem>();
    //TimeBaseUnits.Add(new SelectListItem() { Text = "", Value = "" });
    TimeBaseUnits.Add(new SelectListItem() { Text = eTurns.DTO.Resources.ResCommon.Days, Value = Convert.ToString((int)TimebasedScheduleFreq.Days) });
    TimeBaseUnits.Add(new SelectListItem() { Text = eTurns.DTO.Resources.ResCommon.Weeks, Value = Convert.ToString((int)TimebasedScheduleFreq.Weeks) });
    TimeBaseUnits.Add(new SelectListItem() { Text = eTurns.DTO.Resources.ResCommon.Months, Value = Convert.ToString((int)TimebasedScheduleFreq.Months) });
    TimeBaseUnits.Add(new SelectListItem() { Text = eTurns.DTO.Resources.ResCommon.Years, Value = Convert.ToString((int)TimebasedScheduleFreq.Years) });
}
            @using (Ajax.BeginForm("DataArchivalSave", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", OnBegin = "onBegin", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmDataArchive" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @Html.HiddenFor(model => model.ScheduleID)
                <div class="userHead">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ModuleId)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.ModuleId, new SelectList(ViewBag.Modules, "ID", "Text", Model.ModuleId), new { @class = "selectBox", @id = "dlModule" })
                                    @*<span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Module)</span>*@

                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Duration)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    <fieldset id="divTimebased">
                                        @Html.TextBoxFor(model => model.Duration, new { @class = "text-box numericinput", @style = "width:30px;" })
                                        @Html.DropDownListFor(model => model.DurationType, TimeBaseUnits, new { @class = "selectBox" })

                                        @*@Html.HiddenFor(model => model.RecurringDays)*@
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Duration)</span>
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DurationType)</span>
                                    </fieldset>
                                    @*@Html.TextBoxFor(model => model.Year, new { @class = "numericinput", @autocomplete = "off",@style = "width:15%", @placeholder="Year" })
                                        @Html.TextBoxFor(model => model.Month, new { @class = "numericinput", @autocomplete = "off", @style = "width:15%", @placeholder = "Month" })
                                        @Html.TextBoxFor(model => model.Day, new { @class = "numericinput", @autocomplete = "off", @style = "width:15%", @placeholder = "Days" })
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Year)</span>*@
                                </div>

                            </li>
                            <li>
                                <div id="dvParams">
                                    @Html.Partial("_ArchiveScheduleInfo", Model)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    &nbsp;
                                </div>
                                <div class="BtnBlockform" style="padding-left:50px;padding-top:20px;float:none;">
                                    @if ((Model.ScheduleID <= 0 && isInsert) || (Model.ScheduleID > 0 && isUpdate))
                                    {
                                        <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                                    }
                                    @*@Html.HiddenFor(model => model.ScheduleID)*@
                                </div>
                            </li>
                        </ul>
                    </div>

                </div>
            }
        
<script>
    
    $("#frmDataArchive").submit(function (e) {

        $.validator.unobtrusive.parse("#frmDataArchive");
        e.preventDefault();
    });
    
    function onSuccess(response) {

        if (response !== undefined && response != null && response.Message != undefined && response.Message != null)
        {
            IsRefreshGrid = true;
            showNotificationDialog();
            $("#spanGlobalMessage").text(response.Message);
            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');

            if (response.Status !== undefined && response.Status != null && response.Status == "ok")
            {
                SwitchTextTab(0, 'CreateArchiveSchedule', 'frmDataArchive');
            }
            else if (response.Status !== undefined && response.Status != null && response.Status == "fail")
            {
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            }
            else if (response.Status !== undefined && response.Status != null && response.Status == "duplicate")
            {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            }                
        }        
    }

    function onFailure(message) {
        //$("#spanGlobalMessage").text(message.NotificationSave);
        //$("#spanGlobalMessage").text(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        //$("#ScheduleName").focus();
    }

    function onBegin() {

    }
</script>
