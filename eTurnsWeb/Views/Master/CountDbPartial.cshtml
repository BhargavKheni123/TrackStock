@{
    var Count_settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DataTableName = "myCountDataTable", ListViewhref = "", PictureViewhref = "", DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "DashboardCountDataTable", DisplayDeleteButton = false, DisplayGoToPage = false, ShowReorder = true, ReorderByDataTableName = true, ExportModuleName = "Inventory Count", ExportDashboardFromReportFile = true };
    Session["IsInsert"] = "";
    eTurns.DAL.InventoryCountDetailDAL objInventoryCountDetailDAL = new eTurns.DAL.InventoryCountDetailDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    Int32 InventoryItemCount = objInventoryCountDetailDAL.GetUnAppliedInventoryDetailItemCount(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID);
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL))
{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Dashboard/CountDBPartialBS.css")" />
}
else
{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Dashboard/CountDBPartial.css")" />
}

<div style="float: left; width: 100%;">
    <div id="dvmainCount" class="Lnavd">
        <ul>
            <li class="imgclassd">
                <a id="lnkTransferCount" style="display: none;" title="Inventory Count"
                   class="lia">
                    @eTurns.DTO.Resources.ResLayout.Count
                </a>
            </li>
        </ul>
    </div>
    <div id="divMainCountTab" style="float: left; width: 100%;">
        <div id="divCountTab" class="Lnavd" style="float: left; width: 80%; padding-top: 10px;">
            <ul>
                <li class="imgclassd">
                    <a id="lnkInventoryCount" title="Inventory Count" onclick="AddRemoveInventorycountCSS()"
                       class="lia">@eTurns.DTO.ResDashboard.TitleInventoryCount</a>@if (InventoryItemCount != 0)
                    {<span>@InventoryItemCount</span>}
                </li>
            </ul>
        </div>
        <div class="viewBlock gridchartclass" style="margin-top: -10px;">
            <span class="label">View:</span> <a class="view" href="javascript:void(0);" onclick="ShowHideCountDiv('Chart');">
                <img alt="" id="imgTChart" src="/content/images/chart-view-active.png">
            </a>
            <a class="view clsLoadGraph" href="javascript:void(0);" onclick="ShowHideCountDiv('Grid');">
                <img alt="" id="imgTGrid" src="/content/images/list-view-inactive.png">
            </a>
        </div>
        <div style="float: left; padding-top: 4px; display: none;">
            <ul>
                <li style="border-right: none; float: left; padding-right: 5px;">
                    <label style="float: left; padding: 1.3% 2px;">
                        @Html.Label("Order date range")
                    </label>
                    @Html.TextBox("txtCountFromDate", "1/1/" + eTurns.DAL.DateTimeUtility.DateTimeNow.Year, new { @class = "importtext-box", id = "txtCountFromDate", @readonly = "readonly", @style = "width:70px;background:white", maxlength = 128 })
                </li>
                <li style="border-right: none; float: left; padding-right: 5px;">
                    <label style="float: left; padding: 1.3% 2px;">
                        @Html.Label("To")
                    </label>
                    @Html.TextBox("txtCountToDate", eTurns.DAL.DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy"), new { @class = "importtext-box", id = "txtCountToDate", @readonly = "readonly", @style = "width:70px;background:white", maxlength = 128 })
                    @Html.Hidden("hdnstatusCount", new { id = "hdnstatusCount" })
                </li>
                <li style="border-right: none; float: left; padding-right: 5px;">
                    <div class="BtnBlockform" style="margin: 0 0 0 5px;">
                        <input type="button" value="GO" id="btnCountgo" name="btnCountgo" class="CreateBtn"
                               style="float: left;" />
                    </div>
                </li>
            </ul>
        </div>
        <div id="Ttab" class="tabContener">
            <div id="dvCountGrid" class="userContent" style="float: left; width: 100%;">
                <div id="divCartOrderTab" class="Lnavd" style="float: left; width: 98%; padding-top: 10px;">
                    @Html.GridTopHeader(Count_settings, eTurnsWeb.Helper.SessionHelper.ModuleList.DashboardCountDataTable)
                </div>
                <div class="searchWrapper">
                    <div class="searchBlock">
                        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                        <div class="searchinputB">
                            <input type="text" class="searchinput" id="global_filterInventoryCount" />
                            <a href="javascript:void(0);" class="xclose">
                                <img src="~/Content/images/x.png" alt="X" id="clear_global_filterDashCount" />
                            </a>
                        </div>
                    </div>
                </div>
                <div class="userHead" style="height: 30px;">
                </div>
                <table id="myCountDataTable" class="display" style="width: 561px; overflow: auto;">
                    <thead>
                        <tr>
                            <th>
                                @ResDashboard.CountID
                            </th>
                            <th>
                                @ResDashboard.CountName
                            </th>
                            <th>
                                @ResDashboard.CountType
                            </th>
                            <th>
                                @ResDashboard.CountStatus
                            </th>
                            <th>
                                @ResDashboard.NoofCount
                            </th>
                            <th>
                                @ResInventoryCount.CountDate
                            </th>
                            <th>
                                @ResInventoryCount.CountItemDescription
                            </th>
                            <th>
                                @ResInventoryCount.IsApplied
                            </th>
                            <th>
                                @ResInventoryCount.IsClosed
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.LastUpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                            </th>
                            @Html.RenderColumnsHeader("InventoryCount", typeof(eTurns.DTO.ResInventoryCount))
                        </tr>
                    </thead>
                </table>
            </div>
            <div id="dvCountChart" style="float: left; width: 100%;">
            </div>
        </div>
    </div>
</div>
<script language="javascript" type="text/javascript">
    var oTableInventoryCount;
    var oTransferTable;
    var AllowDeletePopup = true;

    var objColumnsMyCountDataTable = {}
    $(document).ready(function () {
        objColumnsMyCountDataTable = GetGridHeaderColumnsObject('myCountDataTable');

        $("#divMainOrderTab").show();
        $("#divMainTransferTab").hide();
        $("#dvOrderGrid").hide();
        $("#dvOrderChart").show();
        $("#dvTransferGrid").hide();
        $("#dvTransferChart").show();
        $('#txtOrderFromDate').blur(function () { }).datepicker({ dateFormat: 'm/d/yy' });
        $('#txtOrderToDate').blur(function () { }).datepicker({ dateFormat: 'm/d/yy' });
        $('#txtTransferFromDate').blur(function () { }).datepicker({ dateFormat: 'm/d/yy' });
        $('#txtTransferToDate').blur(function () { }).datepicker({ dateFormat: 'm/d/yy' });
        $("#global_filterInventoryCount").val("");
        $("#global_filterDashTransfer").val("");
        $("#lnkOrder").removeClass("lava");
        $("#lnkOrder").addClass("liahover");
        $("#lnkInventoryCount").removeClass("lava");
        $("#lnkInventoryCount").addClass("liahover");
        $("#hdnstatusOrder").val("Unsubmitted"); // Not Approved

        //GenerateCountGrid();
        //$('.DTTT_container').css('z-index', '-1');
        //fnFilterInventorylistList('');

        $("#lnkTransferCount").removeClass("liahover");
        $("#lnkTransferCount").addClass("lava");
        $("#lnkTransfernotsubmitted").removeClass("lava");
        $("#lnkTransfernotsubmitted").addClass("liahover");
        $("#hdnstatusTransfer").val("Unsubmitted");
        //$('#dvCountChart').empty();
        //$('#dvCountChart').load('/InventoryCountChart/LoadChart', function () { });
        ShowHideCountDiv('Chart');
        _Common.setGloblaSearch('global_filterInventoryCount', 'myCountDataTable');

        $('#clear_global_filterDashCount').die('click');

        $("#clear_global_filterDashCount").live('click', function () {
            $("#global_filterInventoryCount").val('');
            fnFilterInventoryCountGlobal();
            $("#global_filterInventoryCount").focus();
            return false;
        });
    });

    function ShowHideCountDiv(str) {
        if (str == 'Grid') {
            $("#global_filterInventoryCount").val("");
            $('#dvOrderGrid').find('[id^="global_filter"]')[0].value = "";
            $('#myCountDataTable').dataTable().fnFilter('', null, null, null)
            $("#dvCountGrid").show();
            $("#dvCountChart").hide();
            ChangeImgSRC('Grid', 'imgOGrid', 'imgOChart');

            if (oTableInventoryCount === undefined || oTableInventoryCount == null || dashboardReorder == true) {
                dashboardReorder = false;
                GenerateCountGrid();
                $('.DTTT_container').css('z-index', '-1');
            }
            else {
                oTableInventoryCount.fnDraw();
            }
        }
        else {
            $("#dvCountGrid").hide();
            $("#dvCountChart").show();
            ChangeImgSRC('Chart', 'imgOGrid', 'imgOChart');
            $('#dvCountChart').empty();
            $('#dvCountChart').load('/InventoryCountChart/LoadChart', function () { });
        }
    }

    function AddRemoveInventorycountCSS() {
        $("#lnkInventoryCount").removeClass("lava");
        $("#lnkInventoryCount").addClass("liahover");
    }

    /* Global filter JS */
    var timeoutsc1;
    $('#global_filterInventoryCount').bind('propertychange input', function () {
        clearTimeout(timeoutsc1);
        timeoutsc1 = setTimeout(function () {
            fnFilterInventoryCountGlobal();
        }, 200);
    });

    $("#global_filterInventoryCount").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);

        if (code == 13) {
            var searchtext = $("#global_filterInventoryCount").val().replace(/'/g, "''");
            fnFilterInventorylistList(searchtext);
            return false;
        }
        return true;
    });

    function fnFilterInventorylistList(searchtext) {
        $('#myCountDataTable').dataTable().fnFilter(searchtext, null, null, null);
        //alert(searchtext);
        $('#myCountDataTable' + ' td').removeHighlight();
        if (searchtext.length > 0)
            $('#myCountDataTable' + ' td').highlight(searchtext);
    }
    /* Global filter JS */

    function fnFilterInventoryCountGlobal() {
        if (typeof $("#global_filterInventoryCount") != 'undefined' && ($("#global_filterInventoryCount").val().length > 2 || $("#global_filterInventoryCount").val().length == 0)) {
            var searchtext = $("#global_filterInventoryCount").val().replace(/'/g, "''");
            fnFilterInventorylistList(searchtext);
        }
        else {
            $('#myCountDataTable td').removeHighlight();
            $('#myCountDataTable td').highlight($("#global_filterInventoryCount").val());
        }
    }

    function GenerateCountGrid() {
        oTableInventoryCount = $('#myCountDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "bAutoWidth": false,
            //"sScrollX": "150%",
            "sScrollX": "100%",
            "sDom": 'R<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[1, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bDestroy": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData) {
                if ($(aData.IsDeleted).text() == 'Yes' && $(aData.IsArchived).text() == 'Yes')
                    nRow.className = "GridDeleatedArchivedRow";
                else if ($(aData.IsDeleted).text() == 'Yes')
                    nRow.className = "GridDeletedRow";
                else if ($(aData.IsArchived).text() == 'Yes')
                    nRow.className = "GridArchivedRow";

                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                //if (PostCount > 1) {
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'DashboardCountDataTable' },
                    "async": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
                //}
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'DashboardCountDataTable' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("InventoryCountMasterListAjax", "InventoryDashboard")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                //PostCount = PostCount + 1;
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                //if (oSettings.aaSorting.length != 0)
                //    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                //else
                //    aoData.push({ "name": "SortingField", "value": "0" });

                if (oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];

                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                else
                    aoData.push({ "name": "SortingField", "value": "0" });


                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        //$('#myCountDataTable td').removeHighlight();
                        removeHighlight2('myCountDataTable');
                        $('#myCountDataTable_wrapper .dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('#myCountDataTable_wrapper .dataTables_scroll').css({ "opacity": 1 });
                        if ($("#global_filterInventoryCount").val() != '') {
                            $('#myCountDataTable td').highlight($("#global_filterInventoryCount").val());
                        }

                        $('#myCountDataTable tbody tr').unbind("click");
                        $('#myCountDataTable tbody tr').click(function (e) {
                            DataTableTRClickToSelect(this, e);
                        });

                        CallShowHideData();
                        //                            if ($("#txtOrderFilter").val() != '') {
                        //                                $('#myCountDataTable td').highlight($("#txtOrderFilter").val());
                        //                            }
                    }
                });
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
                //GenerateTransferGrid();
            },
            "aoColumns": [
                            {
                                "mDataProp": "ID",
                                "sClass": "read_only",
                                "sDefaultContent": '',
                                "bSortable": true,
                                "bSearchable": false,
                                "fnRender": function (obj, val) {
                                    //return "" + obj.aData.MaintenanceName + "";
                                    return obj.aData.ID +
                                           "<input type='hidden' id='hdnExportId' value='" + obj.aData.GUID + "' />";
                                }
                            },
                            { "mDataProp": "CountName", "sClass": "read_only" },
                            { "mDataProp": "CountType", "sClass": "read_only" },
			                { "mDataProp": "CountStatus", "sClass": "read_only" },
                            {
                                "mDataProp": "inventorycount", "sClass": "read_only", "fnRender": function (obj, val) {
                                    if (obj.aData.inventorycount != null && obj.aData.inventorycount != NaN)
                                        return obj.aData.inventorycount;
                                    else
                                        return 0;
                                }
                            },
                            { "mDataProp": "CountDate", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.CountDateDisplay ;} },
                            { "mDataProp": "CountItemDescription", sClass: "read_only" },
                            { "mDataProp": "IsApplied", sClass: "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } },
                            { "mDataProp": "IsClosed", sClass: "read_only", "fnRender": function (obj, val) { return GetBoolInFormat(obj, val); } },
                            { "mDataProp": "Created", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.CreatedDate ; } },
                            { "mDataProp": "Updated", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.UpdatedDate ; } },
                            { "mDataProp": "UpdatedByName", sClass: "read_only" },
                            { "mDataProp": "CreatedByName", sClass: "read_only" },
                            { "mDataProp": "AddedFrom", sClass: "read_only"},
                            { "mDataProp": "EditedFrom", sClass: "read_only"},
                            { "mDataProp": "ReceivedOn", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDate; } },
                            { "mDataProp": "ReceivedOnWeb", sClass: "read_only", fnRender: function (obj, val) { return obj.aData.ReceivedOnDateWeb; } },
                            @Html.RenderColumnsArray("InventoryCount", false)
                            //@Html.RenderColumnsArray("InventoryCountMaster")
            ]
        });
    }

</script>
