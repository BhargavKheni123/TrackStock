@model eTurns.DTO.UnitMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
@{
    bool isUpdate;
    bool isInsert;
    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
    }
    else
    {
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    }
    
    
}
@using (Ajax.BeginForm("SaveUnitData", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onUnitSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmUnit" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.ReceivedOnDateWeb)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.ReceivedOnDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.ReceivedOn)
                        </label>
                        : <span>@(Model.ReceivedOnDate)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Unit)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Unit, new { id = "UnitNew", @class = "text-box", maxlength = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Unit)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenUnitID" })
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.Created)
                        @Html.HiddenFor(model => model.Updated)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.LastUpdatedBy)
                        @Html.HiddenFor(model => model.CompanyID)
                        @Html.HiddenFor(model => model.Room)
                        @Html.HiddenFor(model => model.RoomName)
                        @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                        @Html.HiddenFor(model => model.IsDeleted)
                        @Html.HiddenFor(model => model.IsArchived)
                        @Html.HiddenFor(model => model.isForBOM)
                        @Html.HiddenFor(model => model.RefBomId)
                        @Html.HiddenFor(model => model.IsOnlyFromItemUI)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Description)
                    </div>
                    <div class="editor-field">
                        @Html.TextAreaFor(model => model.Description, new { @class = "text-box", maxlength = 1024 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Description)</span>
                    </div>
                </li>
                @* <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Odometer)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Odometer, new { @class = "text-box", maxlength = 128 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Odometer)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.OdometerUpdate)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.OdometerUpdate, new { @class = "text-box", @readonly = "readonly", @style = "background-color:silver" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.OdometerUpdate)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.OpHours)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.OpHours, new { @class = "text-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.OpHours)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.OpHoursUpdate)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.OpHoursUpdate, new { @class = "text-box", @readonly = "readonly", @style = "background-color:silver" })
                            @Html.ValidationMessageFor(model => model.OpHoursUpdate)
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Year)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Year, new { @class = "text-box", maxlength = 4 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Year)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Make)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Make, new { @class = "text-box", maxlength = 128 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Make)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Model)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Model, new { @class = "text-box", maxlength = 128 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Model)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Plate)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Plate, new { @class = "text-box", maxlength = 128 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Plate)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.SerialNo)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.SerialNo, new { @class = "text-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SerialNo)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EngineModel)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.EngineModel, new { @class = "text-box", maxlength = 128 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.EngineModel)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EngineSerialNo)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.EngineSerialNo, new { @class = "text-box", maxlength = 128 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.EngineSerialNo)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MarkupParts)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MarkupParts, new { @class = "text-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MarkupParts)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MarkupLabour)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MarkupLabour, new { @class = "text-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MarkupLabour)</span>
                        </div>
                    </li>*@
                @Html.Partial("UDFLayout", new eTurns.DTO.ResUnitMaster())
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnUnitCancel" class="CreateBtn" />
                        @if (isInsert == true && Model.ID == 0)
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == true)
                        {

                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == false && isInsert == false)
                        {
                            <script>
                                //This is the case when archived or deleted record is being viewed..
                                disableControls('frmUnit');
                                $('#btnUnitCancel').removeAttr('disabled');
                            </script>
                        }
                    </div>
                </li>
            </ul>
        </div>
    </div>
}
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmUnit");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
        $('#NarroSearchClear').click();
    });
</script>
<script language="javascript" type="text/javascript">

    function onUnitSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idUnitValue = $("#hiddenUnitID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#UnitNew").val("");
            $("#UnitNew").focus();
        }
        else if (idUnitValue == 0) {
            //$("#UnitNew").val("");
            $("#UnitNew").focus();
            //clearControls('frmUnit');
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0) {
                    $('#NewMasterPopUP').data("IDVal", response.NewIDForPopUp + '~' + $("#UnitNew").val()).dialog('close');
                }
                else {
                    clearControls('frmUnit');
                    setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                    //ShowNewTab('UnitCreate', 'frmUnit');
                    ShowNewTab('/Master/UnitCreate?isforbom=' + isForBom, 'frmUnit');
                }
            }
        }
        else if (idUnitValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#UnitNew").val("");
                $("#UnitNew").focus();
            }
            else {
                clearControls('frmUnit');
                SwitchTextTab(0, 'UnitCreate', 'frmUnit');
            }
        }
        $('#OdometerUpdate').val('@eTurns.DAL.DateTimeUtility.DateTimeNow');
        $('#OpHoursUpdate').val('@eTurns.DAL.DateTimeUtility.DateTimeNow');
    }
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#UnitNew").focus();
    }

    $(document).ready(function () {
        $('#UnitNew').keyup(function () {
            $(this).val($(this).val().toUpperCase());
        });
        $('form').areYouSure();
        $('#btnUnitCancel').click(function (e) {
            if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0)
                $('#NewMasterPopUP').dialog('close');
            else {
                SwitchTextTab(0, 'UnitCreate', 'frmUnit');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
            }
            $('#NarroSearchClear').click();
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
    });

    _Common.addRequiredSign();

</script>
