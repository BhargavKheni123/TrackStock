@model eTurns.DTO.ToolCategoryMasterDTO
<div class="userHead">
    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)
        <div class="BtnBlockform">
            <input type="button" value="Cancel" class="CreateBtn" />
            <input type="button" value="Save" id="btnSave" class="CreateBtn" />
        </div>
        
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.ToolCategory)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.ToolCategory, new { id = "txtToolCategoryName", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.ToolCategory)
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                @*        @Html.HiddenFor(model => model.RoomID, new { id = "hiddenRoomID" })
                        @Html.HiddenFor(model => model.LastUpdatedBy, new { id = "hiddenLastUpdatedBy" })
                        @Html.HiddenFor(model => model.CreatedBy, new { id = "hiddenCreatedBy" })*@
                    </div>
                </li>
            </ul>
        </div>
          <div class="rightside">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.RoomName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.RoomName, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.RoomName)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Created)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Created, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.Created)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.CreatedByName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.CreatedByName, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.CreatedByName)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Updated)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Updated, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.Updated)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.UpdatedByName, new { @disabled = "disabled", @class = "text-box" })
                        @Html.ValidationMessageFor(model => model.UpdatedByName)
                    </div>
                </li>
            </ul>
        </div>     
    }
</div>
<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        $(document).keyup(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                SaveToolCategoryData();
            }
        });
        $('#btnCancel').click(function (e) {
            SwitchTab(0);
        });
        $('#btnSave').click(function (e) {
            //CheckDuplicateCategory();
            SaveToolCategoryData();
        });
        function SaveToolCategoryData() {

            if ($("#atab1").prop("class") == "active") {
                if ($("#txtToolCategoryName").val() != '') {
                    var idValue = $("#hiddenID").val();
                    $.ajax({ 'url': '/Master/ToolCategorySave',
                        data: { ID: idValue, ToolCategory: $("#txtToolCategoryName").val() },
                        success: function (response) {
                            $('#spanGlobalMessage').text(response.Message);
                            $('div#target').fadeToggle();
                            $("div#target").delay(2000).fadeOut(200);
                            if (response.Status == "fail") {
                                $("#txtToolCategoryName").val("");
                                $("#txtToolCategoryName").focus();
                                return;
                            }
                            else if (idValue > 0)
                                SwitchTab(0);
                            else {
                                $("#txtToolCategoryName").val("");
                                $("#txtToolCategoryName").focus();
                                return;
                            }
                        }
                    ,
                        error: function (response) {
                            // through errror message
                        }
                    });
                }
                else
                    alert('Kindly add proper Tool Category name');
            }

        }
    });
    function CheckDuplicateCategory() {
        if ($("#txtToolCategoryName").val() != '') {

            var idValue = $("#hiddenID").val();
            var actionName = '';
            if (idValue > 0)
                actionName = 'edit';
            else
                actionName = 'add';

            $.ajax({ 'url': '/Master/DuplicateToolCategoryCheck',
                data: { CategoryName: $("#txtToolCategoryName").val(), ActionMode: actionName, ID: idValue },
                success: function (response) {
                    if (response == "duplicate") {
                        alert('duplicate record found, kindly add other name for Tool Category Name.');
                        $("#txtToolCategoryName").focus();
                        return;
                    }
                }
                    ,
                error: function (response) {
                    // through errror message
                }
            });
        }
    }
</script>
