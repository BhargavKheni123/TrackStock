@model eTurns.DTO.ChangePasswordDTO
@{
    ViewBag.Title = "Change Password";


    // System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(System.Web.Hosting.HostingEnvironment.MapPath("/SiteSettings.xml"));
    string ApplyChangePassword = eTurns.DTO.SiteSettingHelper.ApplyChangePassword; // Settinfile.Element("ApplyChangePassword").Value;
    string cValue = "111111";
    string strStyleDisplay = "style=display:none;";
    if (!string.IsNullOrEmpty(ApplyChangePassword) && ApplyChangePassword.ToLower() == "yes")
    {
        cValue = string.Empty;
        strStyleDisplay = string.Empty;
    }
    string PasswordRedirect = Url.Action("ChangePasswordDone", "Account");

    var cssPostfix = "";
    if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL))
    {
        cssPostfix = SiteSettingHelper.BorderStateDesignCssPostFix;
    }
}
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle"+cssPostfix+".css")" />
<script src="@Url.Content("~/Content/OpenAccess/sha1-min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/PageScripts/ResetLogin.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/OpenAccess/PageStyle/UserPage"+cssPostfix+".css")" />
<style>
    #pswd_info, #Cpswd_info {
        left: 37% !important;
        top: 20.5% !important;
    }
</style>
@section head{
    <script type="text/javascript">
        var pswd = '';
        var Cpswd = '';
    $(document).ready(function () {
        var ModelUserID = '@Model.ID'
        jQuery.validator.addMethod('passwordrequired', function (value, element, params) {
            if (ModelUserID < 1)
                return false;
            else
                return true;
        }, '');
        jQuery.validator.unobtrusive.adapters.add('passwordrequired', {}, function (options) {

            options.rules['passwordrequired'] = true;
            options.messages['passwordrequired'] = options.message;

        });
        $("#btnsave").click(function () {
            var retval = checkpass("txtNewPassword");
            if (retval == false) {

            }
        });

        $("#frmUserChangePass").submit(function (e) {

            $.validator.unobtrusive.parse("#frmUserChangePass");

            if ($(this).valid()) {
                //$("#txtCurrentPassword").val(hex_sha1($("#txtCurrentPassword").val()));
                //$("#txtNewPassword").val(hex_sha1($("#txtNewPassword").val()));
                //$("#txtConfirmPassword").val(hex_sha1($("#txtConfirmPassword").val()));
            }

        });
        $('input#txtNewPassword').keyup(function () {

            pswd = $(this).val();
            if (pswd.length < 8) {
                $('#length').removeClass('valid').addClass('invalid');
            } else {
                $('#length').removeClass('invalid').addClass('valid');
            }
            if (pswd.match(/[a-z]/)) {
                $('#letter').removeClass('invalid').addClass('valid');
            } else {
                $('#letter').removeClass('valid').addClass('invalid');
            }

            //validate capital letter
            if (pswd.match(/[A-Z]/)) {
                $('#capital').removeClass('invalid').addClass('valid');
            } else {
                $('#capital').removeClass('valid').addClass('invalid');
            }
            if (pswd.match(/\W/g)) {
                $('#special').removeClass('invalid').addClass('valid');
            } else {
                $('#special').removeClass('valid').addClass('invalid');
            }

            //validate number
            if (pswd.match(/\d/)) {
                $('#number').removeClass('invalid').addClass('valid');
            } else {
                $('#number').removeClass('valid').addClass('invalid');
            }
            $('#pswd_info').show();
        }).focus(function () {
            $('#pswd_info').show();
        }).blur(function () {
            $('#pswd_info').hide();
        });
        $('input#txtConfirmPassword').keyup(function () {

            Cpswd = $(this).val();
            if (Cpswd.length < 8) {
                $('#Clength').removeClass('valid').addClass('invalid');
            } else {
                $('#Clength').removeClass('invalid').addClass('valid');
            }
            if (Cpswd.match(/[a-z]/)) {
                $('#Cletter').removeClass('invalid').addClass('valid');
            } else {
                $('#Cletter').removeClass('valid').addClass('invalid');
            }

            //validate capital letter
            if (Cpswd.match(/[A-Z]/)) {
                $('#Ccapital').removeClass('invalid').addClass('valid');
            } else {
                $('#Ccapital').removeClass('valid').addClass('invalid');
            }
            if (Cpswd.match(/\W/g)) {
                $('#Cspecial').removeClass('invalid').addClass('valid');
            } else {
                $('#Cspecial').removeClass('valid').addClass('invalid');
            }

            //validate number
            if (Cpswd.match(/\d/)) {
                $('#Cnumber').removeClass('invalid').addClass('valid');
            } else {
                $('#Cnumber').removeClass('valid').addClass('invalid');
            }
            $('#Cpswd_info').show();
        }).focus(function () {
            $('#Cpswd_info').show();
        }).blur(function () {
            $('#Cpswd_info').hide();
        });
    });
        $("input#txtNewPassword").focus(function (e) {
            $('#pswd_info').show();
        });
        $("input#txtNewPassword").focusout(function (e) {
            $('#pswd_info').hide();
        });

        $("input#txtNewPassword").click(function (e) {
            $('#pswd_info').show();
        });
        //confirmpassword
        $("input#txtConfirmPassword").focus(function (e) {
            $('#Cpswd_info').show();
        });
        $("input#txtConfirmPassword").focusout(function (e) {
            $('#Cpswd_info').hide();
        });

        $("input#txtConfirmPassword").click(function (e) {
            $('#Cpswd_info').show();
        });
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#txtUserName").focus();
    }
    function onSuccess(response) {
        if (response.Message == "ok") {
            window.location = '@PasswordRedirect';
        }
        else if (response.Message == "wrngpsw") {
            alert('@eTurns.DTO.Resources.ResMessage.OldPasswordInvalid');
                $("#txtCurrentPassword").val("");
                $("#txtNewPassword").val("");
                $("#txtConfirmPassword").val("");
                return false;
            }
        else if (response.Message == '@eTurns.DTO.Resources.ResMessage.RepeatPassword') {
                alert('@ResLoginForms.repeatpwd');
                $("#txtCurrentPassword").val("");
                $("#txtNewPassword").val("");
                $("#txtConfirmPassword").val("");
                return false;
        }
        else if (response.Message == 'strongpassword') {
            alert(response.StrongPassword);
            $("#txtCurrentPassword").val("");
            $("#txtNewPassword").val("");
            $("#txtConfirmPassword").val("");
            return false;
        }
        }

        function OnBegin(response) {


        }
        function validateData() {

            var oldpassword = $("#txtoldpassword").val();
            var newpassword = $("#txnewpassword").val();
            var confirmpassword = $("#txtconfirmpassword").val();
            if (oldpassword == "") {
                alert("Please enter old password.");
                return false;
            }
            else if (newpassword == "") {
                alert("Please enter new password.");
                return false;
            }
            else if (confirmpassword == "") {
                alert("Please enter confirm password.");
                return false;
            }
            else if (newpassword != confirmpassword) {
                alert("New password and confirm password not match.");
                return false;
            }
            return true;
        }

    </script>
}

<div class="userListingWrapper">
    <h2 style="padding: 0px;">
        Change Password
    </h2>
    @using (Ajax.BeginForm("SaveChangePassword", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnBegin = "OnBegin", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmUserChangePass" }))
    {
        @Html.AntiForgeryToken()
        <div class="mainForm">

            <div class="editorForm">

                <ul>
                    <li style="width:75% !important;">
                        <b>Note:Password must contain one capital, one small, one numeric and one special character(@@#$%) and be 8-20 in length</b>
                    </li>
                    <li @strStyleDisplay>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.CurrentPassword)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.PasswordFor(model => model.CurrentPassword, new { id = "txtCurrentPassword", @class = "text-box", @maxlength = "50", value = cValue })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.CurrentPassword)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.FirstPassword)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.PasswordFor(model => model.FirstPassword, new { id = "txtNewPassword", @class = "text-box" })
                            <div id="pswd_info" class="pswd_info">
                                <h4>Password must meet the following requirements:</h4>
                                <ul class="password">
                                    <li id="letter" class="invalid">At least <strong>one letter</strong></li>
                                    <li id="capital" class="invalid">At least <strong>one capital letter</strong></li>
                                    <li id="number" class="invalid">At least <strong>one number</strong></li>
                                    <li id="special" class="invalid">Be at least <strong>one special letter</strong></li>
                                    <li id="length" class="invalid">Be at least <strong>8 characters</strong></li>
                                </ul>
                            </div>
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.FirstPassword)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ConfirmPassword)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.PasswordFor(model => model.ConfirmPassword, new { id = "txtConfirmPassword", @class = "text-box" })
                            <div id="Cpswd_info" class="Cpswd_info">
                                <h4>Confirm Password must meet the following requirements:</h4>
                                <ul class="password">
                                    <li id="Cletter" class="invalid">At least <strong>one letter</strong></li>
                                    <li id="Ccapital" class="invalid">At least <strong>one capital letter</strong></li>
                                    <li id="Cnumber" class="invalid">At least <strong>one number</strong></li>
                                    <li id="Cspecial" class="invalid">Be at least <strong>one special letter</strong></li>
                                    <li id="Clength" class="invalid">Be at least <strong>8 characters</strong></li>
                                </ul>
                            </div>
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ConfirmPassword)</span>
                        </div>
                    </li>
                    <li>
                        <input type="submit" style="float: left; margin-left: 201px; width: 68px;" value="@ResCommon.Save"
                               id="btnsave" class="btnGeneral" name="btnsave" />
                        @Html.HiddenFor(model => model.ID)
                    </li>
                </ul>

            </div>
        </div>
    }
    @*<div class="userListBlock">
            <div id="Ctab" class="tabContener" style="width: 99%; text-align:justify;">

                <div style="float:left; width:50%; margin:10px;" class="editor-field">
                    <label>Old Password</label>
                    <input class="text-box" type="password" id="txtoldpassword" name="txtoldpassword" />
                </div>
                <div style="float: left; width: 50%; margin: 10px;" class="editor-field">
                    <label>New Password</label>
                    <input class="text-box" type="password" id="txnewpassword" name="txnewpassword" />
                </div>
                <div style="float: left; width: 50%; margin: 10px;" class=" editor-field">
                    <label>Confirm Password</label>
                    <input class="text-box" type="password" id="txtconfirmpassword" name="txtconfirmpassword" />
                </div>
                <div style="float:left; width:98%; margin:10px;">
                    <input type="button" value="Save" id="btnsave" class="btnGeneral" name="btnsave" />
                </div>

            </div>
        </div>*@
</div>
