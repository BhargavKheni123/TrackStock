@model eTurns.DTO.SupplierMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    SchedulerDTO objSchedulerDTO = new SchedulerDTO();
    QuoteSchedulerDTO objSchedulerQuoteDTO = new QuoteSchedulerDTO();
    bool isUpdate;
    bool isInsert;
    bool IsInsertSupplierAccount = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierAccountDetail, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    //bool HaveCreateOrderRight = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Orders, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    bool IsRoomLevelReleaseNumberEditable = ViewBag.IsOrderReleaseNumberEditable;
    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
    }
    else
    {

        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.SupplierMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    }

    if (Model != null)
    {
        eTurns.DAL.RegionSettingDAL objRegionSettingDAL = new eTurns.DAL.RegionSettingDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
        objSchedulerDTO = new eTurns.DAL.SupplierMasterDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetRoomSchedule(Model.ID, eTurnsWeb.Helper.SessionHelper.RoomID, 2);

        if (objSchedulerDTO == null)
        {
            objSchedulerDTO = new SchedulerDTO();
            objSchedulerDTO.SupplierId = Model.ID;
            objSchedulerDTO.LoadSheduleFor = 2;
            objSchedulerDTO.RoomId = eTurnsWeb.Helper.SessionHelper.RoomID;
        }
        else
        {

            objSchedulerDTO.NextRunDateTime = eTurnsWeb.Helper.CommonUtility.ConvertDateByTimeZone(objSchedulerDTO.NextRunDate, eTurnsWeb.Helper.SessionHelper.CurrentTimeZone, eTurnsWeb.Helper.SessionHelper.DateTimeFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture, true);
            //objSchedulerDTO.ScheduleRunTime = (eTurnsWeb.Helper.CommonUtility.ConvertDateByTimeZonedt(objSchedulerDTO.ScheduleRunDateTime, eTurnsWeb.Helper.SessionHelper.CurrentTimeZone, eTurnsWeb.Helper.SessionHelper.DateTimeFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture) ?? DateTime.MinValue).ToString("HH:mm");
            objSchedulerDTO.ScheduleRunTime = objSchedulerDTO.ScheduleTime.HasValue ? objSchedulerDTO.ScheduleTime.Value.ToString(@"hh\:mm") : "00:00";
            //objSchedulerDTO.ScheduleRunTime = eTurnsWeb.Helper.CommonUtility.ConvertDateByTimeZonedt(objSchedulerDTO.ScheduleRunTime, eTurnsWeb.Helper.SessionHelper.CurrentTimeZone, eTurnsWeb.Helper.SessionHelper.DateTimeFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture).Value.ToShortTimeString();
        }

        objSchedulerQuoteDTO = new eTurns.DAL.SupplierMasterDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetRoomScheduleForQuote(Model.ID, eTurnsWeb.Helper.SessionHelper.RoomID, 12);
        if (objSchedulerQuoteDTO == null)
        {
            objSchedulerQuoteDTO = new QuoteSchedulerDTO();
            objSchedulerQuoteDTO.Quote_SupplierId = Model.ID;
            objSchedulerQuoteDTO.Quote_LoadSheduleFor = 12;
            //objSchedulerQuoteDTO.Quote_ScheduleMode = 5;
            objSchedulerQuoteDTO.Quote_RoomId = eTurnsWeb.Helper.SessionHelper.RoomID;
            objSchedulerQuoteDTO.Quote_CompanyId = eTurnsWeb.Helper.SessionHelper.CompanyID;
        }
        else
        {

            objSchedulerQuoteDTO.Quote_NextRunDateTime = eTurnsWeb.Helper.CommonUtility.ConvertDateByTimeZone(objSchedulerQuoteDTO.Quote_NextRunDate, eTurnsWeb.Helper.SessionHelper.CurrentTimeZone, eTurnsWeb.Helper.SessionHelper.DateTimeFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture, true);
            //objSchedulerQuoteDTO.ScheduleRunTime = (eTurnsWeb.Helper.CommonUtility.ConvertDateByTimeZonedt(objSchedulerQuoteDTO.ScheduleRunDateTime, eTurnsWeb.Helper.SessionHelper.CurrentTimeZone, eTurnsWeb.Helper.SessionHelper.DateTimeFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture) ?? DateTime.MinValue).ToString("HH:mm");
            objSchedulerQuoteDTO.Quote_ScheduleRunTime = objSchedulerQuoteDTO.Quote_ScheduleTime.HasValue ? objSchedulerQuoteDTO.Quote_ScheduleTime.Value.ToString(@"hh\:mm") : "00:00";
            //objSchedulerQuoteDTO.ScheduleRunTime = eTurnsWeb.Helper.CommonUtility.ConvertDateByTimeZonedt(objSchedulerQuoteDTO.ScheduleRunTime, eTurnsWeb.Helper.SessionHelper.CurrentTimeZone, eTurnsWeb.Helper.SessionHelper.DateTimeFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture).Value.ToShortTimeString();
        }
    }
    PullSchedulerDTO objPullSchedulerDTO = new PullSchedulerDTO();
    if (Model != null)
    {
        eTurns.DAL.RegionSettingDAL objRegionSettingDAL = new eTurns.DAL.RegionSettingDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
        objPullSchedulerDTO = new eTurns.DAL.SupplierMasterDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetRoomScheduleForPull(Model.ID, eTurnsWeb.Helper.SessionHelper.RoomID, 7);
        if (objPullSchedulerDTO == null)
        {
            objPullSchedulerDTO = new PullSchedulerDTO();
            objPullSchedulerDTO.Pull_SupplierId = Model.ID;
            objPullSchedulerDTO.Pull_LoadSheduleFor = 7;
            objPullSchedulerDTO.Pull_ScheduleMode = 5;
            objPullSchedulerDTO.Pull_RoomId = eTurnsWeb.Helper.SessionHelper.RoomID;
            objPullSchedulerDTO.Pull_CompanyId = eTurnsWeb.Helper.SessionHelper.CompanyID;
        }
        else
        {

            objPullSchedulerDTO.Pull_NextRunDateTime = eTurnsWeb.Helper.CommonUtility.ConvertDateByTimeZone(objPullSchedulerDTO.Pull_NextRunDate, eTurnsWeb.Helper.SessionHelper.CurrentTimeZone, eTurnsWeb.Helper.SessionHelper.DateTimeFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture, true);
            //objPullSchedulerDTO.Pull_ScheduleRunTime = (eTurnsWeb.Helper.CommonUtility.ConvertDateByTimeZonedt(objPullSchedulerDTO.Pull_ScheduleRunDateTime, eTurnsWeb.Helper.SessionHelper.CurrentTimeZone, eTurnsWeb.Helper.SessionHelper.DateTimeFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture) ?? DateTime.MinValue).ToString("HH:mm");
            objPullSchedulerDTO.Pull_ScheduleRunTime = objPullSchedulerDTO.Pull_ScheduleTime.HasValue ? objPullSchedulerDTO.Pull_ScheduleTime.Value.ToString(@"hh\:mm") : "00:00";

            //objPullSchedulerDTO.ScheduleRunTime = eTurnsWeb.Helper.CommonUtility.ConvertDateByTimeZonedt(objPullSchedulerDTO.ScheduleRunTime, eTurnsWeb.Helper.SessionHelper.CurrentTimeZone, eTurnsWeb.Helper.SessionHelper.DateTimeFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture).Value.ToShortTimeString();
        }
    }
    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));
    string UNCPathRootLink2 = eTurns.DTO.SiteSettingHelper.SupplierPhoto; // Settinfile.Element("SupplierPhoto").Value;
    string ValidatePhoneNumber = eTurns.DTO.SiteSettingHelper.ValidatePhoneNumber; // Settinfile.Element("ValidatePhoneNumber").Value;


    Int64 EnterpriseId = eTurnsWeb.Helper.SessionHelper.EnterPriceID;
    Int64 CompanyID = eTurnsWeb.Helper.SessionHelper.CompanyID;
    Int64 RoomID = eTurnsWeb.Helper.SessionHelper.RoomID;
    UNCPathRootLink2 = UNCPathRootLink2.Replace("~", string.Empty);

    string CharCodeList = eTurnsWeb.Helper.CommonUtility.GetNotAllowCharList();


    string LogoPathImage = (UNCPathRootLink2 + EnterpriseId + "/" + CompanyID + "/" + RoomID);

}
<style>
    .fixed_header {
        border-left: 1px solid #ddd;
        border-bottom: 1px solid #ddd;
    }

        .fixed_header tbody {
            display: block;
            overflow: auto;
            /*height:200px;*/
            max-height: 200px;
            width: 100%;
        }

        .fixed_header thead tr {
            display: block;
        }

    /*table#SupplierBlanketPO th {
      background-color: #006;
      color: #fff;
    }*/
    table#SupplierBlanketPO th, table#tblItemSupplierACS th,
    table#SupplierBlanketPO td, table#tblItemSupplierACS td {
        white-space: nowrap;
        padding: 3px 6px;
    }

    table.cellpadding-0 td {
        padding: 0;
    }

    table.cellspacing-0 {
        border-spacing: 0;
        border-collapse: collapse;
    }

    table.bordered th,
    table.bordered td {
        border: 1px solid #ccc;
        border-right: none;
        text-align: center;
    }

        table.bordered th:last,
        table.bordered td:last {
            border-right: 1px solid #ccc;
        }
</style>

<script type="text/javascript">
    var charCode = '@CharCodeList';
    var SupplierID = '@Model.ID';
    var oTableItemSupplierBPO, oTableItemSupplierACS;
    var LoadBlanketPOofSupplier = '@Url.Action("LoadBlanketPOofSupplier", "Master")';
    var LoadAccountofSupplier = '@Url.Action("LoadAccountofSupplier", "Master")';
    var RoomDateJSFormat = '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat'
    var SupImageType = '@Model.ImageType';
    var SupImagePath = '@Model.SupplierImage';
    var errmsgBlankOrderNumbering = '@ResSupplierMaster.errmsgBlankOrderNumbering';
     var errmsgBlankQuoteNumbering = '@ResSupplierMaster.errmsgBlankQuoteNumbering';
    var errmsgBlanketOrderPurchaseNumber = '@ResSupplierMaster.errmsgBlanketOrderPurchaseNumber';
    var errmsgBlankFixedPullPurchaseNumberType = '@ResSupplierMaster.errmsgBlankFixedPullPurchaseNumberType';
    var errmsgBlanketOrderNumbering = '@ResSupplierMaster.errmsgBlanketOrderNumbering';
    var errmsgBlankFixedPurchaseNumberType = '@ResSupplierMaster.errmsgBlankFixedPurchaseNumberType';
    var errmsgBlankReleaseNumberPurchaseNumberType = '@ResSupplierMaster.errmsgBlankReleaseNumberPurchaseNumberType';
    var ExistingNextOrderNo = '@Model.NextOrderNo';
    var ExistingReleaseNumber = '@Model.POAutoNrReleaseNumber';
    var errmsgReleaseNumberGreaterZero = '@ResSupplierMaster.errmsgReleaseNumberGreaterZero';
    var MsgValidFileName = '@ResCommon.ValidFileName';
    var MsgInvalidURL = '@ResCommon.InvalidURL';
    var SupplierMsgInvalidURL = '@ResSupplierMaster.SupplierMsgInvalidURL';
    var MsgEndDateValidation = '@ResSupplierMaster.MsgEndDateValidation';
    var MsgBlanketPOValidation = '@ResSupplierMaster.MsgBlanketPOValidation';
    var MsgDuplicatePOBlanket = '@ResSupplierMaster.MsgDuplicatePOBlanket';
    var MsgSelectDefaultAccount = '@ResSupplierMaster.MsgSelectDefaultAccount';
    var MsgAccountNameNumber = '@ResSupplierMaster.MsgAccountNameNumber';
    var EndDateShouldGreaterThanStartDateValidation = '@ResCommon.EndDateShouldGreaterThanStartDate';
    var MsgPhoneNumberValid = '@ResSupplierMaster.MsgPhoneNumberValid';
    var CommonFileExtension = '@SiteSettingHelper.CommonAllowedFileExtension';
    var MsgInvalidFileSelected = '@ResWorkOrder.MsgInvalidFileSelected';
    var MsgvalidFileList = '@ResWorkOrder.MsgvalidFileList';
    var errmsgBlankFixedQuoteNumberType = '@ResSupplierMaster.errmsgBlankFixedQuoteNumberType';
    var errmsgBlankReleaseNumberQuoteNumberType = '@ResSupplierMaster.errmsgBlankReleaseNumberQuoteNumberType';
    var errmsgBlankFixedOrderNumberType = '@ResSupplierMaster.errmsgBlankFixedOrderNumberType';
    var errmsgBlankReleaseNumberOrderNumberType = '@ResSupplierMaster.errmsgBlankReleaseNumberOrderNumberType';



</script>
<link href="@Url.Content("~/Content/ColorPicker/css/evol.colorpicker.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Content/ColorPicker/js/evol.colorpicker.js")" type="text/javascript"></script>
<script type='text/javascript' src="@Url.Content("~/Scripts/ajaxfileupload.js?v=" + version)"></script>

@{

}
@using (Ajax.BeginForm("SupplierSave", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnBegin = "onBegin", OnSuccess = "onSupSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmSupplier" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead" data-ng-controller="SupplierDetailsController">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : @*<label id="spnCreated" style="color:#176db8">@Model.Created.ToString()</label>*@
                        <span>@Model.CreatedDate</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.LastUpdated)
                        </label>
                        : @*<label id="spnUpdated" style="color:#176db8">@Model.LastUpdated.GetValueOrDefault(DateTime.MinValue).ToString()</label>*@
                        <span>@Model.UpdatedDate</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="mainForm">
            <div class="editorForm">
                <h4>@eTurns.DTO.ResItemMaster.GeneralDetails</h4>
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.SupplierName)<em> *</em>
                        </div>
                        <div class="editor-field">

                            @Html.TextBoxFor(model => model.SupplierName, new { id = "SupplierNameNew", @class = "text-box", maxlength = 255 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SupplierName)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenSupID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.LastUpdated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.ItemGUID)
                            @Html.HiddenFor(model => model.isForBOM)
                            @Html.HiddenFor(model => model.RefBomId)
                            @Html.HiddenFor(model => model.IsOnlyFromItemUI)
                            <input type="hidden" id="hdPhoneRegex" />
                            <input type="hidden" id="hdValidatePhoneNumber" value="@ValidatePhoneNumber" />
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.SupplierColor)<em> *</em>
                        </div>
                        <div class="editor-field" style="width: 300px; float: left">
                            @Html.TextBoxFor(model => model.SupplierColor, new { maxlength = 128, @class = "text-box", @style = "padding:5px 3px; width:100px;float:left" })
                            <span class="ErrorMessage" style="padding-left: 10%">@Html.ValidationMessageFor(model => model.SupplierColor)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Description)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.Description, new { @class = "text-box", maxlength = 1024 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Description)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.BranchNumber)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.BranchNumber, new { id = "BranchNumberNew", @class = "text-box", maxlength = 50 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.BranchNumber)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxOrderSize)
                        </div>
                        <div class="editor-field">
                            @*@Html.TextBoxFor(model => model.DefaultPullQuantity, strDecimalFormat, new { @class = "text-boxQuantityFormat", @autocomplete = "off" })*@
                            @Html.EditorFor(model => model.MaxOrderSize, new { @class = "text-box", maxlength = 128, @autocomplete = "off" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.MaxOrderSize)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.DefaultOrderRequiredDays)
                        </div>
                        <div class="editor-field">
                            @*@Html.TextBoxFor(model => model.DefaultPullQuantity, strDecimalFormat, new { @class = "text-boxQuantityFormat", @autocomplete = "off" })*@
                            @Html.EditorFor(model => model.DefaultOrderRequiredDays, new { @class = "text-box", maxlength = 128, @autocomplete = "off" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.DefaultOrderRequiredDays)</span>
                        </div>
                    </li>
                </ul>
                <h4>
                    @ResSupplierMaster.AddressDetails
                </h4>
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Address)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.Address, new { @class = "text-box", maxlength = 1027 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Address)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.City)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.City, new { @class = "text-box", maxlength = 127 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.City)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.State)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.State, new { @class = "text-box", maxlength = 255 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.State)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ZipCode)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ZipCode, new { @class = "text-box", maxlength = 20 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ZipCode)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Country)
                        </div>
                        <div class="editor-field">
                            <span style="position:relative">
                                <input type="hidden" value="false" id="hdnIsLoadMoreCountry" />
                                @Html.TextBoxFor(model => model.Country, new { @class = "selectBox", maxlength = 127 })
                                <a id="lnkShowAllOptionsCR" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;font-size:19px;background-color:#fff;" class="ShowAllOptionsBinCR"><img src="/Content/images/arrow_down_black.png" alt="select" /></a>
                            </span>
                            @*@Html.TextBoxFor(model => model.Country, new { @class = "text-box", maxlength = 127 })*@
                            @*@Html.DropDownListFor(model => model.Country, new SelectList(ViewBag.CountryList, "CountryName", "CountryName", Model.Country), new { @class = "selectBox" })*@
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Country)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Contact, new { @class = "text-box", maxlength = 127 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Contact)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Phone)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Phone, new { @class = "text-box", maxlength = 20 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Phone)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Fax)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Fax, new { @class = "text-box", maxlength = 20 })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Fax)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Email)@*<em> *</em>*@
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.Email, new { @class = "text-box", maxlength = 255 })
                            <span class="ErrorMessage">@eTurns.DTO.Resources.ResMessage.msgMultiemailEntry</span>
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Email)</span>
                        </div>
                    </li>
                </ul>
                <h4>
                    @ResSupplierMaster.OtherDetails
                </h4>
                <ul>
                    @*<li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.ReceiverID)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.ReceiverID, new { @class = "text-box", maxlength = 64 })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ReceiverID)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsEmailPOInBody)
                            </div>
                            <div class="editor-field">
                                @Html.CheckBoxFor(model => model.IsEmailPOInBody, new { @class = "check-box" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsEmailPOInBody)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsEmailPOInPDF)
                            </div>
                            <div class="editor-field">
                                @Html.CheckBoxFor(model => model.IsEmailPOInPDF, new { @class = "check-box" })
                                @Html.ValidationMessageFor(model => model.IsEmailPOInPDF)
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsEmailPOInCSV)
                            </div>
                            <div class="editor-field">
                                @Html.CheckBoxFor(model => model.IsEmailPOInCSV, new { @class = "check-box" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsEmailPOInCSV)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsEmailPOInX12)
                            </div>
                            <div class="editor-field">
                                @Html.CheckBoxFor(model => model.IsEmailPOInX12, new { @class = "check-box" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsEmailPOInX12)</span>
                            </div>
                        </li>*@
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsSendtoVendor)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsSendtoVendor, new { @class = "check-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsSendtoVendor)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsVendorReturnAsn)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsVendorReturnAsn, new { @class = "check-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsVendorReturnAsn)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsSupplierReceivesKitComponents)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsSupplierReceivesKitComponents, new { @class = "check-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsSupplierReceivesKitComponents)</span>
                        </div>
                    </li>
                    <li>
                        <h4>
                            @eTurns.DTO.ResItemMaster.UDFDetails
                        </h4>
                        <ul>
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResSupplierMaster())
                        </ul>
                    </li>
                    <li>
                        <h4>
                            @eTurns.DTO.ResItemMaster.ImagePath
                        </h4>
                    </li>
                    <li>
                        @Html.RadioButtonFor(e => e.ImageType, "ImagePath", new { id = "ImagePath", onchange = "ShowImage(this);" })
                        @Html.Label("ImagePath", @eTurns.DTO.ResItemMaster.LocalImage)
                        @Html.RadioButtonFor(e => e.ImageType, "ExternalImage", new { id = "ExternalImage", onchange = "ShowImage(this);" })
                        @Html.Label("ExternalImage", @eTurns.DTO.ResItemMaster.ExternalUrl)

                    </li>

                    <li id="ExternalURL">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ImageExternalURL)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ImageExternalURL, new { @class = "text-box", maxlength = 500, @onblur = "return CheckValidURLForImage(this);" })
                        </div>
                        @Html.HiddenFor(model => Model.ImageExternalURL)
                    </li>
                    <li>
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.SupplierImage)@*<em> *</em>*@
                                </div>
                                <div class="editor-field" style="width: 1000px;">
                                    <a href="javascript:void(null);" onclick="DeleteSupplierImage('@Model.GUID');" title="Delete Image" id="btnDeleteImage" name="btnDeleteImage">
                                        <img src="~/Content/images/delete.png" />
                                    </a>
                                    <input name="SupplierImage" id="SupplierImage" type="file" />
                                    @if (!string.IsNullOrEmpty(Model.SupplierImage))
                                    {
                                        <input type="hidden" value="@( LogoPathImage + "/" + Model.ID + "/" + Model.SupplierImage)" id="currentpath" />
                                    }
                                    else
                                    {
                                        <input type="hidden" value="~/Content/images/no-image.jpg" id="currentpath" />
                                    }
                                    <div style="float: left;">
                                        @if (!string.IsNullOrEmpty(Model.SupplierImage) && Model.ImageType.Trim().ToLower() == "imagepath")
                                        {
                                        <a href='/Consume/Get?path=@(LogoPathImage + "/" + Model.ID + "/" + Model.SupplierImage)' target="_blank">
                                            <img id="previewHolder" style="width:120px;height:120px;" src="/Consume/Get?path=@( LogoPathImage + "/" + Model.ID + "/" + Model.SupplierImage)">
                                        </a>
                                        }
                                        else if (!string.IsNullOrEmpty(Model.ImageExternalURL) && Model.ImageType.Trim().ToLower() == "externalimage")
                                        {
                                            <img id="previewHolder" style="width:120px;height:120px;" src="@( Model.ImageExternalURL)">
                                        }
                                        else
                                        {
                                            <img id="previewHolder" style="width:120px;height:120px;" alt="No Image" src="~/Content/images/no-image.jpg" />
                                        }
                                    </div>
                                </div>
                            </li>
                        </ul>

                    </li>
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnSupCancel" class="CreateBtn" />
                            @if (isInsert == true && Model.ID == 0)
                            {
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" name="btnSave" data-ng-click="SaveSupplier($event);" />
                            }
                            else if (isUpdate == true)
                            {
                                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" data-ng-click="SaveSupplier($event);" id="btnSave" class="CreateBtn" name="btnSave" />
                            }
                            else if (isUpdate == false && isInsert == false)
                            {
                                <script>
                                    //This is the case when archived or deleted record is being viewed..
                                    disableControls('frmSupplier');
                                    $('#btnSupCancel').removeAttr('disabled');
                                </script>
                            }
                        </div>
                    </li>
                </ul>
            </div>
            <div class="editorForm padRightNone">
                <h4>
                    @ResSupplierBlanketPODetails.SupplierBlanketPODetails
                </h4>
                <ul>
                    <li id="liSupplierBlanketPODetails">
                        <div id="divliSupplierBlanketPODetails">
                            <div id="divSupplierBlanketPODetails" style="width: 99.5%; min-height: 140px">
                                <div style="text-align: center; float: left; width: 80%;">
                                    <span id="spanErrorMsg" style="color: Green;"></span>
                                </div>
                                <div>
                                    <input type="button" value="@ResSupplierBlanketPODetails.AddBlanketPO" class="CreateBtn" data-ng-click="AddNewBPO();" />
                                    @Html.TextBoxFor(model => model.SupplierBlanketDirty, new { @data_ng_model = "SupplierBlanketDirty", @style = "display:none;" })
                                </div>

                                <div class="userContentInnerGrid" style="overflow:auto; border-left:1px solid #ddd; border-bottom:1px solid #ddd;border-right:1px solid #ddd;">
                                    <table class="display dataTable" id="SupplierBlanketPO" cellspacing="0" style="width:100%;">
                                        <thead>
                                            <tr role="row">
                                                <th id='column-header-1'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.BlanketPO
                                                    <div class='column-header-1-sizer'></div>
                                                </th>
                                                <th id='column-header-2'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.StartDate
                                                    <div class='column-header-2-sizer' style="width:63px;"></div>

                                                </th>
                                                <th id='column-header-3'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.Enddate
                                                    <div class='column-header-3-sizer' style="width:63px;"></div>
                                                </th>
                                                <th id='column-header-4'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.MaxLimit
                                                    <div class='column-header-4-sizer' style="width:63px;"></div>
                                                </th>
                                                <th id='column-header-5'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.IsNotExceed
                                                    <div class='column-header-5-sizer'></div>
                                                </th>
                                                <th id='column-header-6'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.MaxLimitQty
                                                    <div class='column-header-6-sizer'></div>
                                                </th>
                                                <th id='column-header-7'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.IsNotExceedQty
                                                    <div class='column-header-7-sizer'></div>
                                                </th>
                                                <th id='column-header-8'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.PullUsed
                                                    <div class='column-header-8-sizer'></div>
                                                </th>
                                                <th id='column-header-9'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.OrderUsed
                                                    <div class='column-header-9-sizer'></div>
                                                </th>
                                                <th id='column-header-21'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.OrderedUsedCost
                                                    <div class='column-header-21-sizer'></div>
                                                </th>
                                                <th id='column-header-22'>
                                                    @eTurns.DTO.ResSupplierBlanketPODetails.OrderRemainCost
                                                    <div class='column-header-22-sizer'></div>
                                                </th>
                                                <th id='column-header-10'>
                                                    &nbsp;
                                                    <div class='column-header-10-sizer'></div>
                                                </th>
                                            </tr>

                                        </thead>
                                        <tbody>
                                            <tr ng-repeat="item in SupplierBPO track by $index" ng-class="($index % 2 == 0) ? 'even' : 'odd'" data-ng-hide="item.IsDeleted">

                                                <td class='column-header-1-sizer' style="width:63px;">
                                                    <input type="text" name="SupplierBlanketPODetails[{{$index}}].BlanketPO" data-ng-model="item.BlanketPO" id="txtBlanketPO" style="width:90%;" maxlength="22" class="text-box" />
                                                    <input type="hidden" name="SupplierBlanketPODetails[{{$index}}].GUID" value="{{item.GUID}}" />
                                                    <input type="hidden" name="SupplierBlanketPODetails[{{$index}}].ID" value="{{item.ID}}" />
                                                </td>
                                                <td class='column-header-2-sizer' style="width:63px;">
                                                    <input type="text" name="SupplierBlanketPODetails[{{$index}}].ValidStartDate" data-ng-model="item.ValidStartDate" style="width:90%;background:white" class="text-box datePicker" readonly="readonly" />
                                                </td>
                                                <td class='column-header-3-sizer' style="width:63px;">
                                                    <input type="text" name="SupplierBlanketPODetails[{{$index}}].ValidEndDate" data-ng-model="item.ValidEndDate" style="width:90%;background:white" class="text-box datePicker" readonly="readonly" />
                                                </td>
                                                <td class='column-header-4-sizer' style="width:63px;">
                                                    <input type="text" name="SupplierBlanketPODetails[{{$index}}].MaxLimit" data-ng-model="item.MaxLimit" onkeypress='return isNumberKey(event);' style="width:83%;" class="text-box" />
                                                </td>
                                                <td class='column-header-5-sizer' style="width:63px;">
                                                    <input type="checkbox" data-ng-model="item.IsNotExceed" class="check-box" />
                                                    <input type="hidden" name="SupplierBlanketPODetails[{{$index}}].IsNotExceed" value="{{item.IsNotExceed}}" class="check-box" />
                                                </td>
                                                <td class='column-header-6-sizer' style="width:63px;">
                                                    <input type="text" name="SupplierBlanketPODetails[{{$index}}].MaxLimitQty" data-ng-model="item.MaxLimitQty" style="width:83%;" onkeypress='return isNumberKey(event);' class="text-box" />
                                                </td>
                                                <td class='column-header-7-sizer' style="width:95px;">
                                                    <input type="checkbox" data-ng-model="item.IsNotExceedQty" class="check-box" />
                                                    <input type="hidden" name="SupplierBlanketPODetails[{{$index}}].IsNotExceedQty" value="{{item.IsNotExceedQty}}" class="check-box" />
                                                </td>
                                                <td class='column-header-8-sizer' style="width:45px;">
                                                    <span>{{item.PulledQty}}</span>
                                                </td>
                                                <td class='column-header-9-sizer' style="width:48px;">
                                                    <input type="text" name="SupplierBlanketPODetails[{{$index}}].OrderUsed" data-ng-model="item.OrderUsed" style="width:83%;" onkeypress='return isNumberKey(event);' class="text-box" />
                                                </td>
                                                <td class='column-header-21-sizer' style="width:48px;">
                                                    <input type="text" name="SupplierBlanketPODetails[{{$index}}].TotalOrder" data-ng-model="item.TotalOrder" style="width:83%;" onkeypress='return isNumberKey(event);' class="text-box" />
                                                    @*<span>{{item.OrderedUseCost}}</span>*@
                                                </td>
                                                @*<td class='column-header-9-sizer' style="width:48px;">
                                                    <span>{{item.OrderedQty}}</span>
                                                </td>
                                                <td class='column-header-21-sizer' style="width:48px;">
                                                    <span>{{item.OrderedUseCost}}</span>
                                                </td>*@
                                                <td class='column-header-22-sizer' style="width:48px;">
                                                    <span>{{item.OrderRemainCost}}</span>
                                                </td>
                                                <td class='column-header-10-sizer'>
                                                    <a href="javascript:void(0);" data-ng-click="DeleteSBPO(item);"><img alt="delete" src="/Content/images/delete.png"></a>
                                                    <input type="hidden" name="SupplierBlanketPODetails[{{$index}}].IsDeleted" value="{{item.IsDeleted}}" class="check-box" />
                                                </td>
                                            </tr>
                                            <tr data-ng-show="([SupplierBPO] | filter:{ IsDeleted : false }).length < 1" class="norecfound">
                                                <td colspan="10" style="text-align:center;vertical-align:middle;">
                                                    @ResCommon.NoRecordFound
                                                </td>
                                            </tr>
                                            @*<tr data-ng-show="([SupplierBPO] | filter:{ IsDeleted : false }).length < 1" class="norecfound">
                                                    <td  style="text-align:center;vertical-align:middle;width:150px;">
                                                            No Record Found
                                                        </td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                </tr>*@
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                        </div>
                    </li>
                </ul>
                <h4>
                    @ResSupplierAccountDetails.SupplierAccountDetails
                </h4>
                <ul>
                    <li id="liSupplierAccountDetails">
                        <div id="divliSupplierAccountDetails">
                            <div id="divSupplierAccountDetails" style="width: 99.5%; min-height: 140px">
                                <div style="text-align: center; float: left; width: 80%;">
                                    <span id="spanErrorMsg" style="color: Green;"></span>
                                </div>
                                <div>
                                    @if (IsInsertSupplierAccount)
                                    {
                                        <input type="button" value="@ResSupplierAccountDetails.AddAccount" class="CreateBtn" data-ng-click="AddNewSAC();" />//
                                    }
                                    @Html.TextBoxFor(model => model.SupplierAccountDirty, new { @data_ng_model = "SupplierAccountDirty", @style = "display:none;" })

                                </div>
                                <div class="userContentInnerGrid" style="overflow:auto; border-left:1px solid #ddd; border-bottom:1px solid #ddd;border-right:1px solid #ddd;">
                                    <table class="display dataTable" id="tblItemSupplierACS">
                                        <thead>
                                            <tr role="row">
                                                <th id='column-header-11'>
                                                    @eTurns.DTO.ResSupplierAccountDetails.AccountNo
                                                    <div class='column-header-11-sizer'></div>
                                                </th>
                                                <th id='column-header-12'>
                                                    @eTurns.DTO.ResSupplierAccountDetails.AccountName
                                                    <div class='column-header-12-sizer'></div>
                                                </th>
                                                <th id='column-header-13' style="width:52px;">
                                                    @ResSupplierMaster.Address
                                                    <div class='column-header-13-sizer'></div>
                                                </th>
                                                <th id='column-header-14' style="width:63px;">
                                                    @ResSupplierMaster.City
                                                    <div class='column-header-14-sizer'></div>
                                                </th>
                                                <th id='column-header-15' style="width:63px;">
                                                    @ResSupplierMaster.State
                                                    <div class='column-header-15-sizer'></div>
                                                </th>
                                                <th id='column-header-16'>
                                                    @ResSupplierMaster.ZipCode
                                                    <div class='column-header-16-sizer'></div>
                                                </th>
                                                <th id='column-header-17' style="width:45px;">
                                                    @ResCommon.Country
                                                    <div class='column-header-17-sizer'></div>
                                                </th>

                                                <th id='column-header-18'>
                                                    @ResSupplierAccountDetails.ShipToID
                                                    <div class='column-header-18-sizer'></div>
                                                </th>
                                                <th id='column-header-19'>
                                                    @ResSupplierAccountDetails.IsDefault
                                                    <div class='column-header-19-sizer'></div>
                                                </th>
                                                <th id='column-header-20'>
                                                    &nbsp;
                                                    <div class='column-header-20-sizer'></div>
                                                </th>
                                            </tr>

                                        </thead>
                                        <tbody>
                                            <tr data-ng-repeat="item in SupplierACS track by $index" ng-class="($index % 2 == 0) ? 'even' : 'odd'" data-ng-hide="item.IsDeleted || !item.IsViewable">
                                                <td class='column-header-11-sizer'>
                                                    <input type="text" name="SupplierAccountDetails[{{$index}}].AccountNo" data-ng-model="item.AccountNo" style="width:90%;" maxlength="200" class="text-box" ng-readonly="!item.IsEditable" />
                                                    <input type="hidden" name="SupplierAccountDetails[{{$index}}].GUID" value="{{item.GUID}}" />
                                                    <input type="hidden" name="SupplierAccountDetails[{{$index}}].ID" value="{{item.ID}}" />
                                                </td>
                                                <td class='column-header-12-sizer' style="width:80px;">
                                                    <input type="text" name="SupplierAccountDetails[{{$index}}].AccountName" data-ng-model="item.AccountName" style="width:90%;background:white" class="text-box" ng-readonly="!item.IsEditable" />
                                                </td>
                                                <td class='column-header-13-sizer'>
                                                    <input type="text" name="SupplierAccountDetails[{{$index}}].Address" maxlength="1000" data-ng-model="item.Address" style="width:90%;background:white" class="text-box" ng-readonly="!item.IsEditable" />
                                                </td>
                                                <td class='column-header-14-sizer'>
                                                    <input type="text" name="SupplierAccountDetails[{{$index}}].City" maxlength="127" data-ng-model="item.City" style="width:90%;background:white" class="text-box" ng-readonly="!item.IsEditable" />
                                                </td>
                                                <td class='column-header-15-sizer'>
                                                    <input type="text" name="SupplierAccountDetails[{{$index}}].State" maxlength="250" data-ng-model="item.State" style="width:90%;background:white" class="text-box" ng-readonly="!item.IsEditable" />
                                                </td>
                                                <td class='column-header-16-sizer'>
                                                    <input type="text" name="SupplierAccountDetails[{{$index}}].ZipCode" maxlength="20" data-ng-model="item.ZipCode" style="width:90%;background:white" class="text-box" ng-readonly="!item.IsEditable" />
                                                </td>
                                                <td class='column-header-17-sizer'>
                                                    <input type="text" name="SupplierAccountDetails[{{$index}}].Country" maxlength="20" data-ng-model="item.Country" style="width:90%;background:white" class="text-box" ng-readonly="!item.IsEditable" />
                                                </td>

                                                <td class='column-header-18-sizer'>
                                                    <input type="text" name="SupplierAccountDetails[{{$index}}].ShipToID" maxlength="20" data-ng-model="item.ShipToID" style="width:90%;background:white" class="text-box" ng-readonly="!item.IsEditable" />
                                                </td>
                                                <td class='column-header-19-sizer'>
                                                    @*<input type="checkbox" data-ng-click="DefaultSAC(item);" name="SupplierAccountDetails[{{$index}}].IsDefault" data-ng-model="item.IsDefault"
                                                        class="check-box" />*@
                                                    <input type="checkbox" data-ng-model="item.IsDefault" class="check-box" data-ng-click="DefaultSAC(item);" ng-disabled="!item.IsEditable" />
                                                    <input type="hidden" name="SupplierAccountDetails[{{$index}}].IsDefault" value="{{item.IsDefault}}" class="check-box" />
                                                </td>

                                                <td class='column-header-20-sizer'>
                                                    <a href="javascript:void(0);" data-ng-click="DeleteSAC(item);" data-ng-show="item.IsDeleteable"><img alt="delete" src="/Content/images/delete.png"></a>
                                                    <input type="hidden" name="SupplierAccountDetails[{{$index}}].IsDeleted" value="{{item.IsDeleted}}" class="check-box" />
                                                </td>
                                            </tr>
                                            <tr data-ng-show="([SupplierACS] | filter:{ IsDeleted : false }).length < 1" class="norecfound">
                                                <td colspan="10" style="text-align:center;vertical-align:middle;">
                                                    @ResCommon.NoRecordFound
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                        </div>
                    </li>
                </ul>
                <h4>
                    @ResSupplierMaster.POSequenceDetail
                </h4>
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.POAutoSequence)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.POAutoSequence, new SelectList(
                           new[] {
                                new {ID = 0, Name = ResSupplierMaster.optBlank },
                                new {ID = 1, Name = ResSupplierMaster.optFixed },
                                new {ID = 2, Name = ResSupplierMaster.optBlanketOrder },
                                new {ID = 3, Name = ResSupplierMaster.optIncreamentingbyOrder },
                                new {ID = 4, Name = ResSupplierMaster.optIncreamentingbyDay },
                                new {ID = 5, Name = ResSupplierMaster.optDateIncrementing },
                                new {ID = 6, Name = ResSupplierMaster.optDate },
                                new {ID = 7, Name = ResSupplierMaster.optFixedIncrementing},
                                new {ID = 8, Name = ResSupplierMaster.optDateIncrementingFixed}
                                }, "ID", "Name", Model.POAutoSequence), "", new { @class = "selectBox", @onclick = "ChangeAutoSequenceDroudown('POAutoSequence', 'liPOAutoNrFixedValue','liPOAutoNrReleaseNumber')" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.POAutoSequence)</span>
                        </div>
                    </li>
                    <li id="liPOAutoNrFixedValue" style="@((Model.POAutoSequence == 7 || Model.POAutoSequence == 8) ? "" : "display:none")">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.POAutoNrFixedValue)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.POAutoNrFixedValue, new { @class = "text-box", maxlength = 128 })
                            <span id="errPOAutoNrFixedValue" class="ErrorMessage"></span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.NextOrderNo)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.NextOrderNo, new { @class = "text-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.NextOrderNo)</span>
                        </div>
                    </li>
                    <li id="liPOAutoNrReleaseNumber" style="@((Model.POAutoSequence == 1) ? "" : "display:none")">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.POAutoNrReleaseNumber)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.POAutoNrReleaseNumber, new { @class = "text-box numericinput", maxlength = 12 })
                            <span id="errPOAutoNrReleaseNumber" class="ErrorMessage"></span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PullPurchaseNumberType)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.PullPurchaseNumberType, new SelectList(
                           new[] {
                                 new {ID = 0, Name = ResSupplierMaster.optBlank  },
                                new {ID = 1, Name = ResSupplierMaster.optFixed },
                                new {ID = 2, Name = ResSupplierMaster.optBlanketOrder },
                                new {ID = 5, Name = ResSupplierMaster.optDateIncrementing },
                                new {ID = 6, Name = ResSupplierMaster.optDate },
                                new {ID = 7, Name = ResSupplierMaster.optFixedIncrementing}
                                }, "ID", "Name", Model.PullPurchaseNumberType), "", new { @class = "selectBox", @onclick = "ChangeAutoSequenceDroudown('PullPurchaseNumberType', 'liPullPurchaseNrFixedValue','')" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PullPurchaseNumberType)</span>
                        </div>
                    </li>
                    <li id="liPullPurchaseNrFixedValue" style="@(Model.PullPurchaseNumberType == 7 ? "" : "display:none")">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PullPurchaseNrFixedValue)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PullPurchaseNrFixedValue, new { @class = "text-box", maxlength = 128 })
                            <span id="errPullPurchaseNrFixedValue" class="ErrorMessage"></span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.LastPullPurchaseNumberUsed)
                        </div>
                        @if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL))
                        {
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.LastPullPurchaseNumberUsed, new { @class = "text-box", maxlength = 22 })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.LastPullPurchaseNumberUsed)</span>
                            </div>
                        }
                        else
                        {
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.LastPullPurchaseNumberUsed, new { @class = "text-box", maxlength = 128 })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.LastPullPurchaseNumberUsed)</span>
                            </div>
                        }

                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsOrderReleaseNumberEditable)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsOrderReleaseNumberEditable, new { @class = "check-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsOrderReleaseNumberEditable)</span>
                        </div>
                    </li>
                </ul>
                <h4>
                    @ResSupplierMaster.QuoteSequenceDetail
                </h4>
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.QuoteAutoSequence)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.QuoteAutoSequence, new SelectList(
                           new[] {
                                new {ID = 0, Name = ResSupplierMaster.optBlank },
                                new {ID = 1, Name = ResSupplierMaster.optFixed },
                                new {ID = 2, Name = ResSupplierMaster.optBlanketQuote },
                                new {ID = 3, Name = ResSupplierMaster.optIncreamentingbyQuote },
                                new {ID = 4, Name = ResSupplierMaster.optIncreamentingbyDay },
                                new {ID = 5, Name = ResSupplierMaster.optDateIncrementing },
                                new {ID = 6, Name = ResSupplierMaster.optDate },
                                new {ID = 7, Name = ResSupplierMaster.optFixedIncrementing},
                                new {ID = 8, Name = ResSupplierMaster.optDateIncrementingFixed}
                                }, "ID", "Name", Model.QuoteAutoSequence), "", new { @class = "selectBox", @onclick = "ChangeQuoteSequenceDroudown('QuoteAutoSequence', 'liQuoteAutoNrFixedValue','liQuoteAutoNrReleaseNumber')" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.QuoteAutoSequence)</span>
                        </div>
                    </li>
                    <li id="liQuoteAutoNrFixedValue" style="@((Model.QuoteAutoSequence == 7 || Model.QuoteAutoSequence == 8) ? "" : "display:none")">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.QuoteAutoNrFixedValue)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.QuoteAutoNrFixedValue, new { @class = "text-box", maxlength = 128 })
                            <span id="errPOAutoNrFixedValue" class="ErrorMessage"></span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.NextQuoteNo)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.NextQuoteNo, new { @class = "text-box" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.NextQuoteNo)</span>
                        </div>
                    </li>
                    <li id="liQuoteAutoNrReleaseNumber" style="@((Model.QuoteAutoSequence == 1) ? "" : "display:none")">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.QuoteAutoNrReleaseNumber)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.QuoteAutoNrReleaseNumber, new { @class = "text-box numericinput", maxlength = 12 })
                            <span id="errQuoteAutoNrReleaseNumber" class="ErrorMessage"></span>
                        </div>
                    </li>
                </ul>
                <div id="dvSupplierSchedules" data-ng-controller="SupplierScheduleController">
                    @Html.Partial("SchedulerInfo", objSchedulerDTO)
                    @Html.Partial("QuoteSchedulerInfo", objSchedulerQuoteDTO)
                    @Html.Partial("PullSchedulerInfo", objPullSchedulerDTO)

                    @*@if (!HaveCreateOrderRight)
                        {
                        <script type="text/javascript">
                            setTimeout(function () { disableControls('dvSchedulePara'); }, 1000);
                        </script>
                        }*@
                </div>
            </div>
        </div>
    </div>
}
@Html.Partial("_RequiredMessages")
<script src="@Url.Content("~/Scripts/PageScripts/SupplierDetails.js?v=" + version)" type="text/javascript"></script>
<script type="text/javascript">
    var NotApplicable = '@ResCommon.NotApplicable';
    $(document).ready(function () {



        setTimeout(function () {
            $("#SupplierColor").colorpicker({ color: $("#SupplierColor").val() });
        }, 1000);
    });

    $('.ShowAllOptionsBinCR').click(function () {
        $(this).siblings('#Country').trigger("focus");
        $(this).siblings("#Country").autocomplete("search", " ");
    });

    function ChangeAutoSequenceDroudown(objDDLId, objLiFixId, objliReleaseNumber) {
        if ($('#' + objDDLId).val() == '7' || $('#' + objDDLId).val() == '8') {
            $('#' + objLiFixId).show();
        }
        else {
            $('#' + objLiFixId).hide();
        }
        if (objliReleaseNumber != '') {
            if ($('#' + objDDLId).val() == '1') {
                $('#' + objliReleaseNumber).show();
            }
            else {
                $('#' + objliReleaseNumber).hide();
            }
        }
    }
    function ChangeQuoteSequenceDroudown(objDDLId, objLiFixId, objliReleaseNumber) {
        if ($('#' + objDDLId).val() == '7' || $('#' + objDDLId).val() == '8') {
            $('#' + objLiFixId).show();
        }
        else {
            $('#' + objLiFixId).hide();
        }
        if (objliReleaseNumber != '') {
            if ($('#' + objDDLId).val() == '1') {
                $('#' + objliReleaseNumber).show();
            }
            else {
                $('#' + objliReleaseNumber).hide();
            }
        }
    }
    $(function () {

        var GetCountryURL = '@Url.Action("GetCountryList", "Master")';
        $(".editorForm").on('focus', "input[type='text'][name='Country']", function (e) {
            var objCurtxt = $(this);
            $(this).autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: GetCountryURL,
                        contentType: 'application/json',
                        dataType: 'json',
                        data: {
                            featureClass: "P",
                            style: "full",
                            maxRows: 1000,
                            NameStartWith: request.term
                        },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.CountryName,
                                    value: item.CountryName,
                                    selval: item.ID
                                }
                            }));
                        },
                        error: function (err) { }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {

                    //                    $(objCurtxt).parent().parent().find("input[type='hidden'][name='hdnStagingBinName']").val(ui.item.label);
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                    $(objCurtxt).trigger("change");
                },
                change: function (event, ui) {
                    //                    $(objCurtxt).parent().parent().find("input[type='hidden'][name='hdnStagingBinName']").val($(objCurtxt).val());
                }
            });
        });

        GetPhoneRegex();
        var thHeightsupplier = $("table#SupplierBlanketPO th:first").height();
        $("table#SupplierBlanketPO th").resizable({
            handles: "e",
            minHeight: thHeightsupplier,
            maxHeight: thHeightsupplier,
            minWidth: 40,
            resize: function (event, ui) {
                var sizerID = "." + $(event.target).attr("id") + "-sizer";
                $(sizerID).width(ui.size.width);
            }
        });

        var thHeightsupplier = $("table#tblItemSupplierACS th:first").height();
        $("table#tblItemSupplierACS th").resizable({
            handles: "e",
            minHeight: thHeightsupplier,
            maxHeight: thHeightsupplier,
            minWidth: 40,
            resize: function (event, ui) {
                var sizerID = "." + $(event.target).attr("id") + "-sizer";
                $(sizerID).width(ui.size.width);
            }
        });

        function GetPhoneRegex() {
            // if ($("#Country").val() != "") {
            $.ajax({
                url: '@Url.Action("PhoneNumberRegexFromCountry", "Master")',
                contentType: 'application/json',
                dataType: 'json',
                data: {
                    CountryName: $("#Country").val()
                },
                success: function (Message) {
                    if (Message.Regex != "")
                        $("#hdPhoneRegex").val(Message.Regex);
                    else
                        $("#hdPhoneRegex").val("^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{0,13})[-. )]*(\d{3})[-. ]*(\d{0,13})(?: *x(\d+))?\s*$");
                },
                error: function (err) {
                    $("#hdPhoneRegex").val("^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{0,13})[-. )]*(\d{3})[-. ]*(\d{0,13})(?: *x(\d+))?\s*$");
                }
            });
            //}
            //else {
            //    $("#hdPhoneRegex").val("^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{0,13})[-. )]*(\d{3})[-. ]*(\d{0,13})(?: *x(\d+))?\s*$");
            //}
        }


        $("#Country").change(function () {
            GetPhoneRegex();
        });

    });

    function validateInt32Number() {
        if ((Int32Validation(parseInt($("#POAutoNrReleaseNumber").val())))) {
            $("#errPOAutoNrReleaseNumber").text("");
        } else {
            $("#errPOAutoNrReleaseNumber").text("Please enter valid Integer number.");
        }
    }



    _Common.addRequiredSign();


</script>
