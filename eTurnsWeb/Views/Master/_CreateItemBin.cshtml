@model eTurns.DTO.ItemMasterBinDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";


}
@{
    bool isUpdate;
    bool isInsert;
    bool onlyView = false;

    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
        onlyView = true;
    }
    else
    {
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);

    }
    isUpdate = true;
    isInsert = true;
}
@using (Ajax.BeginForm("ItemBinSave", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmItemMasterBin" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedDate)
                        </label>
                        @*: <span>@eTurnsWeb.Helper.CommonUtility.ToClientDateTime(Model.Created)</span></li>*@
                        : <span>@Model.ReceivedOnDateWeb</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedDate)
                        </label>
                        @*: <span>@eTurnsWeb.Helper.CommonUtility.ToClientDateTime(Model.Updated)</span></li>*@
                        : <span>@Model.ReceivedOnDate</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.ItemNumber)
                    </div>
                    <div class="editor-field">
                        @*@Html.DropDownListFor(model => model.ToolCategoryID, new SelectList(ViewBag.ToolCategoryList, "ID", "ToolCategory", Model.ToolCategoryID), "", new { @class = "selectBox" })*@
                        @Model.ItemNumber
                        @Html.HiddenFor(model => model.ItemGuid)
                        <input id="hiddenID" type="hidden" value="@Model.ItemGuid"/>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.NewLocationName) <em>*</em>
                    </div>
                    <div class="editor-field">
                        @*@Html.DropDownListFor(model => model.ToolCategoryID, new SelectList(ViewBag.ToolCategoryList, "ID", "ToolCategory", Model.ToolCategoryID), "", new { @class = "selectBox" })*@
                        @Html.EditorFor(model => model.NewLocationName) <em>*</em>
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.NewLocationName)</span>
                        @Html.HiddenFor(model => model.OldLocation)
                        @Html.HiddenFor(model => model.OldLocationGUID)
                        @Html.HiddenFor(model => model.NewLocation)
                        @Html.HiddenFor(model => model.NewLocationGUID)
                        @Html.HiddenFor(model => model.OldLocationName)
                        @Html.HiddenFor(model => model.IsDefault)


                    </div>
                </li>



                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        @if ((isInsert == true && Model.ID == 0) || (isUpdate == true && Model.ID > 0) || Convert.ToString(Session["IsInsert"]) == "True")
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else //if (isUpdate == false && isInsert == false)
                        {
                            <script>
                                //This is the case when archived or deleted record is being viewed..
                                disableControls('frmItemMasterBin');
                            </script>
                        }
                    </div>
                </li>
            </ul>
        </div>

    </div>
}
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $(document).ready(function () {
        $('form').areYouSure();

    });

    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmItemMasterBin");

        e.preventDefault();
        $('#NarroSearchClear').click();
    });



    function onSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#OldLocationName").val("");
            $("#OldLocationName").focus();
        }
        else if (idValue == 0) {
            $("#OldLocationName").val("");
            $("#OldLocationName").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {

                var _IsArchived = false;
                var _IsDeleted = false;

                if (typeof ($('#IsArchivedRecords')) != undefined)
                    _IsArchived = $('#IsArchivedRecords').is(':checked');

                if (typeof ($('#IsDeletedRecords')) != undefined)
                    _IsDeleted = $('#IsDeletedRecords').is(':checked');

                SwitchTextTab(0, 'ItemMasterBinList', 'frmItemMasterBin');
            }

        }
        else if (idValue != '') {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#BarcodeString").focus();
            }
            else {

                clearControls('frmItemMasterBin');
                SwitchTextTab(0, 'ItemMasterBinList', 'frmItemMasterBin');
                //window.location.href = "ItemMasterBinList";
                $("div#tab1").hide();
            }
        }
        return false;
    }
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);

        showNotificationDialog();
        $("#AssetName").focus();
    }

    $(document).ready(function () {



        //$.ajaxSetup({
        //    beforeSend: function (req) {
        //        $('#DivLoading').show();
        //    },
        //    complete: function (req) {
        //        $('#DivLoading').hide();
        //    }
        //});
        $('#btnCancel').click(function (e) {
            SwitchTextTab(0, 'ItemMasterBinList', 'frmItemMasterBin');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();
            }
            $("div#tab1").hide();
            $('#NarroSearchClear').click();
        });

        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });


    });

</script>
@if (isUpdate != false && isInsert != false)
{
    <script>
        $(document).ready(function () {

        });
    </script>
}

<script type="text/javascript">
    $(document).ready(function () {



    });
    _Common.addRequiredSign();
</script>
