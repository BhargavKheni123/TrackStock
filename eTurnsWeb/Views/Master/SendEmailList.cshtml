@{
    ViewBag.Title = "Send Email History";
    var settings = new GridHeaderSettings()
    {
        dataViewType = DataViewType.None,
        ShowSelectAll = true,
        DataTableName = "myDataTable",
        ListViewhref = "#",
        GroupedViewhref = string.Empty,
        DisplayUDFButton = false,
        UDFSetupFor = "SendEmailList&UDFHeader=SendEmail",
        DisplaySettings = false,
        DisplayColumnSetupButton = false,
        ColumnSetupFor = "SendEmailList",
        DisplayDeleteButton = false,
        DisplayPrintBlock = false,
        DisplayGoToPage = false,
        ModuleName = "SendEmailList"
    };
    eTurns.DAL.RegionSettingDAL objRegionSettingDAL = new eTurns.DAL.RegionSettingDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    DateTime dtToDate = objRegionSettingDAL.GetCurrentDatetimebyTimeZone(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, 0);
    DateTime dtFromDate = dtToDate.AddDays(-2);
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "SendEmailList" };
    string CartCoockiename = "DefaultSendEmailListview_" + eTurnsWeb.Helper.SessionHelper.UserID;
    bool isInsert = true;
    bool isUpdate = true;
    bool isView = true;
    bool HasOnTheFlyEntryRight = true;
    bool IsShowChangeLog = true;
    string ReportPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/SendEmail.pdf", DateTime.Now.Ticks);
    long RoleID = eTurnsWeb.Helper.SessionHelper.RoleID;
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    string strToDate = FnCommon.ConvertDateByTimeZone(dtToDate, false, true);
    string strFromDate = FnCommon.ConvertDateByTimeZone(dtFromDate, false, true);
}
<style type="text/css">

</style>
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
<script type='text/javascript' src="@Url.Content("~/Content/OpenAccess/jquery.cookie.js")"></script>
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/SiteScripts.js?v=" + version)"></script>

    <script language="javascript" type="text/javascript">

        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Master/DeleteSendEmailRecords";
        var sImageUrl = "/Content/images/";
        var anOpen = [];
        var objColumns = {};
        //var PostCount = 0;
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var SelectedHistoryRecordID = 0;
        var HistorySelected;
        var ReportUniqueID = '';
        var IsReloadItemList = false;

        var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', false, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true),

        ];


    function callbacknew() {
        if ($('#IsDeletedRecords').is(':checked')) {
            $('#undeleteRows').css('display', '');
            $('#deleteRows').css('display', 'none');
        }
        else {
            $('#undeleteRows').css('display', 'none');
            $('#deleteRows').css('display', '');
        }

        ShowNewTab('ReportCreate', 'frmReport');
    }
    function callbackhistory() {
        $('#deleteRows').css('display', 'none');
        $('#undeleteRows').css('display', 'none');
        if (IsEditMode) {
            IsEditMode = false;
        }
        if (IsReloadItemList == true) {
            $('#myDataTable').dataTable().fnDraw();
            IsReloadItemList = false;
        }
        $("div#tab1").hide();
    }

        var ReqListColumnsArr = new Array();
        ReqListColumnsArr.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });

        ReqListColumnsArr.push({
            "mDataProp": "emailHistoryID", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "eMailToSendID", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "ToAddress", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "CCAddress", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "BCCAddress", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "Subject", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "EnterpriseID", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "CompanyID", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "RoomID", "sClass": "read_only" });

        ReqListColumnsArr.push({
            "mDataProp": "HasAttachment", "sClass": "read_only",
            "fnRender": function (obj, val) {
                            return GetBoolInFormat(obj, val);
                        }
        });

        ReqListColumnsArr.push({ "mDataProp": "Remarks", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "SendingTried", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "CreatedOn", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.CreatedDate; } });

        ReqListColumnsArr.push({ "mDataProp": "HistoryCreatedOn", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.HistoryDate; } });


        ReqListColumnsArr.push({
            mDataProp: null, sDefaultContent: '', bSortable: false, sClass: "read_only", fnRender: function (obj, val) {
                if (obj.aData.HasAttachment == "No" || obj.aData.HasAttachment == false) {
                    return "<span>" + 'N/A' + "</span><input type='hidden' name ='hdneMailToSendID' id='hdneMailToSendID' value='" + obj.aData.eMailToSendID.toString() + "' />";
                }
                else {
                    return "<input type='hidden' name ='hdnattachHistory' id='hdnattachHistory' value='" + obj.aData.attachHistoryID.toString() + "' /><a href='javascript:void(0);' data-attid='" + obj.aData.attachHistoryID.toString() + "' onclick='return DownloadAttachment(this);' title='Download Attachment' id='lnkDownloadAttachment'><img src='@Url.Content("~/Content/Images/edit-icon.png")' /></a><input type='hidden' name ='hdneMailToSendID' id='hdneMailToSendID' value='" + obj.aData.eMailToSendID.toString() + "' />";
                }
            }
        });

        ReqListColumnsArr.push({ "mDataProp": "ErrorDescription", "sClass": "read_only" });

        $(document).ready(function () {
            $("#btnReSendEmail").hide();
            $('#SendEmailStatus').change(function () {
                if ($(this).val() == "successFlag") {
                    $("#btnReSendEmail").show();
                    if ($("#DateCFrom").length > 0) {
                        $("#DateCFrom").val('@strFromDate');
                    }
                    if ($("#DateCTo").length > 0) {
                        $("#DateCTo").val('@strToDate');
                    }
                    DoNarrowSearch();
                }
                else if ($(this).val() == "failFlag") {
                    $("#btnReSendEmail").show();
                    $("input#NarroSearchClear").click();
                }
                else if ($(this).val() == "currentFlag") {
                    $("#btnReSendEmail").hide();
                    $("input#NarroSearchClear").click();
                }

                //

            });

            $('.dataTables_length').attr('style', 'left:0;top:-35px !important');
            $('.dataTables_paginate').attr('style', 'left: 145px;top:-24px !important');
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];




            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "150%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries',
                    "sLoadingRecords": '@eTurns.DTO.Resources.ResMessage.MsgLoading'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {

                    if (oData.oSearch != null)
                        oData.oSearch.sSearch = "";
                    //if (PostCount > 1) {
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'SendEmailList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                    //}
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'SendEmailList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Master/SendEmailListAJAX")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    //PostCount = PostCount + 1;
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }


                    if (oSettings.aaSorting.length != 0)
                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });


                    aoData.push({ "name": "ActionFilter", "value": $('#SendEmailStatus').val() });


                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        cache: false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                            CallShowHideData();

                        }
                    })
                },
                "fnInitComplete": function (oSettings, json) {

                    $('#divQTYLegends').show(1000);

                    $('.ColVis').detach().appendTo(".setting-arrow");

                },
                "aoColumns": ReqListColumnsArr,
            }).makeEditable({
                sUpdateURL: '@Url.Content("~/Master/UpdateData")'
            });

            $("#btnReSendEmail").click(function () {
                $('#DivLoading').show();
                var anSelected = fnGetSelected(oTable);
                var stringIDs = "";
                for (var i = 0; i <= anSelected.length - 1; i++) {
                    var IdS = $(anSelected[i]).find('#hdneMailToSendID').val();
                    if (stringIDs != "") {
                        stringIDs = stringIDs + "," + IdS;
                    }
                    else {
                        stringIDs = IdS;
                    }
                }
                if (stringIDs == "") {
                    $('#DivLoading').hide();
                    $("#spanGlobalMessage").html("@ResMessage.msgSelectRecordToReSend");
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                }
                else {
                    $.ajax({
                        "url": '/Master/ReSendSelectedEmails',
                        "data": { EmailIDs: stringIDs, ActionFilter : $('#SendEmailStatus').val() },
                        "dataType": "json",
                        "type": "POST",
                        "success": function (response) {
                            $('#DivLoading').hide();
                            if (response.Status) {
                                $("#myDataTable").find("tbody tr").removeClass("row_selected")
                                alert("@ResMessage.ReSendSuccessfully");
                            }
                            else {
                                $('#DivLoading').hide();
                                alert(response.Message);
                            }
                        },
                        "error": function (response) {
                            $('#DivLoading').hide();
                            alert('@ResCommon.ErrorInProcess');
                        }
                    });
                }
            });

            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');



        });

        function DownloadAttachment(objLnk) {
            if ($(objLnk)[0].id == 'lnkDownloadAttachment') {
                var vHistoryID = $(objLnk).attr("data-attid");
                if (vHistoryID !== null && parseInt(vHistoryID) > 0) {
                    $.ajax({
                        "url": '/Master/DownloadEmailAttachment',
                        "data": { attHistoryID: vHistoryID, 'actionFilter': $('#SendEmailStatus').val() },
                        "dataType": "json",
                        "type": "POST",
                        "success": function (response) {
                            $('#DivLoading').hide();
                            if (response.Status) {
                                var url = window.location.protocol + '//' + window.location.host + response.AttachedFileURL;
                                window.open(url, "_blank");
                            }
                            else {
                                $('#DivLoading').hide();
                                alert(response.Message);
                            }
                        },
                        "error": function (response) {
                            $('#DivLoading').hide();
                            alert('@ResCommon.ErrorInProcess');
                        }
                    });
                }
               return false;
            }
        }


        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.search);
            if (results == null)
                return "";
            else
                return decodeURIComponent(results[1].replace(/\+/g, " "));
        }

        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }


        function SendEmailNarroSearch(SendEmailDDLObject) {
            if ($(SendEmailDDLObject).val() != "") {
                SendEmailNarroSearchValue = $(SendEmailDDLObject).val();
                DoNarrowSearch();
            }
            else {
                SendEmailNarroSearchValue = '';
                DoNarrowSearch();
            }
        }



    </script>

}
<div class="userListingWrapper">

    <h2>
        Send Email Master
    </h2>

    <div class="Infoclass">
        <a href="#" target="_blank">
            <img src="~/Content/images/Info.png" alt="Help" />
        </a>
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'></ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings, 0)
            @Html.Partial("NarrowSearchLayout", modelCommon)
            <div class="userContent">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.HistoryID
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.eMailToSendID
                            </th>                            
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ToAddress
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CCAddress
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.BCCAddress
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.Subject
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.EnterpriseID
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CompanyID
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.Room
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.HasAttachment
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.Remarks
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.SendingTried
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.HistoryDate
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.DownloadAttachment
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ErrorDescription
                            </th>

                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div id="processing_message" style="display: none" title="Processing">
                    @eTurns.DTO.Resources.ResMessage.RequestProcessMessage
                </div>

            </div>
        </div>
        <div id="CtabCL" class="tabContener">
        </div>
    </div>
</div>

<script type="text/javascript">


</script>

<script type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
