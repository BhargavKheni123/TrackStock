@model IEnumerable<eTurns.DTO.UnitMasterDTO>
@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    ViewBag.Title = ResUnitMaster.PageTitle;
    bool IsForBOM = false;
    string ColumnSetupFor = string.Empty;
    string PageName = string.Empty;
    RouteValueDictionary obj = ViewContext.Controller.ControllerContext.RouteData.Values;
    string ControllerName = Convert.ToString(obj["controller"]);
    string ActionName = Convert.ToString(obj["action"]);
    if (ControllerName.ToLower() == "master")
    {
        ColumnSetupFor = "UnitMasterList";
        PageName = "UnitMaster";
    }
    if (ControllerName.ToLower() == "bom")
    {
        ColumnSetupFor = "BomUnitMasterList";
        PageName = "BomUnitMaster";
        IsForBOM = true;
    }
    var settings = new GridHeaderSettings() { DisplaySaveButton = false, ShowSelectAll = true, DisplayUDFButton = false, UDFSetupFor = "Units&UDFHeader=" + @ResUnitMaster.PageHeader, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = ColumnSetupFor };
    if (IsForBOM)
    {
        settings.DisplayUDFButton = false;
    }
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = PageName };
    string UnitsPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Units.pdf", DateTime.Now.Ticks);
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Units", (int)HelpDocType.Module);
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script language="javascript" type="text/javascript">
        var oTable;
        var isForBom = '@IsForBOM';
        var IsRefreshGrid = false;
        var deleteURL = "/Master/DeleteUnitMasterRecords";
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var SelectedHistoryRecordID = 0;
        var objColumns = {};
        $(document).ready(function () {
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "150%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries',
                    "sLoadingRecords": '@eTurns.DTO.Resources.ResMessage.MsgLoading'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (aData.IsDeleted == true && aData.IsArchived == true)
                        // nRow.className = "GridDeleatedArchivedRow";
                        $(nRow).css('background-color', '#B9BCBF');
                    else if (aData.IsDeleted == true)
                        //  nRow.className = "GridDeletedRow";
                        $(nRow).css('background-color', '#FFCCCC');
                    else if (aData.IsArchived == true)
                        // nRow.className = "GridArchivedRow";
                        $(nRow).css('background-color', '#CCFFCC');
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";

                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: '@ColumnSetupFor' },
                        "async": false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: '@ColumnSetupFor' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Master/GetUnitList")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }

                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    if (oSettings.aaSorting.length != 0)
                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                    aoData.push({ "name": "IsForBom", "value": "@IsForBOM" });

                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                },
                "aoColumns": [
                    { mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' },
			                { "mDataProp": "ID", "sClass": "read_only" },
			                {
			                    "mDataProp": "Unit",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false,
			                    "fnRender": function (obj, val) {
			                        return "<a id='aEditLink' onclick='return ShowEditTab(&quot;/Master/UnitEdit/" + obj.aData.ID + "&quot;,&quot;frmUnit&quot;)' href='JavaScript:void(0);'>" + obj.aData.Unit + "</a>";
			                    }
			                },
                            { "mDataProp": "Description", "sClass": "read_only" },
//                            { "mDataProp": "Odometer", "sClass": "read_only" },
//                            { "mDataProp": "OdometerUpdate", "sClass": "read_only" ,
//			                    "fnRender": function (obj, val) {
//			                        return GetDateInFullFormat(val);
//			                    }},
//                            { "mDataProp": "OpHours", "sClass": "read_only" },
//                            { "mDataProp": "OpHoursUpdate", "sClass": "read_only" ,
//			                    "fnRender": function (obj, val) {
//			                        return GetDateInFullFormat(val);
//			                    }},
//                            { "mDataProp": "Year", "sClass": "read_only" },
//                            { "mDataProp": "Make", "sClass": "read_only" },
//                            { "mDataProp": "Model", "sClass": "read_only" },
//                            { "mDataProp": "Plate", "sClass": "read_only" },
//                            { "mDataProp": "SerialNo", "sClass": "read_only" },
//                            { "mDataProp": "EngineModel", "sClass": "read_only" },
//                              { "mDataProp": "EngineSerialNo", "sClass": "read_only" },
//                            { "mDataProp": "MarkupParts", "sClass": "read_only" },
//                            { "mDataProp": "MarkupLabour", "sClass": "read_only" },

//			                { "mDataProp": "RoomName", "sClass": "read_only" },
			                {
			                    "mDataProp": "Created", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        //return GetDateInFullFormat(val);
			                        return obj.aData.CreatedDate;
			                    }
			                },
			                {
			                    "mDataProp": "Updated", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        // return GetDateInFullFormat(val);
			                        return obj.aData.UpdatedDate;
			                    }
			                },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "EditedFrom", "sClass": "read_only" },
                            {
                                "mDataProp": "ReceivedOn", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    return obj.aData.ReceivedOnDate;
                                }
                            },
			                {
			                    "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return obj.aData.ReceivedOnDateWeb;
			                    }
			                }
//                            { "mDataProp": "ReceivedOnDate", "sClass": "read_only" },
//                            { "mDataProp": "ReceivedOnDateWeb", "sClass": "read_only" }

                            @Html.RenderColumnsArray("UnitMaster")
                ]
            }).makeEditable({
                sUpdateURL: '@Url.Content("~/Master/UpdateUnitMasterData")'
            });
            $('.DTTT_container').css('z-index', '-1');

            $('#myDataTable').on('tap click', 'a[id^="aEditLink"]', function () {
                var tr = $(this).parent().parent();
                $("#myDataTable").find("tbody tr").removeClass("row_selected");
                $(tr).addClass('row_selected');

            });

        });


        /* HISTORY related data deleated and archived START */
        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }
        function HistoryTabClick() {
            GetHistoryData();
        }
        function GetHistoryData() {

            HistorySelected = fnGetSelected(oTable);
            if (HistorySelected != undefined && HistorySelected.length == 1) {
                //                if(SelectedHistoryRecordID != HistorySelected[0].id)
                //                {
                SelectedHistoryRecordID = HistorySelected[0].id;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabCL").show();
                $('#CtabCL').load('/master/UnitHistory', function () { $('#DivLoading').hide(); });
                //}
            }
            else {
                $('#CtabCL').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                //$('div#target').fadeToggle();
                //$("div#target").delay(2000).fadeOut(200);
                showNotificationDialog();
                return false;
            }
        }
        /* HISTORY related data deleated and archived END */

    </script>
}
<script type="text/javascript">
    var isTabClick = false;
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true),

    ];

    if ('@IsShowChangeLog.ToString().ToUpper()' == 'TRUE') {
        TabsArry.push(new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true));
    }
    function callbacknew() { window.location.hash = '#new'; ShowNewTab('/Master/UnitCreate?isforbom=' + '@IsForBOM', 'frmUnit'); }
    function callbackhistory() { window.location.hash = '#list'; } //HistoryTabClick(); }
    function callbackCL() { window.location.hash = ''; HistoryTabClick(); }
    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
        }
    }

    $(document).ready(function () {
        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
        //SetTabView();
    });
</script>
<div class="userListingWrapper">
    <h2>
        @ResUnitMaster.PageHeader</h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'>
        </ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" /></a>
                    </div>
                    @*<input type="button" value="Search" class="searchBtn" />*@
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.UnitMaster)
            @Html.Partial("NarrowSearchLayout", modelCommon)
            <div class="userContent">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @ResCommon.ID
                            </th>
                            <th>
                                @ResUnitMaster.Unit
                            </th>
                            <th>
                                @ResUnitMaster.Description
                            </th>                            
                            <th>
                                @ResCommon.CreatedOn
                            </th>
                            <th>
                                @ResCommon.UpdatedOn
                            </th>
                            <th>
                                @ResCommon.UpdatedBy
                            </th>
                            <th>
                                @ResCommon.CreatedBy
                            </th>
                            <th>
                                @ResCommon.AddedFrom
                            </th>
                            <th>
                                @ResCommon.EditedFrom
                            </th>
                            <th>
                                @ResCommon.ReceivedOnDate
                            </th>
                            <th>
                                @ResCommon.ReceivedOnWebDate
                            </th>
                            @Html.RenderColumnsHeader("UnitMaster", typeof(eTurns.DTO.ResUnitMaster))
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
                <button id="btnAddNewCompany" value="Ok" style="display: none">
                    @ResCommon.AddNew</button>
                <button id="btnDeleteCompany" value="cancel" style="display: none">
                    Delete Selected</button>
                <div id="processing_message" style="display: none" title="Processing">
                    @ResMessage.RequestProcessMessage
                </div>
            </div>
        </div>
        <div id='CtabCL' class="tabContener">
        </div>
    </div>
</div>
<script>
    @*var objColumns = {
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ID)': 0,
        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.Unit)': 1,
        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.Description)': 2,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.Odometer)': 3,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.OdometerUpdate)': 4,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.OpHours)': 5,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.OpHoursUpdate)': 6,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.Year)': 7,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.Make)': 8,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.Model)': 9,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.Plate)': 10,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.SerialNo)': 11,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.EngineModel)': 12,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.EngineSerialNo)': 13,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.MarkupParts)': 14,
        //        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.MarkupLabour)': 15,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.RoomName)': 16,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedOn)': 17,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedOn)': 18,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedBy)': 19,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedBy)': 20,
        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.UDF1)': 21,
        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.UDF2)': 22,
        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.UDF3)': 23,
        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.UDF4)': 24,
        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.UDF5)': 25,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ReceivedOn)': 26,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.AddedFrom)': 27,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.EditedFrom)': 28,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ReceivedOnDate)': 29,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate)': 30
        
    };*@

</script>

<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
