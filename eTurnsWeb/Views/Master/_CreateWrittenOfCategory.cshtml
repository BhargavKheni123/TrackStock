@model eTurns.DTO.WrittenOfCategoryDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
@{
    bool isUpdate;
    bool isInsert;
    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
    }
    else
    {
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.WrittenOffCategory, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.WrittenOffCategory, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    }
}
@using (Ajax.BeginForm("WrittenOfCategorySave", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnSuccess = "onWOFSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmwrittenofcategory" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Room)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.CreatedDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.UpdatedDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.WrittenOffCategory)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.WrittenOffCategory, new { id = "txtWrittenOffCategory", @class = "text-box", maxlength = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WrittenOffCategory)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenwrtcategoryID" })
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.Created)
                        @Html.HiddenFor(model => model.Updated)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.LastUpdatedBy)
                        @Html.HiddenFor(model => model.CompanyID)
                        @Html.HiddenFor(model => model.Room)
                        @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                        @Html.HiddenFor(model => model.IsDeleted)
                        @Html.HiddenFor(model => model.IsArchived)
                        @Html.HiddenFor(model => model.isForBOM)
                    </div>
                </li>
                @*@Html.Partial("UDFLayout", new eTurns.DTO.ResManufacturer())*@
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnManuCancel" class="CreateBtn" />
                        @if (isInsert == true && Model.ID == 0)
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == true)
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == false && isInsert == false)
                        {
                            <script>
                                //This is the case when archived or deleted record is being viewed..
                                disableControls('frmwrittenofcategory');
                                $('#btnManuCancel').removeAttr('disabled');
                            </script>
                        }
                    </div>
                </li>
            </ul>
        </div>
        @* <div class="BtnBlockform">
                <input type="button" value="Cancel" id="btnManuCancel" class="CreateBtn" />
                <input type="button" value="Cancel" id="btnManuCancel" class="CreateBtn" />
                <input type="submit" value="Save" id="btnSave" class="CreateBtn" />
            </div>*@
    </div>
}
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmwrittenofcategory");
        @*if ($(this).valid()) {
            //rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }*@
        e.preventDefault();
        $('#NarroSearchClear').click();
    });
</script>
<script language="javascript" type="text/javascript">
    function onWOFSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idManuValue = $("#hiddenwrtcategoryID").val();
        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#txtWrittenOffCategory").val("");
            $("#txtWrittenOffCategory").focus();
        }
        else if (idManuValue == 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            }
            else {
                $("#txtWrittenOffCategory").focus();
                if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0) {
                    $('#NewMasterPopUP').data("IDVal", response.NewIDForPopUp + '~' + $("#txtWrittenOffCategory").val()).dialog('close');
                }
                else {
                    clearControls('frmwrittenofcategory');
                    //setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                    ShowNewTab('/Master/WrittenOfCategoryCreate', 'frmwrittenofcategory');
                }
            }
        }
        else if (idManuValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#txtWrittenOffCategory").val("");
                $("#txtWrittenOffCategory").focus();
            }
            else
                SwitchTextTab(0, 'WrittenOfCategoryCreate', 'frmwrittenofcategory');
        }
    }
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#txtWrittenOffCategory").focus();
    }

    $(document).ready(function () {
        $('form').areYouSure();
        $('#btnManuCancel').click(function (e) {
            if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0)
                $('#NewMasterPopUP').dialog('close');
            else {
                SwitchTextTab(0, 'ManufacturerCreate', 'frmManufacturer');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
            }
            $('#NarroSearchClear').click();
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
    });
    _Common.addRequiredSign();
</script>
