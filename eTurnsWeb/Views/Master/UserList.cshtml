@model IEnumerable<eTurns.DTO.UserMasterDTO>
@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    ViewBag.Title = ResUserMaster.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayUDFButton = true, DisplayColumnSetupButton = true, ColumnSetupFor = "UserList", ShowDelete = true, UDFSetupFor = "UserMaster&UDFHeader=Users", ShowSelectAll = true };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "UserMaster" };
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    string UsersPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Users.pdf", DateTime.Now.Ticks);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Users", (int)HelpDocType.Module);
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script type="text/javascript">
        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Master/DeleteUserRecords";
        var PostCount = 0;
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var objColumns = {};


        var columnsarr = new Array();
        if (true) {

        }
        columnsarr.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });
        if ('@eTurnsWeb.Helper.SessionHelper.RoleID' == "-1" || '@eTurnsWeb.Helper.SessionHelper.RoleID' == "-2") {

            columnsarr.push({
                "mDataProp": "EnterPriseSuperAdminID",
                "sClass": "read_only",
                "bSortable": false,
                "bSearchable": false,
                "bVisible": true,
                "fnRender": function (obj, val) {
                    if (obj.aData.UserType == "2" && obj.aData.RoleID != "-2" && ('@eTurnsWeb.Helper.SessionHelper.RoleID' == "-1" || '@eTurnsWeb.Helper.SessionHelper.RoleID' == "-2")) {
                        return '<input type="button" id="btnConvertAdmin" class="CreateBtn" value="' + '@ResCommon.EnterpriseAdminRole' + '" onclick="ConvertenterpriseAdmin(' + obj.aData.ID + "," + obj.aData.EnterpriseId + ');"/>';
                    }
                    else {
                        if (obj.aData.UserType == "2" && obj.aData.RoleID == "-2" && ('@eTurnsWeb.Helper.SessionHelper.RoleID' == "-1" || '@eTurnsWeb.Helper.SessionHelper.RoleID' == "-2")) {
                            return '<input type="button" id="btnConvertAdmin"  class="CreateBtn"  value="' + '@ResCommon.AssignPrevRole' + '" onclick="AssignNormalRole(' + obj.aData.ID + "," + obj.aData.EnterpriseId + ');"/>';
                        }
                        else if(obj.aData.UserType == "3")
                        {
                            return '<input type="button" id="btnConverttoEnterpriseAdmin"  class="CreateBtn"  value="Prompt for Enterprise User" onclick="AssignEnterpriseAdmin(' + obj.aData.ID + ');"/>';
                        }
                        else {
                            return '';
                        }
                    }
                }
            });
        }
        columnsarr.push({
            "mDataProp": "UserName",
            "sClass": "read_only",
            "sDefaultContent": '',
            "bSortable": true,
            "bSearchable": false,
            "fnRender": function (obj, val) {

                //			                        return "<a onclick='return ShowEditTab(&quot;UserEdit/" + obj.aData.ID + "&quot;,&quot;frmUser&quot;)' href='JavaScript:void(0);'>" + obj.aData.UserName + "</a>";
                if (obj.aData.IsDeleted != null && obj.aData.IsDeleted == false) {
                    return "<a id='aEditLink' href='javascript:void(0);' onclick='RoleDetailsClick(" + obj.aData.ID + "," + obj.aData.UserType + "," + obj.aData.RoleID + "," + obj.aData.EnterpriseId + ");'>" + obj.aData.UserName + "</a>" + '<input type="hidden" id="hdnGuid" value=' + obj.aData.GUID + ' />' + '<input type="hidden" id="hdnId" value=' + obj.aData.ID + ' />';
                }else
                {
                    return obj.aData.UserName;
                }
            }
        });
        columnsarr.push({ "mDataProp": "RoleName", "sClass": "read_only" },
        { "mDataProp": "UserTypeName", "sClass": "read_only" },
        { "mDataProp": "Email", "sClass": "read_only" },
        { "mDataProp": "Phone", "sClass": "read_only" },
        {
            "mDataProp": "Created", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.CreatedDate;
            }
        },
        {
            "mDataProp": "Updated", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.UpdatedDate;
            }
        },
        { "mDataProp": "UpdatedByName", "sClass": "read_only" }
, { "mDataProp": "CreatedByName", "sClass": "read_only" },
        {
            "mDataProp": "FirstLicenceAccept", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.FirstLicenceAcceptStr;
            }
        }
        , {
            "mDataProp": "LastLicenceAccept", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.LastLicenceAcceptStr;
            }
        }
        , { "mDataProp": "Acceptcount", "sClass": "read_only" }
        , {
            "mDataProp": "LastSyncDateTime", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.LastSyncDateTimeStr;
            }
        }
        , { "mDataProp": "PDABuildVersion", "sClass": "read_only" }
        , {
            "mDataProp": "LastLogin", "sClass": "read_only",
            "fnRender": function (obj, val) {
                return obj.aData.LastLoginStr;
            }
           }
         , {
             "mDataProp": "EnforceRolePermission", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.EnforceRolePermission
                }
            }
            , {
                "mDataProp": "FullName", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.FullName
                }
            }
            , {
                "mDataProp": "EmployeeNumber", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.EmployeeNumber
                }
            }
            , {
                "mDataProp": "CostCenter", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.CostCenter
                }
            }
            , {
                "mDataProp": "JobTitle", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.JobTitle
                }
            }
            , {
                "mDataProp": "Address", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.Address
                }
            }
            , {
                "mDataProp": "City", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.City
                }
            }
            , {
                "mDataProp": "State", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.State
                }
            }
            , {
                "mDataProp": "PostalCode", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.PostalCode
                }
            }
            , {
                "mDataProp": "Phone2", "sClass": "read_only",
                "fnRender": function (obj, val) {
                    return obj.aData.Phone2
                }
            }
         
         @Html.RenderColumnsArray("UserMaster")           
        );

        $(document).ready(function () {

            objColumns = GetGridHeaderColumnsObject('myDataTable');
            $('#btndownload').click(function () {

                $.ajax({
                    "url": '/Export/ExportEnterpriseUserList',
                    "data": { EntId: '1' },
                    "dataType": "json",
                    "type": "POST",
                    "success": function (response) {

                        window.open("../../Downloads/" + response, "_self");

                    },
                    "error": function (response) {

                        window.open("../../Downloads/" + response, "_self");

                    }
                });

            });
            setTimeout(function () {
                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": '@Url.Action("ClearUserListSession", "Master")',
                    "success": function (retdata) {

                    }
                })

            }, 5000);
            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "150%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[3, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries',
                    "sLoadingRecords": '@eTurns.DTO.Resources.ResMessage.MsgLoading'
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'UserList' },
                        "async": false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'UserList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Master/UserListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    //                    if (oSettings.aaSorting.length != 0)
                    //                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    //                    else
                    //                        aoData.push({ "name": "SortingField", "value": "0" });
                    if (oSettings.aaSorting.length != 0) {
                        //aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                        var sortValue = "";
                        for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];

                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });
                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                        }
                    })
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (aData.IsDeleted == true && aData.IsArchived == true)
                        $(nRow).css('background-color', '#B9BCBF');
                        //   nRow.className = "GridDeleatedArchivedRow";
                    else if (aData.IsDeleted == true)
                        $(nRow).css('background-color', '#FFCCCC');
                        // nRow.className = "GridDeletedRow";
                    else if (aData.IsArchived == true)
                        $(nRow).css('background-color', '#CCFFCC');
                    //nRow.className = "GridArchivedRow";
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                },
                "aoColumns": columnsarr
            }).makeEditable({
                sUpdateURL: '@Url.Content("~/Master/UpdateUserData")'
            });
            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');


            $('#myDataTable').on('tap click', 'a[id^="aEditLink"]', function () {
                var tr = $(this).parent().parent();
                $("#myDataTable").find("tbody tr").removeClass("row_selected");
                $(tr).addClass('row_selected');

            });

        });

        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }
        function ConvertenterpriseAdmin(UserId, EnterpriseId) {
            $('#DivLoading').show();
            $.ajax({
                "url": '/Master/ConvertentEnterpriseAdmin',
                "data": { 'UserId': UserId, 'EnterpriseId': EnterpriseId },
                "dataType": "json",
                "type": "POST",
                "success": function (response) {
                    oTable.fnDraw();
                },
                "error": function (response) {

                }, complete: function () {
                    $('#DivLoading').hide();
                }
            });
        }
        function AssignNormalRole(UserId, EnterpriseId) {
            $('#DivLoading').show();
            $.ajax({
                "url": '/Master/AssignNormalRole',
                "data": { 'UserId': UserId, 'EnterpriseId': EnterpriseId },
                "dataType": "json",
                "type": "POST",
                "success": function (response) {
                    if (response.Status == 'Success') {
                        oTable.fnDraw();
                    }
                    else if (response.Status == 'cantrevert' || response.Status == 'fail') {
                        alert('@ResCommon.RevertRoleFailtMsg');
                    }
                },
                "error": function (response) {

                }, complete: function () {
                    $('#DivLoading').hide();
                }
            });
        }


        function AssignEnterpriseAdmin(UserId) {
            $("#NewRoleForEnterPriseUserPopup").dialog({
                autoOpen: true,
                modal: true,
                width: 400,
                height:200,
                draggable: true,
                resizable: true,
                open: function () {
                    $.ajax({
                        "url": '@Url.Action("SelectRoleForEnterpriseUser", "Master")',
                        "data": JSON.stringify({ 'UserType': '2', 'UserId': UserId }),
                        "type": 'POST',
                        "async": false,
                        "cache": false,
                        "dataType": "text",
                        "contentType": "application/json",
                        "success": function (response) {
                            $("#NewRoleForEnterPriseUserPopup").html(response);
                            $('#DivLoading').hide();
                        },
                        "error": function (err) {
                            $('#DivLoading').hide();
                        }
                    });
                },
                close: function () {
                    $(this).empty();
                }
            });
        }

        function UserRoleChangeLogTabClick() {

           //alert('In changelog tab');
            var HistorySelected = fnGetSelected(oTable);
            if (HistorySelected != undefined && HistorySelected.length == 1) {
                var userid = $(HistorySelected)[0].id;
                SelectedHistoryRecordID = userid;
                //alert('In changelog tab userid - ' + userid);
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabURCL").show();
                $('#CtabURCL').load('/Master/UserRoleChangeLog?UserID=' + userid + '', function () { $('#DivLoading').hide(); });
            }
            else {
                $('#CtabURCL').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                return false;
            }
        }

    </script>
}
<script type="text/javascript">
    var isTabClick = false;
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true)
    ];
    if ('@IsShowChangeLog.ToString().ToUpper()' == 'TRUE') {
        TabsArry.push(new TabClass("tab6", '@eTurns.DTO.Resources.ResCommon.ChangeLog', "callbackUserRoleChangeLog();", false, true));
    }
    function callbacknew() { window.location.hash = '#new';  ShowNewTab('UserCreate', 'frmUser'); }
    function callbackhistory() { window.location.hash = '#list'; } //HistoryTabClick(); }
    function callbackUserRoleChangeLog() { window.location.hash = ''; UserRoleChangeLogTabClick(); }
    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
        }
    }

    $(document).ready(function () {
        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });
        //SetTabView();
    });
</script>
<div class="userListingWrapper">
    <h2>
        @ResUserMaster.PageHeader
    </h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'></ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                    @*<input type="button" value="Search" class="searchBtn" />*@
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.UserMaster)
            @*NARROW SEARCH STARTS HERE*@
            @Html.Partial("NarrowSearchLayout", modelCommon)
            @*NARROW SEARCH STARTS HERE*@
            <div class="userContent">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            @if (eTurnsWeb.Helper.SessionHelper.RoleID == -1 || eTurnsWeb.Helper.SessionHelper.RoleID == -2)
                            {
                                <th>
                                    @ResCommon.ActionUpdate
                                </th>
                            }
                            <th>
                                @ResUserMaster.UserName
                            </th>
                            <th>
                                @ResUserMaster.Role
                            </th>
                            <th>
                                @ResUserMaster.UserTypeName
                            </th>
                            <th>
                                @ResUserMaster.EmailAddress
                            </th>
                            <th>
                                @ResUserMaster.PhoneNumber
                            </th>
                            <th>
                                @ResCommon.CreatedOn
                            </th>
                            <th>
                                @ResCommon.UpdatedOn
                            </th>
                            <th>
                                @ResCommon.UpdatedBy
                            </th>
                            <th>
                                @ResCommon.CreatedBy
                            </th>
                            <th>
                                @ResCommon.FirstLicenceAccept
                            </th>
                            <th>
                                @ResCommon.LastLicenceAccept
                            </th>
                            <th>
                                @ResCommon.LicenceAcceptCount
                            </th>
                            <th>
                                @ResUserMaster.LastSyncDateTime
                            </th>
                            <th>
                                @ResUserMaster.PDABuildVersion
                            </th>
                            <th>
                                @ResUserMaster.LastLogin
                            </th>
                            <th>
                                @ResUserMaster.EnforceRolePermission
                            </th>
                            <th>
                                @ResUserMaster.FullName
                            </th>
                            <th>
                                @ResUserMaster.EmployeeNumber
                            </th>
                            <th>
                                @ResUserMaster.CostCenter
                            </th>
                            <th>
                                @ResUserMaster.JobTitle
                            </th>
                            <th>
                                @ResUserMaster.Address
                            </th>
                            <th>
                                @ResUserMaster.City
                            </th>
                            <th>
                                @ResUserMaster.State
                            </th>
                            <th>
                                @ResUserMaster.PostalCode
                            </th>
                            <th>
                                @ResUserMaster.Phone2
                            </th>
                            @Html.RenderColumnsHeader("UserMaster", typeof(eTurns.DTO.ResUserMasterUDF))
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <button id="btnAddNewCompany" value="Ok" style="display: none">
                    @ResCommon.AddNew
                </button>
                <button id="btnDeleteCompany" value="cancel" style="display: none">
                    Delete Selected
                </button>
                <div id="processing_message" style="display: none" title="Processing">
                    @ResMessage.RequestProcessMessage
                </div>
            </div>
        </div>
        <div id='CtabURCL' class="tabContener">
        </div>
    </div>
</div>
<div id="NewRoleForEnterPriseUserPopup">
</div>
<script>
    @*var objColumns = {
        '@MvcHtmlString.Create(eTurns.DTO.ResUserMaster.UserName)': 0,
        '@MvcHtmlString.Create(eTurns.DTO.ResUserMaster.Role)': 1,
        '@MvcHtmlString.Create(eTurns.DTO.ResUserMaster.UserTypeName)': 2,
        '@MvcHtmlString.Create(eTurns.DTO.ResUserMaster.EmailAddress)': 3,
        '@MvcHtmlString.Create(eTurns.DTO.ResUserMaster.PhoneNumber)': 4,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedOn)': 5,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedOn)': 6,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedBy)': 7,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedBy)': 8
    };*@

    function RoleDetailsClick(userID, userType, roleID, EnterpriseID) {
        
        var paramsTopass = new Array();
        paramsTopass.push({ name: "UserType", value: userType });
        paramsTopass.push({ name: "EnterpriseID", value: EnterpriseID });
        if (userID == '@eTurnsWeb.Helper.SessionHelper.UserID' || roleID < 0) {
            return ShowEditTabWithParams("EditUserProfile/" + userID, "frmUserProfile", paramsTopass);
        }
        else {
            return ShowEditTabWithParams("UserEdit/" + userID, "frmUser", paramsTopass);
        }
    }


  

</script>

<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
<script>
    @if (Request.QueryString.Count > 0)
    {

        // /Master/UserList?mode=e&id=124223&rid=60282&eid=10059&typ=3
        string mode = Request.Params["mode"];
        if (mode == "e")
        {
            string userID = Request.Params["id"];
            string roleID = Request.Params["rid"];
            string type = Request.Params["typ"];
            string eId = Request.Params["eid"];
            <text>
    $(window).load(function () {
         setTimeout(
                     function () { RoleDetailsClick(@userID , @type , @roleID , @eId ); }, 1500);
                });

             //$(document).ready(function () {

             //   });
            </text>
        }
    }
</script>