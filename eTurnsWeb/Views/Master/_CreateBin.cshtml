@model eTurns.DTO.BinMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
<div class="userHead">
    @{             
        bool isUpdate;
        bool isInsert;
        if (ViewBag.ViewOnly == true)
        {
            isUpdate = false;
            isInsert = false;
        }
        else
        {
            isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
            isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.BinMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        }
        if (!Model.DefaultPullQuantity.HasValue)
        {
            Model.DefaultPullQuantity = 0;
        }
        if (!Model.DefaultReorderQuantity.HasValue)
        {
            Model.DefaultReorderQuantity = 0;
        }
        string stgCheckBox = "style=visibility:hidden;";
        if(Model.callFor == "INC")
        {
            stgCheckBox = "style=visibility:hidden;";
        }
        else
        {
            stgCheckBox = "style=visibility:visible;";
        }
    }
    @using (Ajax.BeginForm("BinSave", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onBinSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmBin" }))
    {   
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true) 
        if (Model.ID != 0)
        {        
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    @*: <span>@(Model.CreatedDate)</span></li>*@ : <span>@(Model.ReceivedOnDateWeb)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.LastUpdated)
                    </label>
                    : <span>@(Model.ReceivedOnDate)</span></li>
                @*: <span>@(Model.UpdatedDate)</span></li>*@
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        }         
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.BinNumber)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.BinNumber, new { id = "BinNumberNew", @class = "text-box", maxlength = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.BinNumber)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenBinID" })
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.Created)
                        @Html.HiddenFor(model => model.LastUpdated)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.LastUpdatedBy)
                        @Html.HiddenFor(model => model.CompanyID)
                        @Html.HiddenFor(model => model.Room)
                        @Html.HiddenFor(model => model.RoomName)
                        @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                        @Html.HiddenFor(model => model.IsDeleted)
                        @Html.HiddenFor(model => model.IsArchived)
                        @Html.HiddenFor(model => model.IsStagingHeader)
                        @Html.HiddenFor(model => model.ItemGUID)
                        @Html.HiddenFor(model => model.MinimumQuantity)
                        @Html.HiddenFor(model => model.MaximumQuantity)
                        @Html.HiddenFor(model => model.CriticalQuantity)
                        @Html.HiddenFor(model => model.ConsignedQuantity)
                        @Html.HiddenFor(model => model.SuggestedOrderQuantity)
                        @Html.HiddenFor(model => model.IsDefault)
                        @Html.HiddenFor(model => model.CustomerOwnedQuantity)
                        @Html.HiddenFor(model => model.ItemNumber)
                        @Html.HiddenFor(model => model.IsOnlyFromItemUI)
                        @Html.HiddenFor(model => model.DefaultReorderQuantity)
                        @Html.HiddenFor(model => model.DefaultPullQuantity)
                        @Html.HiddenFor(model => model.callFor)
                    </div>
                </li>
                <li @stgCheckBox>
                    <div class="editor-label">
                        @Html.Label(ResBin.IsStagingLocation)
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.IsStagingLocation, new { @id = "chkIsStagingLocation" })
                    </div>
                </li>
                @Html.Partial("UDFLayout", new eTurns.DTO.ResBin())
                @*<li>
                    <div class="editor-label">
                        @Html.Label("Item Number")
                    </div>
                    <div class="editor-field">
                        <span>@(Model.ItemNumber)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.Label("Critical Quantity")
                    </div>
                    <div class="editor-field">
                        <span>@(Model.CriticalQuantity)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.Label("Minimum Quantity")
                    </div>
                    <div class="editor-field">
                        <span>@(Model.MinimumQuantity)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.Label("Maximum Quantity")
                    </div>
                    <div class="editor-field">
                        <span>@(Model.MaximumQuantity)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.eVMISensorID)
                    </div>
                    <div class="editor-field">
                        <span>@(Model.eVMISensorID)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.eVMISensorPort)
                    </div>
                    <div class="editor-field">
                        <span>@(Model.eVMISensorPort)</span>
                    </div>
                </li>*@
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnBinCancel" class="CreateBtn" />
                        @if (isInsert == true && Model.ID == 0)
                        {                            
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />                            
                        }
                        else if (isUpdate == true)
                        {                            
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == false && isInsert == false)
                        {                             
                            <script>
                                //This is the case when archived or deleted record is being viewed..
                                disableControls('frmBin');
                                $('#btnBinCancel').removeAttr('disabled');
                            </script>
                        }
                    </div>
                </li>
            </ul>
        </div>                        
    }
</div>
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $("form").submit(function (e) {

        $.validator.unobtrusive.parse("#frmBin");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
        $('#NarroSearchClear').click();
    });
</script>
<script language="javascript" type="text/javascript">
    function onBinSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idBinValue = $("#hiddenBinID").val();
        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            //            $("#BinNumberNew").val("");
            $("#BinNumberNew").focus();
        }
        else if (idBinValue == 0) {
            //$("#BinNumberNew").val("");
            $("#BinNumberNew").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0) {
                    $('#NewMasterPopUP').data("IDVal", response.NewBinIDPopup + '~' + $("#BinNumberNew").val()).dialog('close');
                }
                else {
                    //                    clearControls('frmBin');
                    setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                    ShowNewTab('BinCreate', 'frmBin');
                }
            }
        }
        else if (idBinValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                //                $("#BinNumberNew").val("");
                $("#BinNumberNew").focus();
            }
            else
                SwitchTextTab(0, 'BinCreate', 'frmBin');
        }
    }
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#BinNumberNew").focus();
    }

    $(document).ready(function () {
        $('#btnBinCancel').click(function (e) {
            if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0)
                $('#NewMasterPopUP').dialog('close');
            else {
                SwitchTextTab(0, 'BinCreate', 'frmBin');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
            }
            $('#NarroSearchClear').click();
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');

        $('form').areYouSure({ 'message': MsgLostChangesConfirmation });
        //        $('input:not(:button,:submit),textarea,select').on('change', function () {
        //            //showSaveMessage();
        //            showSaveMessage(this.form);
        //            
        //        });
        //        $('form').areYouSure({ 'message': 'You have unsaved changes!'
        //        , change: function () {
        //            // Enable save button only if the form is dirty. i.e. something to save.
        //            if ($(this).hasClass('dirty')) {
        //                $(this).find('input[type="submit"]').removeAttr('disabled');
        //            } else {
        //                $(this).find('input[type="submit"]').attr('disabled', 'disabled');
        //            }
        //        }
        //         });
    });

    _Common.addRequiredSign();       
</script>
