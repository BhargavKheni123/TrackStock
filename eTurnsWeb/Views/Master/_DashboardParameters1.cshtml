@model eTurns.DTO.DashboardParameterDTO
@{
    ViewBag.Title = "_DashboardParameters1";
}
<div id="dvdashpara">
    <fieldset>
        <legend>DashboardParameterDTO</legend>
        <div class="editor-label">
            @Html.LabelFor(model => model.AUDayOfUsageToSample)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.AUDayOfUsageToSample, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.AUDaysOfDailyUsage)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.AUDaysOfDailyUsage, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.AUMeasureMethod)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.AUMeasureMethod, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.CompanyId)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.CompanyId, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.CreatedBy)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.CreatedBy, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.CreatedOn)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.CreatedOn, new { @class = "text-boxinner" })
        </div>
        @Html.HiddenFor(model => model.ID)
        <div class="editor-label">
            @Html.LabelFor(model => model.MinMaxDayOfAverage)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MinMaxDayOfAverage, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MinMaxDayOfUsageToSample)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MinMaxDayOfUsageToSample, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MinMaxMeasureMethod)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MinMaxMeasureMethod, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MinMaxMinNumberOfTimesMax)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MinMaxMinNumberOfTimesMax, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MinMaxOptValue1)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MinMaxOptValue1, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MinMaxOptValue2)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MinMaxOptValue2, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.RoomId)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.RoomId, new { @class = "text-boxinner" })
        </div>
       @* <div class="editor-label">
            @Html.LabelFor(model => model.TurnsBeginDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.TurnsBeginDate, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TurnsDayOfUsageToSample)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.TurnsDayOfUsageToSample, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TurnsEndDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.TurnsEndDate, new { @class = "text-boxinner" })
        </div>*@
        <div class="editor-label">
            @Html.LabelFor(model => model.TurnsMeasureMethod)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.TurnsMeasureMethod, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.UpdatedBy)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.UpdatedBy, new { @class = "text-boxinner" })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.UpdatedOn)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.UpdatedOn, new { @class = "text-boxinner" })
        </div>
        <br />
        <p>
            <input type="button" id="btnSaveParameters" value="@ResCommon.Save" />
        </p>
    </fieldset>
</div>
<script type="text/javascript">
    $(document).ready(function () {

        $("#btnSaveParameters").click(function () {
            var arritems = $("#dvdashpara").find("select,input").serializeArray();
            var datatopass = JSON.stringify(arritems);
            datatopass = $("#dvdashpara").find("select,input").serialize();
            alert(datatopass);
            $.post('@Url.Action("SaveDashboardParameters", "Master")', $("#dvdashpara").find("select,input").serialize(), function (json) {
                if (retdt.Status == "ok") {
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    $("#spanGlobalMessage").html(retdt.Message);
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                }
                else {
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    $("#spanGlobalMessage").html(retdt.Message);
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('errorIcon');
                }
            }, "json");

        });

    });
</script>
