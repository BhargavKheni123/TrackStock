@model eTurns.DTO.GLAccountMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}

    @{  
        bool isUpdate;
        bool isInsert;
        if (ViewBag.ViewOnly == true)
        {
            isUpdate = false;
            isInsert = false;
        }
        else
        {
            isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.GLAccountsMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
            isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.GLAccountsMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        }
    }
    @using (Ajax.BeginForm("GLAccountSave", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmGLAccount" }))
    {
        @Html.AntiForgeryToken()
        <div class="userHead">
        @Html.ValidationSummary(true)

        @if (Model.ID != 0)
        {        
        <div class="infoBlock">
            <ul>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.RoomName)
                    </label>
                    : <span>@(Model.RoomName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Created)
                    </label>
                    : <span>@(Model.CreatedDate)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.CreatedByName)
                    </label>
                    : <span>@(Model.CreatedByName)</span></li>
                <li>
                    <label for="RoomName">
                        @Html.LabelFor(model => model.Updated)
                    </label>
                    : <span>@(Model.UpdatedDate)</span></li>
                <li style="border: none">
                    <label for="RoomName">
                        @Html.LabelFor(model => model.UpdatedByName)
                    </label>
                    : <span>@(Model.UpdatedByName)</span></li>
            </ul>
        </div>
        } 
        
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.GLAccount)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.GLAccount, new { id = "GLAccount", @class = "text-box", maxlength = 128 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.GLAccount)</span>
                        @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                        @Html.HiddenFor(model => model.GUID)
                        @Html.HiddenFor(model => model.Created)
                        @Html.HiddenFor(model => model.Updated)
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.HiddenFor(model => model.LastUpdatedBy)
                        @Html.HiddenFor(model => model.CompanyID)
                        @Html.HiddenFor(model => model.Room)
                        @Html.HiddenFor(model => model.RoomName)
                        @Html.HiddenFor(model => model.CreatedByName)
                        @Html.HiddenFor(model => model.UpdatedByName)
                        @Html.HiddenFor(model => model.IsDeleted)
                        @Html.HiddenFor(model => model.IsArchived)
                        @Html.HiddenFor(model => model.isForBOM)
                        @Html.HiddenFor(model => model.RefBomId)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Description)
                    </div>
                    <div class="editor-field">
                        @Html.TextAreaFor(model => model.Description, new { id = "txtDescription", @class = "text-box", maxlength = 1024 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Description)</span>
                    </div>
                </li>
                @Html.Partial("UDFLayout", new eTurns.DTO.ResGLAccount())
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        @if (isInsert == true && Model.ID == 0)
                        {                            
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />                            
                        }
                        else if (isUpdate == true)
                        {                            
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == false && isInsert == false)
                        {                             
                            <script>
                                //This is the case when archived or deleted record is being viewed..
                                disableControls('frmGLAccount');
                            </script>
                        }
                    </div>
                </li>
            </ul>
        </div>
        </div>
    }

@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmGLAccount");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
        $('#NarroSearchClear').click();
    });    
</script>
<script language="javascript" type="text/javascript">
    //frmGLAccount
    function onSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#GLAccount").val("");
            $("#GLAccount").focus();
            $("#txtDescription").val("");
        }
        else if (idValue == 0) {
            $("#GLAccount").val("");
            $("#GLAccount").focus();
            $("#txtDescription").val("");

            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                clearControls('frmGLAccount');
                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#GLAccount").val("");
                $("#GLAccount").focus();
                $("#txtDescription").val("");

            }
            else {

                $("#txtDescription").val("");
                SwitchTextTab(0, 'GLAccountCreate', 'frmGLAccount');
            }
        }
    }
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#GLAccount").focus();
    }

    $(document).ready(function () {
        $('form').areYouSure();
        $('#btnCancel').click(function (e) {
            //            if (IsRefreshGrid)
            //                $('#NarroSearchClear').click();
            SwitchTextTab(0, 'GLAccountCreate', 'frmGLAccount');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();
            }
            $('#NarroSearchClear').click();
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
    });
    _Common.addRequiredSign();
</script>
