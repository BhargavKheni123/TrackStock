@{
    var Req_settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DataTableName = "myRequisitionDataTable", ListViewhref = "", PictureViewhref = "", DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "DashboardRequisitionDataTable", DisplayDeleteButton = false, DisplayGoToPage = false, ShowReorder = true, ReorderByDataTableName = true, ExportModuleName = "Requisition", ExportDashboardFromReportFile = true };
    var Proj_settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DataTableName = "myProjectDataTable", ListViewhref = "", PictureViewhref = "", DisplayUDFButton = false, UDFSetupFor = "", DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "DashboardProjectDataTable", DisplayDeleteButton = false, DisplayGoToPage = false, ShowReorder = true, ReorderByDataTableName = true, ExportModuleName = "Project Spend", ExportDashboardFromReportFile = true };

    bool IsRequisitionView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Requisitions, eTurnsWeb.Helper.SessionHelper.PermissionType.View);
    bool IsProjectSpendView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.View);

    string ReqChartURL = Url.Action("LoadChart", "ConsumeChart");
    string PSChartURL = Url.Action("LoadChart", "ProjectChart");
    string title = ResDashboard.Consume;
    var objRequisitionCount = new eTurnsWeb.Controllers.InventoryDashboardController();
    Session["IsInsert"] = "";
    eTurns.DAL.CommonDAL objCommon = new eTurns.DAL.CommonDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    List<RedCountDTO> lstRedCount = objCommon.GetRedCountByModuleType("Consume", eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.UserSupplierIds, eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowOrderToConsignedItem));
    List<RedCountDTO> lstReqRedCount = lstRedCount.Where(x => x.ModuleName == "Requisition").ToList();

    Int32 isNotSubmitted = 0;
    Int32 isNotApproved = 0;
    Int32 isNotConsumed = 0;
    if (lstReqRedCount != null && lstReqRedCount.Count > 0)
    {
        if (lstReqRedCount.Any(t => t.Status == "UnSubmitted"))
        {
            isNotSubmitted = lstReqRedCount.Where(x => x.Status == "UnSubmitted").First().RecCircleCount;
        }
        if (lstReqRedCount.Any(t => t.Status == "ToBeApproved"))
        {
            isNotApproved = lstReqRedCount.Where(x => x.Status == "ToBeApproved").First().RecCircleCount;
        }
        if (lstReqRedCount.Any(t => t.Status == "Approved"))
        {
            isNotConsumed = lstReqRedCount.Where(x => x.Status == "Approved").First().RecCircleCount;
        }
    }

    int iForRequisitionRedCount = isNotSubmitted + isNotApproved;

}
<div id="Consume" class="portlet ui-widget-content ui-helper-clearfix ui-corner-all">
    <input type="hidden" id="IsProjectCountCalled" name="IsProjectCountCalled" />

    <div class="portlet-header ui-widget-header ui-corner-top">
        <span class="forcolor">@title</span><a href="#" class="closeEl ui-icon ui-icon-triangle-1-n"></a>
    </div>
    <div class="portlet-content">
        <div id="dvConsume">
            <div style="float: left; width: 100%;">
                <div style="float: left; width: 100%;">
                    <div id="dvmain" class="Lnavd">
                        <ul>
                            
                            @if (IsRequisitionView)
                            {
                            <li class="imgclassd"><a id="lnkRequisition" title="Requisition" onclick="BindConsumeStatusGrid('lnkRequisition','Requisition')"
                                class="lia">@eTurns.DTO.ResDashboard.TabRequisition </a>@if (iForRequisitionRedCount != 0)
                                { <span>@iForRequisitionRedCount</span>}</li>
                            }
                            @if (IsProjectSpendView)
                            {
                            <li class="imgclassd"><a id="lnkProjectspend" title="Project Spend" onclick="BindProjectStatusGrid('lnkProjectspend','Project Spend')"
                                class="lia">@eTurns.DTO.ResDashboard.TabProjectSpend</a></li>
                            }
                        </ul>
                    </div>
                    <div id="divMainRequisitionTab" style="float: left; width: 100%;">
                        <div id="divRequisitionTab" class="Lnavd" style="float: left; width: 80%; padding-top: 10px;">
                            <ul>
                                <li class="imgclassd"><a id="lnknotsubmitted" title="Unsubmitted" onclick="BindConsumeStatusGrid('lnknotsubmitted','Unsubmitted')"
                                    class="lia">@ResDashboard.SubTabRequisitionTobeSubmitted</a>@if (isNotSubmitted != 0)
                                                                                                { <span>@isNotSubmitted</span>}</li>
                                <li class="imgclassd"><a id="lnknotapproved" title="Submitted" onclick="BindConsumeStatusGrid('lnknotapproved','Submitted')"
                                    class="lia">@ResDashboard.SubTabRequisitionTobeApproved</a>@if (isNotApproved != 0)
                                                                                               { <span>@isNotApproved</span>}</li>
                                <li class="imgclassd"><a id="lnknotconsumed" title="Approved" onclick="BindConsumeStatusGrid('lnknotconsumed','Approved')"
                                    class="lia">@ResDashboard.SubTabRequisitionTobePulled</a>@if (isNotConsumed != 0)
                                                                                             { <span>@isNotConsumed</span>}</li>
                            </ul>
                        </div>
                        <div class="viewBlock gridchartclass">
                            <span class="label">View:</span> <a class="view" href="javascript:void(0);" onclick="ShowHideConsumeDiv('Chart');">
                                <img alt="" id="imgRChart" src="/content/images/chart-view-active.png" /></a>
                            <a class="view clsLoadGraph" href="javascript:void(0);" onclick="ShowHideConsumeDiv('Grid');">
                                <img alt="" id="imgRGrid" src="/content/images/list-view-inactive.png" /></a>
                        </div>
                        <div style="float: left; padding-top: 4px; display: none;">
                            <ul>
                                <li style="border-right: none; float: left; padding-right: 5px;">
                                    <label style="float: left; padding: 1.3% 2px;">
                                        @Html.Label("From")
                                    </label>
                                    @Html.TextBox("txtConsumeFromDate", "1/1/" + eTurns.DAL.DateTimeUtility.DateTimeNow.Year, new { @class = "importtext-box", id = "txtConsumeFromDate", @readonly = "readonly", @style = "width:70px;background:white", maxlength = 128 })
                                </li>
                                <li style="border-right: none; float: left; padding-right: 5px;">
                                    <label style="float: left; padding: 1.3% 2px;">
                                        @Html.Label("To")
                                    </label>
                                    @Html.TextBox("txtConsumeToDate", eTurns.DAL.DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy"), new { @class = "importtext-box", id = "txtConsumeToDate", @readonly = "readonly", @style = "width:70px;background:white", maxlength = 128 })
                                    @Html.Hidden("hdnstatusConsume", new { id = "hdnstatusConsume" })
                                    @Html.Hidden("hdnReqMode", new { id = "hdnReqMode" })
                                </li>
                                <li style="border-right: none; float: left; padding-right: 5px;">
                                    <div class="BtnBlockform" style="margin: 0 0 0 5px;">
                                        <input type="button" value="GO" id="btnConsumego" name="btnConsumego" class="CreateBtn"
                                            style="float: left;" />
                                    </div>
                                </li>
                            </ul>
                        </div>
                        <div id="Ctab" class="tabContener">
                            <div id="dvConsumeGrid" class="userContent" style="float: left; width: 100%;">
                                <div class="Lnavd" style="float: left; width: 98%; padding-top: 10px;">
                                    @Html.GridTopHeader(Req_settings, eTurnsWeb.Helper.SessionHelper.ModuleList.DashboardRequisitionDataTable)
                                </div>
                                <div class="searchWrapper">
                                    <div class="searchBlock">
                                        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                                        <div class="searchinputB">
                                            <input type="text" class="searchinput" id="global_filterDashConsume" />
                                            <a href="javascript:void(0);" class="xclose">
                                                <img src="~/Content/images/x.png" alt="X" id="clear_global_filterDashConsume" /></a>
                                        </div>
                                    </div>
                                </div>
                                <div class="userHead" style="height: 30px;">
                                </div>
                                <table id="myRequisitionDataTable" class="display" style="width: 561px; overflow: auto;">
                                    <thead>
                                        <tr>
                                            <th>
                                                @ResDashboard.RequisitionNumber
                                            </th>
                                            <th>
                                                @ResDashboard.RequisitionDescription
                                            </th>
                                            <th>
                                                @ResDashboard.RequisitionRequiredDate
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.ID
                                            </th>
                                            <th>
                                                @eTurns.DTO.ResRequisitionMaster.RequisitionStatus
                                            </th>
                                            <th>
                                                @eTurns.DTO.ResRequisitionMaster.WorkorderName
                                            </th>
                                            <th>
                                                @eTurns.DTO.ResRequisitionMaster.NumberofItemsrequisitioned
                                            </th>
                                            <th>
                                                @eTurns.DTO.ResCustomer.Customer
                                            </th>
                                            <th>
                                                @eTurns.DTO.ResRequisitionMaster.RequisitionType
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.RoomName
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                                            </th>
                                            <th>
                                                @eTurns.DTO.ResOrder.Supplier
                                            </th>
                                            <th>
                                                @eTurns.DTO.ResOrder.SupplierAccountDetail
                                            </th>
                                            @Html.RenderColumnsHeader("RequisitionMaster", typeof(eTurns.DTO.ResRequisitionMaster))
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                            <div id="dvConsumeChart" style="float: left; width: 100%;">
                                Chart
                            </div>
                        </div>
                    </div>
                    <div id="divMainProjectspend" style="float: left; width: 100%;">
                        <div id="divProjectspendTab" class="Lnavd" style="float: left; width: 80%; padding-top: 10px;">
                            <ul>
                                <li class="imgclassd">
                                    <a id="lnkPAexceeds" title="Project Amount Exceeds" onclick="BindProjectStatusGrid('lnkPAexceeds','Project Amount Exceeds')"
                                       class="lia">@ResDashboard.SubTabProjectSpendAmountExceeds</a>
                                        <span id="spnPAexceeds" style="display:none"></span>
                                </li>
                                <li class="imgclassd">
                                    <a id="lnkIQexceeds" title="Item Quantity Exceeds" onclick="BindProjectStatusGrid('lnkIQexceeds','Item Quantity Exceeds')"
                                       class="lia">@ResDashboard.SubTabProjectSpendQuantityExceeds</a>
                                        <span id="spnIQexceeds" style="display:none"></span>
                                </li>
                                <li class="imgclassd">
                                    <a id="lnkIAexceeds" title="Item Amount Exceeds" onclick="BindProjectStatusGrid('lnkIAexceeds','Item Amount Exceeds')"
                                       class="lia">@ResDashboard.SubTabProjectSpendItemAmountExceeds</a>
                                        <span id="spnIAexceeds" style="display:none"></span>
                                </li>
                            </ul>
                        </div>
                        <div class="viewBlock gridchartclass">
                            <span class="label">View:</span> <a class="view" href="javascript:void(0);" onclick="ShowHideProjectDiv('Chart');">
                                <img alt="" id="imgPChart" src="/content/images/chart-view-active.png"></a>
                            <a class="view clsLoadPGraph" href="javascript:void(0);" onclick="ShowHideProjectDiv('Grid');">
                                <img alt="" id="imgPGrid" src="/content/images/list-view-inactive.png"></a>
                        </div>
                        <div style="float: left; padding-top: 4px; display: none;">
                            <ul>
                                <li style="border-right: none; float: left; padding-right: 5px;">
                                    <label style="float: left; padding: 1.3% 2px;">
                                        @Html.Label("From")
                                    </label>
                                    @Html.TextBox("txtProjectFromDate", "1/1/" + eTurns.DAL.DateTimeUtility.DateTimeNow.Year, new { @class = "importtext-box", id = "txtProjectFromDate", @readonly = "readonly", @style = "width:70px;background:white", maxlength = 128 })
                                </li>
                                <li style="border-right: none; float: left; padding-right: 5px;">
                                    <label style="float: left; padding: 1.3% 2px;">
                                        @Html.Label("To")
                                    </label>
                                    @Html.TextBox("txtProjectToDate", eTurns.DAL.DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy"), new { @class = "importtext-box", id = "txtProjectToDate", @readonly = "readonly", @style = "width:70px;background:white", maxlength = 128 })
                                    @Html.Hidden("hdnstatusProject", new { id = "hdnstatusProject" })
                                    @Html.Hidden("hdnPSMode", new { id = "hdnPSMode" })
                                </li>
                                <li id="liLimits" style="border-right: none; float: left; padding-right: 5px;">
                                    <label style="float: left; padding: 1.3% 2px;">
                                        @Html.Label("Limits(%)")
                                    </label>
                                    @Html.TextBox("txtLimits", "", new { @class = "importtext-box", id = "txtLimits", @style = "width:30px;background:white", maxlength = 3 })
                                </li>
                                <li style="border-right: none; float: left; padding-right: 5px;">
                                    <div class="BtnBlockform" style="margin: 0 0 0 5px;">
                                        <input type="button" value="GO" id="btnProjectgo" name="btnProjectgo" class="CreateBtn"
                                            style="float: left;" />
                                    </div>
                                </li>
                            </ul>
                        </div>
                        <div id="Ptab" class="tabContener">
                            <div id="dvProjectGrid" class="userContent" style="float: left; width: 100%;">
                                <div class="Lnavd" style="float: left; width: 98%; padding-top: 10px;">
                                    @Html.GridTopHeader(Proj_settings, eTurnsWeb.Helper.SessionHelper.ModuleList.DashboardProjectDataTable)
                                </div>
                                <div class="searchWrapper">
                                    <div class="searchBlock">
                                        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                                        <div class="searchinputB">
                                            <input type="text" class="searchinput" id="global_filterDashProject" />
                                            <a href="javascript:void(0);" class="xclose">
                                                <img src="~/Content/images/x.png" alt="X" id="clear_global_filterDashProject" /></a>
                                        </div>
                                    </div>
                                </div>
                                <div class="userHead" style="height: 30px;">
                                </div>
                                <table id="myProjectDataTable" class="display" style="width: 561px; overflow: auto;">
                                    <thead>
                                        <tr>
                                            <th>
                                                @ResDashboard.ProjectSpendName
                                            </th>
                                            <th>
                                                @ResDashboard.ProjectSpendDescription
                                            </th>
                                            <th>
                                                @ResDashboard.ProjectSpendDollarLimitAmount
                                            </th>
                                            <th>
                                                @ResDashboard.ProjectSpendDollarUsedAmount
                                            </th>
                                            <th>
                                                @ResDashboard.ProjectSpend
                                            </th>
                                            <th>
                                                @ResCommon.ID
                                            </th>
                                            <th>
                                                @ResProjectMaster.TrackAllUsageAgainstThis
                                            </th>
                                            <th>
                                                @ResProjectMaster.IsClosed
                                            </th>
                                            <th>
                                                @ResCommon.RoomName
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.AddedFrom
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.EditedFrom
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                                            </th>
                                            <th>
                                                @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                                            </th>
                                            <th>
                                                @ResCommon.CreatedOn
                                            </th>
                                            <th>
                                                @ResCommon.UpdatedOn
                                            </th>
                                            <th>
                                                @ResCommon.CreatedBy
                                            </th>
                                            <th>
                                                @ResCommon.UpdatedBy
                                            </th>
                                            <th>
                                                @ResProjectMaster.RemainsSpend
                                            </th>
                                            @Html.RenderColumnsHeader("ProjectMaster", typeof(eTurns.DTO.ResProjectMaster))
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                            <div id="dvProjectChart" style="float: left; width: 100%;">
                                Chart
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script language="javascript" type="text/javascript">
    var oTableRequisition;
    var oProjectTable;
    var AllowDeletePopup = true;

    function ShowHideConsumeDiv(str) {
        $("#hdnReqMode").val(str);
        if (str == 'Grid') {
            $("#global_filterDashConsume").val("");
            $('#myRequisitionDataTable').dataTable().fnFilter('', null, null, null)
            $("#dvConsumeGrid").show();
            $("#dvConsumeChart").hide();
            ChangeImgSRC('Grid', 'imgRGrid', 'imgRChart');

            if (oTableRequisition === undefined || oTableRequisition == null || dashboardReorder == true) {
                dashboardReorder = false;
                GenerateItemGrid();
                $('.DTTT_container').css('z-index', '-1');                
                //FilterRecordsByStatus($("#hdnstatusConsume").val());
            }
            else {
                oTableRequisition.fnDraw();
                //$('.DTTT_container').css('z-index', '-1');
            }
        }
        else {
            $("#dvConsumeGrid").hide();
            $("#dvConsumeChart").show();

            ChangeImgSRC('Chart', 'imgRGrid', 'imgRChart');

            $('#dvConsumeChart').empty();
            $('#dvConsumeChart').load('@ReqChartURL' + "?ChartType=" + encodeURIComponent($("#hdnstatusConsume").val()), function () { });
        }
    }

    function ShowHideProjectDiv(str) {
        $("#hdnPSMode").val(str);
        if (str == 'Grid') {
            $("#dvProjectGrid").show();
            $("#dvProjectChart").hide();
            ChangeImgSRC('Grid', 'imgPGrid', 'imgPChart');
            if (oProjectTable === undefined || oProjectTable == null || dashboardReorder == true) {
                dashboardReorder = false;
                GenerateProjectGrid();                
                //$('.DTTT_container').css('z-index', '-1';);
            }
            else {
                oProjectTable.fnDraw();
            }
        }
        else {
            $("#dvProjectGrid").hide();
            $("#dvProjectChart").show();
            ChangeImgSRC('Chart', 'imgPGrid', 'imgPChart');
            $('#dvProjectChart').empty();
            $('#dvProjectChart').load('@PSChartURL' + "?ChartType=" + encodeURIComponent($("#hdnstatusProject").val()), function () { });
        }

        var isProjectRedCountSet =  $("#IsProjectCountCalled").val();

        if (isProjectRedCountSet != "1")
        {
            SetProjectRedCounts();
            $("#IsProjectCountCalled").val("1");
        }
    }

    //    function ChangeImgSRC(CG, GridImage, ChartImage) {
    //        if (CG == 'Grid') {
    //            $("#" + GridImage).attr("src", "/content/images/list-view.png");
    //            $("#" + ChartImage).attr("src", "/content/images/chart-view.png");
    //        }
    //        else {
    //            $("#" + GridImage).attr("src", "/content/images/list-view-inactive.png");
    //            $("#" + ChartImage).attr("src", "/content/images/chart-view-active.png");
    //        }
    //    }

    var objColumnsMyRequisitionDataTable = {}
    var objColumnsMyProjectDataTable = {}

    $(document).ready(function () {
        objColumnsMyRequisitionDataTable = GetGridHeaderColumnsObject('myRequisitionDataTable');
        objColumnsMyProjectDataTable = GetGridHeaderColumnsObject('myProjectDataTable');

        $("#divMainRequisitionTab").show();
        $("#divMainProjectspend").hide();
        $("#dvConsumeGrid").hide();
        $("#dvConsumeChart").show();
        $("#dvProjectGrid").hide();
        $("#dvProjectChart").show();
        $('#txtConsumeFromDate').blur(function () { }).datepicker({ dateFormat: 'm/d/yy' });
        $('#txtConsumeToDate').blur(function () { }).datepicker({ dateFormat: 'm/d/yy' });
        $('#txtProjectFromDate').blur(function () { }).datepicker({ dateFormat: 'm/d/yy' });
        $('#txtProjectToDate').blur(function () { }).datepicker({ dateFormat: 'm/d/yy' });
        $("#global_filterDashConsume").val("");
        $("#global_filterDashProject").val("");
        $("#lnkRequisition").removeClass("lava");
        $("#lnkRequisition").addClass("liahover");
        $("#lnknotsubmitted").removeClass("lava");
        $("#lnknotsubmitted").addClass("liahover");
        $("#hdnstatusConsume").val("Unsubmitted"); // Not Approved

        GenerateItemGrid();
        $('.DTTT_container').css('z-index', '-1');
        FilterRecordsByStatus($("#hdnstatusConsume").val());

        $("#lnkProjectspend").removeClass("liahover");
        $("#lnkProjectspend").addClass("lava");
        $("#lnkPAexceeds").removeClass("lava");
        $("#lnkPAexceeds").addClass("liahover");
        $("#hdnstatusProject").val("Project Amount Exceeds");
        $('#dvConsumeChart').empty();

        if ('@IsRequisitionView' != "False")
        {
            $('#dvConsumeChart').load('@ReqChartURL' + "?ChartType=" + encodeURIComponent($("#hdnstatusConsume").val()), function () { });
        }

        //        $('#dvConsumeChart').load('/ConsumeChart/LoadChart', function () { });
        //        $('#dvProjectChart').empty();
        //        $('#dvProjectChart').load('/ProjectChart/LoadChart', function () { });
        if (('@IsRequisitionView' == "False") && ('@IsProjectSpendView' == "True")) {
            setTimeout(function () {
                BindProjectStatusGrid('lnkProjectspend', 'Project Spend'); $("a#lnkProjectspend").addClass("liahover");
            }, 1000);
        }
        _Common.setGloblaSearch('global_filterDashConsume', 'myRequisitionDataTable');
    });

    $('#btnConsumego').click(function () {

        if ($("#lnkRequisition").hasClass("liahover")) {
            $("#divRequisitionTab.Lnavd > ul > li").each(function () {
                if ($(this).find('a').hasClass('liahover')) {
                    var lnk = $(this).find('a')[0];
                    var clickedid = lnk.id;
                    var clickedTitle = $(lnk).attr("title");
                    BindConsumeStatusGrid(clickedid, clickedTitle);
                }
            });
        }
        else if ($("#lnkProjectspend").hasClass("liahover")) {
            alert('@ResLayout.ProjectSpend');
        }

    });

    $('#btnProjectgo').click(function () {

        if ($("#lnkProjectspend").hasClass("liahover")) {
            $("#divProjectspendTab.Lnavd > ul > li").each(function () {
                if ($(this).find('a').hasClass('liahover')) {
                    var lnk = $(this).find('a')[0];
                    var clickedid = lnk.id;
                    var clickedTitle = $(lnk).attr("title");
                    BindProjectStatusGOClick(clickedid, clickedTitle);
                }
            });
        }
    });

    function AddRemoveProjectCSS() {
        $("#divProjectspendTab.Lnavd > ul > li").each(function () {
            $(this).find('a').addClass("lava");
            $(this).find('a').removeClass("liahover");
        });
    }

    function BindPercentageValue() {
        //  alert($("#hdnstatusProject").val());
        $.ajax({ url: '@Url.Action("GetCompanyConfig", "InventoryDashboard")'
                        , type: 'POST'
                        , data: { 'CompanyID': '@eTurnsWeb.Helper.SessionHelper.CompanyID', 'Status': $("#hdnstatusProject").val() }
                        , cache: false
                        , success: function (response) {
                            $("#txtLimits").val(response.StatusValue);
                            if ($("#hdnPSMode").val() == "Grid") {
                                $("#global_filterDashProject").val("");
                                $("#global_filterDashProject").change();
                                FilterRecordsByStatusProject($("#hdnstatusProject").val());
                            }
                            else {
                                $('#dvProjectChart').empty();
                                $('#dvProjectChart').load('@PSChartURL' + "?ChartType=" + encodeURIComponent($("#hdnstatusProject").val()), function () { });
                                //                                $('#dvProjectChart').load('/ProjectChart/LoadChart', function () { });
                            }
                            //$('.DTTT_container').css('z-index', '-1');
                        }
                        , error: function () {
                            $("#txtLimits").val(0);
                        }
        });

    }

    function BindProjectStatusGOClick(id, str) {

        AddRemoveProjectCSS();
        if (id == "lnkProjectspend") {
            $("#lnkRequisition").addClass("lava");
            $("#lnkRequisition").removeClass("liahover");
            $("#divMainRequisitionTab").hide();
            $("#divMainProjectspend").show();
            $("#lnkPAexceeds").removeClass("lava");
            $("#lnkPAexceeds").addClass("liahover");
            $("#hdnstatusProject").val("Project Amount Exceeds");
        }
        else {
            $("#hdnstatusProject").val(str);
        }

        $("#" + id).removeClass("lava");
        $("#" + id).addClass("liahover");
        $("#global_filterDashProject").val("");
        $("#global_filterDashProject").change();

        FilterRecordsByStatusProject($("#hdnstatusProject").val());
        $('.DTTT_container').css('z-index', '-1');

        $('#dvProjectChart').empty();
        $('#dvProjectChart').load('@PSChartURL' + "?ChartType=" + encodeURIComponent($("#hdnstatusProject").val()), function () { });

    }

    function BindProjectStatusGrid(id, str) {

        AddRemoveProjectCSS();
        if (id == "lnkProjectspend") {

            $("#lnkRequisition").addClass("lava");
            $("#lnkRequisition").removeClass("liahover");
            $("#divMainRequisitionTab").hide();
            $("#divMainProjectspend").show();
            $("#lnkPAexceeds").removeClass("lava");
            $("#lnkPAexceeds").addClass("liahover");
            $("#hdnstatusProject").val("Project Amount Exceeds");
            ShowHideProjectDiv('Chart');
        }
        else {
            $("#hdnstatusProject").val(str);
            if ($("#hdnPSMode").val() == "Grid") {
                $("#global_filterDashProject").val("");
                $("#global_filterDashProject").change();
                if (oProjectTable === undefined || oProjectTable == null) {
                    GenerateProjectGrid()
                    //$('.DTTT_container').css('z-index', '-1');
                }
                else {
                    FilterRecordsByStatusProject($("#hdnstatusProject").val());
                }
            }
            else {
                $('#dvProjectChart').empty();
                $('#dvProjectChart').load('/ProjectChart/LoadChart' + "?ChartType=" + encodeURIComponent($("#hdnstatusProject").val()), function () { });
                //                                $('#dvProjectChart').load('/ProjectChart/LoadChart', function () { });
            }
            //            BindPercentageValue();
        }

        $("#" + id).removeClass("lava");
        $("#" + id).addClass("liahover");
    }

    function AddRemoveConsumeCSS() {
        $("#divRequisitionTab.Lnavd > ul > li").each(function () {
            $(this).find('a').addClass("lava");
            $(this).find('a').removeClass("liahover");
        });
    }
    function BindConsumeStatusGrid(id, str) {

        AddRemoveConsumeCSS();
        $("#" + id).removeClass("lava");
        $("#" + id).addClass("liahover");
        if (id == "lnkRequisition")//,'Requisition
        {
            $("#lnkProjectspend").addClass("lava");
            $("#lnkProjectspend").removeClass("liahover");

            $("#divMainRequisitionTab").show();
            $("#divMainProjectspend").hide();

            $("#lnknotsubmitted").removeClass("lava");
            $("#lnknotsubmitted").addClass("liahover");
            $("#hdnstatusConsume").val("Unsubmitted");
            ShowHideConsumeDiv('Chart');
        }
        else {
            $("#hdnstatusConsume").val(str);
            if ($("#hdnReqMode").val() == "Grid") {

                $("#global_filterDashConsume").val("");
                $("#global_filterDashConsume").change();
                if (oTableRequisition === undefined || oTableRequisition == null) {
                    GenerateItemGrid();
                    $('.DTTT_container').css('z-index', '-1');
                    //FilterRecordsByStatus($("#hdnstatusConsume").val());
                }
                else {
                    FilterRecordsByStatus($("#hdnstatusConsume").val());
                }
            }
            else {
                $('#dvConsumeChart').empty();
                $('#dvConsumeChart').load('@ReqChartURL' + "?ChartType=" + encodeURIComponent($("#hdnstatusConsume").val()), function () { });
            }
        }
    }


    function GenerateItemGrid() {

        oTableRequisition = $('#myRequisitionDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": true,
            "bAutoWidth": false,
            //"sScrollX": "150%",
            "sScrollX": "100%",
            "sDom": 'R<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            "oColVis": {},
            "aaSorting": [[1, "asc"]],
            "oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bDestroy": true,
            "bStateSave": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";

                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                //if (PostCount > 1) {
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'DashboardRequisitionDataTable' },
                    "async": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
                //}
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'DashboardRequisitionDataTable' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("RequisitionMasterListAjax", "InventoryDashboard")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                //PostCount = PostCount + 1;
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                //if (oSettings.aaSorting.length != 0)
                //    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                //else
                //    aoData.push({ "name": "SortingField", "value": "0" });

                if (oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];

                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                aoData.push({ "name": "FromDate", "value": $('#txtConsumeFromDate').val() });
                aoData.push({ "name": "ToDate", "value": $('#txtConsumeToDate').val() });
                aoData.push({ "name": "Criteria", "value": $("#hdnstatusConsume").val() });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        //$('#myRequisitionDataTable td').removeHighlight();
                        removeHighlight2('myRequisitionDataTable');
                        $('#myRequisitionDataTable_wrapper .dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('#myRequisitionDataTable_wrapper .dataTables_scroll').css({ "opacity": 1 });
                        if ($("#global_filterDashConsume").val() != '') {
                            $('#myRequisitionDataTable td').highlight($("#global_filterDashConsume").val());
                        }

                        $('#myRequisitionDataTable tbody tr').unbind("click");
                        $('#myRequisitionDataTable tbody tr').click(function (e) {
                            DataTableTRClickToSelect(this, e);
                        });

                        CallShowHideData();
                        //CallNarrowfunctions();
                    }
                });
            },
            "fnInitComplete": function () {
                $('.ColVis').detach().appendTo(".setting-arrow");
                //GenerateProjectGrid();
//                BindPercentageValue();
            },
            "aoColumns": [
                            {
                                "mDataProp": "RequisitionNumber",
                                "sClass": "read_only",
                                "sDefaultContent": '',
                                "bSortable": true,
                                "bSearchable": false,
                                "fnRender": function (obj) {
                                    return "<a id='aEditLink' onclick='return OpenRequisitionEdit(&quot;" + obj.aData.GUID + "&quot;)' href='JavaScript:void(0);'>" + obj.aData.RequisitionNumber + "</a>" + " <input type='hidden' id='RequisitionGUID' value='" + obj.aData.GUID.toString() + "' />" +
			                               "<input type='hidden' id='hdnExportId' value='" + obj.aData.GUID.toString() + "' />";
                                    
                                    //return "<a id='aEditLink' onclick='return ShowEditTabGUID(&quot;RequisitionEdit?RequisitionGUID=" + obj.aData.GUID + "&quot;,&quot;frmRequisitionMaster&quot;)' href='JavaScript:void(0);'>" + obj.aData.RequisitionNumber + "</a>" + " <input type='hidden' id='RequisitionGUID' value='" + obj.aData.GUID.toString() + "' />";
                                    //return "" + obj.aData.RequisitionNumber + "";
                                }
                            },
			                { "mDataProp": "Description", "sClass": "read_only", "sDefaultContent": '',
			                "fnRender": function (obj, val) {
			                        return "<div class='comment more'>" + val + "</div>" + " <span id='spnRequisitionStatus' style='display:none'>" + obj.aData.RequisitionStatus + "</span>";
			                    }
			                },
                            //{ "mDataProp": "RequiredDate", "sClass": "read_only",
                            //    "fnRender": function (obj, val) {
                            //        return GetDateInFullFormat(val);
                            //    }
                            //},
                            { "mDataProp": "RequiredDate", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.RequiredDateStr; } },
                            { "mDataProp": "ID", "sClass": "read_only" },
                            { "mDataProp": "RequisitionStatus", "sClass": "read_only" },
                            {
                                "mDataProp": "WorkorderName", "sClass": "read_only", "sDefaultContent": '',
                                "fnRender": function (obj, val) {
                                    if (obj.aData.WorkorderName != '' && obj.aData.WorkorderName != null)
                                        return "<a onclick='OpenWorkorderEdit(&quot;" + obj.aData.WorkorderGUID + "&quot;);' href='JavaScript:void(0);'>" + obj.aData.WorkorderName + "</a>";
                                    else
                                        return "";
                                }
                            },
                            {
                                "mDataProp": "NumberofItemsrequisitioned", "sClass": "read_only", "fnRender": function (obj, val) {
                                    if (obj.aData.NumberofItemsrequisitioned != null && obj.aData.NumberofItemsrequisitioned != NaN)
                                        return FormatedCostQtyValues(obj.aData.NumberofItemsrequisitioned, 2);
                                    else
                                        return FormatedCostQtyValues(0, 2);
                                }
                            },
                            { "mDataProp": "Customer", "sClass": "read_only" },
                            { "mDataProp": "RequisitionType", "sClass": "read_only" },
                            { "mDataProp": "Created", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.CreatedDate; } },
                            { "mDataProp": "Updated", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.UpdatedDate; } },
                            { "mDataProp": "RoomName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "AddedFrom", "sClass": "read_only" },
                            { "mDataProp": "EditedFrom", "sClass": "read_only" },
                            { "mDataProp": "ReceivedOnWeb", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.ReceivedOnWebDate; } },
                            { "mDataProp": "ReceivedOn", "sClass": "read_only", "fnRender": function (obj, val) { return obj.aData.ReceivedOnDate; } },
                            { "mDataProp": "SupplierName", "sClass": "read_only" },
                            { "mDataProp": "SupplierAccountNumberName", "sClass": "read_only" },
                            @Html.RenderColumnsArray("RequisitionMaster", false)
		    ]
        });

    }

    function OpenRequisitionEdit(guid) {
        var url = '@Url.Action("RequisitionList", "Consume")';
        url = url + '?fromdashboard=' + 'yes' + '&RequisitionGUID=' + guid;
        window.location.href = url;
        return false;
    }

    function OpenWorkorderEdit(guid) {
        var url = '@Url.Action("WorkOrderList", "WorkOrder")';
        url = url + '?fromdashboard=' + 'yes' + '&WorkOrderGUID=' + guid;
        window.location.href = url;
        return false;
    }

    function GenerateProjectGrid() {
        oProjectTable = $('#myProjectDataTable').dataTable({
            "bJQueryUI": true,
            "bScrollCollapse": false,
            "bAutoWidth": false,
            "sScrollX": "100%",
            "sDom": 'R<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
            //"oColVis": {},
            "aaSorting": [[0, "asc"]],
            //"oColReorder": {},
            "sPaginationType": "full_numbers",
            "bProcessing": true,
            "bStateSave": true,
            "bDestroy": true,
            "oLanguage": {
                "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
            },
            "fnRowCallback": function (nRow, aData) {
                if (aData.IsDeleted == true && aData.IsArchived == true)
                    nRow.className = "GridDeleatedArchivedRow";
                else if (aData.IsDeleted == true)
                    nRow.className = "GridDeletedRow";
                else if (aData.IsArchived == true)
                    nRow.className = "GridArchivedRow";

                return nRow;
            },
            "fnStateSaveParams": function (oSettings, oData) {
                oData.oSearch.sSearch = "";
                //if (PostCount > 1) {
                $.ajax({
                    "url": '@Url.Content("~/Master/SaveGridState")',
                    "type": "POST",
                    data: { Data: JSON.stringify(oData), ListName: 'DashboardProjectDataTable' },
                    "async": false,
                    "dataType": "json",
                    "success": function (json) {
                        o = json;
                    }
                });
                //}
            },
            "fnStateLoad": function (oSettings) {
                var o;
                $.ajax({
                    "url": '@Url.Content("~/Master/LoadGridState")',
                    "type": "POST",
                    data: { ListName: 'DashboardProjectDataTable' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json) {
                        if (json.jsonData != '')
                            o = JSON.parse(json.jsonData);
                    }
                });
                return o;
            },
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("ProjectMasterListAjax", "InventoryDashboard")',
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                var arrCols = new Array();
                var objCols = this.fnSettings().aoColumns;
                for (var i = 0; i <= objCols.length - 1; i++) {
                    arrCols.push(objCols[i].mDataProp);
                }
                //endFor
                for (var j = 0; j <= aoData.length - 1; j++) {
                    if (aoData[j].name == "sColumns") {
                        aoData[j].value = arrCols.join("|");
                        break;
                    }
                }
                //if (oSettings.aaSorting.length != 0)
                //    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                //else
                //    aoData.push({ "name": "SortingField", "value": "0" });
                if (oSettings.aaSorting.length != 0) {
                    var sortValue = "";
                    for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                        if (sortValue.length > 0)
                            sortValue += ", "
                        if (typeof arrCols[oSettings.aaSorting[k][0]] != "undefined"
                            && arrCols[oSettings.aaSorting[k][0]] != undefined) {
                            sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];
                        }

                    }
                    aoData.push({ "name": "SortingField", "value": sortValue });
                }
                else
                    aoData.push({ "name": "SortingField", "value": "0" });

                aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                aoData.push({ "name": "FromDate", "value": $('#txtProjectFromDate').val() });
                aoData.push({ "name": "ToDate", "value": $('#txtProjectToDate').val() });
                aoData.push({ "name": "Status", "value": $("#hdnstatusProject").val() });
                aoData.push({ "name": "StatusValue", "value": $("#txtLimits").val() });

                oSettings.jqXHR = $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    "success": fnCallback,
                    beforeSend: function () {
                        //$('#myProjectDataTable td').removeHighlight();
                        removeHighlight2('myProjectDataTable');
                        $('#myProjectDataTable_wrapper .dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('#myProjectDataTable_wrapper .dataTables_scroll').css({ "opacity": 1 });
                        if ($("#global_filterDashProject").val() != '') {
                            $('#myProjectDataTable td').highlight($("#global_filterDashProject").val());
                        }

                        $('#myProjectDataTable tbody tr').unbind("click");
                        $('#myProjectDataTable tbody tr').click(function (e) {
                            DataTableTRClickToSelect(this, e);
                        });

                        CallShowHideData();
                    }
                });
            }, // fnServerData : required to pass the custom parameter before fetching data from DB
            //            "fnInitComplete": function () {
            //                $('.ColVis').detach().appendTo(".setting-arrow");
            //            },
            "aoColumns": [
                                {
                                    "sClass": "read_only",
                                    "sDefaultContent": '',
                                    "bSortable": false,
                                    "bSearchable": false,
                                    "fnRender": function (obj) {
                                        //return "" + obj.aData.ProjectSpendName + "";
                                        return "<a onclick='return OpenProjectSpendEdit(&quot;" + obj.aData.ID + "&quot;)' href='JavaScript:void(0);'>" + obj.aData.ProjectSpendName + "</a>" +
			                               "<input type='hidden' id='hdnExportId' value='" + obj.aData.ProjectGUID + "' />";
                                        //return "<a onclick='BlankSession(); return ShowEditTab(&quot;ProjectEdit/" + obj.aData.ID + "&quot;,&quot;frmProject&quot;)' href='JavaScript:void(0);'>" + obj.aData.ProjectSpendName + "</a>";
                                    }
                                },
                                { "mDataProp": "Description", "sClass": "read_only" },
                                {
                                    "mDataProp": "DollarLimitAmount", "sClass": "read_only","bSortable": true,
                                                  
                                "fnRender": function (obj, val) {
                                    if (obj.aData.DollarLimitAmount != null && obj.aData.DollarLimitAmount != NaN)                                                   
                                            return FormatedCostQtyValues(obj.aData.DollarLimitAmount, 1);
                                        else
                                            return FormatedCostQtyValues(0, 1);
                                    }
                                },
                                { "mDataProp": "DollarUsedAmount", "sClass": "read_only",
                                "fnRender": function (obj, val) {
                                    if (obj.aData.DollarUsedAmount != null && obj.aData.DollarUsedAmount != NaN)
                                        return FormatedCostQtyValues(obj.aData.DollarUsedAmount, 1);
                                    else
                                        return FormatedCostQtyValues(0, 1);
                                    }
                                },
                                {
                                    "sClass": "read_only",
                                    "sDefaultContent": '',
                                    "bSortable": false,
                                    "bSearchable": false,
                                    "fnRender": function (obj) {
                                        //return "" + obj.aData.ProjectSpendName + "";

                                        //                                        var Limit = obj.aData.DollarLimitAmount;
                                        //                                        var Used = obj.aData.DollarUsedAmount;
                                        //                                        var UsedPer = ((100 / obj.aData.DollarLimitAmount) * obj.aData.DollarUsedAmount)
                                        return "" + GetUsedPer(obj.aData.DollarLimitAmount, obj.aData.DollarUsedAmount);
                                        //return "<a onclick='BlankSession(); return ShowEditTab(&quot;ProjectEdit/" + obj.aData.ID + "&quot;,&quot;frmProject&quot;)' href='JavaScript:void(0);'>" + obj.aData.ProjectSpendName + "</a>";
                                    }
                                },
                                { "mDataProp": "ID", "sClass": "read_only" },
                                {
                                    "mDataProp": "TrackAllUsageAgainstThis", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
                                },
                                {
                                    "mDataProp": "IsClosed", "sClass": "read_only"
                                    , "fnRender": function (obj, val) {
                                        return GetBoolInFormat(obj, val);
                                    }
                                },
                                { "mDataProp": "RoomName", "sClass": "read_only" },
                                { "mDataProp": "AddedFrom", "sClass": "read_only" },
                                { "mDataProp": "EditedFrom", "sClass": "read_only" },
                                {
                                    "mDataProp": "ReceivedOn", "sClass": "read_only",
                                    "fnRender": function (obj, val) {
                                        //return GetDateInFullFormat(val);
                                        return obj.aData.ReceivedOnDate;
                                    }
                                },
                                {
                                    "mDataProp": "ReceivedOnWeb", "sClass": "read_only",
                                    "fnRender": function (obj, val) {
                                        return obj.aData.ReceivedOnWebDate;
                                    }
                                },
                                { "mDataProp": "CreatedDate", "sClass": "read_only" },
                                { "mDataProp": "UpdatedDate", "sClass": "read_only" },
                                { "mDataProp": "CreatedByName", "sClass": "read_only" },
                                { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                                {
                                    "mDataProp": "RemainsSpend", "sClass": "read_only numericalign",
                                    "fnRender": function (obj, val) {
                                        if (obj.aData.RemainsSpend != null && obj.aData.RemainsSpend != NaN)
                                            return "<span>" + FormatedCostQtyValues(obj.aData.RemainsSpend, 1) + "</span>";
                                        else
                                            return "<span>" + FormatedCostQtyValues(0, 1) + "</span>";
                                    }
                                }
                                @Html.RenderColumnsArray("ProjectMaster", false)
		    ]
        });

        $('.DTTT_container').css('z-index', '-1');
    }
    function GetUsedPer(limit, used) {
        var iDecimalPlace = 2;
        var perUsed = ((100 / limit) * used);
        //alert(PerUsed);
        return perUsed.toFixed(iDecimalPlace);
    }
    function OpenProjectSpendEdit(id) {
        var url = '@Url.Action("ProjectList", "ProjectSpend")';
        url = url + '?fromdashboard=' + 'yes' + '&ProjectID=' + id;
        window.location.href = url;
        return false;
    }

    function FilterRecordsByStatusProject(statusValue) {

        //var searchtext = statusValue.replace(/'/g, "''");
        var globalSearch = $("#global_filterDashProject").val().replace(/'/g, "''");
        //var projectTabFilter;
        //if (globalSearch == '')
        //    projectTabFilter = "[####]" + searchtext;
        //else {
        //    projectTabFilter = globalSearch + "[####]" + searchtext;
        //}
        $('#myProjectDataTable').dataTable().fnFilter(
                            globalSearch,//projectTabFilter,
                            null,
                            null,
                            null
                        );

        //$('.DTTT_container').css('z-index', '-1');
    }

    function FilterRecordsByStatus(statusValue) {

        //var searchtext = statusValue.replace(/'/g, "''");
        var globalSearch = $("#global_filterDashConsume").val().replace(/'/g, "''");
        //var requisitionTabFilter;
        //if (globalSearch == '')
        //    requisitionTabFilter = "[####]" + searchtext;
        //else {
        //    requisitionTabFilter = globalSearch + "[####]" + searchtext;
        //}
        $('#myRequisitionDataTable').dataTable().fnFilter(
                            globalSearch,//requisitionTabFilter,
                            null,
                            null,
                            null
                        );
    }

    /* Global filter JS */

    var timeoutsc1;
    $('#global_filterDashConsume').bind('propertychange input', function () {
        clearTimeout(timeoutsc1);
        //var self = this;
        timeoutsc1 = setTimeout(function () {
            fnFilterConsumeGlobal();
        }, 200);
    });
    $("#global_filterDashConsume").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            //var searchtext = $("#global_filterDashConsume").val().replace(/'/g, "''");
            FilterRecordsByStatus($("#hdnstatusConsume").val());
            //HideOtherTabs();
            return false;
        }
        return true;
    });

    function fnFilterConsumeGlobal() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#global_filterDashConsume") != 'undefined' && ($("#global_filterDashConsume").val().length > 2 || $("#global_filterDashConsume").val().length == 0)) {

            //var searchtext = $("#global_filterDashConsume").val().replace(/'/g, "''");
            FilterRecordsByStatus($("#hdnstatusConsume").val());

        }
        else {
            $('#myRequisitionDataTable td').removeHighlight();
            $('#myRequisitionDataTable td').highlight($("#global_filterDashConsume").val());
        }
    }
    $("#clear_global_filterDashConsume").click(function () {
        $("#global_filterDashConsume").val('');
        fnFilterConsumeGlobal();
        $("#global_filterDashConsume").focus();
        return false;
    });

    /* Global filter JS */
    /* Global filter JS FOR Project Spend */

    var timeoutsc1;
    $('#global_filterDashProject').bind('textchange', function () {
        clearTimeout(timeoutsc1);
        //var self = this;
        timeoutsc1 = setTimeout(function () {
            fnFilterProjectGlobal();
        }, 200);
    });

    $("#global_filterDashProject").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            //var searchtext = $("#global_filterDashProject").val().replace(/'/g, "''");
            FilterRecordsByStatusProject($("#hdnstatusProject").val());
            return false;
        }
        return true;
    });

    function fnFilterProjectGlobal() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#global_filterDashProject") != 'undefined' && ($("#global_filterDashProject").val().length > 2 || $("#global_filterDashProject").val().length == 0)) {
            //var searchtext = $("#global_filterDashProject").val().replace(/'/g, "''");
            FilterRecordsByStatusProject($("#hdnstatusProject").val());
        }
        else {
            $('#myProjectDataTable td').removeHighlight();
            $('#myProjectDataTable td').highlight($("#global_filterDashProject").val());
        }
    }

    $("#clear_global_filterDashProject").click(function () {
        if ($("#global_filterDashProject").val().length > 0) {
            $("#global_filterDashProject").val("");
            $("#global_filterDashProject").change();
        }
        return false;
    });

    /* Global filter JS */

    function SetProjectRedCounts() {

        $.ajax({
              url: '@Url.Action("GetProjectRedCountForDashboard", "InventoryDashboard")'
            , type: 'POST'
            , contentType: 'application/json'
            , dataType: 'json'
            , success: function (response) {
                if (response != null)
                {
                    if (response.projectExceedCount !== undefined && response.projectExceedCount != null &&
                    !isNaN(response.projectExceedCount) && parseInt(response.projectExceedCount) > 0) {
                        //$("#liPAexceeds").append("<span>" + response.projectExceedCount + "</span>");
                        $("#spnPAexceeds").text(response.projectExceedCount).show();
                    }

                    if (response.itemQuantityExceedCount !== undefined && response.itemQuantityExceedCount != null &&
                    !isNaN(response.itemQuantityExceedCount) && parseInt(response.itemQuantityExceedCount) > 0) {
                        //$("#liIQexceeds").append("<span>" + response.itemQuantityExceedCount + "</span>");
                        $("#spnIQexceeds").text(response.itemQuantityExceedCount).show();
                    }

                    if (response.itemAmountExceedCount !== undefined && response.itemAmountExceedCount != null &&
                    !isNaN(response.itemAmountExceedCount) && parseInt(response.itemAmountExceedCount) > 0) {
                        //$("#liIAexceeds").append("<span>" + response.itemAmountExceedCount + "</span>");
                        $("#spnIAexceeds").text(response.itemAmountExceedCount).show();
                    }
                }
            }
            , error: function () {
            }
        });
    }
</script>
