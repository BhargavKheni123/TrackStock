@model eTurns.DTO.eTurnsRegionInfo
@{
    List<SelectListItem> lstDecimals = new List<SelectListItem>();
    lstDecimals.Add(new SelectListItem { Text = "0", Value = "0" });
    lstDecimals.Add(new SelectListItem { Text = "1", Value = "1" });
    lstDecimals.Add(new SelectListItem { Text = "2", Value = "2" });
    lstDecimals.Add(new SelectListItem { Text = "3", Value = "3" });
    lstDecimals.Add(new SelectListItem { Text = "4", Value = "4" });
    lstDecimals.Add(new SelectListItem { Text = "5", Value = "5" });
    lstDecimals.Add(new SelectListItem { Text = "6", Value = "6" });
    List<SelectListItem> lstTimeZones = new List<SelectListItem>();
    var commonDAL = new eTurnsMaster.DAL.CommonMasterDAL();
    var timeZonesFromDB = commonDAL.GetAllTimeZonesFromDB();
    //TimeZoneInfo.GetSystemTimeZones()
    foreach (var item in TimeZoneInfo.GetSystemTimeZones())
    {
        if (timeZonesFromDB != null && timeZonesFromDB.Any() && timeZonesFromDB.Where(e=> e.name.Equals(item.Id)).Count() > 0)
        {
            SelectListItem objSelectListItem = new SelectListItem();
            objSelectListItem.Text = item.DisplayName;
            objSelectListItem.Value = item.Id;
            lstTimeZones.Add(objSelectListItem);
        }

    }

    List<SelectListItem> lstDecimalweightTurns = new List<SelectListItem>();
    lstDecimalweightTurns.Add(new SelectListItem { Text = "0", Value = "0" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "1", Value = "1" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "2", Value = "2" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "3", Value = "3" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "4", Value = "4" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "5", Value = "5" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "6", Value = "6" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "7", Value = "7" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "8", Value = "8" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "9", Value = "9" });
    lstDecimalweightTurns.Add(new SelectListItem { Text = "10", Value = "10" });

}
<div class="userListingWrapper">
    <h2>
        @ResLayout.RegionInfo
    </h2>
    <div class="userListBlock">
        <div id="Ctab" class="tabContener" style="display: block;">
            @using (Ajax.BeginForm("SaveRegionalSettings", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmRegionalSettings" }))
            {
                @Html.AntiForgeryToken()
                <div class="userHead">
                    @Html.ValidationSummary(true)
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.TimeZoneName)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.TimeZoneName, new SelectList(lstTimeZones, "Value", "Text", "--Select--"), new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.CultureCode)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.CultureCode, new SelectList(ViewBag.Cultures, "CultureCode", "CultureDisplayName", "--Select--"), new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ShortDatePattern)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.ShortDatePattern, new SelectList(new List<SelectListItem>(), "Value", "Text", "--Select--"), new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ShortTimePattern)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.ShortTimePattern, new SelectList(new List<SelectListItem>(), "Value", "Text", "--Select--"), new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.CurrencyDecimalDigits)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.CurrencyDecimalDigits, new SelectList(lstDecimals, "Value", "Text", "--Select--"), new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.NumberDecimalDigits)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.NumberDecimalDigits, new SelectList(lstDecimals, "Value", "Text", "--Select--"), new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.CurrencySymbol)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.CurrencySymbol, new SelectList(new List<SelectListItem>(), "Value", "Text", "--Select--"), new { @class = "selectBox" })
                                    @*@Html.EditorFor(model => model.CurrencySymbol)*@
                                    @Html.ValidationMessageFor(model => model.CurrencySymbol)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.GridRefreshTimeInSecond)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.GridRefreshTimeInSecond, new { @class = "text-box", @onkeypress = "return onlyNumeric(event)", @maxlength = "6" })
                                    @*@Html.ValidationMessageFor(model => model.GridRefreshTimeInSecond)*@
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WeightDecimalPoints)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.WeightDecimalPoints, new SelectList(lstDecimalweightTurns, "Value", "Text", "--Select--"), new { @class = "selectBox" })
                                    @*@Html.TextBoxFor(model => model.WeightDecimalPoints, new { @class = "text-box", @onkeypress = "return onlyNumeric(event)", @maxlength = "6" })*@
                                    @*@Html.ValidationMessageFor(model => model.WeightDecimalPoints)*@
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.TurnsAvgDecimalPoints)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.TurnsAvgDecimalPoints, new SelectList(lstDecimalweightTurns, "Value", "Text", "--Select--"), new { @class = "selectBox" })
                                    @*@Html.TextBoxFor(model => model.TurnsAvgDecimalPoints, new { @class = "text-box", @onkeypress = "return onlyNumeric(event)", @maxlength = "6" })*@
                                    @*@Html.ValidationMessageFor(model => model.TurnsAvgDecimalPoints)*@
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.NumberOfBackDaysToSyncOverPDA)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.NumberOfBackDaysToSyncOverPDA, new { @class = "text-box", @onkeypress = "return onlyNumeric(event)", @maxlength = "3" })
                                    @*@Html.ValidationMessageFor(model => model.NumberOfBackDaysToSyncOverPDA)*@
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="editorForm" style="width: 75%">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    &nbsp;@Html.HiddenFor(model => model.ID)
                                </div>
                                <div class="BtnBlockform">
                                    <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            }
            @Html.Partial("_RequiredMessages")
        </div>
    </div>
</div>
<script type="text/javascript">
    $(function () {
        GetCultureInfo($("#CultureCode").val());

        $("#CultureCode").change(function () {
            $("#CurrencySymbol").html("");
            GetCultureInfo($("#CultureCode").val());
        });
        $('form').areYouSure();
    });
    function onSuccess(response) {

        if (response.Status == "ok") {
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("#spanGlobalMessage").html(response.Message);
            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');

            if ($("#ID").val() == 0) {
                location.href = location.href;
            }
        }
        else {
            $('div#target').fadeToggle();
            $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
            $("#spanGlobalMessage").html(response.Message);
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
        }

    }
    function onFailure(message) {

        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('errorIcon');
    }
    function GetCultureInfo(pid) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetLocaleInfo", "Master")',
            contentType: 'application/json',
            dataType: 'json',
            data: "{'CultureCode': '" + pid + "'}",
            success: function (RetData) {
                if (RetData != null) {

                    $("#ShortDatePattern").html("");
                    $("#ShortTimePattern").html("");

                    $(RetData.lstShortDatePatterns).each(function (indx, obj) {
                        //If Netherland or Rusia And formate is 'dd/MM/yy' then dont bind
                        if (!(($('#CultureCode').val() == 'nl-NL' || $('#CultureCode').val() == 'ru-RU') && obj == 'dd/MM/yy')) {
                            $("#ShortDatePattern").append("<option value='" + obj + "'>" + obj + "</option>");
                        }
                    });

                    $(RetData.lstLongTimePatterns).each(function (indx, obj) {
                        $("#ShortTimePattern").append("<option value='" + obj + "'>" + obj + "</option>");
                    });

                    $("#CurrencyDecimalDigits").val(RetData.CurrencyDecimalDigits);
                    $("#NumberDecimalDigits").val(RetData.NumberDecimalDigits);
                    $("#ShortDatePattern").val(RetData.ShortDatePattern);
                    $("#ShortTimePattern").val(RetData.ShortTimePattern);
                    $("#WeightDecimalPoints").val(RetData.WeightDecimalPoints);
                    $("#TurnsAvgDecimalPoints").val(RetData.TurnsAvgDecimalPoints);
                    $("#CurrencySymbol").append("<option value=''></option>");
                    $(RetData.lstCurrencySymbol).each(function (indx, obj) {                       
                        $("#CurrencySymbol").append("<option value='" + obj.CurrencySymbol + "'>" + obj.CurrencySymbol + "</option>");
                    });
                    $("#CurrencySymbol").val(RetData.CurrencySymbol);
                }
            },
            error: function (err) {
                alert(err);
            }
        });
    }
</script>
