@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    ViewBag.Title = ResLayout.DataArchive;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DisplayUDFButton = false, DisplayColumnSetupButton = true, ColumnSetupFor = "DataArchivalList" };
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Notifications, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Notifications, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
}
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
<style type="text/css">
    .dataTables_scrollBody {
        max-height: 500px;
        overflow-y: scroll;
    }
</style>
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script language="javascript" type="text/javascript">
        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Master/DeleteRoleRecords";
        var PostCount = 0;
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var objColumns = {}
        $(document).ready(function () {
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "100%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[1, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries',
                    "sLoadingRecords": '@eTurns.DTO.Resources.ResMessage.MsgLoading'

                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'DataArchivalList' },
                        "async": false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

                    if (aData.IsDeleted == true && aData.IsArchived == true)
                        $(nRow).css('background-color', '#B9BCBF');
                       // nRow.className = "GridDeleatedArchivedRow";
                    else if (aData.IsDeleted == true)
                        $(nRow).css('background-color', '#FFCCCC');
                      //  nRow.className = "GridDeletedRow";
                    else if (aData.IsArchived == true)
                        $(nRow).css('background-color', '#CCFFCC');
                     //   nRow.className = "GridArchivedRow";
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'DataArchivalList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/Master/ArchiveScheduleListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }

                    if (oSettings.aaSorting.length != 0) {
                        //aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                        var sortValue = "";
                        for (var i = 0; i <= oSettings.aaSorting.length - 1; i++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[i][0]] + ' ' + oSettings.aaSorting[i][1];

                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });


                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                },
                "aoColumns": [
                            { mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' },
			                {
			                    "mDataProp": "ScheduleID",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false,
			                    "fnRender": function (obj, val) {
			                        return "<a href='javascript:void(0);' onclick='EditArchiveSchedule(" + obj.aData.ScheduleID + ");'>" + obj.aData.ScheduleID + "</a>";
			                    }
			                },
                            {
                                "mDataProp": "IsScheduleActive", "sClass": "read_only", "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            { "mDataProp": "Module", "sClass": "read_only" },
                            { "mDataProp": "Duration", "sClass": "read_only" },
                            { "mDataProp": "DurationTypeName", "sClass": "read_only" },
			                { "mDataProp": "Created", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return obj.aData.CreatedDate;
			                    }
			                },
			                {
			                    "mDataProp": "Updated", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        return obj.aData.UpdatedDate;
			                    }
			                },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" }

		    ]
            });

            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');

        });

        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }

    </script>
}
<script type="text/javascript">
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true)
         ];
    function callbacknew() { ShowNewTab('CreateArchiveSchedule', 'frmDataArchive'); }
    function callbackhistory() { } //HistoryTabClick(); }
    //function callbackhistory() {
    //    //if (IsReloadItemList == true) {
    //        $('#myDataTable').dataTable().fnDraw();
    //        //IsReloadItemList = false;
    //    //}
    //}
</script>
<div class="userListingWrapper">
    <h2>
        @ResLayout.DataArchive
    </h2>
    @*<div class="Infoclass">
        <a href="@RolesPDFURL" target="_blank">
            <img src="~/Content/images/Info.png" alt="Help" />
        </a>
    </div>*@
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        <ul class='tabs'></ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                    @*<input type="button" value="Search" class="searchBtn" />*@
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.Notifications)
            @*NARROW SEARCH STARTS HERE*@
            @*@Html.Partial("NarrowSearchLayout", modelCommon)*@
            @*NARROW SEARCH STARTS HERE*@
            <div class="userContent">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @ResCommon.RowNo
                            </th>
                            <th>
                                @ResCommon.ScheduleID
                            </th>
                            <th>
                                @ResCommon.IsScheduleActive
                            </th>
                            <th>
                                @ResCommon.Module
                            </th>
                            <th>
                                @ResCommon.Duration
                            </th>
                            <th>
                                @ResCommon.DurationType
                            </th>
                            <th>
                                @ResCommon.CreatedOn
                            </th>
                            <th>
                                @ResCommon.UpdatedOn
                            </th>                            
                            <th>
                                @ResCommon.CreatedBy
                            </th>
                            <th>
                                @ResCommon.UpdatedBy
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                @*<button id="btnAddNewCompany" value="Ok" style="display: none">
                    Add New
                </button>
                <button id="btnDeleteCompany" value="cancel" style="display: none">
                    Delete Selected
                </button>
                <div id="processing_message" style="display: none" title="Processing">
                    @ResMessage.RequestProcessMessage
                </div>*@
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
   
    function EditArchiveSchedule(ScheduleId) {
        var paramsTopass = new Array();
        paramsTopass.push({ name: "ScheduleId", value: ScheduleId });
        //paramsTopass.push({ name: "EnterpriseID", value: EnterpriseID });
        return ShowEditTabWithParams("EditArchiveSchedule", "frmDataArchive", paramsTopass);
        //return ShowEditTab("EditArchiveSchedule/" + ScheduleId, "frmDataArchive");
    }
</script>
<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
