@model eTurns.DTO.UserMasterDTO
@{
    //Layout = "~/Views/Shared/_PopupMaster.cshtml";
    List<UserTypeInfo> lstUserTypes = new List<UserTypeInfo>();
    UserTypeInfo objUserTypeInfo;
    if (eTurnsWeb.Helper.SessionHelper.RoleID == -1)
    {
        objUserTypeInfo = new UserTypeInfo();
        objUserTypeInfo.UserType = 1;
        objUserTypeInfo.UserTypeName = "Super admin";
        lstUserTypes.Add(objUserTypeInfo);

    }
    if (eTurnsWeb.Helper.SessionHelper.UserType == 1 || eTurnsWeb.Helper.SessionHelper.UserType == 2)
    {
        objUserTypeInfo = new UserTypeInfo();
        objUserTypeInfo = new UserTypeInfo();
        objUserTypeInfo.UserType = 2;
        objUserTypeInfo.UserTypeName = "Enterprise admin";
        lstUserTypes.Add(objUserTypeInfo);
    }
    objUserTypeInfo = new UserTypeInfo();
    objUserTypeInfo.UserType = 3;
    objUserTypeInfo.UserTypeName = "Company admin";
    lstUserTypes.Add(objUserTypeInfo);

    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(System.Web.Hosting.HostingEnvironment.MapPath("/SiteSettings.xml"));
    string ApplyChangePassword = eTurns.DTO.SiteSettingHelper.ApplyChangePassword; // Settinfile.Element("ApplyChangePassword").Value;
    string cValue = "111111";
    string strStyleDisplay = "style=display:none;";
    if (!string.IsNullOrEmpty(ApplyChangePassword) && ApplyChangePassword.ToLower() == "yes")
    {
        cValue = string.Empty;
        strStyleDisplay = string.Empty;
    }

    bool IsReportView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.View);

}
<style>
    .pswd_info, .Cpswd_info {
    top: 11% !important;
    width: 12% !important;
    height: 59% !important;
}
    #pswd_info, #Cpswd_info
    {
        left: 82.5% !important;
    }
</style>

@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
<script src="@Url.Content("~/Content/OpenAccess/sha1-min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/PageScripts/ResetLogin.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/OpenAccess/PageStyle/UserPage.css")" />
@section head{
    <script type="text/javascript">

        var pswd = '';
        var Cpswd = '';
    $(document).ready(function () {
        var ModelUserID = '@Model.ID'
        jQuery.validator.addMethod('passwordrequired', function (value, element, params) {
            if (ModelUserID < 1)
                return false;
            else
                return true;
        }, '');
        jQuery.validator.unobtrusive.adapters.add('passwordrequired', {}, function (options) {

            options.rules['passwordrequired'] = true;
            options.messages['passwordrequired'] = options.message;

        });
        $("#btnsave").click(function () {
            var retval = checkpass("txtNewPassword");
            if (retval == false) {

            }
        });

        $("#frmUserChangePass").submit(function (e) {

            $.validator.unobtrusive.parse("#frmUserChangePass");

            if ($(this).valid()) {
                //$("#txtCurrentPassword").val(hex_sha1($("#txtCurrentPassword").val()));
                //$("#txtNewPassword").val(hex_sha1($("#txtNewPassword").val()));
                //$("#txtConfirmPassword").val(hex_sha1($("#txtConfirmPassword").val()));
            }

        });
        $('input#txtNewPassword').keyup(function () {

            pswd = $(this).val();
            if (pswd.length < 8) {
                $('#length').removeClass('valid').addClass('invalid');
            } else {
                $('#length').removeClass('invalid').addClass('valid');
            }
            if (pswd.match(/[a-z]/)) {
                $('#letter').removeClass('invalid').addClass('valid');
            } else {
                $('#letter').removeClass('valid').addClass('invalid');
            }

            //validate capital letter
            if (pswd.match(/[A-Z]/)) {
                $('#capital').removeClass('invalid').addClass('valid');
            } else {
                $('#capital').removeClass('valid').addClass('invalid');
            }
            if (pswd.match(/\W/g)) {
                $('#special').removeClass('invalid').addClass('valid');
            } else {
                $('#special').removeClass('valid').addClass('invalid');
            }

            //validate number
            if (pswd.match(/\d/)) {
                $('#number').removeClass('invalid').addClass('valid');
            } else {
                $('#number').removeClass('valid').addClass('invalid');
            }
            $('#pswd_info').show();
        }).focus(function () {
            $('#pswd_info').show();
        }).blur(function () {
            $('#pswd_info').hide();
        });
        $('input#txtConfirmPassword').keyup(function () {

            Cpswd = $(this).val();
            if (Cpswd.length < 8) {
                $('#Clength').removeClass('valid').addClass('invalid');
            } else {
                $('#Clength').removeClass('invalid').addClass('valid');
            }
            if (Cpswd.match(/[a-z]/)) {
                $('#Cletter').removeClass('invalid').addClass('valid');
            } else {
                $('#Cletter').removeClass('valid').addClass('invalid');
            }

            //validate capital letter
            if (Cpswd.match(/[A-Z]/)) {
                $('#Ccapital').removeClass('invalid').addClass('valid');
            } else {
                $('#Ccapital').removeClass('valid').addClass('invalid');
            }
            if (Cpswd.match(/\W/g)) {
                $('#Cspecial').removeClass('invalid').addClass('valid');
            } else {
                $('#Cspecial').removeClass('valid').addClass('invalid');
            }

            //validate number
            if (Cpswd.match(/\d/)) {
                $('#Cnumber').removeClass('invalid').addClass('valid');
            } else {
                $('#Cnumber').removeClass('valid').addClass('invalid');
            }
            $('#Cpswd_info').show();
        }).focus(function () {
            $('#Cpswd_info').show();
        }).blur(function () {
            $('#Cpswd_info').hide();
        });
    });
        $("input#txtNewPassword").focus(function (e) {
            $('#pswd_info').show();
        });
        $("input#txtNewPassword").focusout(function (e) {
            $('#pswd_info').hide();
        });

        $("input#txtNewPassword").click(function (e) {
            $('#pswd_info').show();
        });
        //confirmpassword
        $("input#txtConfirmPassword").focus(function (e) {
            $('#Cpswd_info').show();
        });
        $("input#txtConfirmPassword").focusout(function (e) {
            $('#Cpswd_info').hide();
        });

        $("input#txtConfirmPassword").click(function (e) {
            $('#Cpswd_info').show();
        });
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#txtUserName").focus();
    }
    function onPasswordSuccess(response) {
        if (response.Message == "ok") {
            window.location = '/Master/MyProfile';
        }
        else if (response.Message == "wrngpsw") {
            alert('@eTurns.DTO.Resources.ResMessage.OldPasswordInvalid');
                $("#txtCurrentPassword").val("");
                $("#txtNewPassword").val("");
                $("#txtConfirmPassword").val("");
                return false;
            }
        else if (response.Message == '@eTurns.DTO.Resources.ResMessage.RepeatPassword') {
                alert('@ResLoginForms.repeatpwd');
                $("#txtCurrentPassword").val("");
                $("#txtNewPassword").val("");
                $("#txtConfirmPassword").val("");
                return false;
        }
        else if (response.Message == 'strongpassword') {
            alert(response.StrongPassword);
            $("#txtCurrentPassword").val("");
            $("#txtNewPassword").val("");
            $("#txtConfirmPassword").val("");
            return false;
        }
        }

        function OnPasswordBegin(response) {


        }
        function validateData() {

            var oldpassword = $("#txtoldpassword").val();
            var newpassword = $("#txnewpassword").val();
            var confirmpassword = $("#txtconfirmpassword").val();
            if (oldpassword == "") {
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                $("#spanGlobalMessage").html('@ResUserMaster.MsgEnterOldPassword');
                showNotificationDialog();
                return false;
            }
            else if (newpassword == "") {
               $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                $("#spanGlobalMessage").html('@ResUserMaster.MsgEnterNewPassword');
                showNotificationDialog();
                return false;
            }
            else if (confirmpassword == "") {
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                $("#spanGlobalMessage").html('@ResUserMaster.MsgEnterConfirmPassword');
                showNotificationDialog();
                return false;
            }
            else if (newpassword != confirmpassword) {
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                $("#spanGlobalMessage").html('@ResUserMaster.MsgPasswordConfirmValidation');
                showNotificationDialog();
                return false;
            }
            return true;
        }
        function CheckPassword()
        {
            var Password = '';
            var ConfirmPassword = '';
            Password = $("input#txtNewPassword").val();
            ConfirmPassword = $("input#txtConfirmPassword").val();
            if(Password != ConfirmPassword)
            {
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                $("#spanGlobalMessage").html('@ResUserMaster.MsgPasswordConfirmSameValidation');
                showNotificationDialog();
                return false;
            }
            return true;
        }
    </script>
}
<div class="userListingWrapper">
    <h2 style="padding: 0% 0 0 3%;">
        @eTurns.DTO.Resources.ResCommon.UserProfile
    </h2>
    @*<div class="Infoclass">
            <a href="~/Uploads/HelpDoc/InventoryLocation.pdf" target="_blank">
                <img src="~/Content/images/Info.png" alt="Help" />
            </a>
        </div>*@
    <div class="userHead">
        @{
            //            bool isUpdate = true;
            //            bool isInsert = true;
            bool DisableControl = false;
            if (Model != null && Model.ID == eTurnsWeb.Helper.SessionHelper.UserID)
            {
                DisableControl = true;
            }
        }

        <div class="mainForm" style="padding: 0% 0 0 0%;">
            @using (Ajax.BeginForm("MyProfile", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmUser" }))
            {
                 @Html.AntiForgeryToken()
                <div class="editorForm">
                    @Html.Hidden("hdnDisableControl", DisableControl)
                    @Html.HiddenFor(model => model.IseTurnsAdmin)
                    <ul>
                        <li>
                            <div class="editor-label" style="display:none;">
                                @Html.LabelFor(model => model.UserType)
                            </div>
                            <div class="editor-field" style="display:none;">
                                @Html.HiddenFor(t => t.UserType)
                                @Html.DropDownListFor(t => t.UserType, new SelectList(lstUserTypes, "UserType", "UserTypeName"), new { @class = "selectBox", @id = "drpUserType", @disabled = "disabled" })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UserType)</span>

                                @*<input type="button" value="Change Password" id="btnChangePass" class="CreateBtn" />*@
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.UserName)<em> *</em>
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.UserName, new { id = "txtUserName", @class = "text-box", maxlength = 128 })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UserName)</span>
                                @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                                @Html.HiddenFor(model => model.GUID)
                                @Html.HiddenFor(model => model.Created)
                                @Html.HiddenFor(model => model.Updated)
                                @Html.HiddenFor(model => model.CreatedBy)
                                @Html.HiddenFor(model => model.LastUpdatedBy)
                                @Html.HiddenFor(model => model.CompanyID)
                                @Html.HiddenFor(model => model.Room)
                                @Html.HiddenFor(model => model.RoomName)
                                @Html.HiddenFor(model => model.CreatedByName)
                                @Html.HiddenFor(model => model.UpdatedByName)
                                @Html.HiddenFor(model => model.IsDeleted)
                                @Html.HiddenFor(model => model.IsArchived)
                                @Html.HiddenFor(model => model.RoleID, new { id = "hdnRoleID" })
                                @Html.HiddenFor(model => model.SelectedModuleIDs, new { id = "hdnSelectedModuleList" })
                                @Html.HiddenFor(model => model.SelectedNonModuleIDs, new { id = "hdnSelectedNonModuleList" })
                                @Html.HiddenFor(model => model.SelectedDefaultSettings, new { id = "hdnSelectedDefaultSettings" })
                                @Html.HiddenFor(model => model.SelectedRoomAccessValue, new { id = "hdnSelectedRoomAccessValue" })
                                @Html.HiddenFor(model => model.SelectedRoomReplanishmentValue, new { id = "hdnSelectedRoomReplanishmentValue" })
                                @Html.HiddenFor(model => model.SelectedEnterpriseAccessValue, new { id = "hdnSelectedEnterpriseAccessValue" })
                                @Html.HiddenFor(model => model.SelectedCompanyAccessValue, new { id = "hdnSelectedCompanyAccessValue" })
                                @Html.HiddenFor(model => model.UserSettingID, new { id = "hdnUserSettingIDValue" })

                            </div>
                        </li>

                        @*<li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Password)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.PasswordFor(model => model.Password, new { id = "txtPassword", @class = "text-box", maxlength = 50 })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Password)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ConfirmPassword)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.PasswordFor(model => model.ConfirmPassword, new { id = "txtConfirmPassword", @class = "text-box", maxlength = 50 })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ConfirmPassword)</span>
                                </div>
                            </li>*@
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Phone)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Phone, new { id = "txtPhone", @class = "text-box", maxlength = 20 })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Phone)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Email)<em> *</em>
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Email, new { id = "txtEmail", @class = "text-box", maxlength = 50 })
                                @*@Html.HiddenFor(t => t.Email)*@
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Email)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.FullName)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.FullName, new { id = "txtFullName", @class = "text-box", maxlength = 255 })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.EmployeeNumber)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.EmployeeNumber, new { id = "txtEmployeeNumber", @class = "text-box", maxlength = 255 })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.CostCenter)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.CostCenter, new { id = "txtCostCenter", @class = "text-box", maxlength = 255 })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.JobTitle)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.JobTitle, new { id = "txtJobTitle", @class = "text-box", maxlength = 255 })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Address)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Address, new { id = "txtAddress", @class = "text-box", maxlength = 255 })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.City)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.City, new { id = "txtCity", @class = "text-box", maxlength = 255 })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.State)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.State, new { id = "txtState", @class = "text-box", maxlength = 255 })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.PostalCode)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.PostalCode, new { id = "txtPostalCode", @class = "text-box", maxlength = 255 })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Phone2)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Phone2, new { id = "txtPhone2", @class = "text-box", maxlength = 255 })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.RedirectURL)
                            </div>
                            <div class="editor-field">
                                @Html.DropDownListFor(model => model.RedirectURL, new List<SelectListItem>() { new SelectListItem() { Text = "select", Value = "" } }, new { @class = "selectBox" })
                                @Html.HiddenFor(t => t.RedirectURL, new { @Id = "hdnRedirectURL" })
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.FirstLicenceAccept)
                            </div>
                            <div class="editor-field">
                                @Model.FirstLicenceAcceptStr
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.LastLicenceAccept)
                            </div>
                            <div class="editor-field">
                                @Model.LastLicenceAcceptStr
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Acceptcount)
                            </div>
                            <div class="editor-field">
                                @Model.Acceptcount
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsRequistionReportDisplay)
                            </div>
                            <div class="editor-field">
                                @if (IsReportView)
                                {
                                    @Html.CheckBox("IsRequistionReportDisplay", Model.IsRequistionReportDisplay ?? false)
                                }
                                else
                                { 
                                    @Html.CheckBox("IsRequistionReportDisplay", Model.IsRequistionReportDisplay ?? false, new { @class = "check-box disableBack", @disabled = "disabled" })
                                    @Html.HiddenFor(model => model.IsRequistionReportDisplay)
                                }

                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsNeverExpirePwd)
                            </div>
                            <div class="editor-field">
                                @Html.CheckBox("IsNeverExpirePwd", Model.IsNeverExpirePwd)

                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.ShowDateTime)
                            </div>
                            <div class="editor-field">
                                @Html.CheckBox("ShowDateTime", Model.ShowDateTime)

                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.IsAutoLogin)
                            </div>
                            <div class="editor-field">
                                @Html.CheckBox("IsAutoLogin", Model.IsAutoLogin)
                            </div>
                        </li>
                        <li>
                            @Html.HiddenFor(model => model.SearchPattern)
                            
                            <div class="editor-label">
                                @Html.LabelFor(model => model.SearchPattern)
                            </div>
                            <div class="editor-field">
                                
                                <select id="ddlSearchOnEnter" class="selectBox">
                                    <option value="1">@ResUserMaster.EnterKeySearch</option>
                                    <option value="2">@ResUserMaster.IncrementalSearch</option>
                                </select>
                                
                            </div>
                        </li>

                        <li>
                            <div class="editor-label">
                                &nbsp;
                            </div>
                            <div class="BtnBlockform">
                                <input type="submit" style="float:left !important;" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                                @*<a style="float:right;" href="@Url.Action("ChangePassword", "Master")" id="ancrChangePass">Change Password</a>*@
                                @*<a href="@Url.Action("Usersetting", "Master")" style="float: right; margin-right: 12px;">
                                        @eTurns.DTO.Resources.ResLayout.UserSetting
                                    </a>&nbsp;&nbsp;*@
                            </div>
                        </li>
                    </ul>
                </div>
            }
            @using (Ajax.BeginForm("SaveUserChangePassword", "Master", new AjaxOptions { HttpMethod = "Post", LoadingElementId = "DivLoading", OnBegin = "OnPasswordBegin", OnSuccess = "onPasswordSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmUserChangePass" }))
            {
                @Html.AntiForgeryToken()
                <div class="editorForm padRightNone">
                    <ul>
                        <li style="width:75% !important;">
                            <b>@ResCommon.PasswordNote</b>
                        </li>
                        <li @strStyleDisplay >
                            <div class="editor-label">
                                @Html.LabelFor(model => model.objChangePassword.CurrentPassword)<em> *</em>
                            </div>
                            <div class="editor-field">
                                
                                @Html.PasswordFor(model => model.objChangePassword.CurrentPassword, new { id = "txtCurrentPassword", @class = "text-box", @maxlength = "50",value=cValue })
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.objChangePassword.CurrentPassword)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.objChangePassword.FirstPassword)<em> *</em>
                            </div>
                            <div class="editor-field">
                                @Html.PasswordFor(model => model.objChangePassword.FirstPassword, new { id = "txtNewPassword", @class = "text-box" })
                                <div id="pswd_info" class="pswd_info" style="top: -7% !important;width: 12% !important;height: 35% !important;">
                                    <h4>Password must meet the following requirements:</h4>
                                    <ul class="password">
                                        <li id="letter" class="invalid">At least <strong>one letter</strong></li>
                                        <li id="capital" class="invalid">At least <strong>one capital letter</strong></li>
                                        <li id="number" class="invalid">At least <strong>one number</strong></li>
                                        <li id="special" class="invalid">Be at least <strong>one special letter</strong></li>
                                        <li id="length" class="invalid">Be at least <strong>8 characters</strong></li>
                                    </ul>
                                </div>
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.objChangePassword.FirstPassword)</span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.objChangePassword.ConfirmPassword)<em> *</em>
                            </div>
                            <div class="editor-field">
                                @Html.PasswordFor(model => model.objChangePassword.ConfirmPassword, new { id = "txtConfirmPassword", @class = "text-box" })
                                <div id="Cpswd_info" class="Cpswd_info" style="top: -7% !important;width: 12% !important;height: 35% !important;">
                                    <h4>Confirm Password must meet the following requirements:</h4>
                                    <ul class="password">
                                        <li id="Cletter" class="invalid">At least <strong>one letter</strong></li>
                                        <li id="Ccapital" class="invalid">At least <strong>one capital letter</strong></li>
                                        <li id="Cnumber" class="invalid">At least <strong>one number</strong></li>
                                        <li id="Cspecial" class="invalid">Be at least <strong>one special letter</strong></li>
                                        <li id="Clength" class="invalid">Be at least <strong>8 characters</strong></li>
                                    </ul>
                                </div>
                                <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.objChangePassword.ConfirmPassword)</span>
                            </div>
                        </li>
                        <li>
                            <input type="submit" style="float: left; margin-left: 221px; margin-top: 10px" value="@ResCommon.Save"
                                   id="btnsave" class="btnGeneral" name="btnsave" onclick="return CheckPassword();" />
                            @Html.HiddenFor(model => model.objChangePassword.ID)
                        </li>
                    </ul>

                </div>

            }
            <div class="editorForm padRightNone">
                <input type="button" class="btnGeneral" id="btnOveriteOtherRoomsGridSetting" name="btnOveriteOtherRoomsGridSetting" value="@ResMessage.OverrideOtherRoomsGridSetUp" />
            </div>
            
            <div class="dialog" id="GridSettingInfoDialog" style="float: left; display: none; width: 450px;">
                <div class="inner" style="width: 450px;">
                    <p class="text" id="Message" style="float: left; text-align: left; padding-left: 10px;">
                        <b>@ResMessage.ConfirmOverrideOtherRoomsGridSetUp </b>
                    </p>
                    <p class="text" style="float: left; text-align: center; padding-left: 10px;">
                        <a href="javascript:void(0)" class="yes" onclick="ModelYesClick()">
                            <img src="~/Content/images/yes.png" alt="Yes" />@ResCommon.Yes
                        </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                                 class="no" onclick="ModelCancelClick()">
                            <img src="~/Content/images/no.png" alt="Cancel" />@ResCommon.Cancel
                        </a>
                    </p>
                </div>
            </div>            
        </div>

    </div>
</div>

<script type="text/javascript">
    var OveriteRoomsGridSetUpWithCurrentRoomURL = '@Url.Content("~/Master/OverrideRoomsGridSetUpWithCurrentRoom")';
    //--------- Variables ----------
    //var ddlPageName;
    var hdnSelectedRoomReplanishmentValue = $("#hdnSelectedRoomReplanishmentValue");
    var hdnSelectedRoomAccessValue = $("#hdnSelectedRoomAccessValue");
    var hdnRoleID = $("#hiddenID")

    var SelectedModuleList = new Array();
    var SelectedNonModuleList = new Array();
    var SelectedDefaultSettings = new Array();
    var SelectedRooms = new Array();

    var hdnSelectedModuleList = $("#hdnSelectedModuleList");
    var hdnSelectedNonModuleList = $("#hdnSelectedNonModuleList");
    var hdnSelectedDefaultSettings = $("#hdnSelectedDefaultSettings");

    var ddlDefaultPermissionRooms = $("#ddlDefaultPermissionRooms");
    var hdnCurrentSelectedRoom = 0;  //= $("#hdnCurrentSelectedRoom");
    var AllowDeletePopup = false;

    //--------- ----------
    $("form").submit(function (e) {
        $.validator.unobtrusive.parse("#frmUser");
        if ($(this).valid()) {
        }
        e.preventDefault();
    });


    function onSuccess(response) {
        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            clearControls('frmUser');
            ClearAllRolesDropdown();

            $('input:checkbox').removeAttr('checked');
            // $("#txtDescription").val("");

            $("#txtUserName").val("");
            $("#txtUserName").focus();
        }
        else if (idValue == 0) {
            //clearControls('frmRole');
            $("#txtUserName").val("");
            $("#txtUserName").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                clearControls('frmUser');
                ClearAllRolesDropdown();
            }
        }
        else if (idValue > 0) {

            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#txtUserName").focus();
            }
            else {
                //                clearControls('frmUser');
            }
        }
    }

    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#txtUserName").focus();
    }

    $("select#ddlSearchOnEnter").change(function () {
        $("input#SearchPattern").val($("select#ddlSearchOnEnter").val());
    });
    $(document).ready(function () {
        $("select#ddlSearchOnEnter").val('@Model.SearchPattern');
        $("#btnChangePass").click(function () {
            location.href = "/Master/ChangePassword";

        });
        
    });

    $('#btnOveriteOtherRoomsGridSetting').on('click', function (e) {
        $('#GridSettingInfoDialog').modal();
        return false;
    });

    function ModelCancelClick() {
        $.modal.impl.close();
    }

    function ModelYesClick() {
        $('#DivLoading').show();
        $.modal.impl.close();
        $.ajax({
            url: OveriteRoomsGridSetUpWithCurrentRoomURL,
            type: 'POST',
            async: false,
            contentType: "application/json",
            dataType: "json",
            success: function (response) {
                //$.modal.impl.close();
                $('#DivLoading').hide();
                showNotificationDialog();
                $("#spanGlobalMessage").html('@ResMessage.GridSettingSavedSuccessfully');
                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
            },
            error: function (xhr) {
                //$.modal.impl.close();
                $('#DivLoading').hide();
                showNotificationDialog();
                $("#spanGlobalMessage").html('@ResMessage.FailToSaveGridSetting');
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            }
        });
    }

    var _myProfile = (function ($) {
        var self = {};

        self.LoadRedirectPageDDL = function () {
            var ddlPageName = $("#RedirectURL");

            //My Profile Group

            ddlPageName.append('<optgroup value="javascript:void(0);"> ' + "My Profile");
            ddlPageName.append('<option  value="/Master/MyProfile"> My Profile</option>');
            ddlPageName.append('</optgroup>');

            $('.RightBlock').find('div.Rnav').find("ul[id='rightNav']").find("li:first").each(function (i) {
                var mnuBtnText = $.trim($(this).find('a').first().text());
                var mnuBtnVal = $.trim($(this).find('a').first().attr("href"));
                if (mnuBtnText.length > 0) {
                    ddlPageName.append('<optgroup  value="' + mnuBtnVal + '"> ' + mnuBtnText);
                    $(this).find('a').first().parent().find('ul').find('li').each(function (j) {
                        if ($(this).parent().hasClass('sub_subMenu') === false) {
                            var subMnuText = $.trim($(this).find('a').first().text());
                            var subMnuVal = $.trim($(this).find('a').attr("href"));
                            ddlPageName.append('<option  value="' + subMnuVal + '"> ' + ' &nbsp;     ' + subMnuText + '</option>');
                        }
                    });
                    ddlPageName.append('</optgroup>');
                }
            });

            //Report Group

            //ddlPageName.append('<optgroup value="javascript:void(0);"> ' + "Reports");
            //$('.Lnav').children("ul").children("li:first").find("ul[id='nav']").children("li").children("ul").children("li").each(function (i) {
            //    var subMnuText = $.trim($(this).find('a:first').text());
            //    var subMnuVal = $.trim($(this).find('a:first').attr("href"));
            //    if ($.trim(subMnuText) != '') {
            //        ddlPageName.append('<option  value="' + subMnuVal + '"> ' + ' &nbsp;     ' + subMnuText + '</option>');
            //    }
            //});
            //ddlPageName.append('</optgroup>');

            //Dashboard Group

            //ddlPageName.append('<optgroup value="javascript:void(0);"> ' + "Dashboard");
            //ddlPageName.append('<option  value="/"> Dashboard</option>');
            //ddlPageName.append('</optgroup>');

            //Other than Dashboard and Report Group

            $('.Lnav').children("ul").children("li").each(function (i) {
                if (i >= 2) {
                    $(this).find("ul[id='nav']").children("li").children("ul").children("li").each(function () {
                        var mnuBtnText = $.trim($(this).find('a').first().text());
                        var mnuBtnVal = $.trim($(this).find('a').first().attr("href"));

                        if ($.trim(mnuBtnText) != '') {
                            ddlPageName.append('<optgroup value="' + mnuBtnVal + '"> ' + mnuBtnText);
                            $(this).children('ul').children('li').each(function (j) {
                                var subMnuText = $.trim($(this).find('a:first').text());
                                var subMnuVal = $.trim($(this).find('a:first').attr("href"));
                                if ($.trim(subMnuText) != '') {
                                    ddlPageName.append('<option  value="' + subMnuVal + '"> ' + ' &nbsp;     ' + subMnuText + '</option>');
                                }
                            });
                            ddlPageName.append('</optgroup>');
                        }
                    });
                }
                else if (i == 0) {
                    ddlPageName.append('<optgroup value="javascript:void(0);"> ' + "Reports");
                    $(this).find("ul[id='nav']").children("li").children("ul").children("li").each(function () {
                        var subMnuText = $.trim($(this).find('a:first').text());
                        var subMnuVal = $.trim($(this).find('a:first').attr("href"));
                        if ($.trim(subMnuText) != '') {
                            ddlPageName.append('<option  value="' + subMnuVal + '">' + subMnuText + '</option>');
                        }
                    });
                    ddlPageName.append('</optgroup>');
                }
                else if (i == 1) {
                    if ($(this).attr("class") == "dashboardIcon") {
                        ddlPageName.append('<optgroup value="javascript:void(0);"> ' + "Dashboard");
                        ddlPageName.append('<option  value="/"> Dashboard</option>');
                        ddlPageName.append('</optgroup>');
                    }
                }

            });
            //$("select#RedirectURL").val($("input#hdnRedirectURL").val());
            ddlPageName.val($("input#hdnRedirectURL").val());

        }

        return self;
    })(jQuery);

</script>
