@model eTurns.DTO.FTPMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
}
<div class="userHead">
    @{
        bool isUpdate;
        bool isInsert;
        if (ViewBag.ViewOnly == true)
        {
            isUpdate = false;
            isInsert = false;
        }
        else
        {
            isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.FTPMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
            isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.FTPMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        }
    }
    @using (Ajax.BeginForm("SFTPSave", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onFTPSaveSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmFTPMaster" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.CreatedDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.LastUpdated)
                        </label>
                        : <span>@(Model.UpdatedDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="editorForm">
            <ul>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.SFtpName)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.SFtpName, new { @class = "text-box", maxlength = 512 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.SFtpName)</span>
                        @Html.HiddenFor(model => model.ID)

                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.ServerAddress)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.ServerAddress, new { @class = "text-box", maxlength = 512 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ServerAddress)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Port)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Port, new { @class = "text-box", maxlength = 4 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Port)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.UserName)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.UserName, new { @class = "text-box", maxlength = 512 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.UserName)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Password)<em> *</em>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Password, new { @class = "text-box", maxlength = 512 })
                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Password)</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsImportFTP)
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.IsImportFTP)
                        @*@Html.CheckBox("IsImportFTP", Model.IsImportFTP != null && (bool)Model.IsImportFTP)*@
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        <br />
                        @Html.LabelFor(model => model.ContactEmail)
                    </div>
                    <div class="editor-field" style="width: 670px;">                      
                                @Html.TextAreaFor(model => model.ContactEmail, new { @class = "text-box" }) 
                                @Html.ValidationMessageFor(model => model.ContactEmail)
                                <br>
                                <span style="color:#76923c">@ResMessage.msgMultiemailEntry</span>
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnBinCancel" class="CreateBtn" />
                        @if (isInsert == true && Model.ID == 0)
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == true)
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (isUpdate == false && isInsert == false)
                        {
                            <script>
                                //This is the case when archived or deleted record is being viewed..
                                disableControls('frmFTPMaster');
                                $('#btnBinCancel').removeAttr('disabled');
                            </script>
                        }
                    </div>
                </li>
                
            </ul>
        </div>
    }
</div>
@Html.Partial("_RequiredMessages")
<script type="text/javascript">
    $("form").submit(function (e) {
        var contactEmail = $("#ContactEmail").val();
        if (contactEmail !== undefined && contactEmail != null && contactEmail != "" && contactEmail.length > 0) {
            var toManyAddress = contactEmail.split(",");
            var res = true;
            for (var i = 0; i < toManyAddress.length; i++) {
                if (toManyAddress[i] != '') {
                    if (!isValidEmailAddress(toManyAddress[i])) {
                        showNotificationDialog();
                        $("#spanGlobalMessage").html('@ResMessage.InvalidEmail');
                        $("#spanGlobalMessage").removeClass('succesIcon errorIcon').addClass('WarningIcon');
                        return false;
                    }
                }
            }
        }
        $.validator.unobtrusive.parse("#frmFTPMaster");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
        $('#NarroSearchClear').click();
    });
    $('#btnSave').click(function () {
        //var contactEmail = $("#ContactEmail").val();
        //if (contactEmail !== undefined && contactEmail != null && contactEmail != "" && contactEmail.length > 0) {
        //    var toManyAddress = contactEmail.split(",");
        //        var res = true;
        //        for (var i = 0; i < toManyAddress.length; i++) {
        //            if (toManyAddress[i] != '') {
        //                if (!isValidEmailAddress(toManyAddress[i])) {
        //                    alert("Please enter valid Contact email address");
        //                    return false;
        //                }
        //            }
        //        }
        //    }
        //$("form").submit();
        //return true;
    });
</script>
<script language="javascript" type="text/javascript">
    function onFTPSaveSuccess(response) {
        IsRefreshGrid = true;
        showNotificationDialog();
        var idBinValue = $("#ID").val();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#SFtpName").focus();
        }
        else if (idBinValue == 0) {
            $("#SFtpName").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0) {
                    $('#NewMasterPopUP').data("IDVal", response.NewBinIDPopup + '~' + $("#SFtpName").val()).dialog('close');
                }
                else {
                    setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                    ShowNewTab('SFTPCreate', 'frmFTPMaster');
                }
            }
        }
        else if (idBinValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#SFtpName").focus();
            }
            else {
                SwitchTextTab(0, 'SFTPCreate', 'frmFTPMaster');
            }
        }
    }
    function onFailure(message) {

        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#SFtpName").focus();
    }

    $(document).ready(function () {
        $('#btnBinCancel').click(function (e) {
            if ($('#NewMasterPopUP') != undefined && $('#NewMasterPopUP').length > 0)
                $('#NewMasterPopUP').dialog('close');
            else {
                SwitchTextTab(0, 'SFTPCreate', 'frmFTPMaster');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
            }
            $('#NarroSearchClear').click();
        });
        $('form').areYouSure({ 'message': MsgLostChangesConfirmation });

    });

    _Common.addRequiredSign();
</script>
