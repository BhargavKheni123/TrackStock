@model eTurns.DTO.EnterpriseDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    string CharCodeList = eTurnsWeb.Helper.CommonUtility.GetNotAllowCharList();

    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));
    string ValidatePhoneNumber = eTurns.DTO.SiteSettingHelper.ValidatePhoneNumber; // Settinfile.Element("ValidatePhoneNumber").Value;
    string CommonFileExtension = eTurns.DTO.SiteSettingHelper.CommonAllowedFileExtension;
}
<script type='text/javascript' src="@Url.Content("~/Scripts/ajaxfileupload.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>
<style type="text/css">
    #pswd_info {
        position: absolute;
        /* bottom: -75px; */
        bottom: -115px\9;
        right: 0px;
        width: 11%;
        padding: 15px;
        background: #fefefe;
        font-size: .875em;
        border-radius: 5px;
        box-shadow: 0 1px 3px #ccc;
        border: 1px solid #ddd;
        height: 20%;
        left: 80%;
        top: 50%;
    }

        #pswd_info h4 {
            margin: 0 0 10px 0;
            padding: 0;
            font-weight: normal;
        }

    #pswd_info {
        display: none;
    }

        #pswd_info li.invalid {
            background: url(../Content/images/invalid.png) no-repeat 0 50%;
            padding-left: 14px !important;
            line-height: 24px;
            color: #ec3f41;
        }

        #pswd_info li.valid {
            background: url(../Content/images/valid.png) no-repeat 0 50%;
            padding-left: 19px !important;
            line-height: 24px;
            color: #3a7d34;
        }
</style>
@{
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.EnterpriseMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.EnterpriseMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    string CurrentEnterprise = eTurnsWeb.Helper.SessionHelper.EnterPriceID.ToString();
}
@using (Ajax.BeginForm("EnterpriseSave", "Master", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, LoadingElementId = "DivLoading", OnFailure = "onFailure" }, new { @id = "frmEnterprise", autocomplete = "off" }))
{
     @Html.AntiForgeryToken()
    <div class="userHead" data-ng-controller="EnterpriseDetailsController">
        @Html.ValidationSummary(true)

        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.CreatedDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.UpdatedDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                </ul>
            </div>
        }
        <div class="mainForm">
            <div class="editorForm">
                <ul>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Name)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Name, new { @class = "text-box single-line", onkeypress = "return NotAllowCharacter(event);", ondrop = "return false;", onblur = "return NotAllowedSpecialCharacters(this);" })
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Name)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.EnterpriseUserID)
                            <input type="hidden" id="hdPhoneRegex" />
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsActive)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsActive)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.IsActive)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Address)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Address)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Address)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.City)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.City)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.City)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.State)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.State)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.State)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PostalCode)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.PostalCode)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.PostalCode)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Country)<em> *</em>
                        </div>
                        <div class="editor-field">
                            @*@Html.EditorFor(model => model.Country)*@
                            @*@Html.DropDownListFor(model => model.Country, new SelectList(ViewBag.CountryList, "CountryName", "CountryName", Model.Country), new { @class = "selectBox" })*@
                            <span style="position:relative">
                                <input type="hidden" value="false" id="hdnIsLoadMoreCountry" />
                                @Html.TextBoxFor(model => model.Country, new { @class = "selectBox", maxlength = 127 })
                                <a id="lnkShowAllOptionsCR" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;font-size:19px;background-color:#fff;" class="ShowAllOptionsBinCR"><img src="/Content/images/arrow_down_black.png" alt="select" /></a>
                            </span>
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Country)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.AllowABIntegration)
                        </div>
                        <div class="editor-field">
                                @Html.CheckBoxFor(model => model.AllowABIntegration, new { @class = "check-box" })
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ContactPhone)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.ContactPhone)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ContactPhone)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ContactEmail)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.ContactEmail)
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ContactEmail)</span>
                        </div>
                    </li>
                    <li>
                        <div class="editor-label">
                            &nbsp;
                        </div>
                        <div class="BtnBlockform">
                            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                            @if (Model.IsDeleted == false)
                            {
                                if (isInsert == true && Model.ID == 0)
                                {
                                    <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                                }
                                else if (isUpdate == true)
                                {

                                    <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave"
                                           class="CreateBtn" />
                                }
                            }
                        </div>
                    </li>
                </ul>
            </div>
            <div class="editorForm padRightNone">
                <ul>
                    <li>
                        @if (Model != null && Model.ID > 0)
                        {
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResEnterprise())
                        }
                    </li>
                    <li>
                        <h4>
                            @ResEnterprise.hdrEnterpriseUserDetails
                        </h4>
                    </li>
                    @if (Model.lstSuperAdmins != null && Model.lstSuperAdmins.Count > 0)
                    {


                        <li id="liSuperAdmins">
                            <div id="divliSuperAdmins">
                                <div id="divSuperAdmins" style="width: 99.5%; min-height: 140px">
                                    <div style="text-align: center; float: left; width: 80%;">
                                        <span id="spanErrorMsg" style="color: Green;"></span>
                                    </div>
                                    <div>
                                        <input type="button" value="Add Enterprise super admin" class="CreateBtn" data-ng-click="AddNewSuperAdmin();" />
                                        @Html.TextBoxFor(model => model.EnterpriseSuperAdminDirty, new { @data_ng_model = "EnterpriseSuperAdminDirty", @style = "display:none;" })
                                    </div>

                                    <div class="userContentInnerGrid" style="max-height:200px; overflow:auto; border-left:1px solid #ddd; border-bottom:1px solid #ddd;">
                                        <table class="display dataTable" id="EnterpriseSuperAdmins">
                                            <thead>
                                                <tr role="row">
                                                    <th>
                                                        @ResUserMaster.IsEPSuperAdmin
                                                    </th>
                                                    <th>
                                                        @ResUserMaster.UserName
                                                    </th>
                                                    <th>
                                                        @ResUserMaster.Role
                                                    </th>
                                                    @*<th>
                                                            @ResUserMaster.EmailAddress
                                                        </th>*@
                                                    @*<th>
                                                            @ResUserMaster.IsDefault
                                                        </th>*@
                                                    <th>
                                                        @ResUserMaster.MarkDeleted
                                                    </th>
                                                </tr>

                                            </thead>
                                            <tbody>
                                                <tr ng-repeat="item in EnterpriseSuperAdmins track by $index" ng-class="($index % 2 == 0) ? 'even' : 'odd'" data-ng-hide="item.MarkDeleted">
                                                    <td>
                                                        <input type="checkbox" data-ng-model="item.IsEPSuperAdmin" class="check-box" data-ng-change="AssignRevokeAdmin(item)" />
                                                        <input type="hidden" name="lstSuperAdmins[{{$index}}].IsEPSuperAdmin" value="{{item.IsNotExceed}}" class="check-box" />

                                                    </td>
                                                    <td>
                                                        <input type="text" name="lstSuperAdmins[{{$index}}].UserName" data-ng-model="item.UserName" id="txtUserName_{{$index}}" style="width:90%;background:white" class="text-box" />
                                                        <input type="hidden" name="lstSuperAdmins[{{$index}}].UserID" value="{{item.UserID}}" data-ng-model="item.UserID" />
                                                        @*<input type="text" id="hdnUserName_{{$index}}" data-ng-model="item.UserName" value="{{item.UserName}}" style="display:none;" />*@
                                                    </td>
                                                    <td>
                                                        <input type="text" name="lstSuperAdmins[{{$index}}].RoleName" id="txtRoleName_{{$index}}" data-ng-disabled="item.IsEPSuperAdmin" data-ng-model="item.RoleName" style="width:90%;background:white" class="text-box" />
                                                        <input type="hidden" name="lstSuperAdmins[{{$index}}].RoleID" value="{{item.RoleID}}" data-ng-model="item.RoleID" />
                                                    </td>
                                                    @*<td>
                                                            <input type="text" name="lstSuperAdmins[{{$index}}].Email" data-ng-model="item.Email" style="width:90%;background:white" class="text-box" />
                                                        </td>*@
                                                    @*<td>
                                                            <input type="checkbox" data-ng-model="item.IsDefault" class="check-box" />
                                                            <input type="hidden" name="lstSuperAdmins[{{$index}}].IsDefault" value="{{item.IsDefault}}" class="check-box" />

                                                        </td>*@
                                                    <td>
                                                        <a href="javascript:void(0);" data-ng-click="DeleteSuperAdmin(item);"><img alt="delete" src="/Content/images/delete.png"></a>
                                                        <input type="hidden" name="lstSuperAdmins[{{$index}}].MarkDeleted" value="{{item.MarkDeleted}}" />
                                                    </td>

                                                </tr>
                                                <tr data-ng-show="([EnterpriseSuperAdmins] | filter:{ MarkDeleted : false }).length < 1" class="norecfound">
                                                    <td colspan="6" style="text-align:center;vertical-align:middle;">
                                                        No Record Found
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>

                                </div>
                            </div>
                        </li>









                        @*<li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.EnterpriseSuperAdmins)<em> *</em>
                                </div>
                                <div class="editor-field">
                                    @Html.DisplayFor(model => model.EnterpriseSuperAdmins)
                                    <a href="javascript:void(0);" onclick="OpenAddRemoveAdmins(this);">Add/Remove Enterprise Super admin </a>
                                </div>
                            </li>*@
                    }
                    else
                    {


                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.UserName)<em> *</em>
                            </div>
                            <div class="editor-field">
                                @Html.EditorFor(model => model.UserName)
                                <span class="ErrorMessage">
                                    @Html.ValidationMessageFor(model => model.UserName)
                                </span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.EnterpriseUserEmail)<em> *</em>
                            </div>
                            <div class="editor-field">
                                @Html.EditorFor(model => model.EnterpriseUserEmail)
                                @Html.HiddenFor(model => model.IsEmailChanged)
                                <span class="ErrorMessage">
                                    @Html.ValidationMessageFor(model => model.EnterpriseUserEmail)

                                </span>
                            </div>
                        </li>
                        <li>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.EnterpriseUserPassword)<em> *</em>
                            </div>
                            @*<div class="editor-field">
                                    @Html.PasswordFor(model => model.EnterpriseUserPassword, new { @id = "txtPassword", @name = "txtPasswordName", @class = "text-box", maxlength = 50, @value = Model.EnterpriseUserPassword })
                                </div>*@
                            <div class="editor-field">
                                @Html.PasswordFor(model => model.EnterpriseUserPassword, new { @id = "txtPassword", autocomplete = "new-password", @name = "txtPasswordName", @class = "text-box", maxlength = 50, @value = @Model.EnterpriseUserPassword })
                                <div id="pswd_info">
                                    <h4>@ResEnterprise.TitlePasswordRequirements</h4>
                                    <ul class="password">
                                        <li id="letter" class="invalid">@ResEnterprise.AtLeast <strong>@ResEnterprise.PasswordOneLetter</strong></li>
                                        <li id="capital" class="invalid">@ResEnterprise.AtLeast <strong>@ResEnterprise.PasswordOneCapitalLetter</strong></li>
                                        <li id="number" class="invalid">@ResEnterprise.AtLeast <strong>@ResEnterprise.PasswordOneNumber</strong></li>
                                        <li id="special" class="invalid">@ResEnterprise.BeAtLeast <strong>@ResEnterprise.PasswordOneSpecialLetter</strong></li>
                                        <li id="length" class="invalid">@ResEnterprise.BeAtLeast <strong>@ResEnterprise.PasswordEightCharacters</strong></li>
                                    </ul>
                                </div>
                                @Html.HiddenFor(model => model.IsPasswordChanged)
                                <span class="ErrorMessage">
                                    @Html.ValidationMessageFor(model => model.EnterpriseUserPassword)
                                </span>
                            </div>
                        </li>
                    }

                    <li>
                        <h4>
                            @eTurns.DTO.ResItemMaster.ImagePath
                        </h4>
                    </li>
                    <li>
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.EnterpriseLogo)@*<em> *</em>*@
                                </div>
                                <div class="editor-field" style="width: 1000px;">
                                    <a href="javascript:void(null);" onclick="DeleteEnterpriseImage('@Model.GUID');" title="Delete Image" id="btnDeleteImage" name="btnDeleteImage">
                                                <img src="~/Content/images/delete.png" />
                                    </a> 
                                    <input name="EnterpriseLogo" id="EnterpriseLogo" type="file" />
                                    <div style="float: left;">
                                        @if (!string.IsNullOrEmpty(Model.EnterpriseLogo))
                                        {
                                            <img id="previewHolder" style="width:120px;height:120px;" src="@( "/Uploads/EnterpriseLogos/" + Model.ID + "/" + Model.EnterpriseLogo)">
                                            <input type="hidden" value="@( "/Uploads/EnterpriseLogos/" + Model.ID + "/" + Model.EnterpriseLogo)" id="currentpath" />
                                        }
                                        else
                                        {
                                            <img id="previewHolder" style="width:120px;height:120px;" alt="No Image" src="~/Content/images/no-image.jpg" />
                                            <input type="hidden" value="~/Content/images/no-image.jpg" id="currentpath" />  
                                        }
                                    </div>
                                </div>
                            </li>
                        </ul>
                        @*<div class="editor-label">
                                @Html.LabelFor(model => model.EnterpriseLogo)<em> *</em>
                            </div>
                            <div class="editor-field">
                                <input name="EnterpriseLogo" id="EnterpriseLogo" type="file" multiple="multiple" />
                                <span class="ErrorMessage">
                                    @Html.ValidationMessageFor(model => model.EnterpriseLogo)
                                </span>
                            </div>*@
                    </li>
                    <li>
                        <h4>
                            @eTurns.DTO.ResEnterprise.EnterpriseLanguages
                        </h4>
                    </li>
                    <li>
                        <div style="height:100px; width:250px; overflow: auto;">
                            <ul>
                                @if (Model.lstResourceAll != null)
                                {
                                    foreach (var g in Model.lstResourceAll)
                                    {
                                        <li>
                                            @if (Model.strResourceSelected != null && Model.strResourceSelected.Contains(g.Culture))
                                            {
                                                <input type="checkbox" name="ResourceGroups" value="@g.Culture" id="@g.ID" checked="checked" />
                                            }
                                            else
                                            {
                                                <input type="checkbox" name="ResourceGroups" value="@g.Culture" id="@g.ID" />
                                            }

                                            <label for="@g.ID">@g.Language</label>
                                            @Html.Hidden("hidId", g.ID, new { @id = "hidId_" + g.ID })
                                            @Html.Hidden("hidLanguage", g.Language, new { @id = "hidLanguage_" + g.Language })
                                            @Html.Hidden("hidCulture", g.Culture, new { @id = "hidCulture_" + g.Culture })
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div id="dvSuperAdmins" style="width: 90%; display:none;">
        &nbsp;
    </div>
    @*<div class="editorForm padRightNone">
        </div>*@
}

@Html.Partial("_RequiredMessages")
<div class="dialog" id="divOffABIntegrationConfirmModel" style="display: none;">
    <div class="inner">
        <p class="text" id="ABIntegrationWarningMsg" >
            @*@eTurns.DTO.Resources.ResMessage.ArchiveConfirm*@
        </p>
        <a href="JavaScript:void{};" id="btnOffABIntegrationConfirmYes" class="yes">
            <img src="~/Content/images/yes.png" alt="Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a>
        <a href="javascript:void(0);" class="no" id="btnOffABIntegrationConfirmNo" onclick="closeModal()">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
@*@if (false)
        {
    <script src="../../Scripts/jquery-1.9.1-vsdoc.js" type="text/javascript"></script>
        }*@
<script type="text/javascript">

    $("form").submit(function (e) {

        $.validator.unobtrusive.parse("#frmEnterprise");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
    });
    var charCode = '@CharCodeList';
    var CommonFileExtension = '@CommonFileExtension';
    var MsgInvalidFileSelected = '@ResWorkOrder.MsgInvalidFileSelected';
    var MsgvalidFileList = '@ResWorkOrder.MsgvalidFileList';

    $(document).ready(function () {
        var intNotAllowededCode = charCode.split(',');
        if (intNotAllowededCode != null && intNotAllowededCode.length > 0) {
            for (i = 0; i < intNotAllowededCode.length; i++) {
                specialKeys.push(parseInt(intNotAllowededCode[i])); //Backspace
            }
        }

        $('#AllowABIntegration').die('click');
        $("#AllowABIntegration").live('click', function () {
            var ischecked = $(this).is(':checked');
            if (!ischecked) {
                if ('@Model.ID' != '' && '@Model.ID' != '0') {
                    $.ajax({
                        url: '@Url.Action("GetCountOfABRoomsInEnterprise", "Master")',
                        contentType: 'application/json',
                        dataType: 'json',
                        data: {
                            EnterpriseId: "@Model.ID"
                        },
                        success: function (data) {
                            if (typeof (data) != "undefined" && data != null && typeof (data.RoomsAvailable) != "undefined" && data.RoomsAvailable != null
                                && data.RoomsAvailable == true)
                            {
                                $("#ABIntegrationWarningMsg").html("@ResEnterprise.ABIntegrationOffConfirmationMsg".replaceAll("{0}", data.NoOfRooms));
                                $('#divOffABIntegrationConfirmModel').modal();
                            }
                        },
                        error: function (err) {

                        }
                    });
                }
            }
            else {
                $('#liPullRejectionType').hide();
            }

        });
    });



    $(document).on('click', "#btnOffABIntegrationConfirmYes", function ()
    {
        $('#AllowABIntegration').prop('checked', false);
        closeModal();
    });

    $(document).on('click', "#btnOffABIntegrationConfirmNo", function ()
    {
        $('#AllowABIntegration').prop('checked', true);
        closeModal();
    });

</script>
<script language="javascript" type="text/javascript">
    var EnterpriseID = '@Model.ID';
    var GetCountryURL = '@Url.Action("GetCountryList", "Master")';
    var EnterpriseImagePath = '@Model.EnterpriseLogo';

    function onSuccess(response) {

        IsRefreshGrid = true;
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();

        if (($("#hiddenID").val() == "" || $("#hiddenID").val() == "0") && response.retDto.ID > 0)
        {
            idValue = response.retDto.ID;
            $("#hiddenID").val(response.retDto.ID);
        }


        if (response.Status == "fail") {
            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            clearControls('frmEnterprise');
            $("#Name").focus();
        }
        else if (idValue == 0) {

            $("#Name").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                if ('@ValidatePhoneNumber' != "" && ('@ValidatePhoneNumber' == "YES" || '@ValidatePhoneNumber' == "yes")) {
                    if ($("#ContactPhone").val() != "" && $("#Country").val() != "" && $("#hdPhoneRegex").val() != "") {
                        var regexpattern = new RegExp($("#hdPhoneRegex").val());
                        var inputVal = $("#ContactPhone").val();
                        if (!regexpattern.test(inputVal)) {

                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                            $("#spanGlobalMessage").html("@ResCommon.InvalidPhoneValue");
                            $("#ContactPhone").focus();
                            return;
                        }
                    }
                    else {
                        if ($("#ContactPhone").val() != "" && $("#hdPhoneRegex").val() != "") {
                            var regexpattern = new RegExp($("#hdPhoneRegex").val());
                            var inputVal = $("#ContactPhone").val();
                            if (!regexpattern.test(inputVal)) {

                                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                                $("#spanGlobalMessage").html("@ResCommon.InvalidPhoneValue");
                                $("#ContactPhone").focus();
                                return;
                            }
                        }
                    }
                }

                if (response.retDto.ID > 0) {
                    doResourceOperation(response.retDto.ID);
                    if ($("#EnterpriseLogo").val() != "") {
                        ajaxFileUpload(response.retDto.ID);
                    }
                    else {
                        window.location.reload();
                    }

                    FillTopEnterprise();
                }
                clearControls('frmEnterprise');
                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
            }


            //            else {
            //                location.href = location.href;
            //            }
        }
        else if (idValue > 0) {

            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#Name").focus();
                return;
            }
            else {
                if ('@ValidatePhoneNumber' != "" && ('@ValidatePhoneNumber' == "YES" || '@ValidatePhoneNumber' == "yes")) {
                    if ($("#ContactPhone").val() != "" && $("#Country").val() != "" && $("#hdPhoneRegex").val() != "") {
                        var regexpattern = new RegExp($("#hdPhoneRegex").val());
                        var inputVal = $("#ContactPhone").val();
                        if (!regexpattern.test(inputVal)) {

                            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                            $("#spanGlobalMessage").html("@ResCommon.InvalidPhoneValue");
                            $("#ContactPhone").focus();
                            return;
                        }
                    }
                    else {
                        if ($("#ContactPhone").val() != "") {
                            var RegexForPhone = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;
                            var inputVal = $("#ContactPhone").val();
                            if (!RegexForPhone.test(inputVal)) {
                                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                                $("#spanGlobalMessage").html("@ResCommon.InvalidPhoneValue");
                                $("#ContactPhone").focus();
                                return;
                            }
                        }
                    }
                }

                doResourceOperation(idValue);
                SwitchTextTab(0, 'EnterpriseCreate', 'frmEnterprise');
            }
            if ($("#EnterpriseLogo").val() != "") {
                ajaxFileUpload(response.retDto.ID);
            }
            else {
                window.location.reload();
            }
            //            FillEnterprise();
        }
        return false;
    }
    function onFailure(message) {
        $("#spanGlobalMessage").html(message.statusText);
        //$('div#target').fadeToggle();
        //$("div#target").delay(2000).fadeOut(200);
        showNotificationDialog();
        $("#Name").focus();
    }
    function DeleteEnterpriseImage(EnterpriseGUID) { 

        $.ajax({
            url: '/Master/DeleteEnterpriseImage',
            data: { 'EnterpriseGUID': EnterpriseGUID },
            dataType: 'json',
            type: 'POST',
            async: false,
            cache: false,
            success: function (response) {
                if (response.status == 'ok') {

                    $('#previewHolder').attr('src', '/Content/images/no-image.jpg');
                    $("input#currentpath").val('/Content/images/no-image.jpg');
                    $("input#EnterpriseLogo").val('');
                    $("#btnDeleteImage").hide();
                    EnterpriseImagePath = '';
                }
                else {
                    Status = 'Error';
                    alert("Error");
                }
            }
        });
    }

    function readURL(input) {
        
        if (input.files && input.files[0]) {

            var validExtension = CommonFileExtension.split(',');
            var strValidationMessage = "";
            var fileExt = input.files[0].name;
            fileExt = fileExt.substring(fileExt.lastIndexOf('.'));
            if (validExtension.indexOf(fileExt.toLowerCase()) <= -1) {
                strValidationMessage = strValidationMessage + input.files[0].name + " " + MsgInvalidFileSelected;
            }
            if (strValidationMessage != "") {
                alert(strValidationMessage + MsgvalidFileList.replace("{0}", validExtension.toString()));
                $('#previewHolder').attr('src', '/Content/images/no-image.jpg');
                $("input#currentpath").val('/Content/images/no-image.jpg');
                $("input#EnterpriseLogo").val('');
                $("#btnDeleteImage").hide();
                EnterpriseImagePath = '';
                return;
            }

            var isError = false;
            var objFile = input.files[0];

            for (var n = 0; n < specialKeys.length; n++) {
                if (objFile.name.toString().lastIndexOf(String.fromCharCode(specialKeys[n])) >= 0) {
                    isError = true;
                    break;
                }
            }


            if (isError == true) {
                showNotificationDialog();
                //alert("Please select correct file name.");
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                $("#spanGlobalMessage").html('@ResCommon.ValidFileName');
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);

                $("input#EnterpriseLogo").val('');
            }
            else {


                var reader = new FileReader();
                reader.onload = function (e) {

                    $('#previewHolder').attr('src', e.target.result);
                    $("#btnDeleteImage").show();
                }

                reader.readAsDataURL(input.files[0]);
            }
        }
    }


    $(document).ready(function () {
        $('form').areYouSure();
        GetPhoneRegex();

        $("#dvSuperAdmins").dialog({
            autoOpen: false,
            modal: true,
            width: 1200,
            title: '@eTurns.DTO.ResEnterprise.PageTitle',
            draggable: false,
            resizable: false,
            open: function () {

            }
        });

        $("#btnDeleteImage").hide();
        if (EnterpriseImagePath != undefined && EnterpriseImagePath != null && EnterpriseImagePath != '') {
            $("#btnDeleteImage").show();
        }
        
        if ('@Model.IsDeleted' == '@Boolean.TrueString') {
            disableControls('frmEnterprise');
        }

        $(document).off('click', 'input#btnCancel');
        $(document).on('click', 'input#btnCancel', function (e) {
        ////$('#btnCancel').click(function (e) {
            SwitchTextTab(0, 'EnterpriseCreate', 'frmEnterprise');
            if (oTable !== undefined && oTable != null) {
                oTable.fnDraw();
            }
        });


        $("#txtPassword").change(function () {
            $("#IsPasswordChanged").val("1");
        });
        $("#EnterpriseUserEmail").change(function () {
            $("#IsEmailChanged").val("1");
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');

        DoNGbootstrap();

        $("#EnterpriseLogo").change(function () {
            readURL(this);
        });
        function GetPhoneRegex() {
            // if ($("#Country").val() != "") {
            $.ajax({
                url: '@Url.Action("PhoneNumberRegexFromCountry", "Master")',
                contentType: 'application/json',
                dataType: 'json',
                data: {
                    CountryName: $("#Country").val()
                },
                success: function (Message) {
                    if (Message.Regex != "")
                        $("#hdPhoneRegex").val(Message.Regex);
                    else
                        $("#hdPhoneRegex").val("^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{0,13})[-. )]*(\d{3})[-. ]*(\d{0,13})(?: *x(\d+))?\s*$");
                },
                error: function (err) {
                    $("#hdPhoneRegex").val("^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{0,13})[-. )]*(\d{3})[-. ]*(\d{0,13})(?: *x(\d+))?\s*$");
                }
            });
            //}
            //else {
            //    $("#hdPhoneRegex").val("^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{0,13})[-. )]*(\d{3})[-. ]*(\d{0,13})(?: *x(\d+))?\s*$");
            //}
        }

        $("#Country").change(function () {
            GetPhoneRegex();
        });
    });



    function ajaxFileUpload(retid) {
        $.ajaxFileUpload
        (
            {
                url: '/api/fileupload/PostEnterpriseFile/' + retid,
                secureuri: false,
                type: "POST",
                fileElementId: 'EnterpriseLogo',
                dataType: 'json',
                success: function (data, status) {

                    window.location.reload();
                    //			        if (mode == "Add") {
                    //			            location.href = location.href;
                    //			        }
                    //			        if (typeof (data.error) != 'undefined') {
                    //			            if (data.error != '') {
                    //			                alert(data.error);
                    //			            } else {
                    //			                alert(data.msg);
                    //			            }
                    //			        }
                },
                error: function (data, status, e) {
                    window.location.reload(); // window.location.reload();
                }
            }
        )

        return false;

    }

    function doResourceOperation(idValue) {

        var ResourceValues = $('input[name="ResourceGroups"]:checked').map(function () {
            return this.value;
        }).get();
        //

        $.ajax({
            type: "POST",
            url: "/Master/EditEnterprisesResource",
            data: "{'EnterpriseID':'" + idValue + "','NewResource': '" + ResourceValues + "'}",
            contentType: "application/json;",
            dataType: "json",
            async: false,
            success: function (data) {
            },
            error: function () {
            }
        });
    }

    function OnUpload(cid) {

        var files = $("#EnterpriseLogo").get(0).files;
        if (files.length > 0) {
            if (window.FormData !== undefined) {
                var data = new FormData();
                for (i = 0; i < files.length; i++) {
                    data.append("file" + i, files[i]);
                }
                var request = $.ajax({
                    url: "/api/fileupload/EnterPriseLogoUpload/" + cid,
                    type: "POST",
                    data: data,
                    contentType: false,
                    processData: false
                });

                request.done(function (msg) {
                    $("#log").html(msg);
                });

                request.fail(function (jqXHR, textStatus) {
                    alert("Request failed: " + textStatus);
                });

            } else {
                alert("This browser doesn't support HTML5 multiple file uploads!");
            }
        }
    }

    $(document).ready(function () {
        $('.ShowAllOptionsBinCR').click(function () {
            $(this).siblings('#Country').trigger("focus");
            $(this).siblings("#Country").autocomplete("search", " ");
        });

        $(".mainForm").on('focus', "input[type='text'][name='Country']", function (e) {
            var objCurtxt = $(this);
            $(this).autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: GetCountryURL,
                        contentType: 'application/json',
                        dataType: 'json',
                        data: {
                            featureClass: "P",
                            style: "full",
                            maxRows: 1000,
                            NameStartWith: request.term
                        },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.CountryName,
                                    value: item.CountryName,
                                    selval: item.ID
                                }
                            }));
                        },
                        error: function (err) {

                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {

                    //                    $(objCurtxt).parent().parent().find("input[type='hidden'][name='hdnStagingBinName']").val(ui.item.label);
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                    $(objCurtxt).trigger("change");
                },
                change: function (event, ui) {
                    //                    $(objCurtxt).parent().parent().find("input[type='hidden'][name='hdnStagingBinName']").val($(objCurtxt).val());
                }
            });
        });

        $('input#txtPassword').keyup(function () {
            pswd = $(this).val();
            if (pswd.length < 8) {
                $('#length').removeClass('valid').addClass('invalid');
            } else {
                $('#length').removeClass('invalid').addClass('valid');
            }
            if (pswd.match(/[a-z]/)) {
                $('#letter').removeClass('invalid').addClass('valid');
            } else {
                $('#letter').removeClass('valid').addClass('invalid');
            }

            //validate capital letter
            if (pswd.match(/[A-Z]/)) {
                $('#capital').removeClass('invalid').addClass('valid');
            } else {
                $('#capital').removeClass('valid').addClass('invalid');
            }
            if (pswd.match(/\W/g)) {
                $('#special').removeClass('invalid').addClass('valid');
            } else {
                $('#special').removeClass('valid').addClass('invalid');
            }

            //validate number
            if (pswd.match(/\d/)) {
                $('#number').removeClass('invalid').addClass('valid');
            } else {
                $('#number').removeClass('valid').addClass('invalid');
            }
            $('#pswd_info').show();
        });

        //    .focus(function () {
        //    $('#pswd_info').show();
        //}).blur(function () {
        //    $('#pswd_info').hide();
        //});

        $("input#txtPassword").focus(function (e) {
            $('#pswd_info').show();
        });

        $("input#txtPassword").focusout(function (e) {
            $('#pswd_info').hide();
        });

        $("input#txtPassword").click(function (e) {
            $('#pswd_info').show();
        });

    });
    function DoNGbootstrap() {
        var scope = angular.element($("#CtabNew")).scope();
        if (scope != undefined) {
            var injector = $('[ng-app]').injector();
            var $compile = injector.get('$compile');
            $('#CtabNew').html($compile($('#CtabNew').html())(scope));
            scope.$apply();

            //$('#liSupplierBlanketPODetails').html($compile($('li#liSupplierBlanketPODetails').html())(scope));
            //$('#liSupplierAccountDetails').html($compile($('li#liSupplierAccountDetails').html())(scope));
        }
    }

    function OpenAddRemoveAdmins(curobj) {

        $.ajax({
            url: '@Url.Action("AssignRemoveSuperAdmins", "Master")',
            type: 'POST',
            dataType: 'json',
            data: "{EnterpriseID:'@Model.ID' }",
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            success: function (result) {

                $('#DivLoading').hide();
                $("#dvSuperAdmins").empty();
                $("#dvSuperAdmins").html(result);
                $("#dvSuperAdmins").dialog('open');
            },
            error: function (request, status, error) {

            }
        });



    }

    function SetAutoCompleteOpenOnFocusUsers(objTxtselector, reqUrl, ReqData, nameKey) {
        //var valuesArray = [
        //{ label: 'New York', value: 1 },
        //{ label: 'Warsaw', value: 2 },
        //{ label: 'Moscow', value: 3 },
        //{ label: 'London', value: 4 }
        //];
        if (true) {
            $(objTxtselector).addClass("mouseenterdone");
            $('#DivLoading').show();
            $(objTxtselector).autocomplete("instance");

            var valuesArray = new Array();
            $.ajax({
                url: reqUrl,
                contentType: 'application/json',
                dataType: 'json',
                type: 'POST',
                data: "{ EnterpriseID:'@Model.ID',UserName:'" + nameKey + "' }",
                success: function (data) {

                    $(data).each(function (indx, obj) {
                        valuesArray.push({ label: obj.UserName, value: obj.UserName, IDVal: obj.UserID })
                    });
                    //$(objTxtselector).autocomplete("destroy");

                    if (!$(objTxtselector).hasClass("ui-autocomplete-input")) {


                        $(objTxtselector).autocomplete({
                            minLength: 0,
                            autoFocus: true,
                            source: valuesArray,
                            focus: function (event, ui) {
                                //$(objTxtselector).autocomplete("search", "");
                            },
                            select: function (event, ui) {
                                var angularElement = angular.element(objTxtselector);
                                var scope = angularElement.scope();
                                var parser = angularElement.injector().get('$parse');
                                var getter = parser(angularElement.attr('data-ng-model'));
                                var setter = getter.assign;
                                setter(scope, ui.item.label);
                                scope.$apply();
                                $(objTxtselector).trigger("change");
                                $(objTxtselector).autocomplete("destroy");
                            },
                            open: function () {
                                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                                $('ul.ui-autocomplete').css('overflow-y', 'auto');
                                $('ul.ui-autocomplete').css('max-height', '300px');
                            },
                            close: function (event, ui) {
                                //setTimeout(function () { closing = false; }, 300);
                            },
                            change: function (event, ui) {
                                
                                $(objTxtselector).autocomplete("destroy");
                            },
                            create: function (event, ui) {
                            },
                            response: function (event, ui) {
                            },
                            search: function (event, ui) {
                            }
                        });
                        //    .bind("focus", function () {
                        //    $(objTxtselector).autocomplete("search");
                        //});
                        if (typeof (progresss) != "undefined") {
                            progresss = "completed";
                        }

                        //$(objTxtselector).autocomplete("search", "");
                        $(objTxtselector).keydown();

                        $('#DivLoading').hide();
                    }
                },
                error: function (err) {
                    console.log(err);
                    $('#DivLoading').hide();
                }
            });

        }
    }
    function SetAutoCompleteOpenOnFocusRoles(objTxtselector, reqUrl, ReqData, nameKey) {
        $('#DivLoading').show();
        $(objTxtselector).autocomplete("instance");
        var valuesArray = new Array();
        $.ajax({
            url: reqUrl,
            contentType: 'application/json',
            dataType: 'json',
            type: 'POST',
            data: "{ EnterpriseID:'@Model.ID',RoleName:'" + nameKey + "' }",
            success: function (data) {

                $(data).each(function (indx, obj) {
                    valuesArray.push({ label: obj.RoleName, value: obj.RoleName, IDVal: obj.RoleID })
                });
                //$(objTxtselector).autocomplete("destroy");

                if (!$(objTxtselector).hasClass("ui-autocomplete-input")) {


                    $(objTxtselector).autocomplete({
                        minLength: 0,
                        autoFocus: true,
                        source: valuesArray,
                        focus: function (event, ui) {

                        },
                        select: function (event, ui) {
                            $(objTxtselector).trigger("change");
                            $(objTxtselector).autocomplete("destroy");
                        },
                        open: function () {
                            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                            $('ul.ui-autocomplete').css('overflow-y', 'auto');
                            $('ul.ui-autocomplete').css('max-height', '300px');
                        },
                        close: function (event, ui) {
                        },
                        change: function (event, ui) {

                            $(objTxtselector).autocomplete("destroy");
                        },
                        create: function (event, ui) {
                        },
                        response: function (event, ui) {
                        },
                        search: function (event, ui) {
                        }
                    });
                    //    .bind("focus", function () {
                    //    $(objTxtselector).autocomplete("search");
                    //});
                    if (typeof (progresss) != "undefined") {
                        progresss = "completed";
                    }
                    $(objTxtselector).autocomplete("search", "");
                    $('#DivLoading').hide();
                }
            },
            error: function (err) {
                console.log(err);
                $('#DivLoading').hide();
            }
        });


    }

    $.validator.unobtrusive.parse(document);
</script>
