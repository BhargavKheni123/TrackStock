@model IEnumerable<eTurns.DTO.BOMItemDTO>
@using eTurns.DTO
@using eTurns.DTO.Resources
@{
    //Layout = "~/Views/Shared/_PopupMaster.cshtml";
    var settingsNew = new GridHeaderSettings() { dataViewType = DataViewType.None, DisplayDeleteButton = false, DisplayColumnSetupButton = true, DisplayPrintBlock = false, DataTableName = "HistoryTable", ColumnSetupFor = "BOMItemMasterChangeLog" };
    Guid itemGuid = ViewBag.ItemGuid;
}
<div class="searchWrapper">
    <div class="searchBlock">
        <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
        <div class="searchinputB">
            <input type="text" class="searchinput" id="ItemHistoryText" />
            <a href="javascript:void(0);" class="xclose">
                <img src="~/Content/images/x.png" alt="X" id="ItemHistoryClear" />
            </a>
        </div>
    </div>
</div>
@*@Html.GridTopHeaderForHistory(settings)*@
@Html.GridTopHeader(settingsNew)
<div style="margin: 0 0.4% 1%; width: 99%;" class="userContent">
    <table id="HistoryTable" class="display">
        <thead>
            <tr>
                <th>
                    @eTurns.DTO.Resources.ResCommon.HistoryID
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.HistoryAction
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.ItemType
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.ItemNumber
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.Description
                </th>

                <th>
                    @eTurns.DTO.ResCategoryMaster.Category
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.InventoryClassification
                </th>

                <th>
                    @eTurns.DTO.ResBomItemMaster.Supplier
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.SupplierPartNo
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.ManufacturerName
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.ManufacturerNumber
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.UPC
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.UNSPSC
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.LeadTimeInDays
                </th>

                <th>
                    @eTurns.DTO.ResBomItemMaster.SerialNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.LotNumberTracking
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.DateCodeTracking
                </th>

                <th>
                    @eTurns.DTO.ResGLAccount.GLAccount
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.ID
                </th>

                <th>
                    @eTurns.DTO.ResBomItemMaster.Taxable
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.Consignment
                </th>

                <th>
                    @eTurns.DTO.ResBomItemMaster.ItemUniqueNumber
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.IsTransfer
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.IsPurchase
                </th>

                @*<th>
            @eTurns.DTO.Resources.ResCommon.CreatedOn
        </th>*@
                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedOn
                </th>

                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedOn
                </th>

                <th>
                    @eTurns.DTO.Resources.ResCommon.UpdatedBy
                </th>
                <th>
                    @eTurns.DTO.Resources.ResCommon.CreatedBy
                </th>
                <th>
                    @eTurns.DTO.ResUnitMaster.Unit
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.LongDescription
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.EnrichedProductData
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.EnhancedDescription
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.DefaultPullQuantity
                </th>
                <th>
                    @eTurns.DTO.ResBomItemMaster.DefaultReorderQuantity
                </th>
                @Html.RenderColumnsHeader("BOMItemMaster", typeof(eTurns.DTO.ResBomItemMaster))
            </tr>
        </thead>
    <tbody></tbody>
</table>
</div>
<script language="javascript" type="text/javascript">
        var oHistoryTable;
        var objHistoryColumns = {}
        var wHeight = $(window).height();

        $(document).ready(function () {
            var dHeight = wHeight * 0.8;
            objHistoryColumns = GetGridHeaderColumnsObject('HistoryTable');

            oHistoryTable = $('#HistoryTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "350%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[1, "desc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable', //+ "&nbsp; This barcode text is not assing to any item.<br>Would you like to assing it?<br><a id='aBarcodeYes'href='javascript:void(0)' onclick='javascript:return OpenItemInPopup(this);' >Yes</a> ",
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    compareHistoryRows(this);
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'BOMItemMasterHistoryList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                        if (json.jsonData != '')
                            o = json;
                        }
                    });
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                         "type": "POST",
                        data: { ListName: 'BOMItemMasterHistoryList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/BOM/ItemMaster_ChangeLogListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {

                    //PostCount = PostCount + 1;
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                    aoData.push({ "name": "ItemGuid", "value": '@(itemGuid.ToString())' });
                    if (oSettings.aaSorting.length != 0) {
                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "cache": false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        "beforeSend": function () {
                           // $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        "error": function(xhr, status, error) {
                            console.log(xhr);
                        },
                        "complete": function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#HistoryTable').highlight($("#global_filter").val());
                            }
                            CallShowHideData();
                            if ($('#global_filter').val().length > 0) {
                            }
                       if (ItemIDToOpen.length > 0) {
                           $('#HistoryTable tr').each(function (i) {
                                if($(this).find('#ItemGUID').val()== ItemIDToOpen){
                                    $(this).find('img.ItemMasterImage').click();
                                    ItemIDToOpen = '';
                                    return;
                                }
                            });
                       }

                     }
                   })
                },
                "fnInitComplete": function () {
                    compareHistoryRows(this);
                },
                "aoColumns": [
                              { "mDataProp": "HistoryID", "sClass": "read_only" },
                            { "mDataProp": "Action", "sClass": "read_only" },
                       {
                           "mDataProp": "ItemType", "sClass": "read_only"
                                    ,"sDefaultContent": '', "fnRender": function (obj, val) {
                                        if (val == 1)
                                            return "Item";
                                        else if (val == 3)
                                            return "Kit";
                                        else if (val == 4)
                                            return "Labor";
                                        else
                                            return "";
                                    }
                       },
			                {
			                    "mDataProp": "ItemNumber",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false,
			                    "fnRender": function (obj, val) {
			                        var strVal = val;//.replace(/ /g, "&nbsp;");
			                        return strVal;
			                       // return "<a id='aEditLink' onclick='return ShowEditTabGUID(&quot;ItemEdit?ItemGUID=" + obj.aData.GUID.toString() + "&quot;,&quot;frmItem&quot;)' href='JavaScript:void(0);'>" + obj.aData.ItemNumber + "</a>" + " <input type='hidden' id='ItemGUID' value='" + obj.aData.GUID.toString() + "' />";
			                    }
			                },
                            { "mDataProp": "Description", "sClass": "read_only" },
                            
                            { "mDataProp": "CategoryName", "sClass": "read_only" },
                            { "mDataProp": "InventoryClassificationName", "sClass": "read_only" },
                            
                            { "mDataProp": "SupplierName", "sClass": "read_only" },
                            { "mDataProp": "SupplierPartNo", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerName", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerNumber", "sClass": "read_only" },
                            { "mDataProp": "UPC", "sClass": "read_only" },
                            { "mDataProp": "UNSPSC", "sClass": "read_only" },
                            { "mDataProp": "LeadTimeInDays", "sClass": "read_only" },
                            
                            {
                                "mDataProp": "SerialNumberTracking", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
                            },
                            {
                                "mDataProp": "LotNumberTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            {
                                "mDataProp": "DateCodeTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            
                            { "mDataProp": "GLAccount", "sClass": "read_only" },
                            { "mDataProp": "ID", "sClass": "read_only" },
                            
                            {
                                "mDataProp": "Taxable", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            {
                                "mDataProp": "Consignment", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            
                            { "mDataProp": "ItemUniqueNumber", "sClass": "read_only" },
                            {
                                "mDataProp": "IsTransfer", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
                            },
                              {
                                  "mDataProp": "IsPurchase", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
                              },
                            
			               
			                {
			                    "mDataProp": "Updated", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        //return GetDateInFullFormat(val);
			                        return obj.aData.UpdatedDate;
			                    }
			                },
                              {
                                  "mDataProp": "HistoryDate", "sClass": "read_only",
                                  "fnRender": function (obj, val) {
                                      return obj.aData.HistoryDate;
                                  }
                              },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                    { "mDataProp": "Unit", "sClass": "read_only" },
                             { "mDataProp": "LongDescription", "sClass": "read_only" },
                    { "mDataProp": "EnrichedProductData", "sClass": "read_only" },
                    { "mDataProp": "EnhancedDescription", "sClass": "read_only" },
                    { "mDataProp": "DefaultPullQuantity", "sClass": "read_only" },
                    { "mDataProp": "DefaultReorderQuantity", "sClass": "read_only" }
                            @Html.RenderColumnsArray("BOMItemMaster")
                          
                    ]
            });

            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');

            function getParameterByName(name) {
                name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
                var regexS = "[\\?&]" + name + "=([^&#]*)";
                var regex = new RegExp(regexS);
                var results = regex.exec(window.location.search);
                if (results == null)
                    return "";
                else
                    return decodeURIComponent(results[1].replace(/\+/g, " "));
            }
             //DoNarrowSearch() ;
            //$('#HistoryTable').dataTable().fnFilter(FilterStringGlobalUse, null, null, null)
        });


        $("#ItemHistoryText").keydown(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                oHistoryTable.fnFilter(this.value);
            }
        });
        $("#ItemHistoryClear").click(function () {
            if ($("#ItemHistoryText").val().length > 0) {
                $("#ItemHistoryText").val("");
                oHistoryTable.fnFilter("");
            }
            return false;
        });

        oHistoryTable.fnSetColumnVis(0, false);
        $('#CtabCL').off("click");
        $('#CtabCL').on("click", "a#ColumnOrderSetupICL", function () {
            $(".sortableContainer").attr("style", "clear: both;min-height: 347px;overflow: scroll;overflow-x: hidden;height: 90%;")
            $("#ColumnSortableModalICL").dialog("open");

        });

        $("#ColumnSortableModalICL").dialog({
            autoOpen: false,
            modal: true,
            width: 500,
            height: dHeight,
            //title: "ReOrder Columns",
            title: strReorderColumnPopupHeader,
            draggable: true,
            resizable: true,
            open: function () {

                GenerateColumnSortableICL();
                $("#ColumnSortableICL").sortable({ axis: "y", containment: "parent" });
            },
            close: function () {

            }
        });


        function GetColumnIndexICL(ColumnName) {
            if (typeof (objHistoryColumns) != "undefined") {
                return objHistoryColumns[ColumnName];
            }
        }

        function GenerateColumnSortableICL() {


            //clear the old elements
            var blankNUmber = 0;
            $('#ColumnSortableICL li').each(function (index) {
                $(this).remove();
            });
            var div = document.createElement('div');
            div.id = "CheckAll";

            div.innerHTML = "<input type='hidden' value ='ColumnSortableICL' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
                            "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
            $('div.sortableContainer').find("div#CheckAll").remove();
            $('div.sortableContainer').prepend(div);
            //get current columns order and generate li sortable accordingly

            var oTableReorder = $("#HistoryTable").dataTable();

            for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                var oColumn = oTableReorder.fnSettings().aoColumns[i];
                var style = '';
                var LiStyle = 'display:block';
                var LiClassName = 'ui-state-default'
                if (oColumn.sClass.indexOf('NotHide') >= 0) {
                    style = ' disabled="disabled" ';
                    LiClassName = LiClassName + ' HiddenLi';
                }

                var colindxbyname = '';
                if (oColumn.sTitle.trim() != '') {
                    colindxbyname = GetColumnIndexICL(oColumn.sTitle.trim());
                }
                else {
                    colindxbyname = GetColumnIndexICL('blankFieldName' + blankNUmber);
                }

                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                li.style = LiStyle;
                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexICL(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexICL('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                        blankNUmber++;
                    }
                }
                else {

                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndexICL(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {

                        li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndexICL('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                        blankNUmber++;
                    }
                }
                $('#ColumnSortableICL').append(li);

            }

        }


        function UpdateColumnOrderItemChangeLog(_ListName) {

            var oTableReorder = $("#HistoryTable").dataTable();
            $.ajax({
                "url": '/Master/LoadGridState',
                data: { ListName: _ListName },
                cache: false,
                "dataType": "json",
                "success": function (json) {

                    if (json.jsonData != '') {
                        o = JSON.parse(json.jsonData);
                        oTableReorder.fnSettings().oLoadedState = $.extend(true, {}, o);
                        //update the order of columns
                        var _Order = SortableArrayICL($('#ColumnSortableICL')); // $('#ColumnSortable').sortable("toArray");
                        var __Order = _Order.toString().split(",");

                        for (var i = 0; i < __Order.length; i++) {
                            __Order[i] = parseInt(__Order[i], 10);
                        }

                        oTableReorder.fnSettings().oLoadedState.ColReorder = __Order;

                        //update the visibility of columns
                        var _abVisCols = [];

                        for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                            //var checked = $("#" + i + "_").is(":checked");
                            var checked = $('#ColumnSortableICL').find('input.checkBox[id="' + i + '_"]').is(":checked");
                            _abVisCols.push(checked);
                        }

                        oTableReorder.fnSettings().oLoadedState.abVisCols = _abVisCols;

                        //update the state to the database
                        $.ajax({
                            "url": '/Master/SaveGridState',
                            "type": "POST",
                            //data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: 'ToolList' },
                            data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: _ListName },
                            "dataType": "json",
                            cache: false,
                            "success": function (json) {

                                o = json;

                                //refresh the page
                                // window.location.reload(true);
                                $("#ColumnSortableModalICL").dialog("close");
                                $('#CtabCL').empty();
                                GetItemHistoryData();
                                //$("#THLDataTable").dataTable().fnDraw();
                            }
                        });


                    }
                }
            });


        }
        function GetItemHistoryData()
        {
            $('#DivLoading').show();
            $("#CTab").hide();
            $("#CtabCL").show();
            //$('#CtabCL').load('/Master/ItemHistory', function () { $('#DivLoading').hide(); });
            $('#CtabCL').load('/Inventory/ItemHistory?ItemGUID=' + '@itemGuid' + '', function () { $('#DivLoading').hide(); });
        }
        function SortableArrayICL(ulColumnsOrder) {
            var sortableArray = '';
            $(ulColumnsOrder).children("li").each(function () {
                if (sortableArray != '') {
                    sortableArray = sortableArray + "," + $(this).attr("id");
                }
                else {
                    sortableArray = $(this).attr("id");
                }
            });
            return sortableArray;
        }
        _Common.setGloblaSearch('ItemHistoryText', 'HistoryTable');



</script>
