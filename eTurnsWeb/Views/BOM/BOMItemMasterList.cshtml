
@{
    ViewBag.Title = eTurns.DTO.ResBomItemMaster.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true, DataTableName = "myDataTable", ListViewhref = "#", PictureViewhref = "ItemMasterPictureView", DisplayUDFButton = false, UDFSetupFor = "BOMItemMaster&UDFHeader=" + @eTurns.DTO.ResBomItemMaster.ItemMasterHeader, DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "BomItemMasterList", DisplayDeleteButton = true };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "BOMItemMaster" };
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    string BOMItemsPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/BOMItems.pdf", DateTime.Now.Ticks);
    string version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("BOMItems", (int)HelpDocType.Module);
}
<script type="text/javascript" src="@Url.Content("~/Scripts/DynemicDataTable.js?v=" + version)"></script>
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script language="javascript" type="text/javascript">
        var oTable;
        var ItemIDToOpen = '';
        var IsRefreshGrid = false;
        var SelectedHistoryRecordID = 0;
        var deleteURL = "/BOM/DeleteRecords";
        var sImageUrl = "/Content/images/";
        var anOpen = [];
        var IsDeletePopupOpen = true;
        var AllowDeletePopup = true;
        var ItemName = '';
        var ItemUniqueID = '';

        //var CostNarroSearchValue = '';
        $(document).ready(function () {
            var gaiSelected = [];
            LoadTabs();
            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                //"bAutoWidth": false,
                "sScrollX": "350%",
                //"sScrollX": "8000px",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[0, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable', //+ "&nbsp; This barcode text is not assing to any item.<br>Would you like to assing it?<br><a id='aBarcodeYes'href='javascript:void(0)' onclick='javascript:return OpenItemInPopup(this);' >Yes</a> ",
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    //if (aData.IsDeleted == true && aData.IsArchived == true)
                    //    nRow.className = "GridDeleatedArchivedRow";
                    //else if (aData.IsDeleted == true)
                    //    nRow.className = "GridDeletedRow";
                    //else if (aData.IsArchived == true)
                    //    nRow.className = "GridArchivedRow";
                    if (aData.IsDeleted == true && aData.IsArchived == true)
                        // nRow.className = "GridDeleatedArchivedRow";
                        $(nRow).css('background-color', '#B9BCBF');
                    else if (aData.IsDeleted == true)
                        // nRow.className = "GridDeletedRow";
                        $(nRow).css('background-color', '#FFCCCC');
                        //}
                    else if (aData.IsArchived == true)
                        $(nRow).css('background-color', '#CCFFCC');
                    
                    if (aData.IsActive == "0" || aData.IsActive == "No") {
                        $(nRow).attr({ 'style': 'background-color:@eTurnsWeb.Helper.SessionHelper.InActiveQuantityBackColor !Important' });
                    }
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {
                    oData.oSearch.sSearch = "";
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'BomItemMasterList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                         if (json.jsonData != '')
                            o = json;
                        }
                      
                    });
                     
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'BomItemMasterList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                       
                    });
                    
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/BOM/ItemMasterListAjax")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    //PostCount = PostCount + 1;
                    
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }
                   
                    // alert(oSettings.aaSorting);
                    //if (oSettings.aaSorting.length != 0) {
                    //    aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    //    //   alert(oSettings.aaSorting[0][3]);
                    //}
                    //else
                    //    aoData.push({ "name": "SortingField", "value": "0" });
                    if (oSettings.aaSorting.length != 0) {
                        var sortValue = "";
                        for (var k = 0; k <= oSettings.aaSorting.length - 1; k++) {
                            if (sortValue.length > 0)
                                sortValue += ", "
                            sortValue += arrCols[oSettings.aaSorting[k][0]] + ' ' + oSettings.aaSorting[k][1];

                        }
                        aoData.push({ "name": "SortingField", "value": sortValue });
                    }
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });

                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });
                   

                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        cache: false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                            CallShowHideData();
                            if ($('#global_filter').val().length > 0) {
                                //  if (oTable.fnGetData().length == 1) {
                                //     // $('#myDataTable tr').find('#aEditLink').click();
                                //     // $('#global_filter').val('');
                                //     // $('#myDataTable').dataTable().fnFilter('', null, null, null);
                                //  }
                                //  else
                                //  if (oTable.fnGetData().length <= 0) {
                                //      $('#cnfBarcodeAddmdl').modal();
                                //      $('#btnBarcodeAddYes').focus();
                                //  }

                            }
                        }
                    })
                },
                "fnInitComplete": function () {
                    $('.ColVis').detach().appendTo(".setting-arrow");
                    //$('#divQTYLegends').show(1000);
                },
                "aoColumns": [
                            
                            {
                                "mDataProp": "ItemType", "sClass": "read_only"
                                    ,"sDefaultContent": '', "fnRender": function (obj, val) {
                                        if (val == 1)
                                            return "Item";
                                        else if (val == 3)
                                            return "Kit";
                                        else if (val == 4)
                                            return "Labor";
                                        else
                                            return "";
                                    }
                            },
			                {
			                    "mDataProp": "ItemNumber",
			                    "sClass": "read_only",
			                    "sDefaultContent": '',
			                    "bSortable": true,
			                    "bSearchable": false,
			                    "fnRender": function (obj, val) {
			                        return "<a id='aEditLink' onclick='return ShowEditTabGUID(&quot;ItemEdit?ItemGUID=" + obj.aData.GUID.toString() + "&quot;,&quot;frmItem&quot;)' href='JavaScript:void(0);'>" + obj.aData.ItemNumber + "</a>" + " <input type='hidden' id='ItemGUID' value='" + obj.aData.GUID.toString() + "' />";
			                    }
			                },
                            { "mDataProp": "Description", "sClass": "read_only" },
                            
                            { "mDataProp": "CategoryName", "sClass": "read_only" },
                            { "mDataProp": "InventoryClassificationName", "sClass": "read_only" },
                            
                            { "mDataProp": "SupplierName", "sClass": "read_only" },
                            { "mDataProp": "SupplierPartNo", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerName", "sClass": "read_only" },
                            { "mDataProp": "ManufacturerNumber", "sClass": "read_only" },
                            { "mDataProp": "UPC", "sClass": "read_only" },
                            { "mDataProp": "UNSPSC", "sClass": "read_only" },
                            { "mDataProp": "LeadTimeInDays", "sClass": "read_only" },
                            
                            {
                                "mDataProp": "SerialNumberTracking", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
                            },
                            {
                                "mDataProp": "LotNumberTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            {
                                "mDataProp": "DateCodeTracking", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            
                            { "mDataProp": "GLAccount", "sClass": "read_only" },
                            { "mDataProp": "ID", "sClass": "read_only" },
                            
                            {
                                "mDataProp": "Taxable", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            {
                                "mDataProp": "Consignment", "sClass": "read_only"
                                , "fnRender": function (obj, val) {
                                    return GetBoolInFormat(obj, val);
                                }
                            },
                            
                            { "mDataProp": "ItemUniqueNumber", "sClass": "read_only" },
                            {
                                "mDataProp": "IsTransfer", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
                            },
                              {
                                  "mDataProp": "IsPurchase", "sClass": "read_only"
                                 , "fnRender": function (obj, val) {
                                     return GetBoolInFormat(obj, val);
                                 }
                              },
                            
			                {
			                    "mDataProp": "Created", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        //return GetDateInFullFormat(val);
                                    return obj.aData.CreatedDate;
 
			                    }
			                },
			                {
			                    "mDataProp": "Updated", "sClass": "read_only",
			                    "fnRender": function (obj, val) {
			                        //return GetDateInFullFormat(val);
                                    return obj.aData.UpdatedDate;
			                    }
			                },
                            { "mDataProp": "UpdatedByName", "sClass": "read_only" },
                            { "mDataProp": "CreatedByName", "sClass": "read_only" },
                            { "mDataProp": "Unit", "sClass": "read_only" } ,                          
                            { "mDataProp": "LongDescription", "sClass": "read_only" },
                            { "mDataProp": "EnrichedProductData", "sClass": "read_only" },
                            { "mDataProp": "EnhancedDescription", "sClass": "read_only" }
                            @Html.RenderColumnsArray("BOMItemMaster")

                ]
            }).makeEditable({
                sUpdateURL: '@Url.Content("~/Master/UpdateBinMasterData")'
            });

            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');
      
            

            var QueryStringParam1 = getParameterByName('fromdashboard');
            var QueryStringParam2 = getParameterByName('ItemGUID');
            if (QueryStringParam1 == 'yes' && QueryStringParam2 != '') {
                ShowEditTabGUID("ItemEdit?ItemGUID=" + QueryStringParam2, "frmItem");
            }

            function getParameterByName(name) {
                name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
                var regexS = "[\\?&]" + name + "=([^&#]*)";
                var regex = new RegExp(regexS);
                var results = regex.exec(window.location.search);
                if (results == null)
                    return "";
                else
                    return decodeURIComponent(results[1].replace(/\+/g, " "));
            }


            /*Functions used for nasted data binding START*/
            $("#myDataTable").on("click", "td.control img", function (event) {
            
                var nTr = this.parentNode.parentNode;
                var i = $.inArray(nTr, anOpen);

                if (i === -1) {

                    $('img', this.parentNode).attr('src', sImageUrl + "drildown_close.jpg");
                    oTable.fnOpen(nTr, fnFormatDetails(oTable, nTr), '');
                    anOpen.push(nTr);
                }
                else {
                    $('img', this.parentNode).attr('src', sImageUrl + "drildown_open.jpg");
                    oTable.fnClose(nTr);
                    anOpen.splice(i, 1);
                }
            });

            function fnFormatDetails(oTable, nTr) {
            
                var oData = oTable.fnGetData(nTr);
                ItemName = oData.ItemNumber;
                ItemUniqueID = oData.ID;
                var sOut = '';
                $('#DivLoading').show();
                $.ajax({
                    "url": '@Url.Content("~/Inventory/ItemBinWiseSummary")',
                    data: { ItemID: oData.ID, ItemGUID: oData.GUID },
                    "async": false,
                    cache: false,
                    "dataType": "text",
                    "success": function (json) {
                        sOut = json;
                        $('#DivLoading').hide();
                    },
                    error: function (response) {
                    }
                });

                return sOut;
            }
            /*Functions used for nasted data binding END*/

            $("#ItemModel").dialog({
                autoOpen: false, modal: true, draggable: true, resizable: true, width: '82%', height: 710, title: 'Item Master',
                open: function () {
                    $('#DivLoading').show();
                    var strUrl = $(this).data("url");

                    $.get(strUrl, function (data) {
                        $("#ItemModel").html(data);
                        $('#DivLoading').hide();
                    });
                },
                close: function () {
                    $("#ItemModel").empty();
                    $('#myDataTable').dataTable().fnDraw();
                }
            });

            $("#ItemQty").dialog({
                autoOpen: false, modal: true, draggable: true, resizable: true, width: '60%', height: 450, title: 'Quantity Detail',
                open: function () {
                    $('#DivLoading').show();
                    var itemGuid = $(this).data("itemGuid");
                    var strUrl = $(this).data("url");
                    $.get(strUrl, { ItemGuid: itemGuid }, function (data) {
                        $('#DivLoading').hide();
                        $("#ItemQty").html(data);

                    });
                },
                close: function () {
                    $("#ItemQty").empty();
                }
            });


            $('#myDataTable').on('tap click', 'a[id^="aEditLink"]', function () {
                var tr = $(this).parent().parent();
                $("#myDataTable").find("tbody tr").removeClass("row_selected");
                $(tr).addClass('row_selected');

            });

        });
        


        /* HISTORY related data deleated and archived START */
        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }
        function HistoryTabClick() {
            GetHistoryData();
        }
        function GetHistoryData() {

            HistorySelected = fnGetSelected(oTable);
            if (HistorySelected != undefined && HistorySelected.length == 1) {
                var ITGUID = $(HistorySelected).find('#ItemGUID')[0].value;
                SelectedHistoryRecordID = ITGUID;
                $('#DivLoading').show();
                $("#CTab").hide();
                $("#CtabCL").show();
                //$('#CtabCL').load('/Master/ItemHistory', function () { $('#DivLoading').hide(); });
                $('#CtabCL').load('/BOM/ItemHistory?ItemGUID=' + ITGUID + '', function () { $('#DivLoading').hide(); });
            }
            else {
                $('#CtabCL').html('');
                $("#spanGlobalMessage").html('@ResCommon.msgSelectForViewHistory');
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                return false;
            }
        }
        /* HISTORY related data deleated and archived END */

        /* Cost Narrow Search Related Code  START */
        function CostNarroSearch(CostDDLObject) {
            //oTable.fnFilter($(CostDDLObject).val(),null,null,null);
            if ($(CostDDLObject).val() != "0_-1") {
                CostNarroSearchValue = $(CostDDLObject).val();
                DoNarrowSearch();
            }
            else {
                CostNarroSearchValue = '';
                DoNarrowSearch();
            }
        }

        function SSNarroSearch(SSDDLObject) {
            //oTable.fnFilter($(CostDDLObject).val(),null,null,null);
            if ($(SSDDLObject).val() != "0") {
                SSNarroSearchValue = $(SSDDLObject).val();
                DoNarrowSearch();
            }
            else {
                SSNarroSearchValue = '';
                DoNarrowSearch();
            }
        }

        /* Cost Narrow Search Related Code  END */

        
        
    </script>
}
<script type="text/javascript">
    var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', true, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true),
         new TabClass('tab6', '@eTurns.DTO.Resources.ResCommon.ChangeLog', 'callbackCL();', false, true)
    ];
    function callbacknew() { window.location.hash = '#new'; ShowNewTab('ItemCreate', 'frmItemMaster'); }
    function callbackhistory() { window.location.hash = '#list'; } //HistoryTabClick(); }
    function callbackCL() { HistoryTabClick(); }
</script>
<div id="ItemQty">
</div>
<div class="userListingWrapper">
   
    <h2>
        @eTurns.DTO.ResBomItemMaster.ItemMasterHeader
    </h2>
    <div class="Infoclass" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'>
        </ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings, eTurnsWeb.Helper.SessionHelper.ModuleList.BOMItemMaster)
            @*@Html.Partial("NarrowSearchLayout", modelCommon)*@
            @{ Html.RenderPartial("NarrowSearchLayout", modelCommon);}
            <div class="userContent ">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                           
                            <th>
                                @eTurns.DTO.ResBomItemMaster.ItemType
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.ItemNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.Description
                            </th>
                            
                            <th>
                                @eTurns.DTO.ResCategoryMaster.Category
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.InventoryClassification
                            </th>
                            
                            <th>
                                @eTurns.DTO.ResBomItemMaster.Supplier
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.SupplierPartNo
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.ManufacturerName
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.ManufacturerNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.UPC
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.UNSPSC
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.LeadTimeInDays
                            </th>
                            
                            <th>
                                @eTurns.DTO.ResBomItemMaster.SerialNumberTracking
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.LotNumberTracking
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.DateCodeTracking
                            </th>
                            
                            <th>
                                @eTurns.DTO.ResGLAccount.GLAccount
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            
                            <th>
                                @eTurns.DTO.ResBomItemMaster.Taxable
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.Consignment
                            </th>
                           
                            <th>
                                @eTurns.DTO.ResBomItemMaster.ItemUniqueNumber
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.IsTransfer
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.IsPurchase
                            </th>
                           
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.ResUnitMaster.Unit
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.LongDescription
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.EnrichedProductData
                            </th>
                            <th>
                                @eTurns.DTO.ResBomItemMaster.EnhancedDescription
                            </th>
                            
                            @Html.RenderColumnsHeader("BOMItemMaster", typeof(eTurns.DTO.ResBomItemMaster))
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
                <button id="btnAddNewCompany" value="Ok" style="display: none">
                    @ResCommon.AddNew
                </button>
                <button id="btnDeleteCompany" value="cancel" style="display: none">
                    Delete Selected
                </button>
                <div id="processing_message" style="display: none" title="Processing">@eTurns.DTO.Resources.ResMessage.RequestProcessMessage</div>
                @*START : QTY Legends*@
                @Html.Partial("_QTYLegends")
                @*END : QTY Legends*@
            </div>
        </div>
        <div id='CtabCL' class="tabContener">
        </div>
    </div>
</div>
<div id="ItemModel">
</div>
<div id="divMoveMaterialModel">
</div>
<script type="text/javascript">
    var isTabClick = false;
    $(document).ready(function () {
        $("#divMoveMaterialModel").dialog({
            autoOpen: false, modal: true, draggable: true, width: 370, height: 280, resizable: true, title: 'Move Material',
            open: function () {
                $('#DivLoading').show();
                var binID = $(this).data("binID");
                var itemGuid = $(this).data("itemGuid");
                $.get('@Url.Content("~/Inventory/MoveMaterialView")', { "BinID": binID, "ItemGuid": itemGuid }, function (data) {
                    $('#divMoveMaterialModel').html(data);
                    $("#divMoveMaterialModel").find('#txtMoveQty').focus();
                    $('#DivLoading').hide();
                });

            },
            close: function () {
                $('#divMoveMaterialModel').empty();
            }
        });

        if (window.location.hash.toLowerCase() == "#list") {
            $("#tab5").click();
        }
        else if (window.location.hash.toLowerCase() == "#new") {
            $("#tab1").click();
        }

        $(window).on('hashchange', function () {
            if (isTabClick == false) {
                SetTabView();
            }
            else {
                isTabClick = false;
            }
        });

    });

    function SetTabView() {
        var tabname = window.location.hash.toLowerCase();

        switch (tabname) {
            case "#list":
                $("#tab5").click();
                break
            case "#new":
                $("#tab1").click();
                break
        }
    }

    function MoveMaterial(obj, BinId) {
        $('#divMoveMaterialModel').html('');
        var guid = $(obj).parent().parent().find("#ItemGUID").val();
        //var guid = $("#divMoveMaterialModel").find("#LocationGUID").val();
        //$.get('@Url.Content("~/Inventory/MoveMaterialView")', { "BinID": BinId, "LocationGUID": guid }, function (data) {
        //$('#divMoveMaterialModel').html(data);
        //$('#divMoveMaterialModel').model();
        //$('#divMoveMaterialModel').parent().parent().find(".modalCloseImg").css('display', 'none');
        //$("#divMoveMaterialModel").find('#txtMoveQty').focus();
        //});

        $('#divMoveMaterialModel').data({ "binID": BinId, "itemGuid": guid }).dialog("open");

        return false;
    }


    function CheckMoveQty(obj, qty) {

        if (isNaN(parseFloat($(obj).val())) === true || parseFloat($(obj).val()) <= 0) {

            alert("Please enter move quantity.");
            setTimeout("$('#txtMoveQty').focus();", 100);
            return false;
        }
        else if (isNaN(parseFloat(qty)) === true || parseFloat(qty) <= 0) {
            alert("No quantity available for move.");
            setTimeout("$('#txtMoveQty').focus();", 100);
            return false;
        }
        else if (parseFloat(qty) < parseFloat($(obj).val())) {
            alert("Move quantity is greater than available quantity.");
            //$(obj).focus();
            setTimeout("$('#txtMoveQty').focus();", 100);
            return false;
        }
        return true;
    }

    @*function SaveMoveItemToLocation(obj) {
        $('#DivLoading').css('z-index', '999999999');
        $('#DivLoading').show();

        var tbl = $(obj).parent().parent().parent().parent();
        var moveQty = $(tbl).find("#txtMoveQty").val()
        var availQty = $(tbl).find("#hdnAvailQty").val()
        var moveBinId = $(tbl).find("#ddlMoveLocation").val();
        var locationName = '';
        if (isNaN(parseInt(moveBinId)) === true || parseInt(moveBinId) <= 0) {
            locationName = $('#txtMoveLocationName').val();
            moveBinId = 0;
            if ($.trim(locationName).toString().length <= 0) {
                alert("Please select location to move.");
                setTimeout("$('#txtMoveLocationName').focus();", 100);
                $('#DivLoading').hide();
                return false;
            }
        }
        else if (isNaN(parseFloat(moveQty)) === true || parseFloat(moveQty) <= 0) {
            alert("Please enter move quantity.");
            setTimeout("$('#txtMoveQty').focus();", 100);
            $('#DivLoading').hide();
            return false;
        }
        else if (isNaN(parseFloat(availQty)) === true || parseFloat(availQty) <= 0) {
            alert("No quantity available for move.");
            setTimeout("$('#txtMoveQty').focus();", 100);
            $('#DivLoading').hide();
            return false;
        }
        else if (parseFloat(availQty) < parseFloat(moveQty)) {
            alert("Move quantity is greater than available quantity.");
            setTimeout("$('#txtMoveQty').focus();", 100);
            $('#DivLoading').hide();
            return false;
        }
        var binID = $(tbl).find("#hdnBinID").val()
        var itemGuID = $(tbl).find("#hdnItemGUID").val()

        $.ajax({
            'url': '@Url.Content("~/Inventory/SaveMoveQuantityToLocation")',
            'data': { 'BinId': binID, 'ItemGuid': itemGuID, 'MoveBinID': moveBinId, 'Quantity': moveQty, "LocationName": locationName },
            'type': 'Post',
            'async': false,
            'cache': false,
            'dataType': 'json',
            'success': function (response) {
                if (response.Status === "ok") {
                    $('#ItemBinWiseSummaryTable' + itemGuID).dataTable().fnDraw();
                    $('#divMoveMaterialModel').dialog("close");

                    $('#DivLoading').hide();
                }
            },
            'error': function (xhr) {
                $('#DivLoading').hide();
            }

        });

        return false;
    }*@

    function CancleMove(obj) {
        $('#divMoveMaterialModel').dialog("close");
        //$.modal.impl.close();
        return false;
    }
    function OpenImg(curObj) {
        //        alert($(curObj).attr("href"));
        // window.open($(curObj).attr("href"), "_blank ");
        //        location.href = $(curObj).attr("href");

    }
    var objColumns = {

        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.ItemType)': 0,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.ItemNumber)': 1,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.Description)': 2,
        '@MvcHtmlString.Create(eTurns.DTO.ResCategoryMaster.Category)': 3,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.InventoryClassification)':4,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.Supplier)': 5,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.SupplierPartNo)': 6,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.ManufacturerName)': 7,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.ManufacturerNumber)':8,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.UPC)': 9,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.UNSPSC)': 10,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.LeadTimeInDays)': 11,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.SerialNumberTracking)': 12,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.LotNumberTracking)': 13,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.DateCodeTracking)': 14,
        '@MvcHtmlString.Create(eTurns.DTO.ResGLAccount.GLAccount)': 15,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.ID)': 16,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.Taxable)': 17,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.Consignment)': 18,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.ItemUniqueNumber)': 19,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.IsTransfer)': 20,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.IsPurchase)': 21,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedOn)': 22,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedOn)': 23,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.UpdatedBy)': 24,
        '@MvcHtmlString.Create(eTurns.DTO.Resources.ResCommon.CreatedBy)': 25,
        '@MvcHtmlString.Create(eTurns.DTO.ResUnitMaster.Unit)': 26,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.LongDescription)': 27,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.EnrichedProductData)': 28,
        '@MvcHtmlString.Create(eTurns.DTO.ResBomItemMaster.EnhancedDescription)': 29

    };


</script>
<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>

