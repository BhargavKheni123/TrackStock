@model eTurns.DTO.ImportMastersNewDTO.ImportPageDTO

@{
    string ImportPageDTO = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
}
<div id="divScroll" style="max-height:500px;overflow:auto">
    <table class="display dataTable">
        <thead>
            <tr>
                @if (Model.DataTableColumns.Count() > 0)
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.Status
                    </th>
                    <th class="ui-state-default read_only">
                        @ResCommon.Reason
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemnumber"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.ItemNumber
                    </th>
                }
                @if (Model.DataTableColumns.Contains("link2"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.Link2
                    </th>
                }
                @if (Model.DataTableColumns.Contains("manufacturer"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ManufacturerName
                    </th>
                }
                @if (Model.DataTableColumns.Contains("manufacturernumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ManufacturerNumber
                    </th>
                }
                @if (Model.DataTableColumns.Contains("suppliername"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.Supplier
                    </th>
                }
                @if (Model.DataTableColumns.Contains("supplierpartno"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.SupplierPartNo
                    </th>
                }
                @if (Model.DataTableColumns.Contains("blanketordernumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.BlanketPO
                    </th>
                }
                @if (Model.DataTableColumns.Contains("upc"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UPC
                    </th>
                }
                @if (Model.DataTableColumns.Contains("unspsc"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UNSPSC
                    </th>
                }
                @if (Model.DataTableColumns.Contains("description"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Description
                    </th>
                }
                @if (Model.DataTableColumns.Contains("longdescription"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.LongDescription
                    </th>
                }
                @if (Model.DataTableColumns.Contains("categoryname"))
                {
                    <th class="ui-state-default read_only">
                        @ResCategoryMaster.Category
                    </th>
                }
                @if (Model.DataTableColumns.Contains("glaccount"))
                {
                    <th class="ui-state-default read_only">
                        @ResGLAccount.GLAccount
                    </th>
                }
                @if (Model.DataTableColumns.Contains("uom"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResUnitMaster.Unit
                    </th>
                }
                @if (Model.DataTableColumns.Contains("costuom"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResCostUOMMaster.CostUOM
                    </th>
                }
                @if (Model.DataTableColumns.Contains("defaultreorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.DefaultReorderQuantity
                    </th>

                }
                @if (Model.DataTableColumns.Contains("defaultpullquantity"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.DefaultPullQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("cost"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Cost
                    </th>
                }
                @if (Model.DataTableColumns.Contains("markup"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Markup
                    </th>
                }
                @if (Model.DataTableColumns.Contains("sellprice"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.SellPrice
                    </th>
                }
                @if (Model.DataTableColumns.Contains("extendedcost"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ExtendedCost
                    </th>
                }
                @if (Model.DataTableColumns.Contains("leadtimeindays"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.LeadTimeInDays
                    </th>
                }
                @if (Model.DataTableColumns.Contains("trend"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Trend
                    </th>
                }
                @if (Model.DataTableColumns.Contains("taxable"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Taxable
                    </th>
                }
                @if (Model.DataTableColumns.Contains("consignment"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Consignment
                    </th>
                }
                @if (Model.DataTableColumns.Contains("stagedquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.StagedQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("intransitquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.InTransitquantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("onorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.OnOrderQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ontransferquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.OnTransferQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("suggestedorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.SuggestedOrderQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("requisitionedquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.RequisitionedQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("averageusage"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.AverageUsage
                    </th>
                }
                @if (Model.DataTableColumns.Contains("turns"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.Turns
                    </th>
                }
                @if (Model.DataTableColumns.Contains("onhandquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.OnHandQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isitemlevelminmaxqtyrequired"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.IsItemLevelMinMaxQtyRequired
                    </th>
                }
                @if (Model.DataTableColumns.Contains("criticalquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.CriticalQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("minimumquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.MinimumQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("maximumquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.MaximumQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("weightperpiece"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.WeightPerPiece
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemuniquenumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ItemUniqueNumber
                    </th>
                }
                @if (Model.DataTableColumns.Contains("istransfer"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsTransfer
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ispurchase"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsPurchase
                    </th>
                }
                @if (Model.DataTableColumns.Contains("inventrylocation"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResBin.BinNumber
                    </th>
                }
                @if (Model.DataTableColumns.Contains("inventoryclassification"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.InventoryClassification
                    </th>
                }
                @if (Model.DataTableColumns.Contains("serialnumbertracking"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.SerialNumberTracking
                    </th>
                }
                @if (Model.DataTableColumns.Contains("lotnumbertracking"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.LotNumberTracking
                    </th>
                }
                @if (Model.DataTableColumns.Contains("datecodetracking"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.DateCodeTracking
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemtype"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResItemMaster.ItemType
                    </th>
                }
                @if (Model.DataTableColumns.Contains("imagepath"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.ImagePath
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf1"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF1
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf2"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF2
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf3"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF3
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf4"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF4
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf5"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.UDF5
                    </th>
                }
                @if (Model.DataTableColumns.Contains("islotserialexpirycost"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsLotSerialExpiryCost
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isbuildbreak"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsBuildBreak
                    </th>
                }
                @if (Model.DataTableColumns.Contains("enforcedefaultpullquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.PullQtyScanOverride
                    </th>
                }
                @if (Model.DataTableColumns.Contains("enforcedefaultreorderquantity"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsEnforceDefaultReorderQuantity
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isautoinventoryclassification"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsAutoInventoryClassification
                    </th>
                }
                @if (Model.DataTableColumns.Contains("trendingsetting"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.TrendingSetting
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ispackslipmandatoryatreceive"))
                {
                    <th class="ui-state-default read_only">
                        @ResItemMaster.IsPackslipMandatoryAtReceive
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemimageexternalurl"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.ItemImageExternalURL
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemdocexternalurl"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.ItemDocExternalURL
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isdeleted"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.IsDeleted
                    </th>
                }
                @if (Model.DataTableColumns.Contains("itemlink2externalurl"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.ItemLink2ExternalURL
                    </th>
                }
                @if (Model.DataTableColumns.Contains("isactive"))
                {
                    <th class="ui-state-default read_only">
                        @eTurns.DTO.ResItemMaster.IsActive
                    </th>
                }
            </tr>
        </thead>
        <tbody id="tBodyImportData">
        </tbody>
    </table>
</div>
<div class="editor-field" style="width: 6%; float: left;">
    <input type="button" id="btnSave" value="Save" title="Save" class="CreateBtn" ng-click="SaveImportClick();" />
</div>

<script type="text/javascript">
    var IsScrollCompleted = true;
    $(document).ready(function () {
        var TotalRows = @Model.RecordCount;
        var ColumnCount = @Model.DataTableColumns.Count();
        var trBlank = "<tr class='odd importtext-box-tr BlankImportRow' style='background-color: rgb(239, 247, 255);height: 35px;'><td colspan='" + ColumnCount.toString() + "'></td></tr>";
        var i = 0;
        for(i = 0;i < TotalRows;i++)
        {
            $("#tBodyImportData").append(trBlank);
        }

        $("#divScroll").scroll(function() {
            if(IsScrollCompleted == true)
            {
                setTimeout(function(){
                    CheckBlankTRAfterScroll();
                    IsScrollCompleted = true;
                }, 1000);
            }
            IsScrollCompleted = false
        });

        setTimeout(function(){
            CheckBlankTRAfterScroll();
        }, 2000);
    });

    function CheckBlankTRAfterScroll()
    {
        var ArrBlankTr = [];
        var BlankTr = null;
        if($('#tBodyImportData .BlankImportRow').length > 0)
        {
            var i = 0;
            var j = 0;
            var k = 0;
            var RowIndexes = [];
            for(i = 0; i < $('#tBodyImportData .BlankImportRow').length; i++)
            {
                if(isScrolledIntoView($('#tBodyImportData .BlankImportRow')[i]))
                {
                    for(j = i;j < i + 24;j++)
                    {
                        BlankTr = $('#tBodyImportData .BlankImportRow')[j];
                        if(BlankTr != null && BlankTr != undefined)
                        {
                            RowIndexes.push($($('#tBodyImportData .BlankImportRow')[j]).index());
                            ArrBlankTr.push(BlankTr);
                        }
                    }

                    $.ajax({
                        url: "/ImportLoadOnDemand/GetNextImportDataChunk",
                        type: "POST",
                        data: JSON.stringify({ RowIndexes: RowIndexes }),
                        dataType: "json",
                        traditional: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            if(data != null && data != undefined && data.lstDataChunk != null && data.lstDataChunk != undefined && data.lstDataChunk.length > 0)
                            {
                                for(k = 0;k<ArrBlankTr.length;k++)
                                {
                                    $(ArrBlankTr[k]).empty();
                                    $(ArrBlankTr[k]).html($('#importTemplate').tmpl(data.lstDataChunk[k]));
                                    $(ArrBlankTr[k]).removeClass('BlankImportRow');
                                }    
                            }
                        },
                        error: function () {
                            alert("Some Exception");
                        }
                    });

                    break;
                }
            }
        }

        //if($('#tBodyImportData .BlankImportRow').length > 0 && isScrolledIntoView($('#tBodyImportData .BlankImportRow')[0]))
        //{
        //    for(i = 0;i < 25;i++)
        //    {
        //        BlankTr = $('#tBodyImportData .BlankImportRow')[i];
        //        if(BlankTr != null && BlankTr != undefined)
        //            ArrBlankTr.push(BlankTr);
        //    }
            
        //    for(i = 0;i<ArrBlankTr.length;i++)
        //    {
        //        $(ArrBlankTr[i]).find('td')[0].append('1');
        //        $(ArrBlankTr[i]).removeClass('BlankImportRow');
        //    }
        //    CheckBlankTRAfterScroll();
        //}
    }

    function isScrolledIntoView(elem)
    {
        var ScrollDivTop = $("#divScroll").offset().top
        var ScrollDivBottom = ScrollDivTop + $("#divScroll").height()
        var ElementTop = $(elem).offset().top;        
        return (ElementTop >= ScrollDivTop && ElementTop <= ScrollDivBottom)
    }
</script>
<script id="importTemplate" type="text/x-jquery-tmpl">
        @if (Model.DataTableColumns.Count() > 0)
            {
            <td class="read_only ImportStatus">
                ${Status}
            </td>
                <td class="read_only ImportReason">
                    ${Reason}
                </td>
        }
        @if (Model.DataTableColumns.Contains("itemnumber"))
        {
            <td class="read_only"><input id="ItemNumber[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ItemNumber" value="${ItemNumber}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("link2"))
            {
            <td class="read_only"><input id="Link2[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].Link2" value="${Link2}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("manufacturer"))
            {
            <td class="read_only"><input id="ManufacturerName[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ManufacturerName" value="${ManufacturerName}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("manufacturernumber"))
            {
            <td class="read_only"><input id="ManufacturerNumber[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ManufacturerNumber" value="${ManufacturerNumber}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("suppliername"))
            {
            <td class="read_only"><input id="SupplierName[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].SupplierName" value="${SupplierName}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("supplierpartno"))
            {
            <td class="read_only"><input id="SupplierPartNo[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].SupplierPartNo" value="${SupplierPartNo}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("blanketordernumber"))
            {
            <td class="read_only"><input id="BlanketOrderNumber[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].BlanketOrderNumber" value="${BlanketOrderNumber}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("upc"))
            {
            <td class="read_only"><input id="UPC[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].UPC" value="${UPC}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("unspsc"))
            {
            <td class="read_only"><input id="UNSPSC[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].UNSPSC" value="${UNSPSC}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("description"))
            {
            <td class="read_only"><input id="Description[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].Description" value="${Description}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("longdescription"))
            {
            <td class="read_only"><input id="LongDescription[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].LongDescription" value="${LongDescription}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("categoryname"))
            {
            <td class="read_only"><input id="CategoryName[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].CategoryName" value="${CategoryName}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("glaccount"))
            {
            <td class="read_only"><input id="GLAccount[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].GLAccount" value="${GLAccount}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("uom"))
            {
            <td class="read_only"><input id="Unit[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].Unit" value="${Unit}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("costuom"))
            {
            <td class="read_only"><input id="CostUOMName[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].CostUOMName" value="${CostUOMName}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("defaultreorderquantity"))
            {
            <td class="read_only"><input id="DefaultReorderQuantity[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].DefaultReorderQuantity" value="${DefaultReorderQuantity}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("defaultpullquantity"))
            {
            <td class="read_only"><input id="DefaultPullQuantity[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].DefaultPullQuantity" value="${DefaultPullQuantity}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("cost"))
            {
            <td class="read_only"><input id="Cost[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].Cost" value="${Cost}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("markup"))
            {
            <td class="read_only"><input id="Markup[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].Markup" value="${Markup}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("sellprice"))
            {
            <td class="read_only"><input id="SellPrice[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].SellPrice" value="${SellPrice}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("extendedcost"))
            {
            <td class="read_only"><input id="ExtendedCost[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ExtendedCost" value="${ExtendedCost}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("leadtimeindays"))
            {
            <td class="read_only"><input id="LeadTimeInDays[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].LeadTimeInDays" value="${LeadTimeInDays}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("trend"))
            {
            <td class="read_only"><input id="Trend[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].Trend" value="${Trend}" type="checkbox" {{if Trend}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("taxable"))
            {
            <td class="read_only"><input id="Taxable[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].Taxable" value="${Taxable}" type="checkbox" {{if Taxable}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("consignment"))
            {
            <td class="read_only"><input id="Consignment[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].Consignment" value="${Consignment}" type="checkbox" {{if Consignment}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("stagedquantity"))
            {
            <td class="read_only">${StagedQuantity}</td>
        }
        @if (Model.DataTableColumns.Contains("intransitquantity"))
            {
            <td class="read_only">${InTransitquantity}</td>
        }
        @if (Model.DataTableColumns.Contains("onorderquantity"))
            {
            <td class="read_only">${OnOrderQuantity}</td>
        }
        @if (Model.DataTableColumns.Contains("ontransferquantity"))
            {
            <td class="read_only">${OnTransferQuantity}</td>
        }
        @if (Model.DataTableColumns.Contains("suggestedorderquantity"))
            {
            <td class="read_only">${SuggestedOrderQuantity}</td>
        }
        @if (Model.DataTableColumns.Contains("requisitionedquantity"))
            {
            <td class="read_only">${RequisitionedQuantity}</td>
        }
        @if (Model.DataTableColumns.Contains("averageusage"))
            {
            <td class="read_only">${AverageUsage}</td>
        }
        @if (Model.DataTableColumns.Contains("turns"))
            {
            <td class="read_only">${Turns}</td>
        }
        @if (Model.DataTableColumns.Contains("onhandquantity"))
            {
            <td class="read_only"><input id="OnHandQuantity[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].OnHandQuantity" value="${OnHandQuantity}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("isitemlevelminmaxqtyrequired"))
            {
            <td class="read_only"><input id="IsItemLevelMinMaxQtyRequired[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsItemLevelMinMaxQtyRequired" value="${IsItemLevelMinMaxQtyRequired}" type="checkbox" {{if IsItemLevelMinMaxQtyRequired}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("criticalquantity"))
            {
            <td class="read_only"><input id="CriticalQuantity[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].CriticalQuantity" value="${CriticalQuantity}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("minimumquantity"))
            {
            <td class="read_only"><input id="MinimumQuantity[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].MinimumQuantity" value="${MinimumQuantity}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("maximumquantity"))
            {
            <td class="read_only"><input id="MaximumQuantity[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].MaximumQuantity" value="${MaximumQuantity}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("weightperpiece"))
            {
            <td class="read_only"><input id="WeightPerPiece[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].WeightPerPiece" value="${WeightPerPiece}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("itemuniquenumber"))
            {
            <td class="read_only"><input id="ItemUniqueNumber[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ItemUniqueNumber" value="${ItemUniqueNumber}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("istransfer"))
            {
            <td class="read_only"><input id="IsTransfer[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsTransfer" value="${IsTransfer}" type="checkbox" {{if IsTransfer}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("ispurchase"))
            {
            <td class="read_only"><input id="IsPurchase[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsPurchase" value="${IsPurchase}" type="checkbox" {{if IsPurchase}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("inventrylocation"))
            {
            <td class="read_only"><input id="InventryLocation[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].InventryLocation" value="${InventryLocation}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("inventoryclassification"))
            {
            <td class="read_only"><input id="InventoryClassificationName[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].InventoryClassificationName" value="${InventoryClassificationName}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("serialnumbertracking"))
            {
            <td class="read_only"><input id="SerialNumberTracking[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].SerialNumberTracking" value="${SerialNumberTracking}" type="checkbox" {{if SerialNumberTracking}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("lotnumbertracking"))
            {
            <td class="read_only"><input id="LotNumberTracking[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].LotNumberTracking" value="${LotNumberTracking}" type="checkbox" {{if LotNumberTracking}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("datecodetracking"))
            {
            <td class="read_only"><input id="DateCodeTracking[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].DateCodeTracking" value="${DateCodeTracking}" type="checkbox" {{if DateCodeTracking}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("itemtype"))
            {
            <td class="read_only"><input id="ItemType[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ItemType" value="${ItemType}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("imagepath"))
            {
            <td class="read_only"><input id="ImagePath[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ImagePath" value="${ImagePath}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf1"))
            {
            <td class="read_only"><input id="UDF1[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].UDF1" value="${UDF1}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf2"))
            {
            <td class="read_only"><input id="UDF2[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].UDF2" value="${UDF2}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf3"))
            {
            <td class="read_only"><input id="UDF3[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].UDF3" value="${UDF3}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf4"))
            {
            <td class="read_only"><input id="UDF4[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].UDF4" value="${UDF4}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf5"))
            {
            <td class="read_only"><input id="UDF5[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].UDF5" value="${UDF5}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("islotserialexpirycost"))
            {
            <td class="read_only"><input id="IsLotSerialExpiryCost[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsLotSerialExpiryCost" value="${IsLotSerialExpiryCost}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("isbuildbreak"))
            {
            <td class="read_only"><input id="IsBuildBreak[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsBuildBreak" value="${IsBuildBreak}" type="checkbox" {{if IsBuildBreak}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("enforcedefaultpullquantity"))
            {
            <td class="read_only"><input id="PullQtyScanOverride[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].PullQtyScanOverride" value="${PullQtyScanOverride}" type="checkbox" {{if PullQtyScanOverride}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("enforcedefaultreorderquantity"))
            {
            <td class="read_only"><input id="IsEnforceDefaultReorderQuantity[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsEnforceDefaultReorderQuantity" value="${IsEnforceDefaultReorderQuantity}" type="checkbox" {{if IsEnforceDefaultReorderQuantity}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("isautoinventoryclassification"))
            {
            <td class="read_only"><input id="IsAutoInventoryClassification[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsAutoInventoryClassification" value="${IsAutoInventoryClassification}" type="checkbox" {{if IsAutoInventoryClassification}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("trendingsetting"))
            {
            <td class="read_only"><input id="TrendingSettingName[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].TrendingSettingName" value="${TrendingSettingName}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("ispackslipmandatoryatreceive"))
            {
            <td class="read_only"><input id="IsPackslipMandatoryAtReceive[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsPackslipMandatoryAtReceive" value="${IsPackslipMandatoryAtReceive}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("itemimageexternalurl"))
            {
            <td class="read_only"><input id="ItemImageExternalURL[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ItemImageExternalURL" value="${ItemImageExternalURL}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("itemdocexternalurl"))
            {
            <td class="read_only"><input id="ItemDocExternalURL[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ItemDocExternalURL" value="${ItemDocExternalURL}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("isdeleted"))
            {
            <td class="read_only"><input id="IsDeleted[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsDeleted" value="${IsDeleted}" type="checkbox" {{if IsDeleted}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }
        @if (Model.DataTableColumns.Contains("itemlink2externalurl"))
            {
            <td class="read_only"><input id="ItemLink2ExternalURL[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].ItemLink2ExternalURL" value="${ItemLink2ExternalURL}" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("isactive"))
            {
            <td class="read_only"><input id="IsActive[${Index}]" name="objImportPageDTO.lstItemMasterImportData[${Index}].IsActive" value="${IsActive}" type="text" class="importtext-box"></td>
        }
</script>