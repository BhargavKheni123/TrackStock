@model eTurns.DTO.ImportMastersNewDTO.ImportPageDTO

@{
    string ImportPageDTO = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
}

@if (Model != null && Model.RecordCount > 0)
{
<div id="divScroll" style="max-height:500px;overflow:auto">
    <table class="display dataTable">
        <thead>
            <tr>
                @if (Model.DataTableColumns.Count() > 0)
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.Status
                    </th>
                    <th class="ui-state-default read_only">
                        @ResCommon.Reason
                    </th>
                }
                @if (Model.DataTableColumns.Contains("assetname"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResAssetMaster.AssetName
                    </th>
                }

                @if (Model.DataTableColumns.Contains("description"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.Description
                    </th>
                }


                @if (Model.DataTableColumns.Contains("make"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.Make
                    </th>
                }

                @if (Model.DataTableColumns.Contains("model"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.Model
                    </th>
                }

                @if (Model.DataTableColumns.Contains("serial"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.Serial
                    </th>
                }

                @if (Model.DataTableColumns.Contains("toolcategory"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.ToolCategory
                    </th>
                }

                @if (Model.DataTableColumns.Contains("purchasedate"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.PurchaseDate
                    </th>
                }

                @if (Model.DataTableColumns.Contains("purchaseprice"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.PurchasePrice
                    </th>
                }

                @if (Model.DataTableColumns.Contains("depreciatedvalue"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.DepreciatedValue
                    </th>
                }

                @if (Model.DataTableColumns.Contains("udf1"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF1
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf2"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF2
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf3"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF3
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf4"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF4
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf5"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF5
                    </th>
                }

                @if (Model.DataTableColumns.Contains("udf6"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF6
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf7"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF7
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf8"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF8
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf9"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF9
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf10"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.UDF10
                    </th>
                }

                @if (Model.DataTableColumns.Contains("assetcategory"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.AssetCategory
                    </th>
                }

                @if (Model.DataTableColumns.Contains("imagepath"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.ImagePath
                    </th>
                }

                @if (Model.DataTableColumns.Contains("assetimageexternalurl"))
                {
                    <th class="ui-state-default read_only">
                        @ResAssetMaster.AssetImageExternalURL
                    </th>
                }

            </tr>
        </thead>
        <tbody id="tBodyImportData"></tbody>
    </table>
 
</div>
<div class="bottom">
    <div class="dataTables_info" id="tableRecord_info">Total 0 of 0</div>
    <div class="clear"></div>
</div>
<div class="editor-field" style="width: 6%; float: left;">
    <input type="button" id="btnSave" value="Save" title="Save" class="CreateBtn" onclick="return SaveImportClick();" />
</div>

<script type="text/javascript">
    var IsScrollCompleted = true;
    var IDs = '';
    var savedOnlyitemIds = '';
    var TotalRows = @Model.RecordCount;
    var _MaxRowIndex = 0;
    var _MaxPageSize = 100;
    var _IsAllDataLoaded = false;
    var ChangedImportData = [];
    var ChangedImportObject = function (){
        this.RowIndex = 0;
        this.FieldName = '';
        this.Value = '';
    }

    $(document).ready(function () {
        setTimeout(function(){
            LoadNextPage();
            ChangedImportData = [];
        }, 1000);

        $('#divScroll').on('scroll', function() {
            var topscroll = 0;
            var currPos = $(this).scrollTop();
            if(topscroll < currPos){
                if($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {

                    if(IsScrollCompleted == true)
                    {
                        setTimeout(function(){
                            LoadNextPage();
                            IsScrollCompleted = true;
                        }, 500);
                    }
                    IsScrollCompleted = false
                }
            }
        })
    });

    function LoadNextPage()
    {
        //alert("totalrows: "+ TotalRows + " and MaxRowIndex: " + _MaxRowIndex);
        if(TotalRows > _MaxRowIndex)
        {
            $('#DivGridLoading').show();
            var tableName = "AssetMaster";
            $.ajax({
                url: "/ImportLoadOnDemand/GetNextImportDataPage",
                type: "POST",
                data: JSON.stringify({ TableName: tableName, MaxRowIndex: _MaxRowIndex, MaxPageSize: _MaxPageSize }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if (data != null && data != undefined && data.lstDataPage != null && data.lstDataPage != undefined && data.lstDataPage.length > 0) {
                        $('#tBodyImportData').append($('#importTemplate').tmpl(data.lstDataPage));

                        _MaxRowIndex = _MaxRowIndex + _MaxPageSize;

                        if(TotalRows <= _MaxRowIndex)
                            _IsAllDataLoaded = false;
                    }
                    else
                    {
                        _IsAllDataLoaded = true;
                    }
                    $('#DivGridLoading').hide();
                    var currentrecord = 0;
                    currentrecord = (TotalRows > _MaxRowIndex) ?_MaxRowIndex:TotalRows;
                    $('#tableRecord_info').text("Total "+ currentrecord +" of "+TotalRows+"");
                },
                error: function () {
                    alert("Some Exception");
                    $('#DivGridLoading').hide();
                }
            });
        }
        return false;
    }

    function isScrolledIntoView(elem)
    {
        var ScrollDivTop = $("#divScroll").offset().top
        var ScrollDivBottom = ScrollDivTop + $("#divScroll").height()
        var ElementTop = $(elem).offset().top;
        return (ElementTop >= ScrollDivTop && ElementTop <= ScrollDivBottom)
    }

    function OnImportDataChange(txtBox, Index, ControlType)
    {
        var _id = $(txtBox)[0].id;
        var _value = null;

        if(ControlType == 'TEXTBOX')
        {
            _value = $(txtBox)[0].value;
        }
        else if(ControlType == 'CHECKBOX')
        {
            _value = $(txtBox).is(":checked");
        }

        var _FieldName = _id.substring(0, _id.indexOf('-'));;

        //------------------Delete If Same Entry Exists------------------
        //
        ChangedImportData = jQuery.grep(ChangedImportData, function(x) {
            return (x.RowIndex.toString() + '_' + x.FieldName != Index.toString() + '_' + _FieldName);
        });

        //-----------------------Add Changed Entry-----------------------
        //
        var obj = new ChangedImportObject();
        obj.RowIndex = Index;
        obj.FieldName = _FieldName;
        obj.Value = _value;
        ChangedImportData.push(obj);
        //console.log(ChangedImportData);
    }

    function SaveImportClick()
    {
        if(CheckZipFile())
        {
            $('#btnSave').prop("disabled", "disabled");


            var _isImgZipAvail = false;
       

            if ($('#uploadZIPFile').val() != '' && $('#uploadZIPFile').val() != null)
            {
                _isImgZipAvail = true;
            }

            _MaxRowIndex = 0;
            _MaxPageSize = 100;
            $('#tBodyImportData').empty();
            $('#DivGridLoading').show();
            $.ajax({
                url: "/ImportLoadOnDemand/SaveImport",
                type: "POST",
                data: JSON.stringify({ TableName: "AssetMaster", lstImportDataChange: ChangedImportData, MaxRowIndex: _MaxRowIndex, MaxPageSize: _MaxPageSize, isImgZipAvail: _isImgZipAvail }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    //debugger;
                    if(data.savedOnlyitemIds != null){
                        if(savedOnlyitemIds.length > 0)
                            savedOnlyitemIds = savedOnlyitemIds + ',' + data.savedOnlyitemIds;
                        else
                            savedOnlyitemIds = data.savedOnlyitemIds;
                    }
                    IDs = savedOnlyitemIds;
                    if(data.ClearChangeObject)
                    {
                        ChangedImportData = [];
                    }

                    if(data.status == 'success')
                    {
                        alert('Data Imported Successfully');
                        $("input#uploadZIPFile").hide();
                        $('#tableRecord_info').text("Total 0 of 0");
                        $('#tBodyImportData').empty();
                        $('#DivGridLoading').hide();
                        $("select#ImportModule")[0].selectedIndex = 0;
                        $("select#ImportModule").attr('selected', true);
                    }
                    else
                    {
                        _IsAllDataLoaded = false;
                        if (data.lstDataPage != null && data.lstDataPage != undefined && data.lstDataPage.length > 0)
                        {
                            var successRecord = TotalRows - (data.lstDataPage.length);
                            alert(successRecord + ' Records are Successfully Imported.');
                            TotalRows = data.lstDataPage.length;
                            $('#tBodyImportData').append($('#importTemplate').tmpl(data.lstDataPage));
                            _MaxRowIndex = _MaxRowIndex + _MaxPageSize;
                            if(TotalRows <= _MaxRowIndex)
                                _IsAllDataLoaded = false;

                            $('#tableRecord_info').text("Total "+ data.lstDataPage.length +" of "+data.lstDataPage.length+"");

                            if(ChangedImportData != null && ChangedImportData != undefined)
                            {
                                for(var i = 0; i < ChangedImportData.length; i++)
                                {
                                    $('#' + ChangedImportData[i].FieldName + '-' + ChangedImportData[i].RowIndex)[0].value = ChangedImportData[i].Value;
                                }
                            }

                            $("input#uploadZIPFile").show();

                            setErrorcss();
                    
                        }
                        else
                        {
                            _IsAllDataLoaded = true;
                        }
                    }
                    $('#DivGridLoading').hide();
                    $('#btnSave').removeProp("disabled");
                },
                error: function () {
                    alert("Some Exception");
                    $('#DivGridLoading').hide();
                },
                complete: function () {
                    ////debugger;
                    if ($.trim($('#ImportModule option:selected').text()) == Assetsselval) {
                        if ($('#uploadZIPFile').val() != '') {
                            uploadZIPFile(IDs);
                        }
                    }
                    $('#DivGridLoading').hide();
                }
            });
        }
    }


    function CheckZipFile(){
        ////debugger;
        if ($.trim($('#ImportModule option:selected').text()) == Assetsselval) {
            var fileName = $("#uploadZIPFile").val();
            if (fileName == "") {
                return true;
            }
            var strfilename = fileName.split(".");
            if (strfilename[strfilename.length - 1].toUpperCase() == "ZIP")
                return true;
            else {
                alert("File with " + fileName + " isinvalid. Upload a validfile with zip extensions");
                $("#uploadZIPFile").val("");
                return false;
            }
        }
        return true;
    }

    function uploadZIPFile(IDs) {
        $("#loading")
    .ajaxStart(function () {
        $(this).show();
    })
    .ajaxComplete(function () {
        $(this).hide();
    });
        $.ajaxFileUpload
        (
            {
                url: '/api/fileupload/uploadZIPFILE',
                secureuri: false,
                type: "POST",
                data:{'ItemIDs':IDs,'TableName':'Assets'},
                fileElementId: 'uploadZIPFile',
                dataType: 'json',
                success: function (data, status) {
                    //window.location.reload();
                },
                error: function (xhr) {
                }
            }
        )
        return false;
    }

    function setErrorcss(){

        $('#tBodyImportData tr').css('background-color', 'pink');
        $('#tBodyImportData tr .ImportStatus').css('color','red');
        $('#tBodyImportData tr .ImportReason').css('color','red');
    }

</script>
<script id="importTemplate" type="text/x-jquery-tmpl">
    <tr class='odd importtext-box-tr BlankImportRow' style='background-color: rgb(239, 247, 255);height: 35px;'>
        @if (Model.DataTableColumns.Count() > 0)
        {
            <td class="read_only ImportStatus">
                ${Status}
            </td>
            <td class="read_only ImportReason">
                ${Reason}
            </td>
        }
        @if (Model.DataTableColumns.Contains("assetname"))
        {
            <td class="read_only"><input id="AssetName-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].AssetName" value="${AssetName}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("description"))
        {
            <td class="read_only"><input id="Description-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].Description" value="${Description}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("make"))
        {
            <td class="read_only"><input id="Make-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].Make" value="${Make}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("model"))
        {
            <td class="read_only"><input id="Model-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].Model" value="${Model}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("serial"))
        {
            <td class="read_only"><input id="Serial-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].Serial" value="${Serial}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("toolcategory"))
        {
            <td class="read_only"><input id="ToolCategoryName-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].ToolCategoryName" value="${ToolCategoryName}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("purchasedate"))
        {
            <td class="read_only"><input id="PurchaseDateString-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].PurchaseDateString" value="${PurchaseDateString}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("purchaseprice"))
        {
            <td class="read_only"><input id="PurchasePrice-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].PurchasePrice" value="${PurchasePrice}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("depreciatedvalue"))
        {
            <td class="read_only"><input id="DepreciatedValue-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].DepreciatedValue" value="${DepreciatedValue}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("udf1"))
        {
            <td class="read_only"><input id="UDF1-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF1" value="${UDF1}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf2"))
        {
            <td class="read_only"><input id="UDF2-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF2" value="${UDF2}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf3"))
        {
            <td class="read_only"><input id="UDF3-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF3" value="${UDF3}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf4"))
        {
            <td class="read_only"><input id="UDF4-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF4" value="${UDF4}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf5"))
        {
            <td class="read_only"><input id="UDF5-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF5" value="${UDF5}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("udf6"))
        {
            <td class="read_only"><input id="UDF6-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF6" value="${UDF6}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf7"))
        {
            <td class="read_only"><input id="UDF7-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF7" value="${UDF7}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf8"))
        {
            <td class="read_only"><input id="UDF8-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF8" value="${UDF8}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf9"))
        {
            <td class="read_only"><input id="UDF9-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF9" value="${UDF9}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf10"))
        {
            <td class="read_only"><input id="UDF10-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].UDF10" value="${UDF10}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("assetcategory"))
        {
            <td class="read_only"><input id="ToolCategoryName-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].ToolCategoryName" value="${ToolCategoryName}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("imagepath"))
        {
            <td class="read_only"><input id="ImagePath-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].ImagePath" value="${ImagePath}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("assetimageexternalurl"))
        {
            <td class="read_only"><input id="AssetImageExternalURL-${Index}" name="objImportPageDTO.lstAssetMasterImportData[${Index}].AssetImageExternalURL" value="${AssetImageExternalURL}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
    </tr>
</script>
}