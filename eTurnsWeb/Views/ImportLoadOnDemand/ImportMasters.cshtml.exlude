@model eTurns.DTO.ImportMastersNewDTO.ImportMaster

@{
    string PathToCSv = Url.Content("~/Content/OpenAccess/CSV/");
}
<script type='text/javascript' src="@Url.Content("~/Scripts/ajaxfileupload.js?v=" + eTurnsWeb.Helper.CommonUtility.GetReleaseNumber())"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.tmpl.min.js")"></script>
<div class="userListingWrapper">
    <h2>
        @ResImportMasters.PageHeader
    </h2>
    <div class="userListBlock">
        <div id="tab7" class="tabContener" style="width: 99%">
            @using (Html.BeginForm("ImportMasters", "ImportLoadOnDemand", FormMethod.Post, new { enctype = "multipart/form-data", @id = "frmImport" }))
            {
                @Html.AntiForgeryToken()
                <div class="userContent" style="padding-left: 5px; width: 99%;">
                    <div class="userHead" style="margin: 0 0.5% 0; width: 99%">
                        <div class="editorForm" style="width: 98%">
                            <ul>
                                <li style="float: left;">
                                    <div class="editor-label" style="width: 7%; float: left; padding: 0">
                                        @Html.Label("Select Module")
                                    </div>
                                    <div class="editor-field" style="width: 18%; float: left;">
                                        @Html.DropDownListFor(m => m.ImportModule, (List<SelectListItem>)ViewBag.DDLModulelst, new { @style = "width:85%", @class = "selectBox" })
                                    </div>
                                    <div class="editor-label" style="width: 7%; float: left; padding: 0">
                                        @Html.Label("Select File")
                                    </div>
                                    <div class="editor-field" style="width: 18%; float: left;">
                                        <input name="uploadFile" id="UploadFile" type="file" />
                                    </div>
                                    <div class="editor-field" style="width: 6%; float: left;">
                                        <input type="submit" id="btnupload" value="Load" title="Load" class="CreateBtn"  />
                                    </div>
                                    <div class="editor-field" style="width: 7%;  float: left; padding-left: 84px; ">
                                        <input type="button" id="btnDownload" value="Download Empty Template" title="Download Empty Template" class="CreateBtn" />
                                    </div>
                                    <div class="editor-field" style="width: 6%; padding-left: 37px; float: left;">
                                        <input type="button" id="btnAllRecordDownload" value="Download Data" title="Download Data" class="CreateBtn" />
                                    </div>
                                    <div class="editor-label" style="width: 15%; float: left; padding: 6px;">
                                        @Html.Label(@ResImportMasters.Requiredfieldsbegin)
                                    </div>
                                </li>
                            </ul>
                        </div>
                        <div id="DivGridLoading" class="DivLoadingProcessing" style="display: none;">
                        </div>
                        @if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ItemMaster)
                            || Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.AssetMaster)
                            || Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ToolMaster)
                            || Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.SupplierMaster))
                        {
                            <input name="uploadZIPFile" id="uploadZIPFile" type="file" style="float: left !important;" /><br />
                        }
                        @if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ItemMaster))
                        {
                            <input name="uploadZIPFileForLink2" id="uploadZIPFileForLink2" type="file" style="float: left !important;" /><br /><br />
                        }
                        @if (Model.IsFileSuccessfulyUploaded == true)
                        {
                            <div class="userContent" style="width: 100% !important;">
                                <div id="myImportDataTable_wrapper" class="dataTables_wrapper" role="grid">
                                    <div id="divImport">
                                        @if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ItemMaster))
                                        {
                                            //Html.RenderPartial("_ItemMasterImport1", Model.objImportPageDTO);
                                            Html.RenderPartial("_ItemMasterImport2", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.CategoryMaster))
                                        {
                                            Html.RenderPartial("_CategoryMasterImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.CustomerMaster))
                                        {
                                            Html.RenderPartial("_CustomerMasterImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.AssetMaster))
                                        {
                                            Html.RenderPartial("_AssetMasterImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ToolMaster))
                                        {
                                            Html.RenderPartial("_ToolMasterImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.SupplierMaster))
                                        {
                                            Html.RenderPartial("_SupplierMasterImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.QuickListItems))
                                        {
                                            Html.RenderPartial("_QuickListItemsImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ManualCount))
                                        {
                                            Html.RenderPartial("_ManualCountImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.BinMaster))
                                        {
                                            Html.RenderPartial("_BinMasterImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.WorkOrder))
                                        {
                                            Html.RenderPartial("_WorkOrderImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.BOMItemMaster))
                                        {
                                            Html.RenderPartial("_BOMItemMasterImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.kitdetail))
                                        {
                                            Html.RenderPartial("_kitdetailImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ProjectMaster))
                                        {
                                            Html.RenderPartial("_ProjectMasterImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ItemLocationeVMISetup))
                                        {
                                            Html.RenderPartial("_ItemLocationeVMISetupImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ItemManufacturerDetails))
                                        {
                                            Html.RenderPartial("_ItemManufacturerDetailsImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.ItemSupplierDetails))
                                        {
                                            Html.RenderPartial("_ItemSupplierDetailsImport", Model.objImportPageDTO);
                                        }
                                        else if (Model.ImportModule == Convert.ToInt32(ImportMastersNewDTO.TableName.BarcodeMaster))
                                        {
                                            Html.RenderPartial("_BarcodeMasterImport", Model.objImportPageDTO);
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<script type="text/javascript">

    var PathToCSv = '@PathToCSv';
    var CategoryMasterselval = '@ImportMastersNewDTO.TableName.CategoryMaster';
    var ItemMasterselval = '@ImportMastersNewDTO.TableName.ItemMaster';
    var eVMISetupselval = '@ImportMastersNewDTO.TableName.ItemLocationeVMISetup)';
    var BinMasterselval = '@ImportMastersNewDTO.TableName.BinMaster';
    var LocationMasterselval = '@ImportMastersNewDTO.TableName.LocationMaster';
    var ToolCategoryselval = '@ImportMastersNewDTO.TableName.ToolCategoryMaster';
    var CustomerMasterselval = '@ImportMastersNewDTO.TableName.CustomerMaster';
    var FreightTypeMasterselval = '@ImportMastersNewDTO.TableName.FreightTypeMaster';
    var GLAccountsMasterselval = '@ImportMastersNewDTO.TableName.GLAccountMaster';
    var GXPRConsignedJobMasterselval = '@ImportMastersNewDTO.TableName.GXPRConsigmentJobMaster';
    var JobTypeMasterselval = '@ImportMastersNewDTO.TableName.JobTypeMaster';
    var ShipViaMasterselval = '@ImportMastersNewDTO.TableName.ShipViaMaster';
    var TechnicianMasterselval = '@ImportMastersNewDTO.TableName.TechnicianMaster';
    var ManufacturerMasterselval = '@ImportMastersNewDTO.TableName.ManufacturerMaster';
    var MeasurementTermMasterselval = '@ImportMastersNewDTO.TableName.MeasurementTermMaster';
    var UnitMasterselval = '@ImportMastersNewDTO.TableName.UnitMaster';
    var SupplierMasterselval = '@ImportMastersNewDTO.TableName.SupplierMaster';
    var BOMItemMasterselval = '@ImportMastersNewDTO.TableName.BOMItemMaster';
    var CostUOMMasterselval = '@ImportMastersNewDTO.TableName.CostUOMMaster';
    var InventoryClassificationMasterselval = '@ImportMastersNewDTO.TableName.InventoryClassificationMaster';
    var ToolMasterselval = '@ImportMastersNewDTO.TableName.ToolMaster';
    var Assetsselval = '@ImportMastersNewDTO.TableName.AssetMaster';
    var QuickListPermissionselval = '@ImportMastersNewDTO.TableName.QuickListItems';
    var Kitsselval = '@ImportMastersNewDTO.TableName.kitdetail';
    var ItemManufacturerselval = '@ImportMastersNewDTO.TableName.ItemManufacturerDetails';
    var ItemSupplierselval = '@ImportMastersNewDTO.TableName.ItemSupplierDetails';
    var BarcodeMasterselval = '@ImportMastersNewDTO.TableName.BarcodeMaster';
    var UDFselval = '@ImportMastersNewDTO.TableName.UDF';
    var ProjectMasterselval = '@ImportMastersNewDTO.TableName.ProjectMaster';
    var ItemLocationQtyval = '@ImportMastersNewDTO.TableName.ItemLocationQty';
    var ManualCountval = '@ImportMastersNewDTO.TableName.ManualCount';
    var WorkOrderval = '@ImportMastersNewDTO.TableName.WorkOrder';
    var PullImport = '@ImportMastersNewDTO.TableName.PullMaster';
    var OrderMasterselval = '@ImportMastersNewDTO.TableName.OrderMaster';

    $(document).ready(function () {
        $('#btnDownload').click(function () {
            //alert("In btnDownload");
            var arrItems = new Array();
            var randomNumber = (new Date()).valueOf();
            var selectedModuleVal = $('#ImportModule option:selected').text();
            //alert(selectedModuleVal);
            if (selectedModuleVal == BinMasterselval) {
                window.open(PathToCSv + "AdjustmentCount.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == eVMISetupselval) {
                window.open(PathToCSv + "InventoryLocation.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == LocationMasterselval) {
                window.open(PathToCSv + "Location.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ToolCategoryselval) {
                window.open(PathToCSv + "ToolCategory.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == CategoryMasterselval) {
                window.open(PathToCSv + "Category.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == CustomerMasterselval) {
                window.open(PathToCSv + "Customer.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == FreightTypeMasterselval) {
                window.open(PathToCSv + "FreightType.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == GLAccountsMasterselval) {
                window.open(PathToCSv + "GLAccount.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == GXPRConsignedJobMasterselval) {
                window.open(PathToCSv + "GXPR Consigned Job.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == JobTypeMasterselval) {
                window.open(PathToCSv + "Job Type.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ShipViaMasterselval) {
                window.open(PathToCSv + "Ship Via.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == TechnicianMasterselval) {
                window.open(PathToCSv + "Technicians.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ManufacturerMasterselval) {
                window.open(PathToCSv + "Manufacturer.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == MeasurementTermMasterselval) {
                window.open(PathToCSv + "Measurement Term.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == UnitMasterselval) {
                window.open(PathToCSv + "Units.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == SupplierMasterselval) {
                window.open(PathToCSv + "Supplier.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ItemMasterselval) {
                window.open(PathToCSv + "Item.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == BOMItemMasterselval) {
                window.open(PathToCSv + "BOMItem.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == CostUOMMasterselval) {
                window.open(PathToCSv + "CostUOM.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == InventoryClassificationMasterselval) {
                window.open(PathToCSv + "InventoryClassification.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ToolMasterselval) {
                window.open(PathToCSv + "Tools.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == Assetsselval) {
                window.open(PathToCSv + "Assets.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == QuickListPermissionselval) {
                window.open(PathToCSv + "QuickList.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == Kitsselval) {
                window.open(PathToCSv + "Kits.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ItemManufacturerselval) {
                window.open(PathToCSv + "ItemManufacturer.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ItemSupplierselval) {
                window.open(PathToCSv + "ItemSupplier.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == BarcodeMasterselval) {
                window.open(PathToCSv + "BarcodeMaster.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == UDFselval) {
                window.open(PathToCSv + "UDFMaster.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ProjectMasterselval) {
                window.open(PathToCSv + "Projects.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ItemLocationQtyval) {
                window.open(PathToCSv + "ItemLocationQuantity.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == ManualCountval) {
                window.open(PathToCSv + "ManualCount.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == WorkOrderval) {
                window.open(PathToCSv + "WorkOrder.csv?q=et&_" + randomNumber);
            }
            else if (selectedModuleVal == PullImport) {
                window.open(PathToCSv + "PullImport.csv?q=et&_" + randomNumber);
            }
        });


        $('#btnAllRecordDownload').click(function () {
            var selectedModuleVal = $('#ImportModule option:selected').text();
            var ModuleName = 'AssetMaster';

            if (selectedModuleVal == BinMasterselval) {
                ModuleName = 'AdjustmentCountCSV';
            }
            else if (selectedModuleVal == eVMISetupselval) {
                ModuleName = 'ItemLocationCSV';
            }
            else if (selectedModuleVal == LocationMasterselval) {
                ModuleName = 'LocationMasterList';
            }
            else if (selectedModuleVal == ToolCategoryselval) {
                ModuleName = 'ToolCategoryList';
            }
            else if (selectedModuleVal == CategoryMasterselval) {
                ModuleName = 'CategoryMasterList';
            }
            else if (selectedModuleVal == CustomerMasterselval) {
                ModuleName = 'CustomerMasterList';
            }
            else if (selectedModuleVal == FreightTypeMasterselval) {
                ModuleName = 'FreightTypeMasterList';
            }
            else if (selectedModuleVal == GLAccountsMasterselval) {
                ModuleName = 'GLAccountMasterList';
            }
            else if (selectedModuleVal == GXPRConsignedJobMasterselval) {
                ModuleName = '';
            }
            else if (selectedModuleVal == JobTypeMasterselval) {
                ModuleName = 'CategoryMasterList';
            }
            else if (selectedModuleVal == ShipViaMasterselval) {
                ModuleName = 'ShipViaMasterList';
            }
            else if (selectedModuleVal == TechnicianMasterselval) {
                ModuleName = 'TechnicianList';
            }
            else if (selectedModuleVal == ManufacturerMasterselval) {
                ModuleName = 'ManufacturerMasterList';
            }
            else if (selectedModuleVal == MeasurementTermMasterselval) {
                ModuleName = 'MeasurementTermList';
            }
            else if (selectedModuleVal == UnitMasterselval) {
                ModuleName = 'UnitMasterList';
            }
            else if (selectedModuleVal == SupplierMasterselval) {
                ModuleName = 'SupplierMasterList';
            }
            else if (selectedModuleVal == ItemMasterselval) {
                ModuleName = 'ItemMasterList';
            }
            else if (selectedModuleVal == BOMItemMasterselval) {
                ModuleName = 'BOMItemMasterList';
            }
            else if (selectedModuleVal == CostUOMMasterselval) {
                ModuleName = 'CostUOMMasterList';
            }
            else if (selectedModuleVal == InventoryClassificationMasterselval) {
                ModuleName = 'InventoryClassificationMasterList';
            }
            else if (selectedModuleVal == ToolMasterselval) {
                ModuleName = 'ToolList';
            }
            else if (selectedModuleVal == Assetsselval) {
                ModuleName = 'AssetMasterList';
            }
            else if (selectedModuleVal == QuickListPermissionselval) {
                ModuleName = 'QuickList';
            }
            else if (selectedModuleVal == Kitsselval) {
                ModuleName = 'KitsCSV';
            }
            else if (selectedModuleVal == ItemManufacturerselval) {
                ModuleName = 'ItemManufacturerCSV';
            }
            else if (selectedModuleVal == ItemSupplierselval) {
                ModuleName = 'ItemSupplierCSV';
            }
            else if (selectedModuleVal == BarcodeMasterselval) {
                ModuleName = 'BarcodeMasterCSV';
            }
            else if (selectedModuleVal == UDFselval) {
                ModuleName = 'UDFMasterCSV';
            }
            else if (selectedModuleVal == ProjectMasterselval) {
                ModuleName = 'ProjectMasterCSV';
            }
            else if (selectedModuleVal == ManualCountval) {
                ModuleName = 'ManualCountCSV';
            }
            else if (selectedModuleVal == ItemLocationQtyval) {
                ModuleName = 'ItemLocationQtyCSV';
            }
            else if (selectedModuleVal == WorkOrderval) {
                ModuleName = 'WorkOrder';
            }
            else if (selectedModuleVal == PullImport) {
                ModuleName = 'PullImport';
            }

            ExportAllData(ModuleName, 'CSV','import');
        });

        $('#btnupload').click(function () {
            //debugger;
            var fileName = "";
            //var varUploadFile = document.getElementById("uploadFile");
            fileName = $('#UploadFile').val();
            if (fileName == "") {
                //alert(ImportBrowseFileMsg);
                return false;
            }
            var strfilename = fileName.split(".");
            if (strfilename[strfilename.length - 1].toUpperCase() == "CSV" || strfilename[strfilename.length - 1].toUpperCase() == "XLS")
                return true;
            else {
                alert("File with " + fileName + " isinvalid. Upload a validfile with csv extensions");
                return false;
            }
            return true;
        });


    });


    function SaveClicked() {
        setTimeout(function () {
            //$(".ImportReason").find('.ImportValidationError').each(function () {
            //    if ($(this).closest('tr').find('.ImportStatus').find('.ImportFail').length <= 0) {
            //        $(this).closest('tr').find('.ImportStatus').html("<span style='color:red' class='ImportFail'>Fail</span>");
            //    }
            //});
            //$(".ImportReason").find('.ImportValidationError').each(function () {
            //    $(this).closest('td').html($(this).closest('td').html().replace('N/A', ''));
            //});

            for (var i = 0; i < $(".ImportReason").find('.ImportValidationError').length; i++) {
                if ($($(".ImportReason").find('.ImportValidationError')[i]).closest('tr').find('.ImportStatus').find('.ImportFail').length <= 0) {
                    $($(".ImportReason").find('.ImportValidationError')[i]).closest('tr').find('.ImportStatus').html("<span style='color:red' class='ImportFail'>Fail</span>");
                }
            }
        }, 1000);
    }




</script>
@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <script language="javascript" type="text/javascript">
        alert('@(ViewBag.ErrorMessage)');
    </script>
}