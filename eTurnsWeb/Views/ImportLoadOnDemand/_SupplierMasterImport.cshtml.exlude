@model eTurns.DTO.ImportMastersNewDTO.ImportPageDTO

@{
    string ImportPageDTO = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
}

@if (Model != null && Model.RecordCount > 0)
{

<div id="divScroll" style="max-height:500px;overflow:auto">
    <table class="display dataTable">
        <thead>
            <tr>
                @if (Model.DataTableColumns.Count() > 0)
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.Status
                    </th>
                    <th class="ui-state-default read_only">
                        @ResCommon.Reason
                    </th>
                }
                @if (Model.DataTableColumns.Contains("suppliername"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResSupplierMaster.Supplier
                    </th>
                }

                @if (Model.DataTableColumns.Contains("suppliercolor"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResSupplierMaster.SupplierColor
                    </th>
                }

                @if (Model.DataTableColumns.Contains("description"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.Description
                    </th>
                }

                @if (Model.DataTableColumns.Contains("branchnumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.BranchNumber
                    </th>
                }

                @if (Model.DataTableColumns.Contains("maximumordersize"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.MaximumOrderSize
                    </th>
                }

                @if (Model.DataTableColumns.Contains("address"))
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.Address
                    </th>
                }

                @if (Model.DataTableColumns.Contains("city"))
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.City
                    </th>
                }

                @if (Model.DataTableColumns.Contains("state"))
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.State
                    </th>
                }

                @if (Model.DataTableColumns.Contains("zipcode"))
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.ZipCode
                    </th>
                }

                @if (Model.DataTableColumns.Contains("country"))
                {
                    <th class="ui-state-default read_only">
                        @ResCommon.Country
                    </th>
                }

                @if (Model.DataTableColumns.Contains("contact"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResSupplierMaster.Contact
                    </th>
                }

                @if (Model.DataTableColumns.Contains("phone"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResCommon.Phone
                    </th>
                }


                @if (Model.DataTableColumns.Contains("fax"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.Fax
                    </th>
                }


                @if (Model.DataTableColumns.Contains("issendtovendor"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.IsSendtoVendor
                    </th>
                }


                @if (Model.DataTableColumns.Contains("isvendorreturnasn"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.IsVendorReturnAsn
                    </th>
                }


                @if (Model.DataTableColumns.Contains("issupplierreceiveskitcomponents"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.IsSupplierReceivesKitComponents
                    </th>
                }

                @if (Model.DataTableColumns.Contains("ordernumbertypeblank"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.optBlank
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ordernumbertypefixed"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.optFixed
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ordernumbertypeblanketordernumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.optBlanketOrder
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ordernumbertypeincrementingordernumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.optIncreamentingbyOrder
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ordernumbertypeincrementingbyday"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.optIncreamentingbyDay
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ordernumbertypedateincrementing"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.optDateIncrementing
                    </th>
                }
                @if (Model.DataTableColumns.Contains("ordernumbertypedate"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.optDate
                    </th>
                }

                @if (Model.DataTableColumns.Contains("udf1"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.UDF1
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf2"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.UDF2
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf3"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.UDF3
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf4"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.UDF4
                    </th>
                }
                @if (Model.DataTableColumns.Contains("udf5"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.UDF5
                    </th>
                }

                @if (Model.DataTableColumns.Contains("accountnumber"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResSupplierAccountDetails.AccountNo
                    </th>
                }

                @if (Model.DataTableColumns.Contains("accountname"))
                {
                    <th class="ui-state-default read_only">
                        <em>* </em>
                        @ResSupplierAccountDetails.AccountName
                    </th>
                }

                @if (Model.DataTableColumns.Contains("accountaddress"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierAccountDetails.AccountAddress
                    </th>
                }

                @if (Model.DataTableColumns.Contains("accountcity"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierAccountDetails.AccountCity
                    </th>
                }


                @if (Model.DataTableColumns.Contains("accountstate"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierAccountDetails.AccountState
                    </th>
                }
                @if (Model.DataTableColumns.Contains("accountzip"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierAccountDetails.AccountZip
                    </th>
                }
                @if (Model.DataTableColumns.Contains("accountisdefault"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierAccountDetails.AccountIsDefault
                    </th>
                }
                @if (Model.DataTableColumns.Contains("blanketponumber"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.BlanketPO
                    </th>
                }
                @if (Model.DataTableColumns.Contains("startdate"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.StartDate
                    </th>
                }

                @if (Model.DataTableColumns.Contains("enddate"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.Enddate
                    </th>
                }

                @if (Model.DataTableColumns.Contains("maxlimit"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.MaxLimit
                    </th>
                }
                @if (Model.DataTableColumns.Contains("donotexceed"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.IsNotExceed
                    </th>
                }

                @if (Model.DataTableColumns.Contains("maxlimitqty"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.MaxLimitQty
                    </th>
                }
                @if (Model.DataTableColumns.Contains("donotexceedqty"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierBlanketPODetails.IsNotExceedQty
                    </th>
                }

                @if (Model.DataTableColumns.Contains("pullpurchasenumberfixed"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.PullPurchaseNumberFixed
                    </th>
                }

                @if (Model.DataTableColumns.Contains("pullpurchasenumberblanketorder"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.PullPurchaseNumberBlanketOrder
                    </th>
                }

                @if (Model.DataTableColumns.Contains("pullpurchasenumberdateincrementing"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.PullPurchaseNumberDateIncrementing
                    </th>
                }

                @if (Model.DataTableColumns.Contains("pullpurchasenumberdate"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.PullPurchaseNumberDate
                    </th>
                }

                @if (Model.DataTableColumns.Contains("lastpullpurchasenumberused"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.LastPullPurchaseNumberUsed
                    </th>
                }

                @if (Model.DataTableColumns.Contains("isblanketdeleted"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.IsBlanketDeleted
                    </th>
                }

                @if (Model.DataTableColumns.Contains("supplierimage"))
                {
                    <th class="ui-state-default read_only">
                        @ResSupplierMaster.SupplierImage
                    </th>
                }

                @if (Model.DataTableColumns.Contains("imageexternalurl"))
                {
                    <th class="ui-state-default read_only">
                       @ResSupplierMaster.ImageExternalURL
                    </th>
                }

            </tr>
        </thead>
        <tbody id="tBodyImportData"></tbody>
    </table>
   
</div>
<div class="bottom">
    <div class="dataTables_info" id="tableRecord_info">Total 0 of 0</div>
    <div class="clear"></div>
</div>
<div class="editor-field" style="width: 6%; float: left;">
    <input type="button" id="btnSave" value="Save" title="Save" class="CreateBtn" onclick="return SaveImportClick();" />
</div>

<script type="text/javascript">
    var tableName = "SupplierMaster";
    var IDs = '';
    var savedOnlyitemIds = '';
    var IsScrollCompleted = true;
    var TotalRows = @Model.RecordCount;
    var _MaxRowIndex = 0;
    var _MaxPageSize = 100;
    var _IsAllDataLoaded = false;
    var ChangedImportData = [];
    var ChangedImportObject = function (){
        this.RowIndex = 0;
        this.FieldName = '';
        this.Value = '';
    }


    $(document).ready(function () {
        setTimeout(function(){
            LoadNextPage();
            ChangedImportData = [];
        }, 1000);

        $('#divScroll').on('scroll', function() {
            var topscroll = 0;
            var currPos = $(this).scrollTop();
            if(topscroll < currPos){
                if($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {

                    if(IsScrollCompleted == true)
                    {
                        setTimeout(function(){
                            LoadNextPage();
                            IsScrollCompleted = true;
                        }, 500);
                    }
                    IsScrollCompleted = false
                }
            }
        })
    });

    function LoadNextPage()
    {
        //alert("totalrows: "+ TotalRows + " and MaxRowIndex: " + _MaxRowIndex);
        if(TotalRows > _MaxRowIndex)
        {
            $('#DivGridLoading').show();

            $.ajax({
                url: "/ImportLoadOnDemand/GetNextImportDataPage",
                type: "POST",
                data: JSON.stringify({ TableName: tableName, MaxRowIndex: _MaxRowIndex, MaxPageSize: _MaxPageSize }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if (data != null && data != undefined && data.lstDataPage != null && data.lstDataPage != undefined && data.lstDataPage.length > 0) {
                        $('#tBodyImportData').append($('#importTemplate').tmpl(data.lstDataPage));

                        _MaxRowIndex = _MaxRowIndex + _MaxPageSize;

                        if(TotalRows <= _MaxRowIndex)
                            _IsAllDataLoaded = false;
                    }
                    else
                    {
                        _IsAllDataLoaded = true;
                    }
                    $('#DivGridLoading').hide();
                    var currentrecord = 0;
                    currentrecord = (TotalRows > _MaxRowIndex) ?_MaxRowIndex:TotalRows;
                    $('#tableRecord_info').text("Total "+ currentrecord +" of "+TotalRows+"");
                },
                error: function () {
                    alert("Some Exception");
                    $('#DivGridLoading').hide();
                }
            });
        }
        return false;
    }

    function isScrolledIntoView(elem)
    {
        var ScrollDivTop = $("#divScroll").offset().top
        var ScrollDivBottom = ScrollDivTop + $("#divScroll").height()
        var ElementTop = $(elem).offset().top;
        return (ElementTop >= ScrollDivTop && ElementTop <= ScrollDivBottom)
    }

    function OnImportDataChange(txtBox, Index, ControlType)
    {
        var _id = $(txtBox)[0].id;
        var _value = null;

        if(ControlType == 'TEXTBOX')
        {
            _value = $(txtBox)[0].value;
        }
        else if(ControlType == 'CHECKBOX')
        {
            _value = $(txtBox).is(":checked");
        }

        var _FieldName = _id.substring(0, _id.indexOf('-'));;

        //------------------Delete If Same Entry Exists------------------
        //
        ChangedImportData = jQuery.grep(ChangedImportData, function(x) {
            return (x.RowIndex.toString() + '_' + x.FieldName != Index.toString() + '_' + _FieldName);
        });

        //-----------------------Add Changed Entry-----------------------
        //
        var obj = new ChangedImportObject();
        obj.RowIndex = Index;
        obj.FieldName = _FieldName;
        obj.Value = _value;
        ChangedImportData.push(obj);
        //console.log(ChangedImportData);
    }

    function SaveImportClick()
    {
        if(CheckZipFile())
        {
            $('#btnSave').prop("disabled", "disabled");


            var _isImgZipAvail = false;


            if ($('#uploadZIPFile').val() != '' && $('#uploadZIPFile').val() != null)
            {
                _isImgZipAvail = true;
            }

            _MaxRowIndex = 0;
            _MaxPageSize = 100;
            $('#tBodyImportData').empty();
            $('#DivGridLoading').show();
            $.ajax({
                url: "/ImportLoadOnDemand/SaveImport",
                type: "POST",
                data: JSON.stringify({ TableName: tableName, lstImportDataChange: ChangedImportData, MaxRowIndex: _MaxRowIndex, MaxPageSize: _MaxPageSize, isImgZipAvail: _isImgZipAvail }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    //debugger;
                    if(data.savedOnlyitemIds != null){
                        if(savedOnlyitemIds.length > 0)
                            savedOnlyitemIds = savedOnlyitemIds + ',' + data.savedOnlyitemIds;
                        else
                            savedOnlyitemIds = data.savedOnlyitemIds;
                    }
                    IDs = savedOnlyitemIds;
                    if(data.ClearChangeObject)
                    {
                        ChangedImportData = [];
                    }

                    if(data.status == 'success')
                    {
                        alert('Data Imported Successfully');
                        $("input#uploadZIPFile").hide();
                        $('#tBodyImportData').empty();
                        $('#DivGridLoading').hide();
                        $('#tableRecord_info').text("Total 0 of 0");
                        $("select#ImportModule")[0].selectedIndex = 0;
                        $("select#ImportModule").attr('selected', true);
                    }
                    else
                    {
                        _IsAllDataLoaded = false;
                        if (data.lstDataPage != null && data.lstDataPage != undefined && data.lstDataPage.length > 0)
                        {
                            var successRecord = TotalRows - (data.lstDataPage.length);
                            alert(successRecord + ' Records are Successfully Imported.');
                            TotalRows = data.lstDataPage.length;
                            $('#tBodyImportData').append($('#importTemplate').tmpl(data.lstDataPage));
                            _MaxRowIndex = _MaxRowIndex + _MaxPageSize;
                            if(TotalRows <= _MaxRowIndex)
                                _IsAllDataLoaded = false;

                            $('#tableRecord_info').text("Total "+ data.lstDataPage.length +" of "+data.lstDataPage.length+"");

                            if(ChangedImportData != null && ChangedImportData != undefined)
                            {
                                for(var i = 0; i < ChangedImportData.length; i++)
                                {
                                    $('#' + ChangedImportData[i].FieldName + '-' + ChangedImportData[i].RowIndex)[0].value = ChangedImportData[i].Value;
                                }
                            }

                            $("input#uploadZIPFile").show();

                            setErrorcss();
                    
                        }
                        else
                        {
                            _IsAllDataLoaded = true;
                        }
                    }
                    $('#DivGridLoading').hide();
                    $('#btnSave').removeProp("disabled");
                },
                error: function () {
                    alert("Some Exception");
                    $('#DivGridLoading').hide();
                },
                complete: function () {
                    ////debugger;
                    if ($.trim($('#ImportModule option:selected').text()) == SupplierMasterselval) {
                        if ($('#uploadZIPFile').val() != '') {
                            uploadZIPFile(IDs);
                        }
                    }
                    $('#DivGridLoading').hide();
                }
            });
        }
    }


    function CheckZipFile(){
        ////debugger;
        if ($.trim($('#ImportModule option:selected').text()) == SupplierMasterselval) {
            var fileName = $("#uploadZIPFile").val();
            if (fileName == "") {
                return true;
            }
            var strfilename = fileName.split(".");
            if (strfilename[strfilename.length - 1].toUpperCase() == "ZIP")
                return true;
            else {
                alert("File with " + fileName + " isinvalid. Upload a validfile with zip extensions");
                $("#uploadZIPFile").val("");
                return false;
            }
        }
        return true;
    }

    function uploadZIPFile(IDs) {
        $("#loading")
    .ajaxStart(function () {
        $(this).show();
    })
    .ajaxComplete(function () {
        $(this).hide();
    });
        $.ajaxFileUpload
        (
            {
                url: '/api/fileupload/uploadZIPFILE',
                secureuri: false,
                type: "POST",
                data:{'ItemIDs':IDs,'TableName':'Suppliers'},
                fileElementId: 'uploadZIPFile',
                dataType: 'json',
                success: function (data, status) {
                    //window.location.reload();
                },
                error: function (xhr) {
                }
            }
        )
        return false;
    }

    function setErrorcss(){

        $('#tBodyImportData tr').css('background-color', 'pink');
        $('#tBodyImportData tr .ImportStatus').css('color','red');
        $('#tBodyImportData tr .ImportReason').css('color','red');
    }

</script>
<script id="importTemplate" type="text/x-jquery-tmpl">
    <tr class='odd importtext-box-tr BlankImportRow' style='background-color: rgb(239, 247, 255);height: 35px;'>
        @if (Model.DataTableColumns.Count() > 0)
        {
            <td class="read_only ImportStatus">
                ${Status}
            </td>
            <td class="read_only ImportReason">
                ${Reason}
            </td>
        }
        @if (Model.DataTableColumns.Contains("suppliername"))
        {
            <td class="read_only"><input id="SupplierName-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].SupplierName" value="${SupplierName}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("suppliercolor"))
        {
            <td class="read_only"><input id="SupplierColor-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].SupplierColor" value="${SupplierColor}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("description"))
        {
            <td class="read_only"><input id="Description-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].Description" value="${Description}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("branchnumber"))
        {
            <td class="read_only"><input id="BranchNumber-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].BranchNumber" value="${BranchNumber}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("maximumordersize"))
        {
            <td class="read_only"><input id="MaximumOrderSize-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].MaximumOrderSize" value="${MaximumOrderSize}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("address"))
        {
            <td class="read_only"><input id="Address-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].Address" value="${Address}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("city"))
        {
            <td class="read_only"><input id="City-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].City" value="${City}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("state"))
        {
            <td class="read_only"><input id="State-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].State" value="${State}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("zipcode"))
        {
            <td class="read_only"><input id="ZipCode-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].ZipCode" value="${ZipCode}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("country"))
        {
            <td class="read_only"><input id="Country-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].Country" value="${Country}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("contact"))
        {
            <td class="read_only"><input id="Contact-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].Contact" value="${Contact}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("phone"))
        {
            <td class="read_only"><input id="Phone-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].Phone" value="${Phone}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("fax"))
        {
            <td class="read_only"><input id="Fax-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].Fax" value="${Fax}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("issendtovendor"))
        {
            <td class="read_only"><input id="IsSendtoVendor-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].IsSendtoVendor" value="${IsSendtoVendor}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if IsSendtoVendor}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("isvendorreturnasn"))
        {
            <td class="read_only"><input id="IsVendorReturnAsn-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].IsVendorReturnAsn" value="${IsVendorReturnAsn}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if IsVendorReturnAsn}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("issupplierreceiveskitcomponents"))
        {
            <td class="read_only"><input id="IsSupplierReceivesKitComponents-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].IsSupplierReceivesKitComponents" value="${IsSupplierReceivesKitComponents}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if IsSupplierReceivesKitComponents}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("ordernumbertypeblank"))
        {
            <td class="read_only"><input id="OrderNumberTypeBlank-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].OrderNumberTypeBlank" value="${OrderNumberTypeBlank}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if OrderNumberTypeBlank}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("ordernumbertypefixed"))
        {
            <td class="read_only"><input id="OrderNumberTypeFixed-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].OrderNumberTypeFixed" value="${OrderNumberTypeFixed}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if OrderNumberTypeFixed}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("ordernumbertypeblanketordernumber"))
        {
            <td class="read_only"><input id="OrderNumberTypeBlanketOrderNumber-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].OrderNumberTypeBlanketOrderNumber" value="${OrderNumberTypeBlanketOrderNumber}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if OrderNumberTypeBlanketOrderNumber}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("ordernumbertypeincrementingordernumber"))
        {
            <td class="read_only"><input id="OrderNumberTypeIncrementingOrderNumber-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].OrderNumberTypeIncrementingOrderNumber" value="${OrderNumberTypeIncrementingOrderNumber}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if OrderNumberTypeIncrementingOrderNumber}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("ordernumbertypeincrementingbyday"))
        {
            <td class="read_only"><input id="OrderNumberTypeIncrementingbyDay-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].OrderNumberTypeIncrementingbyDay" value="${OrderNumberTypeIncrementingbyDay}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if OrderNumberTypeIncrementingbyDay}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("ordernumbertypedateincrementing"))
        {
            <td class="read_only"><input id="OrderNumberTypeDateIncrementing-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].OrderNumberTypeDateIncrementing" value="${OrderNumberTypeDateIncrementing}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if OrderNumberTypeDateIncrementing}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("ordernumbertypedate"))
        {
            <td class="read_only"><input id="OrderNumberTypeDate-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].OrderNumberTypeDate" value="${OrderNumberTypeDate}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if OrderNumberTypeDate}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }



        @if (Model.DataTableColumns.Contains("udf1"))
        {
            <td class="read_only"><input id="UDF1-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].UDF1" value="${UDF1}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf2"))
        {
            <td class="read_only"><input id="UDF2-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].UDF2" value="${UDF2}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf3"))
        {
            <td class="read_only"><input id="UDF3-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].UDF3" value="${UDF3}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf4"))
        {
            <td class="read_only"><input id="UDF4-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].UDF4" value="${UDF4}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("udf5"))
        {
            <td class="read_only"><input id="UDF5-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].UDF5" value="${UDF5}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }



        @if (Model.DataTableColumns.Contains("accountnumber"))
        {
            <td class="read_only"><input id="AccountNumber-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].AccountNumber" value="${AccountNumber}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("accountname"))
        {
            <td class="read_only"><input id="AccountName-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].AccountName" value="${AccountName}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("accountaddress"))
        {
            <td class="read_only"><input id="AccountAddress-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].AccountAddress" value="${AccountAddress}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("accountcity"))
        {
            <td class="read_only"><input id="AccountCity-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].AccountCity" value="${AccountCity}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("accountstate"))
        {
            <td class="read_only"><input id="AccountState-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].AccountState" value="${AccountState}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("accountzip"))
        {
            <td class="read_only"><input id="AccountZip-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].AccountZip" value="${AccountZip}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("accountisdefault"))
        {
            <td class="read_only"><input id="AccountIsDefault-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].AccountIsDefault" value="${AccountIsDefault}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if AccountIsDefault}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("blanketponumber"))
        {
            <td class="read_only"><input id="BlanketPONumber-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].BlanketPONumber" value="${BlanketPONumber}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("startdate"))
        {
            <td class="read_only"><input id="StartDateString-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].StartDateString" value="${StartDateString}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("enddate"))
        {
            <td class="read_only"><input id="EndDateString-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].EndDateString" value="${EndDateString}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
        @if (Model.DataTableColumns.Contains("maxlimit"))
        {
            <td class="read_only"><input id="MaxLimit-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].MaxLimit" value="${MaxLimit}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("donotexceed"))
        {
            <td class="read_only"><input id="IsNotExceed-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].IsNotExceed" value="${IsNotExceed}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if IsNotExceed}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("maxlimitqty"))
        {
            <td class="read_only"><input id="MaxLimitQty-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].MaxLimitQty" value="${MaxLimitQty}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("donotexceedqty"))
        {
            <td class="read_only"><input id="IsNotExceedQty-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].IsNotExceedQty" value="${IsNotExceedQty}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if IsNotExceedQty}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("pullpurchasenumberfixed"))
        {
            <td class="read_only"><input id="PullPurchaseNumberFixed-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].PullPurchaseNumberFixed" value="${PullPurchaseNumberFixed}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if PullPurchaseNumberFixed}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }


        @if (Model.DataTableColumns.Contains("pullpurchasenumberblanketorder"))
        {
            <td class="read_only"><input id="PullPurchaseNumberBlanketOrder-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].PullPurchaseNumberBlanketOrder" value="${PullPurchaseNumberBlanketOrder}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if PullPurchaseNumberBlanketOrder}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }


        @if (Model.DataTableColumns.Contains("pullpurchasenumberdateincrementing"))
        {
            <td class="read_only"><input id="PullPurchaseNumberDateIncrementing-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].PullPurchaseNumberDateIncrementing" value="${PullPurchaseNumberDateIncrementing}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if PullPurchaseNumberDateIncrementing}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }


        @if (Model.DataTableColumns.Contains("pullpurchasenumberdate"))
        {
            <td class="read_only"><input id="PullPurchaseNumberDate-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].PullPurchaseNumberDate" value="${PullPurchaseNumberDate}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if PullPurchaseNumberDate}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("lastpullpurchasenumberused"))
        {
            <td class="read_only"><input id="LastPullPurchaseNumberUsed-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].LastPullPurchaseNumberUsed" value="${LastPullPurchaseNumberUsed}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("isblanketdeleted"))
        {
            <td class="read_only"><input id="IsBlanketDeleted-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].IsBlanketDeleted" value="${IsBlanketDeleted}" onchange="OnImportDataChange(this, ${Index}, 'CHECKBOX')" type="checkbox" {{if IsBlanketDeleted}} checked="checked" {{/if}} class="importtext-box valid"></td>
        }

        @if (Model.DataTableColumns.Contains("supplierimage"))
        {
            <td class="read_only"><input id="SupplierImage-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].SupplierImage" value="${SupplierImage}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }

        @if (Model.DataTableColumns.Contains("imageexternalurl"))
        {
            <td class="read_only"><input id="ImageExternalURL-${Index}" name="objImportPageDTO.lstSupplierMasterImportData[${Index}].ImageExternalURL" value="${ImageExternalURL}" onchange="OnImportDataChange(this, ${Index}, 'TEXTBOX')" type="text" class="importtext-box"></td>
        }
    </tr>
</script>
}