@model eTurns.DTO.WorkOrderDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    Model.SignaturePath = "";
    string priceformate1 = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits.ToString();
    if (Model.IsSignatureCapture && !string.IsNullOrEmpty(Model.SignatureName))
    {
        Model.SignaturePath = Url.Content("~/Uploads/WorkOrderSignature/") + Model.CompanyID.ToString() + "/" + Model.SignatureName;
    }
    string CurrencySymbol = "";
    if (eTurnsWeb.Helper.SessionHelper.CurrencySymbol != null
        && !string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencySymbol))
    {
        CurrencySymbol = eTurnsWeb.Helper.SessionHelper.CurrencySymbol;
    }
}
@{
    bool isUpdate;
    bool isInsert;
    bool isInsertPull;
    bool onlyView = false;
    bool AllowCheckinCheckOut = true;
    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
        onlyView = true;
        isInsertPull = false;
        AllowCheckinCheckOut = false;
    }
    else
    {
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.WorkOrders, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.WorkOrders, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        isInsertPull = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.PullMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        AllowCheckinCheckOut = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowCheckInCheckout);
    }
    bool IsReportView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.View);

    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    //string WorkOrderFilePath = "/Uploads/WorkOrderFile";// Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["WorkOrderFilePaths"]);
    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));
    string UNCPathRootLink2 = eTurns.DTO.SiteSettingHelper.WorkOrderFilePaths; // Settinfile.Element("WorkOrderFilePaths").Value;


    Int64 EnterpriseId = eTurnsWeb.Helper.SessionHelper.EnterPriceID;
    Int64 CompanyID = eTurnsWeb.Helper.SessionHelper.CompanyID;
    Int64 RoomID = eTurnsWeb.Helper.SessionHelper.RoomID;
    UNCPathRootLink2 = UNCPathRootLink2.Replace("~", string.Empty);

    string WorkOrderFilePath = (UNCPathRootLink2 + EnterpriseId + "/" + CompanyID + "/" + RoomID);
    //---------------------------------Calculate Total---------------------------------
    //
    //string qtyFormat = "N";
    //if (!string.IsNullOrEmpty(eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits))
    //{
    //    qtyFormat = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits;
    //}

    int? PriseSelectionOption = 0;
    //double? TotalCost = 0;
    eTurns.DAL.RoomDAL onjRoomDAL = new eTurns.DAL.RoomDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    RoomModuleSettingsDTO objRoomModuleSettingsDTO = onjRoomDAL.GetRoomModuleSettings(eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.RoomID, (long)eTurnsWeb.Helper.SessionHelper.ModuleList.WorkOrders);
    if (objRoomModuleSettingsDTO != null)
    {
        PriseSelectionOption = objRoomModuleSettingsDTO.PriseSelectionOption;
    }

    if (PriseSelectionOption != 1 && PriseSelectionOption != 2)
    {
        PriseSelectionOption = 1;
    }

    //eTurns.DAL.WorkOrderDAL objWorkOrderDAL = new eTurns.DAL.WorkOrderDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    //TotalCost = objWorkOrderDAL.GetWorkOrderTotalCost(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, Model.GUID, (int)PriseSelectionOption);
}
<script src="@Url.Content("~/Scripts/ImagePreview.js")" type="text/javascript"></script>
@using (Ajax.BeginForm("SaveWO", "WorkOrder", new AjaxOptions { HttpMethod = "Post", OnSuccess = "onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onFailure" }, new { @id = "frmWOMaster" }))
{
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.ReceivedOnWebDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Updated)
                        </label>
                        : <span>@(Model.ReceivedOnDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                    @* <li style="border: none; text-align: right;"><a onclick="window.open('/Reports/Transaction/WorkOrder?Ids=@Model.ID','_blank')" href="javascript:void(null);">
                                <img src="../../Content/images/print.png" title="Print WorkOrder" /></a> <a onclick="callPrintTransaction('','WorkOrder',false,@Model.ID,'','');" href="javascript:void(null);">
                                    <img src="@Url.Content("~/Content/images/print.png")" title="Print WorkOrder" /></a>
                        </li>*@
                    @if (IsReportView)
                    {
                        <li style="border: none; text-align: right;">
                            <a onclick="ReportExecutionSingleRecord('WorkOrder','@Model.GUID');" href="javascript:void(null);">
                                <img src="@Url.Content("~/Content/images/print.png")" title="Print WorkOrder" />
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContent" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px; background: none">
                <div id="CollapsedContent" class="edtForm">
                    <ul>
                        <li style="border-right: none; padding: 0px; background: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.WOName)<em style="color: Red">*</em>
                            </label>
                            @if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL))
                            {
                                @Html.TextBoxFor(model => model.WOName, new { id = "txtWONAme", @class = "text-box", @style = "background:white", maxlength = 128, @autocomplete = "off" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.WOName, new { id = "txtWONAme", @class = "text-box", @style = "background:white", maxlength = 22, @autocomplete = "off" })
                            }

                            @*@Html.EditorFor(model => model.WOName)*@
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WOName)</span>
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.Updated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.Room)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.Technician)
                            @Html.HiddenFor(model => model.Customer)
                            @Html.HiddenFor(model => model.AssetName)
                            @Html.HiddenFor(model => model.ToolName)
                            @Html.HiddenFor(model => model.WOType)
                            @Html.HiddenFor(model => model.UsedItems)
                            @Html.HiddenFor(model => model.UsedItemsCost)
                            @Html.HiddenFor(model => model.UsedItemsSellPrice)
                            @Html.HiddenFor(model => model.SignatureName)
                            @Html.HiddenFor(model => model.IsSignatureCapture)
                            @Html.HiddenFor(model => model.IsSignatureRequired)

                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.WOStatus)
                            </label>
                            @if (Model.ID > 0)
                            {
                                @Html.DropDownListFor(model => model.WOStatus, new SelectList(ViewBag.WOStatusBag, "Value", "Text", Model.WOStatus), new { @class = "selectBox" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.WOStatus, new SelectList(ViewBag.WOStatusBag, "Value", "Text", Model.WOStatus), new { @class = "selectBox" })
                            }
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.CustomerGUID)
                            </label>
                            @Html.DropDownListFor(model => model.CustomerGUID, new SelectList((IEnumerable<eTurns.DTO.CustomerMasterDTO>)ViewBag.CustomerBAG, "GUID", "Customer", Model.CustomerGUID), string.Empty, new { @class = "selectBox" })
                            @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster,
eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                            {
                                <label>
                                    <a onclick="AddNewFromPopup('Customer');" id="btnAddNewCustomer" class="addNewLink">
                                        (@eTurns.DTO.Resources.ResCommon.AddNew)
                                    </a>
                                </label>
                            }
                        </li>
                        @if (Model != null && !string.IsNullOrWhiteSpace(Model.RequisitionNumber))
                        {
                            <li style="border-right: none;">
                                <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                    @Html.LabelFor(model => model.RequisitionNumber)
                                </label>
                                <span style="color: Black;">@Html.DisplayFor(model => model.RequisitionNumber)</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div id="ExpandedContent" style="display: none">
            <ul>
                <li style="border: none">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ReleaseNumber)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.ReleaseNumber, new { id = "txtReleaseNumber", @class = "text-box", @style = "background:white", maxlength = 255, @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.ReleaseNumber)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.AssetGUID)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.AssetGUID, new SelectList((IEnumerable<eTurns.DTO.AssetMasterDTO>)ViewBag.AssetBAG, "GUID", "AssetName", Model.AssetGUID), string.Empty, new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ToolGUID)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.ToolGUID, new SelectList((IEnumerable<eTurns.DTO.ToolMasterDTO>)ViewBag.ToolBAG, "GUID", "ToolName", Model.ToolGUID), string.Empty, new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Odometer_OperationHours)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.Odometer_OperationHours, "{0:0.00}", new { @class = "text-box numericinput", @name = "costdata" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.Odometer_OperationHours)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Description)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.Description, new { @class = "text-box", maxlength = 500 })
                                </div>
                            </li>
                            <li>
                                <div class="file-input-wrap editor-label">
                                    @ResWorkOrder.WorkOrderFilesLabel
                                </div>
                                <div class="editor-field">
                                    <input type="file" name="file" id="file" multiple>
                                    <table class="FileUploadList" style="width:43%;margin-left: 30%;margin-top: 12px;">
                                        <thead>
                                            <tr>
                                                <th style="width:98%;">
                                                    @ResToolMaster.FileName
                                                </th>

                                                <th style="width:2%;">
                                                    @ResToolMaster.Delete
                                                </th>
                                            </tr>
                                        </thead>

                                    </table>
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="editorForm padRightNone">
                        <ul>
                            <li style="border-right: none;">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.SupplierId)
                                </div>
                                <div class="editor-field">
                                    @if (Model.WOStatus != "Open")
                                    {
                                        @Html.DropDownListFor(model => model.SupplierId, new SelectList(ViewBag.SupplierList, "ID", "SupplierName", Model.SupplierId), new { @id = "ddlSupplier", @class = "selectBox", @style = "width:120px", @disabled = "disabled", autofocus = "autofocus" })
                                        @Html.HiddenFor(model => model.SupplierId)
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.SupplierId, new SelectList(ViewBag.SupplierList, "ID", "SupplierName", Model.SupplierId), new { @id = "ddlSupplier", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })
                                        <br />
                                        @Html.ValidationMessageFor(model => model.SupplierId)
                                    }
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.SupplierAccountGuid)
                                </div>
                                <div class="editor-field">
                                    @*@Html.DropDownListFor(model => model.SupplierAccountGuid, new SelectList(ViewBag.SupplierAccount, "GUID", "AccountNumnerMerge", Model.SupplierAccountGuid), new { @id = "ddlSupplierAccount", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })*@
                                    @if (Model.WOStatus != "Open" && (Model.SupplierAccountGuid == null || Model.SupplierAccountGuid == Guid.Empty))
                                    {
                                        @Html.DropDownListFor(model => model.SupplierAccountGuid, new SelectList(new List<eTurns.DTO.SupplierAccountDetailsDTO>(), "GUID", "AccountNumnerMerge", Model.SupplierAccountGuid), new { @id = "ddlSupplierAccount", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.SupplierAccountGuid, new SelectList(ViewBag.SupplierAccount, "GUID", "AccountNumnerMerge", Model.SupplierAccountGuid), new { @id = "ddlSupplierAccount", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })
                                    }
                                    @Html.HiddenFor(model => model.SupplierAccountGuid)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.TechnicianID)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.TechnicianID, new SelectList((IEnumerable<eTurns.DTO.TechnicianMasterDTO>)ViewBag.TechnicianBAG, "ID", "Technician", Model.TechnicianID), string.Empty, new { @class = "selectBox" })
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ProjectSpendName)
                                </div>
                                <div class="editor-field">
                                    <span style="color: Black;">@Html.DisplayFor(model => model.ProjectSpendName)</span>
                                </div>
                            </li>



                            @Html.Partial("UDFLayout", new eTurns.DTO.ResWorkOrder())
                        </ul>
                    </div>
                    @if (Model.IsSignatureCapture && !string.IsNullOrEmpty(Model.SignatureName) && !string.IsNullOrEmpty(Model.SignaturePath))
                    {
                        <div class="editorForm padRightNone">
                            <ul>
                                <li>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.SignatureName)
                                    </div>
                                    <div class="editor-field">
                                        <img src="@Model.SignaturePath" alt="WOSignature" id="imgSignature" style="border: 1px solid;" />
                                    </div>
                                </li>
                                @*@Html.Partial("UDFLayout", new eTurns.DTO.ResWorkOrder())*@
                            </ul>
                        </div>
                    }
                </li>
            </ul>
        </div>
        <div class="editorForm" style="width: 98%">
            <ul>
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        @if ((isInsert == true && Model.ID == 0) || (isUpdate == true && Model.ID > 0) || Convert.ToString(Session["IsInsert"]) == "True")
                        {
                            <input type="submit" onclick="return CheckDuplicateFile();" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (Model.ID > 0 && Model.WOStatus.ToLower() == "close")
                        {
                            <input type="button" value="@eTurns.DTO.ResWorkOrder.UncloseWO" id="btnUncloseWO" class="CreateBtn" />
                            <script type="text/javascript">
                                disableControls('frmWOMaster');
                                $("input[type='button'][id='btnUncloseWO']").removeAttr('disabled');
                            </script>

                        }
                        else //if (isUpdate == false && isInsert == false)
                        {
                            <script type="text/javascript">
                                disableControls('frmWOMaster');
                            </script>
                        }
                    </div>
                </li>
                <li>
                    <div class="BtnBlockform">
                        @if (Model.ID > 0)
                        {
                            if (isUpdate == true || Convert.ToString(Session["IsInsert"]) == "True")
                            {
                                if (isInsertPull == true)
                                {
                                    <input type="button" value="@ResCommon.NewItem" id="btnAddNewItemps" class="CreateBtn" style="float: left; margin-left: 20px;" />
                                }
                                if (AllowCheckinCheckOut == true)
                                {
                                    <input type="button" value="@ResToolMaster.NewTool" id="btnAddNewTools" class="CreateBtn" style="float: left; margin-left: 20px;" />
                                }
                            }
                        }
                    </div>
                </li>
            </ul>
        </div>
        @if (Model.UsedItems.GetValueOrDefault(0) > 0)
        {
            <div class="infoBlock" style="margin-bottom: 10px; margin-top: 10px;">
                <ul>
                    <li style="width: auto;">
                        <label for="RoomName">
                            <label>@eTurns.DTO.ResWorkOrder.UsedItems</label>
                        </label>
                        : <span>@(Model.UsedItems)</span>
                    </li>
                    @*<li style="border: none; width: auto;display:none">
                            <label for="RoomName">
                                <label>@eTurns.DTO.ResWorkOrder.UsedItemsCost</label>
                            </label>
                            : <span id="spnTotalCost">$ @(Model.UsedItemsCost)</span>
                        </li>*@
                    @if (isCost)
                    {
                        <li style="border: none; width: auto;">
                            <label for="RoomName">
                                @if (PriseSelectionOption == 1)
                                {
                                <label>@ResQuoteMaster.TotalSellPrice</label>
                                }
                                else
                                {
                                    <label>@ResQuoteMaster.TotalCost</label>
                                }
                            </label>
                                 : 
                                @if (PriseSelectionOption == 1)
                                {
                                    <span id="spnTotalCost">@CurrencySymbol @(Model.UsedItemsCost.GetValueOrDefault(0).ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture))</span>
                                }
                                else
                                {
                                    <span id="spnTotalCost">@CurrencySymbol @(Model.UsedItemsSellPrice.ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture))</span>
                                }
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
    <style type="text/css">
        .dataTables_scrollBody {
            max-height: 400px;
            overflow-y: scroll;
        }
    </style>
    <div id="WOLineItems">
    </div>
}
<div id="ItemModelTemp">
</div>
<div id="divToolModel">
</div>
<div class="dialog" id="basic-modal-content-Requisition" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.RequisitionApproveWithZero
        </p>
        <a href="JavaScript:void{}" id="btnModelYesRequisition" class="yes">
            <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="#" class="no" onclick="closeModalRequisition()">
            <img src="~/Content/images/no.png" alt="@eTurns.DTO.Resources.ResCommon.No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
@Html.Partial("_RequiredMessages")
<script type="text/javascript">

    var itemTitle = '@(eTurns.DTO.ResWorkOrder.ModelHeader)';
    var toolTitle = '@(eTurns.DTO.ResWorkOrder.ToolModelHeader)';//'Add Tools to Work Order';
    var WorkOrderType = '@eTurns.DTO.Resources.ResNarrowSearch.WorkOrderType';
    var CustomerNS = '@eTurns.DTO.Resources.ResNarrowSearch.Customer';
    var AssetNS = '@eTurns.DTO.Resources.ResNarrowSearch.Asset';
    var ToolNS = '@eTurns.DTO.Resources.ResNarrowSearch.Tool';

    var EditWOID = 0;
    var DeleteWoFileId = '';
    $("form").submit(function (e) {

        $(':input', '#frmWOMaster')
            .removeAttr('disabled');
        $.validator.unobtrusive.parse("#frmWOMaster");
        if ($(this).valid()) {
            rememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        }
        e.preventDefault();
    });
    function CheckDuplicateFile() {
        var liText = '';
        var isDuplica = false;
        $("table.FileUploadList tbody tr").each(function () {

            var text = '';
            if ($(this).find("td:first").find("a").length > 0) {
                text = $(this).find("td:first").find("a").text();
            }
            else {
                text = $(this).find("td:first").html();
            }
            if (liText.indexOf('|' + text + '|') == -1) {
                liText += '|' + text + '|';
            }
            else {
                alert("Please remove duplicate file name");
                isDuplica = true;
            }
        });
        if (isDuplica) {
            return false;
        }
        $('#myDataTable').dataTable().fnFilter('', null, null, null);
    }


    $(document).ready(function () {
        //if ($("#UsedItemsCost").val() != "") {
        //    var UsedItemsCost = parseFloat($("#UsedItemsCost").val());
        //    if (UsedItemsCost < 0) {
        //        UsedItemsCost = 0;
        //        $("#UsedItemsCost").val(UsedItemsCost);
        //    }
        //}

        $("#ItemModelTemp").dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '95%',
            height: 710,
            title: itemTitle,
            open: function () {
                $('span#ui-dialog-title-ItemModelTemp').text(itemTitle + ' - ' + $('#txtWONAme').val());
                //$('#DivLoading').show();
                //$(this).css("top", "-1247");
            },
            close: function () {
                //CallThisFunctionFromModel('success');

                $(this).empty();
                $("div#ItemModelTemp").empty();
                $('#btnAddNewItemps, #btnAddNewTools').removeAttr('disabled');
                ReDirectData();
            }
        });

        $('div#divToolModel').dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '95%',
            height: 710,
            title: toolTitle,
            open: function () {
                $('span#ui-dialog-title-divToolModel').text(toolTitle + ' - ' + $('#txtWONAme').val());
            },
            close: function () {
                $(this).empty();
                $("div#divToolModel").empty();
                $('#btnAddNewItemps, #btnAddNewTools').removeAttr('disabled');
                ReDirectData();
            }
        });

        //$("span#spnTotalCost").text("$ " + FormatedCostQtyValues($("span#spnTotalCost").text().toString().replace("$ ", ""), 1));
        $('form').areYouSure({ 'message': 'You have unsaved changes.  Do you want to leave this page and lose your changes?' });
        var IsFirstTime = true;

        $(".text-boxPriceFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
        });
        $(".text-boxQuantityFormat").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
        });

        $(".odometer").priceFormat({
            prefix: '',
            thousandsSeparator: '',
            centsLimit: 2
        });


        $('#btnClose').click(function () {
            $(".ui-dialog-titlebar-close").click();
        });

        if (parseInt('@Model.ID', 10) <= 0) {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent').css('display', 'none');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent').css('display', '');
        }


        $('#btnCancel').click(function (e) {
            if ('@Model.IsHistory' != 'True') {

                SwitchTextTab(0, 'WOCreate', 'frmWOMaster');
                if (oTable !== undefined && oTable != null) {
                    oTable.fnDraw();
                }
                CallWONarrowFunctions();
                $(".tab5").hide();
            }
            else {
                $(".ui-dialog-titlebar-close").click();

            }
            $('#myDataTable').dataTable().fnFilter('', null, null, null);
        });
        checkRememberUDFValues($("#hdnPageName").val(), '@Model.ID');
        $('#WOLineItems').empty();

        if ('@Model.ID' > 0) {
            if ('@Model.IsHistory' != 'True') {
                $('#WOLineItems').load('@Url.Action("LoadWOItems", new { WorkOrderGUID = @Model.GUID })', function () {
                    $('#DivLoading').show();
                });
                $.ajax({
                    url: "GetWorkOrderFiles",
                    type: 'post',
                    data: { 'WorkOrderGuid': '@Model.GUID' },
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        var Li = '';
                        $.each(data.DDData, function (i, val) {
                            Li += "<tr id='" + val + "' uploaded='true'>";
                            Li += "<td style='width:98%;text-align:left;'><a class='preview' href='" + '@WorkOrderFilePath' + "/" + '@Model.ID' + "/" + i + "' target='_blank'>" + i + "</a></td><td style='width:2%'><a href='javascript:;' onclick='DeleteExistingFile(\"" + val + "\");'><img src='/content/images/delete.png' /></a></td>";
                            Li += "</tr>";
                        });
                        $("table.FileUploadList").append(Li);

                        // starting the script on page load

                        imagePreview();

                        $("table.FileUploadList").dataTable({ "bPaginate": false, "bInfo": false });
                    },
                    error: function (request) {
                        console.log(request.responseText);
                    }
                });
                //// need to call below block in case of New Item saved and open POPUP Item ... START

                if (NeedToOpenItemPopupNow) {
                    NeedToOpenItemPopupNow = false;
                    setTimeout("OpenItemPopup()", 3000);
                    return false;
                }
                //// need to call below block in case of New Item saved and open POPUP Item ... END
            }
            else {
                var action = '@Url.Action("LoadWOItems", new { WorkOrderGUID = @Model.GUID })';
                var IsHistory = true;
                action += '&IsHistory=' + IsHistory;
                $('#WOLineItems').load(action, function () {
                });
                $("table.FileUploadList").dataTable({ "bPaginate": false, "bInfo": false });
            }
        }
        else {
            $("table.FileUploadList").dataTable({ "bPaginate": false, "bInfo": false });
        }
        //$('#DivLoading').hide();

        if ('@Model.IsHistory' == 'True') {
            $(':input', '#frmWOMaster').not('#btnClose').attr('disabled', 'disabled');
        }
    });
    $('#btnAddNewItemps').click(function () {
        if ('@isInsertPull' == '@Boolean.TrueString') {
            return OpenItemPopup();
        }
        else {
            alert('@eTurns.DTO.Resources.ResMessage.DoNotPullInsertRights');
        }

    });


    $('#btnUncloseWO').on('click', function () {
        var WOguid = '@(Model.GUID)';
        $.ajax({
            url: 'UncloseWorkOrder',
            type: 'Post',
            data: { 'WOGUID': WOguid },
            dataType: 'json',
            success: function (response) {

                if (response.Status == "ok") {
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    $("#spanGlobalMessage").html(response.Message);
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    clearControls('frmWOMaster');
                    oTable.fnDraw();
                    SwitchTextTab(0, 'WOCreate', 'frmWOMaster');
                }
                else {
                    $('div#target').fadeToggle();
                    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                    $("#spanGlobalMessage").html(response.Message);
                    $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                }
            },
            error: function (response) {
                $('div#target').fadeToggle();
                $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                $("#spanGlobalMessage").html(response.Message);
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            }
        });
    });

    $(".text-boxPriceFormat").priceFormat({
        prefix: '',
        thousandsSeparator: '',
        centsLimit: parseInt($('#hdCostcentsLimit').val(), 10)
    });
    $(".text-boxQuantityFormat").priceFormat({
        prefix: '',
        thousandsSeparator: '',
        centsLimit: parseInt($('#hdQuantitycentsLimit').val(), 10)
    });

    $('.selectBox').change(function () {
        var ID = this.id;
        if (ID == "CustomerGUID")
            $("#Customer").val($("#" + ID + " option:selected").text());
        else if (ID == "TechnicianID")
            $("#Technician").val($("#" + ID + " option:selected").text());
        else if (ID == "AssetGUID")
            $("#Asset").val($("#" + ID + " option:selected").text());
        else if (ID == "ToolGUID")
            $("#Tool").val($("#" + ID + " option:selected").text());
    });

    $('#ancHideShowContent').click(function () {
        if ($('#ExpandedContent').css('display') == 'none') {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_close.jpg');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent img').attr('src', '/Content/images/drildown_open.jpg');
        }
    });


    function OpenItemPopup() {

        if ('@isInsertPull' != '@Boolean.TrueString') {
            alert("@eTurns.DTO.Resources.ResMessage.DoNotPullInsertRights");
            return false;
        }
        else if (parseInt('@Model.ID', 10) > 0) {
            ClearVariables();
            var strUrl = '@Url.Action("LoadItemMasterModel")';
            strUrl = strUrl + '?ParentId=' + '@Model.ID';
            strUrl = strUrl + '&ParentGuid=' + '@Model.GUID.ToString()';

            $('#divReorderPopup').find('#hdnReOrderExecuteFunctionString').val('OpenItemPopup()');
            $('#ItemModelTemp').load(strUrl, new function () {
                $('#ItemModelTemp').dialog('open').dialog("moveToTop");
                //style = "top:0;left:0;right:0;bottom:0"
            });
            if ($("input#global_filter").length > 0) {
                $("input#global_filter").focus();
                setTimeout(function () {
                    $("input#global_filter").focus();
                }, 600);
            }
            if ($("input.searchinput").length > 0) {
                $("input.searchinput").focus();
                setTimeout(function () {
                    $("input.searchinput").focus();
                }, 600);

            }
        }
        //return false;
    }

    function onSuccess(response) {
        IsRefreshGrid = true;
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();
        if (response.Status == "fail") {

            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#RequisitionNumber").val("");
            $("#RequisitionNumber").focus();
        }
        else if (idValue == 0) {
            $("#RequisitionNumber").val("");
            $("#RequisitionNumber").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                //clearControls('frmWOMaster');
                if ('@isInsertPull' == '@Boolean.TrueString') {
                    NeedToOpenItemPopupNow = true;
                }
                else {
                    NeedToOpenItemPopupNow = false;
                    $("#spanGlobalMessage").html("@eTurns.DTO.Resources.ResMessage.DoNotPullInsertRights");
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                }
                setDefaultUDFValues($("#hdnPageName").val(), '@Model.ID');
                if (DeleteWoFileId != '') {
                    DeleteExistingFiles(DeleteWoFileId, response.GUID);
                }
                CallWONarrowFunctions();
                SaveWorkOrderImage(response.ID, response.GUID);
                ShowEditTabGUID("WOEdit?WorkOrderGUID=" + response.GUID, "frmWOMaster");

            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#RequisitionNumber").val("");
                $("#RequisitionNumber").focus();
            }
            else {
                if (DeleteWoFileId != '') {
                    DeleteExistingFiles(DeleteWoFileId, response.GUID);
                }
                //IsRejectTheRequisition();
                CallWONarrowFunctions();
                SaveWorkOrderImage(response.ID, response.GUID);
                clearControls('frmWOMaster');
                SwitchTextTab(0, 'WOCreate', 'frmWOMaster');
            }
        }
    }
    function onFailure(message) {

        $("#spanGlobalMessage").html(message.statusText);
        $('div#target').fadeToggle();
        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
        $("#WOName").focus();
    }

    function closeModalRequisitionApprove() {
        $.modal.impl.close();
        return false;
    }


    function closeModalRequisition() {
        $.modal.impl.close();
        clearControls('frmWOMaster');
        SwitchTextTab(0, 'WOCreate', 'frmWOMaster');
    }
</script>
<script type="text/javascript">
    // Assuming that the div or any other HTML element has the ID = loading and it contains the necessary loading image.
    $('#DivLoading').hide();  //initially hide the loading icon

    $('#DivLoading').ajaxStart(function () {
        $(this).show();
    });
    $("#DivLoading").ajaxStop(function () {
        $(this).hide();
    });
</script>
<div id="NewMasterPopUP">
</div>
<script type="text/javascript">
    var formData = new FormData();
    $("#NewMasterPopUP").dialog({
        autoOpen: false,
        show: "blind",
        hide: "explode",
        height: 600,
        width: 800,
        modal: true,
        open: function () {
            $(this).parent().find("span.ui-dialog-title").html("Add New " + $(this).data("data"));
        },
        close: function () {
            $('#DivLoading').show();
            RefreshDropdownList($(this).data("data"), $(this).data("IDVal"));
            $(this).data("data", null);
            $(this).data("IDVal", null);
            $(this).parent().find("span.ui-dialog-title").html('');
        }
    });
    function AddNewFromPopup(PopupFor) {
        $('#DivLoading').show();
        var _URL = ''
        if (PopupFor == 'Customer') {
            _URL = '@Url.Action("../Master/CustomerMasterCreate")';
        }
        else {
            return false;
        }
        $('#NewMasterPopUP').load(_URL, function () {
            $('#NewMasterPopUP').data("data", PopupFor).dialog('open');
            $('#DivLoading').hide();
        });
    }
    function RefreshDropdownList(PopupFor, IDVal) {
        if (IDVal != undefined) {
            var _ControlID = '';
            if (PopupFor == 'Customer') {
                _ControlID = "CustomerGUID";
            }
            var arrdata = IDVal.split("~");
            var listData = $('select[id*="' + _ControlID + '"]');
            $(listData).each(function () {
                $(this).append($("<option />").val(arrdata[0]).text(arrdata[1]));
            });
            var foption = $('select[id*="' + _ControlID + '"] option:first');
            var soptions = $('select[id*="' + _ControlID + '"] option:not(:first)').sort(function (a, b) {
                return a.text == b.text ? 0 : a.text < b.text ? -1 : 1
            });
            $(listData).html(soptions).prepend(foption);
        }
        $('#DivLoading').hide();
    }
    $(function () {
        // grab the file input and bind a change event onto it
        $('#file').bind("change", function () {
            // new html5 formdata object.
            //$("ul.FileUploadList").empty();
            $("table.FileUploadList tr td.dataTables_empty").remove();
            var Li = '';
            for (var i = 0, len = document.getElementById('file').files.length, avalbleimg = $("table.FileUploadList tr").length  ; i < len; i++, avalbleimg++) {
                var localdate = moment.utc().format('YYYY_MM_DD_HH_mm_ss');
                localdate += localdate + avalbleimg;
                Li += "<tr id=" + localdate + "  uploaded='false'>";
                Li += "<td style='width:98%;text-align:left;'>" + document.getElementById('file').files[i].name + "</td><td style='width:2%'><a href='javascript:;' onclick='DeleteCurrentFile(\"" + localdate + "\");'><img src='/content/images/delete.png' /></a></td>";
                Li += "</tr>";
                formData.append("file" + localdate, document.getElementById('file').files[i]);
            }

            $("table.FileUploadList").append(Li);
            //$("table.FileUploadList").fnDestroy();
            $("table.FileUploadList").dataTable();
        });
    });
    function DeleteCurrentFile(currentPos) {
        formData.delete("file" + currentPos);
        $("table.FileUploadList tr#" + currentPos + "").remove();
        //        $("table.FileUploadList").fnDestroy();
        $("table.FileUploadList").dataTable();
        //SaveWorkOrderImage();
    }
    function SaveWorkOrderImage(Id, Guid) {
        var IdGuid = Id + "$" + Guid;

        if ($("table.FileUploadList tr[uploaded='false']").length > 0) {

            //send formdata to server-side
            $.ajax({
                url: "/api/fileupload/WorkOrderFileUpload/" + Id,
                type: 'post',
                data: formData,
                dataType: 'html', // we return html from our php file
                async: true,
                processData: false,  // tell jQuery not to process the data
                contentType: false,   // tell jQuery not to set contentType
                success: function (data) {
                    //$('#upload-result').append('<div class="alert alert-success"><p>File(s) uploaded successfully!</p><br />');
                    //$('#upload-result .alert').append(data);
                },
                error: function (request) {
                    console.log(request.responseText);
                }
            });
        }
    }
    function DeleteExistingFile(FileId) {
        $("table.FileUploadList tr#" + FileId + "").remove();
        if (DeleteWoFileId != '') {
            DeleteWoFileId += ',' + FileId;
        }
        else {
            DeleteWoFileId = FileId;
        }
    }
    function DeleteExistingFiles(FileId, WorkOrderGuid) {
        $.ajax({
            url: 'DeleteExistingFiles',
            type: 'Post',
            data: { 'FileId': FileId, 'WorkOrderGuid': WorkOrderGuid },
            dataType: 'json',
            success: function (response) {
            }
        });
    }
    $('#ddlSupplier').change(function () {
        if (!isNaN(parseInt($(this).val())) && parseInt($(this).val()) > 0) {
            $('#DivLoading').show();

            $('#ddlSupplierAccount').empty();
            $('#ddlSupplierAccount').html('');
            if ($("select#ddlSupplier").val() != '' && $("select#ddlSupplier").val() != null && $("select#ddlSupplier").val() != undefined) {
                $.ajax({
                    url: "/Order/ShowData",
                    data: { "SupplierID": $("select#ddlSupplier").val() },
                    type: "Get",
                    success: function (data) {
                        var opt = new Option("Please Select", "");
                        $('#ddlSupplierAccount').append(opt);
                        for (var i = 0; i < data.length; i++) {
                            var opt = new Option(data[i].AccountNumnerMerge, data[i].GUID);
                            $('#ddlSupplierAccount').append(opt);

                        }
                        $('#ddlSupplierAccount').val('@Model.SupplierAccountGuid');
                        $('#DivLoading').hide();
                    }, error: function () {
                        $('#DivLoading').hide();
                    }
                });


            }
        }
    });
    if ('@(Model.WOStatus)' != "Open" && ('@Model.SupplierAccountGuid' == '' || '@Model.SupplierAccountGuid' == '00000000-0000-0000-0000-000000000000')) {
        $('#ddlSupplierAccount').empty();
        $('#ddlSupplierAccount').html('');
    }
    else {
        $('#ddlSupplierAccount').empty();
        $('#ddlSupplierAccount').html('');
        if ($("select#ddlSupplier").val() != '' && $("select#ddlSupplier").val() != null && $("select#ddlSupplier").val() != undefined) {
            $.ajax({
                url: "/Order/ShowData",
                data: { "SupplierID": $("select#ddlSupplier").val() },
                type: "Get",
                success: function (data) {
                    var opt = new Option("Please Select", "");
                    $('#ddlSupplierAccount').append(opt);
                    for (var i = 0; i < data.length; i++) {
                        var opt = new Option(data[i].AccountNumnerMerge, data[i].GUID);
                        $('#ddlSupplierAccount').append(opt);

                    }
                    $('#ddlSupplierAccount').val('@Model.SupplierAccountGuid');
                    if (('@Model.SupplierAccountGuid' == '' || '@Model.SupplierAccountGuid' == '00000000-0000-0000-0000-000000000000') && '@Model.ID' == 0) {

                        $.ajax({
                            url: "/Order/GetDefaultAccount",
                            data: { "SupplierID": $("select#ddlSupplier").val() },
                            type: "Get",
                            success: function (data) {
                                $('#ddlSupplierAccount').val(data);

                            }
                        });
                    }
                }
            });
        }
    }

    // ************ Tool Popup ********************//
    $('input#btnAddNewTools').on('click', function () {
        OpenToolPopup();
    });
    function OpenToolPopup() {
        if (parseInt('@Model.ID', 10) > 0) {
            ClearVariables();
            var strUrl = '@Url.Action("LoadToolsOnModel")';
            strUrl = strUrl + '?ParentGuid=' + '@Model.GUID';
            $('#divToolModel').load(strUrl, new function () {
                $('#divToolModel').dialog('open');
            })
        }
    }
</script>
<style>
    p {
        clear: both;
        margin: 0;
        padding: .5em 0;
    }

    pre {
        display: block;
        font: 100% "Courier New", Courier, monospace;
        padding: 10px;
        border: 1px solid #bae2f0;
        background: #e3f4f9;
        margin: .5em 0;
        overflow: auto;
        width: 800px;
    }

    img {
        border: none;
    }



    /*  */

    #preview {
        position: absolute;
        border: 1px solid #ccc;
        background: #333;
        padding: 5px;
        display: none;
        color: #fff;
    }
</style>