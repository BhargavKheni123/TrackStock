@model eTurnsWeb.Models.WorkOrderModel 
    @*eTurns.DTO.WorkOrderDTO*@
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    Model.WorkOrderDTO.SignaturePath = "";
    string priceformate1 = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits.ToString();
    if (Model.WorkOrderDTO.IsSignatureCapture && !string.IsNullOrEmpty(Model.WorkOrderDTO.SignatureName) && !string.IsNullOrWhiteSpace(Model.WorkOrderDTO.SignatureName))
    {
        Model.WorkOrderDTO.SignaturePath = Url.Content("~/Uploads/WorkOrderSignature/") + Model.WorkOrderDTO.CompanyID.ToString() + "/" + Model.WorkOrderDTO.SignatureName;
    }
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    string CurrencySymbol = "";
    if (eTurnsWeb.Helper.SessionHelper.CurrencySymbol != null
        && !string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencySymbol))
    {
        CurrencySymbol = eTurnsWeb.Helper.SessionHelper.CurrencySymbol;
    }
}
@{
    bool isUpdate;
    bool isInsert;
    bool isInsertPull;
    bool onlyView = false;
    bool AllowCheckinCheckOut = true;
    if (ViewBag.ViewOnly == true)
    {
        isUpdate = false;
        isInsert = false;
        onlyView = true;
        isInsertPull = false;
        AllowCheckinCheckOut = false;
    }
    else
    {
        isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.WorkOrders, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
        isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.WorkOrders, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        isInsertPull = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.PullMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
        AllowCheckinCheckOut = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowCheckInCheckout);
    }
    bool IsReportView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.View);

    bool isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    //string WorkOrderFilePath = "/Uploads/WorkOrderFile";// Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["WorkOrderFilePaths"]);
    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));
    string UNCPathRootLink2 = eTurns.DTO.SiteSettingHelper.WorkOrderFilePaths; // Settinfile.Element("WorkOrderFilePaths").Value;
    string WorkOrderAllowedFileExtension = eTurns.DTO.SiteSettingHelper.WorkOrderAllowedFileExtension; // Settinfile.Element("WorkOrderAllowedFileExtension").Value;


    Int64 EnterpriseId = eTurnsWeb.Helper.SessionHelper.EnterPriceID;
    Int64 CompanyID = eTurnsWeb.Helper.SessionHelper.CompanyID;
    Int64 RoomID = eTurnsWeb.Helper.SessionHelper.RoomID;
    UNCPathRootLink2 = UNCPathRootLink2.Replace("~", string.Empty);

    string WorkOrderFilePath = (UNCPathRootLink2 + EnterpriseId + "/" + CompanyID + "/" + RoomID);
    //---------------------------------Calculate Total---------------------------------
    //
    //string qtyFormat = "N";
    //if (!string.IsNullOrEmpty(eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits))
    //{
    //    qtyFormat = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits;
    //}

    int? PriseSelectionOption = 0;
    //double? TotalCost = 0;
    eTurns.DAL.RoomDAL onjRoomDAL = new eTurns.DAL.RoomDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    RoomModuleSettingsDTO objRoomModuleSettingsDTO = onjRoomDAL.GetRoomModuleSettings(eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.RoomID, (long)eTurnsWeb.Helper.SessionHelper.ModuleList.WorkOrders);
    if (objRoomModuleSettingsDTO != null)
    {
        PriseSelectionOption = objRoomModuleSettingsDTO.PriseSelectionOption;
    }

    if (PriseSelectionOption != 1 && PriseSelectionOption != 2)
    {
        PriseSelectionOption = 1;
    }

    //eTurns.DAL.WorkOrderDAL objWorkOrderDAL = new eTurns.DAL.WorkOrderDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    //TotalCost = objWorkOrderDAL.GetWorkOrderTotalCost(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, Model.WorkOrderDTO.GUID, (int)PriseSelectionOption);
}
<script type='text/javascript' src="@Url.Content("~/Scripts/ajaxfileupload.js?v=" + version)"></script>
<script src="@Url.Content("~/Scripts/ImagePreview.js")" type="text/javascript"></script>
@using (Ajax.BeginForm("SaveWONew", "WorkOrder", new AjaxOptions { HttpMethod = "Post", OnSuccess = "_CreateWO.onSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "_CreateWO.onFailure" }, new { @id = "frmWOMaster" }))
{
    //Form Start
    @Html.AntiForgeryToken()
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.WorkOrderDTO.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.WorkOrderDTO.RoomName)
                        </label>
                        : <span>@(Model.WorkOrderDTO.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.WorkOrderDTO.Created)
                        </label>
                        : <span>@(Model.WorkOrderDTO.ReceivedOnWebDate)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.WorkOrderDTO.CreatedByName)
                        </label>
                        : <span>@(Model.WorkOrderDTO.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.WorkOrderDTO.Updated)
                        </label>
                        : <span>@(Model.WorkOrderDTO.ReceivedOnDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.WorkOrderDTO.UpdatedByName)
                        </label>
                        : <span>@(Model.WorkOrderDTO.UpdatedByName)</span>
                    </li>
                    @* <li style="border: none; text-align: right;"><a onclick="window.open('/Reports/Transaction/WorkOrder?Ids=@Model.WorkOrderDTO.ID','_blank')" href="javascript:void(null);">
                                <img src="../../Content/images/print.png" title="Print WorkOrder" /></a> <a onclick="callPrintTransaction('','WorkOrder',false,@Model.WorkOrderDTO.ID,'','');" href="javascript:void(null);">
                                    <img src="@Url.Content("~/Content/images/print.png")" title="Print WorkOrder" /></a>
                        </li>*@
                    @if (IsReportView && (Model.WorkOrderDTO.IsDeleted ?? false) == false && (Model.WorkOrderDTO.IsArchived ?? false) == false)
                    {
                        <li style="border: none; text-align: right;">
                            <a onclick="ReportExecutionSingleRecord('WorkOrder','@Model.WorkOrderDTO.GUID');" href="javascript:void(null);">
                                <img src="@Url.Content("~/Content/images/print.png")" title="@ResWorkOrder.PrintWorkOrder" />
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContent" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px; background: none">
                <div id="CollapsedContent" class="edtForm">
                    <ul>
                        <li style="border-right: none; padding: 0px; background: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.WorkOrderDTO.WOName)<em style="color: Red">*</em>
                            </label>
                            @if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL))
                            {
                                @Html.TextBoxFor(model => model.WorkOrderDTO.WOName, new { id = "txtWONAme", @class = "text-box", @style = "background:white", maxlength = 22, @autocomplete = "off" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.WorkOrderDTO.WOName, new { id = "txtWONAme", @class = "text-box", @style = "background:white", maxlength = 22, @autocomplete = "off" })
                            }

                            @*@Html.EditorFor(model => model.WorkOrderDTO.WOName)*@
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.WOName)</span>
                            @Html.HiddenFor(model => model.WorkOrderDTO.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.WorkOrderDTO.GUID)
                            @Html.HiddenFor(model => model.WorkOrderDTO.Created)
                            @Html.HiddenFor(model => model.WorkOrderDTO.Updated)
                            @Html.HiddenFor(model => model.WorkOrderDTO.CreatedBy)
                            @Html.HiddenFor(model => model.WorkOrderDTO.LastUpdatedBy)
                            @Html.HiddenFor(model => model.WorkOrderDTO.Room)
                            @Html.HiddenFor(model => model.WorkOrderDTO.RoomName)
                            @Html.HiddenFor(model => model.WorkOrderDTO.CompanyID)
                            @Html.HiddenFor(model => model.WorkOrderDTO.CreatedByName)
                            @Html.HiddenFor(model => model.WorkOrderDTO.UpdatedByName)
                            @Html.HiddenFor(model => model.WorkOrderDTO.IsDeleted)
                            @Html.HiddenFor(model => model.WorkOrderDTO.IsArchived)
                            @Html.HiddenFor(model => model.WorkOrderDTO.Technician)
                            @Html.HiddenFor(model => model.WorkOrderDTO.Customer)
                            @Html.HiddenFor(model => model.WorkOrderDTO.AssetName)
                            @Html.HiddenFor(model => model.WorkOrderDTO.ToolName)
                            @Html.HiddenFor(model => model.WorkOrderDTO.WOType)
                            @Html.HiddenFor(model => model.WorkOrderDTO.UsedItems)
                            @Html.HiddenFor(model => model.WorkOrderDTO.UsedItemsCost)
                            @Html.HiddenFor(model => model.WorkOrderDTO.UsedItemsSellPrice)
                            @Html.HiddenFor(model => model.WorkOrderDTO.SignatureName)
                            @Html.HiddenFor(model => model.WorkOrderDTO.IsSignatureCapture)
                            @Html.HiddenFor(model => model.WorkOrderDTO.IsSignatureRequired)

                        </li>
                        <li style="border-right: none;" class="editor-label">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.WorkOrderDTO.WOStatus)
                            </label>
                            @if (Model.WorkOrderDTO.ID > 0)
                            {
                                if (onlyView == false)
                                {
                                    @Html.DropDownListFor(model => model.WorkOrderDTO.WOStatus, new SelectList(Model.WOStatusBag, "Value", "Text", Model.WorkOrderDTO.WOStatus), new { @class = "selectBox" })
                                }
                                else
                                {
                                    if (Model.WorkOrderDTO.WOStatus.ToString() == "Open")
                                    {
                                        @ResCommon.Open
                                    }
                                    else
                                    {
                                        @ResWorkOrder.Closed
                                    }
                                }
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.WorkOrderDTO.WOStatus, new SelectList(Model.WOStatusBag, "Value", "Text", Model.WorkOrderDTO.WOStatus), new { @class = "selectBox" })
                            }
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.WOStatus)</span>
                        </li>
                        <li style="border-right: none;" class="editor-label">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                @Html.LabelFor(model => model.WorkOrderDTO.CustomerGUID)
                            </label>
                            @Html.DropDownListFor(model => model.WorkOrderDTO.CustomerGUID, new SelectList((IEnumerable<eTurns.DTO.CustomerMasterDTO>)Model.CustomerBAG, "GUID", "Customer", Model.WorkOrderDTO.CustomerGUID), string.Empty, new { @class = "selectBox" })

                            @if (@eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.CustomerMaster,
eTurnsWeb.Helper.SessionHelper.PermissionType.Insert) && onlyView == false)
                            {
                                <label>
                                    <a onclick="_CreateWO.AddNewFromPopup('Customer');" id="btnAddNewCustomer" class="addNewLink">
                                        (@eTurns.DTO.Resources.ResCommon.AddNew)
                                    </a>
                                </label>
                            }
                            <br />
                            <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.CustomerGUID)</span>
                        </li>
                        @if (Model != null && !string.IsNullOrWhiteSpace(Model.WorkOrderDTO.RequisitionNumber))
                        {
                            <li style="border-right: none;">
                                <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">
                                    @Html.LabelFor(model => model.WorkOrderDTO.RequisitionNumber)
                                </label>
                                <span style="color: Black;">@Html.DisplayFor(model => model.WorkOrderDTO.RequisitionNumber)</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div id="ExpandedContent" style="display: none">
            <ul>
                <li style="border: none">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.ReleaseNumber)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.WorkOrderDTO.ReleaseNumber, new { id = "txtReleaseNumber", @class = "text-box", @style = "background:white", maxlength = 255, @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.WorkOrderDTO.ReleaseNumber)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.AssetGUID)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.WorkOrderDTO.AssetGUID, new SelectList((IEnumerable<eTurns.DTO.AssetMasterDTO>)Model.AssetBAG, "GUID", "AssetName", Model.WorkOrderDTO.AssetGUID), string.Empty, new { @class = "selectBox" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.AssetGUID)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.ToolGUID)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.WorkOrderDTO.ToolGUID, new SelectList((IEnumerable<eTurns.DTO.ToolMasterDTO>)Model.ToolBAG, "GUID", "ToolName", Model.WorkOrderDTO.ToolGUID), string.Empty, new { @class = "selectBox" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.ToolGUID)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.Odometer_OperationHours)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.WorkOrderDTO.Odometer_OperationHours, "{0:0.00}", new { @class = "text-box numericinput", @name = "costdata" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.Odometer_OperationHours)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.Description)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.WorkOrderDTO.Description, new { @class = "text-box", maxlength = 500 })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.Description)</span>
                                </div>
                            </li>
                            <li>
                                <div class="file-input-wrap editor-label">
                                    @ResWorkOrder.WorkOrderFilesLabel
                                </div>
                                <div class="editor-field">
                                    <input type="hidden" id="hdWorkOrderAllowedFileExtension" value="@WorkOrderAllowedFileExtension" />
                                    <input type="file" name="file" id="file" style="display:none;" multiple>
                                    <div class='round-button'>
                                    <label class="round-button-circle" for="file">@ResCommon.ChooseFile</label><label id="lblnofilechoosen" style="padding-left:5px">@ResCommon.Nofilechosen</label>
                                    </div>
                                    <table class="FileUploadList" style="width:43%;margin-left: 30%;margin-top: 12px;">
                                        <thead>
                                            <tr>
                                                <th style="width:98%;">
                                                    @ResToolMaster.FileName
                                                </th>

                                                <th style="width:2%;">
                                                    @ResToolMaster.Delete
                                                </th>
                                            </tr>
                                        </thead>

                                    </table>
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="editorForm padRightNone">
                        <ul>
                            <li style="border-right: none;">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.SupplierId)
                                </div>
                                <div class="editor-field">
                                    @if (Model.WorkOrderDTO.WOStatus != "Open")
                                    {
                                        @Html.DropDownListFor(model => model.WorkOrderDTO.SupplierId, new SelectList(Model.SupplierList, "ID", "SupplierName", Model.WorkOrderDTO.SupplierId), new { @id = "ddlSupplier", @class = "selectBox", @style = "width:120px", @disabled = "disabled", autofocus = "autofocus" })
                                        @Html.HiddenFor(model => model.WorkOrderDTO.SupplierId)
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.WorkOrderDTO.SupplierId, new SelectList(Model.SupplierList, "ID", "SupplierName", Model.WorkOrderDTO.SupplierId), new { @id = "ddlSupplier", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })
                                        <br />
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.SupplierId)</span>
                                    }

                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.SupplierAccountGuid)
                                </div>
                                <div class="editor-field">
                                    @*@Html.DropDownListFor(model => model.WorkOrderDTO.SupplierAccountGuid, new SelectList(Model.SupplierAccount, "GUID", "AccountNumnerMerge", Model.WorkOrderDTO.SupplierAccountGuid), new { @id = "ddlSupplierAccount", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })*@
                                    @if (Model.WorkOrderDTO.WOStatus != "Open" && (Model.WorkOrderDTO.SupplierAccountGuid == null || Model.WorkOrderDTO.SupplierAccountGuid == Guid.Empty))
                                    {
                                        @Html.DropDownListFor(model => model.WorkOrderDTO.SupplierAccountGuid, new SelectList(new List<eTurns.DTO.SupplierAccountDetailsDTO>(), "GUID", "AccountNumnerMerge", Model.WorkOrderDTO.SupplierAccountGuid), new { @id = "ddlSupplierAccount", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.WorkOrderDTO.SupplierAccountGuid, new SelectList(Model.SupplierAccount, "GUID", "AccountNumnerMerge", Model.WorkOrderDTO.SupplierAccountGuid), new { @id = "ddlSupplierAccount", @class = "selectBox", @style = "width:120px", autofocus = "autofocus" })
                                    }
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.SupplierAccountGuid)</span>
                                    @Html.HiddenFor(model => model.WorkOrderDTO.SupplierAccountGuid)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.TechnicianID)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.WorkOrderDTO.TechnicianID, new SelectList((IEnumerable<eTurns.DTO.TechnicianMasterDTO>)Model.TechnicianBAG, "ID", "Technician", Model.WorkOrderDTO.TechnicianID), string.Empty, new { @class = "selectBox" })
                                    <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.WorkOrderDTO.TechnicianID)</span>
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.ProjectSpendName)
                                </div>
                                <div class="editor-field">
                                    <span style="color: Black;">@Html.DisplayFor(model => model.WorkOrderDTO.ProjectSpendName)</span>
                                </div>
                            </li>
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResWorkOrder())
                            
                            <li style="padding-top:5px;">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.WorkOrderDTO.SignatureName)
                                </div>
                                <div class="editor-field" style="width: 1000px;">
                                    <a href="javascript:void(null);" onclick="DeleteWOSignatureImage();" title="Delete Image" id="btnDeleteImage" name="btnDeleteImage">
                                        <img src="~/Content/images/delete.png" />
                                    </a>
                                    <input type="file" name="WOSignatureImage" id="WOSignatureImage" style="display:none" />
                                    <div class='round-button' style="padding-left:5px;display: inline;">
                                        <label class="round-button-circle" for="WOSignatureImage">@ResCommon.ChooseFile</label><label id="WOSignatureImagenofile" style="padding-left:5px"> @ResCommon.Nofilechosen</label>
                                    </div>

                                    @if (!string.IsNullOrEmpty(Model.WorkOrderDTO.SignatureName) && !string.IsNullOrEmpty(Model.WorkOrderDTO.SignaturePath))
                                    {
                                        <input type="hidden" value="@Model.WorkOrderDTO.SignaturePath" id="currentpath" />
                                    }
                                    else
                                    {
                                        <input type="hidden" value="~/Content/images/no-image.jpg" id="currentpath" />
                                    }
                                    <div style="float: left;">
                                        @if (!string.IsNullOrEmpty(Model.WorkOrderDTO.SignatureName) && !string.IsNullOrEmpty(Model.WorkOrderDTO.SignaturePath))
                                        {
                                            <a href='/Consume/Get?path=@(Model.WorkOrderDTO.SignaturePath)' target="_blank">
                                            <img id="previewHolderSignature" style="width:120px;height:120px;" alt="WOSignature" src="/Consume/Get?path=@Model.WorkOrderDTO.SignaturePath">
                                            </a>
                                        }
                                        else
                                        {
                                            <img id="previewHolder" style="width: 120px; height: 120px;" alt="No Image" src="~/Content/images/no-image.jpg" />
                                        }
                                    </div>
                                </div>
                            </li>
                        </ul>                        
                    </div>                    
                </li>
            </ul>
        </div>
        <div class="editorForm" style="width: 98%">
            <ul>
                <li>
                    <div class="editor-label">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@ResCommon.Cancel" id="btnCancel" class="CreateBtn" />
                        @if ((isInsert == true && Model.WorkOrderDTO.ID == 0) || (isUpdate == true && Model.WorkOrderDTO.ID > 0) || Convert.ToString(Session["IsInsert"]) == "True")
                        {
                            <input type="submit" onclick="return _CreateWO.CheckDuplicateFile();" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
                        }
                        else if (Model.WorkOrderDTO.ID > 0 && Model.WorkOrderDTO.WOStatus.ToLower() == "close" && Model.WorkOrderDTO.IsDeleted == false && Model.WorkOrderDTO.IsArchived == false)
                        {
                            <input type="button" value="@eTurns.DTO.ResWorkOrder.UncloseWO" id="btnUncloseWO" class="CreateBtn" />
                            <script type="text/javascript">
                                disableControls('frmWOMaster');
                                $("input[type='button'][id='btnUncloseWO']").removeAttr('disabled');
                            </script>

                        }
                        else //if (isUpdate == false && isInsert == false)
                        {
                            <script type="text/javascript">
                                disableControls('frmWOMaster');
                            </script>
                        }
                    </div>
                </li>
                <li>
                    <div class="BtnBlockform">
                        @if (Model.WorkOrderDTO.ID > 0)
                        {
                            if (isUpdate == true || Convert.ToString(Session["IsInsert"]) == "True")
                            {
                                if (isInsertPull == true && Model.WorkOrderDTO.WOStatus == "Open")
                                {
                                    <input type="button" value="@ResCommon.NewItem" id="btnAddNewItemps" class="CreateBtn" style="float: left; margin-left: 20px;" />
                                }
                                if (AllowCheckinCheckOut == true && Model.WorkOrderDTO.WOStatus == "Open")
                                {
                                    <input type="button" value="@ResToolMaster.NewTool" id="btnAddNewTools" class="CreateBtn" style="float: left; margin-left: 20px;" />
                                }
                            }
                        }
                    </div>
                </li>
            </ul>
        </div>
        @if (Model.WorkOrderDTO.UsedItems.GetValueOrDefault(0) > 0)
        {
            <div class="infoBlock" style="margin-bottom: 10px; margin-top: 10px;">
                <ul>
                    <li style="width: auto;">
                        <label for="RoomName">
                            <label>@eTurns.DTO.ResWorkOrder.UsedItems</label>
                        </label>
                        : <span>@(Model.WorkOrderDTO.UsedItems)</span>
                    </li>
                    @*<li style="border: none; width: auto;display:none">
                            <label for="RoomName">
                                <label>@eTurns.DTO.ResWorkOrder.UsedItemsCost</label>
                            </label>
                            : <span id="spnTotalCost">$ @(Model.WorkOrderDTO.UsedItemsCost)</span>
                        </li>*@
                    @if (isCost)
                    {
                        <li style="border: none; width: auto;">
                            <label for="RoomName">
                                @if (PriseSelectionOption == 1)
                                {
                                <label>@ResOrder.TotalSellPrice</label>
                                }
                                else
                                {
                                    <label>@ResOrder.TotalCost</label>
                                }
                               </label>
                                 : 
                                @if (PriseSelectionOption == 1)
                                {
                                    <span id="spnTotalCost">@CurrencySymbol @(Model.WorkOrderDTO.UsedItemsCost.GetValueOrDefault(0).ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture))</span>
                                }
                                else
                                {
                                    <span id="spnTotalCost">@CurrencySymbol @(Model.WorkOrderDTO.UsedItemsSellPrice.ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture))</span>
                                }
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
    <style type="text/css">
        .dataTables_scrollBody {
            max-height: 400px;
            overflow-y: scroll;
        }
    </style>
    <div id="WOLineItems">
    </div>
    //Form End
}
<div id="ItemModelTemp">
</div>
<div id="divToolModel">
</div>
<div class="dialog" id="basic-modal-content-Requisition" style="display: none;">
    <div class="inner">
        <p class="text">
            @eTurns.DTO.Resources.ResMessage.RequisitionApproveWithZero
        </p>
        <a href="JavaScript:void{}" id="btnModelYesRequisition" class="yes">
            <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="#" class="no" onclick="_CreateWO.closeModalRequisition()">
            <img src="~/Content/images/no.png" alt="@eTurns.DTO.Resources.ResCommon.No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
@Html.Partial("_RequiredMessages")


<script type="text/javascript">

    var itemTitle = '@(eTurns.DTO.ResWorkOrder.ModelHeader)';
    var toolTitle = '@(eTurns.DTO.ResWorkOrder.ToolModelHeader)';//'Add Tools to Work Order';
    var textNofilechosen = '@(eTurns.DTO.Resources.ResCommon.Nofilechosen)';
    var ResFileName = '@ResToolMaster.FileName';
    var ResDelete = '@ResToolMaster.Delete';
    var EditWOID = 0;
    var isInsertPull = '@isInsertPull',
        workOrderFilePath = '@WorkOrderFilePath',
        DoNotPullInsertRights = '@eTurns.DTO.Resources.ResMessage.DoNotPullInsertRights';

    var DeleteWoFileId = '';

    _CreateWO.initUrls('@Url.Action("LoadWOItems", new { WorkOrderGUID = @Model.WorkOrderDTO.GUID })'
        , '@Url.Action("LoadItemMasterModel")', '@Url.Action("../Master/CustomerMasterCreate")'
        ,'@Url.Action("LoadToolsOnModel")'
    );
    _CreateWO.init('@Model.WorkOrderDTO.ID', '@Model.WorkOrderDTO.IsHistory', '@Model.WorkOrderDTO.GUID'
        , '@Model.WorkOrderDTO.WOStatus', '@Model.WorkOrderDTO.SupplierAccountGuid');
    var WOSignatureImagePath = '@Model.WorkOrderDTO.SignaturePath';
    var WOSignatureName = '@Model.WorkOrderDTO.SignatureName';
    
    $(document).ready(function () {
        window.location.hash = '';
    });
</script>


<div id="NewMasterPopUP">
</div>

<style>
    p {
        clear: both;
        margin: 0;
        padding: .5em 0;
    }

    pre {
        display: block;
        font: 100% "Courier New", Courier, monospace;
        padding: 10px;
        border: 1px solid #bae2f0;
        background: #e3f4f9;
        margin: .5em 0;
        overflow: auto;
        width: 800px;
    }

    img {
        border: none;
    }



    /*  */

    #preview {
        position: absolute;
        border: 1px solid #ccc;
        background: #333;
        padding: 5px;
        display: none;
        color: #fff;
    }
    .editorForm .selectBox
    {width: 64% !important;}

    .round-button {
        width: auto;
        display: table-cell;
    }

    .round-button-circle {
        width: 100%;
        border-radius: 7%;
        overflow: hidden;
        background: #f8f8f8;
        box-shadow: 0 0 3px grey;
        border-color: black;
        padding: 2px 10px 3px 10px;
        border-style: solid;
        border-width: thin;
    }
</style>