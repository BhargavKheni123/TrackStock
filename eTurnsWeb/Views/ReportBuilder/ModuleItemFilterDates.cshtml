@model ReportPerameters
@{
    string ModuleName = Convert.ToString(Model.ModuleName);

}
@if (!string.IsNullOrWhiteSpace(ModuleName))
{
    if ((Model.ModuleName.ToLower() == "consume_pull" 
        && (Model.ParentReportName ?? string.Empty).ToLower() != "cumulative pull")
        || (Model.ParentReportName ?? string.Empty).ToLower() == "order item summary")
    {
    <li id="liFilterDateOn">
        <div class="editor-label">
            @Html.Label("Date Filter On:")
        </div>
        <div class="editor-field">
            @*Created=0,LastEDIDate=1,Updated=2,ReceivedOnWeb=3*@
            <select class="selectBox" id="ddlFilterDateOn" name="ddlFilterDateOn" style="width:140px;">
                <option value="0">Created</option>
                <option value="1">LastEDIDate</option>
                <option value="2">Updated</option>
                <option value="3">ReceivedOnWeb</option>
            </select>
        </div>
    </li>
    }

    if (Model.ModuleName.ToLower() == "inventorydailyhistory")
    {
        <li id="liStartDate">
            <div class="editor-label">
                @Html.Label("Select Date:")
            </div>
            <div class="editor-field">
                <input type="text" id="txtStartDate" class="dtPicker text-box" style="width: 130px; float: left;"
                       readonly="readonly" maxlength="128" value="@Model.StartDateStr" />
                @Html.TextBoxFor(model => model.StartTime, new { @class = "text-box", maxlength = 128, onkeypress = "javascript:return false;", style = "width:50px" })
            </div>
        </li>
    }
    else
    {
        if (Model != null && Model.HasStartDate && Model.ModuleName != "ExpiringItems" && Model.ModuleName != "Receive" && Model.ModuleName != "ToolInStock"
            && Model.ModuleName != "Inventory Stock Out"
            && (Model.ParentReportName ?? string.Empty).ToLower() != "assets")
        {
            <li id="liStartDate">
                <div class="editor-label">@if (ModuleName == "Tool")
                {
                     @Html.Label(@eTurns.DTO.ResReportMaster.Datecreatedstart)
                }
                else
                {
                   @Html.Label(@eTurns.DTO.ResReportMaster.StartDate)
                }
                :
                </div>
                <div class="editor-field">
                    <input type="text" id="txtStartDate" class="dtPicker text-box" style="width: 130px; float: left;"
                           readonly="readonly" maxlength="128" value="@Model.StartDateStr" />
                    @if (Model != null && Model.HasEndDate && Model.ModuleName != "Not Consume_Pull")
                    {
                        @Html.TextBoxFor(model => model.StartTime, new { @class = "text-box", maxlength = 128, onkeypress = "javascript:return false;", style = "width:50px" })
                    }
                </div>
                @*<div class="editor-label">
                        @Html.Label("Start Time:")
                    </div>
                    <div class="editor-field">

                    </div>*@
            </li>
        }
        <li>
            <div class="editor-label">
                &nbsp;
            </div>
        </li>
        if (Model != null && Model.HasEndDate && Model.ModuleName != "ExpiringItems" && Model.ModuleName != "Receive" && Model.ModuleName != "ToolInStock"
            && Model.ModuleName != "Inventory Stock Out"
            && (Model.ParentReportName ?? string.Empty).ToLower() != "assets")
        {
            <li id="liEndDate">
                <div class="editor-label">
                    @if (ModuleName == "Tool")
                    {
                        @Html.Label(@eTurns.DTO.ResReportMaster.Datecreatedend)
                    }
                    else
                    {
                        @Html.Label(@eTurns.DTO.ResReportMaster.EndDate)
                    }
                    :
                </div>
                <div class="editor-field">
                    <input type="text" id="txtEndDate" class="dtPicker text-box" style="width: 130px;float:left;"
                           readonly="readonly" value="@Model.EndDateStr" maxlength="128" />
                    @if (Model != null && Model.HasEndDate && Model.ModuleName != "Not Consume_Pull")
                    {
                        @Html.TextBoxFor(model => model.EndTime, new { @class = "text-box", maxlength = 128, onkeypress = "javascript:return false;", style = "width:50px" })
                    }
                </div>
                @*<div class="editor-label">
                        @Html.Label("End Time:")
                    </div>
                    <div class="editor-field">

                    </div>*@
            </li>
        }

        if (Model != null && Model.HasEndDate && Model.ModuleName.ToLower() == "stock out item")
        {    
             <li id="liOutStockStartDate">
                 <div class="editor-label">
                     @Html.Label(@eTurns.DTO.ResReportMaster.DateCreatedEarlierThan):
                 </div>
                <div class="editor-field">
                    <input type="text" id="txtOutStockDateCreatedearlierThan" class="dtPicker text-box" style="width: 130px; float: left;"
                           readonly="readonly" maxlength="128" value="@Model.StartDateStr" />                    
                </div>
            </li>
            <li>
                <div class="editor-label">
                    &nbsp;
                </div>
            </li>
            <li id="liOutStockEndDate">
                <div class="editor-label">
                        @Html.Label(@eTurns.DTO.ResReportMaster.DateActiveLaterThan):            
                </div>
                <div class="editor-field">
                    <input type="text" id="txtOutStockDateActiveLaterThan" class="dtPicker text-box" style="width: 130px;float:left;"
                           readonly="readonly" value="@Model.EndDateStr" maxlength="128" />                    
                </div>
            </li>
        }
    }
    <script type='text/javascript' src="@Url.Content("~/Scripts/jquery-ui-timepicker-addon.js")"></script>
    <script type="text/javascript">

        $(document).ready(function () {
            $('#StartTime').timepicker(
              {
                  timeFormat: 'HH:mm'
                  , onClose: function (selectedDate) {
                      FillModuleItem();
                  }
              });
            $('#EndTime').timepicker(
              {

                  timeFormat: 'HH:mm'
                  , onClose: function (selectedDate) {
                      FillModuleItem();
                  }
              });
            //alert("SessionHelper.RoomDateJSFormat : " + format);
            //alert("hidden : " + $("#hdDateFormat").val());

            //if ($("#hdDateFormat") != undefined && $("#hdDateFormat").val() != "")
            //    format = $("#hdDateFormat").val();
            //else
            //    format = "m/d/yy";
            //if (format.indexOf("yy") >= 0) {
            //    format = format.replace("yy", "yyyy");
            //}
            //else if (format.indexOf("y") >= 0) {
            //    format = format.replace("y", "yy");
            //}
            //alert(format);

            $('#txtStartDate, #txtEndDate').blur(function () { }).datepicker({
                dateFormat: RoomDateJSFormat, changeMonth: true,
                changeYear: true
            });

            if ('@Model.ModuleName' == 'Stock Out Item')
            {
	            $('#txtOutStockDateCreatedearlierThan, #txtOutStockDateActiveLaterThan').blur(function () { }).datepicker({
	                dateFormat: RoomDateJSFormat, changeMonth: true,
	                changeYear: true
	            });
			}
            if ('@Model.ModuleName' == "Cart" || ('@Model.ReportFileName' == "RPT_Incomplete Pull Report.rdlc")
                || '@Model.ModuleName' == 'Tool'
                || '@Model.ModuleName' == 'CumulativePull' || '@Model.ModuleName' == 'MaintenanceDue'
                || '@Model.ParentReportName.ToLower()' == "cumulative pull") {
                $('#txtStartDate, #StartTime').val('');
                $('#txtEndDate, #EndTime').val('');
            }
            if ('@Model.ModuleName' == "InventoryDailyHistory" || '@Model.ModuleName' == "InventoryReconciliation"
                || '@Model.ModuleName' == 'MaintenanceDue'
                || '@Model.ModuleName' == 'Inventory Stock Out') {
                $('#StartTime, #EndTime').css('display', 'none').val('');
            }
            if ('@Model.ModuleName' == 'Stock Out Item' || '@Model.ModuleName' == 'Inventory Stock Out')
            {
                $('#StartTime, #EndTime').css('display', 'none');
            }

            if ('@Model.ModuleName' == 'Stock Out Item') {
                $('#txtOutStockDateCreatedearlierThan, #txtOutStockDateActiveLaterThan').val('');
            }

            $('#ddlFilterDateOn').change(function () {
                FillModuleItem();
            });


        });

        

        $('#txtStartDate, #txtEndDate').keyup(function (e) {
            if (e.keyCode == 8 || e.keyCode == 46) {
                $.datepicker._clearDate(this);
            }
        });

        if ('@Model.ModuleName' == 'Stock Out Item')
            {
		        $('#txtOutStockDateCreatedearlierThan, #txtOutStockDateActiveLaterThan').keyup(function (e) {
		            if (e.keyCode == 8 || e.keyCode == 46) {
		                $.datepicker._clearDate(this);
		            }
		        });
			}
    </script>
}