@{
    ViewBag.Title = eTurns.DTO.ResReportMaster.PageTitle;
    var settings = new GridHeaderSettings() { dataViewType = DataViewType.None, ShowSelectAll = true,
        DataTableName = "myDataTable", ListViewhref = "#", GroupedViewhref = string.Empty,
        DisplayUDFButton = false, UDFSetupFor = "ReportList&UDFHeader=" + @eTurns.DTO.ResCartItem.CartItemHeader,
        DisplaySettings = true, DisplayColumnSetupButton = true, ColumnSetupFor = "ReportMasterList", DisplayDeleteButton = false, DisplayPrintBlock=false   };
    var modelCommon = new eTurns.DTO.CommonDTO { PageName = "ReportMasterList" };
    string CartCoockiename = "DefaultReportListview_" + eTurnsWeb.Helper.SessionHelper.UserID;
    bool isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool isView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.View);
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);
    bool IsShowChangeLog = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.ShowChangeLog);
    string ReportPDFURL = string.Format("{0}?t={1}", "/Uploads/HelpDoc/Reports.pdf", DateTime.Now.Ticks);
    long RoleID = eTurnsWeb.Helper.SessionHelper.RoleID;
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    List<HelpDocumentDetailDTO> objHelpDocDtlDTO = eTurnsWeb.Helper.SessionHelper.GetHelpDocumentDetail("Reports", (int)HelpDocType.Module);
}
<style type="text/css">
   
</style>
@if (SiteSettingHelper.IsBorderStateURL == "1" && SiteSettingHelper.EnableOktaLoginForSpecialUrls.Contains(eTurnsWeb.Helper.SessionHelper.CurrentDomainURL)){<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyleBS.css")" />}else{ <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/tabstyle.css")" />}
<script type='text/javascript' src="@Url.Content("~/Content/OpenAccess/jquery.cookie.js")"></script>
@section head{
    <script type='text/javascript' src="@Url.Content("~/Scripts/TabCommon.js?v=" + version)"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/SiteScripts.js?v=" + version)"></script>

<script language="javascript" type="text/javascript">

        var oTable;
        var IsRefreshGrid = false;
        var deleteURL = "/Consume/DeleteRequisitionMasterRecords";
        var sImageUrl = "/Content/images/";
        var anOpen = [];
        var objColumns = {};
        //var PostCount = 0;
        var IsDeletePopupOpen = false;
        var AllowDeletePopup = true;
        var SelectedHistoryRecordID = 0;
        var HistorySelected;
        var ReportUniqueID = '';
    var IsReloadItemList = false;
    var lblReport = "@ResReportMaster.Report"
    var lblEvent = "@ResReportMaster.Event"
        var TabsArry = [new TabClass('tab1', '@eTurns.DTO.Resources.ResCommon.New', 'callbacknew();', false, true),
         new TabClass('tab5', '@eTurns.DTO.Resources.ResCommon.List', 'callbackhistory();', true, true),

        ];


    function callbacknew() {
        if ($('#IsDeletedRecords').is(':checked')) {
            $('#undeleteRows').css('display', '');
            $('#deleteRows').css('display', 'none');
        }
        else {
            $('#undeleteRows').css('display', 'none');
            $('#deleteRows').css('display', '');
        }
        
        ShowNewTab('ReportCreate', 'frmReport');
    }
    function callbackhistory() {
        $('#deleteRows').css('display', 'none');
        $('#undeleteRows').css('display', 'none');
        if (IsEditMode) {
            IsEditMode = false;
        }
        if (IsReloadItemList == true) {
            $('#myDataTable').dataTable().fnDraw();
            IsReloadItemList = false;
        }
        $("div#tab1").hide();
    }

        var ReqListColumnsArr = new Array();
        ReqListColumnsArr.push({ mDataProp: null, sClass: "read_only center NotHide RowNo", "bSortable": false, sDefaultContent: '' });

        ReqListColumnsArr.push({ "mDataProp": "ID", "sClass": "read_only" });

    //ReqListColumnsArr.push({ "mDataProp": "ItemType", "sClass": "read_only" });
        ReqListColumnsArr.push({
            "mDataProp": "ItemType",
            "sClass": "read_only",
            "sDefaultContent": '',
            "bSortable": true,
            "bSearchable": false,
            "fnRender": function (obj, val) {
                return "<span>" + obj.aData.ItemType + "</span>" + " <input type='hidden' name='hdnItemType' id='hdnItemType' value='" + obj.aData.ItemType.toString() + "' />";
            }
        });

        ReqListColumnsArr.push({
            mDataProp: null, sDefaultContent: '', bSortable: false, sClass: "read_only", fnRender: function (obj, val) {
                if ('@RoleID' == '-1')
                    return "<a href='javascript:void(0);' title='@ResReportMaster.EditReport' id='lnkEdit'><img src='@Url.Content("~/Content/Images/edit-icon.png")' /></a>";
                else
                    return '';
            }
        });


       
        ReqListColumnsArr.push({
            "mDataProp": "ReportName",
            "sClass": "read_only",
            "sDefaultContent": '',
            "bSortable": true,
            "bSearchable": false,
            "fnRender": function (obj, val) {
                if (obj.aData.IsNotEditable == true || obj.aData.IsNotEditable == "true") {
                    return "<span id='sEditLink'>" + obj.aData.ReportResourceName + "</span>" + " <input type='hidden' name='hdnReportID' id='hdnReportID' value='" + obj.aData.ID.toString() + "' />";}
                else {
                    return "<a id='aEditLink' onclick='return RedirectToReport(" + obj.aData.ID + ")' href='JavaScript:void(0);'>" + obj.aData.ReportResourceName + "</a>" + " <input type='hidden' name='hdnReportID' id='hdnReportID' value='" + obj.aData.ID.toString() + "' />";
                }
            }
        });

        ReqListColumnsArr.push({
            "mDataProp": "EmailTemplateName",
            "sClass": "read_only",
            "sDefaultContent": '',
            "bSortable": true,
            "bSearchable": false,
            "fnRender": function (obj, val) {
                return "<span>" + obj.aData.AlertResourceName + "</span>" + " <input type='hidden' name='hdnEmailTemplateID' id='hdnEmailTemplateID' value='" + obj.aData.EmailTemplateID.toString() + "' />";
            }
        });

        ReqListColumnsArr.push({ "mDataProp": "ReportFileName", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "SubReportFileName", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "MasterReportResFile", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "SubReportResFile", "sClass": "read_only" });


        ReqListColumnsArr.push({ "mDataProp": "IsBaseReport", "sClass": "read_only" });



        ReqListColumnsArr.push({ "mDataProp": "ReportType", "sClass": "read_only" });



        ReqListColumnsArr.push({ "mDataProp": "SortColumns", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "SetAsDefaultPrintReport", "sClass": "read_only" });


        ReqListColumnsArr.push({ "mDataProp": "IsIncludeTotal", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "IsIncludeSubTotal", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "IsIncludeGrandTotal", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "IsIncludeGroup", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "GroupName", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "IsIncludeDateRange", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "Days", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "FromDate", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "ToDate", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "ToEmailAddress", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "ModuleName", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "ISEnterpriseReport", "sClass": "read_only" });


        ReqListColumnsArr.push({ "mDataProp": "IsIncludeTax1", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "IsIncludeTax2", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "IsNotEditable", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "HideHeader", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "ShowSignature", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "IsDefaultReport", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "IsPrivate", "sClass": "read_only" });

        ReqListColumnsArr.push({ "mDataProp": "CreatedOn", "sClass": "read_only" , "fnRender": function (obj, val) { return obj.aData.CreatedDate; }});
        ReqListColumnsArr.push({ "mDataProp": "UpdatedON", "sClass": "read_only" , "fnRender": function (obj, val) { return obj.aData.UpdatedDate; }});


        ReqListColumnsArr.push({ "mDataProp": "CreatedByName", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "UpdatedByName", "sClass": "read_only" });
        ReqListColumnsArr.push({ "mDataProp": "ParentReportName", "sClass": "read_only" });


        function RedirectToReport(rID) {
            var reportID = rID.toString();
            //window.location = '@Url.Action("~/ReportBuilder/CreateTemplate")' + "?id=" + reportID;
            var vurl = '@Url.Action("CreateTemplate", "ReportBuilder",new {id  = "reportID" })';
            vurl = vurl.replace('reportID', encodeURIComponent(reportID));
            window.location = vurl;
            return false;
        }





        $(document).ready(function () {
            $('.dataTables_length').attr('style', 'left:0;top:-35px !important');
            $('.dataTables_paginate').attr('style', 'left: 145px;top:-24px !important');
            objColumns = GetGridHeaderColumnsObject('myDataTable');
            LoadTabs();
            var gaiSelected = [];

            oTable = $('#myDataTable').dataTable({
                "bJQueryUI": true,
                "bScrollCollapse": true,
                "sScrollX": "150%",
                "sDom": 'RC<"top"lp<"clear">>rt<"bottom"i<"clear">>T',
                "oColVis": {},
                "aaSorting": [[2, "asc"]],
                "oColReorder": {},
                "sPaginationType": "full_numbers",
                "bProcessing": true,
                "bStateSave": true,
                "oLanguage": {
                    "sLengthMenu": '@eTurns.DTO.Resources.ResGridHeader.Show' + ' _MENU_ ' + '@eTurns.DTO.Resources.ResGridHeader.Records',
                    "sEmptyTable": '@eTurns.DTO.Resources.ResMessage.NoDataAvailableInTable',
                    "sInfo": '@eTurns.DTO.Resources.ResMessage.ShowingNoOfEntries',
                    "sInfoEmpty": '@eTurns.DTO.Resources.ResMessage.ShowingZeroEntries'
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    if (aData.IsDeleted == true && aData.IsArchived == true) {
                        $(nRow).css('background-color', '#B9BCBF');
                        //nRow.className = "GridDeleatedArchivedRow";
                    }
                    else if (aData.IsDeleted == true) {
                        $(nRow).css('background-color', '#FFCCCC');
                        // nRow.className = "GridDeletedRow";
                    }
                    else if (aData.IsArchived == true) {
                        $(nRow).css('background-color', '#CCFFCC');
                        // nRow.className = "GridArchivedRow";
                    }
                    else {
                        /*START : QTY Legends*/
                        if (aData.ShowRequisitionPullNotification == "Red") {
                            $(nRow).css("background-color", "#FF6633");
                        }
                        else if (aData.ShowRequisitionPullNotification == "Green") {
                            $(nRow).css("background-color", "#40FF00");
                        }
                    }
                    $("td.RowNo:first", nRow).html(this.fnSettings()._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },
                "fnStateSaveParams": function (oSettings, oData) {

                    if (oData.oSearch != null)
                        oData.oSearch.sSearch = "";
                    //if (PostCount > 1) {
                    $.ajax({
                        "url": '@Url.Content("~/Master/SaveGridState")',
                        "type": "POST",
                        data: { Data: JSON.stringify(oData), ListName: 'ReportMasterList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            o = json;
                        }
                    });
                    //}
                },
                "fnStateLoad": function (oSettings) {
                    var o;
                    $.ajax({
                        "url": '@Url.Content("~/Master/LoadGridState")',
                        "type": "POST",
                        data: { ListName: 'ReportMasterList' },
                        "async": false,
                        cache: false,
                        "dataType": "json",
                        "success": function (json) {
                            if (json.jsonData != '')
                                o = JSON.parse(json.jsonData);
                        }
                    });
                    return o;
                },
                "bServerSide": true,
                "sAjaxSource": '@Url.Content("~/ReportBuilder/ReportListAJAX")',
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    //PostCount = PostCount + 1;
                    var arrCols = new Array();
                    var objCols = this.fnSettings().aoColumns;
                    for (var i = 0; i <= objCols.length - 1; i++) {
                        arrCols.push(objCols[i].mDataProp);
                    }
                    for (var j = 0; j <= aoData.length - 1; j++) {
                        if (aoData[j].name == "sColumns") {
                            aoData[j].value = arrCols.join("|");
                            break;
                        }
                    }


                    if (oSettings.aaSorting.length != 0)
                        aoData.push({ "name": "SortingField", "value": oSettings.aaSorting[0][3] });
                    else
                        aoData.push({ "name": "SortingField", "value": "0" });


                    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
                    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });


                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        cache: false,
                        "data": aoData,
						"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                        "success": fnCallback,
                        beforeSend: function () {
                            $('#myDataTable').removeHighlight();
                            $('.dataTables_scroll').css({ "opacity": 0.2 });
                        },
                        complete: function () {
                            $('.dataTables_scroll').css({ "opacity": 1 });
                            if ($("#global_filter").val() != '') {
                                if ($("#global_filter").val() != '') {
                                    ReportGlobalText = $("#global_filter").val();
                                }
                                $('#myDataTable').highlight($("#global_filter").val());
                            }
                            CallShowHideData();

                        }
                    })
                },
                "fnInitComplete": function (oSettings, json) {

                    $('#divQTYLegends').show(1000);

                    $('.ColVis').detach().appendTo(".setting-arrow");

                },
                "aoColumns": ReqListColumnsArr,
            }).makeEditable({
                sUpdateURL: '@Url.Content("~/Master/UpdateData")'
            });

            //HIDE PRINT CONTAINER
            $('.DTTT_container').css('z-index', '-1');

            $('#myDataTable').on('tap click', 'a[id="lnkEdit"]', function () {
                var ID = $(this).parent().parent().find("input[name='hdnReportID']").val();
                var EmailTemplateID = $(this).parent().parent().find("input[name='hdnEmailTemplateID']").val();
                var itemType = $(this).parent().parent().find("input[name='hdnItemType']").val();
                var currentTR = $(this).parent().parent()[0];
                var aPos = oTable.fnGetPosition($(this).parent()[0]);
                var aData = oTable.fnGetData(aPos[0]);
                var actiontupess = "ReportEdit/" + ID;
                aData.CompanyName = "true";
                var obj = new Array();
                obj.push({ "name": "EmailTemplateID", "value": EmailTemplateID });
                obj.push({ "name": "ItemType", "value": itemType });
                ShowEditTabWithParams(actiontupess, 'frmReport', obj);
                //ShowEditTab(actiontupess, 'frmBin');
                return false;
            });

        });




        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.search);
            if (results == null)
                return "";
            else
                return decodeURIComponent(results[1].replace(/\+/g, " "));
        }

        function fnGetSelected(oTableLocal) {
            return oTableLocal.$('tr.row_selected');
        }

     
        function ReportTypeNarroSearch(ReportTypeDDLObject) {
            if ($(ReportTypeDDLObject).val() != "") {
                ReportTypeNarroSearchValue = $(ReportTypeDDLObject).val();
                DoNarrowSearch();
            }
            else {
                ReportTypeNarroSearchValue = '';
                DoNarrowSearch();
            }
        }
    /* HISTORY related data deleated and archived END */
</script>

}
<div class="userListingWrapper">
    
    <h2>
        @eTurns.DTO.ResReportMaster.PageHeader
    </h2>

    <div class="Infoclass" id="divinfoList" style="width:70px !important">
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsVideoShow == true)
        {
            var VideoCount = objHelpDocDtlDTO.Where(x => x.IsVideo == true).Count();
            if (VideoCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/InfoVideo.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsVideo == true && !string.IsNullOrWhiteSpace(item.ModuleVideoName) && !string.IsNullOrWhiteSpace(item.ModuleVideoPath))
                                {
                                    <li class="help_docvideo" onclick="return OpenHelpDocVideo('@item.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@item.ModuleVideoNoExt');">@item.ModuleVideoNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsVideo == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsVideo == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleVideoPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/InfoVideo.png" alt="@helpDetails.ModuleVideoNoExt" onclick="return OpenHelpDocVideo('@helpDetails.ModuleVideoPath.Replace("../Uploads/HelpDoc/", "")', '@helpDetails.ModuleVideoNoExt');" />
                    </div>
                }
            }
        }
        @if (objHelpDocDtlDTO != null && objHelpDocDtlDTO.Count > 0 && objHelpDocDtlDTO.FirstOrDefault().IsDocShow == true)
        {
            var DocCount = objHelpDocDtlDTO.Where(x => x.IsDoc == true).Count();
            if (DocCount > 1)
            {
                <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                    <a href="#" style="z-index:205 !important">
                        <img src="~/Content/images/Info.png" alt="Help" />
                    </a>
                    <div class="refreshBlock" style="z-index:200 !important; top: 20px;">
                        <ul class="sub_subMenu">
                            @foreach (var item in objHelpDocDtlDTO)
                            {
                                if (item.IsDoc == true && !string.IsNullOrWhiteSpace(item.ModuleDocName) && !string.IsNullOrWhiteSpace(item.ModuleDocPath))
                                {
                                    <li class="help_docvideo" onclick="return window.open('@item.ModuleDocPath', '_blank')">@item.ModuleDocNoExt</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
            else
            {
                HelpDocumentDetailDTO helpDetails = new HelpDocumentDetailDTO();
                helpDetails = objHelpDocDtlDTO.Where(x => x.IsDoc == true).FirstOrDefault();

                if (helpDetails != null && helpDetails.IsDoc == true && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocName) && !string.IsNullOrWhiteSpace(helpDetails.ModuleDocPath))
                {
                    <div class="refresh" style="z-index: 200 !important; margin-right: 5px;">
                        <img class="help_docvideo" src="~/Content/images/Info.png" alt="@helpDetails.ModuleDocNoExt" onclick="return window.open('@helpDetails.ModuleDocPath', '_blank')" />
                    </div>
                }
            }
        }
    </div>    
    <div class="userListBlock">
        @Html.Hidden("hdnInsertRights", isInsert)
        @Html.Hidden("hdnUpdateRights", isUpdate)
        @Html.Hidden("hdnPageName", modelCommon.PageName)
        <ul class='tabs'></ul>
        <div id="CtabNew" class="tabContener">
        </div>
        <div id="Ctab" class="tabContener">
            <div class="searchWrapper">
                <div class="searchBlock">
                    <span class="label">@eTurns.DTO.Resources.ResCommon.Search </span>
                    <div class="searchinputB">
                        <input type="text" class="searchinput" id="global_filter" />
                        <a href="javascript:void(0);" class="xclose">
                            <img src="~/Content/images/x.png" alt="X" id="clear_global_filter" />
                        </a>
                    </div>
                </div>
            </div>
            @Html.GridTopHeader(settings, 0)
            @Html.Partial("NarrowSearchLayout", modelCommon)
            <div class="userContent">
                <table id="myDataTable" class="display">
                    <thead>
                        <tr>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.RowNo
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.ID
                            </th>
                            <th>
                                @eTurns.DTO.ResReportMaster.ItemType
                            </th>
                            <th>
                                @eTurns.DTO.ResReportMaster.EditReport
                            </th>
                            <th>
                                @eTurns.DTO.ResReportMaster.ReportName
                            </th>
                            <th>
                                @eTurns.DTO.ResReportMaster.EmailTemplateName
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.ReportFileName
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.SubReportFileName
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.MasterReportResFile
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.SubReportResFile
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.IsBaseReport
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.ReportType
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.SortColumns
                            </th>
                            
                            <th>
                                @eTurns.DTO.ResReportMaster.SetAsDefaultPrintReport
                            </th>

                            
                            <th>
                                @eTurns.DTO.ResReportMaster.IsIncludeTotal
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.IsIncludeSubTotal
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.IsIncludeGrandTotal
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.IsIncludeGroup
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.GroupName
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.IsIncludeDateRange
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.Days
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.FromDate
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.ToDate
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.ToEmailAddress
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.ModuleName   
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.ISEnterpriseReport
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.IsIncludeTax1
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.IsIncludeTax2
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.IsNotEditable
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.HideHeader
                            </th>

                            <th>
                                @eTurns.DTO.ResReportMaster.ShowSignature
                            </th>


                            <th>
                                @eTurns.DTO.ResReportMaster.IsDefaultReport
                            </th>


                            <th>
                                @eTurns.DTO.ResReportMaster.IsPrivate
                            </th>

                     
                       

                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedOn
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedOn
                            </th>
                     
                            <th>
                                @eTurns.DTO.Resources.ResCommon.CreatedBy
                            </th>
                            <th>
                                @eTurns.DTO.Resources.ResCommon.UpdatedBy
                            </th>
                            <th>
                                @eTurns.DTO.ResReportMaster.ParentReportName
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div id="processing_message" style="display: none" title="Processing">
                    @eTurns.DTO.Resources.ResMessage.RequestProcessMessage
                </div>

            </div>
        </div>
        <div id="CtabCL" class="tabContener">
        </div>
    </div>
</div>

<script type="text/javascript">


</script>

<script type="text/javascript" src="@Url.Content("~/Scripts/Authorization.js?v=" + version)"></script>
