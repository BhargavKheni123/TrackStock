@model ReportPerameters
@{
    string ModuleName = Convert.ToString(Model.ModuleName);

    List<SelectListItem> lstMeasureMentMethods = new List<SelectListItem>();

    SelectListItem objSelectListItem = new SelectListItem();
    objSelectListItem.Text = "";
    objSelectListItem.Value = "0";
    lstMeasureMentMethods.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = "Pull";
    objSelectListItem.Value = "2";
    lstMeasureMentMethods.Add(objSelectListItem);

    objSelectListItem = new SelectListItem();
    objSelectListItem.Text = "Orders";
    objSelectListItem.Value = "3";
    lstMeasureMentMethods.Add(objSelectListItem);

    SelectList lstmeasureMethods = new SelectList(lstMeasureMentMethods, "Value", "Text");
    string QOHBelowCritical = ResItemMaster.QOHBelowCritical;
    string QOHBelowMinimum = ResItemMaster.QOHBelowMinimum;
    string QOHBelowMaximum = ResItemMaster.QOHBelowMaximum;
    string QOHAboveMaximum = ResItemMaster.QOHAboveMaximum;
}
@if (!string.IsNullOrWhiteSpace(ModuleName))
{
    if (Model != null && Model.HasCompanyIds)
    {
        <li id="liCompanyIds">
            <div class="editor-label">
                @Html.Label(@eTurns.DTO.ResReportMaster.Company):
            </div>
            <div class="editor-field" style="width: 250px; float: left">
                <select id="ddlRCompany" multiple="multiple" style="width: 150px;" name="example-basic"
                        size="5" class="text-box"></select>
            </div>
        </li>
        <li>
            <div class="editor-label">
                @Html.Label(@eTurns.DTO.ResReportMaster.SelectedCompany):
            </div>
            <div class="editor-label neweditorlabel">
                <label id="lblselectedCompany">
                </label>
            </div>
        </li>
    }
    <li>
        <div class="editor-label">
            &nbsp;
        </div>
    </li>
    if (Model != null && Model.HasRoomIds && Model.ModuleName.ToLower() != "company")
    {
        <li id="liRoomIds">
            <div class="editor-label">
                @Html.Label(@eTurns.DTO.ResReportMaster.Room):
            </div>
            <div class="editor-field" style="width: 250px; float: left">
                <select id="ddlRRoom" multiple="multiple" width="150px" name="example-basic" size="5"
                        class="text-box"></select>
            </div>
        </li>
        <li>
            <div class="editor-label">
                @Html.Label(@eTurns.DTO.ResReportMaster.SelectedRoom):
            </div>
            <div class="editor-label neweditorlabelrm">
                <label id="lblselectedRoom">
                </label>
            </div>
        </li>
    }
    if (Model.ModuleName.ToLower() == "checkouttool")
    {
        <li>
            <div class="editor-label">
                &nbsp;@Html.Label(" ")
            </div>
            <div class="editor-field">
                <input type="checkbox" id="chkAllCheckedOutTools" />
                @Html.Label(@eTurns.DTO.ResReportMaster.DisplayAllCheckedOutTools)
            </div>
        </li>
    }
    if ((Model.ModuleName.ToLower() == "instockbyactivity" || Model.ModuleName.ToLower() == "instockbybin" || Model.ModuleName.ToLower() == "instockbybinmargin" || Model.ModuleName.ToLower() == "instockwithqoh" || Model.ModuleName.ToLower() == "expiringitems"
         || Model.ModuleName.ToLower() == "precisedemandplanning"
         || Model.ModuleName.ToLower() == "precisedemandplanningbyitem"))
    {
        <li>
            <div class="editor-label">
                &nbsp;
            </div>
        </li>
        if (Model.ModuleName.ToLower() == "precisedemandplanning"
            || Model.ModuleName.ToLower() == "precisedemandplanningbyitem")
        { 
            <li id="liAUDayOfUsageToSample">
                <div class="editor-label">
                    @Html.Label(ResDashboard.DaysofUsagetoSample)
                </div>
                <div class="editor-field" style="width: 200px; float: left">
                    <input type="text" id="txtAUDayOfUsageToSample" value="@Model.MinMaxDayOfUsageToSample" class='numericinput numericalign' onkeypress='return onlyNumeric(event)' />
                </div>
            </li>

            <li id="liAUMeasureMethod">
                <div class="editor-label">
                    @Html.Label(ResDashboard.MeasurmentMethod)
                </div>
                <div class="editor-field" style="width: 200px; float: left">
                    @Html.DropDownListFor(model => model.MinMaxMeasureMethod, lstmeasureMethods , new { @class = "bdr",@id = "ddlAUMeasureMethod" })                
                </div>
            </li>

            <li id="liMinMaxDayOfAverage">
                <div class="editor-label">
                    @Html.Label(ResDashboard.Minimum)
                </div>
                <div class="editor-field" style="width: 200px; float: left">
                    <input type="text" id="txtMinMaxDayOfAverage" value="@Model.MinMaxDayOfAverage" class='numericinput numericalign' onkeypress='return onlyNumeric(event)' />
                </div>
            </li>

            <li id="liMinMaxMinNumberOfTimesMax">
                    <div class="editor-label">
                        @Html.Label(ResDashboard.MaximumMinimumx)
                    </div>
                    <div class="editor-field" style="width: 200px; float: left">
                        <input type="text" id="txtMinMaxMinNumberOfTimesMax" value="@Model.MinMaxMinNumberOfTimesMax" class='numericinput numericalign' onkeypress='return onlyNumeric(event)' />
                    </div>
            </li>

            <li id="liQuantumStartDate">
                <div class="editor-label">
                    @Html.Label(ResDashboard.QuantumStartDate)
                </div>
                <div class="editor-field">
                    <input type="text" id="txtQuantumStartDate" value="@Model.QuantumStartDate" class="text-box disableBack" readonly />
                </div>
            </li>
    
             <li id="liQuantumStartDate">
                    <div class="editor-label">
                        @Html.Label(ResDashboard.QuantumEndDate)
                    </div>
                    <div class="editor-field">
                        <input type="text" id="txtQuantumEndDate" value="@Model.QuantumEndDate" class="text-box disableBack" readonly />
                    </div>
             </li>
        }
        <li id="liQtyRange">
            <div class="editor-label">
                @Html.Label("Filter QOH:")
            </div>
            <div class="editor-field" style="width: 200px; float: left">
                <select id="ddlFilterQOH"  class="selectBox" style="width: 150px;"></select>
            </div>
        </li>
        <li>
            <div class="editor-label">
                @Html.Label("Selected QOH Filters:")
            </div>
            <div class="editor-field">
                <label id="lblselectedQOHFilters">
                </label>
            </div>
        </li>
        if (Model.ModuleName.ToLower() == "instockbybin" || Model.ModuleName.ToLower() == "instockbybinmargin" ||
            Model.ModuleName.ToLower() == "instockwithqoh" || Model.ModuleName.ToLower() == "instockbyactivity" 
            || Model.ModuleName.ToLower() == "precisedemandplanning"
            || Model.ModuleName.ToLower() == "precisedemandplanningbyitem")
        {
            <li>
                <div class="editor-label">
                    @Html.Label("Monthly Usages:")
                </div>
                <div class="editor-field">
                    <input type="text" id="txtMonthlyUsage" readonly="readonly" value="@Model.MonthlyAverageUsage" class='numericinput numericalign disableBack' onkeypress='return onlyNumeric(event)' />
                </div>
            </li>
        }
        if (Model.ModuleName.ToLower() == "instockbybin")
        {
            <li>
                <div class="editor-label">
                    &nbsp;@Html.Label(" ")
                </div>
                <div class="editor-field">
                    <input type="checkbox" id="chkOnlyExpirationItems" />
                    @Html.Label("Only Expiration Items")
                </div>
            </li>
        }
        if (Model.ModuleName.ToLower() == "expiringitems")
        {
            <li>
                <div class="editor-label">
                    &nbsp;@Html.Label(" ")
                </div>
                <div class="editor-field">
                    <input type="checkbox" id="chkOnlyExpiredItems" />
                    @Html.Label("Only expired items")
                </div>
            </li>
            <li id="LIDaysExpire">
                @*<div class="editor-label">
                        &nbsp;@Html.Label(" ")
                    </div>
                    <div class="editor-field">
                        <input type="text" id="txtItemsExpired" onkeypress="return isNumberKey(event);" />
                        @Html.Label("# of Days until Item Expires")
                    </div>*@
                <div class="editor-label">
                    @Html.Label("# of Days until Item Expires")
                </div>
                <div class="editor-field">
                    <input type="text" id="txtItemsExpired" onkeypress="return isNumberKey(event);" class="text-box" style="width: 130px;float:left;"
                           maxlength="4" />
                </div>
            </li>
            <li id="LIDaysApprove">
                @*<div class="editor-label">
                        &nbsp;@Html.Label(" ")
                    </div>
                    <div class="editor-field">
                        <input type="text" id="txtItemsApproved" onkeypress="return isNumberKey(event);" />
                        @Html.Label("# of Days to Approve Order")
                    </div>*@
                <div class="editor-label">
                    @Html.Label("# of Days to Approve Order")
                </div>
                <div class="editor-field">
                    <input type="text" id="txtItemsApproved" onkeypress="return isNumberKey(event);" class="text-box" style="width: 130px;float:left;"
                           maxlength="4" />
                </div>
            </li>
            <li id="LIDaysApprove">
                @*<div class="editor-label">
                        &nbsp;@Html.Label(" ")
                    </div>
                    <div class="editor-field">
                        <input type="text" id="txtItemsApproved" onkeypress="return isNumberKey(event);" />
                        @Html.Label("# of Days to Approve Order")
                    </div>*@
                <div class="editor-label">
                    @Html.Label("Item Expiration Date")
                </div>
                <div class="editor-field">
                    <input type="text" id="txtProjectExpirationDate" class="dtPicker text-box ProjectExpirationDate" style="width: 130px;float:left;"
                           maxlength="128" />
                </div>
            </li>
        }
    }
      if (Model.ModuleName.ToLower() == "ToolInStock".ToLower())
    {
        <li>
            <div class="editor-label">
                &nbsp;
            </div>
        </li>
     <li>
                <div class="editor-label">
                    &nbsp;@Html.Label(" ")
                </div>
                <div class="editor-field">
                    <input type="checkbox" id="chkincludestockedouttools" />
                    @Html.Label(ResToolMaster.Includestockedouttools)
                   
                </div>
            </li>
}
    <script type="text/javascript">
        function BindDropDownList() {
            bindCompanyList();
            var SelectedCompanyID = getSelectedID('ddlRCompany');
            bindRoomList(SelectedCompanyID, '');
            BindFilterQOHDDL();
        }
        function SetLabelText(objlblID, objddlID) {

            var selectedlist = '';
            $('.ui-multiselect-menu [type="checkbox"][id^="ui-multiselect-' + objddlID + '-option"]').each(function () {
                if ($(this).attr('checked') == 'checked') {
                    if (selectedlist.length > 0)
                        selectedlist += ',';
                    selectedlist += $(this).parent().find('span').text();
                }
            });
            $('#' + objlblID + '').text(selectedlist);
            if ($('#lblselectedCompany').length > 0) {
                var txtLength = $('#lblselectedCompany').text().length;
                if (txtLength > 100) {
                    $('.neweditorlabel').height("150px");
                    $('.neweditorlabel').css("overflow", "auto");

                }
                else {
                    //$('.neweditorlabel').height("20px");
                    $('.neweditorlabelrm').css("min-height", "100px");
                }
            }
            //lblselectedRoom
            if ($('#lblselectedRoom').length > 0) {
                var txtLength = $('#lblselectedRoom').text().length;
                if (txtLength > 100) {
                    $('.neweditorlabelrm').height("150px");
                    $('.neweditorlabelrm').css("overflow", "auto");
                }
                else {
                    //$('.neweditorlabelrm').height("20px");
                    $('.neweditorlabelrm').css("min-height", "100px");
                }
            }

        }
        function bindCompanyList(existSelected) {
            var objList = '';
            var objSelect = '';
            $.ajax({
                type: "POST",
                url: "/ReportBuilder/GetCompanyList",
                data: "",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                success: function (message) {
                    objList = message.CompanyList;
                    objSelect = message.Selected;
                },
                error: function (response) {

                }
            });

            $("#ddlRCompany > option").remove();
            $("#ddlRCompany").multiselect("refresh");
            var s = '';
            for (var i = 0; i < objList.length; i++) {
                s += '<option value=' + objList[i].key + '  >' + objList[i].value + '</option>';
            }

            $("#ddlRCompany").append(s);
            $("#ddlRCompany").multiselect({
                noneSelectedText: 'Company', selectedList: 5,
                selectedText: function (numChecked, numTotal, checkedItems) {
                    return 'Company' + ' ' + numChecked + ' ' + selected;
                }
            }).unbind("multiselectclick multiselectcheckall multiselectuncheckall").bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                if (ui.checked) {
                    $("#ddlRCompany").multiselect("widget").find(":checkbox[value='" + ui.value + "']").attr("checked", "checked");
                    $("#ddlRCompany option[value='" + ui.value + "']").attr("selected", 1);
                    SetLabelText('lblselectedCompany', 'ddlRCompany');
                    var SelectedCompanyID = getSelectedID('ddlRCompany');
                    var SelectedRoomID = getSelectedID('ddlRRoom');

                    bindRoomList(SelectedCompanyID, SelectedRoomID);

                    FillModuleItem()
                }
                else {
                    SetLabelText('lblselectedCompany', 'ddlRCompany');
                    var SelectedCompanyID = getSelectedID('ddlRCompany');
                    var SelectedRoomID = getSelectedID('ddlRRoom');
                    bindRoomList(SelectedCompanyID, SelectedRoomID);

                    FillModuleItem()
                }
            });

            for (var i = 0; i < objList.length; i++) {

                if (objList[i].key == objSelect) {
                    $("#ddlRCompany").multiselect("widget").find(":checkbox[value='" + objList[i].key + "']").attr("checked", "checked");
                    $("#ddlRCompany option[value='" + objList[i].key + "']").attr("selected", 1);
                    $("#ddlRCompany").multiselect("refresh");

                }
            }

            if (typeof (existSelected) != undefined && existSelected != null && existSelected.length > 0)
            {
                var objExistselect = existSelected.split(',');
                for (var i = 0; i < objExistselect.length; i++) {

                    for (var j = 0; j < objList.length; j++) {

                        if (objList[j].key == objExistselect[i]) {
                            $("#ddlRCompany").multiselect("widget").find(":checkbox[value='" + objList[j].key + "']").attr("checked", "checked");
                            $("#ddlRCompany option[value='" + objList[j].key + "']").attr("selected", 1);
                            $("#ddlRCompany").multiselect("refresh");
                        }
                    }
                }
            }           

            SetLabelText('lblselectedCompany', 'ddlRCompany');

        }
        function bindRoomList(objCompanyID, objExistSelected) {

           
            var objList = '';
            var objSelect = '';
            var supp = '';
            var objExistselect = objExistSelected.split(',');
            $.ajax({
                type: "POST",
                url: "/ReportBuilder/GetRoomList",
                data: JSON.stringify({ 'CompanyID': objCompanyID }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                success: function (message) {
                    objList = message.RoomList;
                    objSelect = message.Selected;

                },
                error: function (response) {

                }
            });

            $("#ddlRRoom > option").remove();
            $("#ddlRRoom").multiselect("refresh");
            var s = '';
            for (var i = 0; i < objList.length; i++) {
                s += '<option value=' + objList[i].key + '  >' + objList[i].value + '</option>';
            }
            $("#ddlRRoom").append(s);
            $("#ddlRRoom").multiselect({
                noneSelectedText: 'Room', selectedList: 5,
                selectedText: function (numChecked, numTotal, checkedItems) {
                    return 'Room' + ' ' + numChecked + ' ' + selected;
                }
            }).unbind("multiselectclick multiselectcheckall multiselectuncheckall").bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                
                if (ui.checked) {
                    $("#ddlRRoom").multiselect("widget").find(":checkbox[value='" + ui.value + "']").attr("checked", "checked");
                    $("#ddlRRoom option[value='" + ui.value + "']").attr("selected", 1);
                    SetLabelText('lblselectedRoom', 'ddlRRoom');
                                        
                    if ('@Model.ModuleName.ToLower()' == "precisedemandplanning" || '@Model.ModuleName.ToLower()' == "precisedemandplanningbyitem") {

                        var SelectedRoomIDs = getSelectedID('ddlRRoom');
                        SelectedRoomIDs = SelectedRoomIDs.replace(/,\s*$/, "");
                        var SelectedRoomID = SelectedRoomIDs.split(',');

                        if (SelectedRoomID.length > 0) {
                            if (SelectedRoomID.length == 1) {
                                FillDashboardParmForPDP(SelectedRoomID[0]);
                            }
                            else {
                                if ($('#txtAUDayOfUsageToSample') != null && $('#txtAUDayOfUsageToSample') != undefined && $('#txtAUDayOfUsageToSample').length > 0) {
                                    $('#txtAUDayOfUsageToSample').val('');
                                    $('#txtAUDayOfUsageToSample').attr('class', 'text-box disableBack');
                                }
                                if ($('#ddlAUMeasureMethod') != null && $('#ddlAUMeasureMethod') != undefined && $('#ddlAUMeasureMethod').length > 0) {
                                    $('#ddlAUMeasureMethod').find('option[value="0"]').attr('selected', 'selected');
                                    $('#ddlAUMeasureMethod').attr('disabled', 'disabled');
                                    $('#ddlAUMeasureMethod').attr('class', 'text-box disableBack');
                                }
                                if ($('#txtMinMaxDayOfAverage') != null && $('#txtMinMaxDayOfAverage') != undefined && $('#txtMinMaxDayOfAverage').length > 0) {
                                    $('#txtMinMaxDayOfAverage').val('');
                                    $('#txtMinMaxDayOfAverage').attr('class', 'text-box disableBack');
                                }
                                if ($('#txtMinMaxMinNumberOfTimesMax') != null && $('#txtMinMaxMinNumberOfTimesMax') != undefined && $('#txtMinMaxMinNumberOfTimesMax').length > 0) {
                                    $('#txtMinMaxMinNumberOfTimesMax').val('');
                                    $('#txtMinMaxMinNumberOfTimesMax').attr('class', 'text-box disableBack');
                                }
                                if ($("#txtQuantumStartDate") != null && $('#txtQuantumStartDate') != undefined && $('#txtQuantumStartDate').length > 0) {
                                    $('#txtQuantumStartDate').val('');
                                }
                                if ($("#txtQuantumEndDate") != null && $('#txtQuantumEndDate') != undefined && $('#txtQuantumEndDate').length > 0) {
                                    $('#txtQuantumEndDate').val('');
                                }
                            }
                        }
                        else {
                            if ($('#txtAUDayOfUsageToSample') != null && $('#txtAUDayOfUsageToSample') != undefined && $('#txtAUDayOfUsageToSample').length > 0) {
                                $('#txtAUDayOfUsageToSample').val('');
                                $('#txtAUDayOfUsageToSample').attr('class', 'text-box disableBack');
                            }
                            if ($('#ddlAUMeasureMethod') != null && $('#ddlAUMeasureMethod') != undefined && $('#ddlAUMeasureMethod').length > 0) {
                                $('#ddlAUMeasureMethod').find('option[value="0"]').attr('selected', 'selected');
                                $('#ddlAUMeasureMethod').attr('disabled', 'disabled');
                                $('#ddlAUMeasureMethod').attr('class', 'text-box disableBack');
                            }
                            if ($('#txtMinMaxDayOfAverage') != null && $('#txtMinMaxDayOfAverage') != undefined && $('#txtMinMaxDayOfAverage').length > 0) {
                                $('#txtMinMaxDayOfAverage').val('');
                                $('#txtMinMaxDayOfAverage').attr('class', 'text-box disableBack');
                            }
                            if ($('#txtMinMaxMinNumberOfTimesMax') != null && $('#txtMinMaxMinNumberOfTimesMax') != undefined && $('#txtMinMaxMinNumberOfTimesMax').length > 0) {
                                $('#txtMinMaxMinNumberOfTimesMax').val('');
                                $('#txtMinMaxMinNumberOfTimesMax').attr('class', 'text-box disableBack');
                            }
                            if ($("#txtQuantumStartDate") != null && $('#txtQuantumStartDate') != undefined && $('#txtQuantumStartDate').length > 0) {
                                $('#txtQuantumStartDate').val('');
                            }
                            if ($("#txtQuantumEndDate") != null && $('#txtQuantumEndDate') != undefined && $('#txtQuantumEndDate').length > 0) {
                                $('#txtQuantumEndDate').val('');
                            }
                        }
                    }

                    FillModuleItem()
                }
                else {                    
                    SetLabelText('lblselectedRoom', 'ddlRRoom');
                    
                    if ('@Model.ModuleName.ToLower()' == "precisedemandplanning"
                        || '@Model.ModuleName.ToLower()' == "precisedemandplanningbyitem") {
                        var SelectedRoomIDs = getSelectedID('ddlRRoom');
                        SelectedRoomIDs = SelectedRoomIDs.replace(/,\s*$/, "");
                        var SelectedRoomID = SelectedRoomIDs.split(',');

                        if (SelectedRoomID.length > 0) {
                            if (SelectedRoomID.length == 1) {
                                FillDashboardParmForPDP(SelectedRoomID[0]);
                            }
                            else {
                                if ($('#txtAUDayOfUsageToSample') != null && $('#txtAUDayOfUsageToSample') != undefined && $('#txtAUDayOfUsageToSample').length > 0) {
                                    $('#txtAUDayOfUsageToSample').val('');
                                    $('#txtAUDayOfUsageToSample').attr('class', 'text-box disableBack');
                                }
                                if ($('#ddlAUMeasureMethod') != null && $('#ddlAUMeasureMethod') != undefined && $('#ddlAUMeasureMethod').length > 0) {
                                    $('#ddlAUMeasureMethod').find('option[value="0"]').attr('selected', 'selected');
                                    $('#ddlAUMeasureMethod').attr('disabled', 'disabled');
                                    $('#ddlAUMeasureMethod').attr('class', 'text-box disableBack');
                                }
                                if ($('#txtMinMaxDayOfAverage') != null && $('#txtMinMaxDayOfAverage') != undefined && $('#txtMinMaxDayOfAverage').length > 0) {
                                    $('#txtMinMaxDayOfAverage').val('');
                                    $('#txtMinMaxDayOfAverage').attr('class', 'text-box disableBack');
                                }
                                if ($('#txtMinMaxMinNumberOfTimesMax') != null && $('#txtMinMaxMinNumberOfTimesMax') != undefined && $('#txtMinMaxMinNumberOfTimesMax').length > 0) {
                                    $('#txtMinMaxMinNumberOfTimesMax').val('');
                                    $('#txtMinMaxMinNumberOfTimesMax').attr('class', 'text-box disableBack');
                                }
                                if ($("#txtQuantumStartDate") != null && $('#txtQuantumStartDate') != undefined && $('#txtQuantumStartDate').length > 0) {
                                    $('#txtQuantumStartDate').val('');
                                }
                                if ($("#txtQuantumEndDate") != null && $('#txtQuantumEndDate') != undefined && $('#txtQuantumEndDate').length > 0) {
                                    $('#txtQuantumEndDate').val('');
                                }
                            }
                        }
                        else {
                            if ($('#txtAUDayOfUsageToSample') != null && $('#txtAUDayOfUsageToSample') != undefined && $('#txtAUDayOfUsageToSample').length > 0) {
                                $('#txtAUDayOfUsageToSample').val('');
                                $('#txtAUDayOfUsageToSample').attr('class', 'text-box disableBack');
                            }
                            if ($('#ddlAUMeasureMethod') != null && $('#ddlAUMeasureMethod') != undefined && $('#ddlAUMeasureMethod').length > 0) {
                                $('#ddlAUMeasureMethod').find('option[value="0"]').attr('selected', 'selected');
                                $('#ddlAUMeasureMethod').attr('disabled', 'disabled');
                                $('#ddlAUMeasureMethod').attr('class', 'text-box disableBack');
                            }
                            if ($('#txtMinMaxDayOfAverage') != null && $('#txtMinMaxDayOfAverage') != undefined && $('#txtMinMaxDayOfAverage').length > 0) {
                                $('#txtMinMaxDayOfAverage').val('');
                                $('#txtMinMaxDayOfAverage').attr('class', 'text-box disableBack');
                            }
                            if ($('#txtMinMaxMinNumberOfTimesMax') != null && $('#txtMinMaxMinNumberOfTimesMax') != undefined && $('#txtMinMaxMinNumberOfTimesMax').length > 0) {
                                $('#txtMinMaxMinNumberOfTimesMax').val('');
                                $('#txtMinMaxMinNumberOfTimesMax').attr('class', 'text-box disableBack');
                            }
                            if ($("#txtQuantumStartDate") != null && $('#txtQuantumStartDate') != undefined && $('#txtQuantumStartDate').length > 0) {
                                $('#txtQuantumStartDate').val('');
                            }
                            if ($("#txtQuantumEndDate") != null && $('#txtQuantumEndDate') != undefined && $('#txtQuantumEndDate').length > 0) {
                                $('#txtQuantumEndDate').val('');
                            }
                        }
                    }
                    FillModuleItem()
                }
            });
            
            $("#ddlRRoom").multiselect("refresh");

            var selectedLtext = '';
            for (var i = 0; i < objList.length; i++) {

                if (objList[i].key == objSelect) {
                    $("#ddlRRoom").multiselect("widget").find(":checkbox[value='" + objList[i].key + "']").attr("checked", "checked");
                    $("#ddlRRoom option[value='" + objList[i].key + "']").attr("selected", 1);
                    $("#ddlRRoom").multiselect("refresh");

                }
            }
            for (var i = 0; i < objExistselect.length; i++) {

                for (var j = 0; j < objList.length; j++) {

                    if (objList[j].key == objExistselect[i]) {
                        $("#ddlRRoom").multiselect("widget").find(":checkbox[value='" + objList[j].key + "']").attr("checked", "checked");
                        $("#ddlRRoom option[value='" + objList[j].key + "']").attr("selected", 1);
                        $("#ddlRRoom").multiselect("refresh");

                    }
                }
            }
            SetLabelText('lblselectedRoom', 'ddlRRoom');

        }

        $(document).ready(function () {
            $('#txtProjectExpirationDate').off("blur");
            $('#txtProjectExpirationDate').blur(function () { }).datepicker({
                dateFormat: RoomDateJSFormat, changeMonth: true,
                changeYear: true
            });
            BindDropDownList();

        });


        function BindFilterQOHDDL() {
            
            $("#ddlFilterQOH > option").remove();            
            $("#ddlFilterQOH").multiselect('destroy');
            $("#ddlFilterQOH").multiselectfilter('destroy');
            
            var s = '';
            s += '<option value="QOH1" >@QOHBelowCritical</option>';
            s += '<option value="QOH2" >@QOHBelowMinimum</option>';
            s += '<option value="QOH3" >@QOHBelowMaximum</option>';
            s += '<option value="QOH4" >@QOHAboveMaximum</option>';
            

            $("#ddlFilterQOH").append(s);
            if ($("#ddlFilterQOH").length > 0) {
                $("#ddlFilterQOH")[0].selectedIndex = -1;
            }
            $("#ddlFilterQOH").multiselect("refresh");
            $("#ddlFilterQOH").multiselectfilter('refresh');

            $("#ddlFilterQOH").multiselect({
                noneSelectedText: 'Select QOH Filter', selectedList: 5,
                selectedText: function (numChecked, numTotal, checkedItems) {
                    return 'QOH Filter' + ' ' + numChecked + ' ' + selected;
                },
                header: false
            }).unbind("multiselectclick").bind("multiselectclick", function (event, ui) {
                if (ui.checked) {

                    var uiLastest = ui;
                    $("#ddlFilterQOH").multiselect("uncheckAll");


                    ui = uiLastest;
                    $("ul.ui-multiselect-checkboxes li").each(function () {
                        if ($(this).find("input[type=checkbox]").val() == $.trim(ui.value)) {
                            $(this).find("input[type=checkbox]").attr("checked", "checked");
                        }
                    });


                  //  $("#ddlFilterQOH").multiselect("widget").find(":checkbox[value='" + ui.value + "']").attr("checked", "checked");
                  //  $("#ddlFilterQOH option[value='" + ui.value + "']").attr("selected", 1);


                    SetLabelText('lblselectedQOHFilters', 'ddlFilterQOH');
                    if (!(typeof (IsEnterpriseQLRangeSelected) != "undefined" && IsEnterpriseQLRangeSelected())) {
                        FillModuleItem();
                    }                    
                }
                else {
                    SetLabelText('lblselectedQOHFilters', 'ddlFilterQOH');
                    if (!(typeof (IsEnterpriseQLRangeSelected) != "undefined" && IsEnterpriseQLRangeSelected())) {
                        FillModuleItem();
                    }                    
                }
            });
            SetLabelText('lblselectedQOHFilters', 'ddlFilterQOH');
        }
        function isNumberKey(evt) {


            var keyCode = [evt.keyCode || evt.which];

            if (keyCode == 8 || keyCode == 13 || keyCode == 9)
                return true;
            if (keyCode > 57 || keyCode < 48)
                return false;
            else
                return true;
        }
        $("input#txtItemsExpired").change(function () {
            FillModuleItem();
        });
        $("input#txtItemsApproved").change(function () {
            FillModuleItem();
        });

        $("input#txtAUDayOfUsageToSample").change(function () {            
            var AUDayOfUsageToSample = $(this).val();
            if (AUDayOfUsageToSample != null && AUDayOfUsageToSample != "") {
                $.ajax({
                    type: "POST",
                    url: "/ReportBuilder/GetQuantamStartEndDate",
                    data: JSON.stringify({ 'AUDayOfUsageToSample': AUDayOfUsageToSample }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    async: false,
                    success: function (message) {                        
                        if (message.QuantumStartDate != null)
                            $("#txtQuantumStartDate").val(message.QuantumStartDate);
                        else
                            $("#txtQuantumStartDate").val("");

                        if (message.QuantumEndDate != null)
                            $("#txtQuantumEndDate").val(message.QuantumEndDate);
                        else
                            $("#txtQuantumEndDate").val("");
                    },
                    error: function (response) {
                        $("#txtQuantumStartDate").val("");
                        $("#txtQuantumEndDate").val("");
                    }
                });
            }
        });        

    </script>
}