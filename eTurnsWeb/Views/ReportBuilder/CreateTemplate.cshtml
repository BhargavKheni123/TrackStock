@model eTurns.DTO.ReportBuilderDTO
@{
    ViewBag.Title = "CreateTemplate";
    bool IsReportInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    bool IsReportEdit = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    bool IsReportDelete = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.Delete);
    RoomDTO rm = new eTurns.DAL.RoomDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName).GetRoomByIDPlain(eTurnsWeb.Helper.SessionHelper.RoomID);

    //List<ReportBuilderDTO> lstReport = ViewBag.ReportType;
    //ViewBag.ReportType = lstReport.Where(x => x.ReportFileName != "RPT_Pulls_for_Excel.rdlc").ToList();

    //System.Xml.Linq.XElement Settinfile = System.Xml.Linq.XElement.Load(HttpContext.Current.Server.MapPath("/SiteSettings.xml"));

    //string NotAllowedCharacterList = Settinfile.Element("AllowedCharacter") != null ? Settinfile.Element("AllowedCharacter").Value : string.Empty;
    string NotAllowedCharacterList = eTurns.DTO.SiteSettingHelper.AllowedCharacter;
    string CharCodeList = string.Empty;

    bool prev_IsEntReport = true;
    int currentNotificationCount = 5;

    //NotAllowedCharacterList = obj.NotAllowedCharacter;
    if (NotAllowedCharacterList != null && (!string.IsNullOrEmpty(NotAllowedCharacterList)))
    {
        string value = NotAllowedCharacterList;
        string strDelimitor = "||";

        //
        // Split the string on multiple characters.
        // ... The return value from Split is a string[] array.
        //
        string[] lines = value.Split(new[] { strDelimitor }, StringSplitOptions.None);
        foreach (string s in lines)
        {
            foreach (char c in s.ToCharArray())
            {
                int unicode = c;
                if (!string.IsNullOrEmpty(CharCodeList))
                {
                    CharCodeList = CharCodeList + "," + unicode;
                }
                else
                {
                    CharCodeList = Convert.ToString(unicode);
                }
            }
        }
    }

    long rID = ViewBag.ReportID ?? 0;
    long parentID = ViewBag.ParentID ?? 0;
    string urlGetReportDetailByID = Url.Action("GetReportDetailByID", "ReportBuilder");
    string urlGetReportDetail = Url.Action("GetReportDetail", "ReportBuilder");
    string urlGetChildReportList = Url.Action("GetChildReportList", "ReportBuilder");
    string urlGetVerticalReportDetail = Url.Action("GetVerticalReportDetail", "ReportBuilder");
    string urlGetGroupingReportDetail = Url.Action("GetGroupingReportDetail", "ReportBuilder");
}
<script type="text/javascript" src="@Url.Content("~/Scripts/colResizable-1.6.min.js")"></script>
<style>
    table.resizable td {
        overflow: hidden;
    }

    table.resizable {
        table-layout: fixed;
    }

        table.resizable input {
            width: 100%;
        }

        table.resizable textarea {
            width: 100%;
        }

    .nowrap {
        white-space: nowrap;
    }

    #imgdelete {
        cursor: pointer;
        margin-right: 2px;
    }


    #tbldetaildest td {
        overflow: hidden;
    }

    .ontop {
        z-index: 999;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        display: none;
        position: absolute;
        background-color: #cccccc;
        color: #aaaaaa;
        /*opacity: .5;*/
        background: url(50%-transparent-white.png);
        background: rgba(255,255,255,0.5);
        /*filter: alpha(opacity = 50);*/
    }

    #popup {
        width: 300px;
        height: 200px;
        position: absolute;
        color: #000000;
        background-color: #F8EFFB; /* To align popup window at the center of screen*/
        top: 50%;
        left: 50%;
        margin-top: -100px;
        margin-left: -150px;
        border: 2px solid #2181d4;
        border-radius: 5px;
    }

    .divfieldlist1 ul li {
        margin: 5px 10px;
        padding: 5px 10px;
        list-style: none;
        color: #000;
        background-color: #CECEF6;
        cursor: pointer;
        width: 150px;
    }

    .container ul {
        list-style-type: none;
        white-space: nowrap;
        overflow-x: auto;
    }

    .container li {
        border: solid 1px grey;
        display: block;
        float: left;
        height: 35px;
        line-height: 35px;
        list-style-type: none;
        margin: 5px;
        text-align: center;
        width: 100px;
    }

    .TFtable {
        width: 100%;
        border-collapse: collapse;
    }

        .TFtable td {
            padding: 7px;
            border: #4e95f4 1px solid;
        }
        /* provide some minimal visual accomodation for IE8 and below */
        .TFtable tr {
            background: #b8d1f3;
        }

    span.ChangeText {
        overflow-wrap: break-word;
        display: block;
        width: inherit;
    }
</style>
<div class="createReport">
    <div class="leftArea">
        <div class="firstDropdown">
            @Html.DropDownListFor(model => model.ReportName, new SelectList(ViewBag.ReportType, "ID", "ReportResourceName", Model.ReportName), "", new { @style = "width:100px;", @class = "selectBox", @id = "ddlReportType" })
        </div>
        <div class="firstDropdown">
            <select id="ddlChildReport" class="selectBox" style="width: 100px;" name="ChildReportName"></select>
        </div>
        <div class="leftTopTable" id="dvHeaderlist">
            <table cellspacing="0" cellpadding="0" id="tblHeaderList">
                <tbody></tbody>
            </table>
        </div>
        <div class="leftTopTable" id="dvLineItemlist">
            <table cellspacing="0" cellpadding="0" id="tblLineItemList">
                <tbody></tbody>
            </table>
        </div>
        <div class="leftTopTable" id="dvGrouplist">
            <table cellspacing="0" cellpadding="0" id="tblGroupList">
                <tbody></tbody>
            </table>
        </div>
    </div>
    <div class="rightArea">
        <div class="buttonGroup">
            <input type="button" value="@eTurns.DTO.ResReportMaster.Italic" id="btnitalic" class="CreateBtn" style="width:50px;" />
            <input type="button" value="@eTurns.DTO.ResReportMaster.Bold" id="btnBold" class="CreateBtn" style="width:50px;" />
            <input type="button" value="@eTurns.DTO.ResReportMaster.Normal" id="btnNormal" class="CreateBtn" style="width:50px;" />
            <input type="button" value="@eTurns.DTO.ResReportMaster.left" id="btnleft" class="CreateBtn" style="width:50px;" />
            <input type="button" value="@eTurns.DTO.ResReportMaster.Middle" id="btnmiddle" class="CreateBtn" style="width:50px;" />
            <input type="button" value="@eTurns.DTO.ResReportMaster.Right" id="btnright" class="CreateBtn" style="width:50px;" />
            <input type="button" value="@ResCommon.AddRow" id="btnAddRow" class="CreateBtn" style="width:60px;" />
            <input type="button" style="width: auto;" value="@ResCommon.RemoveRow" id="btnRemoveRow" class="CreateBtn" />
            <select id="ddlPagesetUp" class="selectBox" style="width: 87px;margin-left:10px;">
                <option value="0">@eTurns.DTO.ResReportMaster.Select</option>
                <option value="1">@eTurns.DTO.ResReportMaster.Portrait</option>
                <option value="2">@eTurns.DTO.ResReportMaster.Landscape</option>
            </select>
            <span id="lblReportWidth"></span>
            <span id="spanSpace" style="width:10px;">&nbsp;</span>
            <span id="lblCurrentWidth"></span>
        </div>
        <div class="RightbuttonGroup">
            <input type="submit" style="width: auto;" value="@eTurns.DTO.Resources.ResCommon.AddBlankColumns" id="btnAddBlankColumns" class="CreateBtn" />
            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnSave" class="CreateBtn" />
            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.SaveAs" id="btnsaveas" class="CreateBtn" />
            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Reset" id="btnReset" class="CreateBtn" />
            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnCatCancel" class="CreateBtn" />
        </div>
        <div class="detailTable" id="dvHeaderDet">
            <table style="width: 8.50in;" border="0" cellspacing="0" cellpadding="0" id="tblHeaderDet">
                <tbody></tbody>
            </table>
        </div>
        <div class="itemNumber" style="min-height: 50px;" id="dvdetaildest">
            <table border="0" cellspacing="0" cellpadding="0" id="tbldetaildest" style="width: 10.45in">
                <tbody>
                    <tr id="trdetail" class="connectedSortable" style="height: 100px;"></tr>
                </tbody>
            </table>
        </div>
        <div class="itemNumber" style="min-height: 50px;" id="dvGroupdetaildest">
            <table style="width: 10.45in" border="0" cellspacing="0" cellpadding="0" id="tblGroupdetaildest">
                <tbody>
                    <tr id="trGroupdetail" class="connectedSortable" style="height: 100px"></tr>
                </tbody>
            </table>
        </div>
        <div style="float: left; width: 99%;" id="divPofRBB">
            <div id="dvsortingPV" class="bottomTable">
            </div>
            <div class="bottomTable">
                <table style="width: 98%;" border="0" cellspacing="0" cellpadding="0">
                    <tr style="display: none">
                        <td>
                            <input type="checkbox" id="chkIsDateRange" class="check-box" />
                            <label>
                                @eTurns.DTO.ResReportMaster.IncludeDateRange
                            </label>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="checkbox" id="chkIncludeTotal" class="check-box" />
                            <label>
                                @eTurns.DTO.ResReportMaster.IncludeTotal
                            </label>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="checkbox" id="chkIncludeSubTotal" class="check-box" />
                            <label>
                                @eTurns.DTO.ResReportMaster.IncludeSubTotal
                            </label>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="checkbox" id="chkIncludeGrandTotal" class="check-box" />
                            <label>
                                @eTurns.DTO.ResReportMaster.IncludeGrandTotal
                            </label>
                        </td>
                    </tr>
                    <tr id="trTax1" style="display: none">
                        <td>
                            <input type="checkbox" id="chkIncludeTax1" class="check-box" />
                            <label>
                                @eTurns.DTO.ResReportMaster.Include @(rm.Tax1name)@@ @(rm.Tax1Rate.GetValueOrDefault(0))
                            </label>
                        </td>
                    </tr>
                    <tr id="trTax2" style="display: none">
                        <td>
                            <input type="checkbox" id="chkIncludeTax2" class="check-box" />
                            <label>
                                @eTurns.DTO.ResReportMaster.Include @(rm.tax2name)@@ @(rm.Tax2Rate.GetValueOrDefault(0))
                            </label>
                        </td>
                    </tr>
                    <tr style="display: none">
                        <td>
                            <input type="checkbox" id="chkIncludeRoomDetail" class="check-box" />
                            <label>
                                @eTurns.DTO.ResReportMaster.IncludeRoomDetail
                            </label>
                        </td>
                    </tr>
                    <tr style="display: none">
                        <td>
                            @*<input type="checkbox" id="chkIncludeGroup" class="check-box" />*@
                            <label>
                                @eTurns.DTO.ResReportMaster.GroupBy &nbsp;&nbsp;
                            </label>
                            <div style="display: none;">
                                <select id="ddlGroupName" multiple="multiple" name="example-basic" size="5" class="text-box"
                                        style="width: 150px;"></select>
                            </div>
                            <select id="ddlRPTGroupBy" name="ddlRPTGroupBy" class="select" style="width: 150px;"></select>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="bottomTable">
                <table style="width: 100%;" border="0" cellspacing="0" cellpadding="0">
                    <tr id="trSetAsDefaultPrintReport" style=" width 100%;">
                        <td>
                            @eTurns.DTO.ResReportMaster.SetAsDefaultPrint &nbsp;&nbsp;
                        </td>
                        <td>
                            <input type="checkbox" id="chkSetAsDefaultPrintReport" class="check-box" />
                        </td>
                    </tr>
                    <tr id="trSetAsDefaultPrintReportForAllRoom" style="display:none;">
                        <td>
                            @eTurns.DTO.ResReportMaster.SetAsDefaultPrintForAllRoom &nbsp;&nbsp;
                        </td>
                        <td>
                            <input type="checkbox" id="chkSetAsDefaultPrintReportForAllRoom" class="check-box" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @eTurns.DTO.ResReportMaster.MakeAsPrivate
                        </td>
                        <td>
                            <input type="checkbox" id="chkIsPrivate" class="check-box" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @eTurns.DTO.ResReportMaster.HideHeader
                        </td>
                        <td>
                            <input type="checkbox" id="chkHideHeader" class="check-box" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @eTurns.DTO.ResReportMaster.ShowSignature
                        </td>
                        <td>
                            <input type="checkbox" id="chkShowSignature" class="check-box" />
                        </td>
                    </tr>
                    @if (eTurnsWeb.Helper.SessionHelper.UserType <= 2)
                    {
                        <tr>
                            <td>
                                @eTurns.DTO.ResReportMaster.MakeasEnterpriseReport
                            </td>
                            <td>
                                <input type="checkbox" id="chkIsEnterprise" class="check-box" />
                                <input type="hidden" id="hdn_prev_IsEntReport" value="" />
                                <input type="hidden" id="hdn_currentNotificationCount" value="" />

                            </td>
                        </tr>
                    }
                    @*@if (eTurnsWeb.Helper.SessionHelper.RoleID == -1)
                        {
                            <tr>
                                <td>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.ReportAppIntent)
                                    </div>
                                </td>
                                <td>
                                    <div class="editor-field">
                                        @Html.DropDownListFor(model => model.ReportAppIntent, new SelectList(
                                    new[] {
                                        new {ID = "ReadOnly", Name = "ReadOnly"},
                                        new {ID = "ReadWrite", Name = "ReadWrite"}
                                    }, "ID", "Name", Model.ReportAppIntent), new { @class = "selectBox" })
                                        <span class="ErrorMessage">@Html.ValidationMessageFor(model => model.ReportAppIntent)</span>

                                    </div>
                                </td>
                            </tr>
                        }*@
                </table>
            </div>
        </div>
        <div class="bottomButtonGroup" style="width: 99%;">
            <span>@eTurns.DTO.ResReportMaster.ReportName: </span>
            <input type="text" id="hdnsaveasreport" value="" onkeypress="return AllowCharactersOnly(event);" />
            <div class="makePrivate">
                <label>
                </label>
                &nbsp;&nbsp;&nbsp;
                <label>
                </label>
            </div>
            <div class="makePrivate">
            </div>
            @if (IsReportEdit)
            {
                <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnbSave" class="CreateBtn" />
            }
            @if (IsReportInsert)
            {
                <input type="submit" value="@eTurns.DTO.ResReportMaster.SaveAs" id="btnbsaveas" class="CreateBtn" />
            }
            <input type="submit" value="@eTurns.DTO.ResInventoryAnalysis.Reset" id="btnbReset" class="CreateBtn" />
            <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnbCatCancel" class="CreateBtn" />
            @if (IsReportDelete)
            {
                <div style="float: right; width: 50%">
                    <input type="button" value="@eTurns.DTO.ResReportMaster.Delete" id="btnCDelete" style="display: none; float: right;"
                           class="CreateBtn DeleteReport" />
                </div>
            }
        </div>
    </div>
</div>
<input type="hidden" id="hdnsubReport" />
<input type="hidden" id="hdnReportType" />
<input type="hidden" id="hdnReportName" />
<input type="hidden" id="hdnSubReportParam" />
<input type="hidden" id="hdnRowGroup" />
<input type="hidden" id="hdntdcolor" value="" />
<input type="hidden" id="hdntdid" value="" />
<input type="hidden" id="hdnMasterReportResFile" value="" />
<input type="hidden" id="hdnSuReportResFile" value="" />
<input type="hidden" id="hdnModuleName" value="" />
<div id="dvtemp" style="display: none;">
</div>
<div id="popDiv" class="ontop">
    <ul id="popup">
        <li style="margin-top: 10px;">
            <div class="editor-label" style="float: left; margin-top: 20px; margin-left: 20px">
                @eTurns.DTO.ResReportMaster.ReportName:<em> *</em>
            </div>
            <div class="editor-field">
                <input type="text" id="txtreportname" onkeypress="return AllowCharactersOnly(event);" class="text-box" style="background: none repeat scroll 0 0 #FFF;
                    float: left; margin-top: 20px;" />
            </div>
        </li>
        <li id="liIsEntReport" style="margin-top: 10px;display:none">
            <div class="editor-label" style="float: left; margin-top: 20px; margin-left: 20px">
                @eTurns.DTO.ResReportMaster.ISEnterpriseReport:
                <input type="checkbox" id="chkIsEntReport" class="check-box" />
            </div>
        </li>
        <li>
            <div class="editor-label">
            </div>
            <div class="editor-field" style="float: left; margin-top: 40px; margin-left: 100px">
                <ul style="float: left;">
                    <li style="float: left;">
                        <input type="button" value="@ResCommon.Save" id="btnssave" class="CreateBtn" />
                    </li>
                    <li style="float: left; margin-left: 5px;">
                        <input type="button" value="@ResCommon.Cancel" id="btnscancel" class="CreateBtn" />
                    </li>
                </ul>
            </div>
        </li>
    </ul>
</div>


<div class="dialog" id="EntReportWorningDialog" style="float: left; display: none; width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="Message" style="float: left; text-align: left; padding-left: 10px;">
            <b>@ResReportMaster.EntReportWorning </b>
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="WModelYesClick()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />@eTurns.DTO.Resources.ResCommon.Yes
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="WModelNoClick()">
                <img src="~/Content/images/no.png" alt="@eTurns.DTO.Resources.ResCommon.No" />@eTurns.DTO.Resources.ResCommon.No
            </a>
        </p>
    </div>
</div>


<script language="JavaScript" type="text/javascript">
    var obLeftWidth, obRightWidth;
    var ob;
    var obLeft;
    var obRight;
    var over = false;
    var iEdgeThreshold = 10;

    function findPos(obj) {
        var curleft = curtop = 0;
        if (obj.offsetParent) {
            curleft = obj.offsetLeft;
            curtop = obj.offsetTop;
            while (obj = obj.offsetParent) {
                curleft += obj.offsetLeft;
                curtop += obj.offsetTop;
            }
        }
        return [curleft, curtop];
    }

    /* Function that tells me if on the border or not */
    function isOnBorderRight(objTable, objTh, event) {
        var width = objTh.offsetWidth;
        var left = objTh.offsetLeft;
        var pos = findPos(objTable);
        var absRight = pos[0] + left + width;

        if (event.clientX > (absRight - iEdgeThreshold)) {
            return true;
        }

        return false;
    }

    function getNodeName(objReference, nodeName) {
        var oElement = objReference;
        while (oElement != null && oElement.tagName != null) {
            if (oElement.tagName.toUpperCase() == nodeName) {
                return oElement;
            }
            oElement = oElement.parentNode;
        }
        return null;
    }

    function doResize(objTh, event) {
        if (!event) event = window.event;
        var objTable = getNodeName(objTh, "TABLE");
        if (isOnBorderRight(objTable, objTh, event)) {
            over = true;
            objTh.style.cursor = "e-resize";
        }
        else {
            over = false;
            objTh.style.cursor = "";
        }
        return over;
    }

    function doneResizing() {
        over = false;
    }

    function MD(event) {

        if (!event) event = window.event;

        MOUSTSTART_X = event.clientX;
        MOUSTSTART_Y = event.clientY;

        if (over) {
            if (event.srcElement) ob = event.srcElement;
            else if (event.target) ob = event.target;
            else return;

            obRight = ob.nextSibling;
            obwidth = parseInt(ob.style.width);

            if (obLeft != null)
                obLeftWidth = parseInt(obLeft.style.width);
            if (obRight != null)
                obRightWidth = parseInt(obRight.style.width);
        }
    }

    function MM(event) {

        if (!event) event = window.event;

        if (ob) {

            st = event.clientX - MOUSTSTART_X + obwidth;

            if (st >= 10) {

                ob.style.width = st + 'px';

            }

            if (document.selection) document.selection.empty();
            else if (window.getSelection) window.getSelection().removeAllRanges();
        }
    }

    function MU(event) {

        if (!event) event = window.event;
        if (ob) {
            ob.style.width = st + 'px';
            //$(ob).find(".divLineDrag").html(asinches);

            RecalcTableeleWidth();
            //$("#tbldetaildest").css("width", "1200px");
            //$("#dvdetaildest").css("width", "1200px");
            if (document.selection) document.selection.empty();
            else if (window.getSelection) window.getSelection().removeAllRanges();
            ob = null;
        }
    }

    @*document.onmousedown = MD;
    document.onmousemove = MM;
    document.onmouseup = MU;*@
</script>
<script type="text/javascript" language="javascript">
    var charCode = '@CharCodeList';
    $('#btnbCatCancel').on('click', function (e) {
        if ($('#ddlChildReport').length > 0 && parseInt($('#ddlChildReport').val()) > 0) {
            $('#ddlChildReport').val('0').change();
        }
        else if ($('#ddlReportType').length > 0 && parseInt($('#ddlReportType').val()) > 0) {
            $('#ddlReportType').val('').change();
        }
        $('#chkIncludeTotal,#chkIncludeSubTotal,#chkIncludeGrandTotal,#chkIsPrivate,#chkIsEnterprise,#chkHideHeader,#chkShowSignature,#chkSetAsDefaultPrintReportForAllRoom').removeAttr('checked');
        $('#trSetAsDefaultPrintReportForAllRoom').css('display', 'none');
    });

    $('#chkSetAsDefaultPrintReport').on('change', function (e) {
        if ($(this).attr('checked') == 'checked') {
            $('#trSetAsDefaultPrintReportForAllRoom').css('display', 'block');
        }
        else {
            $('#chkSetAsDefaultPrintReportForAllRoom').prop('checked', false);
            $('#trSetAsDefaultPrintReportForAllRoom').css('display', 'none');
        }
    });

    $('#chkIncludeGrandTotal').on('change', function (e) {
        if ($(this).attr('checked') == 'checked') {
            $('#chkIncludeTotal').attr('checked', 'checked');
        }
        else if ($('#chkIncludeTax1').attr('checked') == 'checked' || $('#chkIncludeTax2').attr('checked') == 'checked') {
            $(this).attr('checked', 'checked');
        }
    });

    $('#chkIncludeSubTotal').on('change', function (e) {
        if ($(this).attr('checked') == 'checked') {
            $('#chkIncludeTotal').attr('checked', 'checked');
        }
    });

    $('#chkIncludeTotal').on('change', function (e) {
        if ($('#chkIncludeGrandTotal').attr('checked') == 'checked' || $('#chkIncludeGrandTotal').attr('checked') == 'checked') {
            $(this).attr('checked', 'checked');
        }
        RecalcTableeleWidth();
    });

    $('#chkIncludeTax1,#chkIncludeTax2').on('change', function (e) {
        if ($(this).attr('checked') == 'checked') {
            $('#chkIncludeTotal').attr('checked', 'checked');
            $('#chkIncludeGrandTotal').attr('checked', 'checked');
        }
    });

    $('#btnCDelete').on('click', function (e) {
        if ($('#ddlChildReport').length > 0 && parseInt($('#ddlChildReport').val()) > 0) {

            $.ajax({
                url: '@Url.Content("~/ReportBuilder/GetChildReportsFromParentID")',
                data: JSON.stringify({ 'ParentReportID': $('#ddlChildReport').val() }),
                dataType: 'json',
                contentType: 'application/json',
                type: 'POST',
                async: false,
                cache: false,
                success: function (result) {
                    if (result.hasChildReport) {
                        $('#ListofChildReport').find('#spChildReports').text(result.ReportsName);
                        $('#ListofChildReport').modal();
                    }
                    else {
                        $('#ConfirmReportDeleteModel').find('#hndReportID').val($('#ddlChildReport').val());
                        $('#ConfirmReportDeleteModel').modal();
                    }
                    //window.location = window.location;
                }
            });

            //$('#ConfirmReportDeleteModel').find('#hndReportID').val($('#ddlChildReport').val());
            //$('#ConfirmReportDeleteModel').modal();
        }
    });



    var dbGroupList;
    var onSampleResized;
    function RecalcTableeleWidth() {
        var totpixs = 0;
        var totInches = 0;
        setTimeout(function () {
            if ($("#tbldetaildest").find("td").length > 1) {
                $("#tbldetaildest").find("td").each(function (indx, objtd) {
                    if ($(this).css('display') != 'none') {
                        var asinches = ConvertPXtoInch($(objtd).width() + 'px');
                        asinches = parseFloat(Math.round(asinches * 20) / 20).toFixed(2);;
                        $(this).css('width', (asinches * 96).toFixed(2) + 'px');
                        totpixs = totpixs + parseInt($(objtd).width())
                        totInches = totInches + parseFloat(asinches);
                        //$(objtd).find(".divLineDrag").html("<span style='color:white;'>" + asinches + "in</span>" + "&nbsp;&nbsp;<span style='color:white;'>" + $(objtd).width() + "px</span>");
                        $(objtd).find(".divLineDrag").html("<span style='color:white;'>" + asinches + "in</span>");
                    }
                });
            }
            else if ($("#tblGroupdetaildest").find("td").length > 1) {
                $("#tblGroupdetaildest").find("td").each(function (indx, objtd) {
                    if ($(this).css('display') != 'none') {
                        var asinches = ConvertPXtoInch($(objtd).width() + 'px');
                        asinches = parseFloat(Math.round(asinches * 20) / 20).toFixed(2);
                        $(this).css('width', parseFloat((asinches * 96).toFixed(2) + 'px'));
                        totpixs = totpixs + parseInt($(objtd).width())
                        totInches = totInches + parseFloat(asinches);
                        $(objtd).find(".divLineDrag").html("<span style='color:white;'>" + asinches + "in</span>");
                    }
                });
            }

            //totpixs = totpixs - 2;
            var totalInchesToDisplay = 0;
            if ($('#chkIncludeTotal').is(':checked'))
                totalInchesToDisplay = (totInches + 1);
            else
                totalInchesToDisplay = totInches;


            if ($('div#dvHeaderDet').css('display') != 'none') {
                $('table#tblHeaderDet tbody tr').find('td').each(function (indx, objtd) {
                    //$(this).css('width', '1.975in');
                    //if ((indx % 2) == 0) {
                    //    $(this).css('width', '0.975in');
                    //}
                    //else {
                    //    $(this).css('width', '2.975in');
                    //}

                    if ($('#ddlPagesetUp').val() == 1) {
                        //TODO: Start WI-3754
                        //tablecolumn += '<Width>1.975in</Width>\n';
                        if ((indx % 2) == 0)
                            $(this).css('width', '1.00in');
                        else
                            $(this).css('width', '2.95in');
                        //TODO: End WI-3754
                    }
                    else if ($('#ddlPagesetUp').val() == 2) {
                        //TODO: Start WI-3754
                        //tablecolumn += '<Width>2.60in</Width>\n';
                        if ((indx % 2) == 0)
                            $(this).css('width', '1.00in');
                        else
                            $(this).css('width', '4.15in');
                        //TODO: End WI-3754
                    }
                });

                if ($('#ddlPagesetUp').val() == 1)
                    $('#lblCurrentWidth').html(' ' + '@ResReportMaster.CurrentWidthHeader' + ' 07.90 in,      ' + '@ResReportMaster.Detail' + totalInchesToDisplay.toFixed(2) + ' in');
                else if ($('#ddlPagesetUp').val() == 2)
                    $('#lblCurrentWidth').html(' ' + '@ResReportMaster.CurrentWidthHeader' + ' 10.40 in,      ' + '@ResReportMaster.Detail' + totalInchesToDisplay.toFixed(2) + ' in');
            }
            else
                $('#lblCurrentWidth').html('    ' + '@ResReportMaster.CurrentWidth' + totalInchesToDisplay.toFixed(2) + ' in');

        }, 100);

    }


    function reinitResizable() {

        $("#tbldetaildest").colResizable({ disable: true });
        //$("#tbldetaildest").colResizable({ resizeMode: 'flex', onResize: onSampleResized });
        $("#tbldetaildest").colResizable({ onResize: onSampleResized, resizeMode: 'overflow' });
    }
    function reinitHeaderResizable() {
        $("#tblGroupdetaildest").colResizable({ disable: true });
        //$("#tblGroupdetaildest").colResizable({ resizeMode: 'flex', onResize: onSampleResized });
        $("#tblGroupdetaildest").colResizable({ onResize: onSampleResized, resizeMode: 'overflow' });
        RecalcTableeleWidth();
    }

    function initResizable() {

        $("#tbldetaildest").colResizable({
            liveDrag: true,
            disable: true,
            minWidth: 20,
            onResize: onSampleResized
            , resizeMode: 'overflow'
        });
    }


    $('#popDiv').on('change', '#chkIsEntReport', function () {
        $('#chkIsEnterprise').prop('checked', $(this).is(':checked'));
    });


    function ChildReportChange(ReportID, ReportText) {
        //var ReportID = $('#ddlChildReport').val();
        if (ReportID > 0) {
            GetReportDetails(ReportID);
            $("input#hdnsaveasreport").show();
            $("input#hdnsaveasreport").prev("span").show();
        }
        else {
            var ReportID = $('#ddlReportType').val();


            GetReportDetails(ReportID);
            $("input#hdnsaveasreport").hide();
            $("input#hdnsaveasreport").prev("span").hide();
        }
        $("input#hdnsaveasreport").val(ReportText);
    }

    function WModelYesClick() {
        $.modal.impl.close();
    }

    $('.simplemodal-close').click(function () {
        $('#chkIsEnterprise').prop('checked', "checked");
    });

    function WModelNoClick() {
        $('#chkIsEnterprise').prop('checked', "checked");
        $.modal.impl.close();
    }

    $(document).ready(function () {

        if ('@parentID' != '0') {
            $('#ddlReportType').val('@parentID');

            ParentReportChange('@parentID', $("#ddlReportType option:selected").text());



        }

        var intNotAllowededCode = charCode.split(',');

        if ('@NotAllowedCharacterList' != '') {
            for (i = 0; i < intNotAllowededCode.length; i++) {
                specialKeys.push(parseInt(intNotAllowededCode[i])); //Backspace

            }
        }
        specialKeys.push(parseInt(32)); //space bar
        specialKeys.push(parseInt(8)); //backspace
        specialKeys.push(parseInt(37)); //left
        specialKeys.push(parseInt(39)); //right
        specialKeys.push(parseInt(38)); //up
        specialKeys.push(parseInt(40)); //down
        specialKeys.push(parseInt(46)); //delete
        specialKeys.push(parseInt(35)); //home
        specialKeys.push(parseInt(36)); //end
        onSampleResized = function (e) {
            RecalcTableeleWidth();
        };

        initResizable();

        $("#btnsaveas,#btnbsaveas").click(function (e) {
            $('#popDiv').find('#liIsEntReport').css('display', 'none');
            $('#popDiv').css('display', 'block');
            if ($('#chkIsEnterprise').is(':checked')) {
                $('#chkIsEntReport').prop('checked', $('#chkIsEnterprise').is(':checked'));
                $('#popDiv').find('#liIsEntReport').css('display', 'block');
            }
        });
        $("#btnscancel").click(function (e) {
            $('#txtreportname').val('');
            $('#popDiv').css('display', 'none');
        });
        $("#btnssave").click(function (e) {
            $('#popDiv').css('display', 'none');

            $('#hdnsaveasreport').val($('#txtreportname').val());
            var saveasreport = $('#hdnsaveasreport').val();

            $('#txtreportname').val('');
            SaveReportStructure(this);

        });
        $(".footer").css("margin-top", "200px");


        $('#tblHeaderDet tr').sortable({
            connectWith: ".connectedSortable"
        });

        $(function () {
            $("#tblLineItemList tbody").sortable({

            });
        });

        $(function () {
            $("#trdetail").sortable({
                connectWith: ".connectedSortable",
                handle: 'div.divLineDrag',
                stop: function (event, ui) {
                    reinitResizable();
                    RecalcTableeleWidth();
                }
            });

        });

        $(function () {
            $("#tblGroupList tbody").sortable({

            });
        });

        $(function () {
            $("#trGroupdetail").sortable({
                connectWith: ".connectedSortable",
                handle: 'div.divLineDrag',
                stop: function (event, ui) {
                    reinitHeaderResizable();
                }
            });

        });

        $("#tbldetaildest tbody").droppable({
            accept: '#trdrag_Bottom',
            drop: function (event, ui) {

                if (ui.draggable.attr("id") == 'trdrag_Bottom') {
                    var selecthdnText = ui.draggable.find('input').val();
                    var selectedText = ui.draggable.text();
                    var strTDtext = '';
                    strTDtext = '<td id="tddropline_' + GetTDCount('tbldetaildest') + '" onmousemove="doResize(this,event)"  onmouseover="doResize(this,event)" onmouseout="doneResizing()" style="width:75px;"><div class="divLineDrag">&nbsp;</div><span class="ChangeText" style="font-weight: bold;">' + selectedText + '</span><input type="hidden" value=' + selecthdnText + ' id="hdnlineitem_0" />';
                    strTDtext += '<img id="imgdelete" alt="Remove" src="../../Content/images/deletereport_icon.png" style="float: right;"  onclick="RemovelineItem(this)"></img></td>'
                    $('#tbldetaildest tr:last-child').append(strTDtext);

                    $(ui.draggable).remove();
                    //document.onmousedown = MD;
                    //document.onmousemove = MM;
                    //document.onmouseup = MU;
                    if (selecthdnText != undefined && selecthdnText != "")
                        AddRemoveOption(selecthdnText, selectedText, 'add');
                    reinitResizable();
                    RecalcTableeleWidth();
                    reinitHeaderResizable();
                }
                else {

                }

            }
        });
        $("#tblLineItemList tbody").droppable({
            drop: function (event, ui) {

                if (ui.draggable.attr("id") == 'tddrop') {

                    var selecthdnText = ui.draggable.find('input').val();
                    var selectedText = ui.draggable.text();
                    $('#tblLineItemList > tbody:last').append('<tr id="trdrag_Bottom"><td class="TdDragLineItem"><input type="hidden" value=' + selecthdnText + ' id="hdnlineitem" />' + selectedText + '</td></tr>');
                    $(ui.draggable).remove();
                }
            }
        });

        $("#tblGroupdetaildest tbody").droppable({

            over: function(event, ui)
            {
                // Create a clone 50 pixels above and 100 to the left of drop area
                $('#tblGroupdetaildest').clone()
                        .css({
                            position: 'fixed',
                            display : 'none',
                            top: ui.offset.top+50,
                            left: ui.offset.left - 50
                        })
                        .addClass("clone")          // Mark this as a clone, for hiding on drop or out
                        .addClass("dragHelper")     // Mark this as a hint, for moving with drag
                        .appendTo(document.body)


            },
            out: function(event, ui) {
                $('.clone').remove();                       // Remove any hints showing
            },

            drop: function (event, ui) {
                $('.clone').remove();
                if (ui.draggable.attr("id") == 'trdrag') {

                    var selecthdnText = ui.draggable.find('input[id="hdnFieldName"]').val();
                    var selecthdnFieldtype = ui.draggable.find('input[id="hdnFieldtype"]').val();
                    var selectedText = ui.draggable.text();

                    var strTDtext = '';
                    strTDtext = '<td id="tddropline_' + GetTDCount('tblGroupdetaildest') + '" onmousemove="doResize(this,event)"  onmouseover="doResize(this,event)" onmouseout="doneResizing()" style="width:75px;"><div class="divLineDrag">&nbsp;</div><span class="ChangeText" style="font-weight: bold;">' + selectedText + '</span><input type="hidden" value=' + selecthdnText + ' id="hdnFieldName" /><input type="hidden" value=' + selecthdnFieldtype + ' id="hdnFieldtype" />';
                    strTDtext += '<img id="imgdelete" alt="Remove" src="../../Content/images/deletereport_icon.png" style="float: right;"  onclick="RemoveGrouplineItem(this)"></img></td>'
                    $('#tblGroupdetaildest tr:last-child').append(strTDtext);
                    $(ui.draggable).remove();
                    //document.onmousedown = MD;
                    //document.onmousemove = MM;
                    //document.onmouseup = MU;
                    if (selecthdnText != undefined && selecthdnText != "")
                        AddRemoveOption(selecthdnText, selectedText, 'add');

                    if (selecthdnFieldtype == 'Group') {
                        AppendGroupbyDropdown(selecthdnText, selectedText);
                    }
                    reinitHeaderResizable();
                }

            }
        });

        $("#tblGroupList tbody").droppable({
            drop: function (event, ui) {

                if (ui.draggable.attr("id") == 'tddrop') {

                    var selecthdnText = ui.draggable.find('input').val();
                    var selectedText = ui.draggable.text();
                    $('#tblGroupList > tbody:last').append('<tr id="trdrag"><td class="TdDragLineItem"><input type="hidden" value=' + selecthdnText + ' id="hdnlineitem" />' + selectedText + '</td></tr>');
                    $(ui.draggable).remove();
                }
            }
        });
        $('#ddlReportType').live('change', function () {
            ParentReportChange($('#ddlReportType').val(), $("#ddlReportType option:selected").text());
        });

        $('#ddlChildReport').live('change', function () {
            ChildReportChange($('#ddlChildReport').val(), $('#ddlChildReport option:selected').text());
        });

        $('#dvHeaderDet').on('click', "table tr td", function () {

            $('#hdntdid').val('');
            $('#hdntdid').val($(this).attr('id'));
            clearTDcolor('tblHeaderDet');
            var tdcol = $('#hdntdcolor').val();
            if (tdcol == '') {
                $('#hdntdcolor').val('exist');
                $('#' + $(this).attr('id') + '').css("background-color", "silver");
            }
            else {
                $('#' + $(this).attr('id') + '').css("background-color", "#b8d1f3");
                $('#hdntdcolor').val('')
            }
            if ($(this).parent().prop('id') == "trdetail") {
                $("#btnAddRow").hide();
                $("#btnRemoveRow").hide();
            }
            else {
                $("#btnAddRow").show();
                $("#btnRemoveRow").show();
            }

        });
        $('#dvdetaildest').on('click', "table tr td", function () {
            $('#hdntdid').val('');
            $('#hdntdid').val($(this).attr('id'));
            clearTDcolor('tbldetaildest');
            var tdcol = $('#hdntdcolor').val();
            if (tdcol == '') {
                $('#hdntdcolor').val('exist');
                $('#' + $(this).attr('id') + '').css("background-color", "silver");
            }
            else {
                $('#' + $(this).attr('id') + '').css("background-color", "#b8d1f3");
                $('#hdntdcolor').val('')
            }

            if ($(this).parent().prop('id') == "trdetail") {
                $("#btnAddRow").hide();
                $("#btnRemoveRow").hide();
            }
            else {
                $("#btnAddRow").show();
                $("#btnRemoveRow").show();
            }
        });
        $('#dvGroupdetaildest').on('click', "table tr td", function () {
            $('#hdntdid').val('');
            $('#hdntdid').val($(this).attr('id'));
            clearTDcolor('tblGroupdetaildest');
            var tdcol = $('#hdntdcolor').val();
            if (tdcol == '') {
                $('#hdntdcolor').val('exist');
                $('#' + $(this).attr('id') + '').css("background-color", "silver");
            }
            else {
                $('#' + $(this).attr('id') + '').css("background-color", "#b8d1f3");
                $('#hdntdcolor').val('')
            }

        });
        function clearTDcolor(obj) {
            $('#' + obj + ' tr').each(function () {
                $(this).find('td').each(function () {
                    $('#' + $(this).attr('id') + '').css("background-color", "#b8d1f3");
                    $('#hdntdcolor').val('');
                });
            });
        }

        $("#btnitalic").click(function (e) {
            var tdid = $('#hdntdid').val();
            $('#' + tdid + '').find('span').css("font-style", "Italic");
        });
        $("#btnBold").click(function (e) {
            var tdid = $('#hdntdid').val();
            $('#' + tdid + '').find('span').css("font-weight", "Bold");
        });
        $("#btnNormal").click(function (e) {
            var tdid = $('#hdntdid').val();
            $('#' + tdid + '').find('span').css("font-style", "Normal");
            $('#' + tdid + '').find('span').css("font-weight", "");
        });
        $("#btnleft").click(function (e) {
            var tdid = $('#hdntdid').val();
            $('#' + tdid + '').css("text-align", "Left");

        });
        $("#btnmiddle").click(function (e) {
            var tdid = $('#hdntdid').val();
            $('#' + tdid + '').css("text-align", "Center");

        });
        $("#btnright").click(function (e) {
            var tdid = $('#hdntdid').val();
            $('#' + tdid + '').css("text-align", "Right");

        });

        $("#btnAddRow").click(function (e) {
            var LastTRId;
            $('#tblHeaderDet tr').each(function () {
                var TRId = $(this).attr('id');
                if (TRId != null || TRId == '') {
                    LastTRId = TRId;
                }

            });


            var RowId = LastTRId.split('_');
            var NewRowId = RowId[0] + '_' + (parseInt(RowId[1]) + 1);
            var newrow;
            newrow += '<tr id=' + NewRowId + ' class="connectedSortable">';
            newrow += '<td id="tddrop_' + (parseInt(RowId[1]) + 1) + '_1" class="notSelected ui-droppable">&nbsp;<input id="hdn" type="hidden" value=""><span class="ChangeText" style="font-style:Normal;font-weight: bold;"></span></td>';
            newrow += '<td id="tddrop_' + (parseInt(RowId[1]) + 1) + '_2" class="notSelected ui-droppable"><input id="hdn" type="hidden" value=""><span class="ChangeText" style="font-style:Normal; "></span></td>';
            newrow += '<td id="tddrop_' + (parseInt(RowId[1]) + 1) + '_3" class="notSelected ui-droppable"><input id="hdn" type="hidden" value=""><span class="ChangeText" style="font-style:Normal;font-weight: bold;"></span></td>';
            newrow += '<td id="tddrop_' + (parseInt(RowId[1]) + 1) + '_4" class="notSelected ui-droppable"><input id="hdn" type="hidden" value=""><span class="ChangeText" style="font-style:Normal; "></span></td></tr>';

            $('#' + LastTRId + '').after(newrow);
            CommonDroppable();
            $('#tddrop_' + (parseInt(RowId[1]) + 1) + '_1').resizable({
                handles: 's',
                resize: function (event, ui) {
                    $(this).siblings().height(ui.size.height);
                }
            });
            $('#tddrop_' + (parseInt(RowId[1]) + 1) + '_2').resizable({
                handles: 's',
                resize: function (event, ui) {
                    $(this).siblings().height(ui.size.height);
                }
            });
            $('#tddrop_' + (parseInt(RowId[1]) + 1) + '_3').resizable({
                handles: 's',
                resize: function (event, ui) {
                    $(this).siblings().height(ui.size.height);
                }
            });
            $('#tddrop_' + (parseInt(RowId[1]) + 1) + '_4').resizable({
                handles: 's',
                resize: function (event, ui) {
                    $(this).siblings().height(ui.size.height);
                }
            });
        });
        $("#btnRemoveRow").click(function (e) {
            var tdid = $('#hdntdid').val();
            if ($('#hdntdid').val() != "trdetail") {
                $('#' + tdid + '').parent().remove();
            }

        });

        $("#btnReset,#btnbReset").click(function (e) {

            var ReportID = $('#ddlChildReport').val();
            if (ReportID > 0) {
                GetReportDetails(ReportID);
            }
            else {
                var ReportID = $('#ddlReportType').val();
                GetReportDetails(ReportID);
            }
        });

        $("#btnSave,#btnbSave").click(function (e) {
            SaveReportStructure(this);
        });


        function ParentReportChange(ReportID,reportText) {
           // var ReportID = $('#ddlReportType').val();


            GetReportDetails(ReportID);
            BindChildReport(ReportID);

            if (reportText == 'Room') {
                $("div#divPofRBB").find("div.bottomTable:nth-child(2)").hide();
            }
            else {
                $("div#divPofRBB").find("div.bottomTable:nth-child(2)").show();
            }
            $("input#hdnsaveasreport").val('');
            $("input#hdnsaveasreport").hide();
            $("input#hdnsaveasreport").prev("span").hide();
        }



        function SaveReportStructure(currentBtn) {
            var isEdit = false;

            if ($.trim($(currentBtn).attr("id")) == "btnSave" || $.trim($(currentBtn).attr("id")) == "btnbSave") {
                isEdit = true;
            }
            var hdReportName = $('#hdnReportName').val();
            var hdSubReport = $('#hdnsubReport').val();
            var hdReportType = $('#hdnReportType').val();
            var hdSubReportParam = $('#hdnSubReportParam').val()
            var saveasname = $('#hdnsaveasreport').val();
            var strRDLXMLReport = '';
            var strRDLXMLSubReport = '';
            var strMasterReportResFile = $('#hdnMasterReportResFile').val();
            var strSuReportResFile = $('#hdnSuReportResFile').val();
            if ($.trim(saveasname) == '') {
                alert("Please Enter Report Name!!!");
                return false;
            }
            $('#chkIsPrivate').removeAttr('disabled');
            $('#chkIsEnterprise').removeAttr('disabled');
            $('#chkSetAsDefaultPrintReport').removeAttr('disabled');
            $('#chkSetAsDefaultPrintReportForAllRoom').removeAttr('disabled');

            var Isprivate = $('#chkIsPrivate').is(':checked');
            var IsEnterprise = $('#chkIsEnterprise').is(':checked');
            var setAsDefaultPrintReport = $('#chkSetAsDefaultPrintReport').is(':checked');
            var SetAsDefaultPrintReportForAllRoom = $('#chkSetAsDefaultPrintReportForAllRoom').is(':checked');

            var HideHeader = $('#chkHideHeader').is(':checked');
            var ShowSignature = $('#chkShowSignature').is(':checked');

            var IsIncludeTotal = $('#chkIncludeTotal').is(':checked');
            var IsIncludeGrandTotal = $('#chkIncludeGrandTotal').is(':checked');
            var IsIncludeSubTotal = $('#chkIncludeSubTotal').is(':checked');
            var IsIncludeTax1 = $('#chkIncludeTax1').is(':checked');
            var IsIncludeTax2 = $('#chkIncludeTax2').is(':checked');

            if (IsIncludeTotal == false) {
                IsIncludeSubTotal = false
                IsIncludeGrandTotal = false
            }

            var ReportID = $('#ddlReportType').val();
            var ChildReportID = $('#ddlChildReport').val();
            var EmailAddress = $('#txtEmailAddress').val();
            var hdnModuleName = $('#hdnModuleName').val()
            if (ChildReportID == null || ChildReportID == '') {
                ChildReportID = 0;
            }
            var reportpagesetup = $('#ddlPagesetUp').val();
            if (ReportID > 0 || ChildReportID > 0) {
                var SortColumns = GetSortString();

                strRDLXMLReport = CreateXMLReportStructure();

                if (hdSubReport != null && $.trim(hdSubReport).length > 0) {
                    if (strMasterReportResFile.toLowerCase() == "res_rpt_workorderwithgroupedpulls") {
                        strRDLXMLSubReport = CreateSubGroupReportXML();
                    }
                    else {
                        strRDLXMLSubReport = CreateXMLSubReportStructure();
                    }

                }
                if (hdReportType == '1') {

                    strRDLXMLReport = '';
                    strRDLXMLReport = CreateXMLSubReportStructure();
                }
                if (hdReportType == '3') {
                    strRDLXMLReport = '';
                    strRDLXMLReport = CreateGroupReportXML();
                }

                $.ajax({
                    url: '@Url.Content("~/ReportBuilder/SaveXML")',
                    data: JSON.stringify({ 'ReportName': hdReportName, 'strrdlXML': strRDLXMLReport, 'SubReportName': hdSubReport, 'strSubrdlXML': strRDLXMLSubReport, 'ParentId': ReportID, 'ChildID': ChildReportID, 'SortColumns': SortColumns, 'ReportType': 'Master', 'IsPrivate': Isprivate, 'Saveas': saveasname, 'Report': hdReportType, 'MasterReportResrfile': strMasterReportResFile, 'SubReportResFile': strSuReportResFile, 'IsIncludeTotal': IsIncludeTotal, 'IsIncludeGrandTotal': IsIncludeGrandTotal, 'IsIncludeSubTotal': IsIncludeSubTotal, 'PageType': reportpagesetup, 'EmailAddress': EmailAddress, 'ModuleName': hdnModuleName, 'IsEnterprise': IsEnterprise, 'SetAsDefaultPrintReport': setAsDefaultPrintReport, 'IsIncludeTax1': IsIncludeTax1, 'IsIncludeTax2': IsIncludeTax2, 'isEdit': isEdit, "HideHeader": HideHeader, "ShowSignature": ShowSignature, 'SetAsDefaultPrintReportForAllRoom': SetAsDefaultPrintReportForAllRoom }),
                    dataType: 'json',
                    contentType: 'application/json',
                    type: 'POST',
                    async: false,
                    cache: false,
                    success: function (result) {
                        $('#btnbCatCancel').click();
                        setTimeout(function () {
                            if (ChildReportID > 0) {
                                $("#ddlChildReport").val(ChildReportID).change();
                            }
                            else if (ReportID > 0) {
                                $("#ddlReportType").val(ReportID).change();
                            }
                        }, 100);
                        alert(result.Message);

                        //window.location = window.location;
                    }
                });
            }
        }

        function CreateXMLReportStructure() {

            var TablixXML = '';
            var TablixCommon = '';
            var tablecolumn = '';
            var tableRows = '';
            var TablixHeaderNodeText = '';
            var TablixDataNodeText = '';
            var ColumnHierarchy = '';
            var RowHierarchy = '';
            var LIIncludeRoomdetail = $('#chkIncludeRoomDetail').is(':checked');
            var TotRowWidth = GetTotRowWidth('tbldetaildest');
            TablixCommon += '<TablixBody>\n';
            tablecolumn += '<TablixColumns>\n';
            var roomdettext = '';
            if (LIIncludeRoomdetail == true) {

                roomdettext += '<TablixRow>\n';
                roomdettext += '<Height>0.78125in</Height>\n';
                roomdettext += '<TablixCells>\n';
                roomdettext += CreateRoomDetailcell('=Fields!RoomInfo.Value');
                roomdettext += '<TablixCell />\n';
                roomdettext += '<TablixCell />\n';
                roomdettext += '<TablixCell />\n';
                roomdettext += '</TablixCells>\n';
                roomdettext += '</TablixRow>\n';
            }

            $('#tblHeaderDet tr:first').each(function () {
                $(this).find('td').each(function (i) {
                    //  alert($(this).css("width") + '   ' + ConvertPXtoInch($(this).css("width")));
                    tablecolumn += '<TablixColumn>\n';
                    //tablecolumn += '<Width>' + ConvertPXtoInch(GetCalculateWidth('tblHeaderDet', TotRowWidth, ($(this).css("width")).replace("px", ""))) + 'in</Width>\n';
                    //tablecolumn += '<Width>' + ConvertPXtoInch($(this).css("width")) + 'in</Width>\n';

                    if ($('#ddlPagesetUp').val() == 1) {
                        //TODO: Start WI-3754
                        //tablecolumn += '<Width>1.975in</Width>\n';
                        if ((i % 2)==0)
                            tablecolumn += '<Width>1.00in</Width>\n';
                        else
                            tablecolumn += '<Width>2.95in</Width>\n';
                        //TODO: End WI-3754
                    }
                    else if ($('#ddlPagesetUp').val() == 2) {
                        //TODO: Start WI-3754
                        //tablecolumn += '<Width>2.60in</Width>\n';
                        if ((i % 2) == 0)
                            tablecolumn += '<Width>1.00in</Width>\n';
                        else
                            tablecolumn += '<Width>4.15in</Width>\n';
                        //TODO: End WI-3754
                    }


                    tablecolumn += '</TablixColumn>\n';
                });
            });
            tablecolumn += '</TablixColumns>\n';
            tableRows += '<TablixRows>\n';
            tableRows += roomdettext;
            var cnt = 0;
            $('#tblHeaderDet tr').each(function () {
                tableRows += '<TablixRow>\n';
                tableRows += '<Height>' + ConvertPXtoInch($(this).css("height").replace("px", "")) + 'in</Height>\n';
                tableRows += '<TablixCells>\n';
                var trtds = '';
                $(this).find('td').each(function () {

                    cnt += 1;
                    TablixDataNodeText = '';
                    TablixHeaderNodeText = '';
                    var spanstyle = '';
                    var spanweight = '';
                    var tdstyle = '';
                    var tdtext = $('#' + $(this).attr('id') + '').find('input').val().trim();

                    if ($('#' + $(this).attr('id') + '').find('span').hasClass("ChangeText")) {

                        TablixHeaderNodeText += '<TablixCell>\n';
                        TablixHeaderNodeText += '<CellContents>\n';
                        TablixHeaderNodeText += '<Textbox Name="Textbox' + cnt + '">\n';
                        TablixHeaderNodeText += '<CanGrow>true</CanGrow>\n';
                        TablixHeaderNodeText += '<KeepTogether>true</KeepTogether>\n';
                        TablixHeaderNodeText += '<Paragraphs>\n';
                        TablixHeaderNodeText += '<Paragraph>\n';
                        TablixHeaderNodeText += '<TextRuns>\n';
                        TablixHeaderNodeText += '<TextRun>\n';
                        if (tdtext != '') {
                            TablixHeaderNodeText += '<Value>' + tdtext + '</Value>\n';
                        }
                        else {
                            TablixHeaderNodeText += '<Value />\n';
                        }

                        spanstyle = $('#' + $(this).attr('id') + '').find('span').css("font-style");
                        spanweight = $('#' + $(this).attr('id') + '').find('span').css("font-weight");
                        TablixHeaderNodeText += '<Style>\n';
                        //TablixHeaderNodeText += '<FontFamily>Calibri</FontFamily>\n';
                        if (spanstyle != null && spanstyle != '') {
                            TablixHeaderNodeText += '<FontStyle>' + convertToUper(spanstyle) + '</FontStyle>\n';
                        }

                        if (spanweight != null && spanweight != '') {
                            if (spanweight == '700' || spanweight == 'bold') {
                                spanweight = 'Bold';
                                TablixHeaderNodeText += '<FontWeight>' + spanweight + '</FontWeight>\n';
                            }

                        }
                        TablixHeaderNodeText += '</Style>\n';
                        TablixHeaderNodeText += '</TextRun>\n';
                        TablixHeaderNodeText += '</TextRuns>\n';
                        tdstyle = $('#' + $(this).attr('id') + '').css("text-align");


                        TablixHeaderNodeText += '<Style>\n';
                        if (tdstyle != null && tdstyle != '') {
                            if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                                TablixHeaderNodeText += '<TextAlign>' + convertToUper(tdstyle) + '</TextAlign>\n';
                            }
                        }
                        else {
                            TablixHeaderNodeText += '<TextAlign>Left</TextAlign>\n';
                        }
                        TablixHeaderNodeText += '</Style>\n';
                        TablixHeaderNodeText += '</Paragraph>\n';
                        TablixHeaderNodeText += '</Paragraphs>\n';
                        TablixHeaderNodeText += '<rd:DefaultName>Textbox' + cnt + '</rd:DefaultName>\n';
                        TablixHeaderNodeText += '<Style>\n';
                        TablixHeaderNodeText += '<Border>\n';
                        TablixHeaderNodeText += '<Color>LightGrey</Color>\n';
                        TablixHeaderNodeText += '<Style>Solid</Style>\n';
                        TablixHeaderNodeText += '</Border>\n';
                        TablixHeaderNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                        TablixHeaderNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                        TablixHeaderNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                        TablixHeaderNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                        TablixHeaderNodeText += '</Style>\n';
                        TablixHeaderNodeText += '</Textbox>\n';
                        TablixHeaderNodeText += '</CellContents>\n';
                        TablixHeaderNodeText += '</TablixCell>\n';
                        trtds += TablixHeaderNodeText;
                    }
                    else if ($('#' + $(this).attr('id') + '').find('span').hasClass("NotChangeText")) {
                        if ($('#' + $(this).attr('id') + '').find('#imgImage').length > 0) {

                            TablixDataNodeText += $('#' + $(this).attr('id') + '').find('span').text().replace("'<", "<").replace("' <", "<").replace(">'", ">").replace("> '", ">") + '\n';

                        }
                        else {
                            TablixDataNodeText += '<TablixCell>\n';
                            TablixDataNodeText += '<CellContents>\n';
                            TablixDataNodeText += '<Textbox Name="' + tdtext + '_' + cnt + '">\n';
                            TablixDataNodeText += '<CanGrow>true</CanGrow>\n';
                            TablixDataNodeText += '<KeepTogether>true</KeepTogether>\n';
                            TablixDataNodeText += '<Paragraphs>\n';
                            TablixDataNodeText += '<Paragraph>\n';
                            TablixDataNodeText += '<TextRuns>\n';
                            TablixDataNodeText += '<TextRun>\n';
                            TablixDataNodeText += '<Value>=Fields!' + tdtext + '.Value</Value>\n';

                            spanstyle = $('#' + $(this).attr('id') + '').find('span').css("font-style");
                            spanweight = $('#' + $(this).attr('id') + '').find('span').css("font-weight");
                            TablixDataNodeText += '<Style>\n';
                            //TablixDataNodeText += '<FontFamily>Calibri</FontFamily>\n';
                            if (spanstyle != null && spanstyle != '') {
                                TablixDataNodeText += '<FontStyle>' + convertToUper(spanstyle) + '</FontStyle>\n';
                            }
                            if (spanweight != null && spanweight != '') {
                                if (spanweight == '700' || spanweight == 'bold') {
                                    spanweight = 'Bold';
                                    TablixDataNodeText += '<FontWeight>' + spanweight + '</FontWeight>\n';
                                }

                            }
                            TablixDataNodeText += '</Style>\n';
                            TablixDataNodeText += '</TextRun>\n';
                            TablixDataNodeText += '</TextRuns>\n';
                            tdstyle = $('#' + $(this).attr('id') + '').css("text-align");



                            TablixDataNodeText += '<Style>\n';
                            if (tdstyle != null && tdstyle != '') {
                                if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                                    TablixDataNodeText += '<TextAlign>' + convertToUper(tdstyle) + '</TextAlign>\n';
                                }
                            }
                            else {
                                TablixDataNodeText += '<TextAlign>Left</TextAlign>\n';
                            }
                            TablixDataNodeText += '</Style>\n';



                            TablixDataNodeText += '</Paragraph>\n';
                            TablixDataNodeText += '</Paragraphs>\n';
                            TablixDataNodeText += '<rd:DefaultName>' + tdtext + '</rd:DefaultName>\n';
                            TablixDataNodeText += '<Style>\n';
                            TablixDataNodeText += '<Border>\n';
                            TablixDataNodeText += '<Color>LightGrey</Color>\n';
                            TablixDataNodeText += '<Style>Solid</Style>\n';
                            TablixDataNodeText += '</Border>\n';

                            TablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                            TablixDataNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                            TablixDataNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                            TablixDataNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                            TablixDataNodeText += '</Style>\n';
                            TablixDataNodeText += '</Textbox>\n';
                            TablixDataNodeText += '</CellContents>\n';
                            TablixDataNodeText += '</TablixCell>\n';
                        }
                        trtds += TablixDataNodeText;
                    }
                    else if ($('#' + $(this).attr('id') + '').find('span').hasClass("subreport")) {


                        TablixDataNodeText += $('#' + $(this).attr('id') + '').find('span').text().replace("'<", "<").replace(">'", ">") + '\n';
                        trtds += TablixDataNodeText;
                    }
                    else {
                        trtds += '<TablixCell />\n'
                    }



                });

                tableRows += trtds;
                tableRows += '</TablixCells>\n';
                tableRows += '</TablixRow>\n';

            });
            tableRows += '</TablixRows>\n';

            TablixXML += TablixCommon;
            TablixXML += tablecolumn;
            TablixXML += tableRows;

            TablixCommon = '';
            TablixCommon += '</TablixBody>\n';
            TablixXML += TablixCommon;

            ColumnHierarchy += '<TablixColumnHierarchy>\n';
            ColumnHierarchy += '<TablixMembers>\n';

            $('#tblHeaderDet tr:first').each(function () {
                $(this).find('td').each(function () {
                    ColumnHierarchy += '<TablixMember />\n';

                });
            });


            ColumnHierarchy += '</TablixMembers>\n';
            ColumnHierarchy += '</TablixColumnHierarchy>\n';
            TablixXML += ColumnHierarchy;
            ColumnHierarchy = '';
            var strRowgrouping = '';
            strRowgrouping = $('#dvtemp span').text().replace("'<", "<").replace(">'", ">") + '\n';
            var trcount = GetTRCount('tblHeaderDet');
            if (LIIncludeRoomdetail == true) {
                trcount += 1;
            }
            if (strRowgrouping != '') {
                RowHierarchy = strRowgrouping;
                $.ajax({
                    url: '@Url.Content("~/ReportBuilder/GetTablixRowHierarchy")',
                    data: JSON.stringify({ 'oldRowHierarchy': RowHierarchy, 'Rowcnt': trcount }),
                    dataType: 'json',
                    contentType: 'application/json',
                    type: 'POST',
                    async: false,
                    cache: false,
                    success: function (result) {

                        RowHierarchy = result.Message;
                    }
                });
            }
            TablixXML += RowHierarchy;
            TablixCommon = '';
            TablixCommon += '<DataSetName>DataSet1</DataSetName>\n';
            TablixCommon += '<Height>0.55208in</Height>\n';
            TablixCommon += '<Width>1in</Width>\n';
            TablixCommon += '<Style>\n';
            TablixCommon += '<Border>\n';
            TablixCommon += '<Style>None</Style>\n';
            TablixCommon += '</Border>\n';
            TablixCommon += '</Style>\n';

            TablixXML += TablixCommon;

            return TablixXML;
        }


        function CreateXMLSubReportStructure() {
            var TablixXML = '';
            var TablixCommon = '';
            var tablecolumn = '';
            var tableRows = '';
            var TablixHeaderNodeText = '';
            var TablixDataNodeText = '';
            var ColumnHierarchy = '';
            var RowHierarchy = '';
            var LIIncludeTotal = $('#chkIncludeTotal').is(':checked');
            var LIIncludeGrandTotal = $('#chkIncludeGrandTotal').is(':checked');
            var LIIncludeTax1 = $('#chkIncludeTax1').is(':checked');
            var LIIncludeTax2 = $('#chkIncludeTax2').is(':checked');

            var TotRowWidth = GetTotRowWidth('tbldetaildest');

            TablixCommon += '<TablixBody>\n';
            tablecolumn += '<TablixColumns>\n';
            tableRows += '<TablixRows>\n';
            tableRows += '<TablixRow>\n';
            tableRows += '<Height>0.25in</Height>\n';
            tableRows += '<TablixCells>\n';
            var cnt = 0;
            var isRequisitionWithImage = false;
            $('#tbldetaildest td').each(function () {
                var spanstyle = '';
                var spanweight = '';
                var tdstyle = '';
                var hdnText = $(this).find('input').val();
                var spanText = $(this).find('span').text();

                if (hdnText == undefined || hdnText == "")
                {
                    hdnText = "DummyCol";
                }

                if (hdnText != '' && hdnText != undefined) {
                    if (hdnText.trim() != '') {
                        cnt += 1;
                        var tdWidth = parseFloat(($(this).css("width")).replace("px", "")) - 3;
                        tablecolumn += '<TablixColumn>\n';
                        ///tablecolumn += '<Width>' + ConvertPXtoInch(GetCalculateWidth('tbldetaildest', TotRowWidth, tdWidth)) + 'in</Width>\n';
                        if ($('#hdnMasterReportResFile').val().toLowerCase() == "resreportrequisition"
                            && hdnText.toLowerCase().indexOf('itemimagepath') > -1) {
                            tablecolumn += '<Width>' + ConvertPXtoInch('120px') + 'in</Width>\n';
                            isRequisitionWithImage = true;
                        }
                        else {
                            tablecolumn += '<Width>' + ConvertPXtoInch($(this).css("width").replace("px", "")) + 'in</Width>\n';
                            isRequisitionWithImage = false;
                        }
                        tablecolumn += '</TablixColumn>\n';
                        var strtext = (hdnText == "DummyCol" ? " " : hdnText);
                        TablixHeaderNodeText += '<TablixCell>\n';
                        TablixHeaderNodeText += '<CellContents>\n';
                        TablixHeaderNodeText += '<Textbox Name="Textbox' + cnt + '">\n';
                        TablixHeaderNodeText += '<CanGrow>true</CanGrow>\n';
                        TablixHeaderNodeText += '<KeepTogether>true</KeepTogether>\n';
                        TablixHeaderNodeText += '<Paragraphs>\n';
                        TablixHeaderNodeText += '<Paragraph>\n';
                        TablixHeaderNodeText += '<TextRuns>\n';
                        TablixHeaderNodeText += '<TextRun>\n';
                        TablixHeaderNodeText += '<Value>' + strtext + '</Value>\n';

                        spanstyle = $(this).find('span').css("font-style");
                        spanweight = $(this).find('span').css("font-weight");
                        TablixHeaderNodeText += '<Style>\n';
                        //TablixDataNodeText += '<FontFamily>Calibri</FontFamily>\n';
                        if (spanstyle != null && spanstyle != '') {
                            TablixHeaderNodeText += '<FontStyle>' + convertToUper(spanstyle) + '</FontStyle>\n';
                        }
                        if (spanweight != null && spanweight != '') {
                            if (spanweight == '700' || spanweight == 'bold') {
                                spanweight = 'Bold';
                                TablixHeaderNodeText += '<FontWeight>' + spanweight + '</FontWeight>\n';
                            }

                        }
                        TablixHeaderNodeText += '</Style>\n';

                        TablixHeaderNodeText += '</TextRun>\n';
                        TablixHeaderNodeText += '</TextRuns>\n';

                        tdstyle = $(this).css("text-align");
                        TablixHeaderNodeText += '<Style>\n';
                        if (tdstyle != null && tdstyle != '') {
                            if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                                TablixHeaderNodeText += '<TextAlign>' + convertToUper(tdstyle) + '</TextAlign>\n';
                            }
                        }
                        else {
                            TablixHeaderNodeText += '<TextAlign>Left</TextAlign>\n';
                        }
                        TablixHeaderNodeText += '</Style>\n';

                        TablixHeaderNodeText += '</Paragraph>\n';
                        TablixHeaderNodeText += '</Paragraphs>\n';
                        TablixHeaderNodeText += '<rd:DefaultName>Textbox' + cnt + '</rd:DefaultName>\n';
                        TablixHeaderNodeText += '<Style>\n';
                        TablixHeaderNodeText += '<Border>\n';
                        TablixHeaderNodeText += '<Color>LightGrey</Color>\n';
                        TablixHeaderNodeText += '<Style>Solid</Style>\n';
                        TablixHeaderNodeText += '</Border>\n';
                        TablixHeaderNodeText += '<BackgroundColor>LightGrey</BackgroundColor>\n';
                        TablixHeaderNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                        TablixHeaderNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                        TablixHeaderNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                        TablixHeaderNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                        TablixHeaderNodeText += '</Style>\n';
                        TablixHeaderNodeText += '</Textbox>\n';
                        TablixHeaderNodeText += '</CellContents>\n';
                        TablixHeaderNodeText += '</TablixCell>\n';

                    }
                }
            });

            if (LIIncludeTotal == true) {

                tablecolumn += '<TablixColumn>\n';
                tablecolumn += '<Width>1in</Width>\n';
                tablecolumn += '</TablixColumn>\n';

                TablixHeaderNodeText += '<TablixCell>\n';
                TablixHeaderNodeText += '<CellContents>\n';
                TablixHeaderNodeText += '<Textbox Name="TextboxSumTotal">\n';
                TablixHeaderNodeText += '<CanGrow>true</CanGrow>\n';
                //TablixHeaderNodeText += '<UserSort>\n';
                //TablixHeaderNodeText += '<SortExpression>=Sum((IIf(Fields!OnHandQuantity.Value Is Nothing, CDbl(0),CDbl(Fields!OnHandQuantity.Value)))*(IIf(Fields!Cost.Value Is Nothing, CDbl(0),CDbl(Fields!Cost.Value))),"DataSet1")</SortExpression>\n';
                //TablixHeaderNodeText += '<SortExpression>=CDbl(Fields!Total.Value)</SortExpression>\n';
                //TablixHeaderNodeText += '<SortTarget>DataSet1</SortTarget>\n';
                //TablixHeaderNodeText += '</UserSort>\n';
                TablixHeaderNodeText += '<KeepTogether>true</KeepTogether>\n';
                TablixHeaderNodeText += '<Paragraphs>\n';
                TablixHeaderNodeText += '<Paragraph>\n';
                TablixHeaderNodeText += '<TextRuns>\n';
                TablixHeaderNodeText += '<TextRun>\n';
                TablixHeaderNodeText += '<Value>Total</Value>\n';
                TablixHeaderNodeText += '<Style>\n';
                TablixHeaderNodeText += '<FontStyle>Normal</FontStyle>\n';
                TablixHeaderNodeText += '<FontFamily>Calibri</FontFamily>\n';
                TablixHeaderNodeText += '<FontWeight>Bold</FontWeight>\n';
                TablixHeaderNodeText += '</Style>\n';
                TablixHeaderNodeText += '</TextRun>\n';
                TablixHeaderNodeText += '</TextRuns>\n';
                TablixHeaderNodeText += '<Style>\n';
                TablixHeaderNodeText += '<TextAlign>Center</TextAlign>\n';
                TablixHeaderNodeText += '</Style>\n';
                TablixHeaderNodeText += '</Paragraph>\n';
                TablixHeaderNodeText += '</Paragraphs>\n';
                TablixHeaderNodeText += '<rd:DefaultName>TextboxSumTotal</rd:DefaultName>\n';
                TablixHeaderNodeText += '<Style>\n';
                TablixHeaderNodeText += '<Border>\n';
                TablixHeaderNodeText += '<Color>LightGrey</Color>\n';
                TablixHeaderNodeText += '<Style>Solid</Style>\n';
                TablixHeaderNodeText += '</Border>\n';
                TablixHeaderNodeText += '<BackgroundColor>LightGrey</BackgroundColor>\n';
                TablixHeaderNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                TablixHeaderNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                TablixHeaderNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                TablixHeaderNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                TablixHeaderNodeText += '</Style>\n';
                TablixHeaderNodeText += '</Textbox>\n';
                TablixHeaderNodeText += '</CellContents>\n';
                TablixHeaderNodeText += '</TablixCell>\n';
            }

            tablecolumn += '</TablixColumns>\n';
            tableRows += TablixHeaderNodeText;
            tableRows += '</TablixCells>\n';
            tableRows += '</TablixRow>\n';

            TablixXML += TablixCommon;
            TablixXML += tablecolumn;


            TablixCommon = '';
            tablecolumn = '';
            if (isRequisitionWithImage == true) {
                tableRows += '<TablixRow>\n';
                tableRows += '  <Height>' + ConvertPXtoInch('120px') + 'in</Height>\n';
                tableRows += '<TablixCells>\n';
            }
            else {
                tableRows += '<TablixRow>\n';
                tableRows += '  <Height>0.30208in</Height>\n';
                tableRows += '<TablixCells>\n';
            }
            $('#tbldetaildest td').each(function () {
                cnt += 1;
                var hdnText = $(this).find('input').val();
                var spanText = $(this).find('span').text();

                if (hdnText == undefined || hdnText == "") {
                    hdnText = "DummyCol";
                }

                if (hdnText != '' && hdnText != undefined) {
                    var strtext = (hdnText == "DummyCol" ? " " : hdnText);
                    if (strtext.toLowerCase().indexOf('barcodeimage_') > -1) {
                        TablixDataNodeText += '<TablixCell>\n';
                        TablixDataNodeText += '<CellContents>\n';
                        TablixDataNodeText += '<Image Name="ImageTextbox' + cnt + '">\n';
                        TablixDataNodeText += '<Source>External</Source>\n';
                        if (strtext.trim() != "") {
                            TablixDataNodeText += '<Value>=Parameters!BarcodeURL.Value+Fields!' + strtext + '.Value</Value>\n';
                        }
                        else {
                            TablixDataNodeText += '<Value></Value>\n';
                        }

                        TablixDataNodeText += '<Style>\n';
                        TablixDataNodeText += '<Border>\n';
                        TablixDataNodeText += '<Color>LightGrey</Color>\n';
                        TablixDataNodeText += '<Style>Solid</Style>\n';
                        TablixDataNodeText += '</Border>\n';
                        TablixDataNodeText += '<PaddingLeft>5pt</PaddingLeft>\n';
                        TablixDataNodeText += '<PaddingRight>5pt</PaddingRight>\n';
                        TablixDataNodeText += '<PaddingTop>5pt</PaddingTop>\n';
                        TablixDataNodeText += '<PaddingBottom>5pt</PaddingBottom>\n';
                        TablixDataNodeText += '</Style>\n';
                        TablixDataNodeText += '</Image>\n';
                        TablixDataNodeText += '</CellContents>\n';
                        TablixDataNodeText += '</TablixCell>\n';

                    }
                    else if ($('#hdnMasterReportResFile').val().toLowerCase() == "resreportrequisition"
                        && strtext.toLowerCase().indexOf('itemimagepath') > -1) {
                        TablixDataNodeText += '<TablixCell>\n';
                        TablixDataNodeText += '<CellContents>\n';
                        TablixDataNodeText += '<Image Name="ImageTextbox' + cnt + '">\n';
                        TablixDataNodeText += '<Source>External</Source>\n';
                        if (strtext.trim() != "") {
                            var baseURL = '@System.Web.HttpContext.Current.Request.Url.ToString().Replace(System.Web.HttpContext.Current.Request.Url.PathAndQuery, "")';
                            var FieldText = '=IIf(Fields!ImageType.Value = "ImagePath","' + baseURL + '"+Fields!' + strtext + '.Value,Fields!ItemImageExternalURL.Value)';
                            TablixDataNodeText += '<Value>' + FieldText + '</Value>\n';
                        }
                        else {
                            TablixDataNodeText += '<Value></Value>\n';
                        }
                        TablixDataNodeText += '<Sizing>Fit</Sizing>\n';
                        //TablixDataNodeText += '<Width>' + ConvertPXtoInch('120px') +'in</Width>\n';
                        //TablixDataNodeText += '<Height>' + ConvertPXtoInch('120px') +'in</Height>\n';
                        TablixDataNodeText += '<Style>\n';
                        TablixDataNodeText += '<Border>\n';
                        TablixDataNodeText += '<Color>LightGrey</Color>\n';
                        TablixDataNodeText += '<Style>Solid</Style>\n';
                        TablixDataNodeText += '</Border>\n';
                        TablixDataNodeText += '</Style>\n';
                        TablixDataNodeText += '</Image>\n';
                        TablixDataNodeText += '</CellContents>\n';
                        TablixDataNodeText += '</TablixCell>\n';

                    }
                    else {
                        TablixDataNodeText += '<TablixCell>\n';
                        TablixDataNodeText += '<CellContents>\n';
                        if (strtext.trim() == "")
                        {
                            TablixDataNodeText += '<Textbox Name="Textbox' + cnt + '">\n';
                        }
                        else
                        {
                            TablixDataNodeText += '<Textbox Name="' + strtext + '">\n';
                        }
                        TablixDataNodeText += '<CanGrow>true</CanGrow>\n';
                        TablixDataNodeText += '<KeepTogether>true</KeepTogether>\n';
                        TablixDataNodeText += '<Paragraphs>\n';
                        TablixDataNodeText += '<Paragraph>\n';
                        TablixDataNodeText += '<TextRuns>\n';
                        TablixDataNodeText += '<TextRun>\n';
                        if (strtext.trim() != "") {
                            TablixDataNodeText += '<Value>=Fields!' + strtext + '.Value</Value>\n';
                        }
                        else
                        {
                            TablixDataNodeText += '<Value></Value>\n';
                        }
                        TablixDataNodeText += '<Style>\n';
                        TablixDataNodeText += '<FontFamily>Calibri</FontFamily>\n';
                        TablixDataNodeText += '</Style>\n';
                        TablixDataNodeText += '</TextRun>\n';
                        TablixDataNodeText += '</TextRuns>\n';
                        tdstyle = $(this).css("text-align");
                        TablixDataNodeText += '<Style>\n';
                        if (tdstyle != null && tdstyle != '') {
                            if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                                TablixDataNodeText += '<TextAlign>' + convertToUper(tdstyle) + '</TextAlign>\n';
                            }
                        }
                        else {
                            TablixDataNodeText += '<TextAlign>Left</TextAlign>\n';
                        }
                        TablixDataNodeText += '</Style>\n';

                        TablixDataNodeText += '</Paragraph>\n';
                        TablixDataNodeText += '</Paragraphs>\n';
                        TablixDataNodeText += '<rd:DefaultName>' + strtext + '</rd:DefaultName>\n';
                        TablixDataNodeText += '<Style>\n';
                        TablixDataNodeText += '<Border>\n';
                        TablixDataNodeText += '<Color>LightGrey</Color>\n';
                        TablixDataNodeText += '<Style>Solid</Style>\n';
                        TablixDataNodeText += '</Border>\n';
                        TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","White")</BackgroundColor>\n';
                        TablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                        TablixDataNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                        TablixDataNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                        TablixDataNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                        TablixDataNodeText += '</Style>\n';
                        TablixDataNodeText += '</Textbox>\n';
                        TablixDataNodeText += '</CellContents>\n';
                        TablixDataNodeText += '</TablixCell>\n';
                    }


                }
            });
            if (LIIncludeTotal == true) {

                TablixDataNodeText += '<TablixCell>\n';
                TablixDataNodeText += '<CellContents>\n';
                TablixDataNodeText += '<Textbox Name="SumTotalDF">\n';
                TablixDataNodeText += '<CanGrow>true</CanGrow>\n';
                TablixDataNodeText += '<KeepTogether>true</KeepTogether>\n';
                TablixDataNodeText += '<Paragraphs>\n';
                TablixDataNodeText += '<Paragraph>\n';
                TablixDataNodeText += '<TextRuns>\n';
                TablixDataNodeText += '<TextRun>\n';
                //TablixDataNodeText += '<Value>=Sum(Fields!OnHandQuantity.Value * Fields!Cost.Value)</Value>\n';
                //TablixDataNodeText += '<Value>=Sum(IIf(Fields!OnHandQuantity.Value Is Nothing, CDbl(0),CDbl(Fields!OnHandQuantity.Value)))*(IIf(Fields!Cost.Value Is Nothing, CDbl(0),CDbl(Fields!Cost.Value)))</Value>\n';
                TablixDataNodeText += '<Value>=Fields!Total.Value</Value>\n';
                TablixDataNodeText += '<Style>\n';
                TablixDataNodeText += '<FontStyle>Normal</FontStyle>\n';
                TablixDataNodeText += '<FontFamily>Calibri</FontFamily>\n';
                TablixDataNodeText += '<FontWeight>Normal</FontWeight>\n';
                TablixDataNodeText += '</Style>\n';
                TablixDataNodeText += '</TextRun>\n';
                TablixDataNodeText += '</TextRuns>\n';
                TablixDataNodeText += '<Style>\n';
                TablixDataNodeText += '<TextAlign>Right</TextAlign>\n';
                TablixDataNodeText += '</Style>\n';
                TablixDataNodeText += '</Paragraph>\n';
                TablixDataNodeText += '</Paragraphs>\n';
                TablixDataNodeText += '<rd:DefaultName>SumTotalDF</rd:DefaultName>\n';
                TablixDataNodeText += '<Style>\n';
                TablixDataNodeText += '<Border>\n';
                TablixDataNodeText += '<Color>LightGrey</Color>\n';
                TablixDataNodeText += '<Style>Solid</Style>\n';
                TablixDataNodeText += '</Border>\n';
                //TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","White")</BackgroundColor>\n';
                TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","#ffffde")</BackgroundColor>\n';
                TablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                TablixDataNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                TablixDataNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                TablixDataNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                TablixDataNodeText += '</Style>\n';
                TablixDataNodeText += '</Textbox>\n';
                TablixDataNodeText += '</CellContents>\n';
                TablixDataNodeText += '</TablixCell>\n';
            }
            tableRows += TablixDataNodeText;
            tableRows += '</TablixCells>\n';
            tableRows += '</TablixRow>\n';

            TablixCommon = '';
            tablecolumn = '';

            if (LIIncludeGrandTotal == true) {

                if (LIIncludeTax1 || LIIncludeTax2) {
                    tableRows += GetTotalRowIfTaxInclude(10);
                }
                if (LIIncludeTax1) {
                    tableRows += GetTaxRow(1, 11);
                }

                if (LIIncludeTax2) {
                    tableRows += GetTaxRow(2, 12);
                }

                tableRows += '<TablixRow>\n';
                tableRows += '  <Height>0.30208in</Height>\n';
                tableRows += '<TablixCells>\n';
                var trcount = 3;
                cnt = 0;
                var tdcount = GetTDCount('tbldetaildest');
                TablixDataNodeText = '';
                $('#tbldetaildest td').each(function () {
                    cnt += 1;

                    var valueField = '';
                    if ((tdcount - cnt) == 0) {
                        valueField = "Grand Total:";
                    }

                    TablixDataNodeText += '<TablixCell>\n';
                    TablixDataNodeText += '<CellContents>\n';
                    TablixDataNodeText += '<Textbox Name="TextBox_' + trcount + '_' + cnt + '">\n';
                    TablixDataNodeText += '<CanGrow>true</CanGrow>\n';
                    TablixDataNodeText += '<KeepTogether>true</KeepTogether>\n';
                    TablixDataNodeText += '<Paragraphs>\n';
                    TablixDataNodeText += '<Paragraph>\n';
                    TablixDataNodeText += '<TextRuns>\n';
                    TablixDataNodeText += '<TextRun>\n';
                    TablixDataNodeText += '<Value>' + valueField + '</Value>\n';
                    TablixDataNodeText += '<Style>\n';
                    TablixDataNodeText += '<FontStyle>Normal</FontStyle>\n';
                    TablixDataNodeText += '<FontFamily>Calibri</FontFamily>\n';
                    TablixDataNodeText += '<FontWeight>Bold</FontWeight>\n';
                    TablixDataNodeText += '</Style>\n';
                    TablixDataNodeText += '</TextRun>\n';
                    TablixDataNodeText += '</TextRuns>\n';
                    TablixDataNodeText += '<Style>\n';
                    TablixDataNodeText += '<TextAlign>Right</TextAlign>\n';
                    TablixDataNodeText += '</Style>\n';
                    TablixDataNodeText += '</Paragraph>\n';
                    TablixDataNodeText += '</Paragraphs>\n';
                    TablixDataNodeText += '<rd:DefaultName>TextBox_' + trcount + '_' + cnt + '</rd:DefaultName>\n';
                    TablixDataNodeText += '<Style>\n';
                    TablixDataNodeText += '<Border>\n';
                    TablixDataNodeText += '<Color>LightGrey</Color>\n';
                    TablixDataNodeText += '<Style>Solid</Style>\n';
                    TablixDataNodeText += '</Border>\n';
                    //TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","White")</BackgroundColor>\n';
                    TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","#ffffde")</BackgroundColor>\n';
                    TablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                    TablixDataNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                    TablixDataNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                    TablixDataNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                    TablixDataNodeText += '</Style>\n';
                    TablixDataNodeText += '</Textbox>\n';
                    TablixDataNodeText += '</CellContents>\n';
                    TablixDataNodeText += '</TablixCell>\n';

                });

                if (LIIncludeGrandTotal == true) {
                    var valueField = '';
                    //valueField = "=Sum((IIf(Fields!OnHandQuantity.Value Is Nothing, CDbl(0),CDbl(Fields!OnHandQuantity.Value)))*(IIf(Fields!Cost.Value Is Nothing, CDbl(0),CDbl(Fields!Cost.Value)))," + '"' + 'DataSet1' + '"' + ")";
                    valueField = "=Sum(Fields!Total.Value)";

                    if (LIIncludeTax1 && LIIncludeTax2) {
                        valueField = '=FormatNumber(Sum(Fields!Total.Value, "DataSet1")+iif(CDbl(Fields!Tax1Rate.Value)>0,((Sum(Fields!TaxbaleTotal.Value, "DataSet1")*CDbl(Fields!Tax1Rate.Value))/100),0)+iif(CDbl(Fields!Tax2Rate.Value)>0,((Sum(Fields!TaxbaleTotal.Value, "DataSet1")*CDbl(Fields!Tax2Rate.Value))/100),0),2))';
                        if (valueField == 0)
                            valueField = "";

                    }
                    else if (LIIncludeTax1) {
                        valueField = '=FormatNumber(Sum(Fields!Total.Value, "DataSet1")+iif(CDbl(Fields!Tax1Rate.Value)>0,((Sum(Fields!TaxbaleTotal.Value, "DataSet1")*CDbl(Fields!Tax1Rate.Value))/100),0),2)';
                    }
                    else if (LIIncludeTax2) {
                        valueField = '=FormatNumber(Sum(Fields!Total.Value, "DataSet1")+iif(CDbl(Fields!Tax2Rate.Value)>0,((Sum(Fields!TaxbaleTotal.Value, "DataSet1")*CDbl(Fields!Tax2Rate.Value))/100),0),2)';
                    }

                    TablixDataNodeText += '<TablixCell>\n';
                    TablixDataNodeText += '<CellContents>\n';
                    TablixDataNodeText += '<Textbox Name="TextBox_' + trcount + '_Total">\n';
                    TablixDataNodeText += '<CanGrow>true</CanGrow>\n';
                    TablixDataNodeText += '<KeepTogether>true</KeepTogether>\n';
                    TablixDataNodeText += '<Paragraphs>\n';
                    TablixDataNodeText += '<Paragraph>\n';
                    TablixDataNodeText += '<TextRuns>\n';
                    TablixDataNodeText += '<TextRun>\n';
                    TablixDataNodeText += '<Value>' + valueField + '</Value>\n';
                    TablixDataNodeText += '<Style>\n';
                    TablixDataNodeText += '<FontStyle>Normal</FontStyle>\n';
                    TablixDataNodeText += '<FontFamily>Calibri</FontFamily>\n';
                    TablixDataNodeText += '<FontWeight>Bold</FontWeight>\n';
                    TablixDataNodeText += '</Style>\n';
                    TablixDataNodeText += '</TextRun>\n';
                    TablixDataNodeText += '</TextRuns>\n';
                    TablixDataNodeText += '<Style>\n';
                    TablixDataNodeText += '<TextAlign>Right</TextAlign>\n';
                    TablixDataNodeText += '</Style>\n';
                    TablixDataNodeText += '</Paragraph>\n';
                    TablixDataNodeText += '</Paragraphs>\n';
                    TablixDataNodeText += '<rd:DefaultName>TextBox_' + trcount + '_Total</rd:DefaultName>\n';
                    TablixDataNodeText += '<Style>\n';
                    TablixDataNodeText += '<Border>\n';
                    TablixDataNodeText += '<Color>LightGrey</Color>\n';
                    TablixDataNodeText += '<Style>Solid</Style>\n';
                    TablixDataNodeText += '</Border>\n';
                    //TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","White")</BackgroundColor>\n';
                    TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","#ffffde")</BackgroundColor>\n';
                    //TablixDataNodeText += '<BackgroundColor>#ffffde</BackgroundColor>\n';
                    TablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                    TablixDataNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                    TablixDataNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                    TablixDataNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                    TablixDataNodeText += '</Style>\n';
                    TablixDataNodeText += '</Textbox>\n';
                    TablixDataNodeText += '</CellContents>\n';
                    TablixDataNodeText += '</TablixCell>\n';
                }
                tableRows += TablixDataNodeText;
                tableRows += '</TablixCells>\n';
                tableRows += '</TablixRow>\n';

            }

            if ($("#hdnModuleName").val().toLowerCase().indexOf('inventorydailyhistorywithdaterange') >= 0) {

                tableRows += '<TablixRow>\n';
                tableRows += '  <Height>0.30208in</Height>\n';
                tableRows += '<TablixCells>\n';
                var trcount = 4;
                cnt = 0;
                var tdcount = GetTDCount('tbldetaildest');
                TablixDataNodeText = '';
                $('#tbldetaildest td').each(function () {
                    cnt += 1;

                    var valueField = '';
                    if ((tdcount - cnt) == 0) {
                        valueField = "Total Avg. QOH :";
                    }

                    TablixDataNodeText += '<TablixCell>\n';
                    TablixDataNodeText += '<CellContents>\n';
                    TablixDataNodeText += '<Textbox Name="TextBox_' + trcount + '_' + cnt + '">\n';
                    TablixDataNodeText += '<CanGrow>true</CanGrow>\n';
                    TablixDataNodeText += '<KeepTogether>true</KeepTogether>\n';
                    TablixDataNodeText += '<Paragraphs>\n';
                    TablixDataNodeText += '<Paragraph>\n';
                    TablixDataNodeText += '<TextRuns>\n';
                    TablixDataNodeText += '<TextRun>\n';
                    TablixDataNodeText += '<Value>' + valueField + '</Value>\n';
                    TablixDataNodeText += '<Style>\n';
                    TablixDataNodeText += '<FontStyle>Normal</FontStyle>\n';
                    TablixDataNodeText += '<FontFamily>Calibri</FontFamily>\n';
                    TablixDataNodeText += '<FontWeight>Bold</FontWeight>\n';
                    TablixDataNodeText += '</Style>\n';
                    TablixDataNodeText += '</TextRun>\n';
                    TablixDataNodeText += '</TextRuns>\n';
                    TablixDataNodeText += '<Style>\n';
                    TablixDataNodeText += '<TextAlign>Right</TextAlign>\n';
                    TablixDataNodeText += '</Style>\n';
                    TablixDataNodeText += '</Paragraph>\n';
                    TablixDataNodeText += '</Paragraphs>\n';
                    TablixDataNodeText += '<rd:DefaultName>TextBox_' + trcount + '_' + cnt + '</rd:DefaultName>\n';
                    TablixDataNodeText += '<Style>\n';
                    TablixDataNodeText += '<Border>\n';
                    TablixDataNodeText += '<Color>LightGrey</Color>\n';
                    TablixDataNodeText += '<Style>Solid</Style>\n';
                    TablixDataNodeText += '</Border>\n';
                    //TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","White")</BackgroundColor>\n';
                    TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","#ffffde")</BackgroundColor>\n';
                    TablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                    TablixDataNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                    TablixDataNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                    TablixDataNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                    TablixDataNodeText += '</Style>\n';
                    TablixDataNodeText += '</Textbox>\n';
                    TablixDataNodeText += '</CellContents>\n';
                    TablixDataNodeText += '</TablixCell>\n';

                });

                var valueField = '';
                valueField = '=Round(CDec(Sum(Fields!Total.Value)) / (IIf(DateDiff("d",Parameters!StartDate.Value, Parameters!EndDate.Value) > 0 , DateDiff("d",Parameters!StartDate.Value, Parameters!EndDate.Value), 1)),Fields!NumberDecimalDigits.Value)';

                TablixDataNodeText += '<TablixCell>\n';
                TablixDataNodeText += '<CellContents>\n';
                TablixDataNodeText += '<Textbox Name="TextBox_' + trcount + '_Total">\n';
                TablixDataNodeText += '<CanGrow>true</CanGrow>\n';
                TablixDataNodeText += '<KeepTogether>true</KeepTogether>\n';
                TablixDataNodeText += '<Paragraphs>\n';
                TablixDataNodeText += '<Paragraph>\n';
                TablixDataNodeText += '<TextRuns>\n';
                TablixDataNodeText += '<TextRun>\n';
                TablixDataNodeText += '<Value>' + valueField + '</Value>\n';
                TablixDataNodeText += '<Style>\n';
                TablixDataNodeText += '<FontStyle>Normal</FontStyle>\n';
                TablixDataNodeText += '<FontFamily>Calibri</FontFamily>\n';
                TablixDataNodeText += '<FontWeight>Bold</FontWeight>\n';
                TablixDataNodeText += '</Style>\n';
                TablixDataNodeText += '</TextRun>\n';
                TablixDataNodeText += '</TextRuns>\n';
                TablixDataNodeText += '<Style>\n';
                TablixDataNodeText += '<TextAlign>Right</TextAlign>\n';
                TablixDataNodeText += '</Style>\n';
                TablixDataNodeText += '</Paragraph>\n';
                TablixDataNodeText += '</Paragraphs>\n';
                TablixDataNodeText += '<rd:DefaultName>TextBox_' + trcount + '_Total</rd:DefaultName>\n';
                TablixDataNodeText += '<Style>\n';
                TablixDataNodeText += '<Border>\n';
                TablixDataNodeText += '<Color>LightGrey</Color>\n';
                TablixDataNodeText += '<Style>Solid</Style>\n';
                TablixDataNodeText += '</Border>\n';
                //TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","White")</BackgroundColor>\n';
                TablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","#ffffde")</BackgroundColor>\n';
                //TablixDataNodeText += '<BackgroundColor>#ffffde</BackgroundColor>\n';
                TablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n';
                TablixDataNodeText += '<PaddingRight>2pt</PaddingRight>\n';
                TablixDataNodeText += '<PaddingTop>2pt</PaddingTop>\n';
                TablixDataNodeText += '<PaddingBottom>2pt</PaddingBottom>\n';
                TablixDataNodeText += '</Style>\n';
                TablixDataNodeText += '</Textbox>\n';
                TablixDataNodeText += '</CellContents>\n';
                TablixDataNodeText += '</TablixCell>\n';

                tableRows += TablixDataNodeText;
                tableRows += '</TablixCells>\n';
                tableRows += '</TablixRow>\n';
            }

            tableRows += '</TablixRows>\n';
            TablixXML += tableRows;
            TablixCommon += '</TablixBody>\n';
            TablixXML += TablixCommon;
            TablixCommon = '';
            tableRows = '';
            ColumnHierarchy += '<TablixColumnHierarchy>\n';
            ColumnHierarchy += '<TablixMembers>\n';
            $('#tbldetaildest td').each(function () {
                if ($(this).html().trim() != '') {
                    ColumnHierarchy += '<TablixMember />\n';
                }
            });
            if (LIIncludeTotal == true) {
                ColumnHierarchy += '<TablixMember />\n';
            }
            ColumnHierarchy += '</TablixMembers>\n';
            ColumnHierarchy += '</TablixColumnHierarchy>\n';
            TablixXML += ColumnHierarchy;
            ColumnHierarchy = '';
            RowHierarchy += '<TablixRowHierarchy>\n';
            RowHierarchy += '<TablixMembers>\n';
            RowHierarchy += '<TablixMember>\n';
            RowHierarchy += '<KeepWithGroup>After</KeepWithGroup>\n';
            RowHierarchy += '<RepeatOnNewPage>true</RepeatOnNewPage>\n';
            RowHierarchy += '</TablixMember>\n';
            RowHierarchy += '<TablixMember>\n';
            RowHierarchy += '<Group Name="Details" />\n';
            RowHierarchy += '</TablixMember>\n';
            if (LIIncludeGrandTotal == true) {

                if (LIIncludeTax1 || LIIncludeTax2) {

                    var VisibilityField = '=iif(CDbl(Fields!Tax1Rate.Value) > 0 OR CDbl(Fields!Tax2Rate.Value) > 0 ,false,true)';

                    RowHierarchy += '<TablixMember>\n';
                    RowHierarchy += '<Visibility>\n';
                    RowHierarchy += '<Hidden>' + VisibilityField + '</Hidden>\n';
                    RowHierarchy += '</Visibility>\n';
                    RowHierarchy += '<KeepWithGroup>Before</KeepWithGroup>\n';
                    RowHierarchy += '</TablixMember>\n';
                }
                if (LIIncludeTax1) {

                    var VisibilityField = '=iif(CDbl(Fields!Tax1Rate.Value) > 0 ,false,true)';

                    RowHierarchy += '<TablixMember>\n';
                    RowHierarchy += '<Visibility>\n';
                    RowHierarchy += '<Hidden>' + VisibilityField + '</Hidden>\n';
                    RowHierarchy += '</Visibility>\n';
                    RowHierarchy += '<KeepWithGroup>Before</KeepWithGroup>\n';
                    RowHierarchy += '</TablixMember>\n';
                }

                if (LIIncludeTax2) {

                    var VisibilityField = '=iif(CDbl(Fields!Tax2Rate.Value) > 0 ,false,true)';

                    RowHierarchy += '<TablixMember>\n';
                    RowHierarchy += '<Visibility>\n';
                    RowHierarchy += '<Hidden>' + VisibilityField + '</Hidden>\n';
                    RowHierarchy += '</Visibility>\n';
                    RowHierarchy += '<KeepWithGroup>Before</KeepWithGroup>\n';
                    RowHierarchy += '</TablixMember>\n';
                }
                RowHierarchy += '<TablixMember>\n';
                RowHierarchy += '<KeepWithGroup>Before</KeepWithGroup>\n';
                RowHierarchy += '</TablixMember>\n';


            }

            if ($("#hdnModuleName").val().toLowerCase().indexOf('inventorydailyhistorywithdaterange') >= 0) {
                RowHierarchy += '<TablixMember>\n';
                RowHierarchy += '<KeepWithGroup>Before</KeepWithGroup>\n';
                RowHierarchy += '</TablixMember>\n';
            }

            RowHierarchy += '</TablixMembers>\n';

            RowHierarchy += '</TablixRowHierarchy>\n';
            TablixXML += RowHierarchy;
            TablixCommon = '';
            TablixCommon += '<DataSetName>DataSet1</DataSetName>\n';
            TablixCommon += '<Height>0.55208in</Height>\n';
            TablixCommon += '<Width>1in</Width>\n';
            TablixCommon += '<Style>\n';
            TablixCommon += '<Border>\n';
            TablixCommon += '<Style>None</Style>\n';
            TablixCommon += '</Border>\n';
            TablixCommon += '</Style>\n';

            TablixXML += TablixCommon;

            return TablixXML;
        }

        $(".bottomTable").find("#chkIsEnterprise").change(function () {

            var isChk = $(this).is(':checked');
            var tmp_hdn_prev_IsEntReport = $("#hdn_prev_IsEntReport").val();
            var tmp_currentNotificationCount = $("#hdn_currentNotificationCount").val();
            if (isChk == false && tmp_hdn_prev_IsEntReport == "true" && parseInt(tmp_currentNotificationCount) > 0) {
            //if(true){
                $('#EntReportWorningDialog').modal();
            }

        });


    });
    function Removeli(obj) {
        var selecthdnText = ($(obj).parent().find('input[id="hdn"]').val());
        var selectText = ($(obj).parent().find('span.NotChangeText').html());
        var tdindex = $(obj).parent().attr('id').split('_');
        if ($(obj).parent().find('#imgImage').length > 0) {
            $(obj).parent().find('#imgImage').remove();
        }

        //$('#tblHeaderList > tbody:last').append('<tr class="dragtr"><td ><span id="trdrag_Header" class="DragThis">' + selectText + '</span><input type="hidden" value=' + selecthdnText + ' id="hdnmasterfield" /></td></tr>');
        if (selectText.indexOf('=Parameters!BarcodeURL.Value + Fields!BarcodeImage_') < 0
            && selectText.indexOf('=Parameters!BarcodeURL.Value+Fields!BarcodeImage_') < 0
            && selectText.indexOf('=Parameters!WOSignatureURL.Value+Fields!SignatureName.Value') < 0
            && selectText.indexOf('=Parameters!WOSignatureURL.Value + Fields!SignatureName.Value') < 0) {
            $('#tblHeaderList > tbody:last').append('<tr class="dragtr"><td ><span id="trdrag_Header" class="DragThis">' + selectText + '</span><input type="hidden" value=' + selecthdnText + ' id="hdnmasterfield" /></td></tr>');
        }

        $(obj).parent().find('span').html('');
        $(obj).parent().find('input').val('');
        $(obj).parent().find('span').attr('class', 'ChangeText');

        var tdindex = $(obj).parent().attr('id').split('_');
        var prevTD = tdindex[0] + '_' + tdindex[1] + '_' + (tdindex[2] - 1)
        $('#' + prevTD + '').find('span').html('&nbsp;');
        $('#' + prevTD + '').find('input').val('');

        $(obj).remove();
        $(".DragThis").draggable({
            appendTo: "body",
            helper: "clone"
        });

    }
    function RemovelineItem(obj) {
        var totColumns = 0;
        $(obj).parent().parent().find('td').each(function (i) {
            if ($(this).css('display') != 'none') {
                totColumns = parseInt(totColumns) + 1;
            }
        });

        if (totColumns > 1) {
            var selecthdnText = $(obj).parent().find('input').val();
            var selectedText = $(obj).parent().find('span.ChangeText').html();
            //$('#tblLineItemList > tbody:last').append('<tr id="trdrag"><td class="TdDragLineItem"><input type="hidden" value=' + selecthdnText + ' id="hdnlineitem" />' + selectedText + '</td></tr>');

            if ($('#tblLineItemList tbody tr').length > 0) {
                $('#tblLineItemList tbody tr').each(function (i) {
                    var txt = $(this).find('td.TdDragLineItem').text();
                    if (txt.toLowerCase() > selectedText.toLowerCase()) {
                        $(this).before('<tr id="trdrag_Bottom"><td class="TdDragLineItem"><input type="hidden" value=' + selecthdnText + ' id="hdnlineitem" />' + selectedText + '</td></tr>');
                        return false;
                    }
                    else {
                        $('#tblLineItemList tbody').append('<tr id="trdrag_Bottom"><td class="TdDragLineItem"><input type="hidden" value=' + selecthdnText + ' id="hdnlineitem" />' + selectedText + '</td></tr>');
                        return false;
                    }
                });
            }
            else {

                $('#tblLineItemList tbody').append('<tr id="trdrag_Bottom"><td class="TdDragLineItem"><input type="hidden" value=' + selecthdnText + ' id="hdnlineitem" />' + selectedText + '</td></tr>');
            }
            var tblWidth = parseFloat($('table#tbldetaildest').css('width').replace('px', ''));
            var cellWidth = parseFloat($(obj).parent().css('width').replace('px', ''));
            $(obj).parent().remove();
            $('table#tbldetaildest').css('width', (tblWidth - cellWidth) + 'px')
            //$(obj).parent().remove();
            if (selecthdnText != undefined && selecthdnText != "")
                AddRemoveOption(selecthdnText, selectedText, 'remove');

            reinitResizable();
            //reinitHeaderResizable();
            RecalcTableeleWidth();
        }
        else {
            alert('@ResReportMaster.ReqMinimunOneColumn');
        }
    }
    function RemoveGrouplineItem(obj) {
        var totColumns = 0;
        $(obj).parent().parent().find('td').each(function (i) {
            if ($(this).css('display') != 'none') {
                totColumns = parseInt(totColumns) + 1;
            }
        });
        if (totColumns > 1) {
            var selecthdnText = $(obj).parent().find('input[id="hdnFieldName"]').val();
            var selecthdnFieldtype = $(obj).parent().find('input[id="hdnFieldtype"]').val();

            var selectedText = $(obj).prev("input").prev("input").prev('span').html();

            $('#tblGroupList > tbody:last').append('<tr id="trdrag"><td class="TdDragLineItem"><input type="hidden" value=' + selecthdnText + ' id="hdnFieldName" /><input type="hidden" value=' + selecthdnFieldtype + ' id="hdnFieldtype" />' + selectedText + '</td></tr>');
            var tblWidth = parseFloat($('table#tblGroupdetaildest').css('width').replace('px', ''));
            var cellWidth = parseFloat($(obj).parent().css('width').replace('px', ''));
            $(obj).parent().remove();
            $('table#tblGroupdetaildest').css('width', (tblWidth - cellWidth) + 'px')
            if (selecthdnText != undefined && selecthdnText != "")
                AddRemoveOption(selecthdnText, selectedText, 'remove');
            if (selecthdnFieldtype == 'Group') {
                RemoveGroupDropDown(selecthdnText, selectedText);
            }
            reinitHeaderResizable();
        }
        else {
            alert('@ResReportMaster.ReqMinimunOneColumn');
        }
    }
    function DisplaySection(Reporttype) {
        if (Reporttype == '1') {
            $('#dvHeaderlist').css('display', 'none');
            $('#dvLineItemlist').css('display', 'block');
            $('#dvHeaderDet').css('display', 'none');
            $('#dvdetaildest').css('display', 'block');
            $('#dvGrouplist').css('display', 'none');
            $('#dvGroupdetaildest').css('display', 'none');
        }
        else if (Reporttype == '2') {
            $('#dvHeaderlist').css('display', 'block');
            $('#dvLineItemlist').css('display', 'block');
            $('#dvHeaderDet').css('display', 'block');
            $('#dvdetaildest').css('display', 'block');
            $('#dvGrouplist').css('display', 'none');
            $('#dvGroupdetaildest').css('display', 'none');
        }
        else if (Reporttype == '3') {
            $('#dvHeaderlist').css('display', 'none');
            $('#dvLineItemlist').css('display', 'none');
            $('#dvHeaderDet').css('display', 'none');
            $('#dvdetaildest').css('display', 'none');
            $('#dvGrouplist').css('display', 'block');
            $('#dvGroupdetaildest').css('display', 'block');
        }

    }
    function GetSortString() {
        var strsort = '';
        var sortfield1 = $('#ddlSortFieldFirst').val();
        var sortfield2 = $('#ddlSortFieldSecond').val();
        var sortfield3 = $('#ddlSortFieldThird').val();
        var sortfield4 = $('#ddlSortFieldFourth').val();
        var sortfield5 = $('#ddlSortFieldFifth').val();
        var sortType1 = $('#ddlSortOrderFirst').val();
        var sortType2 = $('#ddlSortOrderSecond').val();
        var sortType3 = $('#ddlSortOrderThird').val();
        var sortType4 = $('#ddlSortOrderFourth').val();
        var sortType5 = $('#ddlSortOrderFifth').val();

        if (sortfield1 != null && sortfield1 != '') {
            strsort += sortfield1 + ' ' + sortType1 + ',';
        }
        if (sortfield2 != null && sortfield2 != '') {
            strsort += sortfield2 + ' ' + sortType2 + ',';
        }
        if (sortfield3 != null && sortfield3 != '') {
            strsort += sortfield3 + ' ' + sortType3 + ',';
        }
        if (sortfield4 != null && sortfield4 != '') {
            strsort += sortfield4 + ' ' + sortType4 + ',';
        }
        if (sortfield5 != null && sortfield5 != '') {
            strsort += sortfield5 + ' ' + sortType5 + ',';
        }

        return strsort;
    }
    function DisplaySaveButton(IsBaseReport) {

        if (IsBaseReport) {
            $('#btnSave').css('display', 'none');
            $('#btnbSave').css('display', 'none');
        }
        else {
            $('#btnSave').css('display', 'block');
            $('#btnbSave').css('display', 'block');
        }
    }
    function GetTDCount(obj) {
        var cnt = 0;
        $('#' + obj + ' td').each(function () {
            cnt += 1;
        });
        return cnt;
    }
    function GetTRCount(obj) {
        var cnt = 0;
        $('#' + obj + ' tr').each(function () {
            cnt += 1;
        });
        return cnt;
    }
    function HideSubreportSec(obj) {
        $('#' + obj + ' td').each(function () {
            if ($(this).attr('id') == 'tdsubreport') {
                $(this).parent().css("display", "none");
            }
        });
    }
    function BindChildReport(ReportId) {

        $('#ddlChildReport').find('option').remove();
        if (ReportId.length <= 0) {
            return;
        }

        $.get('@urlGetChildReportList', { 'ParentId': ReportId }, function (result) {
            if (result.Status) {
                var strOption = '';
                var opt = new Option("", 0);
                $('#ddlChildReport').append(opt);

                for (var i = 0; i < result.ListChildReport.length; i++) {
                    opt = new Option(result.ListChildReport[i].ReportName, result.ListChildReport[i].ID);
                    $('#ddlChildReport').append(opt);
                }

                setTimeout(function () {
                    if ('@rID' != "0") {
                        if ('@rID' != '@parentID') {
                            $('#ddlChildReport').val('@rID');
                            ChildReportChange('@rID', $("#ddlChildReport option:selected").text());
                        }
                    }
                }, 2000);

            }
        });
    }
    function GetReportDetails(ReportId) {

        var ReportName;
        var SubReportName;
        var ReportType;
        var moduleName = '';

        $("#tblLineItemList tr").remove();
        $('#tbldetaildest td').each(function () {
            $(this).remove();
        });

        $("#tblGroupList tr").remove();
        $('#tblGroupdetaildest td').each(function () {
            $(this).remove();
        });
        $("#tblHeaderList tr").remove();
        $("#tblHeaderDet tr").remove();
        $("#hdnsubReport").val('');
        $("#hdnReportType").val('');
        $("#hdnReportName").val('');
        $("#hdnSubReportParam").val('');
        $("#hdnRowGroup").val('');
        $("#hdntdcolor").val('');
        $("#hdntdid").val('');
        $("#hdnMasterReportResFile").val('');
        $("#hdnSuReportResFile").val('');
        $("#hdnModuleName").val('');
        $('#divPofRBB').css('display', 'block');

        $('#dvtemp span').remove();
        $('#dvsortingPV').html('');
        if (ReportId.length <= 0) {
            return;
        }

        if (ReportId > 0) {

            $.get('@urlGetReportDetailByID', { 'ID': ReportId }, function (result) {

                ReportName = result.ReportBuilderDTO.ReportFileName;
                SubReportName = result.ReportBuilderDTO.SubReportFileName;
                ReportType = result.ReportBuilderDTO.ReportType

                $("#hdnsubReport").val(SubReportName);
                $("#hdnReportType").val(ReportType);
                $("#hdnReportName").val(ReportName);
                var Isprivate = result.ReportBuilderDTO.IsPrivate;
                var IsBaseReport = result.ReportBuilderDTO.IsBaseReport;
                var IsEntReport = result.ReportBuilderDTO.ISEnterpriseReport;
                $("#hdnMasterReportResFile").val(result.ReportBuilderDTO.MasterReportResFile);
                $("#hdnSuReportResFile").val(result.ReportBuilderDTO.SubReportResFile);

                $('#chkIsPrivate').prop('checked', result.ReportBuilderDTO.IsPrivate);
                $('#chkHideHeader').prop('checked', result.ReportBuilderDTO.HideHeader);
                $('#chkShowSignature').prop('checked', result.ReportBuilderDTO.ShowSignature);
                $('#chkIsEnterprise').prop('checked', result.ReportBuilderDTO.ISEnterpriseReport);

                $('#hdn_prev_IsEntReport').val(result.ReportBuilderDTO.ISEnterpriseReport);
                $('#hdn_currentNotificationCount').val(result.CurrentNotificationCount);

                $('#chkSetAsDefaultPrintReport').prop('checked', result.ReportBuilderDTO.SetAsDefaultPrintReport);

                $('#chkIncludeTotal').prop('checked', result.ReportBuilderDTO.IsIncludeTotal);
                $('#chkIncludeGrandTotal').prop('checked', result.ReportBuilderDTO.IsIncludeGrandTotal);

                $('#chkIncludeTax1').prop('checked', result.ReportBuilderDTO.IsIncludeTax1);
                $('#chkIncludeTax2').prop('checked', result.ReportBuilderDTO.IsIncludeTax2);

                $('#chkIncludeSubTotal').prop('checked', result.ReportBuilderDTO.IsIncludeSubTotal);
                $('#chkIncludeGroup').prop('checked', result.ReportBuilderDTO.IsIncludeGroup);
                $('#chkIsDateRange').prop('checked', result.ReportBuilderDTO.IsIncludeDateRange);
                $('#txtEmailAddress').val(result.ReportBuilderDTO.ToEmailAddress);
                $("#hdnModuleName").val(result.ReportBuilderDTO.ModuleName);

                if (result.ReportBuilderDTO.ModuleName == 'AuditTrail' || result.ReportBuilderDTO.ModuleName == 'Item-AuditTrail') {
                    $('#trSetAsDefaultPrintReport').css('display', 'none');
                    $('#chkSetAsDefaultPrintReport').prop('checked', false);
                }
                else {

                    $('#trSetAsDefaultPrintReport').css('display', 'inline');
                    $('#chkSetAsDefaultPrintReport').prop('checked', result.ReportBuilderDTO.SetAsDefaultPrintReport);
                }

                @*if ('@eTurnsWeb.Helper.SessionHelper.RoleID' == -1) {

                }*@
                if (IsBaseReport == false && '@IsReportDelete' == "True") {
                    $('#btnCDelete').css('display', 'block');
                    if (IsEntReport != null && IsEntReport !== undefined && IsEntReport == true) {
                        if (parseInt('@eTurnsWeb.Helper.SessionHelper.UserType') > 2) {
                            $('#btnCDelete').css('display', 'none');
                        }
                    }
                }

                if (result.ReportBuilderDTO.ISEnterpriseReport && parseInt('@eTurnsWeb.Helper.SessionHelper.UserType') > 2) {
                    $('#btnCDelete').css('display', 'none');
                }

                //  if ($("#hdnModuleName").val().toLowerCase() == 'item-audittrail') {
                if ($("#hdnModuleName").val().toLowerCase().indexOf('audittrail') >= 0) {
                    $('#divPofRBB').find("#chkIncludeSubTotal").attr('disabled', 'disabled');
                }
                else {
                    $('#divPofRBB').find("#chkIncludeSubTotal").removeAttr('disabled', 'disabled');
                }
                // if ($("#hdnModuleName").val().toLowerCase() == 'item-audittrail') {
                //     $('#divPofRBB').css('display', 'none');
                // }
                // else {
                //     $('#divPofRBB').css('display', 'block');
                // }

                if (result.ReportBuilderDTO.IsPrivate == true) {
                    $('#chkIsPrivate').prop('disabled', 'disabled');
                    $('#chkSetAsDefaultPrintReport').prop('disabled', 'disabled');
                    $('#chkSetAsDefaultPrintReport').prop('checked', false);
                }
                else {
                    $('#chkIsPrivate').removeAttr('disabled');
                    $('#chkSetAsDefaultPrintReport').removeAttr('disabled');
                }

                if (result.ReportBuilderDTO.ISEnterpriseReport == true) {
                    $('#chkIsPrivate').prop('disabled', 'disabled');
                    if ('@(eTurnsWeb.Helper.SessionHelper.UserType)' > 2) {
                        $('#chkIsEnterprise').prop('disabled', 'disabled');
                    }

                    $('#chkIsPrivate').prop('checked', false);
                }
                else {
                    $('#chkIsPrivate').removeAttr('disabled');;
                }

                DisplaySection(ReportType);
                DisplaySaveButton(IsBaseReport);
                EDIsEnterprise(ReportId, result.ReportBuilderDTO.ISEnterpriseReport);
                var top = '';
                var bottom = '';
                $('#trTax2,#trTax1').css('display', 'none');
                if (ReportType == '2') {
                    $('#btnAddRow').css('display', 'block');
                    $('#btnRemoveRow').css('display', 'block');

                    if (result.ReportBuilderDTO.ModuleName == "WorkOrder") {
                        if ('@(rm.IsTax1Parts)' == "True" && '@(rm.Tax1Rate.GetValueOrDefault(0) > 0)' == "True") {
                            $('#trTax1').css('display', '');
                        }
                        if ('@(rm.IsTax2Parts)' == "True" && '@(rm.Tax2Rate.GetValueOrDefault(0) > 0)' == "True") {
                            $('#trTax2').css('display', '');
                        }
                    }
                }
                else {
                    $('#btnAddRow').css('display', 'none');
                    $('#btnRemoveRow').css('display', 'none');
                }

                if (SubReportName != null && SubReportName != '') {
                    top = ReportName;
                    bottom = SubReportName;
                }
                else if (ReportType == '1') {
                    top = '';
                    bottom = ReportName;
                }
                else if (ReportType == '2') {
                    top = ReportName;
                    bottom = SubReportName;
                }
                if (bottom != '') {
                    $.get('@urlGetReportDetail', { 'ReportName': bottom, 'IsPrivate': Isprivate, 'ResourceFile': $("#hdnMasterReportResFile").val(), 'ReportId': ReportId }, function (result) {

                        //$('#tblLineItemList tbody').append(result.FieldLIs);
                        $('#tblLineItemList tbody').empty();
                        $('#tblLineItemList tbody').html(result.FieldLIs);

                        $('#tbldetaildest').css('width', result.ReportTableWidth + "in");
                        if (result.HasTotal) {
                            $('#tbldetaildest').css('width', parseFloat(result.ReportTableWidth - 1) + "in");
                        }

                        //$('#tbldetaildest tr:last').append(result.ReportField);
                        $('#tbldetaildest tr:last').empty()
                        $('#tbldetaildest tr:last').html(result.ReportField);

                        $("#ddlPagesetUp option[value=" + result.ReportPageSetUpType + "]").attr("selected", "selected").trigger('change');

                        setTimeout(function () { }, 100);
                        reinitResizable();
                        RecalcTableeleWidth();
                        if (!result.HasTotal) {
                            $('#chkIncludeTotal').parent().css('display', 'none');
                            $('#chkIncludeSubTotal').parent().css('display', 'none');
                            $('#chkIncludeGrandTotal').parent().css('display', 'none');
                            $('#chkIncludeTax1').parent().css('display', 'none');
                            $('#chkIncludeTax2').parent().css('display', 'none');
                        }
                        else {
                            $('#chkIncludeTotal').parent().css('display', '');
                            $('#chkIncludeSubTotal').parent().css('display', '');
                            $('#chkIncludeGrandTotal').parent().css('display', '');
                            $('#chkIncludeTax1').parent().css('display', '');
                            $('#chkIncludeTax2').parent().css('display', '');
                        }
                        //$("#tblLineItemList tr").selectable("enable");
                    });

                }


                if (top != '') {

                    $.get('@urlGetVerticalReportDetail', { 'ReportName': top, 'IsPrivate': Isprivate, 'ResourceFile': $("#hdnMasterReportResFile").val(), 'ReportId': ReportId }, function (result) {
                        //('#tblHeaderList tbody').append(result.FieldLIs);
                        $('#tblHeaderList tbody').empty();
                        $('#tblHeaderList tbody').html(result.FieldLIs);

                        if (result.ReportPageSetUpType == 2) {
                            $('#tblHeaderDet').css('width', "10.50in");
                        }
                        else {
                            $('#tblHeaderDet').css('width', "08.50in");
                        }
                        //$('#tblHeaderDet tbody').append(result.ReportLeftField);
                        $('#tblHeaderDet tbody').empty();
                        $('#tblHeaderDet tbody').html(result.ReportLeftField);
                        if ($('div#dvHeaderDet').css('display') != 'none') {
                            $('table#tblHeaderDet tbody tr').find('td').each(function (indx, objtd) {
                                $(this).resizable({
                                    handles: 's',
                                    resize: function (event, ui) {
                                        $(this).siblings().height(ui.size.height);
                                    }
                                });
                            })
                        }

                        $("#hdnSubReportParam").val(result.SubReportParam);
                        $('#chkIncludeRoomDetail').prop('checked', result.IsRoomDetail);
                        HideSubreportSec("tblHeaderDet");

                        $("#ddlPagesetUp option[value=" + result.ReportPageSetUpType + "]").attr("selected", "selected").trigger('change');;
                        $('#dvtemp').append(result.RowGrouping);

                        $(".DragThis").draggable({
                            appendTo: "body",
                            helper: "clone"
                        });
                        CommonDroppable();
                        reinitHeaderResizable();

                    });

                }

                if (ReportType == '3') {
                    $.get('@urlGetGroupingReportDetail', { 'ReportId': ReportId }, function (result) {

                        $('#tblGroupList tbody').html(result.FieldLIs);
                        $('#tblGroupdetaildest').css('width', result.ReportTableWidth + "in");
                        if (result.HasTotal) {
                            $('#tblGroupdetaildest').css('width', parseFloat(result.ReportTableWidth - 1) + "in");
                        }

                        $('#tblGroupdetaildest tr:last').html(result.ReportField);
                        dbGroupList = result.DBGroupList;
                        LoadGroup(result.Grouplist, result.RemainingGrouplist);

                        $("#ddlPagesetUp option[value=" + result.ReportPageSetUpType + "]").attr("selected", "selected").trigger('change');;

                        if (result.HasTotal) {
                            $('#chkIncludeTotal').parent().css('display', '');
                            $('#chkIncludeSubTotal').parent().css('display', '');
                            $('#chkIncludeGrandTotal').parent().css('display', '');
                            $('#chkIncludeTax1').parent().css('display', '');
                            $('#chkIncludeTax2').parent().css('display', '');

                        }
                        else {
                            $('#chkIncludeTotal,#chkIncludeSubTotal,#chkIncludeGrandTotal,chkIncludeTax1,chkIncludeTax2').removeAttr('checked');
                            $('#chkIncludeTotal').parent().css('display', 'none');
                            $('#chkIncludeSubTotal').parent().css('display', 'none');
                            $('#chkIncludeGrandTotal').parent().css('display', 'none');
                            $('#chkIncludeTax1').parent().css('display', 'none');
                            $('#chkIncludeTax2').parent().css('display', 'none');
                        }

                        $(".DragThis").draggable({
                            appendTo: "body",
                            helper: "clone"
                        });
                        reinitHeaderResizable();

                        $(".notSelected").droppable({
                            accept: "#trdrag_Header",
                            drop: function (event, ui) {

                                var objtd = $('#' + $(this).attr('id') + '');
                                if (objtd.find('#imgImage').length > 0) {
                                    objtd.find('#imgImage').remove();
                                }
                                objtd.find('span').remove();
                                var text = "<span class='NotChangeText'>" + ui.draggable.text() + "</span>";
                                objtd.append(text);
                                var objimg = ''
                                if (objtd.find('#imgdelete').length < 1) {
                                    objimg = "<img onclick='Removeli(this)'  src='../../Content/images/deletereport_icon.png' alt='Remove' id='imgdelete'></img>";
                                }
                                objtd.append(objimg);

                            }

                        });
                    });
                }

            });

        }

        $('#DivLoading').show();
        $('#dvsortingPV').html('');
        if ($("#hdnModuleName").val().toLowerCase() != 'item-audittrail') {
            $.ajax({
                url: '@Url.Action("ReportSorting", "ReportBuilder")',
                type: 'GET',
                data: { 'ReportID': ReportId },
                dataType: 'text',
                contentType: 'application/json',
                traditional: true,
                success: function (data) {
                    $('#dvsortingPV').html(data);
                    $('#DivLoading').hide();
                    hideColumnInOtherDropdown("ddlSortFieldFirst", $("#ddlSortFieldFirst").val());
                    if ($("#ddlSortFieldSecond").val() != '') {
                        hideColumnInOtherDropdown("ddlSortFieldSecond", $("#ddlSortFieldSecond").val());
                    }
                    if ($("#ddlSortFieldThird").val() != '') {
                        hideColumnInOtherDropdown("ddlSortFieldThird", $("#ddlSortFieldThird").val());
                    }
                    if ($("#ddlSortFieldFourth").val() != '') {
                        hideColumnInOtherDropdown("ddlSortFieldFourth", $("#ddlSortFieldFourth").val());
                    }
                    if ($("#ddlSortFieldFifth").val() != '') {
                        hideColumnInOtherDropdown("ddlSortFieldFifth", $("#ddlSortFieldFifth").val());
                    }
                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                }
            });
        }

        $("#chkIsPrivate").change(function () {
            if (this.checked) {
                $('#btnSave').css('display', 'none');
                $('#btnbSave').css('display', 'none');
            }
            else {
                $('#btnSave').css('display', 'block');
                $('#btnbSave').css('display', 'block');
            }
        });
        $("#chkIncludeGroup").change(function () {
            LoadGroup();
        });
    }
    function GetBarcodeText(type, tdid) {
        var strText = '';
        strText += '&lt;TablixCell&gt;\n';
        strText += '&lt;CellContents&gt;\n';
        strText += '&lt;Image Name="Image' + tdid + '"&gt;\n';
        strText += '&lt;Source&gt;External&lt;/Source&gt;\n';
        strText += '&lt;Value&gt;=Parameters!BarcodeURL.Value+Fields!' + type + '.Value&lt;/Value&gt;\n';
        strText += '&lt;Style&gt;\n';
        strText += '&lt;Border&gt;\n';
        strText += '&lt;Color&gt;LightGrey&lt;/Color&gt;\n';
        strText += '&lt;Style&gt;Solid&lt;/Style&gt;\n';
        strText += '&lt;/Border&gt;\n';
        strText += '&lt;PaddingLeft&gt;5pt&lt;/PaddingLeft&gt;\n';
        strText += '&lt;PaddingRight&gt;5pt&lt;/PaddingRight&gt;\n';
        strText += '&lt;PaddingTop&gt;5pt&lt;/PaddingTop&gt;\n';
        strText += '&lt;PaddingBottom&gt;5pt&lt;/PaddingBottom&gt;\n';
        strText += '&lt;/Style&gt;\n';
        strText += '&lt;/Image&gt;\n';
        strText += '&lt;/CellContents&gt;\n';
        strText += '&lt;/TablixCell&gt;\n';
        return strText;
    }
    function CommonDroppable() {

        $(".notSelected").droppable({
            accept: "#trdrag_Header",
            drop: function (event, ui) {

                var tdindex = $(this).attr('id').split('_');

                if ((tdindex[2]) % 2 == 0) {

                    var objtd = $('#' + $(this).attr('id') + '');

                    //                    var selecthdnText = objtd.find("input#hdn").val();
                    var selecthdnText = objtd.find('input[id="hdn"]').val();
                    var selectText = objtd.find('span.NotChangeText').html();
                    if (selecthdnText != '') {
                        $('#tblHeaderList > tbody:last').append('<tr class="dragtr"><td ><span id="trdrag_Header" class="DragThis">' + selectText + '</span><input type="hidden" value=' + selecthdnText + ' id="hdnmasterfield" /></td></tr>');

                        $(".DragThis").draggable({
                            appendTo: "body",
                            helper: "clone"
                        });
                    }
                    if (objtd.find('#imgImage').length > 0) {
                        objtd.find('#imgImage').remove();
                    }
                    objtd.find('span').remove();
                    objtd.find('input').remove();

                    var hdn = ui.draggable.parent().find('input').val();

                    var text = '';
                    if (hdn.toLowerCase().indexOf('barcodeimage_') > -1) {
                        text = text + "<input type='hidden' value='' id='hdn' /><span style='display:none' class='NotChangeText'>'" + GetBarcodeText(hdn, $(this).attr('id')) + "'</span>";
                        text = text + "<img id='imgImage' alt='Image' src='../../Content/images/SampleBarcodeImage.png' style='display: block;height: 12px;width: 75px; float: left; margin-top: -2px; vertical-align: middle;' ></img>";
                    }
                    else {
                        text = "<span class='NotChangeText ui-draggable' >" + ui.draggable.text() + "</span>";
                        text = text + "<input type='hidden' value='" + hdn + "' id='hdn' />";
                    }
                    objtd.append(text);
                    var objimg = ''
                    if (objtd.find('#imgdelete').length < 1) {
                        objimg = "<img onclick='Removeli(this)'  src='../../Content/images/deletereport_icon.png' alt='Remove' id='imgdelete'></img>";
                    }
                    objtd.append(objimg);
                    if (hdn.toLowerCase().indexOf('barcodeimage_') < 0) {
                        var strtdid = tdindex[0] + '_' + tdindex[1] + '_' + (tdindex[2] - 1);


                        var objtd = $('#' + strtdid + '');
                        if (objtd.find('#imgImage').length > 0) {
                            objtd.find('#imgImage').remove();
                        }
                        objtd.find('span').remove();
                        objtd.find('input').remove();
                        text = "<span class='ChangeText' style='font-weight: bold;' >" + ui.draggable.text() + "</span>";
                        text = text + "<input type='hidden' value='" + hdn + "' id='hdn' />";
                        objtd.append(text);

                        ui.draggable.parents("tr").remove();
                        ui.draggable.parents("td").remove();

                        ui.draggable.remove();
                    }



                }
            }
        });
    }
    function ConvertPXtoInch(pixval) {
        var inch;

        pixval = pixval.replace("px", "");
        inch = parseFloat(parseFloat(pixval) / 96).toFixed(2);

        return inch;
    }
    function AddRemoveOption(objKey, objVal, Type) {

        if (Type == 'add') {
            if (objKey.indexOf('BarcodeImage_') < 0) {
                $('#ddlSortFieldFirst').append('<option value="' + objKey + '">' + objVal + '</option>');
                $('#ddlSortFieldSecond').append('<option value="' + objKey + '">' + objVal + '</option>');
                $('#ddlSortFieldThird').append('<option value="' + objKey + '">' + objVal + '</option>');
                $('#ddlSortFieldFourth').append('<option value="' + objKey + '">' + objVal + '</option>');
                $('#ddlSortFieldFifth').append('<option value="' + objKey + '">' + objVal + '</option>');
            }
        }
        else if (Type == 'remove') {
            $('#ddlSortFieldFirst option[value="' + objKey + '"]').remove();
            $('#ddlSortFieldSecond option[value="' + objKey + '"]').remove();
            $('#ddlSortFieldThird option[value="' + objKey + '"]').remove();
            $('#ddlSortFieldFourth option[value="' + objKey + '"]').remove();
            $('#ddlSortFieldFifth option[value="' + objKey + '"]').remove();
        }

    }
    function BindGroupTable() {

    }
    $('#ddlRPTGroupBy').change(function (e) {
        $("#ddlGroupName").multiselect("widget").find(":checkbox").attr("checked", false);
        $("#ddlGroupName").multiselect("widget").find(":checkbox[value='" + $(this).val() + "']").attr("checked", true);
        BindGroupItemTable();
    });

    function LoadGroup(objList, objRemainingList) {
        $("#ddlRPTGroupBy > option").remove();
        $("#ddlGroupName > option").remove();
        $("#ddlGroupName").multiselect("refresh");
        var s = '';
        var newS = '';
        for (var i = 0; i < objList.length; i++) {
            s += '<option value="' + objList[i].key + '"  >' + objList[i].value + '</option>';
            newS += '<option value="' + objList[i].key + '"  >' + objList[i].value + '</option>';
        }

        for (var i = 0; i < objRemainingList.length; i++) {
            newS += '<option disabled="true" value="' + objRemainingList[i].key + '"  >' + objRemainingList[i].value + '</option>';
        }
        $('#ddlRPTGroupBy').append(newS);

        $("#ddlGroupName").append(s);
        $("#ddlGroupName").multiselect({
            noneSelectedText: 'Group By', selectedList: 5,
            selectedText: function (numChecked, numTotal, checkedItems) {
                return 'Group By' + ' ' + numChecked + ' ' + selected;
            }
        }).bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
            if (ui.checked) {
                $("#ddlGroupName").multiselect("widget").find(":checkbox[value='" + ui.value + "']").attr("checked", "checked");
                $("#ddlGroupName option[value='" + ui.value + "']").attr("selected", 1);
                BindGroupItemTable();
            }
            else {
                BindGroupItemTable();
            }
        });

        for (var i = 0; i < objList.length; i++) {

            if (objList[i].IsSelect == true) {
                $("#ddlGroupName").multiselect("widget").find(":checkbox[value='" + objList[i].key + "']").attr("checked", "checked");
                $("#ddlGroupName option[value='" + objList[i].key + "']").attr("selected", 1);
                $("#ddlGroupName").multiselect("refresh");
                $("#ddlRPTGroupBy option[value='" + objList[i].key + "']").attr("selected", true);
            }
        }
    }

    function AppendGroupbyDropdown(hdntext, viewtext) {

        var opt = '<option value=' + hdntext + '  >' + viewtext + '</option>';
        $("#ddlGroupName").append(opt);
        $("#ddlGroupName").multiselect("refresh");
    }
    function RemoveGroupDropDown(selecthdnText, selectedText) {
        $('#ddlGroupName option[value="' + selecthdnText + '"]').remove();
        $("#ddlGroupName").multiselect("refresh");
    }
    function getSelectedList() {
        var selectedlist = '';
        $('.ui-multiselect-menu [type="checkbox"][id^="ui-multiselect-ddlGroupName-option"]').each(function () {
            if ($(this).attr('checked') == 'checked') {
                if (selectedlist.length > 0)
                    selectedlist += ',';
                selectedlist += $(this).val();
            }
        });
        return selectedlist;
    }

    function BindGroupItemTable() {
        var strtdtext = '';

        var selectedlist = getSelectedList().split(',');

        var grouptdArray = [];
        var groupddlArray = [];
        var groupTddeletearray = [];
        $('#tblGroupdetaildest td').each(function () {
            grouptdArray.push($(this));
        });
        $('#tblGroupdetaildest td').each(function () {
            $(this).remove();
        });

        if (dbGroupList != null && dbGroupList !== undefined && dbGroupList.length > 0) {
            for (var i = 0; i < dbGroupList.length; i++) {

                if (selectedlist.indexOf(dbGroupList[i].FieldName) > -1) {
                    groupddlArray.push(dbGroupList[i].FieldName);
                }
            }
        }
        groupTddeletearray = grouptdArray;
        for (var i = 0; i < groupddlArray.length; i++) {
            var grouptext = groupddlArray[i];
            grouptdArray = groupTddeletearray;
            groupTddeletearray = [];
            for (var j = 0; j < grouptdArray.length; j++) {
                var tdhdntext = $(grouptdArray[j]).find("input[id='hdnFieldName']").val();
                if (grouptext == tdhdntext) {
                    strtdtext += $(grouptdArray[j]);
                    $('#tblGroupdetaildest tr:last').append($(grouptdArray[j]));

                }
                else {
                    groupTddeletearray.push($(grouptdArray[j]));
                }

            }

        }
        for (var i = 0; i < groupTddeletearray.length; i++) {
            $('#tblGroupdetaildest tr:last').append($(groupTddeletearray[i]));
        }
    }
    function CreateGroupRDLCCell(objTextbox, objTextRunVal, objFontStyle, objFontWeight, objTextAlign, BackGroundColor) {
        var RDLCCell = '';
        RDLCCell += '<TablixCell>\n';
        RDLCCell += '<CellContents>\n';
        RDLCCell += '<Textbox Name="' + objTextbox + '">\n';
        RDLCCell += '<CanGrow>true</CanGrow>\n';
        RDLCCell += '<KeepTogether>true</KeepTogether>\n';
        RDLCCell += '<Paragraphs>\n';
        RDLCCell += '<Paragraph>\n';
        RDLCCell += '<TextRuns>\n';
        RDLCCell += '<TextRun>\n';

        if ($("#hdnModuleName").val().toLowerCase() == 'precisedemandplanning') {
            if (objTextRunVal == '=iif(Fields!MinimumQuantity <> Fields!MaximumQuantity, Fields!DemandPlanningQtyToOrder,"")'
                || objTextRunVal == '=iif(Fields!MinimumQuantity != Fields!MaximumQuantity, Fields!DemandPlanningQtyToOrder,"")'
                || objTextRunVal == '=iif(Fields!MinimumQuantity = Fields!MaximumQuantity,"", Fields!DemandPlanningQtyToOrder)') {
                objTextRunVal = "DemandPlanningQtyToOrder";
            }
            if (objTextRunVal == '= iif(Fields!CurrentMinimum >  0, Fields!NoOfDaysUntilOrder,"")') {
                objTextRunVal = "NoOfDaysUntilOrder";
            }
            if (objTextRunVal == '=Fields!= iif(Fields!CurrentMinimum >  0, Fields!NoOfDaysUntilOrder,"").Value') {
                objTextRunVal = '= iif(Fields!CurrentMinimum.Value >  0, Fields!NoOfDaysUntilOrder.Value,"")';
            }
            if (objTextRunVal == '=Fields!=iif(Fields!MinimumQuantity <> Fields!MaximumQuantity, Fields!DemandPlanningQtyToOrder,"").Value'
                || objTextRunVal == '=Fields!=iif(Fields!MinimumQuantity != Fields!MaximumQuantity, Fields!DemandPlanningQtyToOrder,"").Value'
                || objTextRunVal == '=Fields!=iif(Fields!MinimumQuantity = Fields!MaximumQuantity,"", Fields!DemandPlanningQtyToOrder).Value') {
                objTextRunVal = '=iif(Fields!MinimumQuantity.Value = Fields!MaximumQuantity.Value,"", Fields!DemandPlanningQtyToOrder.Value)';
            }
        }
        else if ($('#hdnMasterReportResFile').val().toLowerCase() == "res_rpt_pullsummarybyquarter")
        {
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month1Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month1Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month1Column)') {
                objTextRunVal = '=Parameters!Month1Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month2Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month2Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month2Column)') {
                objTextRunVal = '=Parameters!Month2Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month3Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month3Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month3Column)') {
                objTextRunVal = '=Parameters!Month3Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month4Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month4Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month4Column)') {
                objTextRunVal = '=Parameters!Month4Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month5Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month5Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month5Column)') {
                objTextRunVal = '=Parameters!Month5Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month6Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month6Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month6Column)') {
                objTextRunVal = '=Parameters!Month6Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month7Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month7Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month7Column)') {
                objTextRunVal = '=Parameters!Month7Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month8Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month8Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month8Column)') {
                objTextRunVal = '=Parameters!Month8Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month9Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month9Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month9Column)') {
                objTextRunVal = '=Parameters!Month9Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month10Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month10Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month10Column)') {
                objTextRunVal = '=Parameters!Month10Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month11Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month11Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month11Column)') {
                objTextRunVal = '=Parameters!Month11Header.Value';
            }
            if (objTextRunVal == '=Fields!=Fields(Parameters!Month12Column).Value') {
                objTextRunVal = '=Fields(Parameters!Month12Column.Value).Value';
            }
            if (objTextRunVal == '=Fields(Parameters!Month12Column)') {
                objTextRunVal = '=Parameters!Month12Header.Value';
            }
        }
        RDLCCell += '<Value>' + objTextRunVal + '</Value>\n';
        RDLCCell += '<Style>\n';
        //RDLCCell += '<FontFamily>Calibri</FontFamily>\n';
        RDLCCell += '<FontStyle>' + objFontStyle + '</FontStyle>\n';
        RDLCCell += '<FontFamily>Calibri</FontFamily>\n';
        RDLCCell += '<FontWeight>' + objFontWeight + '</FontWeight>\n';
        RDLCCell += '</Style>\n';
        RDLCCell += '</TextRun>\n';
        RDLCCell += '</TextRuns>\n';
        RDLCCell += '<Style>\n';
        RDLCCell += '<TextAlign>' + objTextAlign + '</TextAlign>\n';
        RDLCCell += '</Style>\n';
        RDLCCell += '</Paragraph>\n';
        RDLCCell += '</Paragraphs>\n';
        RDLCCell += '<rd:DefaultName>' + objTextbox + '</rd:DefaultName>\n';
        RDLCCell += '<Style>\n';
        RDLCCell += '<Border>\n';
        RDLCCell += '<Color>LightGrey</Color>\n';
        RDLCCell += '<Style>Solid</Style>\n';
        RDLCCell += '</Border>\n';
        //RDLCCell += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","White")</BackgroundColor>\n';
        RDLCCell += '<BackgroundColor>' + BackGroundColor + '</BackgroundColor>\n';
        RDLCCell += '<PaddingLeft>2pt</PaddingLeft>\n';
        RDLCCell += '<PaddingRight>2pt</PaddingRight>\n';
        RDLCCell += '<PaddingTop>2pt</PaddingTop>\n';
        RDLCCell += '<PaddingBottom>2pt</PaddingBottom>\n';
        RDLCCell += '</Style>\n';
        RDLCCell += '</Textbox>\n';
        RDLCCell += '</CellContents>\n';
        RDLCCell += '</TablixCell>\n';
        return RDLCCell;
    }
    function CreateGroupRDLCColumn(objwidth) {

        var RDLCColumn = ''
        RDLCColumn += '<TablixColumn>\n';
        RDLCColumn += '<Width>' + objwidth + 'in</Width>\n';
        RDLCColumn += '</TablixColumn>\n';
        return RDLCColumn;
    }
    function GetGroupTotRowWidth(obj, objselectedlist) {
        var TotRowWidth = 0;
        $('#' + obj + ' tr:first td').each(function () {
            var isGroup = false;
            var tdhdntext = $(this).find("input[id='hdnFieldName']").val();
            for (var i = 0; i < objselectedlist.length; i++) {
                if (tdhdntext == objselectedlist[i]) {
                    isGroup = true;
                    break;
                }
            }
            if (isGroup == false) {
                TotRowWidth += parseInt(($(this).css("width")).replace("px", ""));
            }

        });
        return TotRowWidth;
    }
    function GenerateBarcode(objBarcode, cnt) {

        var TablixBarcode = '';
        TablixBarcode += '<TablixCell>\n';
        TablixBarcode += '<CellContents>\n';
        TablixBarcode += '<Image Name="ImageTextbox' + cnt + '">\n';
        TablixBarcode += '<Source>External</Source>\n';
        TablixBarcode += '<Value>=Parameters!BarcodeURL.Value+Fields!' + objBarcode + '.Value</Value>\n';
        TablixBarcode += '<Style>\n';
        TablixBarcode += '<Border>\n';
        TablixBarcode += '<Color>LightGrey</Color>\n';
        TablixBarcode += '<Style>Solid</Style>\n';
        TablixBarcode += '</Border>\n';
        TablixBarcode += '<PaddingLeft>5pt</PaddingLeft>\n';
        TablixBarcode += '<PaddingRight>5pt</PaddingRight>\n';
        TablixBarcode += '<PaddingTop>5pt</PaddingTop>\n';
        TablixBarcode += '<PaddingBottom>5pt</PaddingBottom>\n';
        TablixBarcode += '</Style>\n';
        TablixBarcode += '</Image>\n';
        TablixBarcode += '</CellContents>\n';
        TablixBarcode += '</TablixCell>\n';

        return TablixBarcode;
    }
    function CreateTablixColumnHierarchy(objarr, objIncludeTotal) {
        var TablixColumnHierarchy = '';
        if ($('#hdnMasterReportResFile').val().toLowerCase() == "res_rpt_ordersummarylineitem") {

            TablixColumnHierarchy += '<TablixColumnHierarchy>\n'
            TablixColumnHierarchy += '<TablixMembers>\n'
            for (var j = 0; j < objarr.length; j++) {
                if (objarr[j].toLowerCase() == "OrderSupplier".toLowerCase()) {
                    TablixColumnHierarchy += '<TablixMember>\n';
                    TablixColumnHierarchy += '<Visibility>\n';
                    TablixColumnHierarchy += '<Hidden>=IIF(iif(Right(Parameters!RangeFieldName.Value, 1) = ",", Left(Parameters!RangeFieldName.Value, Len(Parameters!RangeFieldName.Value)-1),Parameters!RangeFieldName.Value) = "OrderSupplier",false,true)</Hidden>';
                    TablixColumnHierarchy += '</Visibility>\n';
                    TablixColumnHierarchy += '</TablixMember>\n';
                }
                else if (objarr[j].toLowerCase() == "OrderManufacturer".toLowerCase()) {
                    TablixColumnHierarchy += '<TablixMember>\n';
                    TablixColumnHierarchy += '<Visibility>\n';
                    TablixColumnHierarchy += '<Hidden>=IIF(iif(Right(Parameters!RangeFieldName.Value, 1) = ",", Left(Parameters!RangeFieldName.Value, Len(Parameters!RangeFieldName.Value)-1),Parameters!RangeFieldName.Value) = "OrderManufacturer",false,true)</Hidden>';
                    TablixColumnHierarchy += '</Visibility>\n';
                    TablixColumnHierarchy += '</TablixMember>\n';}
                else {
                    TablixColumnHierarchy += '<TablixMember />\n'
                }
            }
            if (objIncludeTotal == true) {
                TablixColumnHierarchy += '<TablixMember />\n'
            }
            TablixColumnHierarchy += '</TablixMembers>\n'
            TablixColumnHierarchy += '</TablixColumnHierarchy>\n'
        }
        else if ($('#hdnMasterReportResFile').val().toLowerCase() == "res_rpt_pullsummarybyquarter")
        {
            TablixColumnHierarchy += '<TablixColumnHierarchy>\n'
            TablixColumnHierarchy += '<TablixMembers>\n'
            for (var j = 0; j < objarr.length; j++) {
                if (objarr[j].toLowerCase() == "Month1".toLowerCase() || objarr[j].toLowerCase() == "Month2".toLowerCase() ||
                    objarr[j].toLowerCase() == "Month3".toLowerCase() || objarr[j].toLowerCase() == "Month4".toLowerCase() ||
                    objarr[j].toLowerCase() == "Month5".toLowerCase() || objarr[j].toLowerCase() == "Month6".toLowerCase() ||
                    objarr[j].toLowerCase() == "Month7".toLowerCase() || objarr[j].toLowerCase() == "Month8".toLowerCase() ||
                    objarr[j].toLowerCase() == "Month9".toLowerCase() || objarr[j].toLowerCase() == "Month10".toLowerCase() ||
                    objarr[j].toLowerCase() == "Month11".toLowerCase() || objarr[j].toLowerCase() == "Month12".toLowerCase() ||
                    objarr[j].toLowerCase() == "=Fields(Parameters!Month1Column)".toLowerCase() || objarr[j].toLowerCase() == "=Fields(Parameters!Month2Column)".toLowerCase() ||
                    objarr[j].toLowerCase() == "=Fields(Parameters!Month3Column)".toLowerCase() || objarr[j].toLowerCase() == "=Fields(Parameters!Month4Column)".toLowerCase() ||
                    objarr[j].toLowerCase() == "=Fields(Parameters!Month5Column)".toLowerCase() || objarr[j].toLowerCase() == "=Fields(Parameters!Month6Column)".toLowerCase() ||
                    objarr[j].toLowerCase() == "=Fields(Parameters!Month7Column)".toLowerCase() || objarr[j].toLowerCase() == "=Fields(Parameters!Month8Column)".toLowerCase() ||
                    objarr[j].toLowerCase() == "=Fields(Parameters!Month9Column)".toLowerCase() || objarr[j].toLowerCase() == "=Fields(Parameters!Month10Column)".toLowerCase() ||
                    objarr[j].toLowerCase() == "=Fields(Parameters!Month11Column)".toLowerCase() || objarr[j].toLowerCase() == "=Fields(Parameters!Month12Column)".toLowerCase()
                    ) {
                    TablixColumnHierarchy += '<TablixMember>\n';
                    TablixColumnHierarchy += '<Visibility>\n';
                    TablixColumnHierarchy += '<Hidden>=IIf(Parameters!Is' + objarr[j].replace("=Fields(Parameters!", "").replace("Column)","") + 'Visible.Value = "true", false,true)</Hidden>';
                    TablixColumnHierarchy += '</Visibility>\n';
                    TablixColumnHierarchy += '</TablixMember>\n';
                }
                else {
                    TablixColumnHierarchy += '<TablixMember />\n'
                }
            }
            if (objIncludeTotal == true) {
                TablixColumnHierarchy += '<TablixMember />\n'
            }
            TablixColumnHierarchy += '</TablixMembers>\n'
            TablixColumnHierarchy += '</TablixColumnHierarchy>\n'
        }
        else {
            TablixColumnHierarchy += '<TablixColumnHierarchy>\n'
            TablixColumnHierarchy += '<TablixMembers>\n'
            for (var j = 0; j < objarr.length; j++) {
                TablixColumnHierarchy += '<TablixMember />\n'
            }
            if (objIncludeTotal == true) {
                TablixColumnHierarchy += '<TablixMember />\n'
            }
            TablixColumnHierarchy += '</TablixMembers>\n'
            TablixColumnHierarchy += '</TablixColumnHierarchy>\n'
        }
        return TablixColumnHierarchy;
    }
    function CreateSubGroupReportXML() {
        var TablixXML = '';
        var TablixCommon = '';
        var tablecolumn = '';
        var tableRows = '';
        var TablixHeaderNodeText = '';
        var TablixDataNodeText = '';
        var ColumnHierarchy = '';
        var RowHierarchy = '';
        var LIIncludeTotal = $('#chkIncludeTotal').is(':checked');
        var LIIncludeGrandTotal = $('#chkIncludeGrandTotal').is(':checked');
        var selectedlist = getSelectedList().split(',');
        var TotRowWidth = GetGroupTotRowWidth('tbldetaildest', selectedlist);

        TablixCommon += '<TablixBody>\n';
        tablecolumn += '<TablixColumns>\n';
        tableRows += '<TablixRows>\n';
        tableRows += '<TablixRow>\n';
        tableRows += '<Height>0.25in</Height>\n';
        tableRows += '<TablixCells>\n';
        var cnt = 0;
        if (LIIncludeTotal == true) {
            TotRowWidth = 1100;
        }
        $('#tbldetaildest td').each(function () {

            var spanstyle = '';
            var spanweight = '';
            var tdstyle = '';
            //var tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
            //var tdhdntext = $(this).find("input[id='hdnFieldName']").val();
            var tdhdntext = $(this).find('input').val();
            if (selectedlist.indexOf(tdhdntext) < 0) {
                cnt += 1;
                var ColumnWidth = '';
                //ColumnWidth = ConvertPXtoInch(GetCalculateWidth('tblGroupdetaildest', TotRowWidth, ($(this).css("width")).replace("px", "")));
                ColumnWidth = ConvertPXtoInch($(this).css("width").replace("px", ""));
                tablecolumn += CreateGroupRDLCColumn(ColumnWidth);

                spanstyle = $(this).find('span').css("font-style");
                spanweight = $(this).find('span').css("font-weight");
                tdstyle = $(this).css("text-align");

                var objFontStyle = 'Normal';
                var objFontWeight = 'Normal';
                var objtdalign = 'Left';

                if (spanstyle != null && spanstyle != '') {
                    objFontStyle = convertToUper(spanstyle);
                }
                if (spanweight != null && spanweight != '') {
                    if (spanweight == '700' || spanweight == 'bold') {
                        spanweight = 'Bold';
                        objFontWeight = spanweight;
                    }
                }
                if (tdstyle != null && tdstyle != '') {
                    if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                        objtdalign = convertToUper(tdstyle);
                    }
                }
                if (tdhdntext != undefined)
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, tdhdntext, objFontStyle, objFontWeight, objtdalign, "LightGrey");
                else
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", objFontStyle, objFontWeight, objtdalign, "LightGrey");
            }
        });
        if (LIIncludeTotal == true) {
            tablecolumn += CreateGroupRDLCColumn(1);
            TablixHeaderNodeText += CreateGroupRDLCCell('TextboxSumTotal', "Total", "Normal", "Bold", "Center", "LightGrey");
        }

        tablecolumn += '</TablixColumns>\n';
        tableRows += TablixHeaderNodeText;
        tableRows += '</TablixCells>\n';
        tableRows += '</TablixRow>\n';
        TablixXML += TablixCommon;
        TablixXML += tablecolumn;

        TablixHeaderNodeText = '';

        tableRows += '<TablixRow>\n';
        tableRows += '  <Height>0.30208in</Height>\n';
        tableRows += '<TablixCells>\n';
        $('#tbldetaildest td').each(function () {

            var tdstyle = '';
            //var tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
            //var tdhdntext = $(this).find("input[id='hdnFieldName']").val();
            var tdhdntext = $(this).find('input').val();
            if (selectedlist.indexOf(tdhdntext) < 0) {
                cnt += 1;
                tdstyle = $(this).css("text-align");
                var objtdalign = 'Left';
                if (tdstyle != null && tdstyle != '') {
                    if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                        objtdalign = convertToUper(tdstyle);
                    }
                }
                if (tdhdntext != undefined) {
                    if (tdhdntext.toLowerCase().indexOf('barcodeimage_') > -1) {
                        TablixHeaderNodeText += GenerateBarcode(tdhdntext, cnt);
                    }
                    else {
                        if (tdhdntext != undefined && tdhdntext != "")
                            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "=Fields!" + tdhdntext + ".Value", "Normal", "Normal", objtdalign, "White");
                        else
                            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", "Normal", "Normal", objtdalign, "White");
                    }
                }
                else {
                    if (tdhdntext != "")
                        TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "=Fields!" + tdhdntext + ".Value", "Normal", "Normal", objtdalign, "White");
                    else
                        TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", "Normal", "Normal", objtdalign, "White");
                }
            }

        });

        if (LIIncludeTotal == true) {
            ////////////////WI-4356
            /////////////Customized Report(s)- InStock By Activity; format Totals, Sub-Totals, Grand Total with dollar sign and two decimal places
            ////////////////////////////// removed =Sum(Fields!Total.Value) is creating issue for applying region setting like currency sign and preicion in customized report
            TablixHeaderNodeText += CreateGroupRDLCCell('TextboxDFSumTotal', "=Fields!Total.Value", "Normal", "Normal", "Right", "White");
        }

        tableRows += TablixHeaderNodeText;
        tableRows += '</TablixCells>\n';
        tableRows += '</TablixRow>\n';

        TablixHeaderNodeText = '';
        var LIIncludeSubTotal = $('#chkIncludeSubTotal').is(':checked');
        var LIIncludeGrandTotal = $('#chkIncludeGrandTotal').is(':checked');
        var TDNormalList = GroupingSubTDCount('tbldetaildest');

        if (LIIncludeTotal == false) {
            LIIncludeSubTotal = false
            LIIncludeGrandTotal = false
        }

        if (LIIncludeSubTotal == true) {
            for (var i = 0; i < selectedlist.length; i++) {
                if (i == 0) {
                    tableRows += '<TablixRow>\n';
                    tableRows += '  <Height>0.30208in</Height>\n';
                    tableRows += '<TablixCells>\n';
                    for (var j = 1; j <= TDNormalList.length; j++) {
                        cnt += 1;
                        if (j == TDNormalList.length - 1) {
                            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "Sub Total", "Normal", "Bold", "Center", "#ffffde");
                        }
                        else {
                            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", "Normal", "Normal", "Center", "#ffffde");
                        }
                    }
                    cnt += 1;
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "=Sum(Fields!Total.Value)", "Normal", "Bold", "Right", "#ffffde");

                    tableRows += TablixHeaderNodeText;
                    tableRows += '</TablixCells>\n';
                    tableRows += '</TablixRow>\n';
                    TablixHeaderNodeText = '';
                }

            }
        }
        TablixHeaderNodeText = '';
        if (LIIncludeGrandTotal == true) {

            tableRows += '<TablixRow>\n';
            tableRows += '  <Height>0.30208in</Height>\n';
            tableRows += '<TablixCells>\n';
            for (var j = 1; j <= TDNormalList.length; j++) {
                cnt += 1;
                if (j == TDNormalList.length - 1) {
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "Grand Total", "Normal", "Bold", "Center", "#ffffde");
                }
                else {
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", "Normal", "Normal", "Center", "#ffffde");
                }
            }
            cnt += 1;
            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "=Sum(Fields!Total.Value)", "Normal", "Bold", "Right", "#ffffde");
            tableRows += TablixHeaderNodeText;
            tableRows += '</TablixCells>\n';
            tableRows += '</TablixRow>\n';
            TablixHeaderNodeText = '';
        }

        tableRows += '</TablixRows>\n';

        TablixXML += tableRows;
        TablixXML += '</TablixBody>\n';
        ColumnHierarchy += CreateTablixColumnHierarchy(TDNormalList, LIIncludeTotal);
        TablixXML += ColumnHierarchy;

        RowHierarchy += '<TablixRowHierarchy>\n';

        for (var i = 0; i < selectedlist.length; i++) {
            RowHierarchy += '<TablixMembers>\n';
            var tdstyle = '';
            var tdhdntype = '';
            var tdhdntext = '';

            var objFontStyle = 'Normal';
            var objFontWeight = 'Normal';
            var objtdalign = 'Center';
            var tdGRwidth = 1;
            $('#tbldetaildest td').each(function () {

                //tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
                //tdhdntext = $(this).find("input[id='hdnFieldName']").val();
                tdhdntext = $(this).find('input').val();
                if (selectedlist[i] == tdhdntext) {
                    cnt += 1;
                    tdGRwidth = ConvertPXtoInch(($(this).css("width")).replace("px", ""));
                    spanstyle = $(this).find('span').css("font-style");
                    spanweight = $(this).find('span').css("font-weight");
                    tdstyle = $(this).css("text-align");

                    if (spanstyle != null && spanstyle != '') {
                        objFontStyle = convertToUper(spanstyle);
                    }
                    if (spanweight != null && spanweight != '') {
                        if (spanweight == '700' || spanweight == 'bold') {
                            spanweight = 'Bold';
                            objFontWeight = spanweight;
                        }
                    }
                    tdstyle = $(this).css("text-align");
                    var objtdalign = 'Center';
                    if (tdstyle != null && tdstyle != '') {
                        if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                            objtdalign = convertToUper(tdstyle);
                        }
                    }
                    return false;
                }

            });
            RowHierarchy += '<TablixMember>\n';
            if (tdhdntext != undefined && tdhdntext != "")
                RowHierarchy += CreateGroupRowHierarchy("TextBox" + (cnt + 1), tdhdntext, objFontStyle, objFontWeight, objtdalign, 'true', tdGRwidth);
            else
                RowHierarchy += CreateGroupRowHierarchy("TextBox" + (cnt + 1), "", objFontStyle, objFontWeight, objtdalign, 'true', tdGRwidth);
        }

        RowHierarchy += '<TablixMembers>\n';
        RowHierarchy += '<TablixMember />\n';
        RowHierarchy += '</TablixMembers>\n';

        for (var i = 1; i < selectedlist.length; i++) {
            RowHierarchy += '</TablixMember>\n';
            RowHierarchy += '</TablixMembers>\n';
        }
        RowHierarchy += '<KeepWithGroup>After</KeepWithGroup>\n';
        RowHierarchy += '<RepeatOnNewPage>true</RepeatOnNewPage>\n';
        RowHierarchy += '</TablixMember>\n';


        for (var i = 0; i < selectedlist.length; i++) {
            if (i > 0) {
                RowHierarchy += '<TablixMembers>\n';
            }
            RowHierarchy += '<TablixMember>\n';
            var tdstyle = '';
            var tdhdntype = '';
            var tdhdntext = '';
            var objtdalign = 'Center';
            var tdGRwidth = 1;
            $('#tbldetaildest td').each(function () {

                //tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
                //tdhdntext = $(this).find("input[id='hdnFieldName']").val();
                tdhdntext = $(this).find('input').val();
                if (selectedlist[i] == tdhdntext) {

                    cnt += 1;
                    tdGRwidth = ConvertPXtoInch(($(this).css("width")).replace("px", ""));
                    tdstyle = $(this).css("text-align");
                    var objtdalign = 'Center';
                    if (tdstyle != null && tdstyle != '') {
                        if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                            objtdalign = convertToUper(tdstyle);
                        }
                    }
                    return false;
                }

            });

            RowHierarchy += CreateGroupAndSortExp("ItemID", (i + 1));
            RowHierarchy += CreateGroupRowHierarchy("Group" + (i + 2), "", "Normal", "Normal", objtdalign, 'true', tdGRwidth);
        }
        if (selectedlist.length > 1) {
            RowHierarchy += CreateTablixMemberADF(false);
        }
        else {
            RowHierarchy += CreateTablixMemberADF(LIIncludeSubTotal);
        }

        if (LIIncludeSubTotal == true) {
            RowHierarchy += '</TablixMember>\n';
            var totlength = selectedlist.length;
            for (var i = 1; i < selectedlist.length; i++) {

                for (var k = 1; k <= i; k++) {
                    cnt += 1;
                    if (k > 1) {
                        RowHierarchy += '<TablixMembers>\n';
                    }
                    RowHierarchy += '<TablixMember>\n';

                    var tdGRwidth = 1;
                    var calclength = parseInt((parseInt(totlength) - parseInt(i)) + parseInt(k)) - 1;

                    $('#tbldetaildest td').each(function () {

                        //tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
                        //tdhdntext = $(this).find("input[id='hdnFieldName']").val();
                        tdhdntext = $(this).find('input').val();


                        if (selectedlist[calclength] == tdhdntext) {
                            tdGRwidth = ConvertPXtoInch(($(this).css("width")).replace("px", ""));
                            return false;
                        }
                    });



                    RowHierarchy += CreateGroupRowHierarchy("TextBox" + (cnt + 1), "", "Normal", "Normal", "Center", 'true', tdGRwidth);
                }
                for (var k = 1; k < i; k++) {
                    RowHierarchy += '</TablixMember>\n';
                    RowHierarchy += '</TablixMembers>\n';
                }
                RowHierarchy += '<KeepWithGroup>Before</KeepWithGroup>\n';
                RowHierarchy += '</TablixMember>\n';
                if (i != selectedlist.length) {
                    RowHierarchy += '</TablixMembers>\n';
                    RowHierarchy += '</TablixMember>\n';
                }
            }
        }

        if (LIIncludeGrandTotal == true) {
            if (LIIncludeSubTotal == false) {
                RowHierarchy += '</TablixMember>\n';
                if (selectedlist.length > 1) {
                    RowHierarchy += '</TablixMembers>\n';
                    RowHierarchy += '</TablixMember>\n';
                }
            }

            for (var i = 1; i <= selectedlist.length; i++) {
                cnt += 1;
                if (i > 1) {
                    RowHierarchy += '<TablixMembers>\n';
                }
                RowHierarchy += '<TablixMember>\n';
                var tdGRwidth = 1;
                $('#tbldetaildest td').each(function () {
                    tdhdntext = $(this).find('input').val();
                    //tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
                    //tdhdntext = $(this).find("input[id='hdnFieldName']").val();

                    if (selectedlist[i - 1] == tdhdntext) {
                        tdGRwidth = ConvertPXtoInch(($(this).css("width")).replace("px", ""));
                        return false;
                    }
                });
                RowHierarchy += CreateGroupRowHierarchy("TextBox" + (cnt + 1), "", "Normal", "Normal", "Center", 'true', tdGRwidth);
            }
            for (var i = 1; i < selectedlist.length; i++) {
                RowHierarchy += '</TablixMember>\n';
                RowHierarchy += '</TablixMembers>\n';
            }
        }


        if (LIIncludeGrandTotal != true) {

            if (LIIncludeSubTotal != true) {
                for (var i = 0; i < selectedlist.length; i++) {
                    RowHierarchy += '</TablixMember>\n';
                    RowHierarchy += '</TablixMembers>\n';
                }
            } else {
                for (var i = 0; i < selectedlist.length; i++) {
                    if (i < 1) {
                        RowHierarchy += '</TablixMembers>\n';
                    }
                }
            }
        }
        else {
            RowHierarchy += '<KeepWithGroup>Before</KeepWithGroup>\n';
            RowHierarchy += '</TablixMember>\n';
            RowHierarchy += '</TablixMembers>\n';

        }

        RowHierarchy += '</TablixRowHierarchy>\n';
        TablixXML += RowHierarchy;

        TablixXML += CreateEndTablix();

        return TablixXML;

    }
    function CreateGroupReportXML() {

        var TablixXML = '';
        var TablixCommon = '';
        var tablecolumn = '';
        var tableRows = '';
        var TablixHeaderNodeText = '';
        var TablixDataNodeText = '';
        var ColumnHierarchy = '';
        var RowHierarchy = '';
        var LIIncludeTotal = $('#chkIncludeTotal').is(':checked');
        var LIIncludeGrandTotal = $('#chkIncludeGrandTotal').is(':checked');
        var selectedlist = getSelectedList().split(',');
        var TotRowWidth = GetGroupTotRowWidth('tblGroupdetaildest', selectedlist);

        TablixCommon += '<TablixBody>\n';
        tablecolumn += '<TablixColumns>\n';
        tableRows += '<TablixRows>\n';
        tableRows += '<TablixRow>\n';
        tableRows += '<Height>0.25in</Height>\n';
        tableRows += '<TablixCells>\n';
        var cnt = 0;
        if (LIIncludeTotal == true) {
            TotRowWidth = 1100;
        }
        $('#tblGroupdetaildest td').each(function () {

            var spanstyle = '';
            var spanweight = '';
            var tdstyle = '';
            var tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
            var tdhdntext = $(this).find("input[id='hdnFieldName']").val();
            if (selectedlist.indexOf(tdhdntext) < 0) {
                cnt += 1;
                var ColumnWidth = '';
                //ColumnWidth = ConvertPXtoInch(GetCalculateWidth('tblGroupdetaildest', TotRowWidth, ($(this).css("width")).replace("px", "")));
                ColumnWidth = ConvertPXtoInch($(this).css("width").replace("px", ""));
                tablecolumn += CreateGroupRDLCColumn(ColumnWidth);

                spanstyle = $(this).find('span').css("font-style");
                spanweight = $(this).find('span').css("font-weight");
                tdstyle = $(this).css("text-align");

                var objFontStyle = 'Normal';
                var objFontWeight = 'Normal';
                var objtdalign = 'Left';

                if (spanstyle != null && spanstyle != '') {
                    objFontStyle = convertToUper(spanstyle);
                }
                if (spanweight != null && spanweight != '') {
                    if (spanweight == '700' || spanweight == 'bold') {
                        spanweight = 'Bold';
                        objFontWeight = spanweight;
                    }
                }
                if (tdstyle != null && tdstyle != '') {
                    if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                        objtdalign = convertToUper(tdstyle);
                    }
                }
                if (tdhdntext != undefined)
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, tdhdntext, objFontStyle, objFontWeight, objtdalign, "LightGrey");
                else
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", objFontStyle, objFontWeight, objtdalign, "LightGrey");
            }
        });
        if (LIIncludeTotal == true) {
            tablecolumn += CreateGroupRDLCColumn(1);
            TablixHeaderNodeText += CreateGroupRDLCCell('TextboxSumTotal', "Total", "Normal", "Bold", "Center", "LightGrey");
        }

        tablecolumn += '</TablixColumns>\n';
        tableRows += TablixHeaderNodeText;
        tableRows += '</TablixCells>\n';
        tableRows += '</TablixRow>\n';
        TablixXML += TablixCommon;
        TablixXML += tablecolumn;

        TablixHeaderNodeText = '';

        tableRows += '<TablixRow>\n';
        tableRows += '  <Height>0.30208in</Height>\n';
        tableRows += '<TablixCells>\n';
        $('#tblGroupdetaildest td').each(function () {

            var tdstyle = '';
            var tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
            var tdhdntext = $(this).find("input[id='hdnFieldName']").val();
            if (selectedlist.indexOf(tdhdntext) < 0) {
                cnt += 1;
                tdstyle = $(this).css("text-align");
                var objtdalign = 'Left';
                if (tdstyle != null && tdstyle != '') {
                    if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                        objtdalign = convertToUper(tdstyle);
                    }
                }
                if (tdhdntext != undefined) {
                    if (tdhdntext.toLowerCase().indexOf('barcodeimage_') > -1) {
                        TablixHeaderNodeText += GenerateBarcode(tdhdntext, cnt);
                    }
                    else {
                        if (tdhdntext != undefined && tdhdntext != "")
                            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "=Fields!" + tdhdntext + ".Value", "Normal", "Normal", objtdalign, "White");
                        else
                            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", "Normal", "Normal", objtdalign, "White");
                    }
                }
                else
                {
                    if (tdhdntext != "")
                        TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "=Fields!" + tdhdntext + ".Value", "Normal", "Normal", objtdalign, "White");
                    else
                        TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", "Normal", "Normal", objtdalign, "White");
                }
            }

        });

        if (LIIncludeTotal == true) {
            ////////////////WI-4356
            /////////////Customized Report(s)- InStock By Activity; format Totals, Sub-Totals, Grand Total with dollar sign and two decimal places
            ////////////////////////////// removed =Sum(Fields!Total.Value) is creating issue for applying region setting like currency sign and preicion in customized report
            TablixHeaderNodeText += CreateGroupRDLCCell('TextboxDFSumTotal', "=Fields!Total.Value", "Normal", "Normal", "Right", "White");
        }

        tableRows += TablixHeaderNodeText;
        tableRows += '</TablixCells>\n';
        tableRows += '</TablixRow>\n';

        TablixHeaderNodeText = '';
        var LIIncludeSubTotal = $('#chkIncludeSubTotal').is(':checked');
        var LIIncludeGrandTotal = $('#chkIncludeGrandTotal').is(':checked');
        var TDNormalList = GroupingTDCount('tblGroupdetaildest');

        if (LIIncludeTotal == false) {
            LIIncludeSubTotal = false
            LIIncludeGrandTotal = false
        }

        if (LIIncludeSubTotal == true) {
            for (var i = 0; i < selectedlist.length; i++) {
                if (i == 0) {
                    tableRows += '<TablixRow>\n';
                    tableRows += '  <Height>0.30208in</Height>\n';
                    tableRows += '<TablixCells>\n';
                    for (var j = 1; j <= TDNormalList.length; j++) {
                        cnt += 1;
                        if (j == TDNormalList.length - 1) {
                            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "Sub Total", "Normal", "Bold", "Center", "#ffffde");
                        }
                        else {
                            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", "Normal", "Normal", "Center", "#ffffde");
                        }
                    }
                    cnt += 1;
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "=Sum(Fields!Total.Value)", "Normal", "Bold", "Right", "#ffffde");

                    tableRows += TablixHeaderNodeText;
                    tableRows += '</TablixCells>\n';
                    tableRows += '</TablixRow>\n';
                    TablixHeaderNodeText = '';
                }

            }
        }
        TablixHeaderNodeText = '';
        if (LIIncludeGrandTotal == true) {

            tableRows += '<TablixRow>\n';
            tableRows += '  <Height>0.30208in</Height>\n';
            tableRows += '<TablixCells>\n';
            for (var j = 1; j <= TDNormalList.length; j++) {
                cnt += 1;
                if (j == TDNormalList.length - 1) {
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "Grand Total", "Normal", "Bold", "Center", "#ffffde");
                }
                else {
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", "Normal", "Normal", "Center", "#ffffde");
                }
            }
            cnt += 1;
            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "=Sum(Fields!Total.Value)", "Normal", "Bold", "Right", "#ffffde");
            tableRows += TablixHeaderNodeText;
            tableRows += '</TablixCells>\n';
            tableRows += '</TablixRow>\n';
            TablixHeaderNodeText = '';
        }

        if ($("#hdnModuleName").val().toLowerCase().indexOf('inventorydailyhistorywithdaterange') >= 0) {

            tableRows += '<TablixRow>\n';
            tableRows += '  <Height>0.30208in</Height>\n';
            tableRows += '<TablixCells>\n';
            for (var j = 1; j <= TDNormalList.length; j++) {
                cnt += 1;
                if (j == TDNormalList.length - 1) {
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, "Total Avg. QOH :", "Normal", "Bold", "Center", "#ffffde");
                }
                else {
                    TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, " ", "Normal", "Normal", "Center", "#ffffde");
                }
            }
            cnt += 1;
            TablixHeaderNodeText += CreateGroupRDLCCell('TextBox' + cnt, '=Round(CDec(Sum(Fields!Total.Value)) / (IIf(DateDiff("d",Parameters!StartDate.Value, Parameters!EndDate.Value) > 0 , DateDiff("d",Parameters!StartDate.Value, Parameters!EndDate.Value), 1)),Fields!NumberDecimalDigits.Value)' , "Normal", "Bold", "Right", "#ffffde");
            tableRows += TablixHeaderNodeText;
            tableRows += '</TablixCells>\n';
            tableRows += '</TablixRow>\n';
            TablixHeaderNodeText = '';
        }

        tableRows += '</TablixRows>\n';

        TablixXML += tableRows;
        TablixXML += '</TablixBody>\n';
        ColumnHierarchy += CreateTablixColumnHierarchy(TDNormalList, LIIncludeTotal);
        TablixXML += ColumnHierarchy;

        RowHierarchy += '<TablixRowHierarchy>\n';

        for (var i = 0; i < selectedlist.length; i++) {
            RowHierarchy += '<TablixMembers>\n';
            var tdstyle = '';
            var tdhdntype = '';
            var tdhdntext = '';

            var objFontStyle = 'Normal';
            var objFontWeight = 'Normal';
            var objtdalign = 'Center';
            var tdGRwidth = 1;
            $('#tblGroupdetaildest td').each(function () {

                tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
                tdhdntext = $(this).find("input[id='hdnFieldName']").val();
                if (selectedlist[i] == tdhdntext) {
                    cnt += 1;
                    tdGRwidth = ConvertPXtoInch(($(this).css("width")).replace("px", ""));
                    spanstyle = $(this).find('span').css("font-style");
                    spanweight = $(this).find('span').css("font-weight");
                    tdstyle = $(this).css("text-align");

                    if (spanstyle != null && spanstyle != '') {
                        objFontStyle = convertToUper(spanstyle);
                    }
                    if (spanweight != null && spanweight != '') {
                        if (spanweight == '700' || spanweight == 'bold') {
                            spanweight = 'Bold';
                            objFontWeight = spanweight;
                        }
                    }
                    tdstyle = $(this).css("text-align");
                    var objtdalign = 'Center';
                    if (tdstyle != null && tdstyle != '') {
                        if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                            objtdalign = convertToUper(tdstyle);
                        }
                    }
                    return false;
                }

            });
            RowHierarchy += '<TablixMember>\n';
            cnt += 1;
            if (tdhdntext != undefined && tdhdntext != "")
                RowHierarchy += CreateGroupRowHierarchy("TextBox" + (cnt), tdhdntext, objFontStyle, objFontWeight, objtdalign, 'true', tdGRwidth);
            else
                RowHierarchy += CreateGroupRowHierarchy("TextBox" + (cnt), "", objFontStyle, objFontWeight, objtdalign, 'true', tdGRwidth);
        }

        RowHierarchy += '<TablixMembers>\n';
        RowHierarchy += '<TablixMember />\n';
        RowHierarchy += '</TablixMembers>\n';

        for (var i = 1; i < selectedlist.length; i++) {
            RowHierarchy += '</TablixMember>\n';
            RowHierarchy += '</TablixMembers>\n';
        }
        RowHierarchy += '<KeepWithGroup>After</KeepWithGroup>\n';
        RowHierarchy += '<RepeatOnNewPage>true</RepeatOnNewPage>\n';
        RowHierarchy += '</TablixMember>\n';


        for (var i = 0; i < selectedlist.length; i++) {
            if (i > 0) {
                RowHierarchy += '<TablixMembers>\n';
            }
            RowHierarchy += '<TablixMember>\n';
            var tdstyle = '';
            var tdhdntype = '';
            var tdhdntext = '';
            var objtdalign = 'Center';
            var tdGRwidth = 1;
            $('#tblGroupdetaildest td').each(function () {

                tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
                tdhdntext = $(this).find("input[id='hdnFieldName']").val();

                if (selectedlist[i] == tdhdntext) {

                    cnt += 1;
                    tdGRwidth = ConvertPXtoInch(($(this).css("width")).replace("px", ""));
                    tdstyle = $(this).css("text-align");
                    var objtdalign = 'Center';
                    if (tdstyle != null && tdstyle != '') {
                        if (tdstyle == 'left' || tdstyle == 'right' || tdstyle == 'center') {
                            objtdalign = convertToUper(tdstyle);
                        }
                    }
                    return false;
                }

            });

            RowHierarchy += CreateGroupAndSortExp(tdhdntext, i + 1);
            if (tdhdntext != undefined && tdhdntext != "")
                RowHierarchy += CreateGroupRowHierarchy("Group" + i + 1, '=Fields!' + tdhdntext + '.Value', "Normal", "Normal", objtdalign, 'true', tdGRwidth);
            else
                RowHierarchy += CreateGroupRowHierarchy("Group" + i + 1, "", "Normal", "Normal", objtdalign, 'true', tdGRwidth);
        }
        if (selectedlist.length > 1) {
            RowHierarchy += CreateTablixMemberADF(false);
        }
        else {
            RowHierarchy += CreateTablixMemberADF(LIIncludeSubTotal);
        }

        if (LIIncludeSubTotal == true) {
            RowHierarchy += '</TablixMember>\n';
            var totlength = selectedlist.length;
            for (var i = 1; i < selectedlist.length; i++) {

                for (var k = 1; k <= i; k++) {
                    cnt += 1;
                    if (k > 1) {
                        RowHierarchy += '<TablixMembers>\n';
                    }
                    RowHierarchy += '<TablixMember>\n';

                    var tdGRwidth = 1;
                    var calclength = parseInt((parseInt(totlength) - parseInt(i)) + parseInt(k)) - 1;

                    $('#tblGroupdetaildest td').each(function () {

                        tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
                        tdhdntext = $(this).find("input[id='hdnFieldName']").val();



                        if (selectedlist[calclength] == tdhdntext) {
                            tdGRwidth = ConvertPXtoInch(($(this).css("width")).replace("px", ""));
                            return false;
                        }
                    });



                    RowHierarchy += CreateGroupRowHierarchy("TextBox" + cnt, "", "Normal", "Normal", "Center", 'true', tdGRwidth);
                }
                for (var k = 1; k < i; k++) {
                    RowHierarchy += '</TablixMember>\n';
                    RowHierarchy += '</TablixMembers>\n';
                }
                RowHierarchy += '<KeepWithGroup>Before</KeepWithGroup>\n';
                RowHierarchy += '</TablixMember>\n';
                if (i != selectedlist.length) {
                    RowHierarchy += '</TablixMembers>\n';
                    RowHierarchy += '</TablixMember>\n';
                }
            }
        }

        if (LIIncludeGrandTotal == true) {
            if (LIIncludeSubTotal == false) {
                RowHierarchy += '</TablixMember>\n';
                if (selectedlist.length > 1) {
                    RowHierarchy += '</TablixMembers>\n';
                    RowHierarchy += '</TablixMember>\n';
                }
            }

            for (var i = 1; i <= selectedlist.length; i++) {
                cnt += 1;
                if (i > 1) {
                    RowHierarchy += '<TablixMembers>\n';
                }
                RowHierarchy += '<TablixMember>\n';
                var tdGRwidth = 1;
                $('#tblGroupdetaildest td').each(function () {

                    tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
                    tdhdntext = $(this).find("input[id='hdnFieldName']").val();

                    if (selectedlist[i - 1] == tdhdntext) {
                        tdGRwidth = ConvertPXtoInch(($(this).css("width")).replace("px", ""));
                        return false;
                    }
                });
                RowHierarchy += CreateGroupRowHierarchy("TextBox" + cnt, "", "Normal", "Normal", "Center", 'true', tdGRwidth);
            }
            for (var i = 1; i < selectedlist.length; i++) {
                RowHierarchy += '</TablixMember>\n';
                RowHierarchy += '</TablixMembers>\n';
            }
        }

        if ($("#hdnModuleName").val().toLowerCase().indexOf('inventorydailyhistorywithdaterange') >= 0) {
            if (LIIncludeSubTotal == false) {
                RowHierarchy += '</TablixMember>\n';
                if (selectedlist.length > 1) {
                    RowHierarchy += '</TablixMembers>\n';
                    RowHierarchy += '</TablixMember>\n';
                }
            }

            for (var i = 1; i <= selectedlist.length; i++) {
                cnt += 1;
                if (i > 1) {
                    RowHierarchy += '<TablixMembers>\n';
                }
                RowHierarchy += '<TablixMember>\n';
                var tdGRwidth = 1;
                $('#tblGroupdetaildest td').each(function () {

                    tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
                    tdhdntext = $(this).find("input[id='hdnFieldName']").val();

                    if (selectedlist[i - 1] == tdhdntext) {
                        tdGRwidth = ConvertPXtoInch(($(this).css("width")).replace("px", ""));
                        return false;
                    }
                });
                RowHierarchy += CreateGroupRowHierarchy("TextBox" + cnt, "", "Normal", "Normal", "Center", 'true', tdGRwidth);
            }
            for (var i = 1; i < selectedlist.length; i++) {
                RowHierarchy += '</TablixMember>\n';
                RowHierarchy += '</TablixMembers>\n';
            }
        }

        if (LIIncludeGrandTotal != true) {

            if (LIIncludeSubTotal != true) {
                for (var i = 0; i < selectedlist.length; i++) {
                    RowHierarchy += '</TablixMember>\n';
                    RowHierarchy += '</TablixMembers>\n';
                }
            } else {
                for (var i = 0; i < selectedlist.length; i++) {
                    if (i < 1) {
                        RowHierarchy += '</TablixMembers>\n';
                    }
                }
            }
        }
        else {
            RowHierarchy += '<KeepWithGroup>Before</KeepWithGroup>\n';
            RowHierarchy += '</TablixMember>\n';
            RowHierarchy += '</TablixMembers>\n';

        }


        if ($("#hdnModuleName").val().toLowerCase().indexOf('inventorydailyhistorywithdaterange') >= 0) {
            if (LIIncludeSubTotal != true) {
                for (var i = 0; i < selectedlist.length; i++) {
                    RowHierarchy += '</TablixMember>\n';
                    RowHierarchy += '</TablixMembers>\n';
                }
            } else {
                for (var i = 0; i < selectedlist.length; i++) {
                    if (i < 1) {
                        RowHierarchy += '</TablixMembers>\n';
                    }
                }
            }
        }

        RowHierarchy += '</TablixRowHierarchy>\n';
        TablixXML += RowHierarchy;

        TablixXML += CreateEndTablix();

        return TablixXML;


    }
    function CreateEndTablix() {
        var EndTablix = '';
        EndTablix += '<RepeatColumnHeaders>true</RepeatColumnHeaders>\n';
        EndTablix += '<RepeatRowHeaders>true</RepeatRowHeaders>\n';
        //EndTablix += '<FixedColumnHeaders>true</FixedColumnHeaders>\n';
        //EndTablix += '<FixedRowHeaders>true</FixedRowHeaders>\n';
        //EndTablix += '<KeepTogether>true</KeepTogether>\n';
        EndTablix += '<DataSetName>DataSet1</DataSetName>\n';
        //EndTablix += '<Top>0.03in</Top>\n';
        //EndTablix += '<Left>0.045in</Left>\n';
        EndTablix += '<Height>2.30in</Height>\n';
        EndTablix += '<Width>10.00in</Width>\n';
        EndTablix += '<Style>\n';
        EndTablix += '<Border>\n';
        EndTablix += '<Style>None</Style>\n';
        EndTablix += '</Border>\n';
        EndTablix += '</Style>\n';

        return EndTablix;
    }
    function CreateTablixMemberADF(objsubtotal) {
        var TablixMemberADF = '';
        TablixMemberADF += '<TablixMembers>\n';
        TablixMemberADF += '<TablixMember>\n';
        TablixMemberADF += '<Group Name="Details" />\n';
        TablixMemberADF += '<TablixMembers>\n';
        TablixMemberADF += '<TablixMember />\n';
        TablixMemberADF += '</TablixMembers>\n';
        TablixMemberADF += '</TablixMember>\n';
        if (objsubtotal == true) {
            TablixMemberADF += '<TablixMember>\n';
            TablixMemberADF += '<KeepWithGroup>Before</KeepWithGroup>\n';
            TablixMemberADF += '</TablixMember>\n';
        }
        TablixMemberADF += '</TablixMembers>\n';
        return TablixMemberADF;
    }
    function CreateGroupAndSortExp(objField, cnt) {
        var GroupAndSortExp = '';
        GroupAndSortExp += '<Group Name="Group' + cnt + '">\n';
        GroupAndSortExp += '<GroupExpressions>\n';
        GroupAndSortExp += '<GroupExpression>=Fields!' + objField + '.Value</GroupExpression>\n';
        GroupAndSortExp += '</GroupExpressions>\n';
        GroupAndSortExp += '</Group>\n';
        //GroupAndSortExp += '<SortExpressions>\n';
        //GroupAndSortExp += '<SortExpression>\n';
        //GroupAndSortExp += '<Value>=Fields!' + objField + '.Value</Value>\n';
        //GroupAndSortExp += '</SortExpression>\n';
        //GroupAndSortExp += '</SortExpressions>\n';
        return GroupAndSortExp;
    }
    function CreateGroupRowHierarchy(objTextBoxID, objFieldName, objFontStyle, objFontWeight, objTextAlign, IsHeaderSize, objtdwidth) {
        var RowHierarchy = '';
        RowHierarchy += '<TablixHeader>\n';
        if (IsHeaderSize == 'true') {
            //RowHierarchy += '<Size>' + objtdwidth + 'in</Size>\n';
            RowHierarchy += '<Size>0.03125in</Size>\n';
        }
        RowHierarchy += '<CellContents>\n';
        RowHierarchy += '<Textbox Name="' + objTextBoxID + '">\n';
        RowHierarchy += '<CanGrow>true</CanGrow>\n';
        RowHierarchy += '<KeepTogether>true</KeepTogether>\n';
        RowHierarchy += '<Paragraphs>\n';
        RowHierarchy += '<Paragraph>\n';
        RowHierarchy += '<TextRuns>\n';
        RowHierarchy += '<TextRun>\n';
        RowHierarchy += '<Value>' + objFieldName + '</Value>\n';
        RowHierarchy += '<Style>\n';
        RowHierarchy += '<FontStyle>' + objFontStyle + '</FontStyle>\n';
        RowHierarchy += '<FontFamily>Calibri</FontFamily>\n';
        RowHierarchy += '<FontWeight>' + objFontWeight + '</FontWeight>\n';
        RowHierarchy += '</Style>\n';
        RowHierarchy += '</TextRun>\n';
        RowHierarchy += '</TextRuns>\n';
        RowHierarchy += '<Style>\n';
        RowHierarchy += '<TextAlign>' + objTextAlign + '</TextAlign>\n';
        RowHierarchy += '</Style>\n';
        RowHierarchy += '</Paragraph>\n';
        RowHierarchy += '</Paragraphs>\n';
        RowHierarchy += '<rd:DefaultName>' + objTextBoxID + '</rd:DefaultName>\n';
        RowHierarchy += '<Visibility>\n';
        RowHierarchy += '<Hidden>true</Hidden>';
        RowHierarchy += '</Visibility>\n';
        RowHierarchy += '<Style>\n';
        RowHierarchy += '<Border>\n';
        RowHierarchy += '<Color>LightGrey</Color>\n';
        RowHierarchy += '<Style>Solid</Style>\n';
        RowHierarchy += '</Border>\n';
        RowHierarchy += '<BackgroundColor>White</BackgroundColor>\n';
        RowHierarchy += '<PaddingLeft>1pt</PaddingLeft>\n';
        RowHierarchy += '<PaddingRight>1pt</PaddingRight>\n';
        RowHierarchy += '<PaddingTop>1pt</PaddingTop>\n';
        RowHierarchy += '<PaddingBottom>1pt</PaddingBottom>\n';
        RowHierarchy += '</Style>\n';
        RowHierarchy += '</Textbox>\n';
        RowHierarchy += '</CellContents>\n';
        RowHierarchy += '</TablixHeader>\n';
        return RowHierarchy;
    }
    function GroupingTDCount(objtable) {
        var TDNormalList = [];
        var selectedlist = getSelectedList().split(',');
        $('#' + objtable + ' td').each(function () {
            var tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
            var tdhdntext = $(this).find("input[id='hdnFieldName']").val();
            if (tdhdntext != undefined) {
                if (selectedlist.indexOf(tdhdntext) < 0) {
                    TDNormalList.push(tdhdntext);
                }
            }
        });
        return TDNormalList;
    }
    function GroupingSubTDCount(objtable) {
        var TDNormalList = [];
        var selectedlist = getSelectedList().split(',');
        $('#' + objtable + ' td').each(function () {
            //var tdhdntype = $(this).find("input[id='hdnFieldtype']").val();
            //var tdhdntext = $(this).find("input[id='hdnFieldName']").val();
            var tdhdntext = $(this).find('input').val();
            if (tdhdntext != undefined) {
                if (selectedlist.indexOf(tdhdntext) < 0) {
                    TDNormalList.push(tdhdntext);
                }
            }
        });
        return TDNormalList;
    }
    function GetCalculateWidth(objTable, totwidth, tdwidth) {
        var LIIncludeTotal = $('#chkIncludeTotal').is(':checked');
        var reportpagesetup = $('#ddlPagesetUp').val();

        //var providewidth = 970;
        var providewidth = 1003;
        if (reportpagesetup == "1") {
            //providewidth = 730;
            providewidth = 763;
        }

        if (LIIncludeTotal == true && objTable == 'tbldetaildest') {
            providewidth = providewidth - 96;
        }

        var calcwidth = 0;
        calcwidth = parseFloat((parseFloat(providewidth) * parseFloat(tdwidth)) / totwidth).toFixed(2);


        return calcwidth;
    }
    function GetTotRowWidth(obj) {
        var TotRowWidth = 0;
        $('#' + obj + ' tr:first td').each(function () {
            TotRowWidth += parseInt(($(this).css("width")).replace("px", ""));
        });
        return TotRowWidth;
    }
    function convertToUper(str) {
        str = str.toLowerCase().replace(/\b[a-z]/g, function (letter) {
            return letter.toUpperCase();
        });
        return str;
    }
    function CreateRoomDetailcell(objRoomVal) {
        var TablixRoomText = '';
        TablixRoomText += '<TablixCell>\n';
        TablixRoomText += '<CellContents>\n';
        TablixRoomText += '<Textbox Name="TextboxRoom">\n';
        TablixRoomText += '<CanGrow>true</CanGrow>\n';
        TablixRoomText += '<KeepTogether>true</KeepTogether>\n';
        TablixRoomText += '<Paragraphs>\n';
        TablixRoomText += '<Paragraph>\n';
        TablixRoomText += '<TextRuns>\n';
        TablixRoomText += '<TextRun>\n';
        TablixRoomText += '<Value>' + objRoomVal + '</Value>\n';
        TablixRoomText += '<Style>\n';
        TablixRoomText += '<FontStyle>Normal</FontStyle>\n';
        TablixRoomText += '<FontFamily>Calibri</FontFamily>\n';
        TablixRoomText += '<FontWeight>Bold</FontWeight>\n';
        TablixRoomText += '</Style>\n';
        TablixRoomText += '</TextRun>\n';
        TablixRoomText += '</TextRuns>\n';
        TablixRoomText += '<Style>\n';
        TablixRoomText += '<TextAlign>Left</TextAlign>\n';
        TablixRoomText += '</Style>\n';
        TablixRoomText += '</Paragraph>\n';
        TablixRoomText += '</Paragraphs>\n';
        TablixRoomText += '<rd:DefaultName>TextboxRoom</rd:DefaultName>\n';
        TablixRoomText += '<Style>\n';
        TablixRoomText += '<Border>\n';
        TablixRoomText += '<Color>LightGrey</Color>\n';
        TablixRoomText += '<Style>Solid</Style>\n';
        TablixRoomText += '</Border>\n';
        TablixRoomText += '<BackgroundColor>#7ba3ef</BackgroundColor>\n';
        TablixRoomText += '<PaddingLeft>2pt</PaddingLeft>\n';
        TablixRoomText += '<PaddingRight>2pt</PaddingRight>\n';
        TablixRoomText += '<PaddingTop>2pt</PaddingTop>\n';
        TablixRoomText += '<PaddingBottom>2pt</PaddingBottom>\n';
        TablixRoomText += '</Style>\n';
        TablixRoomText += '</Textbox>\n';
        TablixRoomText += '<ColSpan>4</ColSpan>\n';
        TablixRoomText += '</CellContents>\n';
        TablixRoomText += '</TablixCell>\n';
        return TablixRoomText;
    }

    function EDIsEnterprise(ReportID, isEntReport) {

        if (parseInt('@(eTurnsWeb.Helper.SessionHelper.UserType)') <= 2) {
            if (parseInt(ReportID) > 0 && isEntReport) {
                $('#chkIsPrivate').attr('disabled', 'disabled');
                //$('#chkIsEnterprise').attr('disabled', 'disabled');
            }
            else {
                $('#chkIsPrivate').removeAttr('disabled');
                $('#chkIsEnterprise').removeAttr('disabled');
            }
        }
        else {
            $('#chkIsEnterprise').css('display', 'none');
        }
    }



    function GetTaxRow(taxType, trcount) {
        var taxtableRows = '<TablixRow>\n<Height>0.30in</Height>\n<TablixCells>\n';
        var cnt = 0;
        var tdcount = GetTDCount('tbldetaildest');
        var taxTablixDataNodeText = '';

        $('#tbldetaildest td').each(function () {
            cnt += 1;
            var valueField = '';
            if ((tdcount - cnt) == 0) {
                valueField = '=iif(CDbl(Fields!Tax' + taxType + 'Rate.Value)>0,Fields!Tax' + taxType + 'Name.Value+"@@"+CStr(Fields!Tax' + taxType + 'Rate.Value) + "%","")';
            }
            taxTablixDataNodeText += '<TablixCell>\n<CellContents>\n';
            taxTablixDataNodeText += '<Textbox Name="TaxTextBox_' + trcount + '_' + cnt + '">\n';
            taxTablixDataNodeText += '<CanGrow>true</CanGrow>\n<KeepTogether>true</KeepTogether>\n<Paragraphs>\n<Paragraph>\n<TextRuns>\n<TextRun>\n';
            taxTablixDataNodeText += '<Value>' + valueField + '</Value>\n';
            taxTablixDataNodeText += '<Style>\n<FontStyle>Normal</FontStyle>\n<FontFamily>Calibri</FontFamily>\n';
            taxTablixDataNodeText += '<FontWeight>Bold</FontWeight>\n</Style>\n</TextRun>\n</TextRuns>\n<Style>\n';
            taxTablixDataNodeText += '<TextAlign>Right</TextAlign>\n</Style>\n</Paragraph>\n</Paragraphs>\n';
            taxTablixDataNodeText += '<rd:DefaultName>TaxTextBox_' + trcount + '_' + cnt + '</rd:DefaultName>\n';
            taxTablixDataNodeText += '<Style>\n<Border>\n<Color>LightGrey</Color>\n<Style>Solid</Style>\n</Border>\n';
            taxTablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","#ffffde")</BackgroundColor>\n';
            taxTablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n<PaddingRight>2pt</PaddingRight>\n<PaddingTop>2pt</PaddingTop>\n<PaddingBottom>2pt</PaddingBottom>\n</Style>\n</Textbox>\n</CellContents>\n</TablixCell>\n';
        });

        valueField = '=iif(CDbl(Fields!Tax' + taxType + 'Rate.Value)>0,FormatNumber(((Sum(Fields!TaxbaleTotal.Value, "DataSet1")*CDbl(Fields!Tax' + taxType + 'Rate.Value))/100),First(Fields!CurrencyDecimalDigits.Value, "DataSet1")),"")';
        taxTablixDataNodeText += '<TablixCell>\n<CellContents>\n';
        taxTablixDataNodeText += '<Textbox Name="TaxTextBox_' + trcount + '_CalcTaxTotal">\n';
        taxTablixDataNodeText += '<CanGrow>true</CanGrow>\n<KeepTogether>true</KeepTogether>\n<Paragraphs>\n<Paragraph>\n<TextRuns>\n<TextRun>\n';
        taxTablixDataNodeText += '<Value>' + valueField + '</Value>\n';
        taxTablixDataNodeText += '<Style>\n<FontStyle>Normal</FontStyle>\n<FontFamily>Calibri</FontFamily>\n<FontWeight>Bold</FontWeight>\n';
        taxTablixDataNodeText += '</Style>\n</TextRun>\n</TextRuns>\n<Style>\n<TextAlign>Right</TextAlign>\n</Style>\n</Paragraph>\n</Paragraphs>\n';
        taxTablixDataNodeText += '<rd:DefaultName>TaxTextBox_' + trcount + '_CalcTaxTotal</rd:DefaultName>\n';
        taxTablixDataNodeText += '<Style>\n<Border>\n<Color>LightGrey</Color>\n<Style>Solid</Style>\n</Border>\n';
        taxTablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","#ffffde")</BackgroundColor>\n';
        taxTablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n<PaddingRight>2pt</PaddingRight>\n<PaddingTop>2pt</PaddingTop>\n<PaddingBottom>2pt</PaddingBottom>\n';
        taxTablixDataNodeText += '</Style>\n</Textbox>\n</CellContents>\n</TablixCell>\n';

        taxtableRows += taxTablixDataNodeText;
        taxtableRows += '</TablixCells>\n</TablixRow>\n';

        return taxtableRows;
    }

    function GetTotalRowIfTaxInclude(trcount) {
        var taxtableRows = '<TablixRow>\n<Height>0.30in</Height>\n<TablixCells>\n';
        var cnt = 0;
        var tdcount = GetTDCount('tbldetaildest');
        var taxTablixDataNodeText = '';

        $('#tbldetaildest td').each(function () {
            cnt += 1;
            var valueField = '';
            if ((tdcount - cnt) == 0) {
                valueField = 'Total';
            }
            taxTablixDataNodeText += '<TablixCell>\n<CellContents>\n';
            taxTablixDataNodeText += '<Textbox Name="TaxTextBox_' + trcount + '_' + cnt + '">\n';
            taxTablixDataNodeText += '<CanGrow>true</CanGrow>\n<KeepTogether>true</KeepTogether>\n<Paragraphs>\n<Paragraph>\n<TextRuns>\n<TextRun>\n';
            taxTablixDataNodeText += '<Value>' + valueField + '</Value>\n';
            taxTablixDataNodeText += '<Style>\n<FontStyle>Normal</FontStyle>\n<FontFamily>Calibri</FontFamily>\n';
            taxTablixDataNodeText += '<FontWeight>Bold</FontWeight>\n</Style>\n</TextRun>\n</TextRuns>\n<Style>\n';
            taxTablixDataNodeText += '<TextAlign>Right</TextAlign>\n</Style>\n</Paragraph>\n</Paragraphs>\n';
            taxTablixDataNodeText += '<rd:DefaultName>TaxTextBox_' + trcount + '_' + cnt + '</rd:DefaultName>\n';
            taxTablixDataNodeText += '<Style>\n<Border>\n<Color>LightGrey</Color>\n<Style>Solid</Style>\n</Border>\n';
            taxTablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","#ffffde")</BackgroundColor>\n';
            taxTablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n<PaddingRight>2pt</PaddingRight>\n<PaddingTop>2pt</PaddingTop>\n<PaddingBottom>2pt</PaddingBottom>\n</Style>\n</Textbox>\n</CellContents>\n</TablixCell>\n';
        });

        valueField = '=Sum(Fields!Total.Value)';
        taxTablixDataNodeText += '<TablixCell>\n<CellContents>\n';
        taxTablixDataNodeText += '<Textbox Name="TaxTextBox_' + trcount + '_CalcTaxTotal">\n';
        taxTablixDataNodeText += '<CanGrow>true</CanGrow>\n<KeepTogether>true</KeepTogether>\n<Paragraphs>\n<Paragraph>\n<TextRuns>\n<TextRun>\n';
        taxTablixDataNodeText += '<Value>' + valueField + '</Value>\n';
        taxTablixDataNodeText += '<Style>\n<FontStyle>Normal</FontStyle>\n<FontFamily>Calibri</FontFamily>\n<FontWeight>Bold</FontWeight>\n';
        taxTablixDataNodeText += '</Style>\n</TextRun>\n</TextRuns>\n<Style>\n<TextAlign>Right</TextAlign>\n</Style>\n</Paragraph>\n</Paragraphs>\n';
        taxTablixDataNodeText += '<rd:DefaultName>TaxTextBox_' + trcount + '_CalcTaxTotal</rd:DefaultName>\n';
        taxTablixDataNodeText += '<Style>\n<Border>\n<Color>LightGrey</Color>\n<Style>Solid</Style>\n</Border>\n';
        taxTablixDataNodeText += '<BackgroundColor>= IIf(RowNumber(Nothing) Mod 2 = 0,"#ffffde","#ffffde")</BackgroundColor>\n';
        taxTablixDataNodeText += '<PaddingLeft>2pt</PaddingLeft>\n<PaddingRight>2pt</PaddingRight>\n<PaddingTop>2pt</PaddingTop>\n<PaddingBottom>2pt</PaddingBottom>\n';
        taxTablixDataNodeText += '</Style>\n</Textbox>\n</CellContents>\n</TablixCell>\n';

        taxtableRows += taxTablixDataNodeText;
        taxtableRows += '</TablixCells>\n</TablixRow>\n';

        return taxtableRows;
    }


    $('#dvsortingPV').on('change', 'select#ddlSortFieldFirst', function () {
        hideColumnInOtherDropdown($(this).attr("id"), $(this).val());
    });
    $('#dvsortingPV').on('change', 'select#ddlSortFieldSecond', function () {
        hideColumnInOtherDropdown($(this).attr("id"), $(this).val());
    });
    $('#dvsortingPV').on('change', 'select#ddlSortFieldThird', function () {
        hideColumnInOtherDropdown($(this).attr("id"), $(this).val());
    });
    $('#dvsortingPV').on('change', 'select#ddlSortFieldFourth', function () {
        hideColumnInOtherDropdown($(this).attr("id"), $(this).val());
    });
    $('#dvsortingPV').on('change', 'select#ddlSortFieldFifth', function () {
        hideColumnInOtherDropdown($(this).attr("id"), $(this).val());
    });
    function hideColumnInOtherDropdown(drpId, value) {
        value1 = $("#ddlSortFieldFirst").val();
        value2 = $("#ddlSortFieldSecond").val();
        value3 = $("#ddlSortFieldThird").val();
        value4 = $("#ddlSortFieldFourth").val();
        value5 = $("#ddlSortFieldFifth").val();


        if (drpId == "ddlSortFieldFirst") {
            $("#ddlSortFieldSecond").children('option').hide();
            $("#ddlSortFieldThird").children('option').hide();
            $("#ddlSortFieldFourth").children('option').hide();
            $("#ddlSortFieldFifth").children('option').hide();

            $("#ddlSortFieldSecond").children("option[value!=" + value1 + "]").show();
            $("#ddlSortFieldThird").children("option[value!=" + value1 + "]").show();
            $("#ddlSortFieldFourth").children("option[value!=" + value1 + "]").show();
            $("#ddlSortFieldFifth").children("option[value!=" + value1 + "]").show();
            if (value2 != '') {
                $("#ddlSortFieldThird").children("option[value=" + value2 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value2 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value2 + "]").hide();
            }
            if (value3 != '') {
                $("#ddlSortFieldSecond").children("option[value=" + value3 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value3 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value3 + "]").hide();
            }
            if (value4 != '') {
                $("#ddlSortFieldSecond").children("option[value=" + value4 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value4 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value4 + "]").hide();
            }
            if (value5 != '') {
                $("#ddlSortFieldSecond").children("option[value=" + value5 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value5 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value5 + "]").hide();
            }

        }
        if (drpId == "ddlSortFieldSecond") {
            $("#ddlSortFieldFirst").children('option').hide();
            $("#ddlSortFieldThird").children('option').hide();
            $("#ddlSortFieldFourth").children('option').hide();
            $("#ddlSortFieldFifth").children('option').hide();

            $("#ddlSortFieldFirst").children("option[value!=" + value2 + "]").show();
            $("#ddlSortFieldThird").children("option[value!=" + value2 + "]").show();
            $("#ddlSortFieldFourth").children("option[value!=" + value2 + "]").show();
            $("#ddlSortFieldFifth").children("option[value!=" + value2 + "]").show();
            if (value1 != '') {
                $("#ddlSortFieldThird").children("option[value=" + value1 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value1 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value1 + "]").hide();
            }
            if (value3 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value3 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value3 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value3 + "]").hide();
            }
            if (value4 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value4 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value4 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value4 + "]").hide();
            }
            if (value5 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value5 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value5 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value5 + "]").hide();
            }
        }
        if (drpId == "ddlSortFieldThird") {
            $("#ddlSortFieldFirst").children('option').hide();
            $("#ddlSortFieldSecond").children('option').hide();
            $("#ddlSortFieldFourth").children('option').hide();
            $("#ddlSortFieldFifth").children('option').hide();

            $("#ddlSortFieldFirst").children("option[value!=" + value3 + "]").show();
            $("#ddlSortFieldSecond").children("option[value!=" + value3 + "]").show();
            $("#ddlSortFieldFourth").children("option[value!=" + value3 + "]").show();
            $("#ddlSortFieldFifth").children("option[value!=" + value3 + "]").show();
            if (value1 != '') {
                $("#ddlSortFieldSecond").children("option[value=" + value1 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value1 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value1 + "]").hide();
            }
            if (value2 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value2 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value2 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value2 + "]").hide();
            }
            if (value4 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value4 + "]").hide();
                $("#ddlSortFieldSecond").children("option[value=" + value4 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value4 + "]").hide();
            }
            if (value5 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value5 + "]").hide();
                $("#ddlSortFieldSecond").children("option[value=" + value5 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value5 + "]").hide();
            }
        }
        if (drpId == "ddlSortFieldFourth") {
            $("#ddlSortFieldFirst").children('option').hide();
            $("#ddlSortFieldSecond").children('option').hide();
            $("#ddlSortFieldThird").children('option').hide();
            $("#ddlSortFieldFifth").children('option').hide();

            $("#ddlSortFieldFirst").children("option[value!=" + value4 + "]").show();
            $("#ddlSortFieldSecond").children("option[value!=" + value4 + "]").show();
            $("#ddlSortFieldThird").children("option[value!=" + value4 + "]").show();
            $("#ddlSortFieldFifth").children("option[value!=" + value4 + "]").show();
            if (value1 != '') {
                $("#ddlSortFieldSecond").children("option[value=" + value1 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value1 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value1 + "]").hide();
            }
            if (value2 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value2 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value2 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value2 + "]").hide();
            }
            if (value3 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value3 + "]").hide();
                $("#ddlSortFieldSecond").children("option[value=" + value3 + "]").hide();
                $("#ddlSortFieldFifth").children("option[value=" + value3 + "]").hide();
            }
            if (value5 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value5 + "]").hide();
                $("#ddlSortFieldSecond").children("option[value=" + value5 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value5 + "]").hide();
            }
        }
        if (drpId == "ddlSortFieldFifth") {
            $("#ddlSortFieldFirst").children('option').hide();
            $("#ddlSortFieldSecond").children('option').hide();
            $("#ddlSortFieldThird").children('option').hide();
            $("#ddlSortFieldFourth").children('option').hide();

            $("#ddlSortFieldFirst").children("option[value!=" + value5 + "]").show();
            $("#ddlSortFieldSecond").children("option[value!=" + value5 + "]").show();
            $("#ddlSortFieldThird").children("option[value!=" + value5 + "]").show();
            $("#ddlSortFieldFourth").children("option[value!=" + value5 + "]").show();
            if (value1 != '') {
                $("#ddlSortFieldSecond").children("option[value=" + value1 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value1 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value1 + "]").hide();
            }
            if (value2 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value2 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value2 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value2 + "]").hide();
            }
            if (value3 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value3 + "]").hide();
                $("#ddlSortFieldSecond").children("option[value=" + value3 + "]").hide();
                $("#ddlSortFieldFourth").children("option[value=" + value3 + "]").hide();
            }
            if (value4 != '') {
                $("#ddlSortFieldFirst").children("option[value=" + value4 + "]").hide();
                $("#ddlSortFieldSecond").children("option[value=" + value4 + "]").hide();
                $("#ddlSortFieldThird").children("option[value=" + value4 + "]").hide();
            }
        }
        $("#ddlSortFieldFirst").children("option[value='']").show();
        $("#ddlSortFieldSecond").children("option[value='']").show();
        $("#ddlSortFieldThird").children("option[value='']").show();
        $("#ddlSortFieldFourth").children("option[value='']").show();
        $("#ddlSortFieldFifth").children("option[value='']").show();
    }

    $(document).on('change', "#ddlPagesetUp", function (e) {
        if ($(this).val() == 1) {
            $('#lblReportWidth').text('@ResReportMaster.MaxWidth' + '7.90 in');

            if ($('div#dvHeaderDet').css('display') != 'none') {
                $('table#tblHeaderDet').css('width', '08.50in');
                RecalcTableeleWidth();
            }
            //TODO: Start WI-3754
            if ($('table#tblHeaderDet').length > 0 && $('table#tblHeaderDet tbody').length > 0) {
                $('table#tblHeaderDet tbody tr').find('td').each(function (indx, objtd) {
                    if ((indx % 2) == 0)
                        $(this).css('width', '1.00in');
                    else
                        $(this).css('width', '2.95in');
                });
            }
            //TODO: End WI-3754
            //$('div#dvHeaderDet,div#dvdetaildest,div#dvGroupdetaildest').css('max-width', '8.5in');
        }
        else if ($(this).val() == 2) {
            $('#lblReportWidth').text('@ResReportMaster.MaxWidth' + '10.40 in');
            if ($('div#dvHeaderDet').css('display') != 'none') {
                $('table#tblHeaderDet').css('width', '10.50in');
                RecalcTableeleWidth();
            }

            //$('div#dvHeaderDet,div#dvdetaildest,div#dvGroupdetaildest').css('max-width', '11in');
            //TODO: Start WI-3754
            if ($('table#tblHeaderDet').length > 0 && $('table#tblHeaderDet tbody').length > 0) {
                $('table#tblHeaderDet tbody tr').find('td').each(function (indx, objtd) {
                    if ((indx % 2) == 0)
                        $(this).css('width', '1.00in');
                    else
                        $(this).css('width', '4.15in');
                });
            }
            //TODO: End WI-3754
        }
        else {
            $('#lblReportWidth').text('');
        }
    });

    /////////////////// for  WI-4799 Start //////////////////////////

    $("#btnAddBlankColumns").click(function (e) {
        var LastTDId;
        var newcol = '';

        if ($("#tbldetaildest").find("td").length > 1) {
            $('#tbldetaildest td').each(function () {
                var TDId = $(this).attr('id');
                if (TDId != null || TDId == '') {
                    LastTDId = TDId;
                }
            });
            var ColId = LastTDId.split('_');
            var NewColId = ColId[0] + '_' + (parseInt(ColId[1]) + 1);
            newcol = '<td id="tddropline_' + (parseInt(ColId[1]) + 1) + '" onmousemove="doResize(this,event)"  onmouseover="doResize(this,event)" onmouseout="doneResizing()" style="width:75px;"><div class="divLineDrag">&nbsp;</div><span class="ChangeText" style="font-weight: bold;">' + "" + '</span><input type="hidden" value='+'""'+' id="hdnlineitem_0" />';
            newcol += '<img id="imgdelete" alt="Remove" src="../../Content/images/deletereport_icon.png" style="float: right;"  onclick="RemoveBlanklineItem(this)"></img></td>'
        }
        else if ($("#tblGroupdetaildest").find("td").length > 1) {
            $('#tblGroupdetaildest td').each(function () {
                var TDId = $(this).attr('id');
                if (TDId != null || TDId == '') {
                    LastTDId = TDId;
                }
            });
            var ColId = LastTDId.split('_');
            var NewColId = ColId[0] + '_' + (parseInt(ColId[1]) + 1);
            newcol = '<td id="tddropline_' + (parseInt(ColId[1]) + 1) + '" onmousemove="doResize(this,event)"  onmouseover="doResize(this,event)" onmouseout="doneResizing()" style="width:75px;"><div class="divLineDrag">&nbsp;</div><span class="ChangeText" style="font-weight: bold;">' + "" + '</span><input type="hidden" value=' + '""' + ' id="hdnFieldName" /><input type="hidden" value=' + '""' + ' id="hdnFieldtype" />';
            newcol += '<img id="imgdelete" alt="Remove" src="../../Content/images/deletereport_icon.png" style="float: right;"  onclick="RemoveGrouplineItem(this)"></img></td>'
        }

        $('#' + LastTDId + '').after(newcol);
        CommonDroppable();

    });

    function RemoveBlanklineItem(obj) {
        var totColumns = 0;
        $(obj).parent().parent().find('td').each(function (i) {
            if ($(this).css('display') != 'none') {
                totColumns = parseInt(totColumns) + 1;
            }
        });

        if (totColumns > 1) {

            if ($("#tbldetaildest").find("td").length > 1) {
                var tblWidth = parseFloat($('table#tbldetaildest').css('width').replace('px', ''));
                var cellWidth = parseFloat($(obj).parent().css('width').replace('px', ''));
                $(obj).parent().remove();
                $('table#tbldetaildest').css('width', (tblWidth - cellWidth) + 'px')
            }
            else if ($("#tblGroupdetaildest").find("td").length > 1) {
                var tblWidth = parseFloat($('table#tblGroupdetaildest').css('width').replace('px', ''));
                var cellWidth = parseFloat($(obj).parent().css('width').replace('px', ''));
                $(obj).parent().remove();
                $('table#tblGroupdetaildest').css('width', (tblWidth - cellWidth) + 'px')
            }
            reinitResizable();
            RecalcTableeleWidth();
        }
        else {
            ShowNotificationMessage('@ResReportMaster.ReqMinimunOneColumn');
        }
    }

    /////////////////////// WI-4799 END //////////////////////////

</script>
