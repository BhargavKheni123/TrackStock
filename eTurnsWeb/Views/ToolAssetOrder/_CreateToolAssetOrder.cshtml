@model eTurns.DTO.ToolAssetOrderMasterDTO
@{
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    string priceformate1 = "N" + eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits.ToString();
    bool AbleToEdit = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolAssetOrder, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);

    //bool IsableToChangeOrder = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ChangeOrder);
    bool IsableToApprove = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ToolAssetOrderApproval);
    //bool IsableToUnCloseOrder = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowAnOrderToBeUnclose);
    bool IsPackSlipReq = false;
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);
    //if (eTurnsWeb.Helper.SessionHelper.CompanyConfig != null && eTurnsWeb.Helper.SessionHelper.CompanyConfig.IsPackSlipRequired.GetValueOrDefault(false))
    //{
    //    IsPackSlipReq = true;
    //}
    bool IsReportView = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Reports, eTurnsWeb.Helper.SessionHelper.PermissionType.View);
    bool HasItemCreateRights = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ItemMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    string CurrencySymbol = "";
    if (eTurnsWeb.Helper.SessionHelper.CurrencySymbol != null
        && !string.IsNullOrWhiteSpace(eTurnsWeb.Helper.SessionHelper.CurrencySymbol))
    {
        CurrencySymbol = eTurnsWeb.Helper.SessionHelper.CurrencySymbol;
    }
}

<script type="text/javascript" src="@Url.Content("~/Scripts/SiteScripts.js")"></script>
@using (Ajax.BeginForm("SaveOrder", "ToolAssetOrder", new AjaxOptions { HttpMethod = "Post", OnBegin = "onOrderBegin", OnSuccess = "onOrderSuccess", InsertionMode = InsertionMode.Replace, OnFailure = "onOrderFailure" }, new { @id = "frmToolAssetOrder" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" value="OrderLineItemList" id="hdnListName" />
    <div class="userHead">
        @Html.ValidationSummary(true)
        @if (Model.ID != 0)
        {
            <div class="infoBlock">
                <ul>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.RoomName)
                        </label>
                        : <span>@(Model.RoomName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.Created)
                        </label>
                        : <span>@(Model.ReceivedOnDateWeb)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.CreatedByName)
                        </label>
                        : <span>@(Model.CreatedByName)</span>
                    </li>
                    <li>
                        <label for="RoomName">
                            @Html.LabelFor(model => model.LastUpdated)
                        </label>
                        : <span>@(Model.ReceivedOnDate)</span>
                    </li>
                    <li style="border: none">
                        <label for="RoomName">
                            @Html.LabelFor(model => model.UpdatedByName)
                        </label>
                        : <span>@(Model.UpdatedByName)</span>
                    </li>
                    <li style="border: none; text-align: right; display: none;">
                        <a onclick="callPrintTransaction('','ToolAssetOrderMasterList',false,@Model.ID,'','');" href="javascript:void(null);">
                            <img alt="" src="@Url.Content("~/Content/images/print.png")" title="Print Purchase Order" />
                        </a>
                    </li>
                    @if (IsReportView)
                    {
                        <li style="border: none; text-align: right;">
                            <a href="javascript:void(null);" id="aRptSingle">
                                <img alt="" src="@Url.Content("~/Content/images/print.png")" title="Print Purchase Order" />
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        <div style="clear: both; padding-top: 15px">
            <a id="ancHideShowContent" style="float: left; margin-top: 8px; margin-left: 10px">
                <img src="/Content/images/drildown_open.jpg" alt="" />
            </a>
            <div class="infoBlock" style="width: 95%; margin-left: 10px; background: none">
                <div id="CollapsedContent" class="edtForm">
                    <ul>

                        <li id="liOrderNumber" style="border-right: none; padding: 0px">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">

                                @Html.LabelFor(model => model.ToolAssetOrderNumber) <em style="color: Red">*</em>

                            </label>
                            @*                            @if (Model.ID <= 0 && (Model.AutoOrderNumber != null && Model.AutoOrderNumber.IsBlanketPO))*@

                            @if (Model.OrderStatus == (int)OrderStatus.UnSubmitted)
                            {
                                @Html.TextBoxFor(model => model.ToolAssetOrderNumber, new { id = "txtOrderNumber", @class = "text-box", @style = "background:white", maxlength = 22 })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.ToolAssetOrderNumber, new { id = "txtOrderNumber", @class = "text-box", @style = "background:white", maxlength = 22, @readonly = "readonly" })
                            }

                            <br />

                            @Html.ValidationMessageFor(model => model.ToolAssetOrderNumber)


                            @Html.HiddenFor(model => model.OrderNumber_ForSorting)
                            <br />
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">

                                @Html.LabelFor(model => model.RequiredDate) <em style="color: Red">*</em>

                            </label>
                            @Html.TextBoxFor(model => model.RequiredDateStr, new { @class = "text-box", id = "txtRequiredDate", @readonly = "readonly", @style = "background:white", maxlength = 128 })
                            @Html.ValidationMessageFor(model => model.RequiredDateStr)
                        </li>
                        <li style="border-right: none;">
                            <label for="label" style="width: 100px; float: left; padding: 1.3% 0;">

                                @Html.LabelFor(model => model.OrderStatus)

                            </label>
                            @Html.DropDownListFor(model => model.OrderStatus, new SelectList(ViewBag.OrderStatusList, "value", "Text", Model.OrderStatus), new { id = "ddlOrderStatus", @class = "selectBox", @style = "width:120px" })
                            @Html.ValidationMessageFor(model => model.OrderStatus)
                        </li>
                        <li style="border-right: none; padding: 0px">
                            @Html.HiddenFor(model => model.ID, new { id = "hiddenID" })
                            @Html.HiddenFor(model => model.GUID)
                            @Html.HiddenFor(model => model.Created)
                            @Html.HiddenFor(model => model.LastUpdated)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.LastUpdatedBy)
                            @Html.HiddenFor(model => model.CompanyID)
                            @Html.HiddenFor(model => model.RoomID)
                            @Html.HiddenFor(model => model.RoomName)
                            @Html.HiddenFor(model => model.CreatedByName)
                            @Html.HiddenFor(model => model.UpdatedByName)
                            @Html.HiddenFor(model => model.IsEDIOrder)
                            @Html.HiddenFor(model => model.IsDeleted)
                            @Html.HiddenFor(model => model.IsArchived)
                            @Html.HiddenFor(model => model.OrderType)
                            @Html.HiddenFor(model => model.IsRecordNotEditable)
                            @Html.HiddenFor(model => model.IsOnlyStatusUpdate)

                            @Html.HiddenFor(model => model.OrderDate)
                            @Html.HiddenFor(model => model.OrderStatusChar)
                            @Html.HiddenFor(model => model.ChangeOrderRevisionNo)
                            @Html.HiddenFor(model => model.IsChangeOrderClick, new { @id = "hdnIsChangeOrdclick" })
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div id="ExpandedContent" style="display: none">
            <ul>
                <li style="border: none">
                    <div class="editorForm">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.Comment)
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.Comment, new { @class = "text-box", maxlength = 1024 })
                                    @Html.ValidationMessageFor(model => model.Comment)
                                </div>
                            </li>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.ReleaseNumber)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.ReleaseNumber, new { id = "txtReleaseNumber", @class = "text-box", @style = "background:white", maxlength = 255, @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.ReleaseNumber)
                                </div>
                            </li>

                        </ul>
                    </div>
                    <div class="editorForm padRightNone divClsOrderRigthPan">
                        <ul>
                            <li>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.PackSlipNumber)
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.PackSlipNumber, new { id = "txtPackslipNumber", @class = "text-box", maxlength = 255 })
                                    @Html.ValidationMessageFor(model => model.PackSlipNumber)
                                </div>
                            </li>
                            @Html.Partial("UDFLayout", new eTurns.DTO.ResToolAssetOrder())
                            <li id="liReject" style="display: none;">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.RejectionReason)<em style="color: Red">*</em>
                                </div>
                                <div class="editor-field">
                                    @Html.TextAreaFor(model => model.RejectionReason, new { @style = "-webkit-border-radius: 5px;-moz-border-radius: 5px;border-radius: 5px;behavior: url(/pie1.htc);background: #fff;border: 1px solid #dddddd;width: 34%;padding: 5px;" })
                                    @Html.ValidationMessageFor(model => model.RejectionReason)
                                </div>
                            </li>
                        </ul>
                        @Html.Hidden("hdnCopyUDFValuesTemp", "", new { @id = "hdnCopyUDFValuesTemp" })
                    </div>
                </li>
            </ul>
        </div>
        <div class="editorForm" style="width: 98%">
            <ul>
                <li>
                    <div class="editor-label" style="width: 2%">
                        &nbsp;
                    </div>
                    <div class="BtnBlockform">
                        <input type="button" value="@eTurns.DTO.Resources.ResCommon.Cancel" id="btnOrderCancel" class="CreateBtn" />
                        @if (!Model.IsOnlyStatusUpdate && (Model.OrderStatus >= (int)OrderStatus.Approved && Model.OrderStatus < (int)OrderStatus.Closed))
                        {
                            <input type="button" value="@ResCommon.Save" id="btnUpdateComment" class="CreateBtn" />
                        }
                        @if (!Model.IsRecordNotEditable || Model.IsOnlyStatusUpdate)
                        {
                            <input type="submit" value="@eTurns.DTO.Resources.ResCommon.Save" id="btnOrderSave" class="CreateBtn" />
                            if (Model.IsRecordNotEditable && Model.IsOnlyStatusUpdate)
                            {
                                <script type="text/javascript">
                                    disableControls('frmToolAssetOrder');
                                    $('#ddlOrderStatus, #btnOrderSave, #btnOrderCancel,#aRptSingle').removeAttr('disabled');
                                </script>
                            }
                        }
                        else if (Model.OrderStatus == (int)OrderStatus.Closed) /*&& IsableToUnCloseOrder*/
                        {
                            <input type="button" value="Unclose Order" id="bntUncloseOrderOnlyInEditPage" class="CreateBtn" />
                            <input type="button" value="@eTurns.DTO.ResOrder.EditOrderLineItems" id="btnUncloseOrder" class="CreateBtn" style="display:none" />


                            <script type="text/javascript">
                                disableControls('frmToolAssetOrder');
                                $('#btnOrderCancel,#aRptSingle').removeAttr('disabled');
                            </script>
                        }
                        else
                        {
                            <script type="text/javascript">
                                disableControls('frmToolAssetOrder');
                                $('#btnOrderCancel,#aRptSingle').removeAttr('disabled');
                            </script>
                        }
                        @if (Model.OrderStatus != (int)ToolAssetOrderStatus.UnSubmitted && Model.OrderStatus != (int)ToolAssetOrderStatus.Closed)
                        {
                            <script type="text/javascript">
                                disableControls('frmToolAssetOrder');
                                $('#ddlOrderStatus,#btnOrderSave,#btnOrderCancel,#aRptSingle').removeAttr('disabled');

                            </script>
                        }
                    </div>
                </li>
                @if (Model.ID > 0)
                {
                    <div class="BtnBlockform">
                        @if (!Model.IsRecordNotEditable && (Model.OrderStatus <= (int)ToolAssetOrderStatus.Submitted || Model.OrderStatus == (int)ToolAssetOrderStatus.Transmitted))
                        {
                            <input type="button" value="@eTurns.DTO.ResOrder.AddNewItemButton" id="btnAddNewItem" class="CreateBtn" style="float: left;
                                    margin-left: 20px;" />

                        }
                        @if (Model.OrderStatus == (int)ToolAssetOrderStatus.Approved)
                        {
                            <input type="button" value="Transmit" id="btnTransmit" class="CreateBtn" style="display: none;" />
                        }
                    </div>

                }
            </ul>
        </div>
        <div class="infoBlock" style="margin-bottom: 10px; margin-top: 10px;">
            <ul>
                <li style="width: auto;">
                    <label for="RoomName">
                        <label>
                            No of line items
                        </label>
                    </label>
                    : <span id="spnNoOfItems">@Model.NoOfLineItems.GetValueOrDefault(0)</span>
                </li>
                <li style="border: none; width: auto; display:none">
                    <label for="RoomName">

                        <label>
                            @eTurns.DTO.ResOrder.OrderCost
                        </label>

                    </label>
                    : <span id="spnTotalCost">@CurrencySymbol @Model.OrderCost.GetValueOrDefault(0).ToString(priceformate1)</span>
                </li>
                <li style="border: none; width: auto;" id="liOrderCostInfo">
                    <label for="RoomName">
                        
                        <label id="lblOrderTotalCost">Total Cost</label>
                    </label>
                    : <span id="spnTotalOrderCost">@CurrencySymbol @Model.OrderCost.GetValueOrDefault(0).ToString(priceformate1, eTurnsWeb.Helper.SessionHelper.RoomCulture)</span>
                </li>
            </ul>
        </div>
    </div>
    <div id="divOrderLineItems">
        @ResOrder.NoItemLineAvailable
    </div>
}
<div class="dialog" id="OrdApprdInfoDialog" style="float: left; display: none; width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="Message" style="float: left; text-align: left; padding-left: 10px;">
            <b>@ResToolAssetOrder.ConfirmApprQuantiyMassage </b>
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="ModelYesClick()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />@eTurns.DTO.Resources.ResCommon.Yes
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="ModelCancelClick()">
                <img src="~/Content/images/no.png" alt="Cancel" />Cancel
            </a>
        </p>
    </div>
</div>
<div class="dialog" id="divOrdCancelUnsaveItemInfoDialog" style="float: left; display: none;
    width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="Message" style="float: left; text-align: left; padding-left: 10px;">
            @*<b>@ResOrder.ConfirmApprQuantiyMassage </b>*@ <b>
                Newly added items will be deleted,
                Do you want to continue
            </b>
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="CancelUnsaveModelYesClick();">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />@eTurns.DTO.Resources.ResCommon.Yes
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="CancelUnsaveModelCancelClick()">
                <img src="~/Content/images/no.png" alt="@eTurns.DTO.Resources.ResCommon.Cancel" />@eTurns.DTO.Resources.ResCommon.No
            </a>
        </p>
    </div>
</div>
<div id="ItemModel">
</div>
<div id="divAddNewItemDailog">

</div>
<div id="divEditReceipt">
</div>
<div class="dialog" id="divUnCloseOrderToEdit" style="float: left; display: none;
    width: 450px;">
    <div class="inner" style="width: 450px;">
        <p class="text" id="UCOLIE" style="float: left; text-align: left; padding-left: 10px;">
            <b>a.</b>&nbsp;All received quantities will be unreceived
            <br />
            <b>b.</b>&nbsp;All order items may be edited or deleted
            <br />
            <b>c.</b>&nbsp;New order Items may be added to the order
            <br />
            <b>d.</b>&nbsp;The order will need to be approved once submitted
            <br />
            <b>e.</b>&nbsp;The order will be re-transmitted to the supplier once approved
            <br />
            <b>f.</b>&nbsp;Orders Created from EDI are not to be unclosed
            <br />
        </p>
        <p class="text" style="float: left; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="UnCloseOrderToEdit()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="UnCloseOrderCancel()">
                <img src="~/Content/images/no.png" alt="Cancel" />Cancel
            </a>
        </p>
    </div>
</div>
@Html.Partial("_RequiredMessages")
<script type="text/javascript">

    $('#bntUncloseOrderOnlyInEditPage').off('click');
    $('#bntUncloseOrderOnlyInEditPage').on('click', function () {
        var anSelectedRows = fnGetSelected(oTable);
        if (anSelectedRows.length == 1) {
            OrderGUID = $(anSelectedRows[0]).find('#spnOrderGUID').text();
            $.ajax({
                url: 'ToUnclosedOrder',
                'type': 'Post',
                'data': { 'OrderGuid': OrderGUID },
                'dataType': 'json',
                //'contentType': 'application/json',
                'success': function (result) {
                    if (result.Status) {
                        LoadReceiveTab("OrderEdit/" + '@(Model.ID)', "frmToolAssetOrder")
                        //oTable.fnStandingRedraw();
                    }
                    else {
                        alert(result.Message);
                    }
                },
                'error': function (xhr) {
                    alert('@ResCommon.ErrorInProcess');
                }

            });
        }
    });


    var IsBlanket = '@Model.IsBlanketOrder';

    $('#btnUpdateComment').on('click', function () {
        $('#DivLoading').show();
        var arrItems = new Array();
        var OrderID = '@Model.ID';
        var OrderGUID = '@Model.GUID';
        var strPackslipNumber = $.trim($('#frmToolAssetOrder').find('#txtPackslipNumber').val());
        var strShipmentTrackingNumber = $.trim($('#frmToolAssetOrder').find('#ShippingTrackNumber').val());
        var strComment = $.trim($('#frmToolAssetOrder').find('#Comment').val());


        var ItemNodes = $('#RecieveOrderLineItem' + OrderID).dataTable().fnGetNodes();
        for (var i = 0; i < ItemNodes.length; i++) {
            var ID = $(ItemNodes[i]).find('#hdnID').val();
            var ItemGUID = $(ItemNodes[i]).find('#hdnToolGUID').val();
            var OrderGUID = $(ItemNodes[i]).find('#hdnOrderGUID').val();
            var Comment = $.trim($(ItemNodes[i]).find('#Comment').val());

            var vUDF1 = '';
            var vUDF2 = '';
            var vUDF3 = '';
            var vUDF4 = '';
            var vUDF5 = '';

            if ($(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails').attr("class") == 'selectBox') {
                    vUDF1 = $(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails option:selected').text();
                }
                else {
                    vUDF1 = $(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails').val();
                }
            }

            if ($(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails').attr("class") == 'selectBox') {
                    vUDF2 = $(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails option:selected').text();
                }
                else {
                    vUDF2 = $(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails').val();
                }
            }

            if ($(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails').attr("class") == 'selectBox') {
                    vUDF3 = $(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails option:selected').text();
                }
                else {
                    vUDF3 = $(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails').val();
                }
            }

            if ($(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails').attr("class") == 'selectBox') {
                    vUDF4 = $(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails option:selected').text();
                }
                else {
                    vUDF4 = $(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails').val();
                }
            }

            if ($(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails').attr("class") == 'selectBox') {
                    vUDF5 = $(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails option:selected').text();
                }
                else {
                    vUDF5 = $(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails').val();
                }
            }
            if (parseFloat(ID) > 0) {
                var data = {
                    "ID": ID, "ItemGUID": ItemGUID, "OrderGUID": OrderGUID, "Comment": Comment, "UDF1": vUDF1, "UDF2": vUDF2,
                    "UDF3": vUDF3, "UDF4": vUDF4, "UDF5": vUDF5
                };
                arrItems.push(data);
            }
        }

        var objOrder = {
            'ID': OrderID, 'GUID': OrderGUID, 'Comment': strComment, 'PackSlipNumber': strPackslipNumber,
            'ShippingTrackNumber': strShipmentTrackingNumber, 'OrderListItem': arrItems
        };

        //setTimeout(function () {
        $.ajax({
            url: 'UpdateSomeFieldsInOrder',
            type: 'Post',
            async: false,
            data: JSON.stringify(objOrder),
            dataType: 'json',
            contentType: "application/json",
            success: function (obj) {
                if (obj.Status) {
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    $("#spanGlobalMessage").html("@ResOrder.msgSavedSuccessfully");
                }
                else {
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    $("#spanGlobalMessage").html("@ResOrder.msgNotSavedSuccessfully");
                }
                showNotificationDialog();
                $('#DivLoading').hide();
                isDirtyForm = false;
                $('form#frmToolAssetOrder').removeClass('dirty')
            },
            error: function (xhr) {
                $('#DivLoading').hide();
            }
        });
        // }, 100);

    });

    function ModelCancelClick() {
        $.modal.impl.close();
    }
    function ModelYesClick() {
        var ItemNodes = $('#OrderLineItem' + OrdID).dataTable().fnGetNodes();
        for (var i = 0; i < ItemNodes.length; i++) {
            //$('#OrderLineItem' + OrdID + ' tbody tr').each(function () {
            var Qty = $(ItemNodes[i]).find('#txtQty').val();
            if (isNaN(parseFloat(Qty)) === false && parseFloat(Qty) > 0) {
                var ApprQty = $(ItemNodes[i]).find('#txtApprQty').val();
                if (isNaN(parseFloat(ApprQty)) === true || parseFloat(ApprQty) <= 0) {
                    $(ItemNodes[i]).find('#txtApprQty').val(Qty)

                }
            }
        } //);
        $.modal.impl.close();
        $("#btnOrderSave").click();
    }

    var OrderID = '@Model.ID';
    var OrderGUID = '@(Model.GUID.ToString())';
    var OrderStatus = '@Model.OrderStatus';



    //$("#btnOrderSave").on("click", function (e) {
    $(document).on("click", 'input##btnOrderSave', function (e) {


        $('#DivLoading').show();

        if ($('#ddlOrderStatus').val() === '@((int)OrderStatus.Submitted)' && '@IsableToApprove' == "True") {
            $('#ddlOrderStatus').val('@((int)OrderStatus.Approved)');
        }

        if ((isNaN(parseInt($('#hiddenID').val())) || parseInt($('#hiddenID').val()) <= 0) && IsBlanket == "True") {
            if (!isNaN(parseInt($('#ddlBlanketPO').val())) && parseInt($('#ddlBlanketPO').val()) > 0) {
                $('#spnErrOrderNumber').val('');
                $('#txtOrderNumber').val($('#ddlBlanketPO :selected').text());
                $('#spnErrOrderNumber').css('display', 'none');
            }
            else {
                $('#txtOrderNumber').val('');
                $('#spnErrOrderNumber').css('display', 'inline');
                $('#DivLoading').hide();
                return false;
            }
        }


        var isError = false;

        if ('@Model.ID' > 0 && OrdID > 0) {
            var LineItems = $('#OrderLineItem' + OrdID).dataTable().fnGetNodes();
            for (var i = 0; i < LineItems.length; i++) {

                var qty = $(LineItems[i]).find('#txtQty').val();

                if (isNaN(parseFloat(qty)) || parseFloat(qty) <= 0) {
                    $('#DivLoading').hide();
                    alert('@ResOrder.msgRequestedQuantity');
                    $(LineItems[i]).find('#txtQty').focus();
                    isError = true;
                    return false;
                }

                var isEnforceDefultOrdQty = $(LineItems[i]).find('#hdnIsEnforceDefultOrdQty').val();
                if (isEnforceDefultOrdQty == 'True') {
                    var apprQty = $(LineItems[i]).find('#txtApprQty').val();
                    var ToolName = $(LineItems[i]).find('#hdnToolName').val();
                    var defultOrderQty = $(LineItems[i]).find('#hdnDefultOrderQty').val();
                    var modulo = 0;

                    if (!isNaN(parseFloat(defultOrderQty)) && parseFloat(defultOrderQty) > 0) {
                        var alertMsg = ' Qty. is not matched with Default Reorder Qty. Please update it to multiple of ' + defultOrderQty + ' for Tool#' + ToolName;
                        if (!isNaN(parseFloat(apprQty)) && parseFloat(apprQty) > 0) {
                            modulo = (parseFloat(apprQty)) % (parseFloat(defultOrderQty));
                            alertMsg = 'Approved ' + alertMsg;
                            $(LineItems[i]).find('#txtApprQty').focus();
                        }
                        else if (!isNaN(parseFloat(qty)) && parseFloat(qty) > 0) {
                            modulo = (parseFloat(qty)) % (parseFloat(defultOrderQty));
                            alertMsg = 'Requested ' + alertMsg;
                            $(LineItems[i]).find('#txtQty').focus();
                        }

                        if (!isNaN(parseFloat(modulo)) && parseFloat(modulo) > 0) {
                            alert(alertMsg);
                            $('#DivLoading').hide();
                            isError = true;
                            return false;
                        }
                    }
                }
            }

            if (!isError)
                SaveLatestValueInSession();
        }

        if (!isError) {
            if (isNaN(parseInt($("#ddlOrderStatus").val())) === false && parseInt($("#ddlOrderStatus").val()) === parseInt('@((int)ToolAssetOrderStatus.Approved)')) {
                var ItemNodes = $('#OrderLineItem' + OrdID).dataTable().fnGetNodes();
                var ItemsList = '';
                for (var i = 0; i < ItemNodes.length; i++) {
                    var Qty = $(ItemNodes[i]).find('#txtQty').val();
                    if (isNaN(parseFloat(Qty)) === false && parseFloat(Qty) > 0) {
                        var ApprQty = $(ItemNodes[i]).find('#txtApprQty').val();
                        if (isNaN(parseFloat(ApprQty)) === true || parseFloat(ApprQty) <= 0) {
                            $('#OrdApprdInfoDialog').modal();
                            e.preventDefault();
                            $('#DivLoading').hide();
                            return false;
                        }

                    }
                }
                if (ItemsList != '') {
                    $('#ValidateAppQty').modal();
                    $('#pItemListApprove').html(ItemsList);
                    e.preventDefault();
                    $('#DivLoading').hide();
                    return false;
                }
            }
        }
    });


    function SaveLatestValueInSession() {
        var arrItems = new Array();
        $('#DivLoading').show();

        var ItemNodes = $('#OrderLineItem' + OrdID).dataTable().fnGetNodes();
        for (var i = 0; i < ItemNodes.length; i++) {

            var Qty = $(ItemNodes[i]).find('#txtQty').val();
            var ApprQty = $(ItemNodes[i]).find('#txtApprQty').val();
            var ID = $(ItemNodes[i]).find('#hdnID').val();
            var ToolGUID = $(ItemNodes[i]).find('#hdnToolGUID').val();
            var OrderGUID = $(ItemNodes[i]).find('#hdnOrderGUID').val();
            var vtempDetailsGUID = $(ItemNodes[i]).find('#hdnTempDetailsGUID').val();
            var RequiredDate = $(ItemNodes[i]).find('#hiddenDatePicker' + ID).val();
            if ((typeof (RequiredDate) == "undefined" || (typeof (RequiredDate) == undefined))) {
                RequiredDate = $(ItemNodes[i]).find('#hdnRequiredDate').val();
            }
            var IsEDISent = $(ItemNodes[i]).find('#hdnIsEDISent').val();
            var Comment = $(ItemNodes[i]).find('#Comment').val();

            if (IsEDISent == "True") {
                IsEDISent = true;
            }
            else {
                IsEDISent = false;
            }
            var vUDF1 = '';
            var vUDF2 = '';
            var vUDF3 = '';
            var vUDF4 = '';
            var vUDF5 = '';

            if ($(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails option:selected').text() != undefined) {
                    vUDF1 = $(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails').val() != undefined) {
                        vUDF1 = $(ItemNodes[i]).find('#UDF1ToolAssetOrderDetails').val();
                    }
                }
            }

            if ($(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails option:selected').text() != undefined) {
                    vUDF2 = $(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails').val() != undefined) {
                        vUDF2 = $(ItemNodes[i]).find('#UDF2ToolAssetOrderDetails').val();
                    }
                }
            }

            if ($(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails option:selected').text() != undefined) {
                    vUDF3 = $(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails').val() != undefined) {
                        vUDF3 = $(ItemNodes[i]).find('#UDF3ToolAssetOrderDetails').val();
                    }
                }
            }

            if ($(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails option:selected').text() != undefined) {
                    vUDF4 = $(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails').val() != undefined) {
                        vUDF4 = $(ItemNodes[i]).find('#UDF4ToolAssetOrderDetails').val();
                    }
                }
            }

            if ($(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails') != null) {
                if ($(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails').attr("class") == 'selectBox' && $(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails option:selected').text() != undefined) {
                    vUDF5 = $(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails option:selected').text();
                }
                else {
                    if ($(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails').val() != undefined) {
                        vUDF5 = $(ItemNodes[i]).find('#UDF5ToolAssetOrderDetails').val();
                    }
                }
            }
            var binName = $(ItemNodes[i]).find('#txtToolLocation').val();
           
            if (isNaN(Qty) === false && parseFloat(Qty) > 0) {
                var data = {
                    "ID": ID
                , "ToolGUID": ToolGUID
                , "ToolAssetOrderGUID": OrderGUID
                , "tempDetailsGUID": vtempDetailsGUID
                , "RequestedQuantity": Qty
                , "ApprovedQuantity": ApprQty
                    , "Bin": binName
                    , "ToolLocationName": binName
                , "RequiredDateStr": RequiredDate
                , "IsEDISent": IsEDISent
                , "Comment": Comment
                    , "UDF1": vUDF1
                    , "UDF2": vUDF2
                    , "UDF3": vUDF3
                    , "UDF4": vUDF4
                    , "UDF5": vUDF5
                };
                arrItems.push(data);

            }
        }
        if (arrItems.length > 0) {
            $('#DivLoading').show();
            $.ajax({
                url: '@Url.Content("~/ToolAssetOrder/SaveLatestValueInSession")',
                data: JSON.stringify({ 'arrDetails': arrItems, 'OrderID': OrdID }),
                dataType: 'json',
                type: 'POST',
                contentType: "application/json",
                async: false,
                cache: false,
                success: function (response) {
                    $('#DivLoading').hide();
                },
                error: function (exh) {
                    $('#DivLoading').hide();
                }

            });
        }

    }
    function onOrderBegin() {
        return $('DivLoading').show();
    }

    function onOrderSuccess(response) {
        IsRefreshGrid = true;
        IsRefreshGrid1 = true;

        showNotificationDialog();
        $("#spanGlobalMessage").html(response.Message);
        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
        var idValue = $("#hiddenID").val();
        $('#DivLoading').hide();
        if (response.Status == "fail") {

            $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
            $("#Name").val("");
            $("#Name").focus();
        }
        else if (idValue == 0) {

            $("#Name").val("");
            $("#Name").focus();
            if (response.Status == "duplicate")
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
            else {
                NeedToOpenItemPopupNow = true;
                ShowEditTab("OrderEdit/" + response.ID, "frmToolAssetOrder");
            }
        }
        else if (idValue > 0) {
            if (response.Status == "duplicate") {
                $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                $("#Name").val("");
                $("#Name").focus();
            }
            else {
                var msg = UpdateLineItemGrid(0, 0);

                if (msg.Status != "ok") {
                    $('#DivLoading').hide();
                    $("#spanGlobalMessage").html(msg.Message);
                    showNotificationDialog();
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                }
                else {
                    if (oTable !== undefined && oTable != null)
                        oTable.fnDraw();
                    if (IsRefreshGrid) {
                        $('#txtOrderFilter').val('');
                        $('#NarroSearchClear').click();
                    }

                    var url = document.location;
                    if (url.toString().indexOf("?FromItem") > 0) {
                        document.location = '@Url.Content("~/ToolAssetOrder/OrderList")';
                    }
                    else if (OrderStatus == '@((int)OrderStatus.Transmitted)' && parseInt($('#ddlOrderStatus').val()) == '@((int)OrderStatus.UnSubmitted)') {
                        ShowEditTab("OrderEdit/" + response.ID, "frmToolAssetOrder");
                    }
                    else {

                        SwitchOrderTab('OrderCreate', 'frmToolAssetOrder');
                    }
                }
            }
        }
    }

    function onOrderFailure(message) {
        $('#DivLoading').hide();
        $("#spanGlobalMessage").html(message.statusText);
        showNotificationDialog();
        $("#Name").focus();
    }

    $('#btnUncloseOrder').on('click', function () {
        $('#divUnCloseOrderToEdit').modal();
        $('.simplemodal-close').css('display', 'none');
    });

    function UnCloseOrderToEdit() {
        $('#DivLoading').show();
        var arrOrderGuid = new Array();
        arrOrderGuid.push(OrderGUID);
        $.ajax({
            url: "/ToolAssetOrder/NewUnCloseOrderToEdit",
            type: 'Post',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({ 'OrederGuid': arrOrderGuid, 'EditType': 'EditLineItems' }),
            success: function (response) {
                if (response.Status == "ok") {
                    $("#spanGlobalMessage").html(response.Message);
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    ShowEditTab("OrderEdit/" + OrderID, "frmToolAssetOrder");
                }
                else {
                    $("#spanGlobalMessage").removeClass('succesIcon').addClass('errorIcon WarningIcon');
                    $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html(response.Message);
                }
                $('#DivLoading').hide();
                UnCloseOrderCancel();
            },
            error: function (response) {
                $("#spanGlobalMessage").removeClass('succesIcon').addClass('errorIcon WarningIcon');
                $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html(response.Message);
                $('#DivLoading').hide();
            }
        });
    }

</script>
<script type="text/javascript">

    var URL_Listget = '';
    checkRememberUDFValues($("#hdnPageName").val(), parseInt(OrderID, 10));



    $(document).on('click', 'input#btnOrderCancel', function (e) {
        if (typeof CheckUnSavedItemBeforCancel == 'function') {
            var isCheck = CheckUnSavedItemBeforCancel();
            if (isCheck == true)
                DoCancelButton();
        }
        else {
            DoCancelButton();
        }
        $('#txtOrderFilter').val('');
        $('#myDataTable').dataTable().fnFilter('', null, null, null);
    });

    function DoCancelButton() {
        if (IsRefreshGrid)
            $('#NarroSearchClear').click();

        var url = document.location;
        if (url.toString().indexOf("?FromItem") > 0)
            document.location = '@Url.Content("~/ToolAssetOrder/OrderList")';
        else {
            SwitchOrderTab('OrderCreate', 'frmToolAssetOrder');
        }

        //SwitchTextTab(tabid, action, frmName)
    }

    function CancelUnsaveModelYesClick() {
        $.modal.impl.close();
        DoCancelButton();
        //setTimeout(function () { $("#btnClearAll").click(); }, 5000);
    }

    function CancelUnsaveModelCancelClick() {
        $.modal.impl.close();
        //setTimeout(function () { $("#btnClearAll").click(); }, 5000);
    }





    function OpenItemPopup() {
        ClearVariables();
        $("#ItemModel").empty();
        var strUrl = '@Url.Action("LoadItemMasterModel")';
        strUrl = strUrl + '?ParentId=' + OrderID + '&ParentGuid=' + OrderGUID + '&ToolType=' + '1,2';;

        $('#ItemModel').data({ "url": strUrl, "strupc": '' }).dialog('open');

        if ($("input#global_filter").length > 0) {
            $("input#global_filter").focus();

            setTimeout(function () {
                $("input#global_filter").focus();

            }, 600);

        }
        if ($("input.searchinput").length > 0) {
            $("input.searchinput").focus();
            setTimeout(function () {
                $("input.searchinput").focus();
            }, 600);

        }


    }

    function CallThisFunctionFromModel(msg) {
        if (msg == 'success') {
            $('#DivLoading').show();
            $('#divOrderLineItems').empty();
            var url = '@Url.Action("LoadOrderLineItems")'; // + '?orderID=' + OrderID;

            // This for Receive
            if ($('#hdnIsChangeOrdclick').val() == "True" && parseInt($('#ddlOrderStatus').val()) == '@((int)OrderStatus.Transmitted)') {
                url = '@Url.Action("LoadOrderLineItems")';
            }
            else if (parseInt($('#ddlOrderStatus').val()) > parseInt('@((int)OrderStatus.Approved)') && parseInt($('#ddlOrderStatus').val()) < parseInt('@((int)OrderStatus.Closed)')) {
                url = '@Url.Action("LoadOrderLineItemsForReceive")';
            }
            URL_Listget = url;
            $.get(url, { 'orderID': OrderID }, function (data) {
                $('#divOrderLineItems').html(data);
                $('#DivLoading').hide();
            });
        }
        else if (json.Status == 'fail') {
            alert(json.Message);
            return false;
        }
    }

    $('#btnTransmit').click(function () {
        $.ajax({
            'url': 'UpdateOrderToTransmited',
            'data': { 'OrderGUID': '@Model.GUID.ToString()' },
            'success': function (result) {
                SetReplenishRedCount();
                SwitchOrderTab('OrderCreate', 'frmToolAssetOrder');
            },
            'error': function (result) {
                alert('@ResCommon.ErrorInProcess');
            }
        });
    });




    function OpenAddNewItemPopup(curobj) {
        $("#ItemModel").dialog("close");
        SetUdfValuesInTempHidden();
        $('#divAddNewItemDailog').data("data", { SourcePageName: 'Order', 'OrderGUID': '@Model.GUID' }).dialog('open');
    }

    function SetUDFValuesToUDFControl() {
        var strUdfValues = $('div.divClsOrderRigthPan').find('input#hdnCopyUDFValuesTemp').val();
        if ($.trim(strUdfValues).length <= 0)
            return;

        var UDFObject = JSON.parse(strUdfValues);
        if ($('div.divClsOrderRigthPan').find('div#UDFDiv').length > 0) {

            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF1").length > 0) {
                $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF1").val(UDFObject.OrderUDF1);
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF2").length > 0) {
                $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF2").val(UDFObject.OrderUDF2);
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF3").length > 0) {
                $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF3").val(UDFObject.OrderUDF3);
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF4").length > 0) {
                $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF4").val(UDFObject.OrderUDF4);
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5").length > 0) {
                udf5 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5").val(UDFObject.OrderUDF5);
            }
        }
    }

    function SetUdfValuesInTempHidden() {
        var udf1 = '';
        var udf2 = '';
        var udf3 = '';
        var udf4 = '';
        var udf5 = '';
        if ($('div.divClsOrderRigthPan').find('div#UDFDiv').length > 0) {

            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF1").length > 0) {

                udf1 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF1").val();
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF2").length > 0) {

                udf2 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF2").val();
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF3").length > 0) {

                udf3 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF3").val();
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF4").length > 0) {

                udf4 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF4").val();
            }
            if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5").length > 0) {
                //if ($('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5")[0].nodeName === "SELECT")
                //    udf5 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5 option:selected").text();
                //else
                udf5 = $('div.divClsOrderRigthPan').find('div#UDFDiv').find("#UDF5").val();
            }

            var obj = new Object();
            //obj = { "OrderUDF1": udf1, "OrderUDF2": udf2, "OrderUDF3": udf3, "OrderUDF4": udf4, "OrderUDF5": udf5 };
            obj.OrderUDF1 = udf1;
            obj.OrderUDF2 = udf2;
            obj.OrderUDF3 = udf3;
            obj.OrderUDF4 = udf4;
            obj.OrderUDF5 = udf5;

            $('div.divClsOrderRigthPan').find('input#hdnCopyUDFValuesTemp').val(JSON.stringify(obj));
        }

    }

    $(document).ready(function () {
        $('form').areYouSure();

        $('.ShowAllOptions').click(function () {
            $(this).siblings('.AutoCompleteddl').trigger("focus");
            $(this).siblings(".AutoCompleteddl").autocomplete("search", " ");
        });

        if ($('#hdnIsChangeOrdclick').val() == "True" && parseInt($('#ddlOrderStatus').val()) == '@((int)OrderStatus.Transmitted)') {
            $('#btnTransmit').css('display', 'none');
        }
        else if (parseInt($('#ddlOrderStatus').val()) > 2) {
            $(':input', '#frmToolAssetOrder').not('#btnOrderCancel, #btnTransmit, #Comment,#txtPackslipNumber,#ShippingTrackNumber').attr('disabled', 'disabled');
            //$(':input', '#frmToolAssetOrder').not('#Comment,#txtPackslipNumber,#ShippingTrackNumber').removeAttr('readonly');
            $(':button', '#frmToolAssetOrder').not('#btnOrderCancel, #btnTransmit').css('display', 'none');
            $(':submit', '#frmToolAssetOrder').css('display', 'none');
            $('.addNewLink', '#frmToolAssetOrder').css('display', 'none');
        }

        if (parseInt($('#ddlOrderStatus').val()) == '@((int)OrderStatus.Approved)' && '@(Model.IsOnlyStatusUpdate)' == "True") {
            $(':submit', '#frmToolAssetOrder').css('display', '');
            $('#ddlOrderStatus,#btnOrderSave,#aRptSingle').removeAttr('disabled');
        }

        if (parseInt($('#ddlOrderStatus').val()) == '@((int)OrderStatus.Closed)')  @*&& '@(IsableToUnCloseOrder)' == 'True'*@
        {
            $('#btnUncloseOrder,#bntUncloseOrderOnlyInEditPage').css('display', '');
            $('#btnUncloseOrder,#bntUncloseOrderOnlyInEditPage,#aRptSingle').removeAttr('disabled');
        }
        else {
            $('#btnUncloseOrder,#bntUncloseOrderOnlyInEditPage').css('display', 'none');
            $('#btnUncloseOrder,#bntUncloseOrderOnlyInEditPage').attr('disabled', 'disabled');

        }


        $("form").submit(function (e) {
            $.validator.unobtrusive.parse("#frmToolAssetOrder");
            if ($(this).valid()) {
                $(':input', '#frmToolAssetOrder').removeAttr('disabled');
                rememberUDFValues($("#hdnPageName").val(), parseInt(OrderID, 10));
            }
            else {
                $('#DivLoading').hide();
            }
            e.preventDefault();

        });
        var itemModeldialogTitle = '@eTurns.DTO.ResOrder.ItemModelHeader';
        if ('@Model.OrderType' == '2') {
            itemModeldialogTitle = '@eTurns.DTO.ResOrder.ItemModelHeaderRO'
        }

        $("#ItemModel").dialog({
            autoOpen: false, modal: true, draggable: true, resizable: true, width: '82%', height: 710, title: itemModeldialogTitle,
            open: function () {
                $('#DivLoading').show();
                var strUrl = $(this).data("url");
                var strupc = $(this).data("strupc");
                $.get(strUrl, function (data) {
                    $("#ItemModel").html(data);



                });
            },
            close: function () {
                $("#ItemModel").empty();
                CallThisFunctionFromModel('success');
                SetUDFValuesToUDFControl();
            }
        });

        $("#divAddNewItemDailog").dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '82%',
            height: 710,
            title: 'Create New Item',
            open: function () {
                $('#DivLoading').show();

                $("#divAddNewItemDailog").load('@Url.Action("ItemCreate", "Inventory")?SourcePageName=' + $(this).data("data").SourcePageName + '&OrderGUID=' + $(this).data("data").OrderGUID + '&OrderSupplier=' + $(this).data("data").OrderSupplier, function () {
                    $('#DivLoading').hide();
                    $("#divAddNewItemDailog").dialog("option", "width", "82%");
                    $("#divAddNewItemDailog").dialog("option", "height", 710);
                    $("#divAddNewItemDailog").dialog('option', 'position', 'center');
                });
            },
            close: function () {
                $("#divAddNewItemDailog").html("");
                OpenItemPopup();
            }
        });
        if (parseInt(OrderID, 10) <= 0) {
            $('#ExpandedContent').css('display', '');
            $('#ancHideShowContent').css('display', 'none');
        }
        else {
            $('#ExpandedContent').css('display', 'none');
            $('#ancHideShowContent').css('display', '');
            $('#DivLoading').show();
            CallThisFunctionFromModel('success');

            //// need to call below block in case of New Item saved and open POPUP Item ... START
            if (NeedToOpenItemPopupNow) {
                NeedToOpenItemPopupNow = false;
                setTimeout("OpenItemPopup()", 3000);
                return false;
            }
            //// need to call below block in case of New Item saved and open POPUP Item ... END
        }


        //if (OrderID <= 0 && $('#txtOrderNumber').val().length <= 0) {
        if (OrderID <= 0) {
            $('#txtOrderNumber').removeAttr('readonly');


        }

        if (OrderStatus == '@((int)OrderStatus.Transmitted)') {
            $('#btnOrderSave').val('Change Order');
            $('#btnUpdateComment').css('display', 'none');
        }

        $("#txtRequiredDate").datepicker({
            dateFormat: '@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat', showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            clearText: 'Clear', onClose: function () { this.focus(); }
        });

        if ($('#txtOrderNumber').css('display') == 'none') {
            setTimeout(function () {
                $("#ui-datepicker-div").css('display', 'none');
                $('#ddlBlanketPO').focus();
            }, 1);
        }

        $("#CtabNew").on('focus', "input.AutoCompleteddl", function (e) {
            var ctrlID = $(this).attr('id');
            var type = "";
            var ajaxURL = '';

            if (ctrlID == "txtStagingName") {
                type = 'Staging';
                ajaxURL = '/Inventory/GetAllStagingHeaders';
            }
            else if (ctrlID == "txtShipViaName") {
                type = 'ShipVia';
                ajaxURL = '/Master/GetAllShipVia';
            }
            else if (ctrlID == "txtCustomerName") {
                type = 'Customer';
                ajaxURL = '/Master/GetAllCustomers';
            }
            else if (ctrlID == "txtVendorName") {
                type = 'Vendor';
                ajaxURL = '/Master/GetAllVendors';
            }

            $(this).autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: ajaxURL,
                        contentType: 'application/json',
                        dataType: 'json',
                        data: { NameStartWith: request.term },
                        success: function (data) {
                            response($.map(data, function (Items) {
                                if (type == 'Staging') {
                                    return {
                                        label: Items.StagingName,
                                        value: Items.StagingName,
                                        selval: Items.GUID
                                    }
                                }
                                else if (type == 'ShipVia') {
                                    return {
                                        label: Items.ShipVia,
                                        value: Items.ShipVia,
                                        selval: Items.ID
                                    }
                                }
                                else if (type == 'Customer') {
                                    return {
                                        label: Items.Customer,
                                        value: Items.Customer,
                                        selval: Items.GUID
                                    }
                                }
                                else if (type == 'Vendor') {
                                    return {
                                        label: Items.Vender,
                                        value: Items.Vender,
                                        selval: Items.ID
                                    }
                                }
                            }));
                        },
                        error: function (err) {
                        }
                    });
                },
                autoFocus: false,
                minLength: 1,
                select: function (event, ui) {
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                change: function (event, ui) {
                }
            });
        });

        $("#CtabNew").on({
            mouseover: function () {
                getItemInventoryStagingLocation($(this), "");
            },
            focus: function () {
                getItemInventoryStagingLocation($(this), "");
            },
            change: function () {
                if (typeof ($(this).parent().find("input[id='txtBinNumber']")) != "undefined") {
                    $(this).parent().find("input[id='txtBinNumber']").val($(this).val());
                }
                if (typeof ($(this).parent().find("input[id='txtReceiveBin']")) != "undefined") {
                    $(this).parent().find("input[id='txtReceiveBin']").val($(this).val());
                }
            }
        }, "#slctToolLocation");
        $("#CtabNew").on({
            mouseover: function () {
                getItemInventoryStagingLocationWithQty($(this), "");
            },
            focus: function () {
                getItemInventoryStagingLocationWithQty($(this), "");
            },
            change: function () {
                if (typeof ($(this).parent().find("input[id='txtBinNumber']")) != "undefined") {
                    $(this).parent().find("input[id='txtBinNumber']").val($(this).val());
                }
                if (typeof ($(this).parent().find("input[id='txtReceiveBin']")) != "undefined") {
                    $(this).parent().find("input[id='txtReceiveBin']").val($(this).val());
                }
            }
        }, "#slctItemBinNumber");



        $('#divEditReceipt').dialog({
            autoOpen: false,
            modal: true,
            draggable: true,
            resizable: true,
            width: '90%',
            height: 400,
            title: "Edit Receipt",
            open: function () {
                $('#DivLoading').show();
                 
                var toolGuid = $(this).data("ToolGuid");
                var orderDetailGuid = $(this).data("ToolAssetOrderDetailGuid");

                $.ajax({
                    "url": '@Url.Content("~/ReceiveToolAsset/OpenDialogForEditReceiptTool")',
                    "data": { 'ToolGuid': toolGuid, 'ToolAssetOrderDetailGuid': orderDetailGuid },
                    "type": 'Post',
                    "async": false,
                    "cache": false,
                    "dataType": "text",
                    //"contentType": 'application/json',
                    success: function (result) {
                        $('#DivLoading').hide();
                        $('#divEditReceipt').html(result)
                    },
                    error: function (xhr) {
                        $('#DivLoading').hide();
                    }

                });
            },
            close: function () {
                $(this).empty();
                $('#divEditReceipt').empty();
                $('#DivLoading').hide();
                if ($(this).data("Success")) {
                    $(this).data({ "Success": false })
                    $('#divOrderLineItems').empty();
                    $.get('@Url.Action("LoadOrderLineItemsForReceive")', { 'orderID': OrderID }, function (data) {
                        $('#divOrderLineItems').html(data);
                    });
                }
            }
        });

        if ('@AbleToEdit' == "True") {
            if ('@Model.OrderStatus' != '@((int)OrderStatus.UnSubmitted)' && '@Model.OrderStatus' != '@((int)OrderStatus.Submitted)' && '@Model.OrderStatus' != '@((int)OrderStatus.Closed)') {
                if ($('#btnOrderSave').css('display') == 'none' && $('#btnOrderSave').val() == 'Change Order') {
                    $('#btnUpdateComment').css('display', 'block');
                }

                $('#Comment,#ShippingTrackNumber,#txtPackslipNumber, #btnUpdateComment, #btnOrderCancel,#aRptSingle').removeAttr('disabled');
            }
        }

        $("#DivPullSelection").dialog({
            autoOpen: false,
            show: "blind",
            hide: "explode",
            height: 700,
            title: "Return Items",
            width: 900,
            modal: true,
            open: function () {
            },
            beforeClose: function () {
            },
            close: function () {
                $("#DivPullSelection").empty();
            }
        });
    });

</script>
<div id="NewMasterPopUP">
</div>
<script type="text/javascript">
    $("#NewMasterPopUP").dialog({
        autoOpen: false,
        show: "blind",
        hide: "explode",
        height: 600,
        width: 800,
        modal: true,
        open: function () {
            $(this).parent().find("span.ui-dialog-title").html("Add New " + $(this).data("data"));
        },
        close: function () {
            $('#DivLoading').show();
            RefreshDropdownList($(this).data("data"), $(this).data("IDVal"));
            $(this).data("data", null);
            $(this).data("IDVal", null);
            $(this).parent().find("span.ui-dialog-title").html('');
        }
    });
    function AddNewFromPopup(PopupFor) {
        $('#DivLoading').show();
        var _URL = ''

        $('#NewMasterPopUP').load(_URL, function () {
            $('#NewMasterPopUP').data("data", PopupFor).dialog('open');
            $('#DivLoading').hide();
        });
    }
    function RefreshDropdownList(PopupFor, IDVal) {
        if (IDVal != undefined) {
            var _ControlID = '';
            if (PopupFor == 'ShipVia') {
                _ControlID = "ddlShipVia";
            }
            else if (PopupFor == 'Supplier') {
                _ControlID = "Supplier";
            }
            else if (PopupFor == 'Customer') {
                _ControlID = "ddlCustomerList";
            }
            var arrdata = IDVal.split("~");
            var listData = $('select[id*="' + _ControlID + '"]');
            $(listData).each(function () {
                $(this).append($("<option />").val(arrdata[0]).text(arrdata[1]));
            });
        }
        $('#DivLoading').hide();
    }

</script>
<div class="dialog" id="OrdReceiveProcessing" style="display: none;">
    <div class="inner">
        <p class="text" id="OrdReceiveGWait" style="text-align: left; padding-left: 10px;">
            <b style="color: Red;">@*Kindly wait, order receive transaction is going on.....*@ 
            @eTurns.DTO.Resources.ResMessage.PleaseWaitTransGoingOn
            </b>
        </p>
        <p class="text" id="OrdReceiveGWaitImg" style="text-align: center; padding-left: 10px;">
            <img src="@Url.Content("~/Content/images/ajax.gif")" alt="loding" />
        </p>
    </div>
</div>
<div class="dialog" id="OrdReceivedInfoDialog" style="display: none; width: 470px;">
    <div class="inner" style="width: 470px;">
        <p class="text" id="OrdReceivedMSG" style="text-align: left; padding-left: 10px;overflow:auto;max-height:400px;">
        </p>
        <p class="text" style="text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="no" onclick="closeFromOk()">
                <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResMessage.InformOk" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a>
        </p>
    </div>
</div>
<div class="dialog" id="OrdReturnBinErrorInforDailog" style="display: none; width: 470px;">
    <div class="inner" style="width: 470px;">
        <p class="text" id="OrdReceivedMSG" style="text-align: left; padding-left: 10px;">
        </p>
        <p class="text" style="text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="no" onclick="closeReturnBinError()">
                <img src="~/Content/images/yes.png" alt="ok" />Close
            </a>
        </p>
    </div>
</div>
<div class="dialog" id="CloseOderDialog" style="display: none;">
    <div class="inner">
        <p class="text">
            Are you sure you want to close this order?
        </p>
        <a href="JavaScript:void(0)" id="bntCloseConfirmYes" class="yes yesornooryes">
            <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no" onclick="closeModalCloseOderDialog();">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div class="dialog" id="CloseOderLineItemDialog" style="display: none;">
    <div class="inner">
        <p class="text">
            Are you sure you want to close selected order's item?
        </p>
        <a href="JavaScript:void(0)" id="bntCloseLineItemConfirmYes" class="yes yesornooryes">
            <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no" onclick="closeModalCloseOderDialog();">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div class="dialog" id="UnCloseOderLineItemDialog" style="display: none;">
    <div class="inner">
        <p class="text">
            Are you sure you want to unclose selected order's item?
        </p>
        <a href="JavaScript:void(0)" id="bntUnCloseItemConfirmYes" class="yes yesornooryes">
            <img src="~/Content/images/yes.png" alt="@eTurns.DTO.Resources.ResCommon.Yes" />
            @eTurns.DTO.Resources.ResMessage.ConfirmYes
        </a><a href="javascript:void(0)" class="no" onclick="closeModalCloseOderDialog();">
            <img src="~/Content/images/no.png" alt="No" />@eTurns.DTO.Resources.ResMessage.ConfirmNo
        </a>
    </div>
</div>
<div id="ExceedRecieveInfoDialog" title="Received Exceed" class="dialog" style="float: left;
    display: none; width: 500px;">
    <div class="inner" style="width: 500px;">
        <p class="text" style="float: left; width: 98%; text-align: left; padding: 0px 0px 5px 10px;">
            <b>This receive will exceed the approved quantity of the following item(s): </b>
        </p>
        <p id="pItemList" class="text" style="float: left; width: 98%; font-weight: bold;
            text-align: left; padding: 0px 0px 20px 10px;">
        </p>
        <p class="text" style="float: left; width: 98%; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="ExceedRecieveModelYesClick()">
                <img src="~/Content/images/yes.png" alt="Yes" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="closeOrdReceiveInfoModel()">
                <img src="~/Content/images/no.png" alt="Cancel" />Cancel
            </a>
        </p>
    </div>
</div>
<div id="ExceedReturnInfoDialog" title="Received Exceed" class="dialog" style="float: left;
    display: none; width: 500px;">
    <div class="inner" style="width: 500px;">
        <p class="text" style="float: left; width: 98%; text-align: left; padding: 0px 0px 5px 10px;">
            <b>This return will exceed the approved quantity of the following item(s): </b>
        </p>
        <p id="pItemListReturn" class="text" style="float: left; width: 98%; font-weight: bold;
            text-align: left; padding: 0px 0px 20px 10px;">
        </p>
        <p class="text" style="float: left; width: 98%; text-align: center; padding-left: 10px;">
            <a href="javascript:void(0)" class="yes" onclick="ExceedRecieveModelYesClick()">
                <img src="~/Content/images/yes.png" alt="Yes" />@eTurns.DTO.Resources.ResMessage.InformOk
            </a>&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)"
                                     class="no" onclick="closeOrdReceiveInfoModel()">
                <img src="~/Content/images/no.png" alt="Cancel" />Cancel
            </a>
        </p>
    </div>
</div>
<div id="ValidateAppQty" title="Validate Approve Quantity" class="dialog" style="float: left;
    display: none; width: 500px;">
    <div class="inner" style="width: 500px;">
        <p id="pItemListApprove" class="text" style="float: left; width: 98%; font-weight: bold;
            text-align: left; padding: 0px 0px 20px 10px;">
        </p>
    </div>
</div>
<div id="divPreRecieveInfo">
</div>
<div id="DivPullSelection">

</div>
<script language="javascript" type="text/javascript">
    //Receive
    var staginID = 0;
    var ValidateSerialLotNumberUrl = '@Url.Action("ValidateSerialLotNumber", "Pull")';
    var OrdID = '@Model.ID';
    var OrdItemsForRcvURL = '@Url.Action("LoadOrderLineItemsForReceive")';
    function closeOrdReceiveInfoModel() {
        $.modal.impl.close();
    }

    function ExceedRecieveModelYesClick() {
        $.modal.impl.close();
        setTimeout(function () { $("#btnClearAll").click(); }, 2000);
    }

    function closeReturnBinError() {
        $.modal.impl.close();
        $('#DivLoading').hide();
    }
    function closeFromOk() {
        $('#DivLoading').show();
        $.modal.impl.close();
        setTimeout(function () {
            clearALL();
        }, 2000);
    }


    function clearALL() {
        $('#DivLoading').show();
        $('#divOrderLineItems').empty();
        $.get(OrdItemsForRcvURL, { 'orderID': OrdID }, function (data) {
            $('#divOrderLineItems').html(data);
            $('#DivLoading').hide();
        });
        //        $('#RecieveOrderLineItem' + OrdID).find("tbody tr").each(function (e) {
        //            var colr = hexc($(this).css('background-color'));
        //            if (colr !== '#d3d3d3') {
        //                $(this).removeAttr('style');
        //            };
        //            $(this).removeClass('row_selected');
        //        });
    }



    function ExceedRecieveModelYesClick() {
        closeOrdReceiveInfoModel();
        $('#OrdReceiveProcessing').modal();
        $('#OrdReceiveProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');
        ReceiveItems();
    }

    function CheckReceiveIsExceed() {
        var arr = new Array();
        var IsRecivedExceed = false;
        var ItemsList = '';
        var returnErrorMsg = '';
        $('#pItemList').text('');
        $('#pItemListReturn').text('');
        var hasPullPopup = false;
        $('#RecieveOrderLineItem' + OrderID + ' tbody tr.row_selected').each(function (i) {

            var colr = hexc($(this).css('background-color'));
            if (colr !== '#d3d3d3') {


                var orderDetailID = $(this).find('#hdnID').val();
                var qty = $(this).find("#txtReceiveQty" + orderDetailID).val();

                var receivedQty = $(this).find('#spnReceivedQty').text();
                var approvedQty = $(this).find('#spnApprovedQty').text();

                if (!isNaN(parseFloat(approvedQty)) && parseFloat(approvedQty) <= 0) {
                    approvedQty = 0;
                }
                if (!isNaN(parseFloat(receivedQty)) && parseFloat(receivedQty) <= 0) {
                    receivedQty = 0;
                }
                if (!isNaN(parseFloat(qty)) && parseFloat(qty) <= 0) {
                    qty = 0;
                }
                var totalReceive = parseFloat(receivedQty) + parseFloat(qty);

                if (parseFloat(totalReceive) > parseFloat(approvedQty)) {
                    IsRecivedExceed = true;
                    ItemsList += parseInt(i + 1) + ') ' + $(this).find('#hdnToolName').val() + '<br />';
                }
                var isCloseItem = $(this).find('#hdnIsCloseItem').val();

            }
            // return IsRecivedExceed;
        });

        if (IsRecivedExceed) {
            closeOrdReceiveInfoModel();
            if ('@(Model.OrderType)' == '@((int)ToolAssetOrderType.Order)') {
                $('#ExceedRecieveInfoDialog').modal();
                $('#pItemList').html(ItemsList);
            }

            $('#DivLoading').hide();
            return false;
        }
        else if (returnErrorMsg.length > 0) {
            closeOrdReceiveInfoModel();
            $('#OrdReturnBinErrorInforDailog').find("#OrdReceivedMSG").html(returnErrorMsg);
            $('#OrdReturnBinErrorInforDailog').modal();
            $('#DivLoading').hide();
            return false;
        }
        else {
            if (!hasPullPopup)
                ReceiveItems();
            else {
                ReturnSerialLotExpiryItem();
            }

        }
    }

    function GetUDFValue(tr, udfName) {
        var udfVal = '';
        if ($(tr).find("#" + udfName).length > 0 > 0) {
            if ($(tr).find("#" + udfName)[0].nodeName === "SELECT")
                udfVal = $(tr).find("#" + udfName + " option:selected").text();
            else
                udfVal = $(tr).find("#" + udfName).val();
        }

        return udfVal;
    }
    var isDeleteSrLotRow = false;

    function ReturnSerialLotExpiryItem() {

        var ItemToRuturn = new Array();
        $('#RecieveOrderLineItem' + OrderID + ' tbody tr.row_selected').each(function (index, tr) {
            var orderDetailID = $(this).find('#hdnID').val();
            var orderDetailGUID = $(this).find('#hdnGUID').val();
            var vBinId = $(this).find('#hdnBin').val();
            var vUDF1 = GetUDFValue(tr, 'UDF1');
            var vUDF2 = GetUDFValue(tr, 'UDF2');
            var vUDF3 = GetUDFValue(tr, 'UDF3');
            var vUDF4 = GetUDFValue(tr, 'UDF4');
            var vUDF5 = GetUDFValue(tr, 'UDF5');
            var vItemGUID = $(this).find("#hdnToolGUID").val();
            var vBinName = $(this).find("#txtReceiveBin").val();

            var qtyToReturn = $(tr).find("#txtReceiveQty" + orderDetailID).val();
            var packslipnumber = $(this).find("#txtPackslip" + orderDetailID).val();
            var returnDate = $(this).find('#txtReceiveDate' + orderDetailID).val();
            var approvedQty = $(this).find('#spnRequestedQty').text();
            var returnedQty = $(this).find('#spnReceivedQty').text();
            var orderNumber = '@Model.ToolAssetOrderNumber';
            var releaseNumber = '@Model.ReleaseNumber';

            var orderGuid = '@Model.GUID';
            var isSerial = $(this).find('#hdnToolSRTrack').val();
            var isLotTrack = $(this).find('#hdnItemLOTTrack').val();
            var isDCT = $(this).find('#hdnItemDOCTrack').val();
            var ToolName = $(this).find('#hdnToolName').val();

            ItemToRuturn.push({
                ItemGUID: vItemGUID, ReturnDate: returnDate, OrderDetailID: orderDetailID, BinID: vBinId, OrderDetailGUID: orderDetailGUID, BinNumber: vBinName,
                PackSlipNumber: packslipnumber, UDF1: vUDF1, UDF2: vUDF2, UDF3: vUDF3, UDF4: vUDF4, UDF5: vUDF5, OrderGuid: orderGuid,
                ReturnedQty: returnedQty, ApprovedQty: approvedQty, QtyToReturn: qtyToReturn, OrderNumber: orderNumber, ReleaseNumber: releaseNumber,
                Supplier: supplierName, IsLotTrack: isLotTrack, IsSRTrack: isSerial, IsDCTrack: isDCT, ToolName: ToolName
            });

        });


        if (ItemToRuturn.length > 0) {
            $.ajax({
                url: 'OpenPopupToReturnItem',
                type: 'Post',
                data: JSON.stringify(ItemToRuturn),
                dataType: 'html',
                contentType: 'application/json',
                success: function (result) {
                    closeOrdReceiveInfoModel();
                    $('#DivPullSelection').html(result);
                    $("#DivPullSelection").dialog('open');
                },
                error: function (xhr) {
                    alert(xhr.status + ' ' + xhr.statusText);
                }
            })
        }
    }

    function ReceiveItems() {
        var arr = new Array();
        $('#RecieveOrderLineItem' + OrderID + ' tbody tr.row_selected').each(function (i) {
            var colr = hexc($(this).css('background-color'));
            if (colr !== '#d3d3d3') {
                var DOCtrack = $(this).find('#hdnItemDOCTrack').val();
                var LOTTrack = $(this).find('#hdnItemLOTTrack').val();
                var orderDetailID = $(this).find('#hdnID').val();
                var lotnumber = '';
                var expireDATE = '';

                if (DOCtrack == 'True') {
                    expireDATE = $(this).find("#txtExpireDate" + orderDetailID).val();
                }
                if (LOTTrack == "True") {
                    lotnumber = $(this).find("#txtLotNumber" + orderDetailID).val();
                }

                var qty = $(this).find("#txtReceiveQty" + orderDetailID).val();
                var receiveDate = $(this).find("#txtReceiveDate" + orderDetailID).val();
                var cost = $(this).find("#hdnItemCost" + orderDetailID).val();
                if ($(this).find("#txtCostBox" + orderDetailID) != undefined) {
                    cost = $(this).find("#txtCostBox" + orderDetailID).val();
                }

                var binName = $.trim($(this).find('#txtReceiveBin').val());
                var srNumber = '';
                packslip = $(this).find("#txtPackslip" + orderDetailID).val();
                var udf1 = '';
                var udf2 = '';
                var udf3 = '';
                var udf4 = '';
                var udf5 = '';
                if ($(this).find("#UDF1").length > 0 > 0) {
                    if ($(this).find("#UDF1")[0].nodeName === "SELECT")
                        udf1 = $(this).find("#UDF1 option:selected").text();
                    else
                        udf1 = $(this).find("#UDF1").val();
                }

                if ($(this).find("#UDF2").length > 0 > 0) {
                    if ($(this).find("#UDF2")[0].nodeName === "SELECT")
                        udf2 = $(this).find("#UDF2 option:selected").text();
                    else
                        udf2 = $(this).find("#UDF2").val();
                }
                if ($(this).find("#UDF3").length > 0 > 0) {
                    if ($(this).find("#UDF3")[0].nodeName === "SELECT")
                        udf3 = $(this).find("#UDF3 option:selected").text();
                    else
                        udf3 = $(this).find("#UDF3").val();
                }
                if ($(this).find("#UDF4").length > 0 > 0) {
                    if ($(this).find("#UDF4")[0].nodeName === "SELECT")
                        udf4 = $(this).find("#UDF4 option:selected").text();
                    else
                        udf4 = $(this).find("#UDF4").val();
                }
                if ($(this).find("#UDF5").length > 0 > 0) {
                    if ($(this).find("#UDF5")[0].nodeName === "SELECT")
                        udf5 = $(this).find("#UDF5 option:selected").text();
                    else
                        udf5 = $(this).find("#UDF5").val();
                }

                var obj = {
                    LotNumber: lotnumber
                           , ExpirationDate: expireDATE
                           , OrderDetailID: orderDetailID
                           , Quantity: qty
                           , ReceiveDate: receiveDate
                           , Cost: cost
                           , BinName: binName
                           , SerialNumber: srNumber
                           , PackSlipNumber: packslip
                           , UDF1: udf1
                           , UDF2: udf2
                           , UDF3: udf3
                           , UDF4: udf4
                           , UDF5: udf5
                           , IsOnlyFromUI: true
                };

                arr.push(obj);
            }

        });


        var isStag = false;


        var strurl = '@Url.Content("~/ToolAssetOrder/ReceiveOrderedLineItems")';


        $.ajax({
            url: strurl,
            data: JSON.stringify({ 'NewReceiveDetail': arr, 'OrderID': OrdID, 'IsStaging': isStag }),
            dataType: 'json',
            contentType: 'application/json',
            type: 'POST',
            async: false,
            success: function (result) {
                if (result.Status == 'true') {
                    $('#divOrderLineItems').empty();
                    $.get('@Url.Action("LoadOrderLineItemsForReceive")', { 'orderID': OrderID }, function (data) {
                        $('#divOrderLineItems').html(data);

                        $('#RecieveOrderLineItem' + OrderID + ' tbody tr').each(function (i) {
                            var OrdDtlGUID = $(this).find('#hdnGUID').val();
                            var isInArray = $.grep(result.RowColors, function (e) { return e.key == OrdDtlGUID; });
                            if (isInArray.length == 1) {
                                $(this).css('background-color', isInArray[0].value);
                                $(this).removeClass('row_selected');
                            }
                        });
                        if (!isNaN(parseInt(result.OrderStatus)) && parseInt(result.OrderStatus) > 0) {
                            $('#ddlOrderStatus').val(result.OrderStatus);
                        }
                        SetReplenishRedCount();
                        closeOrdReceiveInfoModel();
                        $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html(result.Message);
                        $('#OrdReceivedInfoDialog').modal();
                        $('#DivLoading').hide();

                    });
                }
                else {

                    $('#RecieveOrderLineItem' + OrderID + ' tbody tr').each(function (i) {
                        var ItemGUID = $(this).find('#hdnToolGUID').val();
                        var isInArray = $.grep(result.RowColors, function (e) { return e.key == ItemGUID; });
                        if (isInArray.length == 1) {
                            $(this).css('background-color', isInArray[0].value);
                            $(this).removeClass('row_selected');
                        }
                    });

                    closeOrdReceiveInfoModel();
                    $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html(result.Message);
                    $('#OrdReceivedInfoDialog').modal();
                }
                isDirtyForm = false;
            },
            error: function (err) {
                closeOrdReceiveInfoModel();
                $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html('Error');
                $('#OrdReceivedInfoDialog').modal();
                $('#DivLoading').hide();
            }
        });
    }

    function isDuplicateLot(txtLot, id) {
        if ($(txtLot).val() != '') {
            $('#DivLoading').show();
            $('#RecieveOrderLineItem' + OrdID + ' tbody tr').each(function () {
                var LOTTrack = $(this).find('#hdnItemLOTTrack').val();
                if (LOTTrack == "True") {
                    var trid = $(this).find('#hdnID').val();
                    var txtLotNumber = $(this).find("#txtLotNumber" + trid);
                    if (txtLot.id != $(txtLotNumber)[0].id && $(txtLot).val() == txtLotNumber.val()) {
                        $(txtLot).val('');
                        $('#DivLoading').hide();
                        alert('@ResMessage.DuplicateLotFound');
                        $(txtLot).focus();
                        return false;
                    }
                }
            });
        }
        if ($(txtLot).val() != '') {
            $.ajax({
                "url": '@Url.Content("~/Inventory/DuplicateCheckLotNumber")',
                data: { LotNumber: $(txtLot).val(), ID: id },
                "async": false,
                cache: false,
                "dataType": "text",
                "success": function (response) {
                    if (response == "duplicate") {
                        alert('@ResMessage.DuplicateLotFound');
                        $(txtLot).val('');
                        $(txtLot).focus();
                        $('#DivLoading').hide();
                        return false;
                    }
                    else {
                        $('#DivLoading').hide();
                        return false;
                    }
                },
                error: function (response) {
                    $('#DivLoading').hide();
                    $("#spanGlobalMessage").html(response);
                }
            });
        }
        else {
            return true;
        }
    }

    /* global search function */
    function fnFilterReciveOrderLineItem() {
        //set filter only if more than 2 characters are pressed
        if (typeof $("#ReceiveItem_filter") != 'undefined' && ($("#ReceiveItem_filter").val().length > 2 || $("#ReceiveItem_filter").val().length == 0)) {
            
            bIsReceiveFilter = true;
            var searchtext = $("#ReceiveItem_filter").val().replace(/'/g, "''");
            $('#RecieveOrderLineItem' + OrdID).dataTable().fnFilter(
                            searchtext,
                            null,
                            false,
                            false
                        );

            $('#RecieveOrderLineItem' + OrdID + ' td').removeHighlight();

            if (searchtext.length > 0)
                $('#RecieveOrderLineItem' + OrdID + ' td').highlight($("#ReceiveItem_filter").val());
        }
    }


    function UpdateReceiveQty(ItemGUID) {
        $.get('@Url.Action("LoadOrderLineItemsForReceive")', { 'orderID': OrderID }, function (data) {
            $('#divOrderLineItems').html(data);
            $('#RecieveOrderLineItem' + OrdID + ' tr').each(function (i) {
                var itmGuid = $(this).find('#hdnToolGUID').val();
                if (itmGuid == ItemGUID) {
                    var lnkimg = $(this).find('#aPlusMinus');
                    $(lnkimg).click();
                }
            });
            $('#DivLoading').hide();
        });

    }





    function NewReceive(ordDetailID) {
        $('#DivLoading').show();

        var isSerial = $("#hdnIsSerial_" + ordDetailID).val();
        var consqty = null;
        var custqty = null;
        var expirationDate = null;
        var qty = 0;
        var lotNumber = "";
        var srNumber = "";
        var consign = $("#hdnIsConsign_" + ordDetailID).val();

        var isLot = $("#hdnIsLot_" + ordDetailID).val();
        var isDateCode = $("#hdnIsDateCode_" + ordDetailID).val();
        var ordDetailGUID = $("#hdnOrderDetailGUID_" + ordDetailID).val();
        var itemGUID = $("#hdnToolGUID_" + ordDetailID).val();
        //var binID = $("#ddlBin_" + ordDetailID).val();

        var binName = $('#txtReceiveBinNumber_' + ordDetailID).val();
        var packSlipNumber = $('#txtPackslip_' + ordDetailID).val();
        var receivecost = $("#txtCostBox_" + ordDetailID).val();
        var recvDate = $("#txtReceived_" + ordDetailID).val();
        var itemType = $("#hdnItemType_" + ordDetailID).val();
        // var RecvedQty = parseFloat($("#spnReceivedQty_" + ordDetailID).text());
        var ReqstedQty = parseFloat($("#hdnRequestedQty_" + ordDetailID).val());
        var ApprovedQty = parseFloat($("#hdnApprovedQty_" + ordDetailID).val());
        var ReceivedQty = parseFloat($("#hdnReceivedQty_" + ordDetailID).val());
        var UDF1 = '';
        var UDF2 = '';
        var UDF3 = '';
        var UDF4 = '';
        var UDF5 = '';
        var ispackSlipNumberMandatory = $("#hdnIsPackSlipNumberMandatory_" + ordDetailID).val();

        if ($('#NewReceiveEntry' + ordDetailID).find('#UDF1').length > 0) {
            if ($('#NewReceiveEntry' + ordDetailID).find('#UDF1')[0].nodeName === "SELECT")
                UDF1 = $('#NewReceiveEntry' + ordDetailID).find('#UDF1').find("option:selected").text();
            else
                UDF1 = $('#NewReceiveEntry' + ordDetailID).find('#UDF1').val();
        }

        if ($('#NewReceiveEntry' + ordDetailID).find('#UDF2').length > 0) {
            if ($('#NewReceiveEntry' + ordDetailID).find('#UDF2')[0].nodeName === "SELECT")
                UDF2 = $('#NewReceiveEntry' + ordDetailID).find('#UDF2').find("option:selected").text();
            else
                UDF2 = $('#NewReceiveEntry' + ordDetailID).find('#UDF2').val();
        }

        if ($('#NewReceiveEntry' + ordDetailID).find('#UDF3').length > 0) {
            if ($('#NewReceiveEntry' + ordDetailID).find('#UDF3')[0].nodeName === "SELECT")
                UDF3 = $('#NewReceiveEntry' + ordDetailID).find('#UDF3').find("option:selected").text();
            else
                UDF3 = $('#NewReceiveEntry' + ordDetailID).find('#UDF3').val();
        }

        if ($('#NewReceiveEntry' + ordDetailID).find('#UDF4').length > 0) {
            if ($('#NewReceiveEntry' + ordDetailID).find('#UDF4')[0].nodeName === "SELECT")
                UDF4 = $('#NewReceiveEntry' + ordDetailID).find('#UDF4').find("option:selected").text();
            else
                UDF4 = $('#NewReceiveEntry' + ordDetailID).find('#UDF4').val();
        }

        if ($('#NewReceiveEntry' + ordDetailID).find('#UDF5').length > 0) {
            if ($('#NewReceiveEntry' + ordDetailID).find('#UDF5')[0].nodeName === "SELECT")
                UDF5 = $('#NewReceiveEntry' + ordDetailID).find('#UDF5').find("option:selected").text();
            else
                UDF5 = $('#NewReceiveEntry' + ordDetailID).find('#UDF5').val();
        }

        var stagID = $("#hdnStagingID_" + ordDetailID).val();
        var isError = false;
        var ErrorMassage = "";
        var arrLocDetail = new Array();
        if ($.trim($("#txtReceived_" + ordDetailID).val()).length <= 0) {
            isError = true;
            ErrorMassage += "<b style='color: Red;'>Please enter bin number.</b><br/>"
        }

        if (isSerial == "True") {
            srNumber = $("#txtsrnumber_" + ordDetailID).val();
            if (srNumber.length <= 0) {
                isError = true;
                ErrorMassage += "<b style='color: Red;'>Please enter serial number.</b><br/>"
            }
            else {
                var txtSRNumber = $("#txtsrnumber_" + ordDetailID);
                if (txtSRNumber.css('background-color') === "rgb(247, 187, 196)") {
                    $("#spanGlobalMessage").html("@ResMessage.DuplicateSerialFound");
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                    showNotificationDialog();
                    $("#DivLoading").hide();
                    $("#txtsrnumber_" + ordDetailID).focus();
                    return false;
                }
                else
                    qty = 1;
            }
        }
        else {
            qty = $("#txtReceiveQuantity_" + ordDetailID).val();
            if (isNaN(qty) || qty <= 0) {
                isError = true;
                ErrorMassage += "<b style='color: Red;'>Please enter quantity to receive.</b><br/>"
            }
        }

        //        if ('@IsPackSlipReq.ToString()'.toUpperCase() == "TRUE" && packSlipNumber.length <= 0) {
        //            isError = true;
        //            ErrorMassage += "<b style='color: Red;'>Please enter packslip # to receive.</b><br/>"
        //        }

        if (ispackSlipNumberMandatory.toUpperCase() == "TRUE" && packSlipNumber.length <= 0) {
            isError = true;
            ErrorMassage += "<b style='color: Red;'>Please enter packslip # to receive.</b><br/>"
        }
        if (isLot == "True") {
            lotNumber = $("#txtlotnumber_" + ordDetailID).val();
            if (lotNumber.length <= 0) {
                isError = true;
                ErrorMassage += "<b style='color: Red;'>Please enter lot number.</b><br/>"
            }
        }
        if (isDateCode == "True") {
            expirationDate = $("#txtExpiration_" + ordDetailID).val();
            if (expirationDate.length <= 0) {
                isError = true;
                ErrorMassage += "<b style='color: Red;'>Please select exire date.</b><br/>"
            }
        }

        if (consign == "True") {
            consqty = qty;
        }
        else {
            custqty = qty;
        }

        if (isError) {
            ErrorMassage = '<b>This item is not able to receive, due to following reasons.</b><br />' + ErrorMassage;
            $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html(ErrorMassage);
            $('#DivLoading').hide();
            $('#OrdReceivedInfoDialog').modal();
        }
        else {
            var isTrue = false;
            //if (confirm(msg)) {

            if (isNaN(parseFloat(ApprovedQty)) || parseFloat(ApprovedQty) < 0) {
                ApprovedQty = 0;
            }

            if (isNaN(parseFloat(ReceivedQty)) || parseFloat(ReceivedQty) < 0) {
                ReceivedQty = 0;
            }

            if (isNaN(parseFloat(qty)) || parseFloat(qty) < 0) {
                qty = 0;
            }

            if (parseFloat(ApprovedQty) < (parseFloat(qty) + parseFloat(ReceivedQty))) {
                var msg = 'This receive will exceed the approved quantity.';
                if (confirm(msg)) {
                    isTrue = true;
                }
            }
            else {
                isTrue = true;
            }

            if (isTrue) {
                $('#OrdReceiveProcessing').modal();
                $('#OrdReceiveProcessing').parent().parent().find(".modalCloseImg").css('display', 'none');


                var obj = {
                    "BinNumber": binName,
                    "CustomerOwnedQuantity": custqty,
                    "ConsignedQuantity": consqty,
                    "LotNumber": lotNumber,
                    "SerialNumber": srNumber,
                    "ExpirationDate": expirationDate,
                    "ReceivedDate": recvDate,
                    "Expiration": expirationDate,
                    "Received": recvDate,
                    "Cost": receivecost,
                    "ItemGUID": itemGUID,
                    "ItemType": itemType,
                    "SerialNumberTracking": isSerial,
                    "LotNumberTracking": isLot,
                    "DateCodeTracking": isDateCode,
                    "OrderDetailGUID": ordDetailGUID,
                    "ItemCost": receivecost,
                    "PackSlipNumber": packSlipNumber,
                    "UDF1": UDF1,
                    "UDF2": UDF2,
                    "UDF3": UDF3,
                    "UDF4": UDF4,
                    "UDF5": UDF5,
                    "IsOnlyFromUI": true

                };
                arrLocDetail.push(obj);
                var url = '@Url.Content("~/Inventory/ItemLocationDetailsSaveOrder")';
                if (!isNaN(stagID) && parseInt(stagID) > 0) {
                    url = '@Url.Content("~/Inventory/ItemLocationDetailsSaveForMSCredit")';
                }
                $.ajax({
                    "url": url,
                    "data": JSON.stringify(arrLocDetail),
                    "type": 'POST',
                    "async": false,
                    "cache": false,
                    "dataType": "json",
                    "contentType": "application/json",
                    "success": function (response) {
                        if (response.Status === "OK") {
                            $('#DivLoading').show();
                            SetReplenishRedCount();
                            $('#divOrderLineItems').empty();
                            url = '@Url.Action("LoadOrderLineItemsForReceive")';
                            $.get(url, { 'orderID': OrdID }, function (data) {
                                $('#divOrderLineItems').html(data);
                                $('#DivLoading').hide();
                                closeOrdReceiveInfoModel();
                                ShowHideInnerGrid(this, ordDetailID);
                                $('#DivLoading').hide();
                            });
                        }
                        else if (response.Status === "UDFError") {
                            closeOrdReceiveInfoModel();
                            ErrorMassage = '<b>This item is not able to receive, due to following reasons.</b><br />' + response.Message;
                            $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html(ErrorMassage);
                            $('#DivLoading').hide();
                            $('#OrdReceivedInfoDialog').modal();
                            return false;
                        }

                    },
                    "error": function (error) {
                        closeOrdReceiveInfoModel();
                        $('#DivLoading').hide();
                        $('#OrdReceivedInfoDialog').find("#OrdReceivedMSG").html("<b style='color: Red;'>Server error</b>");
                        $('#OrdReceivedInfoDialog').modal();
                        return false;
                    },
                    "completed": function (obj) {

                    }

                });
            }
            else {
                closeOrdReceiveInfoModel();
                $('#DivLoading').hide();
                return false;
            }

        }
    }

    function DeleteYesSelectedRows(ordDetailID) {
        $('#DivLoading').show();
        $.modal.impl.close();
        var anSelected = fnGetSelected($('#ReceivedItemDetail_' + ordDetailID).dataTable());
        var stringGUIDs = "";
        if (anSelected.length > 0) {
            for (var i = 0; i <= anSelected.length - 1; i++) {
                stringGUIDs = stringGUIDs + $(anSelected[i]).find("#hdnGUID").val() + ",";
            }
        }

        if (stringGUIDs.length > 0) {
            var ordDetailGUID = $("#hdnOrderDetailGUID_" + ordDetailID).val();
            var itemGUID = $("#hdnToolGUID_" + ordDetailID).val();

            $.ajax({
                'url': '@Url.Content("~/ToolAssetOrder/DeleteRecieveAndUpdateReceivedQty")',
                'type': 'POST',
                'data': { 'ItemGUID': itemGUID, 'ordDetailGUID': ordDetailGUID, 'deleteIDs': stringGUIDs },
                'async': false,
                'cache': false,
                'dataType': 'text',
                'success': function (response) {
                    if (response == "ok") {
                        NewUpdateReceivedQty(ordDetailID, ordDetailGUID);
                        for (var i = 0; i <= anSelected.length - 1; i++) {
                            $('#ReceivedItemDetail_' + ordDetailID).dataTable().fnDeleteRow(anSelected[i]);
                        }
                        if (anSelected.length > 0)
                            $("#spanGlobalMessage").html("@ResCommon.RecordDeletedSuccessfully".replace("{0}","(" + anSelected.length + ")"));

                        // $('#ReceivedItemDetail_' + ordDetailID).dataTable().fnDraw();
                        $('#DivLoading').hide();
                        showNotificationDialog();
                        url = '@Url.Action("LoadOrderLineItemsForReceive")';
                        $.get(url, { 'orderID': OrdID }, function (data) {
                            $('#divOrderLineItems').html(data);
                            $('#DivLoading').hide();
                            closeOrdReceiveInfoModel();
                            ShowHideInnerGrid(this, ordDetailID);
                            $('#DivLoading').hide();
                            return false;
                        });
                    }
                },
                'error': function (err) {
                    $('#DivLoading').hide();
                }
            });
        }

    }
    function getItemInventoryStagingLocation1(dropdownobj, binNumber, itmGuid, orderGuid) {

        var selval = $(dropdownobj).val();
        if (!$(dropdownobj).hasClass("populated")) {
            $(dropdownobj).html("");
            var stroptions = "";
            var stroptions = "<option value=''></option>";

            $.ajax({
                "url": '/ReceiveToolAsset/GetToolLocations',
                "type": "POST",
                "data": { 'OrderGuid': orderGuid, 'ItemGuid': itmGuid, 'NameStartWith': '' },
                "async": false,
                "cache": false,
                "dataType": "json",
                "success": function (response) {
                    $(response).each(function (indx, obj) {
                        if (selval == obj.Key) {
                            stroptions = stroptions + "<option selected='selected' value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }
                        else {
                            stroptions = stroptions + "<option value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }

                    });
                    $(dropdownobj).html(stroptions);
                    $(dropdownobj).addClass("populated");
                },
                "error": function (response) {
                }
            });
        }
    }

    function getItemInventoryStagingLocationAC(objTxtselector, reqUrl, ReqData, nameKey) {
        var itmGuid = $(objTxtselector).parent().parent().find('#hdnToolGUID').val();
        var stagingName = $('#txtStagingName').val();
        var includeQty = false;
        $(objTxtselector).autocomplete({
            source: function (request, response) {
                $('#DivLoading').show();

                $.ajax({
                    "url": reqUrl,
                    "type": "POST",
                    "contentType": 'application/json',
                    "dataType": 'json',
                    "data": { 'ItemGuid': itmGuid, 'StagingHeaderName': stagingName, 'IncludeQty': includeQty, 'NameStartWith': binNumber },
                    "success": function (data) {

                        response(
                        $.map(data, function (Items) {
                            return {
                                label: Items.BinNumber,
                                value: Items.BinNumber
                            }
                        }));
                        $('#DivLoading').hide();
                    },
                    error: function (err) {
                        console.log(err);
                        $('#DivLoading').hide();
                    }
                });
            },
            autoFocus: false,
            minLength: 0,
            select: function (event, ui) {
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                $('ul.ui-autocomplete').css('overflow-y', 'auto');
                $('ul.ui-autocomplete').css('max-height', '300px');
            },
            close: function () {
            },
            change: function (event, ui) {

            }
        }).bind("focus", function () {
            $(objTxtselector).autocomplete("search");
        });
    }
    function getItemInventoryStagingLocation(dropdownobj, binNumber) {
       
        var itmGuid = $(dropdownobj).parents("tr").find('#hdnToolGUID').val();
        var stagingName = $('#txtStagingName').val();
        var includeQty = false;
        var selval = $(dropdownobj).val();
        if (!$(dropdownobj).hasClass("populated")) {
            $(dropdownobj).html("");
            var stroptions = "";
            var stroptions = "<option value=''></option>";

            $.ajax({
                "url": '/Master/GetBinForItemOrStaging',
                "type": "POST",
                "data": { 'ItemGuid': itmGuid, 'StagingHeaderName': stagingName, 'IncludeQty': includeQty, 'NameStartWith': binNumber },
                "async": false,
                "cache": false,
                "dataType": "json",
                "success": function (response) {
                    $(response).each(function (indx, obj) {
                        if (selval == obj.Key) {
                            stroptions = stroptions + "<option selected='selected' value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }
                        else {
                            stroptions = stroptions + "<option value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }

                    });
                    $(dropdownobj).html(stroptions);
                    $(dropdownobj).addClass("populated");
                },
                "error": function (response) {
                }
            });
        }
    }


    function getItemInventoryStagingLocationWithQty(dropdownobj, binNumber) {
    
        var itmGuid = $(dropdownobj).parents("tr").find('#hdnToolGUID').val();
        var stagingName = $('#txtStagingName').val();
        var includeQty = true;
        var IsLoadMoreLocations = false;
        var selval = $(dropdownobj).val();
        if (!$(dropdownobj).hasClass("populated")) {
            $(dropdownobj).html("");
            var stroptions = "";
            var stroptions = "<option value=''></option>";

            $.ajax({
                "url": '/Master/GetBinForItemOrStaging',
                "type": "POST",
                "data": { 'ItemGuid': itmGuid, 'StagingHeaderName': stagingName, 'IncludeQty': includeQty, 'NameStartWith': binNumber, 'IsLoadMoreLocations': IsLoadMoreLocations },
                "async": false,
                "cache": false,
                "dataType": "json",
                "success": function (response) {
                    $(response).each(function (indx, obj) {
                        if (selval == obj.Key) {
                            stroptions = stroptions + "<option selected='selected' value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }
                        else {
                            stroptions = stroptions + "<option value='" + obj.Key + "'>" + obj.Key + "</option>";
                        }

                    });
                    $(dropdownobj).html(stroptions);
                    $(dropdownobj).addClass("populated");
                },
                "error": function (response) {
                }
            });
        }
    }

    $('#bntUnCloseItemConfirmYes').click(function () {
        $('#DivLoading').show();
        var orderDetailID = '';

        $('#RecieveOrderLineItem' + OrderID).find("tbody tr.row_selected").each(function (e) {
            if (orderDetailID.length > 0) {
                orderDetailID = orderDetailID + ",";
            }
            orderDetailID = orderDetailID + $(this).find('#hdnID').val();
        });
        if (orderDetailID.length > 0) {
            $.ajax({
                'url': 'UnCloseOrderLineItems',
                'data': { 'ids': orderDetailID, 'CallFrom': 'Order' },
                'success': function (result) {
                    if (!isNaN(parseInt(result.OrderStatus)) && parseInt(result.OrderStatus) > 0) {
                        $('#ddlOrderStatus').val(result.OrderStatus);
                    }
                    closeModalCloseOderDialog();
                    if (!isNaN(parseInt(result.OrderStatus)) && parseInt(result.OrderStatus) == 8) {
                        ShowEditTab('OrderEdit/' + OrderID, 'frmToolAssetOrder');
                        $('#tab11').hide();
                    }
                    else {
                        CallThisFunctionFromModel('success')
                    }
                    $('#DivLoading').hide();
                },
                'error': function (result) {
                    closeModalCloseOderDialog();
                    $('#DivLoading').hide();
                }

            });
        }
        else {
            closeModalCloseOderDialog();
            $('#DivLoading').hide();
            alert('@ResCommon.ReqLineItems');

        }
    });
    $('#bntCloseLineItemConfirmYes').click(function () {
        $('#DivLoading').show();
        var orderDetailID = '';

        $('#RecieveOrderLineItem' + OrderID).find("tbody tr.row_selected").each(function (e) {
            if (orderDetailID.length > 0) {
                orderDetailID = orderDetailID + ",";
            }
            orderDetailID = orderDetailID + $(this).find('#hdnID').val();
        });
        if (orderDetailID.length > 0) {
            $.ajax({
                'url': 'CloseOrderDetailLineItems',
                'data': { 'ids': orderDetailID, 'CallFrom': 'Order' },
                'success': function (result) {
                    if (!isNaN(parseInt(result.OrderStatus)) && parseInt(result.OrderStatus) > 0) {
                        $('#ddlOrderStatus').val(result.OrderStatus);
                    }
                    closeModalCloseOderDialog();
                    if (!isNaN(parseInt(result.OrderStatus)) && parseInt(result.OrderStatus) == 8) {
                        ShowEditTab('OrderEdit/' + OrderID, 'frmToolAssetOrder');
                        $('#tab11').hide();
                    }
                    else {
                        CallThisFunctionFromModel('success')
                    }
                    $('#DivLoading').hide();
                },
                'error': function (result) {
                    closeModalCloseOderDialog();
                    $('#DivLoading').hide();
                }

            });
        }
        else {
            closeModalCloseOderDialog();
            $('#DivLoading').hide();
            alert('@ResCommon.ReqLineItems');

        }

    });

    $('#RecieveOrderLineItem' + OrderID).live('contextmenu', function (e) {
        if ($("body").hasClass('DTTT_Print')) {
            e.preventDefault();
            return false;
        }

        var x = e.pageX - this.offsetLeft;
        var y = e.pageY - this.offsetTop;
        $('#divCtxMenu').css({ 'top': e.pageY, 'left': e.pageX }).fadeIn('slow');
        e.preventDefault();

    });






    function GetToFillPreReceiveFroToolAssetOrder(tr, aData) {
        var arrObj = new Array();
        var RecvQty = 0;
        var orderDetailID = $(tr).find('#hdnID').val();
        if ($(tr).find("input[type='text'][id^='txtReceiveQty']").length > 0) {
            RecvQty = $(tr).find("input[type='text'][id^='txtReceiveQty']").val();
        }

        var toFillReceiveDetail = { "Quantity": RecvQty };
        arrObj.push(toFillReceiveDetail);
        var ToolName = $(tr).find('#hdnToolName').val();
        var RecvCost = 0;
        if ($(tr).find("#txtCostBox" + orderDetailID) != undefined && $(tr).find("#txtCostBox" + orderDetailID).length > 0) {
            RecvCost = $(tr).find("#txtCostBox" + orderDetailID).val();
        }
        else if ($(tr).find("#hdnItemCost" + orderDetailID) != undefined && $(tr).find("#hdnItemCost" + orderDetailID).length > 0) {
            RecvCost = $(tr).find("#hdnItemCost" + orderDetailID).val();
        }
        else if ($(tr).find("#hdnItemCost" + orderDetailID) != undefined && $(tr).find("#hdnItemCost" + orderDetailID).length > 0) {
            RecvCost = $(tr).find("#hdnItemCost" + orderDetailID).val();
        }

        var RecvOrderNumber = '@Model.ToolAssetOrderNumber';
        var RecvReleaseNumber = '@Model.ReleaseNumber';
        var RecvIsPackslipMandatory = $(tr).find("#hdnIsPackSlipNumberMandatory_" + orderDetailID).val();

        var RecvItemTypeSerialLot = '';
        var RecvSerialNumberTracking = false;
        var RecvLotNumberTracking = false;
        var RecvDateCodeTracking = false;


        if (RecvItemTypeSerialLot.length > 0) {
            RecvItemTypeSerialLot = RecvItemTypeSerialLot + " Tracking Item";
        }
        var RecvRequestedQty = $(tr).find("#spnRequestedQty").text();
        var RecvApprovedQty = $(tr).find("#spnApprovedQty").text();
        var RecvReceivedQty = $(tr).find("#spnReceivedQty").text();

        var RecvItemGUID = $(tr).find("#hdnToolGUID").val();
        var RecvOrderDetailGUID = $(tr).find("#hdnGUID").val();
        var RecvOrderGUID = $(tr).find("#hdnOrderGUID").val();
        var RecvOrderStatus = '@Model.OrderStatus';
        var RecvUDF1 = getRecUDFSelectedVal(tr, "UDF1");
        var RecvUDF2 = getRecUDFSelectedVal(tr, "UDF2");
        var RecvUDF3 = getRecUDFSelectedVal(tr, "UDF3");
        var RecvUDF4 = getRecUDFSelectedVal(tr, "UDF4");
        var RecvUDF5 = getRecUDFSelectedVal(tr, "UDF5");
        var RecvBin = '';
        if ($(tr).find("#txtReceiveBin").length > 0) {
            RecvBin = $(tr).find('#txtReceiveBin').val();
        }
        else if ($(tr).find("#slctToolLocation").length > 0) {
            RecvBin = $(tr).find('#slctToolLocation').val();
        }

        var RecvPackSlip = $(tr).find('#txtPackslip' + orderDetailID).val();
        var RecvDate = getCurrentDate();

        if ($(tr).find("input[type = 'text'][id^='txtReceiveDate']").length > 0) {
            RecvDate = $(tr).find("input[type = 'text'][id^='txtReceiveDate']").val();
        }

        var RecvComment = '';
        if ($(tr).find("#Comment").length > 0) {
            RecvComment = $(tr).find('#Comment').val().trim();
        }

        var toFillPreReceive = {
            "ToolName": ToolName, "OrderNumber": RecvOrderNumber,
            "ReleaseNumber": RecvReleaseNumber,

             "IsModelShow": false, "Cost": RecvCost,
            "Comment": RecvComment,
            "BinNumber": RecvBin, "ReceivedDate": RecvDate, "PackSlipNumber": RecvPackSlip,
            "UDF1": RecvUDF1, "UDF2": RecvUDF2, "UDF3": RecvUDF3, "UDF4": RecvUDF4, "UDF5": RecvUDF5,
            "ItemGUID": RecvItemGUID, "OrderDetailGUID": RecvOrderDetailGUID, "OrderGUID": RecvOrderGUID,
            "OrderStatus": RecvOrderStatus, "RequestedQty": RecvRequestedQty, "ApproveQty": RecvApprovedQty,
            "ReceiveQty": RecvReceivedQty, "MakePreReceiveDetail": arrObj
        };
        return toFillPreReceive;
    }






    //$("#ColumnOrderSetup1").off('click')
    //$("#ColumnOrderSetup1").on('click', function () {

    $('#divOrderLineItems').off('click', 'a#ColumnOrderSetup1');
    $('#divOrderLineItems').on('click', 'a#ColumnOrderSetup1', function () {

        var dtName = 'OrderLineItem' + OrderID;

        var lstName = 'OrderLineItemList';
        var clmobjName = 'objOrdDtlGridColumns';

        if (parseInt($('#ddlOrderStatus').val()) > parseInt('@((int)ToolAssetOrderStatus.Approved)') && parseInt($('#ddlOrderStatus').val()) < parseInt('@((int)ToolAssetOrderStatus.Closed)')) {
            dtName = 'RecieveOrderLineItem' + OrderID;
            lstName = 'ReceiveOrderLineItem';
            clmobjName = 'objOrdRcvDtlGridColumns';
        }

        $("#divDetailGridReorderPopup").data({ 'DataTableName': dtName, 'ListName': lstName, 'ColumnObjectName': clmobjName }).dialog("open");
        return false;
    });

    //$('#divDetailGridReorderPopup').off('click', 'input#btnSaveDetailGridColumnOrder');
    //$('#divDetailGridReorderPopup').on('click', 'input#btnSaveDetailGridColumnOrder', function () {
    //    var DTName = $('#divDetailGridReorderPopup').find('#DTName').val();
    //    var _ListName = $('#divDetailGridReorderPopup').find('#ListName').val();
    //    UpdateDetailGridColumnOrder(DTName, _ListName);
    //});

    function FillDetailGridDiv() {
        $('#divOrderLineItems').empty();
        var url = '@Url.Action("LoadOrderLineItems")';
        if ($('#hdnIsChangeOrdclick').val() == "True" && parseInt($('#ddlOrderStatus').val()) == '@((int)OrderStatus.Transmitted)') {
            url = '@Url.Action("LoadOrderLineItems")';
        }
        else if (parseInt($('#ddlOrderStatus').val()) > parseInt('@((int)OrderStatus.Approved)') && parseInt($('#ddlOrderStatus').val()) < parseInt('@((int)OrderStatus.Closed)')) {
            url = '@Url.Action("LoadOrderLineItemsForReceive")';
        }

        $.get(url, { 'orderID': OrderID }, function (data) {
            $('#divOrderLineItems').html(data);
            $("#divDetailGridReorderPopup").dialog("close");
            $('#DivLoading').hide();
        });


    }

</script>
<script type="text/javascript">


    function PrepareReturnDataTable(objPullItemDTO) {
        var columnarrIL = new Array();
        columnarrIL.push({
            mDataProp: null, sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                if (objPullItemDTO.ViewRight == "ViewOverwrite") {
                    var strReturn = "<span style='position:relative'>";
                    strReturn = strReturn + "<input type='text' value='" + obj.aData.LotOrSerailNumber + "' id='txtLotOrSerailNumber' name='txtLotOrSerailNumber' class='text-boxinner AutoSerialLot' />";
                    strReturn = strReturn + '<a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;" class="ShowAllOptionsSL" ><img src="/Content/images/arrow_down_black.png" alt="select" /></a></span>';
                    return strReturn;
                }
                else if (objPullItemDTO.ViewRight == "NoRight") // && IsCheckViewRight == false)
                {
                    var strReturn = "<span style='position:relative'>";
                    strReturn = strReturn + "<input type='text' value='" + obj.aData.LotOrSerailNumber + "' id='txtLotOrSerailNumberNoRight' name='txtLotOrSerailNumberNoRight' class='text-boxinner' />";
                    //strReturn = strReturn + '<a id="lnkShowAllOptions" href="javascript:void(0);" style="position:absolute; right:5px; top:0px;" class="ShowAllOptionsSL" ><img src="/Content/images/arrow_down_black.png" alt="select" /></a></span>';
                    return strReturn;
                }
                else if (objPullItemDTO.ViewRight == "ViewOnly") {
                    var strReturn = "<input type='text' value='" + obj.aData.LotOrSerailNumber + "' id='txtLotOrSerailNumberViewOnly' name='txtLotOrSerailNumberViewOnly' class='text-boxinner' />";
                    return strReturn;
                }
                else {
                    var strReturn = "<input type='text' value='" + obj.aData.LotOrSerailNumber + "' id='txtLotOrSerailNumberViewOnly' name='txtLotOrSerailNumberViewOnly' class='text-boxinner' />";
                    return strReturn;
                }
            }
        });
        columnarrIL.push({ mDataProp: "BinNumber", sClass: "read_only" });
        columnarrIL.push({
            mDataProp: null, sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                var strReturn = "<span name='spnLotSerialQuantity' id='spnLotSerialQuantity_" + obj.aData.ID + "'>" + obj.aData.LotSerialQuantity + "</span>";
                return strReturn;
            }
        });
        columnarrIL.push({
            mDataProp: null, sClass: "read_only", sDefaultContent: '', fnRender: function (obj, val) {
                var strReturn = "<input type='hidden' name='hdnRowUniqueId' value='" + obj.aData.ID + "_" + obj.aData.ItemGUID + "_" + obj.aData.BinID + "' />";
                strReturn = strReturn + "<input type='hidden' name='hdnLotNumberTracking' value='" + obj.aData.LotNumberTracking + "' />";
                strReturn = strReturn + "<input type='hidden' name='hdnSerialNumberTracking' value='" + obj.aData.SerialNumberTracking + "' />";
                strReturn = strReturn + "<input type='hidden' name='hdnDateCodeTracking' value='" + obj.aData.DateCodeTracking + "' />";
                strReturn = strReturn + "<input type='hidden' name='hdnExpiration' value='" + obj.aData.Expiration + "' />";
                strReturn = strReturn + "<input type='hidden' name='hdnBinNumber' value='" + obj.aData.BinNumber + "' />";

                if (objPullItemDTO.SerialNumberTracking == BoolTrueString) {
                    strReturn = strReturn + "<input type='text' value='" + FormatedCostQtyValues(obj.aData.PullQuantity, 2) + "' id='txtPullQty_" + obj.aData.ID + "' name='txtPullQty' class='text-boxinner pull-quantity' readonly='readonly' />";
                }
                else {
                    strReturn = strReturn + "<input type='text' value='" + FormatedCostQtyValues(obj.aData.PullQuantity, 2) + "' id='txtPullQty_" + obj.aData.ID + "' name='txtPullQty' class='text-boxinner pull-quantity' />";
                }
                return strReturn;
            }
        });
        columnarrIL.push({ mDataProp: "Received", sClass: "read_only" });
        columnarrIL.push({ mDataProp: "Expiration", sClass: "read_only" });

        var Curtable = $('#' + objPullItemDTO.tableID).dataTable({
            "bPaginate": false,
            "bLengthChange": false,
            "bFilter": false,
            "bSort": false,
            "bInfo": false,
            "bAutoWidth": false,
            "sScrollX": "100%",
            "bRetrieve": true,
            "bDestroy": true,
            "bProcessing": true,
            "bServerSide": true,
            "aoColumns": columnarrIL,
            "sAjaxSource": '@Url.Content("~/Pull/PullLotSrSelection")',
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                if (aData.IsConsignedLotSerial == true) {
                    nRow.className = "even trconsigned";
                }
            },
            "fnInitComplete": function (oSettings) {
                var strAllSelected = "";
                $("#hdnSelectedId_" + objPullItemDTO.ItemGUID).val();
                if (objPullItemDTO.LotNumberTracking != BoolTrueString && objPullItemDTO.SerialNumberTracking != BoolTrueString) {
                    $('#' + objPullItemDTO.tableID).dataTable().fnSetColumnVis(0, false);
                }
                if (objPullItemDTO.DateCodeTracking != BoolTrueString) {
                    $('#' + objPullItemDTO.tableID).dataTable().fnSetColumnVis(5, false);
                }
            },
            "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                aoData.push({ "name": "ItemGUID", "value": objPullItemDTO.ItemGUID });
                aoData.push({ "name": "BinID", "value": objPullItemDTO.BinID });
                aoData.push({ "name": "PullQuantity", "value": FormatedCostQtyValues($("#txtPoolQuantity_" + objPullItemDTO.ItemGUID).val(), 2) });
                aoData.push({ "name": "InventoryConsuptionMethod", "value": objPullItemDTO.InventoryConsuptionMethod });
                aoData.push({ "name": "CurrentLoaded", "value": $("#hdnCurrentLoadedIds_" + objPullItemDTO.ItemGUID).val() });
                aoData.push({ "name": "ViewRight", "value": objPullItemDTO.ViewRight });
                aoData.push({ "name": "IsDeleteRowMode", "value": isDeleteSrLotRow });
                oSettings.jqXHR = $.ajax({
                    dataType: 'json',
                    type: "POST",
                    url: sSource,
                    cache: false,
                    "data": aoData,
					"headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
                    success: fnCallback,
                    beforeSend: function () {
                        $('.dataTables_scroll').css({ "opacity": 0.2 });
                    },
                    complete: function () {
                        $('.dataTables_scroll').css({ "opacity": 1 });
                        isDeleteSrLotRow = false;
                        $('.ShowAllOptionsSL').click(function () {
                            $(this).siblings('.AutoSerialLot').trigger("focus");
                            $(this).siblings(".AutoSerialLot").autocomplete("search", "");
                        });

                        if (objPullItemDTO.ViewRight == "ViewOnly") {
                            $("input[type='text'][name='txtLotOrSerailNumberViewOnly']").keypress(function () {
                                return false;
                            });

                            $("#DivPullSelection input[type='text'][name='txtPullQty']").keypress(function () {
                                return false;
                            });
                        }

                    }
                });
            }
        });
    }


    function PullAllNewFlow() {
        var ArrItem = new Array();
        var arrItemDetails;
        var ErrorMessage = ValidateAllPull();

        if (ErrorMessage == "") {
            $("#DivPullSelection").find("table[id^='tblItemPullheader']").each(function (indx, tblHeader) {
                arrItemDetails = new Array();
                var ID = $(tblHeader).prop("id").split('_')[1];
                var SpanQty = $(tblHeader).find("#txtPoolQuantity_" + ID);

                var dt = $("#tblItemPull_" + ID).dataTable();
                var currentData = dt.fnGetData();

                var strpullobj = JSON.parse($(tblHeader).find("input[name='hdnPullMasterDTO']").val());

                if (strpullobj.RequisitionDetailGUID != null && strpullobj.RequisitionDetailGUID != undefined && strpullobj.RequisitionDetailGUID != '' && strpullobj.RequisitionDetailGUID != '00000000-0000-0000-0000-000000000000') {
                    strpullobj.WorkOrderDetailGUID = null;
                }
                else if (strpullobj.WorkOrderDetailGUID != null && strpullobj.WorkOrderDetailGUID != undefined && strpullobj.WorkOrderDetailGUID != '' && strpullobj.WorkOrderDetailGUID != '00000000-0000-0000-0000-000000000000') {
                    strpullobj.RequisitionDetailGUID = null;
                }
                else {
                    strpullobj.WorkOrderDetailGUID = null;
                    strpullobj.RequisitionDetailGUID = null;
                }

                $("#tblItemPull_" + ID).find("tbody").find("tr").each(function (index, tr) {
                    var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                    var hdnLotNumberTracking = $(tr).find("input[name='hdnLotNumberTracking']").val();
                    var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();
                    var hdnDateCodeTracking = $(tr).find("input[name='hdnDateCodeTracking']").val();
                    var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                    var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
                    var hdnExpiration = $(tr).find("input[name='hdnExpiration']").val();

                    if (txtPullQty != "") {
                        var txtLotOrSerailNumber = "";
                        if (hdnLotNumberTracking == "true" || hdnSerialNumberTracking == "true")
                            var txtLotOrSerailNumber = $.trim($(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val());

                        var vSerialNumber = "";
                        var vLotNumber = "";
                        var vExpiration = "";

                        if (hdnSerialNumberTracking == "true")
                            vSerialNumber = $.trim(txtLotOrSerailNumber);
                        if (hdnLotNumberTracking == "true")
                            vLotNumber = $.trim(txtLotOrSerailNumber);
                        if (hdnDateCodeTracking == "true")
                            vExpiration = hdnExpiration;

                        var obj = {
                            "LotOrSerailNumber": $.trim(txtLotOrSerailNumber), "BinNumber": hdnBinNumber, "PullQuantity": parseFloat(txtPullQty.toString())
                                        , "LotNumberTracking": hdnLotNumberTracking, "SerialNumberTracking": hdnSerialNumberTracking, "DateCodeTracking": hdnDateCodeTracking
                                        , "Expiration": hdnExpiration, "SerialNumber": $.trim(vSerialNumber), "LotNumber": $.trim(vLotNumber)
                                        , "ItemGUID": strpullobj.ItemGUID, "BinID": strpullobj.BinID, "ID": strpullobj.BinID
                        };

                        arrItemDetails.push(obj);
                    }
                });

                var pullQty = parseFloat($(SpanQty).val().toString());

                var PullItem = {
                    ID: indx,
                    ItemGUID: strpullobj.ItemGUID,
                    OrderDetailGUID: strpullobj.OrderDetailGUID,
                    ItemID: strpullobj.ItemID,
                    ItemNumber: strpullobj.ItemNumber,
                    BinID: strpullobj.BinID,
                    BinNumber: strpullobj.BinNumber,
                    QtyToReturn: pullQty,
                    lstItemPullDetails: arrItemDetails,
                };
                ArrItem.push(PullItem);
            });

            if (ArrItem.length > 0) {
                PullMultipleItemNew(ArrItem);
            }
        }
        else {
            alert(ErrorMessage);
        }
    }

    function PullSingleItem(indx, ArrItem) {
        var SingleItemArrItem = ArrItem[indx];
        $.ajax({
            type: "POST",
            url: PullSerialsAndLotsUrl,
            contentType: 'application/json',
            dataType: 'json',
            data: JSON.stringify(SingleItemArrItem),
            success: function (RetData) {
                if (RetData.ErrorList.length > 0) {

                }
                else {
                    alert(RetData.ErrorList.length);
                }

            },
            error: function (err) {
                alert(err);
            },
            complete: function () {
                if ((indx + 1) < ArrItem.length) {
                    PullSingleItem((indx + 1), ArrItem);
                }
            }
        });
    }

    function PullMultipleItemNew(ArrItem) {
        $('#DivLoading').show();

        $.ajax({
            type: "POST",
            url: PullSerialsAndLotsNewUrl,
            contentType: 'application/json',
            dataType: 'json',
            data: JSON.stringify(ArrItem),
            success: function (RetData) {

                var errorMessage = "";

                $.each(RetData, function (indx, RetDataItem) {
                    if (RetDataItem.ErrorList.length > 0) {
                        $.each(RetDataItem.ErrorList, function (indx, ErrorListItem) {
                            errorMessage += ErrorListItem.ErrorMessage + "<br />";
                        });
                    }
                    else {
                        $("#divItem_" + RetDataItem.ItemGUID).attr('style', '');
                        $("#divItem_" + RetDataItem.ItemGUID).html("");
                    }
                });
                $('#DivLoading').hide();
                if (errorMessage != "") {
                    $.modal.impl.close();
                    errorMessage = "<b>Some of the Item(s) is(are) not able to Pull(s) Due to following reasons.</b><br /><br />" + errorMessage;
                    $('#dlgCommonErrorMsgPopup').find("#pOkbtn").css('display', '');
                    $('#dlgCommonErrorMsgPopup').find("#pErrMessage").html(errorMessage);
                    $('#dlgCommonErrorMsgPopup').modal();
                    $('#dlgCommonErrorMsgPopup').css("z-index", "1104");
                    $('#simplemodal-overlay').css("z-index", "1103");
                    $('#simplemodal-container').css("z-index", "1104");
                }
                else {
                    if ($("input[type='hidden'][name^='hdnPullMasterDTO']").length > 0) {
                        $.modal.impl.close();
                        $('#dlgCommonErrorMsgPopup').find("#pOkbtn").css('display', '');
                        $('#dlgCommonErrorMsgPopup').find("#pErrMessage").html("<b>Pull done successfully.</b><br /><br />");
                        $('#dlgCommonErrorMsgPopup').modal();
                        $('#dlgCommonErrorMsgPopup').css("z-index", "1104");
                        $('#simplemodal-overlay').css("z-index", "1103");
                        $('#simplemodal-container').css("z-index", "1104");

                    }
                    else {
                        $("#spanGlobalMessage").html("@ResPullMaster.AllPulldon");
                        $('div#target').fadeToggle();
                        $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        $('#DivPullSelection').dialog('close');
                        //$('#ItemModeDataTable').dataTable().fnStandingRedraw();
                        clearALL();
                    }
                }
            },
            error: function (err) {
                $('#DivLoading').hide();
                $.modal.impl.close();
                $('#dlgCommonErrorMsgPopup').find("#pOkbtn").css('display', '');
                //$('#dlgCommonErrorMsg').find("#pYesNobtn").css('display', 'none');
                $('#dlgCommonErrorMsgPopup').find("#pErrMessage").html("Not saved, error occured");
                $('#dlgCommonErrorMsgPopup').modal();
                $('#dlgCommonErrorMsgPopup').css("z-index", "1004");
                $('#simplemodal-overlay').css("z-index", "1003");
                $('#simplemodal-container').css("z-index", "1004");
            },
            complete: function () {
            }
        });
    }

    function ValidateSinglePull(vItemGUID) {
        var returnVal = true;
        var errormsg = "";
        var isMoreQty = false;
        var dtID = "#tblItemPull_" + vItemGUID;

        var SpanQty = $("#DivPullSelection").find("#txtPoolQuantity_" + vItemGUID);

        var TotalEntered = 0;
        $("#tblItemPull_" + vItemGUID).find("tbody").find("tr").each(function (index, tr) {
            var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
            var spnLotSerialQuantity = $(tr).find("span[name='spnLotSerialQuantity']").text();

            if (parseFloat(txtPullQty) > parseFloat(spnLotSerialQuantity)) {
                errormsg = "\nYou can not pull more QTY than available QTY.";
                isMoreQty = true;
                return errormsg;
            }

            TotalEntered = TotalEntered + parseFloat(txtPullQty);
        });

        if (isMoreQty == false) {
            var pullQty = parseFloat($(SpanQty).val().toString());
            if (TotalEntered != pullQty) {
                errormsg = errormsg + "\n You have entered :" + TotalEntered + " QTY. You had entered Returned Qty :" + pullQty;
            }
        }
        else {
            errormsg = "You can not return more QTY than available QTY.";
        }

        return errormsg;
    }

    function ValidateAllPull() {
        var returnVal = true;
        var errormsg = "";
        var isMoreQty = false;
        $("#DivPullSelection").find("table[id^='tblItemPullheader']").each(function (indx, tblHeader) {
            var ID = $(tblHeader).prop("id").split('_')[1];
            var SpanQty = $(tblHeader).find("#txtPoolQuantity_" + ID);

            var TotalEntered = 0;
            $("#tblItemPull_" + ID).find("tbody").find("tr").each(function (index, tr) {
                var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                var spnLotSerialQuantity = $(tr).find("span[name='spnLotSerialQuantity']").text();

                if (parseFloat(txtPullQty) > parseFloat(spnLotSerialQuantity)) {
                    errormsg = "\nYou can not pull more QTY than available QTY.";
                    isMoreQty = true;
                    return errormsg;
                }

                TotalEntered = TotalEntered + parseFloat(txtPullQty);
            });

            if (isMoreQty == false) {
                var pullQty = parseFloat($(SpanQty).val().toString());
                if (TotalEntered != pullQty) {
                    ////errormsg = errormsg + "\nentered :" + TotalEntered + "\tPull Qty :" + pullQty;
                    errormsg = errormsg + "\n You have entered :" + TotalEntered + " QTY. You had entered Returned Qty :" + pullQty;
                }
            }
            else {
                errormsg = "You can not return more QTY than available QTY.";
            }

        });

        return errormsg;
    }



    $(document).ready(function () {
        window.location.hash = '';
        $("#DivPullSelection").off('change', "input[type='text'][name^='txtLotOrSerailNumber']");
        $("#DivPullSelection").on('change', "input[type='text'][name^='txtLotOrSerailNumber']", function (e) {
            var objCurtxt = $(this);
            var oldValue = $(objCurtxt).val();
            var ids = $(this).parent().parent().parent().find("input[type='hidden'][name='hdnRowUniqueId']").val().split('_');
            var dtThisItem = $("#tblItemPull_" + ids[1].toString()).dataTable();
            var currentTR = $(objCurtxt).parent().parent().parent()[0];
            var row_id = dtThisItem.fnGetPosition(currentTR);

            if ($.trim(oldValue) == '')
                return;

            var isDuplicateEntry = false;
            var OtherPullQuantity = 0;
            $("#tblItemPull_" + ids[1].toString() + " tbody tr").each(function (i) {
                if (i != row_id) {
                    var tr = $(this);
                    var SerialOrLotNumber = $(tr).find('#' + objCurtxt.prop("id")).val();
                    if (SerialOrLotNumber == $(objCurtxt).val()) {
                        isDuplicateEntry = true;
                    }
                    else {
                        var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                        OtherPullQuantity = OtherPullQuantity + parseFloat(txtPullQty);
                    }
                }
            });

            if (isDuplicateEntry == true) {

                if ($("#hdnTrackingType_" + ids[1].toString()).val() == "LotNumberTracking")
                    alert("Duplicate lot number.");
                else if ($("#hdnTrackingType_" + ids[1].toString()).val() == "SerialNumberTracking")
                    alert("Duplicate serial number.");
                else
                    alert("Duplicate number.");

                $(objCurtxt).val("");
                $(objCurtxt).focus();
            }
            else {
                $.ajax({
                    type: "POST",
                    url: ValidateSerialLotNumberUrl,
                    contentType: 'application/json',
                    dataType: 'json',
                    data: "{ ItemGuid: '" + ids[1].toString() + "', SerialOrLotNumber: '" + $(objCurtxt).val() + "',BinID: '" + ids[2].toString() + "' }",
                    success: function (RetData) {
                        if (RetData.ID > 0) {
                            IsCheckViewRight = false;

                            var spnPoolQuantity = parseFloat($("#txtPoolQuantity_" + ids[1].toString()).val());
                            if ((spnPoolQuantity - OtherPullQuantity) > 0) {
                                if ((spnPoolQuantity - OtherPullQuantity) < RetData.PullQuantity)
                                    RetData.PullQuantity = spnPoolQuantity - OtherPullQuantity;
                            }
                            else {
                                RetData.PullQuantity = 0;
                            }

                            dtThisItem.fnUpdate(RetData, row_id, undefined, false, false);
                            IsCheckViewRight = true;

                            $('.ShowAllOptionsSL').click(function () {
                                $(this).siblings('.AutoSerialLot').trigger("focus");
                                $(this).siblings(".AutoSerialLot").autocomplete("search", "");
                            });

                            if (RetData.IsConsignedLotSerial) {
                                $(currentTR).addClass("trconsigned");
                            }
                            else {
                                $(currentTR).removeClass("trconsigned");
                            }
                        }
                        else {
                            $(objCurtxt).val("");
                            $(objCurtxt).focus();
                        }
                    },
                    error: function (err) {
                        alert(err);
                    }
                });
            }
        });

        $("#DivPullSelection").off('focus', "input[type='text'][name^='txtLotOrSerailNumber']");
        $("#DivPullSelection").on('focus', "input[type='text'][name^='txtLotOrSerailNumber']", function (e) {
            var objCurtxt = $(this);
            var ids = $(this).parent().parent().parent().find("input[type='hidden'][name='hdnRowUniqueId']").val().split('_');
            var aPos = $("#tblItemPull_" + ids[1].toString()).dataTable().fnGetPosition($(this).parent().parent().parent()[0]);
            var aData = $("#tblItemPull_" + ids[1].toString()).dataTable().fnGetData(aPos);

            var dtItemPull = "#tblItemPull_" + ids[1].toString();
            var strSerialLotNos = "";

            $(dtItemPull).find("tbody").find("tr").each(function (index, tr) {

                if (index != aPos) {
                    var hdnLotNumberTracking = $(tr).find("input[name='hdnLotNumberTracking']").val();
                    var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();
                    var hdnDateCodeTracking = $(tr).find("input[name='hdnDateCodeTracking']").val();

                    if (hdnLotNumberTracking == "true" || hdnSerialNumberTracking == "true") {
                        var txtLotOrSerailNumber = $.trim($(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val());
                        if (txtLotOrSerailNumber != undefined)
                            strSerialLotNos = strSerialLotNos + txtLotOrSerailNumber + "|#|";
                    }
                    else if (hdnDateCodeTracking == "true") {
                        var hdnExpiration = $(tr).find("input[name='hdnExpiration']").val();
                        if (hdnExpiration != undefined)
                            strSerialLotNos = strSerialLotNos + hdnExpiration + "|#|";
                    }
                    else {
                        var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
                        if (hdnBinNumber != undefined)
                            strSerialLotNos = strSerialLotNos + hdnBinNumber + "|#|";
                    }
                }

            });

            if ($(this).hasClass("AutoSerialLot")) {
                $(this).autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '/Pull/GetLotOrSerailNumberList',
                            contentType: 'application/json',
                            dataType: 'json',
                            data: {
                                maxRows: 1000,
                                name_startsWith: request.term,
                                ItemGuid: ids[1].toString(),
                                BinID: ids[2].toString(),
                                prmSerialLotNos: strSerialLotNos
                            },
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return {
                                        label: $.trim(item.LotOrSerailNumber),
                                        value: $.trim(item.LotOrSerailNumber),
                                        selval:$.trim(item.LotOrSerailNumber)
                                    }
                                }));
                            },
                            error: function (err) {

                            }
                        });
                    },
                    autoFocus: false,
                    minLength: 0,
                    select: function (event, ui) {
                        //                    $(objCurtxt).parent().parent().find("input[type='hidden'][name='hdnStagingBin']").val(ui.item.selval);
                        //                    $(objCurtxt).parent().parent().find("input[type='hidden'][name='hdnStagingBinName']").val(ui.item.label);
                    },
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        $(this).autocomplete('widget').css('z-index', 9000);
                        $('ul.ui-autocomplete').css('overflow-y', 'auto');
                        $('ul.ui-autocomplete').css('max-height', '300px');
                    },
                    close: function () {
                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                        $(objCurtxt).trigger("change");
                    }
                });
            }
        });

        $("#DivPullSelection").off("click", "input[type='button'][name='btnLoadMoreLots']");
        $("#DivPullSelection").on("click", "input[type='button'][name='btnLoadMoreLots']", function () {

            var vItemGUID = $(this).prop("id").split('_')[1];
            var dtID = "#tblItemPull_" + vItemGUID;
            var strIds = "";

            $(dtID).find("tbody").find("tr").each(function (index, tr) {

                var hdnLotNumberTracking = $(tr).find("input[name='hdnLotNumberTracking']").val();
                var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();
                var hdnDateCodeTracking = $(tr).find("input[name='hdnDateCodeTracking']").val();
                var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();

                if (txtPullQty != undefined) {
                    if (txtPullQty == "") {
                        txtPullQty = "0";
                    }
                    if (hdnLotNumberTracking == "true" || hdnSerialNumberTracking == "true") {
                        var txtLotOrSerailNumber = $.trim($(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val());
                        if (txtLotOrSerailNumber != undefined)
                            strIds = strIds + txtLotOrSerailNumber + "_" + txtPullQty + ",";
                    }
                    else if (hdnDateCodeTracking == "true") {
                        var hdnExpiration = $(tr).find("input[name='hdnExpiration']").val();
                        if (hdnExpiration != undefined)
                            strIds = strIds + hdnExpiration + "_" + txtPullQty + ",";
                    }
                    else {
                        var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
                        if (hdnBinNumber != undefined)
                            strIds = strIds + hdnBinNumber + "_" + txtPullQty + ",";
                    }
                }
            });

            $("#hdnCurrentLoadedIds_" + vItemGUID).val(strIds);

            var dt = $(dtID).dataTable();
            dt.fnStandingRedraw();
        });

        $("#DivPullSelection").off("click", "input[type='button'][name='btnPullPopup']");
        $("#DivPullSelection").on("click", "input[type='button'][name='btnPullPopup']", function () {
            //RequisitionDetailsGUID
            var vItemGUID = $(this).prop("id").split('_')[1];
            var dtID = "#tblItemPull_" + vItemGUID;

            var ArrItem = new Array();
            var arrItemDetails;
            var ErrorMessage = ValidateSinglePull(vItemGUID);

            if (ErrorMessage == "") {

                arrItemDetails = new Array();
                var ID = vItemGUID;
                var SpanQty = $("#DivPullSelection").find("#txtPoolQuantity_" + vItemGUID);

                var dt = $("#tblItemPull_" + vItemGUID).dataTable();
                var currentData = dt.fnGetData();

                var strpullobj = JSON.parse($("#hdnPullMasterDTO_" + vItemGUID).val());

                if (strpullobj.RequisitionDetailGUID != null && strpullobj.RequisitionDetailGUID != undefined && strpullobj.RequisitionDetailGUID != '' && strpullobj.RequisitionDetailGUID != '00000000-0000-0000-0000-000000000000') {
                    strpullobj.WorkOrderDetailGUID = null;
                }
                else if (strpullobj.WorkOrderDetailGUID != null && strpullobj.WorkOrderDetailGUID != undefined && strpullobj.WorkOrderDetailGUID != '' && strpullobj.WorkOrderDetailGUID != '00000000-0000-0000-0000-000000000000') {
                    strpullobj.RequisitionDetailGUID = null;
                }
                else {
                    strpullobj.WorkOrderDetailGUID = null;
                    strpullobj.RequisitionDetailGUID = null;
                }

                $("#tblItemPull_" + vItemGUID).find("tbody").find("tr").each(function (index, tr) {
                    var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                    var hdnLotNumberTracking = $(tr).find("input[name='hdnLotNumberTracking']").val();
                    var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();
                    var hdnDateCodeTracking = $(tr).find("input[name='hdnDateCodeTracking']").val();
                    var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();
                    var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
                    var hdnExpiration = $(tr).find("input[name='hdnExpiration']").val();

                    if (txtPullQty != "") {
                        var txtLotOrSerailNumber = "";
                        if (hdnLotNumberTracking == "true" || hdnSerialNumberTracking == "true")
                            var txtLotOrSerailNumber = $.trim($(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val());

                        var vSerialNumber = "";
                        var vLotNumber = "";
                        var vExpiration = "";

                        if (hdnSerialNumberTracking == "true")
                            vSerialNumber = txtLotOrSerailNumber;
                        if (hdnLotNumberTracking == "true")
                            vLotNumber = txtLotOrSerailNumber;
                        if (hdnDateCodeTracking == "true")
                            vExpiration = hdnExpiration;

                        var obj = {
                            "LotOrSerailNumber": $.trim(txtLotOrSerailNumber), "BinNumber": hdnBinNumber, "PullQuantity": parseFloat(txtPullQty.toString())
                                        , "LotNumberTracking": hdnLotNumberTracking, "SerialNumberTracking": hdnSerialNumberTracking, "DateCodeTracking": hdnDateCodeTracking
                                        , "Expiration": hdnExpiration, "SerialNumber": $.trim(vSerialNumber), "LotNumber": $.trim(vLotNumber)
                                        , "ItemGUID": strpullobj.ItemGUID, "BinID": strpullobj.BinID, "ID": strpullobj.BinID
                        };

                        arrItemDetails.push(obj);
                    }
                });

                var pullQty = parseFloat($(SpanQty).val().toString());

                var PullItem = {
                    ID: 1,
                    ItemGUID: strpullobj.ItemGUID,
                    OrderDetailGUID: strpullobj.OrderDetailGUID,
                    ItemID: strpullobj.ItemID,
                    ItemNumber: strpullobj.ItemNumber,
                    BinID: strpullobj.BinID,
                    BinNumber: strpullobj.BinNumber,
                    QtyToReturn: pullQty,
                    lstItemPullDetails: arrItemDetails,
                };

                ArrItem.push(PullItem);

                if (ArrItem.length > 0) {
                    PullMultipleItemNew(ArrItem);
                }
            }
            else {
                alert(ErrorMessage);
            }
        });

        $("#DivPullSelection").off("click", "input[type='button'][name='btnPullAllPopUp']");
        $("#DivPullSelection").on("click", "input[type='button'][name='btnPullAllPopUp']", function () {
            PullAllNewFlow();
        });

        $("#DivPullSelection").off("click", "input[type='button'][name='btnCancelPullPopup']");
        $("#DivPullSelection").on("click", "input[type='button'][name='btnCancelPullPopup']", function () {
            $("#DivPullSelection").empty();
            $('#DivPullSelection').dialog('close');
            $('#ItemModeDataTable').dataTable().fnStandingRedraw();
        });

        $("#DivPullSelection").off('click', "input[type='button'][name='btnValidateThis']");
        $("#DivPullSelection").on('click', "input[type='button'][name='btnValidateThis']", function (e) {
            var dt = $("#tblItemPull_" + $(this).prop("id").split('_')[1]).dataTable();
            var currentData = dt.fnGetData();
            var TotalEntered = 0;
            $(currentData).each(function (indx, obj) {
                TotalEntered = TotalEntered + parseFloat(obj.PullQuantity);
            });
            var pullQty = parseFloat($("#DivPullSelection").find("#txtPoolQuantity_" + $(this).prop("id").split('_')[1]).val().toString());
            //alert("Entered :" + TotalEntered + ", Pull Qty :" + pullQty);
            if (TotalEntered != pullQty) {
                alert("Please enter correct pull quantity");
            }
            else {
                alert("Validated");
            }

        });

        $("#DivPullSelection").off('click', "input[type='button'][name='btnvalidateAll']");
        $("#DivPullSelection").on('click', "input[type='button'][name='btnvalidateAll']", function (e) {
            var returnmsg = ValidateAllPull();
            if (returnmsg == "")
                returnmsg = "Validated All";
            alert(returnmsg);
        });

        $("#DivPullSelection").off("change", "input[type='text'][name='txtPullQty']");
        $("#DivPullSelection").on("change", "input[type='text'][name='txtPullQty']", function () {
            var ids = $(this).parent().parent().find("input[type='hidden'][name='hdnRowUniqueId']").val().split('_');
            var aPos = $("#tblItemPull_" + ids[1].toString()).dataTable().fnGetPosition($(this).parent().parent()[0]);
            $("#tblItemPull_" + ids[1].toString()).dataTable().fnGetData(aPos).PullQuantity = $(this).val();
        });

        $("#DivPullSelection").off("tap click", ".tbl-item-pull tbody tr");
        $("#DivPullSelection").on("tap click", ".tbl-item-pull tbody tr", function (e) {

            if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text") {
                e.stopPropagation();
            }
            else if (e.currentTarget.getElementsByTagName("input").btnLoad != undefined) {
                e.stopPropagation();
            }
            else {
                if ((e.metaKey || e.ctrlKey)) {
                    $(this).toggleClass('row_selected');
                } else {
                    $(this).toggleClass('row_selected');
                }
            }
            return false;
        });

        $("#DivPullSelection").off('click', "input[type='button'][name='btnDeleteLots']");
        $("#DivPullSelection").on('click', "input[type='button'][name='btnDeleteLots']", function (e) {

            var vItemGUID = $(this).prop("id").split('_')[1];
            var dtID = "#tblItemPull_" + vItemGUID;
            if ($(dtID + ' tbody tr.row_selected').length <= 0) {
                alert("Select at least one row to delete.");
            }
            else {
                $(dtID).find("tbody").find("tr.row_selected").each(function (index, tr) {
                    $(tr).remove();
                });

                var strIds = "";
                $(dtID).find("tbody").find("tr").each(function (index, tr) {

                    var hdnLotNumberTracking = $(tr).find("input[name='hdnLotNumberTracking']").val();
                    var hdnSerialNumberTracking = $(tr).find("input[name='hdnSerialNumberTracking']").val();
                    var hdnDateCodeTracking = $(tr).find("input[name='hdnDateCodeTracking']").val();
                    var txtPullQty = $(tr).find("input[type='text'][name='txtPullQty']").val();

                    if (txtPullQty == "")
                        txtPullQty = "0";

                    if (hdnLotNumberTracking == "true" || hdnSerialNumberTracking == "true") {
                        var txtLotOrSerailNumber = $.trim($(tr).find("input[type='text'][name^='txtLotOrSerailNumber']").val());
                        strIds = strIds + txtLotOrSerailNumber + "_" + txtPullQty + ",";
                    }
                    else if (hdnDateCodeTracking == "true") {
                        var hdnExpiration = $(tr).find("input[name='hdnExpiration']").val();
                        strIds = strIds + hdnExpiration + "_" + txtPullQty + ",";
                    }
                    else {
                        var hdnBinNumber = $(tr).find("input[name='hdnBinNumber']").val();
                        strIds = strIds + hdnBinNumber + "_" + txtPullQty + ",";
                    }
                });

                $("#hdnCurrentLoadedIds_" + vItemGUID).val(strIds);
                isDeleteSrLotRow = true;
                var dtThisItem = $(dtID).dataTable();
                dtThisItem.fnStandingRedraw();
            }
        });

    });

    $(document).on('click', 'input#btnAddNewItem', function () {
        return OpenItemPopup();
    });

    $('div.infoBlock').off('click', '#aRptSingle');
    $('div.infoBlock').on('click', '#aRptSingle', function () {
        if ('@Model.OrderType' == '@((int)ToolAssetOrderType.Order)') {
            ReportExecutionSingleRecord('ToolAssetOrder', '@Model.ID');
        }

    });
    

    function GetToFillPreReceiveFroOrder(tr, aData) {
        
        var arrObj = new Array();
        var RecvQty = 0;
        var orderDetailID = $(tr).find('#hdnID').val();

        if ($(tr).find("input[type='text'][id^='txtReceiveQty']").length > 0) {
            RecvQty = $(tr).find("input[type='text'][id^='txtReceiveQty']").val();
        }

        var toFillReceiveDetail = { "Quantity": RecvQty };
        arrObj.push(toFillReceiveDetail);
        var ToolName = $(tr).find('#hdnToolName').val();
        var RecvCost = 0;
        if ($(tr).find("#txtCostBox" + orderDetailID) != undefined && $(tr).find("#txtCostBox" + orderDetailID).length > 0) {
            RecvCost = $(tr).find("#txtCostBox" + orderDetailID).val();
        }
        else if ($(tr).find("#hdnItemCost" + orderDetailID) != undefined && $(tr).find("#hdnItemCost" + orderDetailID).length > 0) {
            RecvCost = $(tr).find("#hdnItemCost" + orderDetailID).val();
        }
        else if ($(tr).find("#hdnItemCost" + orderDetailID) != undefined && $(tr).find("#hdnItemCost" + orderDetailID).length > 0) {
            RecvCost = $(tr).find("#hdnItemCost" + orderDetailID).val();
        }
        var RecvToolTypeSerialLot = '';
        var RecvSerialNumberTracking = false;

        var RecvOrderNumber = '@Model.ToolAssetOrderNumber';
        var RecvReleaseNumber = '@Model.ReleaseNumber';
        var RecvIsPackslipMandatory = false;// $(tr).find("#hdnIsPackSlipNumberMandatory_" + orderDetailID).val();

     
        

        var isSerial = $(tr).find("#hdnToolSRTrack").val();

        if (isSerial == 'True') {
            RecvToolTypeSerialLot = "Serial#";
            RecvSerialNumberTracking = true;
        }
          
        
        var RecvRequestedQty = $(tr).find("#spnRequestedQty").text();
        var RecvApprovedQty = $(tr).find("#spnApprovedQty").text();
        var RecvReceivedQty = $(tr).find("#spnReceivedQty").text();

        var RecvItemGUID = $(tr).find("#hdnToolGUID").val();
        var RecvOrderDetailGUID = $(tr).find("#hdnDetailGUID").val();
        var RecvOrderGUID = $(tr).find("#hdnOrderGUID").val();
        var RecvOrderStatus = '@Model.OrderStatus';
        var RecvUDF1 = getRecUDFSelectedVal(tr, "UDF1");
        var RecvUDF2 = getRecUDFSelectedVal(tr, "UDF2");
        var RecvUDF3 = getRecUDFSelectedVal(tr, "UDF3");
        var RecvUDF4 = getRecUDFSelectedVal(tr, "UDF4");
        var RecvUDF5 = getRecUDFSelectedVal(tr, "UDF5");
        var RecvBin = '';
        if ($(tr).find("#txtReceiveBin").length > 0) {
            RecvBin = $(tr).find('#txtReceiveBin').val();
        }
        else if ($(tr).find("#slctBinNumber").length > 0) {
            RecvBin = $(tr).find('#slctBinNumber').val();
        }

        var RecvPackSlip = $(tr).find('#txtPackslip' + orderDetailID).val();
        var RecvDate = getCurrentDate();

        if ($(tr).find("input[type = 'text'][id^='txtReceiveDate']").length > 0) {
            RecvDate = $(tr).find("input[type = 'text'][id^='txtReceiveDate']").val();
        }

        var RecvComment = '';
        if ($(tr).find("#Comment").length > 0) {
            RecvComment = $(tr).find('#Comment').val().trim();
        }

        var toFillPreReceive = {
            "ToolName": ToolName, "OrderNumber": RecvOrderNumber,
            "ReleaseNumber": RecvReleaseNumber,
            "IsPackSlipMandatory": false,
            "IsModelShow": false, "Cost": RecvCost,
            "ToolTypeSerialLot": RecvToolTypeSerialLot,
            "SerialNumberTracking": RecvSerialNumberTracking,
            "Comment": RecvComment,
            "Location": RecvBin,
            "BinNumber": RecvBin, "ReceivedDate": RecvDate, "PackSlipNumber": RecvPackSlip,
            "UDF1": RecvUDF1, "UDF2": RecvUDF2, "UDF3": RecvUDF3, "UDF4": RecvUDF4, "UDF5": RecvUDF5,
            "ToolGUID": RecvItemGUID, "OrderDetailGUID": RecvOrderDetailGUID, "OrderGUID": RecvOrderGUID,
            "OrderStatus": RecvOrderStatus, "RequestedQty": RecvRequestedQty, "ApproveQty": RecvApprovedQty,
            "ReceiveQty": RecvReceivedQty, "MakePreReceiveDetail": arrObj
        };
        return toFillPreReceive;
    }

</script>