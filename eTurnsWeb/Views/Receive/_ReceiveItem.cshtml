@model ReceivableItemDTO
@{
    string strDecimalFormat = eTurnsWeb.Helper.SessionHelper.QuantityFormat;
    string strPriceFormat = eTurnsWeb.Helper.SessionHelper.PriceFormat;
    bool isAllowConsigned = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowedToChangeConsignedQuantityItems, eTurnsWeb.Helper.SessionHelper.PermissionType.Approval);
    bool isCost = false;
    isCost = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.HideCostMarkUpSellPrice);
    bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);
    bool isUpdate = false;
    bool isInsert = false;
    isUpdate = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Update);
    isInsert = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.Receive, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);
    eTurns.DAL.RegionSettingDAL objRegionSettingDAL = new eTurns.DAL.RegionSettingDAL(eTurnsWeb.Helper.SessionHelper.EnterPriseDBName);
    var version = eTurnsWeb.Helper.CommonUtility.GetReleaseNumber();
    string CurrencyDecimalDigits = eTurnsWeb.Helper.SessionHelper.CurrencyDecimalDigits;
}
<div class="innerGrid" id="InnerGrid_@Model.OrderDetailID" style="background: none repeat scroll 0 0 #F8F8F8; padding: 10px;float:left;  width: 98%;">
    @if ((Model.OrderStatus < (int)OrderStatus.Closed && !Model.IsCloseItem.GetValueOrDefault(false)) && (!Model.SerialNumberTracking && !Model.LotNumberTracking && !Model.DateCodeTracking))
    {
        <table id="NewReceiveEntry@(Model.OrderDetailID)" class="display" style="float:left;clear:both;width:36%">
            <thead>
                <tr>
                    <th>
                        @eTurns.DTO.ResOrder.Receive
                    </th>
                    @if (Model.SerialNumberTracking)
                    {
                    <th>
                        @eTurns.DTO.ResReceiveOrderDetails.SerialNumber
                    </th>
                    }
                    @if (Model.LotNumberTracking)
                    {
                    <th>
                        @eTurns.DTO.ResReceiveOrderDetails.LotNumber
                    </th>
                    }
                    @if (Model.DateCodeTracking)
                    {
                    <th>
                        @eTurns.DTO.ResReceiveOrderDetails.ExpirationDate
                    </th>
                    }
                    @if (!Model.SerialNumberTracking)
                    {
                        if (Model.ItemConsignment)
                        {
                    <th>
                        @eTurns.DTO.ResOrder.QuantityToReceive @*@eTurns.DTO.ResItemLocationDetails.ConsignedQuantity*@
                    </th>
                        }
                        else
                        {
                    <th>
                        @eTurns.DTO.ResOrder.QuantityToReceive @* @eTurns.DTO.ResItemLocationDetails.CustomerOwnedQuantity*@
                    </th>

                        }
                    }
                    <th>
                        @eTurns.DTO.ResReceiveOrderDetails.PackSlipNumber
                    </th>
                    <th>
                        @eTurns.DTO.ResReceiveOrderDetails.ReceiveBin
                    </th>
                    @if (isCost)
                    {
                    <th>
                        @eTurns.DTO.ResItemLocationDetails.Cost
                    </th>
                    }
                    <th>
                        @eTurns.DTO.ResItemLocationDetails.ReceivedDate
                    </th>
                    <th>
                        @eTurns.DTO.Resources.ResCommon.CreatedOn
                    </th>
                    <th>
                        @eTurns.DTO.Resources.ResCommon.UpdatedOn
                    </th>
                    <th>
                        @eTurns.DTO.Resources.ResCommon.AddedFrom
                    </th>
                    <th>
                        @eTurns.DTO.Resources.ResCommon.EditedFrom
                    </th>
                    <th>
                        @eTurns.DTO.Resources.ResCommon.ReceivedOnDate
                    </th>
                    <th>
                        @eTurns.DTO.Resources.ResCommon.ReceivedOnWebDate
                    </th>
                    @Html.RenderColumnsHeader("ReceivedOrderTransferDetail", typeof(eTurns.DTO.ResReceiveOrderDetails), "")
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        @if (isInsert && !Model.IsCloseItem.GetValueOrDefault(false))
                        {
                            if (Model.StagingID > 0)
                            {
                                <input type="button" id="btnReceive_@Model.OrderDetailID" onclick="javascript:return _ReceiveItem.NewReceiveStage('@Model.OrderDetailID',this)" class="GridBtnStyle inLineBtn" value="@ResOrder.Receive" />
                            }
                            else
                            {
                                <input type="button" id="btnReceive_@Model.OrderDetailID" onclick="javascript:return _ReceiveItem.ReceiveNew('@Model.OrderDetailID',this)" class="GridBtnStyle inLineBtn" value="@ResOrder.Receive" />
                            }
                        }
                        <input type="hidden" id="hdnIsConsign_@Model.OrderDetailID" value="@Model.ItemConsignment.ToString()" />
                        <input type="hidden" id="hdnIsSerial_@Model.OrderDetailID" value="@Model.SerialNumberTracking.ToString()" />
                        <input type="hidden" id="hdnIsLot_@Model.OrderDetailID" value="@Model.LotNumberTracking.ToString()" />
                        <input type="hidden" id="hdnIsDateCode_@Model.OrderDetailID" value="@Model.DateCodeTracking.ToString()" />
                        <input type="hidden" id="hdnOrderDetailGUID_@Model.OrderDetailID" value="@Model.OrderDetailGUID" />
                        <input type="hidden" id="hdnItemGuid_@Model.OrderDetailID" value="@Model.ItemGUID" />
                        <input type="hidden" id="hdnItemType_@Model.OrderDetailID" value="@Model.ItemType" />
                        <input type="hidden" id="hdnRequestedQty_@Model.OrderDetailID" value="@Model.RequestedQuantity" />
                        <input type="hidden" id="hdnStagingID_@Model.OrderDetailID" value="@Model.StagingID" />
                        <input type="hidden" id="hdnApprovedQty_@Model.OrderDetailID" value="@Model.ApprovedQuantity" />
                        <input type="hidden" id="hdnReceivedQty_@Model.OrderDetailID" value="@Model.ReceivedQuantity" />
                        <input type="hidden" id="hdnOrderGuid_@Model.OrderDetailID" value="@Model.OrderGUID" />
                        <input type="hidden" id="hdnIsPackSlipNumberMandatory_@Model.OrderDetailID" value="@Model.IsPackSlipNumberMandatory.ToString()" />
                        <input type="hidden" id="hdnItemNumber_@Model.OrderDetailID" value="@Model.ItemNumber" />
                        <input type="hidden" id="hdnOrderReleaseNumber_@Model.OrderDetailID" value="@Model.OrderReleaseNumber" />
                        

                        @Html.HiddenFor(t => t.ItemCost, new { @id = "hdnCostBox_" + Model.OrderDetailID })
                        @Html.HiddenFor(model => Model.IsOnlyFromUI)
                    </td>
                    @if (Model.SerialNumberTracking)
                    {
                        <td>
                            @Html.TextBox("txtsrnumber_" + Model.OrderDetailID, "", new { @class = "text-boxinner", @onblur = "return isDuplicateSerial('" + Model.OrderDetailID.ToString() + "')", @style = "width:80px;" })
                        </td>
                    }
                    @if (Model.LotNumberTracking)
                    {
                        <td>
                            @Html.TextBox("txtlotnumber_" + Model.OrderDetailID, "", new { @class = "text-boxinner", @onblur = "fillReceivedDate('txtlotnumber_','" + Model.OrderDetailID + "');", @style = "width:93%;" })
                        </td>
                    }
                    @if (Model.DateCodeTracking)
                    {
                        <td>
                            @Html.TextBox("txtExpiration_" + Model.OrderDetailID, "", new { name = "Expiration", @class = "text-boxinner", @style = "width:93%;", @onblur = "fillReceivedDate('txtExpiration_','" + Model.OrderDetailID + "');" })
                        </td>
                    }
                    @if (!Model.SerialNumberTracking)
                    {
                        <td>
                            @if (Model.SerialNumberTracking)
                            {
                                @Html.TextBox("txtReceiveQuantity_" + Model.OrderDetailID, (Model.ApprovedQuantity - Model.ReceivedQuantity) > 0 ? Model.ApprovedQuantity - Model.ReceivedQuantity : 0, new { @class = "text-boxinner numericinput",@style="width:93%", @onblur = "fillReceivedDateQuantity('txtReceiveQuantity_','" + Model.OrderDetailID + "');" })
                            }
                            else
                            {
                                @Html.TextBox("txtReceiveQuantity_" + Model.OrderDetailID, (Model.ApprovedQuantity - Model.ReceivedQuantity) > 0 ? Model.ApprovedQuantity - Model.ReceivedQuantity : 0, new { @class = "text-boxinner numericinput", @style = "width:93%", @onblur = "fillReceivedDateQuantity('txtReceiveQuantity_','" + Model.OrderDetailID + "');" })
                            }
                        </td>
                    }
                    <td>
                        @Html.TextBox("txtPackslip_" + Model.OrderDetailID, Model.PackSlipNumber, new { @class = "text-boxinner", @style = "width:93%;" })
                    </td>
                    <td>
                        @if (HasOnTheFlyEntryRight)
                        {
                            if (@Model.ReceiveBinName != "[|EmptyStagingBin|]")
                            {
                                <span style='position: relative'>
                                    @Html.TextBoxFor(modelItem => modelItem.ReceiveBinName, new { @id = "txtReceiveBinNumber_" + Model.OrderDetailID, @class = "text-boxinner ReciveInAuto", @style = "width:90px;" })
                                    <a id='lnkShowAllOptions' href='javascript:void(0);' style='position: absolute; right: 5px;
                                    top: 0px;' class="ShowAllOptions">
                                        <img src='/Content/images/arrow_down_black.png' alt='select' />
                                    </a>
                                </span>
                            }
                            else
                            {
                                <span style='position: relative'>
                                    <input type="text" id="txtReceiveBinNumber_@Model.OrderDetailID" class="text-boxinner ReciveInAuto" style="width:90px;" />
                                    <a id='lnkShowAllOptions' href='javascript:void(0);' style='position: absolute; right: 5px;
                                    top: 0px;' class="ShowAllOptions">
                                        <img src='/Content/images/arrow_down_black.png' alt='select' />
                                    </a>
                                </span>
                            }
                        }
                        else
                        {
                            List<BinMasterDTO> lstBinMaster = new List<BinMasterDTO>();
                            lstBinMaster.Add(new BinMasterDTO() { BinNumber = Model.ReceiveBinName });
                            @Html.DropDownList("slctBinNumber", new SelectList(lstBinMaster, "BinNumber", "BinNumber", Model.ReceiveBinName), new { @id = "slctReceiveBinNumber_" + Model.OrderDetailID, @class = "selectBox" })
                            if (Model.ReceiveBinName == "[|EmptyStagingBin|]")
                            {
                                <input type="text" name="txtReceiveBinNumber_@(Model.OrderDetailID)" id="txtReceiveBinNumber_@(Model.OrderDetailID)" value="" style="display:none;" />
                            }
                            else
                            {
                                <input type="text" name="txtReceiveBinNumber_@(Model.OrderDetailID)" id="txtReceiveBinNumber_@(Model.OrderDetailID)" value="@Model.ReceiveBinName" style="display:none;" />
                            }
                        }
                    </td>
                    @if (isCost)
                    {
                <td>
                    @if (Model.Consignment)
                    {
                        @*@Html.TextBoxFor(modelItem => Model.ItemCost, strPriceFormat, new { @class = "numericinput text-box", @id = "txtCostBox_" + Model.OrderDetailID, @readonly = "readonly" })*@
                        @Html.TextBoxFor(modelItem => Model.OrderItemCost, strPriceFormat, new { @class = "numericinput text-box disableBack", @id = "txtCostBox_" + Model.OrderDetailID, @readonly = "readonly" })
                    }
                    else
                    {
                        @*@Html.TextBoxFor(modelItem => Model.ItemCost, strPriceFormat, new { @class = "numericinput text-box", @id = "txtCostBox_" + Model.OrderDetailID })*@
                        @Html.TextBoxFor(modelItem => Model.OrderItemCost, strPriceFormat, new { @class = "numericinput text-box", @id = "txtCostBox_" + Model.OrderDetailID })
                    }

                </td>
                    }
                    <td>
                        @*@Html.TextBox("txtReceived_" + Model.OrderDetailID, eTurns.DAL.DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy"), new { name = "Received", @class = "text-boxinner", @style = "width:85px" })*@
                        @Html.TextBox("txtReceived_" + Model.OrderDetailID, objRegionSettingDAL.GetCurrentDatetimebyTimeZone(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.UserID, eTurns.DTO.Resources.ResourceHelper.CurrentCult, eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture).ToString(eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture), new { name = "Received", @class = "text-boxinner", @style = "width:85px" })
                    </td>
                    <td>
                        @Html.Label(Model.CreatedDate, objRegionSettingDAL.GetCurrentDatetimebyTimeZone(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.UserID, eTurns.DTO.Resources.ResourceHelper.CurrentCult, eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture).ToString(eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture), new { @style = "width:180px;", @readonly = "readonly" })
                    </td>
                    <td>
                        @Html.Label(Model.UpdatedDate, objRegionSettingDAL.GetCurrentDatetimebyTimeZone(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.UserID, eTurns.DTO.Resources.ResourceHelper.CurrentCult, eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture).ToString(eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture), new { @style = "width:180px;", @readonly = "readonly" })
                    </td>
                    <td>
                        @Html.Label((Model.AddedFrom ?? ""), (Model.EditedFrom ?? ""), new { @style = "width:180px;", @readonly = "readonly" })
                    </td>
                    <td>
                        @Html.Label((Model.EditedFrom ?? ""), (Model.EditedFrom ?? ""), new { @style = "width:180px;", @readonly = "readonly" })
                    </td>
                    <td>
                        @Html.Label(Model.ReceivedOnDateWeb, objRegionSettingDAL.GetCurrentDatetimebyTimeZone(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.UserID, eTurns.DTO.Resources.ResourceHelper.CurrentCult, eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture).ToString(eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture), new { @style = "width:180px;", @readonly = "readonly" })
                    </td>
                    <td>
                        @Html.Label(Model.ReceivedOnDate, objRegionSettingDAL.GetCurrentDatetimebyTimeZone(eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID, eTurnsWeb.Helper.SessionHelper.UserID, eTurns.DTO.Resources.ResourceHelper.CurrentCult, eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture).ToString(eTurnsWeb.Helper.SessionHelper.RoomDateFormat, eTurnsWeb.Helper.SessionHelper.RoomCulture), new { @style = "width:180px;", @readonly = "readonly" })
                    </td>
                    @Html.RenderColumnsArrayEditableObjectForDOM("ReceivedOrderTransferDetail")
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <table id="NewReceiveEntry@(Model.OrderDetailID)" style="float:display:none;">
            <tr>
                <td>
                    <input type="hidden" id="hdnIsConsign_@Model.OrderDetailID" value="@Model.ItemConsignment.ToString()" />
                    <input type="hidden" id="hdnIsSerial_@Model.OrderDetailID" value="@Model.SerialNumberTracking.ToString()" />
                    <input type="hidden" id="hdnIsLot_@Model.OrderDetailID" value="@Model.LotNumberTracking.ToString()" />
                    <input type="hidden" id="hdnIsDateCode_@Model.OrderDetailID" value="@Model.DateCodeTracking.ToString()" />
                    <input type="hidden" id="hdnOrderDetailGUID_@Model.OrderDetailID" value="@Model.OrderDetailGUID" />
                    <input type="hidden" id="hdnItemGuid_@Model.OrderDetailID" value="@Model.ItemGUID" />
                    <input type="hidden" id="hdnItemType_@Model.OrderDetailID" value="@Model.ItemType" />
                    <input type="hidden" id="hdnRequestedQty_@Model.OrderDetailID" value="@Model.RequestedQuantity" />
                    <input type="hidden" id="hdnStagingID_@Model.OrderDetailID" value="@Model.StagingID" />
                    <input type="hidden" id="hdnApprovedQty_@Model.OrderDetailID" value="@Model.ApprovedQuantity" />
                    <input type="hidden" id="hdnReceivedQty_@Model.OrderDetailID" value="@Model.ReceivedQuantity" />
                    <input type="hidden" id="hdnOrderGuid_@Model.OrderDetailID" value="@Model.OrderGUID" />
                    <input type="hidden" id="hdnIsPackSlipNumberMandatory_@Model.OrderDetailID" value="@Model.IsPackSlipNumberMandatory.ToString()" />
                </td>
            </tr>
        </table>
    }
    <div id="ItemReceivedGrid_@Model.OrderDetailID" style="float: left;clear:both; width: 70%;margin:25px 0px 15px 0px;">
    </div>
</div>
<script type='text/javascript' src="@Url.Content("~/Scripts/PageScripts/ReceiveItem.js?v=" + version)"></script>
<script type="text/javascript">

    _ReceiveItem.init('@eTurnsWeb.Helper.SessionHelper.RoomDateJSFormat', '@Model.OrderDetailID', '@Model.StagingID',
        '@Model.OrderGUID','@Model.ItemGUID' ,'@Model.OrderStatus'

        , '@Url.Content("~/Inventory/ItemLocationDetailsSaveOrder")'
        , '@Url.Content("~/Inventory/ItemLocationDetailsSaveForMSCredit")'
        , '@Url.Content("~/Receive/SaveReceiveInformation")'
        , '/Receive/GetItemLocations'
        , @CurrencyDecimalDigits
    );

    _ReceiveItem.initEvents();
    var MsgBinNumberValidation = '@eTurns.DTO.ResReceiveOrderDetails.MsgBinNumberValidation';
    var MsgSerialNumberValidation = '@eTurns.DTO.ResReceiveOrderDetails.MsgSerialNumberValidation';
    var MsgDuplicateSerialNumberValidation = '@eTurns.DTO.ResReceiveOrderDetails.MsgDuplicateSerialNumberValidation';
    var MsgEnterQuantityReceive = '@eTurns.DTO.ResReceiveOrderDetails.MsgEnterQuantityReceive';
    var MsgEnterPayslipNumber = '@eTurns.DTO.ResReceiveOrderDetails.MsgEnterPayslipNumber';
    var MsgEnterLotNumber = '@eTurns.DTO.ResReceiveOrderDetails.MsgEnterLotNumber';
    var MsgExpireDateValidation = '@eTurns.DTO.ResReceiveOrderDetails.MsgExpireDateValidation';
    var MsgReceiveReasons = '@eTurns.DTO.ResReceiveOrderDetails.MsgReceiveReasons';
    var MsgExceedApprovedQuantity = '@eTurns.DTO.ResReceiveOrderDetails.MsgExceedApprovedQuantity';
    var MsgErrorInAjaxrequest = '@ResCommon.ErrorInProcess';
    var MsgReceivedSuccessfully = '@ResReceiveOrderDetails.MsgReceivedSuccessfully';
    var MsgErrorNotReceived = '@ResReceiveOrderDetails.MsgErrorNotReceived';

</script>
