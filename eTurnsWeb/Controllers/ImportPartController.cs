using eTurns.DAL;
using eTurns.DTO;
using eTurns.DTO.Resources;
using eTurnsWeb.Helper;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Xml.Linq;
using eTurnsWeb.BAL;
using System.Configuration;

//using System.Reflection;
namespace eTurnsWeb.Controllers
{
    public partial class ImportController : eTurnsControllerBase
    {


        #region Save Import
        [HttpPost]
        public JsonResult SaveImport(string TableName, string para = "", bool HasMoreRecords = false, bool IsFirstCall = false, Int64 TotalCount = 0, bool isImgZipAvail = false, bool isLink2ZipAvail = false)
        {
            List<Guid> lstItemGUID = new List<Guid>();
            string message = "";
            string status = "";
            bool allSuccesfulRecords = true;
            string savedOnlyitemIds = string.Empty;
            string savedItemIdsWithLink2 = string.Empty;
            string savedItemGuids = string.Empty;
            JavaScriptSerializer s = new JavaScriptSerializer();
            s.MaxJsonLength = int.MaxValue;
            ImportBAL importBAL = new ImportBAL(() => { ClearCurrentResourceList(); });
            string currentCulture = "en-US";
            if (System.Web.HttpContext.Current != null)
            {
                if (eTurns.DTO.Resources.ResourceHelper.CurrentCult != null)
                {
                    if (!string.IsNullOrWhiteSpace(Convert.ToString(eTurns.DTO.Resources.ResourceHelper.CurrentCult)))
                    {
                        currentCulture = eTurns.DTO.Resources.ResourceHelper.CurrentCult.ToString();
                    }

                }
            }
            else
            {
                eTurns.DTO.eTurnsRegionInfo objeTurnsRegionInfo = new RegionSettingDAL(SessionHelper.EnterPriseDBName).GetRegionSettingsById(SessionHelper.RoomID,SessionHelper.CompanyID,SessionHelper.UserID);
                currentCulture = objeTurnsRegionInfo.CultureName;
            }
            try
            {
                long SessionUserId = SessionHelper.UserID;
                if (HasMoreRecords == true && IsFirstCall == true)
                    Session["importedData"] = null;

                ImportDAL objImport = new ImportDAL(SessionHelper.EnterPriseDBName);
                List<UDFOptionsCheckDTO> lst = new List<UDFOptionsCheckDTO>();
                List<UDFOptionsMain> CurrentOptionList = null;
                ImportDAL obj = new ImportDAL(SessionHelper.EnterPriseDBName);

                ImportMastersDTO.TableName enumTable = ImportMastersDTO.TableName.AssetCategoryMaster;

                bool isParse = Enum.TryParse<ImportMastersDTO.TableName>(TableName, out enumTable);

                #region switch
                if (isParse)
                {
                    switch (enumTable)
                    {
                        case ImportMastersDTO.TableName.BinMaster:
                            #region Count Adjustment Master
                            //if (ImportMastersDTO.TableName.BinMaster.ToString() == TableName)
                            {

                                //XElement Settinfile = XElement.Load(System.Web.Hosting.HostingEnvironment.MapPath("/SiteSettings.xml"));
                                string ILQImportNew = SiteSettingHelper.ILQImportNew; // Settinfile.Element("ILQImportNew").Value;
                                List<InventoryLocationMain> CurrentBlankInventoryLocationList = new List<InventoryLocationMain>();
                                List<InventoryLocationMain> LstInventoryLocation = s.Deserialize<List<InventoryLocationMain>>(para);
                                List<InventoryLocationMain> objListInventoryLocationMain = new List<InventoryLocationMain>();
                                if (Session["InventoryLocationList"] != null)
                                {
                                    objListInventoryLocationMain = (List<InventoryLocationMain>)Session["InventoryLocationList"];

                                }
                                objListInventoryLocationMain = objListInventoryLocationMain.Union(LstInventoryLocation).ToList();
                                Session["InventoryLocationList"] = objListInventoryLocationMain;
                                if (objListInventoryLocationMain.Count == TotalCount)
                                {
                                    LstInventoryLocation = (List<InventoryLocationMain>)Session["InventoryLocationList"];
                                    Session["InventoryLocationList"] = null;

                                    if (ILQImportNew == "1")
                                    {
                                        List<ItemLocationDetailsDTO> lstProperRecords = new List<ItemLocationDetailsDTO>();
                                        List<ItemLocationDetailsDTO> lstProperRecordsAfter = new List<ItemLocationDetailsDTO>();
                                        List<ItemLocationDetailsDTO> lstNotProperRecords = new List<ItemLocationDetailsDTO>();
                                        List<ItemLocationDetailsDTO> lstValidated = new List<ItemLocationDetailsDTO>();
                                        ItemLocationDetailsDAL objItemLocationDetailsDAL = new ItemLocationDetailsDAL(SessionHelper.EnterPriseDBName);
                                        string RoomDateFormat = Convert.ToString(SessionHelper.RoomDateFormat);
                                        string MsgCreditTransactionForSerialNumber = string.Empty;
                                        string MsgPullQtyIsntEnoughForCredit = string.Empty;
                                        lstValidated = objItemLocationDetailsDAL.ValidateILQRecordsForCount(LstInventoryLocation, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, RoomDateFormat,SessionHelper.EnterPriceID,ResourceHelper.CurrentCult, out MsgCreditTransactionForSerialNumber, out MsgPullQtyIsntEnoughForCredit, true, false);
                                        lstProperRecords = lstValidated.Where(t => (t.ErrorMessege ?? "") == "").ToList();
                                        lstProperRecordsAfter.AddRange(lstProperRecords);
                                        CartItemDAL objCartItemDAL = new CartItemDAL(SessionHelper.EnterPriseDBName);

                                        lstNotProperRecords = lstValidated.Where(t => (t.ErrorMessege ?? "") != "").ToList();

                                        if (lstNotProperRecords.Count > 0)
                                        {
                                            if (lstNotProperRecords.Where(x => x.ErrorMessege.Contains(MsgCreditTransactionForSerialNumber)
                                                                               || x.ErrorMessege.Contains(MsgPullQtyIsntEnoughForCredit)).Count() > 0)
                                            {
                                                List<Guid> lstNotProperGuid = new List<Guid>();
                                                lstNotProperGuid.AddRange(lstNotProperRecords.Where(x => (x.ErrorMessege ?? "") != "").Select(m => m.ItemGUID.GetValueOrDefault(Guid.Empty)).Distinct().ToList());
                                                lstProperRecords = lstProperRecords.Where(x => !lstNotProperGuid.Contains(x.ItemGUID.GetValueOrDefault(Guid.Empty))).ToList();
                                            }
                                        }

                                        if (lstProperRecords != null && lstProperRecords.Count > 0)
                                        {
                                            InventoryCountDTO objInventoryCountDTO = InsertCount("A");

                                            List<CountLineItemDetailDTO> lstCountLineItemDetail = new List<CountLineItemDetailDTO>();
                                            InventoryCountDetailDTO objInventoryCountDetailDTO = new InventoryCountDetailDTO();

                                            lstProperRecords.ForEach(t =>
                                            {
                                                if (objInventoryCountDTO != null && objInventoryCountDTO.ID > 0)
                                                {
                                                    if (t.SerialNumberTracking || t.LotNumberTracking || t.DateCodeTracking)
                                                    {
                                                        if (t.SerialNumberTracking
                                                            && string.IsNullOrWhiteSpace(t.SerialNumber)
                                                            && (t.CustomerOwnedQuantity.GetValueOrDefault(0) + t.ConsignedQuantity.GetValueOrDefault(0)) == 0)
                                                        {
                                                            BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                                                            List<CountLineItemDetailDTO> locations = objBinMasterDAL.GetAllItemLocationsByItemId(t.ItemGUID.GetValueOrDefault(Guid.Empty), SessionHelper.CompanyID, SessionHelper.RoomID, false);
                                                            List<CountLineItemDetailDTO> Sublocations = locations.Where(x => x.BinID == t.BinID).ToList();

                                                            foreach (CountLineItemDetailDTO objLocation in Sublocations)
                                                            {
                                                                Int64 ExistCount = lstProperRecords.Where(l => l.BinID == t.BinID
                                                                                        && l.SerialNumber == objLocation.LotSerialNumber
                                                                                        && (l.CustomerOwnedQuantity.GetValueOrDefault(0) + l.ConsignedQuantity.GetValueOrDefault(0)) > 0).Count();

                                                                if (ExistCount <= 0)
                                                                {
                                                                    CountLineItemDetailDTO objCountLineItemDetailDTO = new CountLineItemDetailDTO();
                                                                    objCountLineItemDetailDTO.ID = 0;
                                                                    objCountLineItemDetailDTO.ItemGUID = t.ItemGUID.GetValueOrDefault(Guid.Empty);
                                                                    objCountLineItemDetailDTO.ItemNumber = t.ItemNumber;
                                                                    objCountLineItemDetailDTO.ItemDescription = t.ItemDescription;
                                                                    objCountLineItemDetailDTO.ItemType = t.ItemType;
                                                                    objCountLineItemDetailDTO.Comment = "";
                                                                    objCountLineItemDetailDTO.BinID = t.BinID;
                                                                    objCountLineItemDetailDTO.BinNumber = t.BinNumber;
                                                                    objCountLineItemDetailDTO.CustomerOwnedQuantity = 0;
                                                                    objCountLineItemDetailDTO.CountCustomerOwnedQuantity = t.CustomerOwnedQuantity;
                                                                    objCountLineItemDetailDTO.ConsignedQuantity = 0;
                                                                    objCountLineItemDetailDTO.CountConsignedQuantity = t.ConsignedQuantity;
                                                                    objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                                    objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                                    objCountLineItemDetailDTO.LotSerialNumber = (t.SerialNumberTracking ? (objLocation.LotSerialNumber) : (t.LotNumberTracking ? objLocation.LotSerialNumber : ""));
                                                                    objCountLineItemDetailDTO.LotNumber = (t.LotNumberTracking ? objLocation.LotSerialNumber : "");
                                                                    objCountLineItemDetailDTO.SerialNumber = (t.SerialNumberTracking ? objLocation.LotSerialNumber : "");
                                                                    objCountLineItemDetailDTO.Expiration = "";
                                                                    objCountLineItemDetailDTO.Received = "";
                                                                    objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;
                                                                    objCountLineItemDetailDTO.ExpirationDate = objLocation.ExpirationDate;
                                                                    objCountLineItemDetailDTO.ReceivedDate = t.ReceivedDate;
                                                                    objCountLineItemDetailDTO.Cost = t.Cost;
                                                                    objCountLineItemDetailDTO.GUID = null;
                                                                    objCountLineItemDetailDTO.IsStagingLocationCount = false;
                                                                    objCountLineItemDetailDTO.CountGUID = objInventoryCountDTO.GUID;
                                                                    objCountLineItemDetailDTO.CountDetailGUID = null;
                                                                    objCountLineItemDetailDTO.Consignment = t.IsConsignedSerialLot;
                                                                    objCountLineItemDetailDTO.IsConsigned = (t.ConsignedQuantity > 0 ? true : false);
                                                                    objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                                    objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                                    objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;

                                                                    objCountLineItemDetailDTO.UDF1 = t.UDF1;
                                                                    objCountLineItemDetailDTO.UDF2 = t.UDF2;
                                                                    objCountLineItemDetailDTO.UDF3 = t.UDF3;
                                                                    objCountLineItemDetailDTO.UDF4 = t.UDF4;
                                                                    objCountLineItemDetailDTO.UDF5 = t.UDF5;

                                                                    lstCountLineItemDetail.Add(objCountLineItemDetailDTO);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            CountLineItemDetailDTO objCountLineItemDetailDTO = new CountLineItemDetailDTO();
                                                            objCountLineItemDetailDTO.ID = 0;
                                                            objCountLineItemDetailDTO.ItemGUID = t.ItemGUID.GetValueOrDefault(Guid.Empty);
                                                            objCountLineItemDetailDTO.ItemNumber = t.ItemNumber;
                                                            objCountLineItemDetailDTO.ItemDescription = t.ItemDescription;
                                                            objCountLineItemDetailDTO.ItemType = t.ItemType;
                                                            objCountLineItemDetailDTO.Comment = "";
                                                            objCountLineItemDetailDTO.BinID = t.BinID;
                                                            objCountLineItemDetailDTO.BinNumber = t.BinNumber;
                                                            objCountLineItemDetailDTO.CustomerOwnedQuantity = 0;
                                                            objCountLineItemDetailDTO.CountCustomerOwnedQuantity = t.CustomerOwnedQuantity;
                                                            objCountLineItemDetailDTO.ConsignedQuantity = 0;
                                                            objCountLineItemDetailDTO.CountConsignedQuantity = t.ConsignedQuantity;
                                                            objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                            objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                            objCountLineItemDetailDTO.LotSerialNumber = (t.SerialNumberTracking ? (t.SerialNumber) : (t.LotNumberTracking ? t.LotNumber : ""));
                                                            objCountLineItemDetailDTO.LotNumber = t.LotNumber;
                                                            objCountLineItemDetailDTO.SerialNumber = t.SerialNumber;
                                                            objCountLineItemDetailDTO.Expiration = "";
                                                            objCountLineItemDetailDTO.Received = "";
                                                            objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;
                                                            objCountLineItemDetailDTO.ExpirationDate = t.ExpirationDate;
                                                            objCountLineItemDetailDTO.ReceivedDate = t.ReceivedDate;
                                                            objCountLineItemDetailDTO.Cost = t.Cost;
                                                            objCountLineItemDetailDTO.GUID = null;
                                                            objCountLineItemDetailDTO.IsStagingLocationCount = false;
                                                            objCountLineItemDetailDTO.CountGUID = objInventoryCountDTO.GUID;
                                                            objCountLineItemDetailDTO.CountDetailGUID = null;
                                                            objCountLineItemDetailDTO.Consignment = t.IsConsignedSerialLot;
                                                            objCountLineItemDetailDTO.IsConsigned = (t.ConsignedQuantity > 0 ? true : false);
                                                            objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                            objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                            objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;

                                                            objCountLineItemDetailDTO.UDF1 = t.UDF1;
                                                            objCountLineItemDetailDTO.UDF2 = t.UDF2;
                                                            objCountLineItemDetailDTO.UDF3 = t.UDF3;
                                                            objCountLineItemDetailDTO.UDF4 = t.UDF4;
                                                            objCountLineItemDetailDTO.UDF5 = t.UDF5;

                                                            lstCountLineItemDetail.Add(objCountLineItemDetailDTO);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Guid CountDetailGUID = Guid.Empty;
                                                        AddItemToCountAndReturnDetailGUID(objInventoryCountDTO.GUID, t.ItemGUID.GetValueOrDefault(Guid.Empty), t.BinID.GetValueOrDefault(0), t.ConsignedQuantity.GetValueOrDefault(0), t.CustomerOwnedQuantity.GetValueOrDefault(0), false, 0, 0, t.UDF1, t.UDF2, t.UDF3, t.UDF4, t.UDF5, t.ItemDescription, t.ItemType, true, t.ProjectSpentGUID.GetValueOrDefault(Guid.Empty), out CountDetailGUID);
                                                    }
                                                }
                                            });
                                            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
                                            {
                                                AddUpdateLotDetailPopupForCount(lstCountLineItemDetail);
                                            }

                                            #region WI-4991

                                            if (objInventoryCountDTO != null && objInventoryCountDTO.GUID != null)
                                            {
                                                AddMissingSerialForItemCount(lstProperRecords, objInventoryCountDTO.GUID);
                                            }

                                            #endregion


                                            lstProperRecords.ForEach(t =>
                                            {
                                                //objCartItemDAL.AutoCartUpdateByCode(t.ItemGUID ?? Guid.Empty, SessionHelper.UserID, "Web", "Importcontroller>> SaveImport");
                                                objCartItemDAL.AutoCartUpdateByCode(t.ItemGUID ?? Guid.Empty, SessionHelper.UserID, "Web", "BulkImport >> Adjustment Count", SessionUserId);

                                            });

                                            #region WI-6496 - Scheduled Immediate Inventory Count report not sending
                                            if (objInventoryCountDTO != null && objInventoryCountDTO.ID > 0)
                                            {                                                
                                                string dataGUIDs = "<DataGuids>" + objInventoryCountDTO.GUID + "</DataGuids>";
                                                string eTurnsScheduleDBName = (Convert.ToString(ConfigurationManager.AppSettings["eTurnsScheduleDBName"]) ?? "eTurnsSchedule");
                                                NotificationDAL objNotificationDAL = new NotificationDAL(SessionHelper.EnterPriseDBName);

                                                string eventName = "OCNTC";
                                                List<NotificationDTO> lstOCNTCNotification = objNotificationDAL.GetCurrentNotificationListByEventName(eventName, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
                                                if (lstOCNTCNotification != null && lstOCNTCNotification.Count > 0)
                                                {
                                                    objNotificationDAL.SendMailForImmediate(lstOCNTCNotification, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, SessionHelper.EnterPriceID, eTurnsScheduleDBName, dataGUIDs);
                                                }                                           
                                            }
                                            #endregion
                                        }
                                        LstInventoryLocation = new List<InventoryLocationMain>();
                                        if (lstNotProperRecords.Count > 0)
                                            lstNotProperRecords.AddRange(lstProperRecordsAfter);

                                        lstNotProperRecords.ForEach(t =>
                                        {
                                            InventoryLocationMain objInventoryLocationMain = new InventoryLocationMain();
                                            objInventoryLocationMain.BinNumber = t.BinNumber;
                                            objInventoryLocationMain.ItemNumber = t.ItemNumber;
                                            objInventoryLocationMain.customerownedquantity = t.CustomerOwnedQuantity;
                                            objInventoryLocationMain.consignedquantity = t.ConsignedQuantity;
                                            objInventoryLocationMain.Cost = t.Cost;
                                            objInventoryLocationMain.Expiration = t.Expiration;
                                            objInventoryLocationMain.SerialNumber = (!string.IsNullOrWhiteSpace(t.SerialNumber)) ? t.SerialNumber.Trim() : string.Empty;
                                            objInventoryLocationMain.LotNumber = (!string.IsNullOrWhiteSpace(t.LotNumber)) ? t.LotNumber : string.Empty;
                                            objInventoryLocationMain.Received = t.Received;
                                            objInventoryLocationMain.Status = (t.ErrorMessege != "" && t.ErrorMessege != null) ? "fail" : "";
                                            objInventoryLocationMain.Reason = t.ErrorMessege;
                                            objInventoryLocationMain.UDF1 = t.UDF1;
                                            objInventoryLocationMain.UDF2 = t.UDF2;
                                            objInventoryLocationMain.UDF3 = t.UDF3;
                                            objInventoryLocationMain.UDF4 = t.UDF4;
                                            objInventoryLocationMain.UDF5 = t.UDF5;
                                            objInventoryLocationMain.ItemDescription = t.ItemDescription;
                                            LstInventoryLocation.Add(objInventoryLocationMain);
                                        });


                                        if (LstInventoryLocation.Count() > 0)
                                        {
                                            allSuccesfulRecords = false;
                                        }

                                        SaveImportDataListSession<InventoryLocationMain>(HasMoreRecords, true, LstInventoryLocation);
                                        //Session["importedData"] = LstInventoryLocation.ToList();
                                    }
                                    else
                                    {

                                        if (LstInventoryLocation != null && LstInventoryLocation.Count > 0)
                                        {
                                            CurrentInventoryLocationMasterList = new List<InventoryLocationMain>();
                                            //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.CategoryMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                            //CurrentOptionList = new List<UDFOptionsMain>();

                                            List<ItemMasterDTO> oItemMasterList = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetRecordsOnlyItemsFields(SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                                            bool saveData = true;
                                            foreach (InventoryLocationMain item in LstInventoryLocation)
                                            {
                                                saveData = true;
                                                //ItemMasterDTO objItemMasterDTO = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetRecordByItemNumber(item.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                                                ItemMasterDTO objItemMasterDTO = oItemMasterList.Where(x => x.ItemNumber == item.ItemNumber).FirstOrDefault();
                                                InventoryLocationMain objDTO = new InventoryLocationMain();
                                                objDTO.ID = item.ID;
                                                objDTO.ItemNumber = item.ItemNumber;
                                                objDTO.ItemGUID = objItemMasterDTO == null ? Guid.Empty : objItemMasterDTO.GUID;
                                                objDTO.BinNumber = item.BinNumber;
                                                objDTO.Received = DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy");
                                                objDTO.consignedquantity = item.consignedquantity;
                                                objDTO.customerownedquantity = item.customerownedquantity;


                                                if (objItemMasterDTO != null && !objItemMasterDTO.Consignment)
                                                {
                                                    objDTO.consignedquantity = 0;
                                                }
                                                if (objItemMasterDTO != null && objItemMasterDTO.Consignment)
                                                {
                                                    objDTO.customerownedquantity = 0;
                                                }
                                                try
                                                {
                                                    if (!string.IsNullOrEmpty(item.Expiration))
                                                    {
                                                        DateTime expiryDate = DateTime.ParseExact(item.Expiration, SessionHelper.RoomDateFormat, ResourceHelper.CurrentCult);
                                                        objDTO.displayExpiration = item.Expiration;
                                                    }
                                                }
                                                catch
                                                {
                                                    objDTO.displayExpiration = null;
                                                    objDTO.Status = "Fail";
                                                    objDTO.Reason = string.Format(ResImportMasters.DateShouldBeInFormat, ResItemLocationDetails.ExpirationDate, SessionHelper.RoomDateFormat);
                                                    saveData = false;
                                                }
                                                if (objItemMasterDTO != null && objItemMasterDTO.DateCodeTracking == true)
                                                {
                                                    objDTO.Expiration = item.Expiration;
                                                }
                                                objDTO.SerialNumber = (!string.IsNullOrWhiteSpace(item.SerialNumber)) ? item.SerialNumber.Trim() : string.Empty;
                                                objDTO.LotNumber = (!string.IsNullOrWhiteSpace(item.LotNumber)) ? item.LotNumber.Trim() : string.Empty;
                                                objDTO.Cost = item.Cost;
                                                objDTO.IsDeleted = false;
                                                objDTO.IsArchived = false;
                                                objDTO.Created = DateTimeUtility.DateTimeNow;
                                                objDTO.Updated = DateTimeUtility.DateTimeNow;
                                                objDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objDTO.Room = SessionHelper.RoomID;
                                                objDTO.CompanyID = SessionHelper.CompanyID;
                                                objDTO.CreatedBy = SessionHelper.UserID;
                                                objDTO.InsertedFrom = "Import";
                                                objDTO.GUID = Guid.NewGuid();

                                                if (objDTO.ItemGUID.ToString() != Guid.Empty.ToString() && item.BinNumber.Trim() != "" && saveData)
                                                {
                                                    CurrentInventoryLocationMasterList.Add(objDTO);
                                                }
                                                else
                                                {
                                                    CurrentBlankInventoryLocationList.Add(objDTO);
                                                }
                                                if (objItemMasterDTO != null && objItemMasterDTO.Consignment && (item.customerownedquantity ?? 0) > 0)
                                                {
                                                    objDTO = new InventoryLocationMain();
                                                    objDTO.ID = item.ID;
                                                    objDTO.ItemNumber = item.ItemNumber;
                                                    objDTO.ItemGUID = objItemMasterDTO == null ? Guid.NewGuid() : objItemMasterDTO.GUID;
                                                    objDTO.BinNumber = item.BinNumber;
                                                    objDTO.Received = DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy");
                                                    objDTO.customerownedquantity = item.customerownedquantity;
                                                    objDTO.consignedquantity = 0;
                                                    objDTO.displayExpiration = item.Expiration;
                                                    if (objItemMasterDTO != null && objItemMasterDTO.DateCodeTracking == true)
                                                    {
                                                        objDTO.Expiration = item.Expiration;
                                                    }
                                                    objDTO.SerialNumber = (!string.IsNullOrWhiteSpace(item.SerialNumber)) ? item.SerialNumber.Trim() : string.Empty;
                                                    objDTO.LotNumber = (!string.IsNullOrWhiteSpace(item.LotNumber)) ? item.LotNumber : string.Empty;
                                                    objDTO.Cost = item.Cost;
                                                    objDTO.IsDeleted = false;
                                                    objDTO.IsArchived = false;
                                                    objDTO.Created = DateTimeUtility.DateTimeNow;
                                                    objDTO.Updated = DateTimeUtility.DateTimeNow;
                                                    objDTO.LastUpdatedBy = SessionHelper.UserID;
                                                    objDTO.Room = SessionHelper.RoomID;
                                                    objDTO.CompanyID = SessionHelper.CompanyID;
                                                    objDTO.CreatedBy = SessionHelper.UserID;
                                                    objDTO.InsertedFrom = "Import";
                                                    objDTO.GUID = Guid.NewGuid();

                                                    if (objDTO.ItemGUID.ToString() != Guid.Empty.ToString() && item.BinNumber.Trim() != "" && saveData)
                                                    {
                                                        CurrentInventoryLocationMasterList.Add(objDTO);
                                                    }
                                                    else
                                                    {
                                                        CurrentBlankInventoryLocationList.Add(objDTO);
                                                    }
                                                }
                                            }

                                            List<InventoryLocationMain> lstreturn = new List<InventoryLocationMain>();
                                            if (CurrentInventoryLocationMasterList.Count > 0)
                                                lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.BinMaster.ToString(), CurrentInventoryLocationMasterList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId,SessionHelper.EnterPriceID, CurrentOptionList);
                                            if (CurrentBlankInventoryLocationList.Count > 0)
                                            {
                                                foreach (InventoryLocationMain item in CurrentBlankInventoryLocationList.Where(c => c.ItemGUID == Guid.Empty))
                                                {
                                                    item.Status = "Fail";
                                                    item.Reason = ResItemMaster.MsgItemDoesNotExist;
                                                    lstreturn.Add(item);
                                                }
                                                foreach (InventoryLocationMain item in CurrentBlankInventoryLocationList.Where(c => c.ItemGUID != Guid.Empty && (string.IsNullOrEmpty(c.Expiration)) && c.Status == "Fail"))
                                                {
                                                    item.Status = "Fail";
                                                    item.Reason = string.Format(ResImportMasters.DateShouldBeInFormat, ResItemLocationDetails.ExpirationDate, SessionHelper.RoomDateFormat); ;
                                                    lstreturn.Add(item);
                                                }
                                            }

                                            //if (lstreturn.Count == 0)
                                            //{
                                            //    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                            //    status = ResMessage.SaveMessage;
                                            //    ClearCurrentResourceList();
                                            //    Session["importedData"] = null;
                                            //}
                                            //else
                                            //{
                                            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                            status = ResMessage.SaveMessage;
                                            SaveImportDataListSession<InventoryLocationMain>(HasMoreRecords, true, lstreturn);
                                            //Session["importedData"] = lstreturn;
                                            //}
                                            if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                            {
                                                allSuccesfulRecords = false;
                                            }
                                            //CacheHelper<IEnumerable<inventory>>.InvalidateCache();
                                            //(new CategoryMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);

                                        }

                                    }
                                }
                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ItemLocationeVMISetup:
                            importBAL.SaveItemLocation(lst, CurrentOptionList,
                             CurrentInventoryLocationQuantityList, ImportMastersDTO.TableName.ItemLocationeVMISetup,
                             para, HasMoreRecords, IsFirstCall, ref message, ref status, ref allSuccesfulRecords,currentCulture);
                            #region InventoryLocationQuantity Master
                            //if (ImportMastersDTO.TableName.ItemLocationeVMISetup.ToString() == TableName)
                            //{
                            //    //SessionHelper.RoomID, SessionHelper.CompanyID
                            //    List<InventoryLocationQuantityMain> CurrentBlankInventoryLocationQtyList = new List<InventoryLocationQuantityMain>();
                            //    InventoryLocationQuantityMain[] LstInventoryLocation = s.Deserialize<InventoryLocationQuantityMain[]>(para);
                            //    if (LstInventoryLocation != null && LstInventoryLocation.Length > 0)
                            //    {
                            //        ItemMasterDAL objItemMasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                            //        List<BinMasterDTO> lstBinMaster = objItemMasterDAL.GetItemLocationsByItemNumberList(LstInventoryLocation.Select(x => x.ItemNumber).Distinct().ToList(), SessionHelper.RoomID, SessionHelper.CompanyID);

                            //        List<BinForDefaultCheckDTO> lstCompleteBinMaster2 = (from I3 in LstInventoryLocation //.Where(y => !lstBinMaster.Select(x => x.ItemNumber.Trim().ToUpper() + "_" + x.BinNumber.Trim().ToUpper()).Contains(y.ItemNumber.Trim().ToUpper() + "_" + y.BinNumber.Trim().ToUpper()))

                            //                                                             join _I1 in lstBinMaster on new { ItemNumber = I3.ItemNumber.Trim().ToUpper(), BinNumber = I3.BinNumber.Trim().ToUpper() } equals new { ItemNumber = _I1.ItemNumber.Trim().ToUpper(), BinNumber = _I1.BinNumber.Trim().ToUpper() } into _I11
                            //                                                             from I1 in _I11.DefaultIfEmpty()

                            //                                                             where I1 == null
                            //                                                             select new BinForDefaultCheckDTO
                            //                                                             {
                            //                                                                 ItemNumber = I3.ItemNumber,
                            //                                                                 BinNumber = I3.BinNumber,
                            //                                                                 IsDeleted = (I3.IsDeleted == null ? false : I3.IsDeleted.Value),
                            //                                                                 IsDefault = (I3.IsDefault == null ? false : I3.IsDefault.Value),
                            //                                                                 IsStagingLocation = (I3.IsStagingLocation == null ? false : I3.IsStagingLocation.Value)
                            //                                                             }).OrderBy(x => x.ItemNumber).GroupBy(x => new { x.ItemNumber, x.BinNumber, x.IsDeleted, x.IsDefault, x.IsStagingLocation }).Select(x => new BinForDefaultCheckDTO
                            //                                                             {
                            //                                                                 ItemNumber = x.Key.ItemNumber,
                            //                                                                 BinNumber = x.Key.BinNumber,
                            //                                                                 IsDeleted = x.Key.IsDeleted,
                            //                                                                 IsDefault = x.Key.IsDefault,
                            //                                                                 IsStagingLocation = x.Key.IsStagingLocation
                            //                                                             }).ToList();

                            //        var lstNewDefaultBins = (from I in lstCompleteBinMaster2
                            //                                 where I.IsDeleted == false && I.IsDefault == true
                            //                                 group I.BinNumber by I.ItemNumber into g
                            //                                 select new { ItemNumber = g.Key, Count = g.Count() }).ToList();

                            //        List<BinForDefaultCheckDTO> lstCompleteBinMaster1 = (from I1 in lstBinMaster

                            //                                                             join I2 in LstInventoryLocation
                            //                                                             on new { ItemNumber = I1.ItemNumber.Trim().ToUpper(), BinNumber = I1.BinNumber.Trim().ToUpper() } equals new { ItemNumber = I2.ItemNumber.Trim().ToUpper(), BinNumber = I2.BinNumber.Trim().ToUpper() }

                            //                                                 //join I3 in lstNewDefaultBins
                            //                                                 //on new { ItemNumber = I1.ItemNumber.Trim().ToUpper() } equals new { ItemNumber = I3.ItemNumber.Trim().ToUpper() }

                            //                                                             select new BinForDefaultCheckDTO
                            //                                                             {
                            //                                                                 ItemNumber = I1.ItemNumber,
                            //                                                                 BinNumber = I1.BinNumber,
                            //                                                                 IsDeleted = (I2 != null ? (I2.IsDeleted == null ? false : I2.IsDeleted.Value) : (I1.IsDeleted == null ? false : I1.IsDeleted.Value)),
                            //                                                                 IsDefault = (I2 != null ? (I2.IsDefault == null ? false : I2.IsDefault.Value) : (I1.IsDefault == null ? false : I1.IsDefault.Value)),
                            //                                                                 IsStagingLocation = (I2 != null ? (I2.IsStagingLocation == null ? false : I2.IsStagingLocation.Value) : I1.IsStagingLocation)
                            //                                                                 //IsDefault = (I2 != null ? (I2.IsDefault == null ? false : I2.IsDefault.Value) :
                            //                                                                 //                          (I3 != null ? false : (I1.IsDefault == null ? false : I1.IsDefault.Value)))
                            //                                                             }).OrderBy(x => x.ItemNumber).GroupBy(x => new { x.ItemNumber, x.BinNumber, x.IsDeleted, x.IsDefault, x.IsStagingLocation }).Select(x => new BinForDefaultCheckDTO
                            //                                                             {
                            //                                                                 ItemNumber = x.Key.ItemNumber,
                            //                                                                 BinNumber = x.Key.BinNumber,
                            //                                                                 IsDeleted = x.Key.IsDeleted,
                            //                                                                 IsDefault = x.Key.IsDefault,
                            //                                                                 IsStagingLocation = x.Key.IsStagingLocation
                            //                                                             }).ToList();

                            //        List<BinForDefaultCheckDTO> lstCompleteBinMaster3 = (from I4 in lstBinMaster.Where(y => !LstInventoryLocation.Select(x => x.ItemNumber.Trim().ToUpper() + "_" + x.BinNumber.Trim().ToUpper()).Contains(y.ItemNumber.Trim().ToUpper() + "_" + y.BinNumber.Trim().ToUpper()))

                            //                                                             join _I3 in lstNewDefaultBins on new { ItemNumber = I4.ItemNumber.Trim().ToUpper() } equals new { ItemNumber = _I3.ItemNumber.Trim().ToUpper() } into _I31
                            //                                                             from I3 in _I31.DefaultIfEmpty()

                            //                                                             select new BinForDefaultCheckDTO
                            //                                                             {
                            //                                                                 ItemNumber = I4.ItemNumber,
                            //                                                                 BinNumber = I4.BinNumber,
                            //                                                                 IsDeleted = (I4.IsDeleted == null ? false : I4.IsDeleted.Value),
                            //                                                                 //IsDefault = (I4.IsDefault == null ? false : I4.IsDefault.Value)
                            //                                                                 IsDefault = (I3 != null ? false : (I4.IsDefault == null ? false : I4.IsDefault.Value)),
                            //                                                                 IsStagingLocation = I4.IsStagingLocation
                            //                                                             }).OrderBy(x => x.ItemNumber).GroupBy(x => new { x.ItemNumber, x.BinNumber, x.IsDeleted, x.IsDefault, x.IsStagingLocation }).Select(x => new BinForDefaultCheckDTO
                            //                                                             {
                            //                                                                 ItemNumber = x.Key.ItemNumber,
                            //                                                                 BinNumber = x.Key.BinNumber,
                            //                                                                 IsDeleted = x.Key.IsDeleted,
                            //                                                                 IsDefault = x.Key.IsDefault,
                            //                                                                 IsStagingLocation = x.Key.IsStagingLocation
                            //                                                             }).ToList();

                            //        List<BinForDefaultCheckDTO> lstCompleteBinMaster = lstCompleteBinMaster1.Union(lstCompleteBinMaster2).Union(lstCompleteBinMaster3).OrderBy(x => x.ItemNumber).ToList();

                            //        var lstValidItemNumbers = (from I in lstCompleteBinMaster
                            //                                   where I.IsDeleted == false && I.IsDefault == true && I.IsStagingLocation == false
                            //                                   group I.BinNumber by I.ItemNumber into g
                            //                                   select new { ItemNumber = g.Key, Count = g.Count() }).ToList();

                            //        CurrentInventoryLocationQuantityList = new List<InventoryLocationQuantityMain>();
                            //        bool saveData = true;
                            //        foreach (InventoryLocationQuantityMain item in LstInventoryLocation)
                            //        {
                            //            saveData = true;
                            //            InventoryLocationQuantityMain objDTO = new InventoryLocationQuantityMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.ItemNumber = item.ItemNumber;
                            //            objDTO.ItemGUID = item.ItemNumber == "" ? Guid.NewGuid() : GetGUID(ImportMastersDTO.TableName.ItemMaster, item.ItemNumber);
                            //            objDTO.BinNumber = item.BinNumber;
                            //            objDTO.CriticalQuantity = item.CriticalQuantity;
                            //            objDTO.MinimumQuantity = item.MinimumQuantity;
                            //            objDTO.MaximumQuantity = item.MaximumQuantity;
                            //            objDTO.IsDefault = item.IsDefault;
                            //            objDTO.IsStagingLocation = item.IsStagingLocation;

                            //            objDTO.IsEnforceDefaultPullQuantity = item.IsEnforceDefaultPullQuantity;
                            //            objDTO.IsEnforceDefaultReorderQuantity = item.IsEnforceDefaultReorderQuantity;
                            //            objDTO.DefaultPullQuantity = item.DefaultPullQuantity;
                            //            objDTO.DefaultReorderQuantity = item.DefaultReorderQuantity;

                            //            objDTO.SensorId = item.SensorId;
                            //            objDTO.SensorPort = item.SensorPort;
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            if (objDTO.IsStagingLocation == true)
                            //            {
                            //                objDTO.IsDefault = false;
                            //            }

                            //            var ValidItemNumber = lstValidItemNumbers.Where(x => x.ItemNumber == item.ItemNumber).FirstOrDefault();

                            //            if (ValidItemNumber == null)
                            //            {
                            //                ValidItemNumber = (from I in lstBinMaster
                            //                                   where I.IsDeleted == false && I.IsDefault == true && I.IsStagingLocation == false
                            //                                   group I.BinNumber by I.ItemNumber into g
                            //                                   select new { ItemNumber = g.Key, Count = g.Count() }).FirstOrDefault();

                            //                if (ValidItemNumber != null && lstNewDefaultBins.Count == 0 && lstValidItemNumbers.Count == 0 && objDTO.IsStagingLocation == false)
                            //                {
                            //                    BinMasterDTO objBinDto = lstBinMaster.Where(x => x.BinNumber == objDTO.BinNumber && x.ItemNumber == objDTO.ItemNumber &&
                            //                                             x.IsDeleted == false && x.IsDefault == true && x.IsStagingLocation == false).FirstOrDefault();

                            //                    if (objBinDto != null && objDTO.IsDefault == false)
                            //                    {
                            //                        objDTO.IsDefault = true;
                            //                    }
                            //                }
                            //            }

                            //            if (ValidItemNumber == null)
                            //            {
                            //                objDTO.Status = "Fail";
                            //                objDTO.Reason = "ONE_DEFAULT_NEEDED";
                            //                saveData = false;
                            //            }
                            //            else if (ValidItemNumber.Count != 1)
                            //            {
                            //                objDTO.Status = "Fail";
                            //                objDTO.Reason = "MOTE_THEN_ONE_DEFAULT";
                            //                saveData = false;
                            //            }

                            //            // Validate All Location is deleted
                            //            if (lstCompleteBinMaster != null && lstCompleteBinMaster.Count > 0)
                            //            {
                            //                List<BinForDefaultCheckDTO> lstDefDelet = lstCompleteBinMaster.Where(x => x.ItemNumber == objDTO.ItemNumber && x.IsDeleted == true
                            //                                                            //&& x.IsDefault == true 
                            //                                                            && x.IsStagingLocation == false).ToList();
                            //                if (lstDefDelet != null && lstDefDelet.Count == lstCompleteBinMaster.Count)
                            //                {
                            //                    objDTO.Status = "Fail";
                            //                    objDTO.Reason = "MOTE_THEN_ONE_DEFAULT_DELETED";
                            //                    saveData = false;
                            //                }
                            //            }

                            //            if (!(item.IsDeleted ?? false) && saveData)
                            //            {
                            //                if (CheckBinStatus(item.BinNumber))
                            //                    objDTO.IsDeleted = item.IsDeleted;
                            //                else
                            //                {
                            //                    objDTO.Status = "Fail";
                            //                    objDTO.Reason = "Location Already deleted.";
                            //                    saveData = false;
                            //                }
                            //            }
                            //            else if (saveData)
                            //            {
                            //                BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                            //                //BinMasterDTO objBin = objBinMasterDAL.GetRecordByItemGuid(item.BinNumber, objDTO.ItemGUID ?? Guid.Empty, SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                            //                BinMasterDTO objBin = objBinMasterDAL.GetBinByLocationNameItemGuid(SessionHelper.RoomID, SessionHelper.CompanyID, false, false, item.BinNumber, objDTO.ItemGUID ?? Guid.Empty).FirstOrDefault();
                            //                if (objBin != null)
                            //                {
                            //                    List<BinMasterDTO> objBinMasterList = objBinMasterDAL.CheckBinInUse_New(SessionHelper.RoomID, SessionHelper.CompanyID, objBin.ID, objDTO.ItemGUID ?? Guid.Empty);
                            //                    foreach (var objBinMaster in objBinMasterList)
                            //                    {
                            //                        if (((objBinMaster.MinimumQuantity ?? 0) + (objBinMaster.MaximumQuantity ?? 0) + (objBinMaster.CriticalQuantity ?? 0) + (objBinMaster.SuggestedOrderQuantity ?? 0) + (objBinMaster.CountQuantity ?? 0) + (objBinMaster.KitMoveInOutQuantity ?? 0)) != 0)
                            //                        {
                            //                            string ErrorMessage = "";
                            //                            if ((objBinMaster.MinimumQuantity ?? 0) > 0)
                            //                            {
                            //                                status = "referencecount";
                            //                                if (string.IsNullOrWhiteSpace(ErrorMessage))
                            //                                {
                            //                                    ErrorMessage = eTurns.DTO.ResBin.RequisitionedQuantity;
                            //                                }
                            //                                else
                            //                                {
                            //                                    ErrorMessage += ", " + eTurns.DTO.ResBin.RequisitionedQuantity;
                            //                                }
                            //                            }
                            //                            if ((objBinMaster.MaximumQuantity ?? 0) > 0)
                            //                            {
                            //                                status = "referencecount";
                            //                                if (string.IsNullOrWhiteSpace(ErrorMessage))
                            //                                {
                            //                                    ErrorMessage = ResItemMaster.RequestedTransferQuantity;
                            //                                }
                            //                                else
                            //                                {
                            //                                    ErrorMessage += ", " + ResItemMaster.RequestedTransferQuantity;
                            //                                }
                            //                            }
                            //                            if ((objBinMaster.CriticalQuantity ?? 0) > 0)
                            //                            {
                            //                                status = "referencecount";
                            //                                if (string.IsNullOrWhiteSpace(ErrorMessage))
                            //                                {
                            //                                    ErrorMessage = eTurns.DTO.ResBin.RequestedQuantity;
                            //                                }
                            //                                else
                            //                                {
                            //                                    ErrorMessage += ", " + eTurns.DTO.ResBin.RequestedQuantity;
                            //                                }

                            //                            }
                            //                            if ((objBinMaster.SuggestedOrderQuantity ?? 0) > 0)
                            //                            {
                            //                                status = "referencecount";
                            //                                if (string.IsNullOrWhiteSpace(ErrorMessage))
                            //                                {
                            //                                    ErrorMessage = ResItemMaster.SuggestedOrderQuantity;
                            //                                }
                            //                                else
                            //                                {
                            //                                    ErrorMessage += ", " + ResItemMaster.SuggestedOrderQuantity;
                            //                                }
                            //                            }
                            //                            if ((objBinMaster.CountQuantity ?? 0) > 0)
                            //                            {
                            //                                status = "referencecount";
                            //                                if (string.IsNullOrWhiteSpace(ErrorMessage))
                            //                                {
                            //                                    ErrorMessage = ResItemMaster.CountQuantity;
                            //                                }
                            //                                else
                            //                                {
                            //                                    ErrorMessage += ", " + ResItemMaster.CountQuantity;
                            //                                }
                            //                            }
                            //                            if ((objBinMaster.KitMoveInOutQuantity ?? 0) > 0)
                            //                            {
                            //                                status = "referencecount";
                            //                                if (string.IsNullOrWhiteSpace(ErrorMessage))
                            //                                {
                            //                                    ErrorMessage = ResItemMaster.KitMoveInOutQuantity;
                            //                                }
                            //                                else
                            //                                {
                            //                                    ErrorMessage += ", " + ResItemMaster.KitMoveInOutQuantity;
                            //                                }
                            //                            }

                            //                            objDTO.Status = "ITEM_LOCATION_IN_USE";
                            //                            objDTO.Reason = ErrorMessage;
                            //                            saveData = false;
                            //                        }
                            //                        else
                            //                        {

                            //                            objDTO.IsDeleted = item.IsDeleted;
                            //                            if (objDTO.IsDeleted == true)
                            //                            {
                            //                                objDTO.IsDefault = false;
                            //                            }
                            //                        }
                            //                    }
                            //                }
                            //                else
                            //                {
                            //                    continue;
                            //                }
                            //                //if (ValidateToDeleteLocation(item.BinNumber, objDTO.ItemGUID ?? Guid.Empty))
                            //                //{
                            //                //    objDTO.IsDeleted = item.IsDeleted;
                            //                //}
                            //                //else
                            //                //{
                            //                //    objDTO.Status = "Fail";
                            //                //    objDTO.Reason = "Location Already in use.";
                            //                //    saveData = false;
                            //                //}
                            //            }

                            //            if (objDTO.ItemGUID.ToString() != Guid.Empty.ToString() && item.BinNumber.Trim() != "" && saveData)
                            //            {
                            //                bool Flag = false;
                            //                var itemval = CurrentInventoryLocationQuantityList.FirstOrDefault(x => x.ItemGUID == objDTO.ItemGUID && x.BinNumber == objDTO.BinNumber && x.IsStagingLocation == objDTO.IsStagingLocation);
                            //                if (itemval != null)
                            //                {
                            //                    if (itemval.IsDefault == false)
                            //                        CurrentInventoryLocationQuantityList.Remove(itemval);
                            //                    else
                            //                        Flag = true;
                            //                }

                            //                if (Flag == false)
                            //                    CurrentInventoryLocationQuantityList.Add(objDTO);

                            //            }
                            //            else
                            //                CurrentBlankInventoryLocationQtyList.Add(objDTO);
                            //        }

                            //        List<InventoryLocationQuantityMain> lstreturn = new List<InventoryLocationQuantityMain>();
                            //        if (CurrentInventoryLocationQuantityList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ItemLocationeVMISetup.ToString(), CurrentInventoryLocationQuantityList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);

                            //        List<Guid> lstItemGuidsLoc = new List<Guid>();
                            //        if (lstreturn != null && lstreturn.Count > 0)
                            //        {
                            //            List<Guid> lstItemGuids = lstreturn.Where(x => (x.Status ?? string.Empty).ToLower() != "fail" && x.ItemGUID.GetValueOrDefault(Guid.Empty) != Guid.Empty).Select(b => b.ItemGUID.GetValueOrDefault(Guid.Empty)).Distinct().ToList();
                            //            lstItemGuidsLoc = lstItemGuids;
                            //            if (lstItemGuids != null && lstItemGuids.Count > 0)
                            //            {
                            //                foreach (Guid itemGUID in lstItemGuids)
                            //                {
                            //                    CartItemDAL objCartItemDAL = new CartItemDAL(SessionHelper.EnterPriseDBName);
                            //                    objCartItemDAL.AutoCartUpdateByCode(itemGUID, SessionHelper.UserID, "Web", "BulkImport >> ItemLocation", SessionUserId);
                            //                }

                            //            }
                            //        }

                            //        if (lstItemGuidsLoc != null && lstItemGuidsLoc.Count() > 0)
                            //        {
                            //            string strItemGUIDs = string.Join(",", lstItemGuidsLoc);
                            //            BinMasterDAL objBinDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                            //            objBinDAL.UpdateDefaultBin(strItemGUIDs, SessionHelper.UserID);
                            //        }

                            //        if (CurrentBlankInventoryLocationQtyList.Count > 0)
                            //        {
                            //            foreach (InventoryLocationQuantityMain item in CurrentBlankInventoryLocationQtyList.Where(l => l.Status == null))
                            //            {
                            //                item.Status = "Fail";
                            //                item.Reason = "Item does not exist.";
                            //                lstreturn.Add(item);
                            //            }
                            //            foreach (InventoryLocationQuantityMain item in CurrentBlankInventoryLocationQtyList.Where(l => l.Status.ToLower() == "fail" && l.Reason.IndexOf("use") >= 0))
                            //            {
                            //                item.Status = "Fail";
                            //                item.Reason = "Location Already in use.";
                            //                lstreturn.Add(item);
                            //            }
                            //            foreach (InventoryLocationQuantityMain item in CurrentBlankInventoryLocationQtyList.Where(l => l.Status.ToLower() == "fail" && l.Reason.IndexOf("deleted") >= 0))
                            //            {
                            //                item.Status = "Fail";
                            //                item.Reason = "Location Already deleted.";
                            //                lstreturn.Add(item);
                            //            }
                            //            foreach (InventoryLocationQuantityMain item in CurrentBlankInventoryLocationQtyList.Where(l => l.Status.ToLower() == "fail" && l.Reason == "ONE_DEFAULT_NEEDED"))
                            //            {
                            //                item.Status = "Fail";
                            //                item.Reason = "Item must have one default location.";
                            //                lstreturn.Add(item);
                            //            }
                            //            foreach (InventoryLocationQuantityMain item in CurrentBlankInventoryLocationQtyList.Where(l => l.Status.ToLower() == "fail" && l.Reason == "MOTE_THEN_ONE_DEFAULT"))
                            //            {
                            //                item.Status = "Fail";
                            //                item.Reason = "Item can not have more than one default location.";
                            //                lstreturn.Add(item);
                            //            }
                            //            foreach (InventoryLocationQuantityMain item in CurrentBlankInventoryLocationQtyList.Where(l => l.Status.ToLower() == "fail" && l.Reason == "MOTE_THEN_ONE_DEFAULT_DELETED"))
                            //            {
                            //                item.Status = "Fail";
                            //                item.Reason = "Item must have one location.";
                            //                lstreturn.Add(item);
                            //            }
                            //            foreach (InventoryLocationQuantityMain item in CurrentBlankInventoryLocationQtyList.Where(l => l.Status.ToLower() == "item_location_in_use"))
                            //            {
                            //                item.Status = "Fail";
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        //if (lstreturn.Count == 0)
                            //        //{
                            //        //    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //        //    status = ResMessage.SaveMessage;
                            //        //    ClearCurrentResourceList();
                            //        //    Session["importedData"] = null;
                            //        //}
                            //        //else
                            //        //{
                            //        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //        status = ResMessage.SaveMessage;

                            //        SaveImportDataListSession<InventoryLocationQuantityMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //        //Session["importedData"] = lstreturn;

                            //        //}
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //        //CacheHelper<IEnumerable<inventory>>.InvalidateCache();
                            //        //(new CategoryMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);

                            //    }

                            //}

                            #endregion
                            break;
                        case ImportMastersDTO.TableName.CategoryMaster:

                            importBAL.SaveCategoryMaster(lst, CurrentOptionList,
                         CurrentCategoryList, ImportMastersDTO.TableName.CategoryMaster, para, HasMoreRecords,
                        IsFirstCall, ref message, ref status, ref allSuccesfulRecords, currentCulture);

                            #region Category Master
                            //else if (ImportMastersDTO.TableName.CategoryMaster.ToString() == TableName)
                            //{

                            //    List<CategoryMasterMain> CurrentBlankCategoryList = new List<CategoryMasterMain>();
                            //    CategoryMasterMain[] LstCategoryMaster = s.Deserialize<CategoryMasterMain[]>(para);
                            //    if (LstCategoryMaster != null && LstCategoryMaster.Length > 0)
                            //    {
                            //        CurrentCategoryList = new List<CategoryMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.CategoryMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.CategoryMaster.ToString());
                            //        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                            //        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetAllRecordsNew(SessionHelper.CompanyID, "CategoryMaster", SessionHelper.RoomID);
                            //        CurrentOptionList = new List<UDFOptionsMain>();

                            //        foreach (CategoryMasterMain item in LstCategoryMaster)
                            //        {
                            //            CategoryMasterMain objDTO = new CategoryMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.Category = item.Category;
                            //            objDTO.UDF1 = item.UDF1;
                            //            objDTO.UDF2 = item.UDF2;
                            //            objDTO.UDF3 = item.UDF3;
                            //            objDTO.UDF4 = item.UDF4;
                            //            objDTO.UDF5 = item.UDF5;
                            //            objDTO.UDF6 = item.UDF6;
                            //            objDTO.UDF7 = item.UDF7;
                            //            objDTO.UDF8 = item.UDF8;
                            //            objDTO.UDF9 = item.UDF9;
                            //            objDTO.UDF10 = item.UDF10;
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";
                            //            item.CategoryColor = "";

                            //            /*/////CODE FOR CHECK UDF IS REQUIRED///////*/
                            //            string errorMsg = string.Empty;
                            //            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg);
                            //            if (!string.IsNullOrWhiteSpace(errorMsg))
                            //            {
                            //                item.Status = "Fail";
                            //                if (!string.IsNullOrEmpty(item.Reason))
                            //                    item.Reason += errorMsg;
                            //                else
                            //                    item.Reason = errorMsg;


                            //            }
                            //            /*/////CODE FOR CHECK UDF IS REQUIRED///////*/

                            //            if (item.Category.Trim() != "" && string.IsNullOrWhiteSpace(item.Reason))
                            //            {
                            //                CurrentCategoryList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportCategoryColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportCategoryColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportCategoryColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportCategoryColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportCategoryColumn.UDF5.ToString());
                            //                //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportCategoryColumn.UDF6.ToString());

                            //            }
                            //            else
                            //                CurrentBlankCategoryList.Add(item);
                            //        }

                            //        List<CategoryMasterMain> lstreturn = new List<CategoryMasterMain>();
                            //        if (CurrentCategoryList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.CategoryMaster.ToString(), CurrentCategoryList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankCategoryList.Count > 0)
                            //        {
                            //            foreach (CategoryMasterMain item in CurrentBlankCategoryList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<CategoryMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //        //CacheHelper<IEnumerable<CategoryMasterDTO>>.InvalidateCache();
                            //        //(new CategoryMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);

                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.CustomerMaster:
                            importBAL.SaveCustomerMaster(lst, CurrentOptionList, CurrentCustomerList
                                , ImportMastersDTO.TableName.CustomerMaster, para, HasMoreRecords, IsFirstCall,
                                ref message, ref status, ref allSuccesfulRecords);
                            #region Customer Master
                            ////else if (ImportMastersDTO.TableName.CustomerMaster.ToString() == TableName)
                            //{

                            //    List<CustomerMasterMain> CurrentBlankCustomerList = new List<CustomerMasterMain>();
                            //    CustomerMasterMain[] LstCustomerMaster = s.Deserialize<CustomerMasterMain[]>(para);
                            //    if (LstCustomerMaster != null && LstCustomerMaster.Length > 0)
                            //    {
                            //        CurrentCustomerList = new List<CustomerMasterMain>();
                            //        //  lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.CustomerMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.CustomerMaster.ToString());
                            //        CurrentOptionList = new List<UDFOptionsMain>();


                            //        foreach (CustomerMasterMain item in LstCustomerMaster)
                            //        {
                            //            CustomerMasterMain objDTO = new CustomerMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.Customer = item.Customer;
                            //            objDTO.Account = item.Account;
                            //            objDTO.Contact = item.Contact;
                            //            objDTO.Address = item.Address;
                            //            objDTO.City = item.City;
                            //            objDTO.State = item.State;
                            //            objDTO.ZipCode = item.ZipCode;
                            //            objDTO.Country = item.Country;
                            //            objDTO.Phone = item.Phone;
                            //            objDTO.Email = item.Email;
                            //            objDTO.UDF1 = item.UDF1;
                            //            objDTO.UDF2 = item.UDF2;
                            //            objDTO.UDF3 = item.UDF3;
                            //            objDTO.UDF4 = item.UDF4;
                            //            objDTO.UDF5 = item.UDF5;
                            //            objDTO.UDF6 = item.UDF6;
                            //            objDTO.UDF7 = item.UDF7;
                            //            objDTO.UDF8 = item.UDF8;
                            //            objDTO.UDF9 = item.UDF9;
                            //            objDTO.UDF10 = item.UDF10;
                            //            objDTO.Remarks = item.Remarks;
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;

                            //            //MailAddress m = new MailAddress(item.Email); 

                            //            if (item.Customer.Trim() != "" && item.Account.Trim() != "" && IsValidEmail(item.Email))
                            //            {
                            //                CurrentCustomerList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportCustomerColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportCustomerColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportCustomerColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportCustomerColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportCustomerColumn.UDF5.ToString());
                            //                // CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportCustomerColumn.UDF6.ToString());

                            //            }
                            //            else
                            //                CurrentBlankCustomerList.Add(objDTO);
                            //        }

                            //        List<CustomerMasterMain> lstreturn = new List<CustomerMasterMain>();
                            //        if (CurrentCustomerList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.CustomerMaster.ToString(), CurrentCustomerList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankCustomerList.Count > 0)
                            //        {
                            //            foreach (CustomerMasterMain item in CurrentBlankCustomerList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<CategoryMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //        //CacheHelper<IEnumerable<CustomerMasterDTO>>.InvalidateCache();
                            //        //(new CustomerMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false);
                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.FreightTypeMaster:
                            #region Freight Type Master
                            //else if (ImportMastersDTO.TableName.FreightTypeMaster.ToString() == TableName)
                            {
                                List<FreightTypeMasterMain> CurrentBlankFreightTypeList = new List<FreightTypeMasterMain>();
                                FreightTypeMasterMain[] LstFreightTypeMaster = s.Deserialize<FreightTypeMasterMain[]>(para);
                                if (LstFreightTypeMaster != null && LstFreightTypeMaster.Length > 0)
                                {
                                    CurrentFreightType = new List<FreightTypeMasterMain>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.FreightTypeMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.FreightTypeMaster.ToString());
                                    CurrentOptionList = new List<UDFOptionsMain>();

                                    foreach (FreightTypeMasterMain item in LstFreightTypeMaster)
                                    {
                                        FreightTypeMasterMain objDTO = new FreightTypeMasterMain();
                                        objDTO.ID = item.ID;
                                        objDTO.FreightType = item.FreightType;
                                        objDTO.UDF1 = item.UDF1;
                                        objDTO.UDF2 = item.UDF2;
                                        objDTO.UDF3 = item.UDF3;
                                        objDTO.UDF4 = item.UDF4;
                                        objDTO.UDF5 = item.UDF5;
                                        objDTO.UDF6 = item.UDF6;
                                        objDTO.UDF7 = item.UDF7;
                                        objDTO.UDF8 = item.UDF8;
                                        objDTO.UDF9 = item.UDF9;
                                        objDTO.UDF10 = item.UDF10;
                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();

                                        if (item.FreightType.Trim() != "")
                                        {
                                            CurrentFreightType.Add(objDTO);

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportFreightTypeColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportFreightTypeColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportFreightTypeColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportFreightTypeColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportFreightTypeColumn.UDF5.ToString());
                                            // CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportFreightTypeColumn.UDF6.ToString());

                                        }
                                        else
                                            CurrentBlankFreightTypeList.Add(objDTO);
                                    }

                                    List<FreightTypeMasterMain> lstreturn = new List<FreightTypeMasterMain>();
                                    if (CurrentFreightType.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.FreightTypeMaster.ToString(), CurrentFreightType, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    if (CurrentBlankFreightTypeList.Count > 0)
                                    {
                                        foreach (FreightTypeMasterMain item in CurrentBlankFreightTypeList)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }
                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<FreightTypeMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                    //CacheHelper<IEnumerable<FreightTypeMasterDTO>>.InvalidateCache();
                                    //(new FreightTypeMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false);
                                }
                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.GLAccountMaster:

                            importBAL.SaveGLAccountMaster(lst, CurrentOptionList,
                                CurrentGLAccountList, ImportMastersDTO.TableName.GLAccountMaster, para, HasMoreRecords,
                                IsFirstCall, ref message, ref status, ref allSuccesfulRecords);

                            #region G/L Account Master
                            //else if (ImportMastersDTO.TableName.GLAccountMaster.ToString() == TableName)
                            //{

                            //    List<GLAccountMasterMain> CurrentBlankGLAccountList = new List<GLAccountMasterMain>();
                            //    GLAccountMasterMain[] LstGLAccountMaster = s.Deserialize<GLAccountMasterMain[]>(para);
                            //    if (LstGLAccountMaster != null && LstGLAccountMaster.Length > 0)
                            //    {
                            //        CurrentGLAccountList = new List<GLAccountMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.GLAccountMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.GLAccountMaster.ToString());

                            //        CurrentOptionList = new List<UDFOptionsMain>();

                            //        foreach (GLAccountMasterMain item in LstGLAccountMaster)
                            //        {
                            //            GLAccountMasterMain objDTO = new GLAccountMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.GLAccount = (item.GLAccount == null) ? null : (item.GLAccount.Length > 128 ? item.GLAccount.Substring(0, 128) : item.GLAccount);
                            //            objDTO.Description = (item.Description == null) ? null : (item.Description.Length > 1024 ? item.Description.Substring(0, 1024) : item.Description);
                            //            objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                            //            objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                            //            objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                            //            objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                            //            objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                            //            objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                            //            objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                            //            objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                            //            objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                            //            objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();



                            //            if (item.GLAccount.Trim() != "")
                            //            {
                            //                CurrentGLAccountList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportGLAccountColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportGLAccountColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportGLAccountColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportGLAccountColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportGLAccountColumn.UDF5.ToString());
                            //                // CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportGLAccountColumn.UDF6.ToString());

                            //            }
                            //            else
                            //                CurrentBlankGLAccountList.Add(objDTO);
                            //        }

                            //        List<GLAccountMasterMain> lstreturn = new List<GLAccountMasterMain>();
                            //        if (CurrentGLAccountList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.GLAccountMaster.ToString(), CurrentGLAccountList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankGLAccountList.Count > 0)
                            //        {
                            //            foreach (GLAccountMasterMain item in CurrentBlankGLAccountList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<GLAccountMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //        //CacheHelper<IEnumerable<GLAccountMasterDTO>>.InvalidateCache();
                            //        //(new GLAccountMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);
                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.GXPRConsigmentJobMaster:
                            #region GXPR Consigned Master
                            //else if (ImportMastersDTO.TableName.GXPRConsigmentJobMaster.ToString() == TableName)
                            {

                                List<GXPRConsignedMasterMain> CurrentBlankGXPRConsignedList = new List<GXPRConsignedMasterMain>();
                                GXPRConsignedMasterMain[] LstGXPRConsignedMaster = s.Deserialize<GXPRConsignedMasterMain[]>(para);
                                if (LstGXPRConsignedMaster != null && LstGXPRConsignedMaster.Length > 0)
                                {
                                    CurrentGXPRConsignedList = new List<GXPRConsignedMasterMain>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.GXPRConsigmentJobMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.GXPRConsigmentJobMaster.ToString());

                                    CurrentOptionList = new List<UDFOptionsMain>();

                                    foreach (GXPRConsignedMasterMain item in LstGXPRConsignedMaster)
                                    {
                                        GXPRConsignedMasterMain objDTO = new GXPRConsignedMasterMain();
                                        objDTO.ID = item.ID;
                                        objDTO.GXPRConsigmentJob = (item.GXPRConsigmentJob == null) ? null : (item.GXPRConsigmentJob.Length > 128 ? item.GXPRConsigmentJob.Substring(0, 128) : item.GXPRConsigmentJob);
                                        objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                                        objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                                        objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                                        objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                                        objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                                        objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                                        objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                                        objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                                        objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                                        objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);
                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();



                                        if (item.GXPRConsigmentJob.Trim() != "")
                                        {
                                            CurrentGXPRConsignedList.Add(objDTO);

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportGXPRConsignedColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportGXPRConsignedColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportGXPRConsignedColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportGXPRConsignedColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportGXPRConsignedColumn.UDF5.ToString());
                                            // CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportGXPRConsignedColumn.UDF6.ToString());

                                        }
                                        else
                                            CurrentBlankGXPRConsignedList.Add(objDTO);
                                    }

                                    List<GXPRConsignedMasterMain> lstreturn = new List<GXPRConsignedMasterMain>();
                                    if (CurrentGXPRConsignedList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.GXPRConsigmentJobMaster.ToString(), CurrentGXPRConsignedList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    if (CurrentBlankGXPRConsignedList.Count > 0)
                                    {
                                        foreach (GXPRConsignedMasterMain item in CurrentBlankGXPRConsignedList)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<GXPRConsignedMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    //if (CurrentGXPRConsignedList.Count() != lstreturn.Where(l => l.Status.ToLower() == "success").Count())
                                    //{
                                    //    allSuccesfulRecords = false;
                                    //}
                                    CacheHelper<IEnumerable<GXPRConsigmentJobMasterDTO>>.InvalidateCache();
                                    (new GXPRConsignedJobMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false);
                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.JobTypeMaster:
                            #region Job Type Master
                            //else if (ImportMastersDTO.TableName.JobTypeMaster.ToString() == TableName)
                            {

                                List<JobTypeMasterMain> CurrentBlankJobTypeList = new List<JobTypeMasterMain>();
                                JobTypeMasterMain[] LstJobTypeMaster = s.Deserialize<JobTypeMasterMain[]>(para);
                                if (LstJobTypeMaster != null && LstJobTypeMaster.Length > 0)
                                {
                                    CurrentJobTypeList = new List<JobTypeMasterMain>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.JobTypeMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.JobTypeMaster.ToString());

                                    CurrentOptionList = new List<UDFOptionsMain>();

                                    foreach (JobTypeMasterMain item in LstJobTypeMaster)
                                    {
                                        JobTypeMasterMain objDTO = new JobTypeMasterMain();
                                        objDTO.ID = item.ID;
                                        objDTO.JobType = (item.JobType == null) ? null : (item.JobType.Length > 128 ? item.JobType.Substring(0, 128) : item.JobType);
                                        objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                                        objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                                        objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                                        objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                                        objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                                        objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                                        objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                                        objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                                        objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                                        objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);
                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();



                                        if (item.JobType.Trim() != "")
                                        {
                                            CurrentJobTypeList.Add(objDTO);

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportJobTypeColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportJobTypeColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportJobTypeColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportJobTypeColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportJobTypeColumn.UDF5.ToString());
                                            // CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportJobTypeColumn.UDF6.ToString());

                                        }
                                        else
                                            CurrentBlankJobTypeList.Add(objDTO);
                                    }

                                    List<JobTypeMasterMain> lstreturn = new List<JobTypeMasterMain>();
                                    if (CurrentJobTypeList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.JobTypeMaster.ToString(), CurrentJobTypeList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    if (CurrentBlankJobTypeList.Count > 0)
                                    {
                                        foreach (JobTypeMasterMain item in CurrentBlankJobTypeList)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<JobTypeMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    //if (LstJobTypeMaster.Count() != lstreturn.Where(l => l.Status.ToLower() == "success").Count())
                                    //{
                                    //    allSuccesfulRecords = false;
                                    //}
                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ShipViaMaster:
                            importBAL.SaveShipViaMaster(lst, CurrentOptionList,
                                CurrentShipViaList, ImportMastersDTO.TableName.ShipViaMaster, para, HasMoreRecords,
                                IsFirstCall, ref message, ref status, ref allSuccesfulRecords, currentCulture);
                            #region Ship Via Master
                            //else if (ImportMastersDTO.TableName.ShipViaMaster.ToString() == TableName)
                            //{

                            //    List<ShipViaMasterMain> CurrentBlankShipViaList = new List<ShipViaMasterMain>();
                            //    ShipViaMasterMain[] LstShipViaMaster = s.Deserialize<ShipViaMasterMain[]>(para);
                            //    if (LstShipViaMaster != null && LstShipViaMaster.Length > 0)
                            //    {
                            //        CurrentShipViaList = new List<ShipViaMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ShipViaMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ShipViaMaster.ToString());

                            //        //ShipVias
                            //        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                            //        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetAllRecordsNew(SessionHelper.CompanyID, "ShipVias", SessionHelper.RoomID);
                            //        CurrentOptionList = new List<UDFOptionsMain>();

                            //        foreach (ShipViaMasterMain item in LstShipViaMaster)
                            //        {
                            //            ShipViaMasterMain objDTO = new ShipViaMasterMain();
                            //            bool saveShip = true;

                            //            objDTO.ID = item.ID;
                            //            string errorMsg = string.Empty;
                            //            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg);
                            //            if (!string.IsNullOrWhiteSpace(errorMsg))
                            //            {
                            //                objDTO.Status = "Fail";
                            //                if (!string.IsNullOrEmpty(item.Reason))
                            //                    objDTO.Reason += errorMsg;
                            //                else
                            //                    objDTO.Reason = errorMsg;
                            //                saveShip = false;
                            //                item.Status = objDTO.Status;
                            //                item.Reason = objDTO.Reason;
                            //                objDTO = item;

                            //            }
                            //            objDTO.ShipVia = (item.ShipVia == null) ? null : (item.ShipVia.Length > 128 ? item.ShipVia.Substring(0, 128) : item.ShipVia);
                            //            objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                            //            objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                            //            objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                            //            objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                            //            objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                            //            objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                            //            objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                            //            objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                            //            objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                            //            objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";


                            //            if (item.ShipVia.Trim() != "" && saveShip == true)
                            //            {
                            //                CurrentShipViaList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportShipViaColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportShipViaColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportShipViaColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportShipViaColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportShipViaColumn.UDF5.ToString());
                            //                // CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportShipViaColumn.UDF6.ToString());

                            //            }
                            //            else
                            //                CurrentBlankShipViaList.Add(objDTO);
                            //        }

                            //        List<ShipViaMasterMain> lstreturn = new List<ShipViaMasterMain>();
                            //        if (CurrentShipViaList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ShipViaMaster.ToString(), CurrentShipViaList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankShipViaList.Count > 0)
                            //        {
                            //            foreach (ShipViaMasterMain item in CurrentBlankShipViaList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<ShipViaMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }

                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.TechnicianMaster:

                            importBAL.SaveTechnicianMaster(lst, CurrentOptionList,
                             CurrentTechnicianList, ImportMastersDTO.TableName.TechnicianMaster, para, HasMoreRecords,
                            IsFirstCall, ref message, ref status, ref allSuccesfulRecords, currentCulture);

                            #region Technician Master
                            ////else if (ImportMastersDTO.TableName.TechnicianMaster.ToString() == TableName)
                            //{

                            //    List<TechnicianMasterMain> CurrentBlankTechnicianList = new List<TechnicianMasterMain>();
                            //    TechnicianMasterMain[] LstTechnicianMaster = s.Deserialize<TechnicianMasterMain[]>(para);
                            //    if (LstTechnicianMaster != null && LstTechnicianMaster.Length > 0)
                            //    {
                            //        CurrentTechnicianList = new List<TechnicianMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.TechnicianMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.TechnicianMaster.ToString());

                            //        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                            //        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetAllRecordsNew(SessionHelper.CompanyID, "Technicians", SessionHelper.RoomID);

                            //        CurrentOptionList = new List<UDFOptionsMain>();

                            //        foreach (TechnicianMasterMain item in LstTechnicianMaster)
                            //        {
                            //            TechnicianMasterMain objDTO = new TechnicianMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.Technician = (item.Technician == null) ? null : (item.Technician.Length > 128 ? item.Technician.Substring(0, 128) : item.Technician);
                            //            objDTO.TechnicianCode = (item.TechnicianCode.Replace(" ", "") == null) ? null : (item.TechnicianCode.Replace(" ", "").Length > 128 ? item.TechnicianCode.Replace(" ", "").Substring(0, 128) : item.TechnicianCode.Replace(" ", ""));

                            //            bool saveTech = true;
                            //            string errorMsg = string.Empty;
                            //            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg);
                            //            if (!string.IsNullOrWhiteSpace(errorMsg))
                            //            {
                            //                objDTO.Status = "Fail";
                            //                if (!string.IsNullOrEmpty(objDTO.Reason))
                            //                    objDTO.Reason += errorMsg;
                            //                else
                            //                    objDTO.Reason = errorMsg;
                            //                saveTech = false;
                            //                item.Status = objDTO.Status;
                            //                item.Reason = errorMsg;
                            //            }


                            //            objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                            //            objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                            //            objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                            //            objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                            //            objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                            //            objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                            //            objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                            //            objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                            //            objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                            //            objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();



                            //            if (item.TechnicianCode.Trim() != "" && saveTech)
                            //            {
                            //                CurrentTechnicianList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportTechnicianColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportTechnicianColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportTechnicianColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportTechnicianColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportTechnicianColumn.UDF5.ToString());
                            //                // CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportTechnicianColumn.UDF6.ToString());

                            //            }
                            //            else
                            //                CurrentBlankTechnicianList.Add(objDTO);
                            //        }

                            //        List<TechnicianMasterMain> lstreturn = new List<TechnicianMasterMain>();
                            //        if (CurrentTechnicianList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.TechnicianMaster.ToString(), CurrentTechnicianList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankTechnicianList.Count > 0)
                            //        {
                            //            foreach (TechnicianMasterMain item in CurrentBlankTechnicianList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<TechnicianMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ManufacturerMaster:
                            importBAL.SaveManufacturerMaster(lst, CurrentOptionList,
                                    CurrentManufacturerList, ImportMastersDTO.TableName.ManufacturerMaster, para, HasMoreRecords,
                                   IsFirstCall, ref message, ref status, ref allSuccesfulRecords,currentCulture);
                            #region Manufacturer Master
                            //else if (ImportMastersDTO.TableName.ManufacturerMaster.ToString() == TableName)
                            //{

                            //    List<ManufacturerMasterMain> CurrentBlankManufacturerList = new List<ManufacturerMasterMain>();
                            //    ManufacturerMasterMain[] LstManufacturerMaster = s.Deserialize<ManufacturerMasterMain[]>(para);
                            //    if (LstManufacturerMaster != null && LstManufacturerMaster.Length > 0)
                            //    {
                            //        CurrentManufacturerList = new List<ManufacturerMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ManufacturerMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ManufacturerMaster.ToString());

                            //        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                            //        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetAllRecordsNew(SessionHelper.CompanyID, "Manufacturers", SessionHelper.RoomID);

                            //        CurrentOptionList = new List<UDFOptionsMain>();

                            //        foreach (ManufacturerMasterMain item in LstManufacturerMaster)
                            //        {
                            //            ManufacturerMasterMain objDTO = new ManufacturerMasterMain();
                            //            objDTO.ID = item.ID;

                            //            bool saveMan = true;
                            //            string errorMsg = string.Empty;
                            //            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg);
                            //            if (!string.IsNullOrWhiteSpace(errorMsg))
                            //            {
                            //                objDTO.Status = "Fail";
                            //                if (!string.IsNullOrEmpty(objDTO.Reason))
                            //                    objDTO.Reason += errorMsg;
                            //                else
                            //                    objDTO.Reason = errorMsg;
                            //                saveMan = false;
                            //                item.Status = objDTO.Status;
                            //                item.Reason = errorMsg;
                            //            }

                            //            objDTO.Manufacturer = (item.Manufacturer == null) ? null : (item.Manufacturer.Length > 128 ? item.Manufacturer.Substring(0, 128) : item.Manufacturer);
                            //            objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                            //            objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                            //            objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                            //            objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                            //            objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                            //            objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                            //            objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                            //            objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                            //            objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                            //            objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;



                            //            if (item.Manufacturer.Trim() != "" && saveMan)
                            //            {
                            //                CurrentManufacturerList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportManufacturerColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportManufacturerColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportManufacturerColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportManufacturerColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportManufacturerColumn.UDF5.ToString());
                            //                // CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportManufacturerColumn.UDF6.ToString());

                            //            }
                            //            else
                            //                CurrentBlankManufacturerList.Add(objDTO);
                            //        }

                            //        List<ManufacturerMasterMain> lstreturn = new List<ManufacturerMasterMain>();
                            //        if (CurrentManufacturerList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ManufacturerMaster.ToString(), CurrentManufacturerList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankManufacturerList.Count > 0)
                            //        {
                            //            foreach (ManufacturerMasterMain item in CurrentBlankManufacturerList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<ManufacturerMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //        //CacheHelper<IEnumerable<ManufacturerMasterDTO>>.InvalidateCache();
                            //        //(new ManufacturerMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);
                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.MeasurementTermMaster:
                            #region MeasurementTerm Master
                            //else if (ImportMastersDTO.TableName.MeasurementTermMaster.ToString() == TableName)
                            {

                                List<MeasurementTermMasterMain> CurrentBlankMeasurementList = new List<MeasurementTermMasterMain>();
                                MeasurementTermMasterMain[] LstManufacturerMaster = s.Deserialize<MeasurementTermMasterMain[]>(para);
                                if (LstManufacturerMaster != null && LstManufacturerMaster.Length > 0)
                                {
                                    CurrentMeasurementTermList = new List<MeasurementTermMasterMain>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ManufacturerMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ManufacturerMaster.ToString());
                                    CurrentOptionList = new List<UDFOptionsMain>();

                                    foreach (MeasurementTermMasterMain item in LstManufacturerMaster)
                                    {
                                        MeasurementTermMasterMain objDTO = new MeasurementTermMasterMain();
                                        objDTO.ID = item.ID;
                                        objDTO.MeasurementTerm = (item.MeasurementTerm == null) ? null : (item.MeasurementTerm.Length > 128 ? item.MeasurementTerm.Substring(0, 128) : item.MeasurementTerm);
                                        objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                                        objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                                        objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                                        objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                                        objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                                        objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                                        objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                                        objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                                        objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                                        objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);
                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();



                                        if (item.MeasurementTerm.Trim() != "")
                                        {
                                            CurrentMeasurementTermList.Add(objDTO);

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportMeasurementTermColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportMeasurementTermColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportMeasurementTermColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportMeasurementTermColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportMeasurementTermColumn.UDF5.ToString());
                                            //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportMeasurementTermColumn.UDF6.ToString());

                                        }
                                        else
                                            CurrentBlankMeasurementList.Add(objDTO);
                                    }

                                    List<MeasurementTermMasterMain> lstreturn = new List<MeasurementTermMasterMain>();
                                    if (CurrentMeasurementTermList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.MeasurementTermMaster.ToString(), CurrentMeasurementTermList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    if (CurrentBlankMeasurementList.Count > 0)
                                    {
                                        foreach (MeasurementTermMasterMain item in CurrentBlankMeasurementList)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<MeasurementTermMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                    CacheHelper<IEnumerable<MeasurementTermMasterDTO>>.InvalidateCache();
                                    (new MeasurementTermDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false);

                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.UnitMaster:
                            #region Units Master
                            //else if (ImportMastersDTO.TableName.UnitMaster.ToString() == TableName)
                            {

                                List<UnitMasterMain> CurrentBlankUnitsList = new List<UnitMasterMain>();
                                UnitMasterMain[] LstUnitMaster = s.Deserialize<UnitMasterMain[]>(para);
                                if (LstUnitMaster != null && LstUnitMaster.Length > 0)
                                {
                                    CurrentUnitList = new List<UnitMasterMain>();
                                    // lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.UnitMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.UnitMaster.ToString());

                                    CurrentOptionList = new List<UDFOptionsMain>();
                                    decimal opthous;
                                    Int64 SerialNo; Int64 Year; Int64 MarkupParts; Int64 MarkupLabour;
                                    foreach (UnitMasterMain item in LstUnitMaster)
                                    {
                                        UnitMasterMain objDTO = new UnitMasterMain();
                                        objDTO.ID = item.ID;
                                        objDTO.Unit = (item.Unit == null) ? null : (item.Unit.Length > 128 ? item.Unit.Substring(0, 128) : item.Unit);
                                        objDTO.Description = (item.Description == null) ? null : (item.Description.Length > 1024 ? item.Description.Substring(0, 1024) : item.Description);
                                        objDTO.Odometer = (item.Odometer == null) ? null : (item.Odometer.Length > 128 ? item.Odometer.Substring(0, 128) : item.Odometer);
                                        objDTO.OdometerUpdate = (item.Odometer == null) ? (DateTime?)null : DateTimeUtility.DateTimeNow;

                                        decimal.TryParse(item.OpHours.ToString(), out opthous);
                                        objDTO.OpHours = (item.OpHours == null) ? (decimal?)null : opthous;
                                        objDTO.OpHoursUpdate = (item.OpHours == null) ? (DateTime?)null : DateTimeUtility.DateTimeNow;

                                        Int64.TryParse(item.SerialNo.ToString(), out SerialNo);
                                        objDTO.SerialNo = (item.SerialNo == null) ? (Int64?)null : SerialNo;

                                        Int64.TryParse(item.Year.ToString(), out Year);
                                        objDTO.Year = (item.Year == null) ? (Int64?)null : Year;
                                        objDTO.Make = (item.Make == null) ? null : (item.Make.Length > 128 ? item.Make.Substring(0, 128) : item.Make);
                                        objDTO.Model = (item.Model == null) ? null : (item.Model.Length > 128 ? item.Model.Substring(0, 128) : item.Model);
                                        objDTO.Plate = (item.Plate == null) ? null : (item.Plate.Length > 128 ? item.Plate.Substring(0, 128) : item.Plate);
                                        objDTO.EngineModel = (item.EngineModel == null) ? null : (item.EngineModel.Length > 128 ? item.EngineModel.Substring(0, 128) : item.EngineModel);
                                        objDTO.EngineSerialNo = (item.EngineSerialNo == null) ? null : (item.EngineSerialNo.Length > 128 ? item.EngineSerialNo.Substring(0, 128) : item.EngineSerialNo);

                                        Int64.TryParse(item.MarkupParts.ToString(), out MarkupParts);
                                        objDTO.MarkupParts = (item.MarkupParts == null) ? (Int64?)null : MarkupParts;

                                        Int64.TryParse(item.MarkupLabour.ToString(), out MarkupLabour);
                                        objDTO.MarkupLabour = (item.MarkupLabour == null) ? (Int64?)null : MarkupLabour;

                                        objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                                        objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                                        objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                                        objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                                        objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                                        objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                                        objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                                        objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                                        objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                                        objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);
                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();
                                        objDTO.AddedFrom = "Web";
                                        objDTO.EditedFrom = "Web";
                                        objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                        objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;




                                        if (item.Unit.Trim() != "")
                                        {
                                            CurrentUnitList.Add(objDTO);

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportUnitsColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportUnitsColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportUnitsColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportUnitsColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportUnitsColumn.UDF5.ToString());
                                            //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportUnitsColumn.UDF6.ToString());

                                        }
                                        else
                                            CurrentBlankUnitsList.Add(objDTO);
                                    }

                                    List<UnitMasterMain> lstreturn = new List<UnitMasterMain>();
                                    if (CurrentUnitList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.UnitMaster.ToString(), CurrentUnitList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    if (CurrentBlankUnitsList.Count > 0)
                                    {
                                        foreach (UnitMasterMain item in CurrentBlankUnitsList)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<UnitMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.SupplierMaster:
                            importBAL.SaveSupplierMaster(lst, CurrentOptionList, CurrentSupplierList
                                , ImportMastersDTO.TableName.SupplierMaster, para, HasMoreRecords, IsFirstCall,
                                isImgZipAvail, ref message, ref status, ref savedOnlyitemIds, ref allSuccesfulRecords);
                            #region Supplier Master
                            ////else if (ImportMastersDTO.TableName.SupplierMaster.ToString() == TableName)
                            //{

                            //    List<SupplierMasterMain> CurrentBlankSupplierList = new List<SupplierMasterMain>();
                            //    SupplierMasterMain[] LstSupplierMaster = s.Deserialize<SupplierMasterMain[]>(para);
                            //    if (LstSupplierMaster != null && LstSupplierMaster.Length > 0)
                            //    {
                            //        CurrentSupplierList = new List<SupplierMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.SupplierMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.SupplierMaster.ToString());

                            //        CurrentOptionList = new List<UDFOptionsMain>();

                            //        //bool IsEmailPOInBody = false; bool IsEmailPOInPDF = false; bool IsEmailPOInCSV = false; bool IsEmailPOInX12 = false;
                            //        foreach (SupplierMasterMain item in LstSupplierMaster)
                            //        {
                            //            SupplierMasterMain objDTO = new SupplierMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.SupplierName = (item.SupplierName == null) ? null : (item.SupplierName.Length > 255 ? item.SupplierName.Substring(0, 255) : item.SupplierName);
                            //            objDTO.SupplierColor = (item.SupplierColor == null) ? null : (item.SupplierColor.Length > 255 ? item.SupplierColor.Substring(0, 255) : item.SupplierColor);
                            //            objDTO.Description = (item.Description == null) ? null : (item.Description.Length > 1024 ? item.Description.Substring(0, 1024) : item.Description);
                            //            objDTO.BranchNumber = (item.BranchNumber == null) ? null : (item.BranchNumber.Length > 255 ? item.BranchNumber.Substring(0, 255) : item.BranchNumber);
                            //            objDTO.MaximumOrderSize = item.MaximumOrderSize;
                            //            //objDTO.AccountNo = (item.AccountNo == null) ? null : (item.AccountNo.Length > 64 ? item.AccountNo.Substring(0, 64) : item.AccountNo);
                            //            //objDTO.ReceiverID = (item.ReceiverID == null) ? null : (item.ReceiverID.Length > 64 ? item.ReceiverID.Substring(0, 64) : item.ReceiverID);
                            //            objDTO.Address = (item.Address == null) ? null : (item.Address.Length > 1027 ? item.Address.Substring(0, 1027) : item.Address);
                            //            objDTO.City = (item.City == null) ? null : (item.City.Length > 127 ? item.City.Substring(0, 127) : item.City);
                            //            objDTO.State = (item.State == null) ? null : (item.State.Length > 255 ? item.State.Substring(0, 255) : item.State);
                            //            objDTO.ZipCode = (item.ZipCode == null) ? null : (item.ZipCode.Length > 20 ? item.ZipCode.Substring(0, 20) : item.ZipCode);
                            //            objDTO.Country = (item.Country == null) ? null : (item.Country.Length > 127 ? item.Country.Substring(0, 127) : item.Country);
                            //            objDTO.Contact = (item.Contact == null) ? null : (item.Contact.Length > 127 ? item.Contact.Substring(0, 127) : item.Contact);
                            //            objDTO.Phone = (item.Phone == null) ? null : (item.Phone.Length > 20 ? item.Phone.Substring(0, 20) : item.Phone);
                            //            objDTO.Fax = (item.Fax == null) ? null : (item.Fax.Length > 20 ? item.Fax.Substring(0, 20) : item.Fax);
                            //            //objDTO.Email = (item.Email == null) ? null : (item.Email.Length > 255 ? item.Email.Substring(0, 255) : item.Email);

                            //            objDTO.IsSendtoVendor = item.IsSendtoVendor;
                            //            objDTO.IsVendorReturnAsn = item.IsVendorReturnAsn;
                            //            objDTO.IsSupplierReceivesKitComponents = item.IsSupplierReceivesKitComponents;

                            //            objDTO.IsEmailPOInBody = item.IsEmailPOInBody;
                            //            objDTO.IsEmailPOInPDF = item.IsEmailPOInPDF;
                            //            objDTO.IsEmailPOInCSV = item.IsEmailPOInCSV;
                            //            objDTO.IsEmailPOInX12 = item.IsEmailPOInX12;

                            //            objDTO.OrderNumberTypeBlank = item.OrderNumberTypeBlank;
                            //            objDTO.OrderNumberTypeFixed = item.OrderNumberTypeFixed;
                            //            objDTO.OrderNumberTypeBlanketOrderNumber = item.OrderNumberTypeBlanketOrderNumber;
                            //            objDTO.OrderNumberTypeIncrementingOrderNumber = item.OrderNumberTypeIncrementingOrderNumber;
                            //            objDTO.OrderNumberTypeIncrementingbyDay = item.OrderNumberTypeIncrementingbyDay;
                            //            objDTO.OrderNumberTypeDateIncrementing = item.OrderNumberTypeDateIncrementing;
                            //            objDTO.OrderNumberTypeDate = item.OrderNumberTypeDate;

                            //            if (objDTO.OrderNumberTypeBlank)
                            //                objDTO.POAutoSequence = (int)CommonUtility.POAutoSequence.OrderNumberTypeBlank;
                            //            else if (objDTO.OrderNumberTypeFixed)
                            //                objDTO.POAutoSequence = (int)CommonUtility.POAutoSequence.OrderNumberTypeFixed;
                            //            else if (objDTO.OrderNumberTypeBlanketOrderNumber)
                            //                objDTO.POAutoSequence = (int)CommonUtility.POAutoSequence.OrderNumberTypeBlanketOrderNumber;
                            //            else if (objDTO.OrderNumberTypeIncrementingOrderNumber)
                            //                objDTO.POAutoSequence = (int)CommonUtility.POAutoSequence.OrderNumberTypeIncrementingOrderNumber;
                            //            else if (objDTO.OrderNumberTypeIncrementingbyDay)
                            //                objDTO.POAutoSequence = (int)CommonUtility.POAutoSequence.OrderNumberTypeIncrementingbyDay;
                            //            else if (objDTO.OrderNumberTypeDateIncrementing)
                            //                objDTO.POAutoSequence = (int)CommonUtility.POAutoSequence.OrderNumberTypeDateIncrementing;
                            //            else if (objDTO.OrderNumberTypeDate)
                            //                objDTO.POAutoSequence = (int)CommonUtility.POAutoSequence.OrderNumberTypeDate;
                            //            else
                            //                objDTO.POAutoSequence = null;

                            //            objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                            //            objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                            //            objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                            //            objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                            //            objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                            //            objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                            //            objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                            //            objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                            //            objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                            //            objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);

                            //            objDTO.AccountNumber = (item.AccountNumber == null) ? null : (item.AccountNumber.Length > 255 ? item.AccountNumber.Substring(0, 255) : item.AccountNumber);
                            //            objDTO.AccountName = (item.AccountName == null) ? null : (item.AccountName.Length > 255 ? item.AccountName.Substring(0, 255) : item.AccountName);
                            //            objDTO.AccountAddress = (item.AccountAddress == null) ? null : (item.AccountAddress.Length > 1027 ? item.AccountAddress.Substring(0, 1027) : item.AccountAddress);
                            //            objDTO.AccountCity = (item.AccountCity == null) ? null : (item.AccountCity.Length > 128 ? item.AccountCity.Substring(0, 128) : item.AccountCity);
                            //            objDTO.AccountState = (item.AccountState == null) ? null : (item.AccountState.Length > 256 ? item.AccountState.Substring(0, 256) : item.AccountState);
                            //            objDTO.AccountZip = (item.AccountZip == null) ? null : (item.AccountZip.Length > 20 ? item.AccountZip.Substring(0, 20) : item.AccountZip);

                            //            objDTO.AccountCountry = (item.AccountCountry == null) ? null : (item.AccountCountry.Length > 127 ? item.AccountCountry.Substring(0, 127) : item.AccountCountry);
                            //            objDTO.AccountShipToID = (item.AccountShipToID == null) ? null : (item.AccountShipToID.Length > 127 ? item.AccountShipToID.Substring(0, 127) : item.AccountShipToID);


                            //            if (item.AccountIsDefault == true)
                            //                objDTO.AccountIsDefault = item.AccountIsDefault;

                            //            objDTO.BlanketPONumber = (item.BlanketPONumber == null) ? null : (item.BlanketPONumber.Length > 255 ? item.BlanketPONumber.Substring(0, 255) : item.BlanketPONumber);
                            //            if (item.IsBlanketDeleted == true)
                            //                objDTO.IsBlanketDeleted = item.IsBlanketDeleted;
                            //            objDTO.StartDate = item.StartDate;
                            //            objDTO.EndDate = item.EndDate;

                            //            objDTO.MaxLimit = item.MaxLimit;
                            //            objDTO.IsNotExceed = item.IsNotExceed;

                            //            objDTO.MaxLimitQty = item.MaxLimitQty;
                            //            objDTO.IsNotExceedQty = item.IsNotExceedQty;

                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;

                            //            //Wi-1195 added PullPurchaseNumberType fields in import of supplier
                            //            objDTO.PullPurchaseNumberFixed = item.PullPurchaseNumberFixed;
                            //            objDTO.PullPurchaseNumberBlanketOrder = item.PullPurchaseNumberBlanketOrder;
                            //            objDTO.PullPurchaseNumberDateIncrementing = item.PullPurchaseNumberDateIncrementing;
                            //            objDTO.PullPurchaseNumberDate = item.PullPurchaseNumberDate;

                            //            if (objDTO.PullPurchaseNumberFixed)
                            //                objDTO.PullPurchaseNumberType = (int)CommonUtility.PullPurchaseNumberType.PullPurchaseNumberFixed;
                            //            else if (objDTO.PullPurchaseNumberBlanketOrder)
                            //                objDTO.PullPurchaseNumberType = (int)CommonUtility.PullPurchaseNumberType.PullPurchaseNumberBlanketOrder;
                            //            else if (objDTO.PullPurchaseNumberDateIncrementing)
                            //                objDTO.PullPurchaseNumberType = (int)CommonUtility.PullPurchaseNumberType.PullPurchaseNumberDateIncrementing;
                            //            else if (objDTO.PullPurchaseNumberDate)
                            //                objDTO.PullPurchaseNumberType = (int)CommonUtility.PullPurchaseNumberType.PullPurchaseNumberDate;
                            //            else
                            //                objDTO.PullPurchaseNumberType = null;

                            //            objDTO.LastPullPurchaseNumberUsed = item.LastPullPurchaseNumberUsed;

                            //            objDTO.SupplierImage = item.SupplierImage;
                            //            objDTO.ImageExternalURL = item.ImageExternalURL;
                            //            objDTO.ImageType = "ExternalImage";
                            //            if (string.IsNullOrWhiteSpace(item.ImageExternalURL) && (!string.IsNullOrEmpty(item.SupplierImage)))
                            //            {
                            //                objDTO.ImageType = "ImagePath";
                            //            }



                            //            if (item.SupplierName.Trim() != "" && item.Contact.Trim() != "" && item.Phone.Trim() != "")
                            //            {
                            //                CurrentSupplierList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportSupplierColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportSupplierColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportSupplierColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportSupplierColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportSupplierColumn.UDF5.ToString());
                            //                //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportSupplierColumn.UDF6.ToString());

                            //            }
                            //            else
                            //            {
                            //                if (string.IsNullOrWhiteSpace(item.SupplierName))
                            //                {
                            //                    objDTO.Reason += string.Format(ResMessage.Required, ResSupplierMaster.SupplierName);
                            //                }

                            //                if (string.IsNullOrWhiteSpace(item.Contact))
                            //                {
                            //                    objDTO.Reason += string.Format(ResMessage.Required, ResSupplierMaster.Contact);
                            //                }

                            //                if (string.IsNullOrWhiteSpace(item.Phone))
                            //                {
                            //                    objDTO.Reason += string.Format(ResMessage.Required, ResSupplierMaster.Phone);
                            //                }

                            //                objDTO.Status = "Fail";
                            //                CurrentBlankSupplierList.Add(objDTO);
                            //            }
                            //        }

                            //        List<SupplierMasterMain> lstreturn = new List<SupplierMasterMain>();
                            //        if (CurrentSupplierList.Count > 0)
                            //            //lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.SupplierMaster.ToString(), CurrentSupplierList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, CurrentOptionList);
                            //            lstreturn = objImport.BulkInsertWithChiled(ImportMastersDTO.TableName.SupplierMaster.ToString(), CurrentSupplierList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, CurrentOptionList, isImgZipAvail);
                            //        if (CurrentBlankSupplierList.Count > 0)
                            //        {
                            //            foreach (SupplierMasterMain item in CurrentBlankSupplierList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {

                            //            /*----------CODE FOR SAVE ID AND IMAGE MAPPING FOR RETURN-------------- */

                            //            List<SupplierMasterMain> distSupplierList = lstreturn.GroupBy(l => l.SupplierName).Select(g => g.First()).ToList();

                            //            savedOnlyitemIds = string.Join(",", distSupplierList.Where(i => i.ID != 0 && (!string.IsNullOrEmpty(i.SupplierImage)) && i.Status != null && i.Status.ToLower() == "success").Select(p => p.ID.ToString() + "#" + p.SupplierImage.ToString()));

                            //            string SupplierNameList = string.Join("@", distSupplierList.Where(i => i.ID == 0 && (!string.IsNullOrEmpty(i.SupplierImage)) && i.Status != null && i.Status.ToLower() == "success").Select(a => a.SupplierName));

                            //            string SupplierColorList = string.Join("@", distSupplierList.Where(i => i.ID == 0 && (!string.IsNullOrEmpty(i.SupplierImage)) && i.Status != null && i.Status.ToLower() == "success").Select(a => a.SupplierColor));

                            //            List<SupplierMasterDTO> supplierList = new SupplierMasterDAL(SessionHelper.EnterPriseDBName).GetRecordByNameAndColor(SupplierNameList, SupplierColorList, SessionHelper.RoomID, SessionHelper.CompanyID);

                            //            foreach (SupplierMasterDTO b in supplierList)
                            //            {
                            //                SupplierMasterMain objSupplierMaster = distSupplierList.Where(i => i.SupplierName == b.SupplierName && i.SupplierColor == b.SupplierColor && (!string.IsNullOrEmpty(i.SupplierImage))).FirstOrDefault();
                            //                if (objSupplierMaster != null)
                            //                {
                            //                    if (string.IsNullOrEmpty(savedOnlyitemIds))
                            //                    {
                            //                        savedOnlyitemIds = b.ID + "#" + objSupplierMaster.SupplierImage.ToString();
                            //                    }
                            //                    else
                            //                    {
                            //                        savedOnlyitemIds += "," + b.ID + "#" + objSupplierMaster.SupplierImage.ToString();
                            //                    }
                            //                }
                            //            }
                            //            /*----------CODE FOR SAVE ID AND IMAGE MAPPING FOR RETURN-------------- */

                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<SupplierMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }

                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ItemMaster:

                            importBAL.SaveItemMaster(lst, CurrentOptionList, lstItemGUID, CurrentItemList
                                , ImportMastersDTO.TableName.ItemMaster, para, HasMoreRecords, IsFirstCall, isImgZipAvail, isLink2ZipAvail
                                , ref message, ref status, ref savedOnlyitemIds, ref savedItemIdsWithLink2
                                , ref savedItemGuids, ref allSuccesfulRecords,currentCulture);

                            #region Item Master
                            //else if (ImportMastersDTO.TableName.ItemMaster.ToString() == TableName)
                            //{

                            //    List<BOMItemMasterMain> CurrentBlankItemList = new List<BOMItemMasterMain>();
                            //    //List<BOMItemMasterMain> CurrentErrorItemList = new List<BOMItemMasterMain>();
                            //    BOMItemMasterMain[] LstItemMaster = s.Deserialize<BOMItemMasterMain[]>(para);

                            //    if (LstItemMaster != null && LstItemMaster.Length > 0)
                            //    {

                            //        CurrentItemList = new List<BOMItemMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ItemMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ItemMaster.ToString());

                            //        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                            //        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetAllRecordsNew(SessionHelper.CompanyID, "ItemMaster", SessionHelper.RoomID);
                            //        CommonDAL objCommonDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
                            //        eTurns.DAL.RoomDAL objRoomDAL = new eTurns.DAL.RoomDAL(SessionHelper.EnterPriseDBName);
                            //        //RoomDTO objRoomDTO = objRoomDAL.GetRoomByIDPlain(SessionHelper.RoomID);
                            //        string columnList = "ID,RoomName,IsAllowOrderCostuom,ReplenishmentType";
                            //        RoomDTO objRoomDTO = objCommonDAL.GetSingleRecord<RoomDTO>(columnList, "Room", "ID = " + SessionHelper.RoomID.ToString() + "", "");

                            //        if (objRoomDTO == null || objRoomDTO.ID <= 0)
                            //        {
                            //            objRoomDTO = new RoomDTO();
                            //        }

                            //        DashboardParameterDTO objDashboardParameterDTO = new DashboardDAL(SessionHelper.EnterPriseDBName).GetDashboardParameters(SessionHelper.RoomID, SessionHelper.CompanyID);

                            //        if (objDashboardParameterDTO == null || objDashboardParameterDTO.ID <= 0)
                            //        {
                            //            objDashboardParameterDTO = new DashboardParameterDTO();
                            //        }

                            //        bool IsAllowOrderCostuomRoom = true;
                            //        if (objRoomDTO.IsAllowOrderCostuom == false)
                            //        {
                            //            IsAllowOrderCostuomRoom = false;
                            //        }
                            //        bool CurrentRoomConsigned = objRoomDAL.checkRoomConsignedOrNotbyRoomId(SessionHelper.RoomID);

                            //        CurrentOptionList = new List<UDFOptionsMain>();
                            //        bool SaveToolList = true;
                            //        List<CostUOMMasterDTO> lstCostUOMMasterDTO = new List<CostUOMMasterDTO>();
                            //        lstCostUOMMasterDTO = new CostUOMMasterDAL(SessionHelper.EnterPriseDBName).GetCostUOMsByRoomID(SessionHelper.RoomID, SessionHelper.CompanyID).ToList();
                            //        List<ItemMasterDTO> lstItemMaster = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetAllItemsWithJoins(SessionHelper.RoomID, SessionHelper.CompanyID, false, false, string.Empty).ToList();
                            //        //bool IsEmailPOInBody = false; bool IsEmailPOInPDF = false; bool IsEmailPOInCSV = false; bool IsEmailPOInX12 = false;
                            //        foreach (BOMItemMasterMain item in LstItemMaster)
                            //        {
                            //            SaveToolList = true;

                            //            BOMItemMasterMain objDTO = new BOMItemMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.ItemNumber = (item.ItemNumber == null) ? null : (item.ItemNumber.Length > 255 ? item.ItemNumber.Substring(0, 255) : item.ItemNumber);
                            //            objDTO.ManufacturerName = item.ManufacturerName;
                            //            //Wi-1505
                            //            if (!string.IsNullOrWhiteSpace(item.ManufacturerName))
                            //            {
                            //                objDTO.ManufacturerID = item.ManufacturerName == "" ? (long?)null : GetIDs(ImportMastersDTO.TableName.ManufacturerMaster, item.ManufacturerName);
                            //            }
                            //            else
                            //            {
                            //                long ManuID = new ManufacturerMasterDAL(SessionHelper.EnterPriseDBName).GetORInsertBlankManuFacID(SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
                            //                if (!string.IsNullOrWhiteSpace(item.ManufacturerNumber))
                            //                {
                            //                    objDTO.ManufacturerID = ManuID;
                            //                }

                            //            }
                            //            if (!CurrentRoomConsigned)
                            //            {
                            //                item.Consignment = false;
                            //            }
                            //            objDTO.ManufacturerNumber = (item.ManufacturerNumber == null) ? null : (item.ManufacturerNumber.Length > 50 ? item.ManufacturerNumber.Substring(0, 50) : item.ManufacturerNumber);
                            //            objDTO.Link1 = item.Link1;
                            //            objDTO.Link2 = item.Link2;
                            //            if (IsAllowOrderCostuomRoom == false)
                            //            {
                            //                objDTO.IsAllowOrderCostuom = false;
                            //            }
                            //            else
                            //            {
                            //                objDTO.IsAllowOrderCostuom = item.IsAllowOrderCostuom;
                            //            }
                            //            ItemMasterDTO objItem = lstItemMaster.Where(t => t.ItemNumber == objDTO.ItemNumber).FirstOrDefault();
                            //            if (objItem != null)
                            //            {
                            //                if (((objItem.OnOrderQuantity ?? 0) > 0 || ((objItem.OnOrderInTransitQuantity ?? 0) > 0)) && (objItem.IsAllowOrderCostuom) != objDTO.IsAllowOrderCostuom)
                            //                {
                            //                    SaveToolList = false;
                            //                    objDTO.Status = "Fail";
                            //                    objDTO.Reason = string.Format(ResItemMaster.CostUOMOnOrderInTransitQuantity, ResItemMaster.OnOrderQuantity, objDTO.ItemNumber);
                            //                    item.Status = "Fail";
                            //                    item.Reason = string.Format(ResItemMaster.CostUOMOnOrderInTransitQuantity, ResItemMaster.OnOrderQuantity, objDTO.ItemNumber);
                            //                }
                            //            }
                            //            objDTO.ItemLink2ImageType = "InternalLink";
                            //            objDTO.ImageType = "ExternalImage";
                            //            objDTO.ItemImageExternalURL = item.ItemImageExternalURL;
                            //            objDTO.ItemLink2ExternalURL = item.ItemLink2ExternalURL;
                            //            if (string.IsNullOrWhiteSpace(item.ItemImageExternalURL) && (!string.IsNullOrEmpty(item.ImagePath)))
                            //            {
                            //                objDTO.ImageType = "ImagePath";
                            //            }
                            //            if (string.IsNullOrWhiteSpace(item.Link2) && (!string.IsNullOrEmpty(item.ItemLink2ExternalURL)))
                            //            {
                            //                objDTO.ItemLink2ImageType = "ExternalURL";
                            //            }
                            //            objDTO.ItemDocExternalURL = item.ItemDocExternalURL;
                            //            objDTO.IsActive = item.IsActive;
                            //            if (item.ItemTypeName == "Labor")
                            //            {
                            //                objDTO.SupplierName = string.Empty;
                            //                objDTO.SupplierPartNo = null;
                            //                objDTO.SupplierID = null;
                            //                objDTO.BlanketOrderNumber = string.Empty;
                            //                objDTO.BlanketPOID = null;
                            //            }
                            //            else
                            //            {
                            //                objDTO.SupplierName = item.SupplierName;
                            //                objDTO.SupplierPartNo = (item.SupplierPartNo == null) ? null : (item.SupplierPartNo.Length > 50 ? item.SupplierPartNo.Substring(0, 50) : item.SupplierPartNo);
                            //                objDTO.SupplierID = GetIDs(ImportMastersDTO.TableName.SupplierMaster, item.SupplierName);

                            //                // Start -- insert into Room Schedule for PullSchedule type is Immediate 
                            //                if (objDTO.SupplierID > 0)
                            //                {
                            //                    SchedulerDTO objSchedulerDTO = new SupplierMasterDAL(SessionHelper.EnterPriseDBName).GetRoomSchedule(objDTO.SupplierID.GetValueOrDefault(0), SessionHelper.RoomID, 7);
                            //                    if (objSchedulerDTO == null)
                            //                    {
                            //                        // insert into Room Schedule for PullSchedule type is Immediate 
                            //                        SchedulerDTO objPullSchedulerDTO = new SchedulerDTO();
                            //                        objPullSchedulerDTO.SupplierId = objDTO.SupplierID.GetValueOrDefault(0);
                            //                        objPullSchedulerDTO.CompanyId = SessionHelper.CompanyID;
                            //                        objPullSchedulerDTO.RoomId = SessionHelper.RoomID;
                            //                        objPullSchedulerDTO.LoadSheduleFor = 7;
                            //                        objPullSchedulerDTO.ScheduleMode = 5;
                            //                        objPullSchedulerDTO.IsScheduleActive = true;
                            //                        objPullSchedulerDTO.MonthlyDayOfMonth = 2;
                            //                        new SupplierMasterDAL(SessionHelper.EnterPriseDBName).SaveSupplierSchedule(objPullSchedulerDTO);
                            //                    }
                            //                }

                            //                /// End- logic for insert into Room Schedule for PullSchedule type is Immediate

                            //                objDTO.BlanketOrderNumber = item.BlanketOrderNumber;
                            //                if (objDTO.SupplierID.HasValue && objDTO.SupplierID.Value > 0 && !string.IsNullOrWhiteSpace(item.BlanketOrderNumber))
                            //                    objDTO.BlanketPOID = GetIDs(ImportMastersDTO.TableName.SupplierBlanketPODetails, item.BlanketOrderNumber, objDTO.SupplierID.Value);
                            //            }

                            //            objDTO.UPC = item.UPC;
                            //            objDTO.UNSPSC = item.UNSPSC;
                            //            objDTO.Description = item.Description;
                            //            objDTO.LongDescription = item.LongDescription;
                            //            objDTO.CategoryID = item.CategoryName == "" ? (long?)null : GetIDs(ImportMastersDTO.TableName.CategoryMaster, item.CategoryName);
                            //            objDTO.GLAccountID = item.GLAccount == "" ? (long?)null : GetIDs(ImportMastersDTO.TableName.GLAccountMaster, item.GLAccount);
                            //            objDTO.CategoryName = item.CategoryName;
                            //            objDTO.GLAccount = item.GLAccount;
                            //            objDTO.UOMID = GetIDs(ImportMastersDTO.TableName.UnitMaster, item.Unit);
                            //            objDTO.Unit = item.Unit;
                            //            objDTO.PricePerTerm = item.PricePerTerm;
                            //            objDTO.CostUOMID = item.CostUOMName == "" ? (long?)null : GetIDs(ImportMastersDTO.TableName.CostUOMMaster, item.CostUOMName);
                            //            objDTO.CostUOMName = item.CostUOMName;

                            //            objDTO.DefaultReorderQuantity = item.DefaultReorderQuantity;
                            //            objDTO.DefaultPullQuantity = item.DefaultPullQuantity;

                            //            //if (objDTO.Markup > 0)
                            //            //{
                            //            //    double? markup = (item.Cost * objDTO.Markup) / 100;
                            //            //    objDTO.SellPrice = objDTO.Cost + markup;
                            //            //}
                            //            //else
                            //            //{
                            //            //    if (objDTO.Cost != null)
                            //            //        objDTO.SellPrice = objDTO.Cost;
                            //            //}
                            //            // objDTO.LastCost = 0.0;
                            //            item.Cost = item.Cost ?? 0;
                            //            item.SellPrice = item.SellPrice ?? 0;
                            //            item.Markup = item.Markup ?? 0;

                            //            objDTO.Cost = item.Cost;
                            //            objDTO.SellPrice = item.SellPrice;
                            //            objDTO.Markup = item.Markup;

                            //            if (item.Cost != 0 && item.SellPrice != 0 && item.Markup != 0)
                            //            {
                            //                objDTO.Markup = Convert.ToDouble(((Convert.ToDecimal(objDTO.SellPrice) * Convert.ToDecimal(100)) / Convert.ToDecimal(objDTO.Cost)) - Convert.ToDecimal(100));
                            //                // Calculate MArkup based on price and cost
                            //            }
                            //            else if (item.Cost != 0 && item.SellPrice == 0 && item.Markup == 0)
                            //            {
                            //                // Prise will become same as cost
                            //                objDTO.SellPrice = objDTO.Cost;
                            //            }
                            //            else if (item.Cost != 0 && item.SellPrice != 0 && item.Markup == 0)
                            //            {
                            //                // Calculate MArkup based on price and cost
                            //                objDTO.Markup = Convert.ToDouble(((Convert.ToDecimal(objDTO.SellPrice) * Convert.ToDecimal(100)) / Convert.ToDecimal(objDTO.Cost)) - Convert.ToDecimal(100));
                            //            }
                            //            else if (item.Cost != 0 && item.SellPrice == 0 && item.Markup != 0)
                            //            {
                            //                //Calculate prise based on cost and markup
                            //                objDTO.SellPrice = Convert.ToDouble(Convert.ToDecimal(objDTO.Cost) + ((Convert.ToDecimal(objDTO.Cost) * Convert.ToDecimal(objDTO.Markup)) / Convert.ToDecimal(100)));
                            //            }
                            //            else if (item.Cost == 0 && item.SellPrice != 0 && item.Markup != 0)
                            //            {
                            //                // Calculate cost based on prise and markup                                 
                            //                //objDTO.Cost = objDTO.SellPrice - ((objDTO.SellPrice * objDTO.Markup) / 100);
                            //                objDTO.Cost = Convert.ToDouble((Convert.ToDecimal(100) * Convert.ToDecimal(item.SellPrice)) / (Convert.ToDecimal(item.Markup) + Convert.ToDecimal(100)));
                            //                //Please follow Markup= (((sell-cost)/cost)*100)
                            //            }
                            //            else if (item.Cost == 0 && item.SellPrice == 0 && item.Markup == 0)
                            //            {
                            //                // All are zero so no calc
                            //            }
                            //            else if (item.Cost == 0 && item.SellPrice != 0 && item.Markup == 0)
                            //            {
                            //                // cost will become same as prise
                            //                objDTO.Cost = objDTO.SellPrice;
                            //            }
                            //            else if (item.Cost == 0 && item.SellPrice == 0 && item.Markup != 0)
                            //            {
                            //                objDTO.Markup = 0;
                            //                // Cost and prise will remain zero and save markup only Or make markup zero because no prise and cost
                            //            }
                            //            //if (item.Cost != 0 && item.SellPrice != 0 && item.Markup != 0)
                            //            //{
                            //            //    objDTO.Cost = item.Cost;
                            //            //    if (item.SellPrice != 0)
                            //            //        objDTO.SellPrice = item.SellPrice;
                            //            //    else
                            //            //        objDTO.SellPrice = item.Cost;
                            //            //    if (objDTO.Cost > 0)
                            //            //    {
                            //            //        //objDTO.Markup = ((objDTO.SellPrice * 100) / objDTO.Cost) - 100;
                            //            //        objDTO.Markup = null;
                            //            //    }
                            //            //    else
                            //            //    {
                            //            //        objDTO.Markup = null;
                            //            //    }

                            //            //}
                            //            //else if (item.Cost != 0 && item.SellPrice != 0)
                            //            //{
                            //            //    objDTO.Cost = item.Cost;
                            //            //    if (item.SellPrice != 0)
                            //            //        objDTO.SellPrice = item.SellPrice;
                            //            //    else
                            //            //        objDTO.SellPrice = item.Cost;
                            //            //    if (objDTO.Cost > 0)
                            //            //    {
                            //            //        //objDTO.Markup = ((objDTO.SellPrice * 100) / objDTO.Cost)-100;
                            //            //        objDTO.Markup = null;
                            //            //    }
                            //            //    else
                            //            //    {
                            //            //        objDTO.Markup = null;
                            //            //    }

                            //            //}
                            //            //else if (item.Cost != 0 && item.Markup != 0)
                            //            //{
                            //            //    objDTO.Cost = item.Cost;
                            //            //    objDTO.SellPrice = objDTO.Cost + ((objDTO.Cost * objDTO.Markup) / 100);
                            //            //    if (objDTO.Markup == 0)
                            //            //        objDTO.Markup = null;
                            //            //    else
                            //            //        objDTO.Markup = item.Markup;
                            //            //}
                            //            //else if (item.Cost != 0)
                            //            //{
                            //            //    objDTO.Cost = item.Cost;
                            //            //    objDTO.Markup = null;
                            //            //    objDTO.SellPrice = item.Cost;
                            //            //}
                            //            objDTO.ExtendedCost = 0;// item.ExtendedCost;
                            //            objDTO.DispExtendedCost = item.ExtendedCost;

                            //            objDTO.LeadTimeInDays = item.LeadTimeInDays;
                            //            objDTO.Trend = item.Trend;
                            //            objDTO.Taxable = item.Taxable;
                            //            objDTO.Consignment = item.Consignment;
                            //            objDTO.StagedQuantity = 0;// item.StagedQuantity;
                            //            objDTO.InTransitquantity = 0;// item.InTransitquantity;
                            //            objDTO.OnOrderQuantity = 0;// item.OnOrderQuantity;
                            //            objDTO.OnTransferQuantity = 0;// item.OnTransferQuantity;
                            //            objDTO.SuggestedOrderQuantity = 0;// item.SuggestedOrderQuantity;
                            //            objDTO.RequisitionedQuantity = 0;// item.RequisitionedQuantity;
                            //            objDTO.AverageUsage = 0;// item.AverageUsage;
                            //            objDTO.Turns = 0;// item.Turns;
                            //            if (item.ItemType != 4)
                            //            {
                            //                objDTO.OnHandQuantity = item.OnHandQuantity;
                            //            }

                            //            objDTO.DispStagedQuantity = item.StagedQuantity;
                            //            objDTO.DispInTransitquantity = item.InTransitquantity;
                            //            objDTO.DispOnOrderQuantity = item.OnOrderQuantity;
                            //            objDTO.DispOnTransferQuantity = item.OnTransferQuantity;
                            //            objDTO.DispSuggestedOrderQuantity = item.SuggestedOrderQuantity;
                            //            objDTO.DispRequisitionedQuantity = item.RequisitionedQuantity;
                            //            objDTO.DispAverageUsage = item.AverageUsage;
                            //            objDTO.DispTurns = item.Turns;
                            //            //objDTO.DispOnHandQuantity = item.OnHandQuantity;
                            //            //objDTO.OnHandQuantity = item.OnHandQuantity;
                            //            objDTO.IsPackslipMandatoryAtReceive = item.IsPackslipMandatoryAtReceive;
                            //            if (!string.IsNullOrWhiteSpace(objRoomDTO.ReplenishmentType))
                            //            {
                            //                if (objRoomDTO.ReplenishmentType == "1")
                            //                {
                            //                    objDTO.IsItemLevelMinMaxQtyRequired = true;
                            //                }
                            //                else if (objRoomDTO.ReplenishmentType == "2")
                            //                {
                            //                    objDTO.IsItemLevelMinMaxQtyRequired = false;
                            //                }
                            //                else if (objRoomDTO.ReplenishmentType == "3")
                            //                {
                            //                    objDTO.IsItemLevelMinMaxQtyRequired = item.IsItemLevelMinMaxQtyRequired;
                            //                }
                            //            }
                            //            objDTO.CriticalQuantity = item.CriticalQuantity;
                            //            objDTO.MinimumQuantity = item.MinimumQuantity;
                            //            objDTO.MaximumQuantity = item.MaximumQuantity;
                            //            objDTO.WeightPerPiece = item.WeightPerPiece;
                            //            if (objDTO.IsAllowOrderCostuom == true)
                            //            {
                            //                item.IsEnforceDefaultReorderQuantity = true;

                            //                if (lstCostUOMMasterDTO.Where(t => t.CostUOM == item.CostUOMName).Count() == 0)
                            //                {
                            //                    lstCostUOMMasterDTO = new CostUOMMasterDAL(SessionHelper.EnterPriseDBName).GetCostUOMsByRoomID(SessionHelper.RoomID, SessionHelper.CompanyID).ToList();
                            //                }
                            //                if (lstCostUOMMasterDTO.Where(t => t.CostUOM == item.CostUOMName).Count() > 0)
                            //                {
                            //                    CostUOMMasterDTO cuom = lstCostUOMMasterDTO.Where(t => t.CostUOM == item.CostUOMName).FirstOrDefault();
                            //                    bool value = objCommonDAL.CheckItemCostUOM(cuom.ID, Convert.ToInt64(item.DefaultReorderQuantity ?? 0));
                            //                    if (!value)
                            //                    {
                            //                        objDTO.DefaultReorderQuantity = (cuom.CostUOMValue ?? 0);
                            //                        /*SaveToolList = false;
                            //                        objDTO.Status = "Fail";
                            //                        objDTO.Reason = string.Format(ResItemMaster.CostUOMReorderQTY, ResItemMaster.DefaultReorderQuantity, objDTO.ItemNumber);
                            //                        item.Status = "Fail";
                            //                        item.Reason = string.Format(ResItemMaster.CostUOMReorderQTY, ResItemMaster.DefaultReorderQuantity, objDTO.ItemNumber);*/
                            //                    }
                            //                    else
                            //                    {
                            //                        Double Remainder = (item.DefaultReorderQuantity ?? 0) % (cuom.CostUOMValue ?? 0);
                            //                        if (Remainder != 0)
                            //                        {
                            //                            objDTO.DefaultReorderQuantity = (cuom.CostUOMValue ?? 0);
                            //                            //int PreviousMultiple = Convert.ToInt32((cuom.CostUOMValue ?? 0) / (objDTO.DefaultReorderQuantity ?? 0));
                            //                            //PreviousMultiple = PreviousMultiple + 1;
                            //                            //objDTO.DefaultReorderQuantity = (cuom.CostUOMValue ?? 0) * PreviousMultiple;
                            //                        }
                            //                    }

                            //                    /*
                            //                    if (cuom.CostUOMValue > objDTO.MinimumQuantity && item.MinimumQuantity > 0)
                            //                    {
                            //                        SaveToolList = false;
                            //                        objDTO.Status = "Fail";
                            //                        objDTO.Reason = string.Format(ResItemMaster.CostUOMMinQTY, ResItemMaster.MinimumQuantity, objDTO.ItemNumber);
                            //                        item.Status = "Fail";
                            //                        item.Reason = string.Format(ResItemMaster.CostUOMMinQTY, ResItemMaster.MinimumQuantity, objDTO.ItemNumber);
                            //                    }*/

                            //                }
                            //            }

                            //            //objDTO.ItemUniqueNumber = objCommonDAL.UniqueItemId();
                            //            objDTO.ItemUniqueNumber = objCommonDAL.GetItemUniqueIdByRoom(item.Room.GetValueOrDefault(0), item.CompanyID.GetValueOrDefault(0));
                            //            //objDTO.TransferOrPurchase = item.TransferOrPurchase;
                            //            objDTO.IsTransfer = item.IsTransfer;
                            //            objDTO.IsPurchase = item.IsPurchase;
                            //            if ((item.IsDeleted ?? false) == false)
                            //            {
                            //                objDTO.DefaultLocation = objImport.GetBinForImportItem(item.InventryLocation, objDTO.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID); // GetIDs(ImportMastersDTO.TableName.BinMaster, item.InventryLocation);
                            //            }
                            //            objDTO.InventryLocation = item.InventryLocation;
                            //            objDTO.InventoryClassification = Convert.ToInt32(GetIDs(ImportMastersDTO.TableName.InventoryClassificationMaster, item.InventoryClassificationName));
                            //            objDTO.InventoryClassificationName = item.InventoryClassificationName;
                            //            objDTO.ItemTypeName = item.ItemTypeName;
                            //            objDTO.SerialNumberTracking = item.SerialNumberTracking;
                            //            objDTO.LotNumberTracking = item.LotNumberTracking;
                            //            objDTO.DateCodeTracking = item.DateCodeTracking;
                            //            objDTO.ItemType = item.ItemTypeName == "Item" ? 1 : item.ItemTypeName == "Quick List" ? 2 : item.ItemTypeName == "Kit" ? 3 : item.ItemTypeName == "Labor" ? 4 : 1;
                            //            objDTO.ImagePath = item.ImagePath;
                            //            objDTO.OnHandQuantity = (!objDTO.SerialNumberTracking && !objDTO.LotNumberTracking && !objDTO.DateCodeTracking) ? objDTO.OnHandQuantity : 0;
                            //            objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                            //            objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                            //            objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                            //            objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                            //            objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);

                            //            objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                            //            objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                            //            objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                            //            objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                            //            objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);

                            //            objDTO.CategoryColor = "";
                            //            objDTO.IsLotSerialExpiryCost = item.IsLotSerialExpiryCost;
                            //            if (objDTO.ItemType == 3)
                            //            {
                            //                objDTO.IsBuildBreak = item.IsBuildBreak;
                            //            }
                            //            objDTO.IsAutoInventoryClassification = item.IsAutoInventoryClassification;
                            //            objDTO.PullQtyScanOverride = item.PullQtyScanOverride;
                            //            objDTO.IsEnforceDefaultReorderQuantity = item.IsEnforceDefaultReorderQuantity ?? false;
                            //            if (objDashboardParameterDTO.IsTrendingEnabled)
                            //            {
                            //                objDTO.TrendingSetting = getTrendingID(item.TrendingSettingName);
                            //                objDTO.TrendingSettingName = item.TrendingSettingName;
                            //            }
                            //            else
                            //            {
                            //                item.TrendingSetting = 0;
                            //                item.TrendingSettingName = "None";
                            //                objDTO.TrendingSetting = 0;
                            //                objDTO.TrendingSettingName = "None";
                            //            }

                            //            objDTO.IsDeleted = item.IsDeleted ?? false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //            objDTO.WhatWhereAction = "Import";
                            //            if (objDTO.ItemType == 4 && (objDTO.DefaultPullQuantity == null || objDTO.DefaultPullQuantity <= 0))
                            //            {
                            //                objDTO.DefaultPullQuantity = 1;
                            //            }
                            //            lstItemGUID.Add(objDTO.GUID);

                            //            if (!string.IsNullOrWhiteSpace((item.SupplierPartNo ?? string.Empty).Trim()) || ((!string.IsNullOrWhiteSpace(item.ItemTypeName)) && item.ItemTypeName == "Labor"))
                            //            {
                            //                //ItemSupplierDetailsDAL objItemSupplierDetailsDAL = new ItemSupplierDetailsDAL(SessionHelper.EnterPriseDBName);
                            //                //bool Result = objItemSupplierDetailsDAL.CheckSupplierDuplicateByItemNumber(item.SupplierPartNo.Trim(), SessionHelper.RoomID, SessionHelper.CompanyID, objDTO.ItemNumber, false);
                            //                //if (!Result)
                            //                //{
                            //                //    SaveToolList = false;
                            //                //    objDTO.Status = "Fail";
                            //                //    objDTO.Reason = ResMessage.DuplicateSupPartNo;
                            //                //    item.Status = "Fail";
                            //                //    item.Reason = ResMessage.DuplicateSupPartNo;
                            //                //}
                            //            }
                            //            else
                            //            {
                            //                SaveToolList = false;
                            //                objDTO.Status = "Fail";
                            //                objDTO.Reason = string.Format(ResMessage.Required, "SupplierPartNo");
                            //                item.Status = "Fail";
                            //                item.Reason = string.Format(ResMessage.Required, "SupplierPartNo"); ;
                            //            }


                            //            //if (!string.IsNullOrWhiteSpace(item.ManufacturerNumber))
                            //            //{
                            //            //    ItemManufacturerDetailsDAL objItemManufacturerDetailsDAL = new ItemManufacturerDetailsDAL(SessionHelper.EnterPriseDBName);
                            //            //    bool Result = objItemManufacturerDetailsDAL.CheckManufacturerNoDuplicateByItemNumber(item.ManufacturerNumber.Trim(), SessionHelper.RoomID, SessionHelper.CompanyID, objDTO.ItemNumber, false);
                            //            //    if (!Result)
                            //            //    {
                            //            //        SaveToolList = false;
                            //            //        objDTO.Status = "Fail";
                            //            //        objDTO.Reason = ResMessage.DuplicateManufacturerNumber;
                            //            //        item.Status = "Fail";
                            //            //        item.Reason = ResMessage.DuplicateManufacturerNumber;
                            //            //    }
                            //            //}

                            //            /*/////CODE FOR CHECK UDF IS REQUIRED///////*/
                            //            string errorMsg = string.Empty;
                            //            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg, null, item.UDF6, item.UDF7, item.UDF8, item.UDF9, item.UDF10);
                            //            if (!string.IsNullOrEmpty(errorMsg))
                            //            {
                            //                item.Status = "Fail";
                            //                if (!string.IsNullOrEmpty(item.Reason))
                            //                    item.Reason += errorMsg;
                            //                else
                            //                    item.Reason = errorMsg;
                            //                SaveToolList = false;
                            //            }
                            //            /*/////CODE FOR CHECK UDF IS REQUIRED///////*/

                            //            if (item.ItemNumber.Trim() != "" && SaveToolList)
                            //            {
                            //                var itemval = CurrentItemList.FirstOrDefault(x => x.ItemNumber.ToLower() == item.ItemNumber.ToLower());
                            //                if (itemval != null)
                            //                    CurrentItemList.Remove(itemval);
                            //                CurrentItemList.Add(objDTO);
                            //                //CurrentItemDTOList.Add(objDTO);

                            //                item.Status = "Success";
                            //                item.Reason = "N/A";

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportItemColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportItemColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportItemColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportItemColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportItemColumn.UDF5.ToString());

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportItemColumn.UDF6.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF7 == null ? "" : objDTO.UDF7, CommonUtility.ImportItemColumn.UDF7.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF8 == null ? "" : objDTO.UDF8, CommonUtility.ImportItemColumn.UDF8.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF9 == null ? "" : objDTO.UDF9, CommonUtility.ImportItemColumn.UDF9.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF10 == null ? "" : objDTO.UDF10, CommonUtility.ImportItemColumn.UDF10.ToString());

                            //            }
                            //            else
                            //                CurrentBlankItemList.Add(item);
                            //        }

                            //        List<BOMItemMasterMain> lstreturn = new List<BOMItemMasterMain>();

                            //        if (CurrentItemList.Count > 0)
                            //        {
                            //            Session["SaveBinCreatedDate"] = DateTimeUtility.DateTimeNow.AddMinutes(-1);
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ItemMaster.ToString(), CurrentItemList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList, isImgZipAvail, isLink2ZipAvail);
                            //        }
                            //        //if (CurrentErrorItemList.Count > 0)
                            //        //{
                            //        //    foreach (BOMItemMasterMain item in CurrentErrorItemList)
                            //        //    {
                            //        //        lstreturn.Add(item);
                            //        //    }
                            //        //}

                            //        if (CurrentBlankItemList.Count > 0)
                            //        {
                            //            foreach (BOMItemMasterMain item in CurrentBlankItemList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            savedOnlyitemIds = string.Join(",", lstreturn.Where(i => i.ID != 0 && (!string.IsNullOrEmpty(i.ImagePath))).Select(p => p.ID.ToString() + "#" + p.ImagePath.ToString()));
                            //            savedItemIdsWithLink2 = string.Join(",", lstreturn.Where(i => i.ID != 0 && (!string.IsNullOrEmpty(i.Link2))).Select(p => p.ID.ToString() + "#" + p.Link2.ToString()));
                            //            savedItemGuids = string.Join(",", lstreturn.Where(i => i.GUID != Guid.Empty).Select(p => p.GUID.ToString()));
                            //            //objDTO.Link2 = item.Link2;
                            //            //objDTO.ItemLink2ImageType = "InternalLink";

                            //            foreach (BOMItemMasterMain b in lstreturn.Where(i => i.ID == 0 && (!string.IsNullOrEmpty(i.ImagePath))))
                            //            {
                            //                //long id = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetIDByItemNumber(Convert.ToString(b.ItemNumber), Convert.ToInt64(b.Room), Convert.ToInt64(b.CompanyID));
                            //                ItemMasterDTO objItemMaster = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetItemByItemNumberPlain(Convert.ToString(b.ItemNumber), Convert.ToInt64(b.Room), Convert.ToInt64(b.CompanyID));
                            //                if (objItemMaster != null)
                            //                {
                            //                    if (string.IsNullOrEmpty(savedOnlyitemIds))
                            //                    {
                            //                        savedOnlyitemIds = objItemMaster.ID + "#" + objItemMaster.ImagePath.ToString();
                            //                    }
                            //                    else
                            //                    {
                            //                        savedOnlyitemIds += "," + objItemMaster.ID + "#" + objItemMaster.ImagePath.ToString();
                            //                    }
                            //                }
                            //            }

                            //            foreach (BOMItemMasterMain b in lstreturn.Where(i => i.ID == 0 && (!string.IsNullOrEmpty(i.Link2))))
                            //            {
                            //                ItemMasterDTO objItemMaster = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetItemByItemNumberPlain(Convert.ToString(b.ItemNumber), Convert.ToInt64(b.Room), Convert.ToInt64(b.CompanyID));
                            //                if (objItemMaster != null)
                            //                {
                            //                    if (string.IsNullOrEmpty(savedItemIdsWithLink2))
                            //                    {
                            //                        savedItemIdsWithLink2 = objItemMaster.ID + "#" + objItemMaster.Link2.ToString();
                            //                    }
                            //                    else
                            //                    {
                            //                        savedItemIdsWithLink2 += "," + objItemMaster.ID + "#" + objItemMaster.Link2.ToString();
                            //                    }
                            //                }
                            //            }



                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<BOMItemMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }

                            //        lstItemGUID = new List<Guid>();
                            //        foreach (BOMItemMasterMain objitemguid in lstreturn.Where(t => t.IsDeleted == false))
                            //        {
                            //            if (objitemguid.Status.ToLower() == "success")
                            //            {
                            //                lstItemGUID.Add(objitemguid.GUID);
                            //            }
                            //        }

                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.LocationMaster:
                            importBAL.SaveLocationMaster(lst, CurrentOptionList,
                               CurrentLocationList, ImportMastersDTO.TableName.LocationMaster, para, HasMoreRecords,
                               IsFirstCall, ref message, ref status, ref allSuccesfulRecords,currentCulture);

                            #region LocationMaster
                            //if (ImportMastersDTO.TableName.LocationMaster.ToString() == TableName)
                            //{
                            //    List<LocationMasterMain> CurrentBlankLocationList = new List<LocationMasterMain>();
                            //    LocationMasterMain[] LstLocationMaster = s.Deserialize<LocationMasterMain[]>(para);
                            //    if (LstLocationMaster != null && LstLocationMaster.Length > 0)
                            //    {
                            //        CurrentLocationList = new List<LocationMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.BinMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.LocationMaster.ToString());

                            //        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                            //        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetAllRecordsNew(SessionHelper.CompanyID, "LocationMaster", SessionHelper.RoomID);


                            //        CurrentOptionList = new List<UDFOptionsMain>();

                            //        foreach (LocationMasterMain item in LstLocationMaster)
                            //        {
                            //            LocationMasterMain objDTO = new LocationMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.Location = item.Location;

                            //            bool saveLoc = true;
                            //            string errorMsg = string.Empty;
                            //            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg);
                            //            if (!string.IsNullOrWhiteSpace(errorMsg))
                            //            {
                            //                objDTO.Status = "Fail";
                            //                if (!string.IsNullOrEmpty(objDTO.Reason))
                            //                    objDTO.Reason += errorMsg;
                            //                else
                            //                    objDTO.Reason = errorMsg;
                            //                saveLoc = false;
                            //                item.Status = objDTO.Status;
                            //                item.Reason = errorMsg;
                            //            }


                            //            objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                            //            objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                            //            objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                            //            objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                            //            objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                            //            objDTO.UDF6 = (item.UDF6 == null) ? null : (item.UDF6.Length > 255 ? item.UDF6.Substring(0, 255) : item.UDF6);
                            //            objDTO.UDF7 = (item.UDF7 == null) ? null : (item.UDF7.Length > 255 ? item.UDF7.Substring(0, 255) : item.UDF7);
                            //            objDTO.UDF8 = (item.UDF8 == null) ? null : (item.UDF8.Length > 255 ? item.UDF8.Substring(0, 255) : item.UDF8);
                            //            objDTO.UDF9 = (item.UDF9 == null) ? null : (item.UDF9.Length > 255 ? item.UDF9.Substring(0, 255) : item.UDF9);
                            //            objDTO.UDF10 = (item.UDF10 == null) ? null : (item.UDF10.Length > 255 ? item.UDF10.Substring(0, 255) : item.UDF10);
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //            if (item.Location.Trim() != "" && saveLoc)
                            //            {
                            //                CurrentLocationList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportLocationColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportLocationColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportLocationColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportLocationColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportLocationColumn.UDF5.ToString());
                            //                //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportBinColumn.UDF6.ToString());

                            //            }
                            //            else
                            //                CurrentBlankLocationList.Add(objDTO);
                            //        }

                            //        List<LocationMasterMain> lstreturn = new List<LocationMasterMain>();
                            //        if (CurrentLocationList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.LocationMaster.ToString(), CurrentLocationList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankLocationList.Count > 0)
                            //        {
                            //            foreach (LocationMasterMain item in CurrentBlankLocationList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }
                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<LocationMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //    }
                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ToolCategoryMaster:
                            importBAL.SaveToolCategoryMaster(lst, CurrentOptionList,
                             CurrentToolCategoryList, ImportMastersDTO.TableName.ToolCategoryMaster, para, HasMoreRecords,
                            IsFirstCall, ref message, ref status, ref allSuccesfulRecords,currentCulture);
                            #region ToolCategoryMaster
                            ////if (ImportMastersDTO.TableName.ToolCategoryMaster.ToString() == TableName)
                            //{
                            //    List<ToolCategoryMasterMain> CurrentBlankToolCategoryList = new List<ToolCategoryMasterMain>();
                            //    ToolCategoryMasterMain[] LstToolCategoryMaster = s.Deserialize<ToolCategoryMasterMain[]>(para);
                            //    if (LstToolCategoryMaster != null && LstToolCategoryMaster.Length > 0)
                            //    {
                            //        CurrentToolCategoryList = new List<ToolCategoryMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ToolCategoryMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ToolCategoryMaster.ToString());

                            //        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                            //        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetAllRecordsNew(SessionHelper.CompanyID, "ToolCategories", SessionHelper.RoomID);
                            //        CurrentOptionList = new List<UDFOptionsMain>();

                            //        foreach (ToolCategoryMasterMain item in LstToolCategoryMaster)
                            //        {
                            //            ToolCategoryMasterMain objDTO = new ToolCategoryMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.ToolCategory = item.ToolCategory;
                            //            bool saveToolCat = true;
                            //            string errorMsg = string.Empty;
                            //            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg);
                            //            if (!string.IsNullOrWhiteSpace(errorMsg))
                            //            {
                            //                objDTO.Status = "Fail";
                            //                if (!string.IsNullOrEmpty(objDTO.Reason))
                            //                    objDTO.Reason += errorMsg;
                            //                else
                            //                    objDTO.Reason = errorMsg;
                            //                saveToolCat = false;
                            //                item.Status = objDTO.Status;
                            //                item.Reason = errorMsg;
                            //            }

                            //            objDTO.UDF1 = item.UDF1;
                            //            objDTO.UDF2 = item.UDF2;
                            //            objDTO.UDF3 = item.UDF3;
                            //            objDTO.UDF4 = item.UDF4;
                            //            objDTO.UDF5 = item.UDF5;
                            //            objDTO.UDF6 = item.UDF6;
                            //            objDTO.UDF7 = item.UDF7;
                            //            objDTO.UDF8 = item.UDF8;
                            //            objDTO.UDF9 = item.UDF9;
                            //            objDTO.UDF10 = item.UDF10;
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;

                            //            if (item.ToolCategory.Trim() != "" && saveToolCat)
                            //            {
                            //                CurrentToolCategoryList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportToolCategoryColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportToolCategoryColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportToolCategoryColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportToolCategoryColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportToolCategoryColumn.UDF5.ToString());
                            //                //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportBinColumn.UDF6.ToString());

                            //            }
                            //            else
                            //                CurrentBlankToolCategoryList.Add(objDTO);
                            //        }

                            //        List<ToolCategoryMasterMain> lstreturn = new List<ToolCategoryMasterMain>();
                            //        if (CurrentToolCategoryList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ToolCategoryMaster.ToString(), CurrentToolCategoryList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankToolCategoryList.Count > 0)
                            //        {
                            //            foreach (ToolCategoryMasterMain item in CurrentBlankToolCategoryList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }
                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<ToolCategoryMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //    }
                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.CostUOMMaster:

                            importBAL.SaveCostUOMMaster(lst, CurrentOptionList, CurrentCostUOMList,
                                ImportMastersDTO.TableName.CostUOMMaster, para, HasMoreRecords,
                                IsFirstCall, ref message, ref status, ref allSuccesfulRecords, currentCulture);

                            #region CostUOM Master
                            //else if (ImportMastersDTO.TableName.CostUOMMaster.ToString() == TableName)
                            //{
                            //    List<CostUOMMasterMain> CurrentBlankCategoryList = new List<CostUOMMasterMain>();
                            //    CostUOMMasterMain[] LstCategoryMaster = s.Deserialize<CostUOMMasterMain[]>(para);
                            //    if (LstCategoryMaster != null && LstCategoryMaster.Length > 0)
                            //    {
                            //        CurrentCostUOMList = new List<CostUOMMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.CostUOMMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.CostUOMMaster.ToString());

                            //        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                            //        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetAllRecordsNew(SessionHelper.CompanyID, "CostUOM", SessionHelper.RoomID);
                            //        CurrentOptionList = new List<UDFOptionsMain>();
                            //        bool saveRecord = true;
                            //        foreach (CostUOMMasterMain item in LstCategoryMaster)
                            //        {
                            //            saveRecord = true;
                            //            CostUOMMasterMain objDTO = new CostUOMMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.CostUOM = item.CostUOM;
                            //            if (item.CostUOMValue.GetValueOrDefault(0) > 0)
                            //            {
                            //                objDTO.CostUOMValue = item.CostUOMValue;
                            //            }
                            //            else
                            //            {
                            //                objDTO.Status = "Fail";
                            //                objDTO.Reason = "CostUOMValue should be great than 0";
                            //                saveRecord = false;
                            //            }

                            //            string errorMsg = string.Empty;
                            //            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg);
                            //            if (!string.IsNullOrWhiteSpace(errorMsg))
                            //            {
                            //                objDTO.Status = "Fail";
                            //                if (!string.IsNullOrEmpty(objDTO.Reason))
                            //                    objDTO.Reason += errorMsg;
                            //                else
                            //                    objDTO.Reason = errorMsg;
                            //                saveRecord = false;
                            //                item.Status = objDTO.Status;
                            //                item.Reason = objDTO.Reason;

                            //            }

                            //            objDTO.UDF1 = item.UDF1;
                            //            objDTO.UDF2 = item.UDF2;
                            //            objDTO.UDF3 = item.UDF3;
                            //            objDTO.UDF4 = item.UDF4;
                            //            objDTO.UDF5 = item.UDF5;
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";
                            //            if (item.CostUOM.Trim() != "" && saveRecord)
                            //            {
                            //                CurrentCostUOMList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportCostUOMColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportCostUOMColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportCostUOMColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportCostUOMColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportCostUOMColumn.UDF5.ToString());
                            //                //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportCategoryColumn.UDF6.ToString());

                            //            }
                            //            else
                            //                CurrentBlankCategoryList.Add(objDTO);
                            //        }

                            //        List<CostUOMMasterMain> lstreturn = new List<CostUOMMasterMain>();
                            //        if (CurrentCostUOMList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.CostUOMMaster.ToString(), CurrentCostUOMList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankCategoryList.Count > 0)
                            //        {
                            //            foreach (CostUOMMasterMain item in CurrentBlankCategoryList.Where(c => c.CostUOM.Trim() == ""))
                            //            {
                            //                item.Status = "Fail";
                            //                item.Reason = "CostUOM should not blank";
                            //                lstreturn.Add(item);
                            //            }
                            //            foreach (CostUOMMasterMain item in CurrentBlankCategoryList.Where(c => c.CostUOMValue.GetValueOrDefault(0) <= 0))
                            //            {
                            //                item.Status = "Fail";
                            //                item.Reason = "CostUOMValue should be great than 0";
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<CostUOMMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //        //CacheHelper<IEnumerable<CostUOMMasterDTO>>.InvalidateCache();
                            //        //(new CostUOMMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false);

                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.InventoryClassificationMaster:
                            importBAL.SaveInventoryClassificationMaster(lst, CurrentOptionList,
                                CurrentInventoryClassificationList, ImportMastersDTO.TableName.InventoryClassificationMaster, para,
                                HasMoreRecords, IsFirstCall, ref message, ref status, ref allSuccesfulRecords, currentCulture);

                            #region Inventory Classification Master

                            //else if (ImportMastersDTO.TableName.InventoryClassificationMaster.ToString() == TableName)
                            //{
                            //    List<InventoryClassificationMasterMain> CurrentBlankCategoryList = new List<InventoryClassificationMasterMain>();
                            //    InventoryClassificationMasterMain[] LstCategoryMaster = s.Deserialize<InventoryClassificationMasterMain[]>(para);
                            //    if (LstCategoryMaster != null && LstCategoryMaster.Length > 0)
                            //    {
                            //        CurrentInventoryClassificationList = new List<InventoryClassificationMasterMain>();
                            //        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.InventoryClassificationMaster.ToString(), UDFControlTypes.Textbox.ToString());
                            //        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.InventoryClassificationMaster.ToString());


                            //        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                            //        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetAllRecordsNew(SessionHelper.CompanyID, "InventoryClassification", SessionHelper.RoomID);

                            //        CurrentOptionList = new List<UDFOptionsMain>();

                            //        foreach (InventoryClassificationMasterMain item in LstCategoryMaster)
                            //        {
                            //            InventoryClassificationMasterMain objDTO = new InventoryClassificationMasterMain();
                            //            objDTO.ID = item.ID;
                            //            objDTO.BaseOfInventory = item.BaseOfInventory;
                            //            objDTO.InventoryClassification = item.InventoryClassification;
                            //            objDTO.RangeStart = item.RangeStart;
                            //            objDTO.RangeEnd = item.RangeEnd;

                            //            bool saveInvClas = true;
                            //            string errorMsg = string.Empty;
                            //            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg);
                            //            if (!string.IsNullOrWhiteSpace(errorMsg))
                            //            {
                            //                objDTO.Status = "Fail";
                            //                if (!string.IsNullOrEmpty(objDTO.Reason))
                            //                    objDTO.Reason += errorMsg;
                            //                else
                            //                    objDTO.Reason = errorMsg;
                            //                saveInvClas = false;
                            //                item.Status = objDTO.Status;
                            //                item.Reason = errorMsg;
                            //            }

                            //            objDTO.UDF1 = item.UDF1;
                            //            objDTO.UDF2 = item.UDF2;
                            //            objDTO.UDF3 = item.UDF3;
                            //            objDTO.UDF4 = item.UDF4;
                            //            objDTO.UDF5 = item.UDF5;
                            //            objDTO.IsDeleted = false;
                            //            objDTO.IsArchived = false;
                            //            objDTO.Created = DateTimeUtility.DateTimeNow;
                            //            objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //            objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //            objDTO.Room = SessionHelper.RoomID;
                            //            objDTO.CompanyID = SessionHelper.CompanyID;
                            //            objDTO.CreatedBy = SessionHelper.UserID;
                            //            objDTO.GUID = Guid.NewGuid();
                            //            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //            objDTO.AddedFrom = "Web";
                            //            objDTO.EditedFrom = "Web";
                            //            if (item.InventoryClassification.Trim() != "" && saveInvClas)
                            //            {
                            //                CurrentInventoryClassificationList.Add(objDTO);

                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportInventoryClassificationColumn.UDF1.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportInventoryClassificationColumn.UDF2.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportInventoryClassificationColumn.UDF3.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportInventoryClassificationColumn.UDF4.ToString());
                            //                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportInventoryClassificationColumn.UDF5.ToString());
                            //                //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportCategoryColumn.UDF6.ToString());
                            //            }
                            //            else
                            //                CurrentBlankCategoryList.Add(objDTO);
                            //        }

                            //        List<InventoryClassificationMasterMain> lstreturn = new List<InventoryClassificationMasterMain>();
                            //        if (CurrentInventoryClassificationList.Count > 0)
                            //            //GetValidateList(CurrentInventoryClassificationList, TableName);
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.InventoryClassificationMaster.ToString(), CurrentInventoryClassificationList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankCategoryList.Count > 0)
                            //        {
                            //            foreach (InventoryClassificationMasterMain item in CurrentBlankCategoryList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<InventoryClassificationMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }

                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ToolMaster:
                            #region ToolMaster

                            //else if (ImportMastersDTO.TableName.ToolMaster.ToString() == TableName)
                            {
                                List<ToolMasterMain> CurrentBlankToolMasterMain = new List<ToolMasterMain>();
                                ToolMasterMain[] LstToolMasterMain = s.Deserialize<ToolMasterMain[]>(para);

                                bool AllowToolOrdering = SessionHelper.AllowToolOrdering;

                                if (LstToolMasterMain != null && LstToolMasterMain.Length > 0)
                                {
                                    CurrentToolList = new List<ToolMasterMain>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ToolMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ToolMaster.ToString());

                                    eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                    IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("ToolMaster", SessionHelper.RoomID, SessionHelper.CompanyID);

                                    IEnumerable<UDFDTO> UDFDataFromDB_ToolCheckOut = null;
                                    List<TechnicianMasterDTO> objTechnicialMasterDALList = new List<TechnicianMasterDTO>();
                                    TechnicialMasterDAL objTechnicialMasterDAL = new TechnicialMasterDAL(SessionHelper.EnterPriseDBName);
                                    if (!AllowToolOrdering)
                                    {

                                        UDFDataFromDB_ToolCheckOut = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("ToolCheckInOutHistory", SessionHelper.RoomID, SessionHelper.CompanyID);
                                        CurrentOptionList = new List<UDFOptionsMain>();
                                        objTechnicialMasterDALList = new List<TechnicianMasterDTO>();
                                        objTechnicialMasterDAL = new TechnicialMasterDAL(SessionHelper.EnterPriseDBName);
                                        objTechnicialMasterDALList = objTechnicialMasterDAL.GetTechnicianByRoomIDPlain(SessionHelper.RoomID, SessionHelper.CompanyID).ToList();
                                        foreach (ToolMasterMain toolList in LstToolMasterMain.GroupBy(l => l.Technician).Select(g => g.First()).ToList())
                                        {
                                            if (toolList.Technician.ToLower().Trim() != string.Empty)
                                            {
                                                if ((from p in objTechnicialMasterDALList
                                                     where (p.TechnicianCode.ToLower().Trim() == (toolList.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                     select p).Any())
                                                {

                                                }
                                                else
                                                {
                                                    TechnicianMasterDTO objTechnicianMasterDTO = new TechnicianMasterDTO();
                                                    objTechnicianMasterDTO.TechnicianCode = toolList.Technician;
                                                    objTechnicianMasterDTO.Room = SessionHelper.RoomID;
                                                    objTechnicianMasterDTO.CompanyID = SessionHelper.CompanyID;
                                                    objTechnicianMasterDTO.CreatedBy = SessionHelper.UserID;
                                                    objTechnicianMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                                                    objTechnicianMasterDTO.Created = DateTimeUtility.DateTimeNow;
                                                    objTechnicianMasterDTO.Updated = DateTimeUtility.DateTimeNow;
                                                    objTechnicianMasterDTO.GUID = Guid.NewGuid();
                                                    objTechnicianMasterDTO.IsArchived = false;
                                                    objTechnicianMasterDTO.IsDeleted = false;
                                                    Int64 TechnicanID = objTechnicialMasterDAL.Insert(objTechnicianMasterDTO);
                                                    objTechnicianMasterDTO = objTechnicialMasterDAL.GetTechnicianByIDPlain(TechnicanID, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                    objTechnicialMasterDALList.Add(objTechnicianMasterDTO);

                                                }
                                            }
                                        }
                                    }

                                    List<ToolCategoryMasterDTO> objToolCategoryMasterDTOList = new List<ToolCategoryMasterDTO>();
                                    ToolCategoryMasterDAL objToolCategoryMasterDAL = new ToolCategoryMasterDAL(SessionHelper.EnterPriseDBName);
                                    objToolCategoryMasterDTOList = objToolCategoryMasterDAL.GetToolCategoryByRoomIDPlain(SessionHelper.RoomID, SessionHelper.CompanyID).ToList();
                                    foreach (ToolMasterMain toolList in LstToolMasterMain.GroupBy(l => l.ToolCategory).Select(g => g.First()).ToList())
                                    {
                                        if (toolList.ToolCategory.ToLower().Trim() != string.Empty)
                                        {
                                            if ((from p in objToolCategoryMasterDTOList
                                                 where (p.ToolCategory.ToLower().Trim() == (toolList.ToolCategory.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                 select p).Any())
                                            {

                                            }
                                            else
                                            {
                                                ToolCategoryMasterDAL objDAL = new ToolCategoryMasterDAL(SessionHelper.EnterPriseDBName);
                                                ToolCategoryMasterDTO objDTO = new ToolCategoryMasterDTO();
                                                Int64 ToolCategoryID = GetIDs(ImportMastersDTO.TableName.ToolCategoryMaster, toolList.ToolCategory);
                                                objDTO = objToolCategoryMasterDAL.GetToolCategoryByIDNormal(ToolCategoryID, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                objToolCategoryMasterDTOList.Add(objDTO);

                                            }
                                        }
                                    }
                                    List<LocationMasterDTO> objLocationMasterDTOList = new List<LocationMasterDTO>();
                                    LocationMasterDAL objLocationMasterDAL = new LocationMasterDAL(SessionHelper.EnterPriseDBName);
                                    objLocationMasterDTOList = objLocationMasterDAL.GetLocationByRoomPlain(SessionHelper.RoomID, SessionHelper.CompanyID).ToList();
                                    foreach (ToolMasterMain toolList in LstToolMasterMain.GroupBy(l => l.Location).Select(g => g.First()).ToList())
                                    {
                                        if ((toolList.Location ?? string.Empty).ToLower().Trim() != string.Empty)
                                        {
                                            if ((from p in objLocationMasterDTOList
                                                 where (p.Location.ToLower().Trim() == (toolList.Location.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                 select p).Any())
                                            {

                                            }
                                            else
                                            {
                                                LocationMasterDAL objDAL = new LocationMasterDAL(SessionHelper.EnterPriseDBName);
                                                LocationMasterDTO objDTO = new LocationMasterDTO();
                                                objDTO = objDAL.GetLocationOrInsert(toolList.Location, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, "ToolNew>>Import");
                                                objLocationMasterDTOList.Add(objDTO);

                                            }
                                        }
                                        else
                                        {
                                            // FOR BLANK LOCATION
                                            LocationMasterDAL objDAL = new LocationMasterDAL(SessionHelper.EnterPriseDBName);
                                            LocationMasterDTO objDTO = new LocationMasterDTO();
                                            objDTO = objDAL.GetLocationOrInsert(string.Empty, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, "ToolNew>>Import");
                                            objLocationMasterDTOList.Add(objDTO);
                                        }
                                    }

                                    bool SaveToolList = true;
                                    ToolMasterDAL objToolDAL = new ToolMasterDAL(SessionHelper.EnterPriseDBName);
                                    ToolMasterDTO objToolMasterDTO = new ToolMasterDTO();
                                    foreach (ToolMasterMain item in LstToolMasterMain)
                                    {
                                        SaveToolList = true;
                                        ToolMasterMain objDTO = new ToolMasterMain();
                                        objDTO.ID = item.ID;
                                        objDTO.ToolName = item.ToolName;

                                        objDTO.Description = item.Description;
                                        objDTO.ToolCategory = item.ToolCategory;
                                        //objDTO.ToolCategoryID = item.ToolCategory == "" ? (long?)null : GetIDs(ImportMastersDTO.TableName.ToolCategoryMaster, item.ToolCategory);
                                        if (!string.IsNullOrWhiteSpace(item.ToolCategory))
                                        {
                                            if ((from p in objToolCategoryMasterDTOList
                                                 where (p.ToolCategory.ToLower().Trim() == (item.ToolCategory.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                 select p).Any())
                                            {
                                                objDTO.ToolCategoryID = (from p in objToolCategoryMasterDTOList
                                                                         where (p.ToolCategory.ToLower().Trim() == (item.ToolCategory.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                                         select p).FirstOrDefault().ID;
                                            }
                                            else
                                            {
                                                objDTO.ToolCategoryID = (long?)null;
                                            }

                                        }
                                        else
                                        {
                                            objDTO.ToolCategoryID = (long?)null;
                                        }
                                        objDTO.ToolCategory = item.ToolCategory;


                                        if ((from p in objLocationMasterDTOList
                                             where ((p.Location ?? string.Empty).ToLower().Trim() == ((item.Location ?? string.Empty).ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                             select p).Any())
                                        {
                                            objDTO.LocationID = (from p in objLocationMasterDTOList
                                                                 where ((p.Location ?? string.Empty).ToLower().Trim() == ((item.Location ?? string.Empty).ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                                 select p).FirstOrDefault().ID;
                                        }
                                        else
                                        {
                                            objDTO.LocationID = (long?)null;
                                        }


                                        objDTO.Location = item.Location;
                                        objDTO.IsGroupOfItems = item.IsGroupOfItems;
                                        objDTO.Cost = item.Cost ?? 0;
                                        objDTO.Quantity = item.Quantity;
                                        objDTO.UDF1 = item.UDF1;
                                        objDTO.UDF2 = item.UDF2;
                                        objDTO.UDF3 = item.UDF3;
                                        objDTO.UDF4 = item.UDF4;
                                        objDTO.UDF5 = item.UDF5;


                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();
                                        objDTO.AddedFrom = "Web";
                                        objDTO.EditedFrom = "Web";
                                        objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                        objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;



                                        objDTO.ImageType = "ExternalImage";
                                        objDTO.ImagePath = item.ImagePath;
                                        objDTO.ToolImageExternalURL = item.ToolImageExternalURL;
                                        objDTO.SerialNumberTracking = item.SerialNumberTracking;
                                        objDTO.Serial = item.Serial;
                                        if (objDTO.SerialNumberTracking == true)
                                        {
                                            objDTO.Serial = string.Empty;
                                            objDTO.Quantity = 0;
                                            objDTO.ToolTypeTracking = "2";
                                        }
                                        if (string.IsNullOrWhiteSpace(item.ToolImageExternalURL) && (!string.IsNullOrEmpty(item.ImagePath)))
                                        {
                                            objDTO.ImageType = "ImagePath";
                                        }

                                        if (!AllowToolOrdering)
                                        {
                                            objDTO.CheckOutUDF1 = item.CheckOutUDF1;
                                            objDTO.CheckOutUDF2 = item.CheckOutUDF2;
                                            objDTO.CheckOutUDF3 = item.CheckOutUDF3;
                                            objDTO.CheckOutUDF4 = item.CheckOutUDF4;
                                            objDTO.CheckOutUDF5 = item.CheckOutUDF5;
                                            objDTO.CheckOutQuantity = item.CheckOutQuantity;
                                            objDTO.CheckInQuantity = item.CheckInQuantity;

                                            if (!string.IsNullOrWhiteSpace(item.Technician))
                                            {
                                                if ((from p in objTechnicialMasterDALList
                                                     where (p.TechnicianCode.ToLower().Trim() == (item.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                     select p).Any())
                                                {
                                                    objDTO.TechnicianGuid = (from p in objTechnicialMasterDALList
                                                                             where (p.TechnicianCode.ToLower().Trim() == (item.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                                             select p).FirstOrDefault().GUID;
                                                }

                                            }
                                        }

                                        if (!AllowToolOrdering)
                                        {
                                            objToolMasterDTO = objToolDAL.GetToolBySerialPlain(item.Serial, SessionHelper.RoomID, SessionHelper.CompanyID);
                                        }
                                        else
                                        {
                                            //if (objDTO.SerialNumberTracking)
                                            //{
                                            //    objToolMasterDTO = objToolDAL.GetToolByToolName((objDTO.ToolName ?? string.Empty).Trim(), SessionHelper.RoomID, SessionHelper.CompanyID);
                                            //}
                                            //else
                                            {
                                                objToolMasterDTO = objToolDAL.GetToolBySerialAndNamePlain((objDTO.ToolName ?? string.Empty).Trim(), (objDTO.Serial ?? string.Empty).Trim(), SessionHelper.RoomID, SessionHelper.CompanyID);
                                            }

                                        }

                                        if (!AllowToolOrdering)
                                        {
                                            if (objToolMasterDTO != null)
                                            {
                                                if (objToolMasterDTO.ToolName == item.ToolName)
                                                {
                                                    objDTO.Serial = item.Serial;
                                                }
                                                else
                                                {
                                                    SaveToolList = false;
                                                    objDTO.Status = "Fail";
                                                    objDTO.Reason = ResMessage.DuplicateSerialNumber;
                                                }
                                            }
                                            else
                                            {
                                                objDTO.Serial = item.Serial;
                                            }
                                        }
                                        else
                                        {
                                            if (objToolMasterDTO != null)
                                            {
                                                if (objToolMasterDTO.Serial == item.Serial)
                                                {
                                                    objDTO.ToolName = item.ToolName;
                                                }
                                                //else
                                                //{
                                                //    SaveToolList = false;
                                                //    objDTO.Status = "Fail";
                                                //    objDTO.Reason = ResMessage.DuplicateToolName;
                                                //}
                                            }
                                            else
                                            {
                                                objDTO.ToolName = item.ToolName;
                                            }
                                        }

                                        /*/////CODE FOR CHECK UDF IS REQUIRED///////*/
                                        string errorMsg = string.Empty;
                                        CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);
                                        if (!string.IsNullOrWhiteSpace(errorMsg))
                                        {
                                            item.Status = "Fail";
                                            if (!string.IsNullOrEmpty(item.Reason))
                                                item.Reason += errorMsg;
                                            else
                                                item.Reason = errorMsg;
                                            SaveToolList = false;
                                            objDTO = item;

                                        }
                                        /*/////CODE FOR CHECK UDF IS REQUIRED///////*/

                                        if (!AllowToolOrdering)
                                        {
                                            /*/////CODE FOR CHECK CHECKOUT UDF IS REQUIRED///////*/
                                            if (item.CheckOutQuantity.HasValue && item.CheckOutQuantity.Value > 0)
                                            {
                                                string checkOutErrorMsg = string.Empty;
                                                CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB_ToolCheckOut, item.CheckOutUDF1, item.CheckOutUDF2, item.CheckOutUDF3, item.CheckOutUDF4, item.CheckOutUDF5, out checkOutErrorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture,"CheckOut");
                                                if (!string.IsNullOrWhiteSpace(checkOutErrorMsg))
                                                {
                                                    item.Status = "Fail";
                                                    if (!string.IsNullOrEmpty(item.Reason))
                                                        item.Reason += checkOutErrorMsg;
                                                    else
                                                        item.Reason = checkOutErrorMsg;
                                                    SaveToolList = false;
                                                    objDTO = item;

                                                }
                                            }
                                            /*/////CODE FOR CHECK CHECKOUT UDF IS REQUIRED///////*/
                                        }

                                        if (item.ToolName.Trim() != "" && SaveToolList)
                                        {
                                            var itemval = CurrentToolList.FirstOrDefault(x => x.ToolName == item.ToolName && (x.Serial ?? string.Empty) == (item.Serial ?? string.Empty));
                                            if (itemval != null)
                                                CurrentToolList.Remove(itemval);

                                            CurrentToolList.Add(objDTO);

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportToolMasterColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportToolMasterColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportToolMasterColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportToolMasterColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportToolMasterColumn.UDF5.ToString());

                                        }
                                        else
                                            CurrentBlankToolMasterMain.Add(objDTO);
                                    }

                                    List<ToolMasterMain> lstreturn = new List<ToolMasterMain>();
                                    if (CurrentToolList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ToolMaster.ToString(), CurrentToolList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList, isImgZipAvail, isLink2ZipAvail, _AllowToolOrdering: AllowToolOrdering);


                                    foreach (ToolMasterMain item in LstToolMasterMain)
                                    {
                                        if (lstreturn.Where(l => l.ToolName.Trim().ToLower() == item.ToolName.Trim().ToLower() && (l.Serial ?? string.Empty) == (item.Serial ?? string.Empty)).Any())
                                        {
                                            item.Reason = lstreturn.Where(l => l.ToolName.Trim().ToLower() == item.ToolName.Trim().ToLower() && (l.Serial ?? string.Empty) == (item.Serial ?? string.Empty)).FirstOrDefault().Reason;
                                            item.Status = lstreturn.Where(l => l.ToolName.Trim().ToLower() == item.ToolName.Trim().ToLower() && (l.Serial ?? string.Empty) == (item.Serial ?? string.Empty)).FirstOrDefault().Status;
                                        }
                                    }
                                    lstreturn = new List<ToolMasterMain>();
                                    foreach (ToolMasterMain insertedToolList in CurrentToolList)
                                    {
                                        foreach (ToolMasterMain item in LstToolMasterMain.Where(l => l.ToolName.ToLower().Trim() == insertedToolList.ToolName.ToLower().Trim() && (l.Serial ?? string.Empty) == (insertedToolList.Serial ?? string.Empty)))
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    #region [Tool CheckIn CheckOut for Old Tool functionality]
                                    if (!AllowToolOrdering)
                                    {
                                        ToolCheckInHistoryDAL objCIDAL = new ToolCheckInHistoryDAL(SessionHelper.EnterPriseDBName);
                                        objToolDAL = new ToolMasterDAL(SessionHelper.EnterPriseDBName);
                                        ToolCheckInOutHistoryDAL objCICODAL = new ToolCheckInOutHistoryDAL(SessionHelper.EnterPriseDBName);
                                        bool AllowCheckinCheckOut = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowCheckInCheckout);
                                        if (AllowCheckinCheckOut)
                                        {
                                            lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ToolCheckInOutHistory.ToString());

                                            foreach (ToolMasterMain item in lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success" && l.CheckOutQuantity > 0))
                                            {
                                                ToolCheckInHistoryDTO objCIDTO = new ToolCheckInHistoryDTO();
                                                ToolCheckInOutHistoryDTO objCICODTO = new ToolCheckInOutHistoryDTO();
                                                ToolMasterDTO objtool = new ToolMasterDAL(SessionHelper.EnterPriseDBName).GetToolBySerialAndNamePlain(item.ToolName, item.Serial, SessionHelper.RoomID, SessionHelper.CompanyID);

                                                objCICODTO.CompanyID = SessionHelper.CompanyID;
                                                objCICODTO.Created = DateTimeUtility.DateTimeNow;
                                                objCICODTO.CreatedBy = SessionHelper.UserID;
                                                objCICODTO.CreatedByName = SessionHelper.UserName;
                                                objCICODTO.IsArchived = false;
                                                objCICODTO.IsDeleted = false;
                                                objCICODTO.LastUpdatedBy = SessionHelper.UserID;
                                                objCICODTO.Room = SessionHelper.RoomID;
                                                objCICODTO.RoomName = SessionHelper.RoomName;
                                                objCICODTO.ToolGUID = objtool.GUID;
                                                objCICODTO.Updated = DateTimeUtility.DateTimeNow;
                                                objCICODTO.UpdatedByName = SessionHelper.UserName;
                                                if (!string.IsNullOrWhiteSpace(item.Technician))
                                                {
                                                    if ((from p in objTechnicialMasterDALList
                                                         where (p.TechnicianCode.ToLower().Trim() == (item.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                         select p).Any())
                                                    {
                                                        objCICODTO.TechnicianGuid = (from p in objTechnicialMasterDALList
                                                                                     where (p.TechnicianCode.ToLower().Trim() == (item.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                                                     select p).FirstOrDefault().GUID;
                                                    }
                                                }
                                                // objCICODTO.TechnicianGuid = item.TechnicianGuid;


                                                //Save CheckOut UDF
                                                objCICODTO.UDF1 = item.CheckOutUDF1;
                                                objCICODTO.UDF2 = item.CheckOutUDF2;
                                                objCICODTO.UDF3 = item.CheckOutUDF3;
                                                objCICODTO.UDF4 = item.CheckOutUDF4;
                                                objCICODTO.UDF5 = item.CheckOutUDF5;
                                                objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);

                                                UDFDataFromDB = objUDFDAL.GetUDFsByUDFTableNamePlain("ToolCheckInOutHistory", SessionHelper.RoomID, SessionHelper.CompanyID);
                                                UDFController objUDFController = new UDFController();
                                                if ((!string.IsNullOrWhiteSpace(objCICODTO.UDF1)) && UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf1").Any())
                                                {
                                                    Int64 UDFID = UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf1").FirstOrDefault().ID;
                                                    if ((lst != null && lst.Where(c => c.UDFID == UDFID && c.UDFOption == objCICODTO.UDF1).Count() == 0) || (lst == null))
                                                    {
                                                        objUDFController.InsertUDFOptionNew(UDFID, objCICODTO.UDF1, "ToolCheckInOutHistory", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                }
                                                if ((!string.IsNullOrWhiteSpace(objCICODTO.UDF2)) && UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf2").Any())
                                                {
                                                    Int64 UDFID = UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf2").FirstOrDefault().ID;
                                                    if ((lst != null && lst.Where(c => c.UDFID == UDFID && c.UDFOption == objCICODTO.UDF2).Count() == 0) || (lst == null))
                                                    {
                                                        objUDFController.InsertUDFOptionNew(UDFID, objCICODTO.UDF2, "ToolCheckInOutHistory", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                }
                                                if ((!string.IsNullOrWhiteSpace(objCICODTO.UDF3)) && UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf3").Any())
                                                {
                                                    Int64 UDFID = UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf3").FirstOrDefault().ID;
                                                    if ((lst != null && lst.Where(c => c.UDFID == UDFID && c.UDFOption == objCICODTO.UDF3).Count() == 0) || (lst == null))
                                                    {
                                                        objUDFController.InsertUDFOptionNew(UDFID, objCICODTO.UDF3, "ToolCheckInOutHistory", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                }
                                                if ((!string.IsNullOrWhiteSpace(objCICODTO.UDF4)) && UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf4").Any())
                                                {
                                                    Int64 UDFID = UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf4").FirstOrDefault().ID;
                                                    if ((lst != null && lst.Where(c => c.UDFID == UDFID && c.UDFOption == objCICODTO.UDF4).Count() == 0) || (lst == null))
                                                    {
                                                        objUDFController.InsertUDFOptionNew(UDFID, objCICODTO.UDF4, "ToolCheckInOutHistory", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                }
                                                if ((!string.IsNullOrWhiteSpace(objCICODTO.UDF5)) && UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf5").Any())
                                                {
                                                    Int64 UDFID = UDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf5").FirstOrDefault().ID;
                                                    if ((lst != null && lst.Where(c => c.UDFID == UDFID && c.UDFOption == objCICODTO.UDF5).Count() == 0) || (lst == null))
                                                    {
                                                        objUDFController.InsertUDFOptionNew(UDFID, objCICODTO.UDF5, "ToolCheckInOutHistory", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                }
                                                objCICODTO.AddedFrom = "Web";
                                                objCICODTO.EditedFrom = "Web";
                                                objCICODTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objCICODTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                objCICODTO.IsOnlyFromItemUI = true;

                                                //if (objtool.Quantity == null)
                                                //    objtool.Quantity = 0;

                                                if (objtool.CheckedOutQTY == null)
                                                    objtool.CheckedOutQTY = 0;

                                                if (objtool.CheckedOutMQTY == null)
                                                    objtool.CheckedOutMQTY = 0;

                                                if (item.CheckOutQuantity == null)
                                                    item.CheckOutQuantity = 0;

                                                objCICODTO.CheckedOutQTY = objtool.Quantity >= (objtool.CheckedOutQTY + objtool.CheckedOutMQTY + item.CheckOutQuantity) ? (item.CheckOutQuantity) : (objtool.Quantity - (objtool.CheckedOutQTY + objtool.CheckedOutMQTY));
                                                objCICODTO.CheckedOutMQTY = 0;

                                                objCICODTO.CheckedOutQTYCurrent = 0;

                                                objCICODTO.CheckOutDate = DateTimeUtility.DateTimeNow;
                                                objCICODTO.CheckOutStatus = "Check Out";

                                                if (objCICODTO.CheckedOutQTY > 0)
                                                {
                                                    objCICODAL.Insert(objCICODTO);
                                                }

                                                ToolMasterDTO objToolDTO = objToolDAL.GetToolByGUIDPlain(objtool.GUID);
                                                objToolDTO.CheckedOutQTY = objToolDTO.CheckedOutQTY.GetValueOrDefault(0) + objCICODTO.CheckedOutQTY;
                                                objToolDTO.EditedFrom = "Web";
                                                objToolDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objToolDTO.IsOnlyFromItemUI = true;
                                                if (item.CheckOutUDF1 != null && item.CheckOutUDF1 != string.Empty)
                                                    InsertCheckOutUDf(item.CheckOutUDF1, CommonUtility.ImportToolMasterColumn.UDF1.ToString());
                                                if (item.CheckOutUDF2 != null && item.CheckOutUDF2 != string.Empty)
                                                    InsertCheckOutUDf(item.CheckOutUDF2, CommonUtility.ImportToolMasterColumn.UDF2.ToString());
                                                if (item.CheckOutUDF3 != null && item.CheckOutUDF3 != string.Empty)
                                                    InsertCheckOutUDf(item.CheckOutUDF3, CommonUtility.ImportToolMasterColumn.UDF3.ToString());
                                                if (item.CheckOutUDF4 != null && item.CheckOutUDF4 != string.Empty)
                                                    InsertCheckOutUDf(item.CheckOutUDF4, CommonUtility.ImportToolMasterColumn.UDF4.ToString());
                                                if (item.CheckOutUDF5 != null && item.CheckOutUDF5 != string.Empty)
                                                    InsertCheckOutUDf(item.CheckOutUDF5, CommonUtility.ImportToolMasterColumn.UDF5.ToString());

                                                objToolDAL.Edit(objToolDTO);

                                            }
                                        }
                                        objToolDAL = new ToolMasterDAL(SessionHelper.EnterPriseDBName);
                                        objCIDAL = new ToolCheckInHistoryDAL(SessionHelper.EnterPriseDBName);
                                        objCICODAL = new ToolCheckInOutHistoryDAL(SessionHelper.EnterPriseDBName);
                                        if (AllowCheckinCheckOut)
                                        {
                                            foreach (ToolMasterMain item in lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success" && l.CheckInQuantity > 0))
                                            {

                                                ToolCheckInHistoryDTO objCIDTO = new ToolCheckInHistoryDTO();
                                                ToolCheckInOutHistoryDTO objCICODTO = new ToolCheckInOutHistoryDTO();
                                                //List<ToolCheckInOutHistoryDTO> objToolCheckInOutHistoryDTOList = objCICODAL.GetAllRecords(SessionHelper.RoomID, SessionHelper.CompanyID).ToList();
                                                ToolMasterDTO objtool = objToolDAL.GetToolBySerialAndNamePlain(item.ToolName, item.Serial, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                //objToolCheckInOutHistoryDTOList = objToolCheckInOutHistoryDTOList.Where(co => co.ToolGUID == objtool.GUID).ToList();
                                                List<ToolCheckInOutHistoryDTO> objToolCheckInOutHistoryDTOList = objCICODAL.GetTCIOHsByToolGUIDWithToolInfo(objtool.GUID, SessionHelper.RoomID, SessionHelper.CompanyID);


                                                objCIDTO.CompanyID = SessionHelper.CompanyID;
                                                objCIDTO.Created = DateTimeUtility.DateTimeNow;
                                                objCIDTO.CreatedBy = SessionHelper.UserID;
                                                objCIDTO.CreatedByName = SessionHelper.UserName;
                                                objCIDTO.IsArchived = false;
                                                objCIDTO.IsDeleted = false;
                                                objCIDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objCIDTO.Room = SessionHelper.RoomID;
                                                objCIDTO.RoomName = SessionHelper.RoomName;

                                                //if (CheckInCheckOutGUID != "" && Guid.Parse(CheckInCheckOutGUID) != Guid.Empty)
                                                //    objCIDTO.CheckInCheckOutGUID = Guid.Parse(CheckInCheckOutGUID);
                                                objCIDTO.Updated = DateTimeUtility.DateTimeNow;
                                                objCIDTO.UpdatedByName = SessionHelper.UserName;


                                                objCIDTO.CheckedOutMQTY = 0;

                                                objCIDTO.CheckInDate = DateTimeUtility.DateTimeNow;
                                                objCIDTO.CheckOutStatus = "Check In";
                                                objCIDTO.IsOnlyFromItemUI = true;
                                                objCIDTO.AddedFrom = "Web";
                                                objCIDTO.EditedFrom = "Web";
                                                objCIDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objCIDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                //objCIDTO.TechnicianGuid = item.TechnicianGuid;
                                                if (!string.IsNullOrWhiteSpace(item.Technician))
                                                {
                                                    if ((from p in objTechnicialMasterDALList
                                                         where (p.TechnicianCode.ToLower().Trim() == (item.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                         select p).Any())
                                                    {
                                                        objCIDTO.TechnicianGuid = (from p in objTechnicialMasterDALList
                                                                                   where (p.TechnicianCode.ToLower().Trim() == (item.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                                                   select p).FirstOrDefault().GUID;
                                                    }
                                                }
                                                double checkinQty = item.CheckInQuantity ?? 0;
                                                foreach (var COHistroy in objToolCheckInOutHistoryDTOList.Where(o => o.CheckedOutQTY > o.CheckedOutQTYCurrent && o.TechnicianGuid == objCIDTO.TechnicianGuid))
                                                {
                                                    if (checkinQty > 0)
                                                    {
                                                        objCIDTO.CheckedOutQTY = COHistroy.CheckedOutQTY - COHistroy.CheckedOutQTYCurrent >= checkinQty ? checkinQty : COHistroy.CheckedOutQTY - COHistroy.CheckedOutQTYCurrent;
                                                        objCIDTO.CheckInCheckOutGUID = COHistroy.GUID;
                                                        objCIDTO.TechnicianGuid = COHistroy.TechnicianGuid;
                                                        objCIDAL.Insert(objCIDTO);
                                                        checkinQty = checkinQty - objCIDTO.CheckedOutQTY ?? 0;

                                                        ToolCheckInOutHistoryDTO objPrvCICODTO = objCICODAL.GetTCIOHByGUIDPlain(COHistroy.GUID, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                        if (objPrvCICODTO != null)
                                                        {
                                                            objPrvCICODTO.CheckedOutQTYCurrent = objPrvCICODTO.CheckedOutQTYCurrent.GetValueOrDefault(0) + objCIDTO.CheckedOutQTY;

                                                            objPrvCICODTO.IsOnlyFromItemUI = true;
                                                            objPrvCICODTO.EditedFrom = "Web";
                                                            objPrvCICODTO.ReceivedOn = DateTimeUtility.DateTimeNow;

                                                            objCICODAL.Edit(objPrvCICODTO);
                                                        }
                                                    }
                                                }
                                                checkinQty = (item.CheckInQuantity ?? 0) - checkinQty;
                                                objtool.IsOnlyFromItemUI = true;

                                                objtool.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objtool.EditedFrom = "Web";
                                                objtool.CheckedOutQTY = objtool.CheckedOutQTY > checkinQty ? objtool.CheckedOutQTY - checkinQty : objtool.CheckedOutQTY - objtool.CheckedOutQTY;
                                                objToolDAL.Edit(objtool);

                                                //ToolLocationDetailsDTO objToolLocationDetailsDTO = null;
                                                //ToolLocationDetailsDAL objToolLocationDetailsDAL = new ToolLocationDetailsDAL(SessionHelper.EnterPriseDBName);
                                                //LocationMasterDTO objLocationMasterDTO = null;
                                                //if (objtool.LocationID.GetValueOrDefault(0) <= 0)
                                                //{
                                                //    objToolLocationDetailsDTO = objToolLocationDetailsDAL.GetToolLocation(objtool.GUID, string.Empty, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, "ImportController>>CheckInQty(Saveimport)");
                                                //}
                                                //else
                                                //{
                                                //    LocationMasterDAL objLocationCntrl = new eTurns.DAL.LocationMasterDAL(SessionHelper.EnterPriseDBName);
                                                //    List<LocationMasterDTO> lstLocation = objLocationCntrl.GetLocationForRoomWise(SessionHelper.RoomID, SessionHelper.CompanyID, false, false).ToList();
                                                //    objLocationMasterDTO = lstLocation.Where(i => i.ID == objtool.LocationID).FirstOrDefault();
                                                //    objToolLocationDetailsDTO = objToolLocationDetailsDAL.GetToolLocation(objtool.GUID, objLocationMasterDTO.Location, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, "ImportController>>CheckInQty(Saveimport)");

                                                //}
                                                //ToolAssetQuantityDetailDTO objToolAssetQuantityDetailDTO = new ToolAssetQuantityDetailDTO();
                                                //objToolAssetQuantityDetailDTO.ToolGUID = objtool.GUID;

                                                //objToolAssetQuantityDetailDTO.AssetGUID = null;


                                                //objToolAssetQuantityDetailDTO.ToolBinID = objToolLocationDetailsDTO != null ? objToolLocationDetailsDTO.ID : ((objLocationMasterDTO != null) ? objLocationMasterDTO.ID : 0);
                                                //objToolAssetQuantityDetailDTO.Quantity = checkinQty;
                                                //objToolAssetQuantityDetailDTO.RoomID = SessionHelper.RoomID;
                                                //objToolAssetQuantityDetailDTO.CompanyID = SessionHelper.CompanyID;
                                                //objToolAssetQuantityDetailDTO.Created = DateTimeUtility.DateTimeNow;
                                                //objToolAssetQuantityDetailDTO.Updated = DateTimeUtility.DateTimeNow;
                                                //objToolAssetQuantityDetailDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                //objToolAssetQuantityDetailDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                //objToolAssetQuantityDetailDTO.AddedFrom = "Web";
                                                //objToolAssetQuantityDetailDTO.EditedFrom = "Web";
                                                //objToolAssetQuantityDetailDTO.WhatWhereAction = "ImportController>>SaveImport";
                                                //objToolAssetQuantityDetailDTO.ReceivedDate = null;
                                                //objToolAssetQuantityDetailDTO.InitialQuantityWeb = checkinQty;
                                                //objToolAssetQuantityDetailDTO.InitialQuantityPDA = 0;
                                                //objToolAssetQuantityDetailDTO.ExpirationDate = null;
                                                //objToolAssetQuantityDetailDTO.EditedOnAction = "Tool was Checkin from Web Import(using ToolMaster Import).";
                                                //objToolAssetQuantityDetailDTO.CreatedBy = SessionHelper.UserID;
                                                //objToolAssetQuantityDetailDTO.UpdatedBy = SessionHelper.UserID;
                                                //objToolAssetQuantityDetailDTO.IsDeleted = false;
                                                //objToolAssetQuantityDetailDTO.IsArchived = false;

                                                //ToolAssetQuantityDetailDAL objToolAssetQuantityDetailDAL = new ToolAssetQuantityDetailDAL(SessionHelper.EnterPriseDBName);
                                                //objToolAssetQuantityDetailDAL.Insert(objToolAssetQuantityDetailDTO,false, ReferalAction: "Check In",SerialNumber:objtool.Serial);
                                            }
                                        }

                                    }
                                    #endregion

                                    if (CurrentBlankToolMasterMain.Count > 0)
                                    {
                                        foreach (ToolMasterMain item in CurrentBlankToolMasterMain)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {


                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        /*----------CODE FOR SAVE ID AND IMAGE MAPPING FOR RETURN-------------- */
                                        savedOnlyitemIds = string.Join(",", lstreturn.Where(i => i.ID != 0 && (!string.IsNullOrEmpty(i.ImagePath)) && i.Status != null && i.Status.ToLower() == "success").Select(p => p.ID.ToString() + "#" + p.ImagePath.ToString()));

                                        string SerialNameList = string.Empty;
                                        string ToolNameList = string.Empty;
                                        List<ToolMasterDTO> toolList = null;

                                        SerialNameList = string.Join("@", lstreturn.Where(i => i.ID == 0 && (!string.IsNullOrEmpty(i.ImagePath)) && i.Status != null && i.Status.ToLower() == "success").Select(a => a.Serial));
                                        ToolNameList = string.Join("@", lstreturn.Where(i => i.ID == 0 && (!string.IsNullOrEmpty(i.ImagePath)) && i.Status != null && i.Status.ToLower() == "success").Select(a => a.ToolName));
                                        toolList = new ToolMasterDAL(SessionHelper.EnterPriseDBName).GetToolBySerialsAndNamesPlain(ToolNameList, SerialNameList, SessionHelper.RoomID, SessionHelper.CompanyID);


                                        foreach (ToolMasterDTO b in toolList)
                                        {
                                            ToolMasterMain objToolMaster = null;

                                            objToolMaster = lstreturn.Where(i => i.ToolName == b.ToolName && i.Serial == b.Serial && (!string.IsNullOrEmpty(i.ImagePath))).FirstOrDefault();


                                            if (objToolMaster != null)
                                            {
                                                if (string.IsNullOrEmpty(savedOnlyitemIds))
                                                {
                                                    savedOnlyitemIds = b.ID + "#" + objToolMaster.ImagePath.ToString();
                                                }
                                                else
                                                {
                                                    savedOnlyitemIds += "," + b.ID + "#" + objToolMaster.ImagePath.ToString();
                                                }
                                            }
                                        }
                                        /*----------CODE FOR SAVE ID AND IMAGE MAPPING FOR RETURN-------------- */

                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<ToolMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                    eTurns.DAL.CacheHelper<IEnumerable<ToolMasterDTO>>.InvalidateCache();

                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.AssetToolSchedulerMapping:
                            #region Asset Tool Scheduler Mapping
                            //else if (ImportMastersDTO.TableName.AssetToolSchedulerMapping.ToString() == TableName)
                            {

                                List<AssetToolSchedulerMapping> CurrentBlankATSchMappingList = new List<AssetToolSchedulerMapping>();

                                AssetToolSchedulerMapping[] LstATSchMapping = s.Deserialize<AssetToolSchedulerMapping[]>(para);

                                if (LstATSchMapping != null && LstATSchMapping.Length > 0)
                                {

                                    CurrentAssetToolSchedulerMappingList = new List<AssetToolSchedulerMapping>();
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, "ToolScheduleMapping");

                                    eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                    IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("ToolScheduleMapping", SessionHelper.RoomID, SessionHelper.CompanyID);
                                    CurrentOptionList = new List<UDFOptionsMain>();
                                    bool SaveToolList = true;
                                    ToolsSchedulerDAL objScheduleDAL = new ToolsSchedulerDAL(SessionHelper.EnterPriseDBName);
                                    ToolMasterDAL objToolDAL = new ToolMasterDAL(SessionHelper.EnterPriseDBName);
                                    AssetMasterDAL objAssetDAL = new AssetMasterDAL(SessionHelper.EnterPriseDBName);
                                    ToolsSchedulerDTO objScheduleDTO = null;
                                    ToolMasterDTO objToolMasterDTO = null;
                                    AssetMasterDTO objAssetMasterDTO = null;

                                    foreach (AssetToolSchedulerMapping item in LstATSchMapping)
                                    {
                                        SaveToolList = true;
                                        AssetToolSchedulerMapping objDTO = new AssetToolSchedulerMapping();
                                        objDTO.ID = item.ID;

                                        if (!string.IsNullOrWhiteSpace(item.ScheduleForName))
                                        {
                                            if (item.ScheduleForName.ToLower() != "tool" && item.ScheduleForName.ToLower() != "asset")
                                            {
                                                item.Status = "Fail";
                                                if (!string.IsNullOrEmpty(item.Reason))
                                                    item.Reason += (" " + ResToolMaster.SchedulerTypeToolOrAsset); 
                                                else
                                                    item.Reason = " " +  ResToolMaster.SchedulerTypeToolOrAsset;
                                                SaveToolList = false;
                                            }
                                            else
                                            {
                                                if (item.ScheduleForName.ToLower() == "tool")
                                                {
                                                    objDTO.SchedulerFor = 2;
                                                    if (string.IsNullOrWhiteSpace(item.Serial))
                                                    {
                                                        item.Status = "Fail";
                                                        if (!string.IsNullOrEmpty(item.Reason))
                                                            item.Reason += (" " + ResToolMaster.SerialRequiredForScheduleMapping) ;
                                                        else
                                                            item.Reason = " " + ResToolMaster.SerialRequiredForScheduleMapping;
                                                        SaveToolList = false;
                                                    }
                                                    if (string.IsNullOrWhiteSpace(item.ToolName))
                                                    {
                                                        item.Status = "Fail";
                                                        if (!string.IsNullOrEmpty(item.Reason))
                                                            item.Reason += (" " + ResToolMaster.ToolRequiredForScheduleMapping);
                                                        else
                                                            item.Reason = " " + ResToolMaster.ToolRequiredForScheduleMapping;
                                                        SaveToolList = false;
                                                    }
                                                }
                                                else if (item.ScheduleForName.ToLower() == "asset")
                                                {
                                                    objDTO.SchedulerFor = 1;
                                                    if (string.IsNullOrWhiteSpace(item.AssetName))
                                                    {
                                                        item.Status = "Fail";
                                                        if (!string.IsNullOrEmpty(item.Reason))
                                                            item.Reason += (" " + ResToolMaster.AssetNameReqForScheduleMapping);
                                                        else
                                                            item.Reason = " " + ResToolMaster.AssetNameReqForScheduleMapping;
                                                        SaveToolList = false;
                                                    }
                                                }
                                            }
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.Serial) && item.ScheduleForName.ToLower() == "tool")
                                        {
                                            objToolMasterDTO = objToolDAL.GetToolBySerialPlain(item.Serial, SessionHelper.RoomID, SessionHelper.CompanyID);
                                            if (objToolMasterDTO == null)
                                            {
                                                objToolMasterDTO = new ToolMasterDTO();

                                                objToolMasterDTO.ToolName = item.ToolName;
                                                objToolMasterDTO.Serial = item.Serial;
                                                objToolMasterDTO.IsDeleted = item.IsDeleted ?? false;
                                                objToolMasterDTO.IsArchived = false;
                                                objToolMasterDTO.Created = DateTimeUtility.DateTimeNow;
                                                objToolMasterDTO.Updated = DateTimeUtility.DateTimeNow;
                                                objToolMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objToolMasterDTO.Room = SessionHelper.RoomID;
                                                objToolMasterDTO.CompanyID = SessionHelper.CompanyID;
                                                objToolMasterDTO.CreatedBy = SessionHelper.UserID;
                                                objToolMasterDTO.AddedFrom = "Web";
                                                objToolMasterDTO.EditedFrom = "Web";
                                                objToolMasterDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objToolMasterDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                objToolMasterDTO.GUID = Guid.NewGuid();
                                                objToolDAL.Insert(objToolMasterDTO);
                                            }
                                            objDTO.ToolGUID = objToolMasterDTO.GUID;

                                            objDTO.AssetName = null;
                                            objDTO.ToolName = item.ToolName;
                                            objDTO.Serial = item.Serial;
                                            objDTO.AssetGUID = null;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.AssetName) && item.ScheduleForName.ToLower() == "asset")
                                        {
                                            objAssetMasterDTO = objAssetDAL.GetAssetByName(item.AssetName, SessionHelper.RoomID, SessionHelper.CompanyID);
                                            if (objAssetMasterDTO == null)
                                            {
                                                objAssetMasterDTO = new AssetMasterDTO();

                                                objAssetMasterDTO.AssetName = item.AssetName;
                                                objAssetMasterDTO.IsDeleted = item.IsDeleted ?? false;
                                                objAssetMasterDTO.IsArchived = false;
                                                objAssetMasterDTO.Created = DateTimeUtility.DateTimeNow;
                                                objAssetMasterDTO.Updated = DateTimeUtility.DateTimeNow;
                                                objAssetMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objAssetMasterDTO.Room = SessionHelper.RoomID;
                                                objAssetMasterDTO.CompanyID = SessionHelper.CompanyID;
                                                objAssetMasterDTO.CreatedBy = SessionHelper.UserID;
                                                objAssetMasterDTO.AddedFrom = "Web";
                                                objAssetMasterDTO.EditedFrom = "Web";
                                                objAssetMasterDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objAssetMasterDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                objAssetMasterDTO.GUID = Guid.NewGuid();
                                                objAssetDAL.Insert(objAssetMasterDTO);
                                            }

                                            objDTO.AssetGUID = objAssetMasterDTO.GUID;

                                            objDTO.AssetName = item.AssetName;
                                            objDTO.ToolName = null;
                                            objDTO.Serial = null;
                                            objDTO.ToolGUID = null;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.SchedulerName))
                                        {
                                            objDTO.SchedulerName = item.SchedulerName;
                                            objScheduleDTO = objScheduleDAL.GetToolSchedulerByNameAndFor(SessionHelper.RoomID, SessionHelper.CompanyID, false, false, item.SchedulerName, objDTO.SchedulerFor);
                                            if (objScheduleDTO == null)
                                            {
                                                objScheduleDTO = new ToolsSchedulerDTO();

                                                objScheduleDTO.SchedulerName = item.SchedulerName;
                                                objScheduleDTO.ScheduleFor = objDTO.SchedulerFor;
                                                objScheduleDTO.SchedulerType = 0;

                                                objScheduleDTO.IsDeleted = item.IsDeleted ?? false;
                                                objScheduleDTO.IsArchived = false;
                                                objScheduleDTO.Created = DateTimeUtility.DateTimeNow;
                                                objScheduleDTO.Updated = DateTimeUtility.DateTimeNow;
                                                objScheduleDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objScheduleDTO.Room = SessionHelper.RoomID;
                                                objScheduleDTO.CompanyID = SessionHelper.CompanyID;
                                                objScheduleDTO.CreatedBy = SessionHelper.UserID;
                                                objScheduleDTO.GUID = Guid.NewGuid();
                                                objScheduleDAL.Insert(objScheduleDTO);
                                            }

                                            objDTO.ToolSchedulerGuid = objScheduleDTO.GUID;
                                        }
                                        else
                                        {
                                            item.Status = "Fail";
                                            if (!string.IsNullOrEmpty(item.Reason))
                                                item.Reason += (" " + string.Format(ResMessage.MsgRequired, ResToolsScheduler.SchedulerName));
                                            else
                                                item.Reason = " " + string.Format(ResMessage.MsgRequired, ResToolsScheduler.SchedulerName); 
                                            SaveToolList = false;
                                        }

                                        if (objDTO.SchedulerFor != null
                                            && objDTO.ToolSchedulerGuid != null
                                            && (objDTO.AssetGUID != null || objDTO.ToolGUID != null))
                                        {
                                            bool IsMappingExists = objScheduleDAL.CheckScheduleMapping(objDTO.SchedulerFor, objDTO.ToolSchedulerGuid, objDTO.AssetGUID, objDTO.ToolGUID, SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                                            if (IsMappingExists == true)
                                            {
                                                item.Status = "Fail";
                                                if (!string.IsNullOrEmpty(item.Reason))
                                                    item.Reason += (" " + ResToolsSchedulerMapping.SchedulerMappingExist); 
                                                else
                                                    item.Reason = " " + ResToolsSchedulerMapping.SchedulerMappingExist;
                                                SaveToolList = false;
                                            }
                                            else
                                            {
                                                if (item.ScheduleForName.ToLower() == "tool")
                                                {
                                                    objDTO.AssetGUID = null;
                                                }
                                                if (item.ScheduleForName.ToLower() == "asset")
                                                {
                                                    objDTO.ToolGUID = null;
                                                }
                                            }
                                        }

                                        objDTO.ScheduleForName = item.ScheduleForName;

                                        objDTO.IsDeleted = item.IsDeleted ?? false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();

                                        lstItemGUID.Add(objDTO.GUID);


                                        /*/////CODE FOR CHECK UDF IS REQUIRED///////*/
                                        string errorMsg = string.Empty;
                                        CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);
                                        if (!string.IsNullOrEmpty(errorMsg))
                                        {
                                            item.Status = "Fail";
                                            if (!string.IsNullOrEmpty(item.Reason))
                                                item.Reason += errorMsg;
                                            else
                                                item.Reason = errorMsg;
                                            SaveToolList = false;
                                        }
                                        /*/////CODE FOR CHECK UDF IS REQUIRED///////*/

                                        objDTO.UDF1 = item.UDF1;
                                        objDTO.UDF2 = item.UDF2;
                                        objDTO.UDF3 = item.UDF3;
                                        objDTO.UDF4 = item.UDF4;
                                        objDTO.UDF5 = item.UDF5;

                                        objDTO.Reason = item.Reason;
                                        objDTO.Status = item.Status;

                                        if (!string.IsNullOrWhiteSpace(item.SchedulerName) && item.ScheduleForName.Trim() != "" && SaveToolList)
                                        {
                                            var itemval = CurrentAssetToolSchedulerMappingList.FirstOrDefault(x => x.SchedulerName.ToLower() == item.SchedulerName.ToLower()
                                                                                                                  && x.ScheduleForName.ToLower() == item.ScheduleForName.ToLower()
                                                                                                                  && ((item.ScheduleForName.ToLower() == "tool" && x.Serial.ToLower() == item.Serial.ToLower())
                                                                                                                      || (item.ScheduleForName.ToLower() == "asset" && x.AssetName.ToLower() == item.AssetName.ToLower())
                                                                                                                     ));

                                            if (itemval != null)
                                                CurrentAssetToolSchedulerMappingList.Remove(itemval);
                                            CurrentAssetToolSchedulerMappingList.Add(objDTO);


                                            item.Status = "Success";
                                            item.Reason = "N/A";

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportItemColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportItemColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportItemColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportItemColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportItemColumn.UDF5.ToString());

                                        }
                                        else
                                            CurrentBlankATSchMappingList.Add(item);
                                    }

                                    List<AssetToolSchedulerMapping> lstreturn = new List<AssetToolSchedulerMapping>();
                                    if (CurrentAssetToolSchedulerMappingList.Count > 0)
                                    {
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.AssetToolSchedulerMapping.ToString(), CurrentAssetToolSchedulerMappingList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    }

                                    if (CurrentBlankATSchMappingList.Count > 0)
                                    {
                                        foreach (AssetToolSchedulerMapping item in CurrentBlankATSchMappingList)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {

                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<AssetToolSchedulerMapping>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }


                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.AssetMaster:
                            #region AssetMaintainance

                            //else if (ImportMastersDTO.TableName.AssetMaster.ToString() == TableName)
                            {
                                List<AssetMasterMain> CurrentBlankAssetMasterMain = new List<AssetMasterMain>();
                                AssetMasterMain[] LstAssetMasterMain = s.Deserialize<AssetMasterMain[]>(para);
                                if (LstAssetMasterMain != null && LstAssetMasterMain.Length > 0)
                                {
                                    CurrentAssetMasterList = new List<AssetMasterMain>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.AssetMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.AssetMaster.ToString());

                                    eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                    IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("AssetMaster", SessionHelper.RoomID, SessionHelper.CompanyID);
                                    CurrentOptionList = new List<UDFOptionsMain>();
                                    bool saveData = true;
                                    foreach (AssetMasterMain item in LstAssetMasterMain)
                                    {
                                        saveData = true;
                                        AssetMasterMain objDTO = new AssetMasterMain();
                                        objDTO.ID = item.ID;
                                        objDTO.AssetName = item.AssetName;
                                        objDTO.Serial = item.Serial;
                                        objDTO.Description = item.Description;
                                        objDTO.Make = item.Make;
                                        objDTO.Model = item.Model;
                                        objDTO.AssetCategoryId = item.AssetCategory == "" ? (long?)null : GetIDs(ImportMastersDTO.TableName.AssetCategoryMaster, item.AssetCategory);
                                        objDTO.AssetCategory = item.AssetCategory;
                                        objDTO.DepreciatedValue = item.DepreciatedValue;
                                        objDTO.PurchasePrice = item.PurchasePrice;
                                        if (!string.IsNullOrEmpty(item.PurchaseDateString))
                                        {
                                            try
                                            {
                                                objDTO.PurchaseDate = DateTime.ParseExact(item.PurchaseDateString, SessionHelper.RoomDateFormat, ResourceHelper.CurrentCult);
                                            }
                                            catch
                                            {
                                                objDTO.PurchaseDate = null;
                                                objDTO.Status = "Fail";
                                                objDTO.Reason = string.Format(ResImportMasters.DateShouldBeInFormat,ResAssetMaster.PurchaseDate, SessionHelper.RoomDateFormat);
                                                saveData = false;
                                            }
                                        }
                                        objDTO.UDF1 = item.UDF1;
                                        objDTO.UDF2 = item.UDF2;
                                        objDTO.UDF3 = item.UDF3;
                                        objDTO.UDF4 = item.UDF4;
                                        objDTO.UDF5 = item.UDF5;
                                        objDTO.UDF6 = item.UDF6;
                                        objDTO.UDF7 = item.UDF7;
                                        objDTO.UDF8 = item.UDF8;
                                        objDTO.UDF9 = item.UDF9;
                                        objDTO.UDF10 = item.UDF10;
                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.IsAutoMaintain = true;
                                        objDTO.MaintenanceType = 0;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();
                                        objDTO.AddedFrom = "Web";
                                        objDTO.EditedFrom = "Web";
                                        objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                        objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;

                                        objDTO.ImageType = "ExternalImage";
                                        objDTO.ImagePath = item.ImagePath;
                                        objDTO.AssetImageExternalURL = item.AssetImageExternalURL;
                                        if (string.IsNullOrWhiteSpace(item.AssetImageExternalURL) && (!string.IsNullOrEmpty(item.ImagePath)))
                                        {
                                            objDTO.ImageType = "ImagePath";
                                        }

                                        /*/////CODE FOR CHECK UDF IS REQUIRED///////*/
                                        string errorMsg = string.Empty;
                                        CommonUtilityHelper.CheckUDFIsRequired_Asset(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, item.UDF6, item.UDF7, item.UDF8, item.UDF9, item.UDF10, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);
                                        if (!string.IsNullOrWhiteSpace(errorMsg))
                                        {
                                            item.Status = "Fail";
                                            if (!string.IsNullOrEmpty(item.Reason))
                                                item.Reason += errorMsg;
                                            else
                                                item.Reason = errorMsg;
                                            saveData = false;
                                            objDTO = item;
                                        }
                                        /*/////CODE FOR CHECK UDF IS REQUIRED///////*/

                                        if (item.AssetName.Trim() != "" && saveData)
                                        {
                                            CurrentAssetMasterList.Add(objDTO);

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportAssetMasterColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportAssetMasterColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportAssetMasterColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportAssetMasterColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportAssetMasterColumn.UDF5.ToString());

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportAssetMasterColumn.UDF6.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF7 == null ? "" : objDTO.UDF7, CommonUtility.ImportAssetMasterColumn.UDF7.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF8 == null ? "" : objDTO.UDF8, CommonUtility.ImportAssetMasterColumn.UDF8.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF9 == null ? "" : objDTO.UDF9, CommonUtility.ImportAssetMasterColumn.UDF9.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF10 == null ? "" : objDTO.UDF10, CommonUtility.ImportAssetMasterColumn.UDF10.ToString());

                                        }
                                        else
                                            CurrentBlankAssetMasterMain.Add(objDTO);
                                    }

                                    List<AssetMasterMain> lstreturn = new List<AssetMasterMain>();
                                    if (CurrentAssetMasterList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.AssetMaster.ToString(), CurrentAssetMasterList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList, isImgZipAvail, isLink2ZipAvail);
                                    if (CurrentBlankAssetMasterMain.Count > 0)
                                    {
                                        foreach (AssetMasterMain item in CurrentBlankAssetMasterMain)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        /*----------CODE FOR SAVE ID AND IMAGE MAPPING FOR RETURN-------------- */
                                        savedOnlyitemIds = string.Join(",", lstreturn.Where(i => i.ID != 0 && (!string.IsNullOrEmpty(i.ImagePath)) && i.Status != null && i.Status.ToLower() == "success").Select(p => p.ID.ToString() + "#" + p.ImagePath.ToString()));

                                        string AssetNameList = string.Join("@", lstreturn.Where(i => i.ID == 0 && (!string.IsNullOrEmpty(i.ImagePath)) && i.Status != null && i.Status.ToLower() == "success").Select(a => a.AssetName));

                                        List<AssetMasterDTO> assetList = new AssetMasterDAL(SessionHelper.EnterPriseDBName).GetRecordByAssetName(AssetNameList, SessionHelper.RoomID, SessionHelper.CompanyID);

                                        foreach (AssetMasterDTO b in assetList)
                                        {
                                            AssetMasterMain objAssetMaster = lstreturn.Where(i => i.AssetName == b.AssetName && (!string.IsNullOrEmpty(i.ImagePath))).FirstOrDefault();
                                            if (objAssetMaster != null)
                                            {
                                                if (string.IsNullOrEmpty(savedOnlyitemIds))
                                                {
                                                    savedOnlyitemIds = b.ID + "#" + objAssetMaster.ImagePath.ToString();
                                                }
                                                else
                                                {
                                                    savedOnlyitemIds += "," + b.ID + "#" + objAssetMaster.ImagePath.ToString();
                                                }
                                            }
                                        }
                                        /*----------CODE FOR SAVE ID AND IMAGE MAPPING FOR RETURN-------------- */
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<AssetMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }


                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.QuickListItems:
                            #region Quick List Item

                            //else if (ImportMastersDTO.TableName.QuickListItems.ToString() == TableName)
                            {
                                List<QuickListItemsMain> CurrentBlankQuickListItemsMain = new List<QuickListItemsMain>();
                                QuickListItemsMain[] LstQuickListItemsMain = s.Deserialize<QuickListItemsMain[]>(para);
                                if (LstQuickListItemsMain != null && LstQuickListItemsMain.Length > 0)
                                {
                                    CurrentQuickListMasterList = new List<QuickListItemsMain>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.QuickListItems.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.QuickListItems.ToString());
                                    CurrentOptionList = new List<UDFOptionsMain>();
                                    BinMasterDAL objItemLocationDetailsDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                                    foreach (QuickListItemsMain item in LstQuickListItemsMain)
                                    {
                                        QuickListItemsMain objDTO = new QuickListItemsMain();

                                        QuickListType _QLType;
                                        if (Enum.TryParse(item.Type, true, out _QLType))
                                            objDTO.QLType = _QLType;
                                        else
                                            objDTO.QLType = null;

                                        if (objDTO.QLType == null)
                                        {
                                            objDTO = item;
                                            objDTO.Status = "Fail";
                                            objDTO.Reason = string.Format(ResCommon.MsgInvalid, ResQuickList.ListType); // "Quick list type is invalid.";
                                            CurrentBlankQuickListItemsMain.Add(objDTO);
                                        }
                                        else
                                        {
                                            Guid? ItemGUID = GetGUID(ImportMastersDTO.TableName.ItemMaster, item.ItemNumber, "", (QuickListType)objDTO.QLType);
                                            if (ItemGUID.HasValue && ItemGUID != Guid.Empty)
                                            {
                                                objDTO.ItemGUID = ItemGUID.Value;
                                                objDTO.QuickListGUID = item.QuickListname == "" ? Guid.NewGuid() : GetGUID(ImportMastersDTO.TableName.QuickListItems, item.QuickListname, item.Comments, (QuickListType)objDTO.QLType);
                                                BinMasterDTO objBinMasterDTO = objItemLocationDetailsDAL.GetItemBinPlain(ItemGUID ?? Guid.Empty, item.BinNumber, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, false);
                                                if (objBinMasterDTO != null)
                                                    objDTO.BinID = objBinMasterDTO.ID;

                                                QuickListDAL objDAL = new QuickListDAL(SessionHelper.EnterPriseDBName);
                                                QuickListMasterDTO objQL = new QuickListMasterDTO();
                                                objQL = objDAL.GetQuickListMasterByName(item.QuickListname, SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                                                if (objQL != null)
                                                {
                                                    if (objQL.Type == Convert.ToInt32(QuickListType.Count))
                                                    {
                                                        ItemMasterDTO objItemDetails = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetItemWithoutJoins(0, ItemGUID);
                                                        if (objItemDetails != null)
                                                        {
                                                            if (objItemDetails.SerialNumberTracking
                                                                || objItemDetails.LotNumberTracking
                                                                || objItemDetails.DateCodeTracking)
                                                            {
                                                                objDTO = item;
                                                                if (Enum.TryParse(item.Type, true, out _QLType))
                                                                    objDTO.QLType = _QLType;
                                                                objDTO.Status = "Fail";
                                                                objDTO.Reason = ResQuickListItems.SerialLotDCNotAllowedForCountType; 
                                                                CurrentBlankQuickListItemsMain.Add(objDTO);
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                }

                                                objDTO.Quantity = item.Quantity;
                                                objDTO.ConsignedQuantity = item.ConsignedQuantity;
                                                objDTO.ItemNumber = item.ItemNumber;
                                                objDTO.QuickListname = item.QuickListname;
                                                objDTO.Comments = item.Comments;
                                                objDTO.UDF1 = item.UDF1;
                                                objDTO.UDF2 = item.UDF2;
                                                objDTO.UDF3 = item.UDF3;
                                                objDTO.UDF4 = item.UDF4;
                                                objDTO.UDF5 = item.UDF5;
                                                objDTO.IsDeleted = false;
                                                objDTO.IsArchived = false;
                                                objDTO.Created = DateTimeUtility.DateTimeNow;
                                                objDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                                                objDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objDTO.Room = SessionHelper.RoomID;
                                                objDTO.CompanyID = SessionHelper.CompanyID;
                                                objDTO.CreatedBy = SessionHelper.UserID;
                                                objDTO.GUID = Guid.NewGuid();
                                                objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objDTO.AddedFrom = "Web";
                                                objDTO.EditedFrom = "Web";
                                                objDTO.Type = item.Type;
                                                objDTO.BinNumber = item.BinNumber;
                                            }

                                            if (item.QuickListGUID.ToString().Trim() == "" || ItemGUID.HasValue && ItemGUID == Guid.Empty)
                                            {
                                                objDTO = item;
                                                if (ItemGUID.HasValue && ItemGUID == Guid.Empty)
                                                {
                                                    objDTO.Status = "Fail";
                                                    objDTO.Reason = ResItemMaster.MsgItemDoesNotExist;
                                                }
                                                CurrentBlankQuickListItemsMain.Add(objDTO);
                                            }
                                            else
                                            {
                                                var itemval = CurrentQuickListMasterList.FirstOrDefault(x => x.ItemGUID == objDTO.ItemGUID && x.QuickListGUID == objDTO.QuickListGUID && x.BinNumber == objDTO.BinNumber && x.BinID == objDTO.BinID);
                                                if (itemval != null)
                                                    CurrentQuickListMasterList.Remove(itemval);
                                                CurrentQuickListMasterList.Add(objDTO);

                                                CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportInventoryClassificationColumn.UDF1.ToString());
                                                CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportInventoryClassificationColumn.UDF2.ToString());
                                                CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportInventoryClassificationColumn.UDF3.ToString());
                                                CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportInventoryClassificationColumn.UDF4.ToString());
                                                CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportInventoryClassificationColumn.UDF5.ToString());
                                                ////CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportCategoryColumn.UDF6.ToString());
                                            }

                                            //if (item.QuickListGUID.ToString().Trim() != "" && ItemGUID.HasValue && ItemGUID != Guid.Empty)
                                            //{
                                            //    var itemval = CurrentQuickListMasterList.FirstOrDefault(x => x.ItemGUID == objDTO.ItemGUID && x.QuickListGUID == objDTO.QuickListGUID && x.BinNumber == objDTO.BinNumber && x.BinID == objDTO.BinID);
                                            //    if (itemval != null)
                                            //        CurrentQuickListMasterList.Remove(itemval);
                                            //    CurrentQuickListMasterList.Add(objDTO);
                                            //
                                            //    CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportInventoryClassificationColumn.UDF1.ToString());
                                            //    CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportInventoryClassificationColumn.UDF2.ToString());
                                            //    CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportInventoryClassificationColumn.UDF3.ToString());
                                            //    CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportInventoryClassificationColumn.UDF4.ToString());
                                            //    CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportInventoryClassificationColumn.UDF5.ToString());
                                            //    //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportCategoryColumn.UDF6.ToString());
                                            //}
                                            //else
                                            //{
                                            //    objDTO = item;
                                            //    if (ItemGUID.HasValue && ItemGUID == Guid.Empty)
                                            //    {
                                            //        objDTO.Status = "Fail";
                                            //        objDTO.Reason = "Item does not exist.";
                                            //    }
                                            //    CurrentBlankQuickListItemsMain.Add(objDTO);
                                            //}
                                        }
                                    }

                                    List<QuickListItemsMain> lstreturn = new List<QuickListItemsMain>();
                                    if (CurrentQuickListMasterList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.QuickListItems.ToString(), CurrentQuickListMasterList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    if (CurrentBlankQuickListItemsMain.Count > 0)
                                    {
                                        foreach (QuickListItemsMain item in CurrentBlankQuickListItemsMain)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<QuickListItemsMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }


                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.OrderMaster:
                        case ImportMastersDTO.TableName.ReturnOrders:
                            #region OrderMaster
                            //else if (ImportMastersDTO.TableName.OrderMaster.ToString() == TableName)
                            {
                                OrderMasterDAL objOrdDAL = new OrderMasterDAL(SessionHelper.EnterPriseDBName);
                                SupplierMasterDAL objSupplierMasterDAL = new SupplierMasterDAL(SessionHelper.EnterPriseDBName);
                                List<OrderMasterItemsMain> CurrentBlankQuickListItemsMain = new List<OrderMasterItemsMain>();
                                OrderMasterItemsMain[] LstOrderMasterItemsMain = s.Deserialize<OrderMasterItemsMain[]>(para);
                                if (LstOrderMasterItemsMain != null && LstOrderMasterItemsMain.Length > 0)
                                {
                                    string RoleCheck = "69,76,33,34";
                                    List<UserRoleModuleDetailsDTO> objUserRoleModuleDetailsDTO = new List<UserRoleModuleDetailsDTO>();
                                    if (SessionHelper.UserType == 1)
                                        objUserRoleModuleDetailsDTO = new eTurnsMaster.DAL.UserMasterDAL().GetUserRoleModuleDetails(SessionHelper.UserID, SessionHelper.RoleID, SessionHelper.RoomID, SessionHelper.CompanyID, RoleCheck);
                                    else if (SessionHelper.UserType == 2 || SessionHelper.UserType == 3)
                                        objUserRoleModuleDetailsDTO = new eTurns.DAL.UserMasterDAL(SessionHelper.EnterPriseDBName).GetUserRoleModuleDetails(SessionHelper.UserID, SessionHelper.RoleID, SessionHelper.RoomID, SessionHelper.CompanyID, RoleCheck);

                                    #region WI-7318	AB Integration | Sync Item cost when an item Added to Order line item.
                                   
                                    if (SessionHelper.AllowABIntegration)
                                    {
                                        List<string> ASINs = new List<string>();
                                        Dictionary<List<ItemMasterDTO>, string> lstNonOrderableItems = new Dictionary<List<ItemMasterDTO>, string>();
                                        foreach (var ABitem in LstOrderMasterItemsMain)
                                        {
                                            ItemMasterDTO objABItemDTO = new ItemMasterDTO();
                                            objABItemDTO = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetRecordByItemNumber(ABitem.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);

                                            if (objABItemDTO != null && !string.IsNullOrWhiteSpace(objABItemDTO.SupplierPartNo))
                                            {
                                                ProductDetailsDAL objProductDetailsDAL = new ProductDetailsDAL(SessionHelper.EnterPriseDBName);
                                                Int64 ABItemMappingID = objProductDetailsDAL.CheckItemAddedFromAB(objABItemDTO.SupplierPartNo, objABItemDTO.GUID, SessionHelper.CompanyID, SessionHelper.RoomID);
                                                if (ABItemMappingID > 0)
                                                {
                                                    ASINs.Add(objABItemDTO.SupplierPartNo);
                                                }
                                            }
                                        }
                                        if (ASINs != null && ASINs.Count > 0)
                                        {
                                            lstNonOrderableItems = eTurns.ABAPIBAL.Helper.ABAPIHelper.ItemSyncToRoom(ASINs, SessionHelper.CompanyID, SessionHelper.RoomID, SessionHelper.UserID, SessionHelper.EnterPriseDBName);
                                        }
                                        if (lstNonOrderableItems != null && lstNonOrderableItems.Count > 0
                                         && lstNonOrderableItems.Values.Contains("success")
                                         && lstNonOrderableItems.Keys.Count > 0
                                         && lstNonOrderableItems.Keys.SelectMany(c => c).ToList().Count > 0)    
                                        {
                                            List<ItemMasterDTO> lstReturnsItems = new List<ItemMasterDTO>();
                                            lstReturnsItems = lstNonOrderableItems.Keys.SelectMany(c => c).ToList();                                            
                                            foreach (OrderMasterItemsMain Ord in LstOrderMasterItemsMain.Where(x => !lstReturnsItems.Select(y => y.ItemNumber).Contains(x.ItemNumber)).ToArray())
                                            {
                                                Ord.Status = "Fail";
                                                Ord.Reason = string.Format(ResOrder.ItemnotOrderable, Ord.ItemNumber);
                                                continue;
                                            }
                                            LstOrderMasterItemsMain = LstOrderMasterItemsMain.Where(x => !lstReturnsItems.Select(y => y.ItemNumber).Contains(x.ItemNumber)).ToArray();
                                        }
                                    }
                                    #endregion
                                    
                                    CommonDAL objCommonDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
                                    List<OrderMasterItemsMain> lstreturn = objCommonDAL.InsertOrderImport(LstOrderMasterItemsMain.ToList(), SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.EnterPriseDBName, SessionHelper.UserID, SessionHelper.RoomDateFormat, SessionHelper.RoomCulture, objUserRoleModuleDetailsDTO, SessionUserId,SessionHelper.EnterPriceID, enumTable.ToString());
                                    List<OrderMasterItemsMain> lstOrder = lstreturn;

                                    #region Order Email Send
                                    if (lstOrder != null && lstOrder.Count > 0)
                                    {
                                        OrderController objOrdContlr = new OrderController();
                                        lstOrder = lstOrder.Where(x => x.Status.ToLower() == "success" && x.OrderGUID != Guid.Empty).ToList();
                                        List<string> LstOrderGUID = lstOrder.Select(x => x.OrderGUID.ToString()).Distinct().ToList();
                                        foreach (string strOrderGUID in LstOrderGUID)
                                        {
                                            OrderMasterDTO objDTO = objOrdDAL.GetOrderByGuidNormal(Guid.Parse(strOrderGUID));
                                            if (objDTO != null)
                                            {
                                                if (objDTO.OrderStatus == (int)OrderStatus.UnSubmitted)
                                                {
                                                    SupplierMasterDTO objSupplier = objSupplierMasterDAL.GetSupplierByIDPlain(objDTO.Supplier ?? 0);
                                                    objOrdContlr.SendMailOrderUnSubmitted(objSupplier, objDTO);
                                                }
                                                if (objDTO.OrderStatus == (int)OrderStatus.Submitted)
                                                {
                                                    objOrdContlr.SendMailToApprovalAuthority(objDTO);
                                                }
                                                if (objDTO.OrderStatus == (int)OrderStatus.Approved || objDTO.OrderStatus == (int)OrderStatus.Transmitted)
                                                {
                                                    eTurns.DAL.UserMasterDAL userMasterDAL = new eTurns.DAL.UserMasterDAL(SessionHelper.EnterPriseDBName);
                                                    eTurnsMaster.DAL.UserMasterDAL objReqRequesterUserMasterDAL = new eTurnsMaster.DAL.UserMasterDAL();
                                                    UserMasterDTO ReqUser = new UserMasterDTO();

                                                    string OrdRequesterEmailAddress = "";
                                                    string OrdApproverEmailAddress = "";
                                                    if (objDTO.RequesterID.GetValueOrDefault(0) > 0)
                                                    {
                                                        ReqUser = objReqRequesterUserMasterDAL.GetUserByIdPlain(objDTO.RequesterID.GetValueOrDefault(0));
                                                        if (ReqUser == null)
                                                        {
                                                            ReqUser = userMasterDAL.GetUserByIdPlain(objDTO.RequesterID.GetValueOrDefault(0));
                                                        }
                                                        if (ReqUser != null && !string.IsNullOrWhiteSpace(ReqUser.Email))
                                                        {
                                                            OrdRequesterEmailAddress = ReqUser.Email;
                                                        }
                                                    }
                                                    if (objDTO.ApproverID.GetValueOrDefault(0) > 0)
                                                    {
                                                        ReqUser = objReqRequesterUserMasterDAL.GetUserByIdPlain(objDTO.ApproverID.GetValueOrDefault(0));
                                                        if (ReqUser == null)
                                                        {
                                                            ReqUser = userMasterDAL.GetUserByIdPlain(objDTO.ApproverID.GetValueOrDefault(0));
                                                        }
                                                        if (ReqUser != null && !string.IsNullOrWhiteSpace(ReqUser.Email))
                                                        {
                                                            OrdApproverEmailAddress = ReqUser.Email;
                                                        }
                                                    }

                                                    SupplierMasterDTO objSupplier = objSupplierMasterDAL.GetSupplierByIDPlain(objDTO.Supplier ?? 0);
                                                    objOrdContlr.SendMailToSupplier(objSupplier, objDTO);
                                                    objOrdContlr.SendMailForApprovedOrReject(objDTO, "approved", OrdRequesterEmailAddress, OrdApproverEmailAddress);
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<OrderMasterItemsMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                    //UDF Values save as option for success Orders.
                                    eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                    foreach (var successOrders in lstOrder)
                                    {
                                        IEnumerable<UDFDTO> InsertUDFDataFromDB = objUDFDAL.GetUDFsByUDFTableNamePlain("OrderMaster", SessionHelper.RoomID, SessionHelper.CompanyID);
                                        UDFController objUDFController = new UDFController();
                                        if ((!string.IsNullOrWhiteSpace(successOrders.OrderUDF1)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf1").Any())
                                        {
                                            Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf1").FirstOrDefault().ID;
                                            objUDFController.InsertUDFOptionNew(UDFID, successOrders.OrderUDF1, "OrderMaster", SessionHelper.EnterPriceID, false, false);
                                        }
                                        if ((!string.IsNullOrWhiteSpace(successOrders.OrderUDF2)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf2").Any())
                                        {
                                            Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf2").FirstOrDefault().ID;
                                            objUDFController.InsertUDFOptionNew(UDFID, successOrders.OrderUDF2, "OrderMaster", SessionHelper.EnterPriceID, false, false);
                                        }
                                        if ((!string.IsNullOrWhiteSpace(successOrders.OrderUDF3)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf3").Any())
                                        {
                                            Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf3").FirstOrDefault().ID;
                                            objUDFController.InsertUDFOptionNew(UDFID, successOrders.OrderUDF3, "OrderMaster", SessionHelper.EnterPriceID, false, false);
                                        }
                                        if ((!string.IsNullOrWhiteSpace(successOrders.OrderUDF4)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf4").Any())
                                        {
                                            Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf4").FirstOrDefault().ID;
                                            objUDFController.InsertUDFOptionNew(UDFID, successOrders.OrderUDF4, "OrderMaster", SessionHelper.EnterPriceID, false, false);
                                        }
                                        if ((!string.IsNullOrWhiteSpace(successOrders.OrderUDF5)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf5").Any())
                                        {
                                            Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf5").FirstOrDefault().ID;
                                            objUDFController.InsertUDFOptionNew(UDFID, successOrders.OrderUDF5, "OrderMaster", SessionHelper.EnterPriceID, false, false);
                                        }
                                    }

                                }
                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.kitdetail:
                            #region Kits

                            //else if (ImportMastersDTO.TableName.kitdetail.ToString() == TableName)
                            {
                                List<KitDetailmain> CurrentBlankKitDetailmain = new List<KitDetailmain>();
                                KitDetailmain[] LstKitDetailmain = s.Deserialize<KitDetailmain[]>(para);
                                if (LstKitDetailmain != null && LstKitDetailmain.Length > 0)
                                {
                                    CurrentKitItemList = new List<KitDetailmain>();

                                    KitMasterDAL objKitMasterDAL = new KitMasterDAL(SessionHelper.EnterPriseDBName);

                                    foreach (KitDetailmain item in LstKitDetailmain)
                                    {
                                        KitDetailmain objDTO = new KitDetailmain();
                                        KitMasterDTO objKitMasterDTO = new KitMasterDTO();
                                        Guid? ItemGUID = GetGUID(ImportMastersDTO.TableName.ItemMaster, item.ItemNumber);
                                        Guid? KitItemGUID = GetGUID(ImportMastersDTO.TableName.ItemMaster, item.KitPartNumber);
                                        objKitMasterDTO = objKitMasterDAL.GetRecord(KitItemGUID.ToString());
                                        if (objKitMasterDTO != null)//&& objKitMasterDTO.AvailableKitQuantity == 0
                                        {
                                            if (ItemGUID.HasValue && ItemGUID != Guid.Empty && KitItemGUID.HasValue && KitItemGUID != Guid.Empty)
                                            {
                                                objDTO.ItemGUID = ItemGUID.Value;
                                                objDTO.KitGUID = KitItemGUID.Value;
                                                objDTO.QuantityPerKit = item.QuantityPerKit;
                                                objDTO.ItemNumber = item.ItemNumber;
                                                objDTO.KitPartNumber = item.KitPartNumber;
                                                objDTO.IsActive = item.IsActive;

                                                objDTO.IsDeleted = item.IsDeleted;
                                                objDTO.IsBuildBreak = item.IsBuildBreak;
                                                objDTO.IsArchived = false;
                                                objDTO.Created = DateTimeUtility.DateTimeNow;
                                                objDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                                                objDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objDTO.Room = SessionHelper.RoomID;
                                                objDTO.CompanyID = SessionHelper.CompanyID;
                                                objDTO.CreatedBy = SessionHelper.UserID;
                                                objDTO.GUID = Guid.NewGuid();
                                                objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objDTO.AddedFrom = "Web";
                                                objDTO.EditedFrom = "Web";
                                            }
                                            if (ItemGUID.HasValue && ItemGUID != Guid.Empty && KitItemGUID.HasValue && KitItemGUID != Guid.Empty)
                                            {
                                                var itemval = CurrentKitItemList.FirstOrDefault(x => x.ItemGUID == objDTO.ItemGUID && x.KitGUID == objDTO.KitGUID);
                                                if (itemval != null)
                                                    CurrentKitItemList.Remove(itemval);
                                                CurrentKitItemList.Add(objDTO);


                                            }
                                            else
                                            {
                                                objDTO = item;
                                                if (ItemGUID.HasValue && ItemGUID == Guid.Empty)
                                                {
                                                    objDTO.Status = "Fail";
                                                    objDTO.Reason = ResItemMaster.MsgItemDoesNotExist;
                                                }
                                                CurrentBlankKitDetailmain.Add(objDTO);
                                            }
                                        }
                                        else
                                        {
                                            objDTO = item;
                                            objDTO.Status = "Fail";
                                            if (objKitMasterDTO == null)
                                            {
                                                //insert Item Master
                                                ItemMasterDTO objItemMasterDTO = new ItemMasterDTO();
                                                objItemMasterDTO.ID = item.ID;
                                                if (item.LotNumberTracking == false)
                                                {
                                                    objItemMasterDTO.SerialNumberTracking = item.SerialNumberTracking;
                                                }
                                                else
                                                {
                                                    objItemMasterDTO.SerialNumberTracking = false;
                                                }
                                                objItemMasterDTO.LotNumberTracking = item.LotNumberTracking;
                                                objItemMasterDTO.DateCodeTracking = item.DateCodeTracking;
                                                objItemMasterDTO.IsActive = item.IsActive;
                                                objItemMasterDTO.IsOrderable = item.IsActive;
                                                objItemMasterDTO.ItemNumber = (item.KitPartNumber == null) ? null : (item.KitPartNumber.Length > 255 ? item.KitPartNumber.Substring(0, 255) : item.KitPartNumber);
                                                objItemMasterDTO.SupplierName = item.SupplierName;
                                                objItemMasterDTO.SupplierPartNo = (item.SupplierPartNo == null) ? null : (item.SupplierPartNo.Length > 50 ? item.SupplierPartNo.Substring(0, 50) : item.SupplierPartNo);
                                                objItemMasterDTO.SupplierID = GetIDs(ImportMastersDTO.TableName.SupplierMaster, item.SupplierName);
                                                objItemMasterDTO.UOMID = GetIDs(ImportMastersDTO.TableName.UnitMaster, item.UOM);
                                                objItemMasterDTO.Unit = item.UOM;
                                                objItemMasterDTO.CostUOMID = item.CostUOMName == "" ? (long?)null : GetIDs(ImportMastersDTO.TableName.CostUOMMaster, item.CostUOMName);
                                                objItemMasterDTO.CostUOMName = item.CostUOMName;
                                                objItemMasterDTO.DefaultReorderQuantity = item.DefaultReorderQuantity;
                                                objItemMasterDTO.DefaultPullQuantity = item.DefaultPullQuantity;
                                                objItemMasterDTO.IsItemLevelMinMaxQtyRequired = item.IsItemLevelMinMaxQtyRequired;
                                                objItemMasterDTO.CriticalQuantity = item.CriticalQuantity ?? 0;
                                                objItemMasterDTO.MinimumQuantity = item.MinimumQuantity ?? 0;
                                                objItemMasterDTO.MaximumQuantity = item.MaximumQuantity ?? 0;

                                                //objItemMasterDTO.DefaultLocation = GetIDs(ImportMastersDTO.TableName.BinMaster, item.DefaultLocationName);

                                                //on hand qty? 

                                                //objItemMasterDTO.ItemTypeName = item.ItemTypeName;
                                                //objItemMasterDTO.ItemType = item.ItemTypeName == "Item" ? 1 : item.ItemTypeName == "Quick List" ? 2 : item.ItemTypeName == "Kit" ? 3 : item.ItemTypeName == "Labor" ? 4 : 1;

                                                objItemMasterDTO.ItemTypeName = "Kit";
                                                objItemMasterDTO.ItemType = 3;
                                                objItemMasterDTO.IsBuildBreak = item.IsBuildBreak;
                                                objItemMasterDTO.IsDeleted = item.IsDeleted ?? false;
                                                objItemMasterDTO.IsArchived = false;
                                                objItemMasterDTO.Created = DateTimeUtility.DateTimeNow;
                                                objItemMasterDTO.Updated = DateTimeUtility.DateTimeNow;
                                                objItemMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objItemMasterDTO.Room = SessionHelper.RoomID;
                                                objItemMasterDTO.CompanyID = SessionHelper.CompanyID;
                                                objItemMasterDTO.CreatedBy = SessionHelper.UserID;
                                                objItemMasterDTO.GUID = Guid.NewGuid();
                                                objItemMasterDTO.AddedFrom = "Web";
                                                objItemMasterDTO.EditedFrom = "Web";
                                                objItemMasterDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objItemMasterDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                objItemMasterDTO.WhatWhereAction = "Import";
                                                objItemMasterDTO.IsPurchase = true;
                                                //objItemMasterDTO.Consignment = false;
                                                //objItemMasterDTO.SuggestedOrderQuantity = item.KitDemand;
                                                objItemMasterDTO.OnHandQuantity = item.AvailableKitQuantity;
                                                objItemMasterDTO.Description = item.Description;
                                                objItemMasterDTO.ImageType = "ExternalImage";
                                                if (item.IsActive)
                                                {
                                                    objItemMasterDTO.ItemIsActiveDate = DateTimeUtility.DateTimeNow;
                                                }
                                                ItemMasterDAL objItemMasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);

                                                objItemMasterDAL.Insert(objItemMasterDTO);
                                                //insert code objItemMasterDTO


                                                Guid? NewKitItemGUID = GetGUID(ImportMastersDTO.TableName.ItemMaster, objItemMasterDTO.ItemNumber);

                                                //Insert bin

                                                //long BinId = GetIDs(ImportMastersDTO.TableName.BinMaster, item.DefaultLocationName);
                                                //BinMasterDTO objBinMasterDTO = new BinMasterDTO();
                                                //BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                                                //objBinMasterDTO.ID = 1;
                                                //objBinMasterDTO.BinNumber = item.DefaultLocationName.Length > 128 ? item.DefaultLocationName.Substring(0, 128) : item.DefaultLocationName;
                                                //objBinMasterDTO.IsDeleted = false;
                                                //objBinMasterDTO.IsArchived = false;
                                                //objBinMasterDTO.Created = DateTimeUtility.DateTimeNow;
                                                //objBinMasterDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                                                //objBinMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                                                //objBinMasterDTO.Room = SessionHelper.RoomID;
                                                //objBinMasterDTO.CompanyID = SessionHelper.CompanyID;
                                                //objBinMasterDTO.CreatedBy = SessionHelper.UserID;
                                                //objBinMasterDTO.GUID = Guid.NewGuid();
                                                //objBinMasterDTO.ItemGUID = NewKitItemGUID;
                                                //objBinMasterDTO.AddedFrom = "Web";
                                                //objBinMasterDTO.EditedFrom = "Web";
                                                //objBinMasterDTO.ParentBinId = BinId;
                                                //objBinMasterDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                //objBinMasterDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                //long returnNewBinID = objBinMasterDAL.Insert(objBinMasterDTO);
                                                // insert bin complete
                                                //update default Bin

                                                string BinNumber = (item.DefaultLocationName ?? string.Empty).Length > 128 ? item.DefaultLocationName.Substring(0, 128) : (item.DefaultLocationName ?? string.Empty);
                                                BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                                                BinMasterDTO objBinMasterDTO = null;
                                                if (!string.IsNullOrWhiteSpace(BinNumber))
                                                {
                                                    objBinMasterDTO = objBinMasterDAL.GetItemBinPlain(NewKitItemGUID ?? Guid.Empty, BinNumber.Trim(), SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, false, "web", false, null);
                                                }

                                                objItemMasterDTO.DefaultLocation = objBinMasterDTO != null ? objBinMasterDTO.ID : 0;

                                                objItemMasterDAL.Edit(objItemMasterDTO, SessionUserId, SessionHelper.EnterPriceID);
                                                //update default Bin complete

                                                //insert Item SupplierDetails
                                                ItemSupplierDetailsDAL objItemSupplierDetailsDAL = new ItemSupplierDetailsDAL(SessionHelper.EnterPriseDBName);
                                                ItemSupplierDetailsDTO objItemSupplierDetailsDTO = new ItemSupplierDetailsDTO();
                                                objItemSupplierDetailsDTO.AddedFrom = "Web";
                                                objItemSupplierDetailsDTO.CompanyID = SessionHelper.CompanyID;
                                                objItemSupplierDetailsDTO.Created = DateTimeUtility.DateTimeNow;
                                                objItemSupplierDetailsDTO.CreatedBy = SessionHelper.UserID;
                                                objItemSupplierDetailsDTO.EditedFrom = "Web";
                                                objItemSupplierDetailsDTO.GUID = Guid.NewGuid();
                                                objItemSupplierDetailsDTO.ID = 0;
                                                objItemSupplierDetailsDTO.IsArchived = false;
                                                objItemSupplierDetailsDTO.IsDefault = true;
                                                objItemSupplierDetailsDTO.IsDeleted = false;
                                                objItemSupplierDetailsDTO.ItemGUID = NewKitItemGUID;
                                                objItemSupplierDetailsDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objItemSupplierDetailsDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                objItemSupplierDetailsDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                objItemSupplierDetailsDTO.Room = SessionHelper.RoomID;
                                                objItemSupplierDetailsDTO.SupplierID = objItemMasterDTO.SupplierID ?? 0;
                                                objItemSupplierDetailsDTO.SupplierName = objItemMasterDTO.SupplierName;
                                                objItemSupplierDetailsDTO.SupplierNumber = objItemMasterDTO.SupplierPartNo;
                                                objItemSupplierDetailsDTO.Updated = DateTimeUtility.DateTimeNow;

                                                objItemSupplierDetailsDAL.Insert(objItemSupplierDetailsDTO);

                                                KitItemGUID = GetGUID(ImportMastersDTO.TableName.ItemMaster, item.KitPartNumber);
                                                objKitMasterDTO = objKitMasterDAL.GetRecord(KitItemGUID.ToString());
                                                // lstItemGUID.Add(objItemMasterDTO.GUID);



                                                if (ItemGUID.HasValue && ItemGUID != Guid.Empty && KitItemGUID.HasValue && KitItemGUID != Guid.Empty)
                                                {
                                                    objDTO.ItemGUID = ItemGUID.Value;
                                                    objDTO.KitGUID = objItemMasterDTO.GUID;
                                                    objDTO.QuantityPerKit = item.QuantityPerKit;
                                                    objDTO.ItemNumber = item.ItemNumber;
                                                    objDTO.KitPartNumber = item.KitPartNumber;

                                                    //objDTO.QuantityReadyForAssembly = item.AvailableItemsInWIP;

                                                    objDTO.IsDeleted = item.IsDeleted;
                                                    objDTO.IsBuildBreak = item.IsBuildBreak;
                                                    objDTO.IsArchived = false;
                                                    objDTO.Created = DateTimeUtility.DateTimeNow;
                                                    objDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                                                    objDTO.LastUpdatedBy = SessionHelper.UserID;
                                                    objDTO.Room = SessionHelper.RoomID;
                                                    objDTO.CompanyID = SessionHelper.CompanyID;
                                                    objDTO.CreatedBy = SessionHelper.UserID;
                                                    objDTO.GUID = Guid.NewGuid();
                                                    objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                    objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                    objDTO.AddedFrom = "Web";
                                                    objDTO.EditedFrom = "Web";
                                                }
                                                if (ItemGUID.HasValue && ItemGUID != Guid.Empty && KitItemGUID.HasValue && KitItemGUID != Guid.Empty)
                                                {
                                                    var itemval = CurrentKitItemList.FirstOrDefault(x => x.ItemGUID == objDTO.ItemGUID && x.KitGUID == objDTO.KitGUID);
                                                    if (itemval != null)
                                                        CurrentKitItemList.Remove(itemval);
                                                    CurrentKitItemList.Add(objDTO);


                                                }
                                                else
                                                {
                                                    objDTO = item;
                                                    if (ItemGUID.HasValue && ItemGUID == Guid.Empty)
                                                    {
                                                        objDTO.Status = "Fail";
                                                        objDTO.Reason = ResItemMaster.MsgItemDoesNotExist;
                                                    }
                                                    CurrentBlankKitDetailmain.Add(objDTO);
                                                }
                                            }
                                            else
                                            {
                                                objDTO.Status = "Fail";
                                                objDTO.Reason = ResKitMaster.NotAbleToEditItem; 
                                                CurrentBlankKitDetailmain.Add(objDTO);
                                            }


                                        }





                                    }

                                    List<KitDetailmain> lstreturn = new List<KitDetailmain>();
                                    if (CurrentKitItemList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.kitdetail.ToString(), CurrentKitItemList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    if (CurrentBlankKitDetailmain.Count > 0)
                                    {
                                        foreach (KitDetailmain item in CurrentBlankKitDetailmain)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<KitDetailmain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }


                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.BOMItemMaster:
                            #region BOM Item Master
                            //else if (ImportMastersDTO.TableName.BOMItemMaster.ToString() == TableName)
                            {

                                List<BOMItemMasterMain> CurrentBlankBOMItemList = new List<BOMItemMasterMain>();
                                BOMItemMasterMain[] LstItemMaster = s.Deserialize<BOMItemMasterMain[]>(para);
                                if (LstItemMaster != null && LstItemMaster.Length > 0)
                                {
                                    CurrentBOMItemList = new List<BOMItemMasterMain>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.BOMItemMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    CurrentOptionList = new List<UDFOptionsMain>();
                                    bool SaveToolList = true;
                                    //bool IsEmailPOInBody = false; bool IsEmailPOInPDF = false; bool IsEmailPOInCSV = false; bool IsEmailPOInX12 = false;
                                    foreach (BOMItemMasterMain item in LstItemMaster)
                                    {
                                        SaveToolList = true;
                                        BOMItemMasterMain objDTO = new BOMItemMasterMain();
                                        objDTO.ID = item.ID;
                                        objDTO.ItemNumber = (item.ItemNumber == null) ? null : (item.ItemNumber.Length > 255 ? item.ItemNumber.Substring(0, 255) : item.ItemNumber);
                                        objDTO.ManufacturerName = item.ManufacturerName;
                                        //Wi-1505
                                        if (!string.IsNullOrWhiteSpace(item.ManufacturerName))
                                        {
                                            objDTO.ManufacturerID = item.ManufacturerName == "" ? (long?)null : GetBOMIDs(ImportMastersDTO.TableName.ManufacturerMaster, item.ManufacturerName);
                                        }
                                        else
                                        {
                                            long ManuID = new ManufacturerMasterDAL(SessionHelper.EnterPriseDBName).GetORInsertBlankManuFacID(0, SessionHelper.CompanyID, SessionHelper.UserID);
                                            if (!string.IsNullOrWhiteSpace(item.ManufacturerNumber))
                                            {
                                                objDTO.ManufacturerID = ManuID;
                                            }
                                            //objDTO.ManufacturerID = new ManufacturerMasterDAL(SessionHelper.EnterPriseDBName).GetORInsertBlankManuFacID(SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
                                        }

                                        //objDTO.ManufacturerID = item.ManufacturerName == "" ? (long?)null : GetBOMIDs(ImportMastersDTO.TableName.ManufacturerMaster, item.ManufacturerName);
                                        objDTO.ManufacturerNumber = (item.ManufacturerNumber == null) ? null : (item.ManufacturerNumber.Length > 20 ? item.ManufacturerNumber.Substring(0, 20) : item.ManufacturerNumber);
                                        objDTO.SupplierName = item.SupplierName;
                                        objDTO.SupplierPartNo = (item.SupplierPartNo == null) ? null : (item.SupplierPartNo.Length > 20 ? item.SupplierPartNo.Substring(0, 20) : item.SupplierPartNo);
                                        objDTO.SupplierID = GetBOMIDs(ImportMastersDTO.TableName.SupplierMaster, item.SupplierName);
                                        objDTO.UPC = item.UPC;
                                        objDTO.UNSPSC = item.UNSPSC;
                                        objDTO.Description = item.Description;
                                        objDTO.LongDescription = item.LongDescription;
                                        objDTO.CategoryID = item.CategoryName == "" ? (long?)null : GetBOMIDs(ImportMastersDTO.TableName.CategoryMaster, item.CategoryName);
                                        objDTO.GLAccountID = item.GLAccount == "" ? (long?)null : GetBOMIDs(ImportMastersDTO.TableName.GLAccountMaster, item.GLAccount);
                                        objDTO.CategoryName = item.CategoryName;
                                        objDTO.GLAccount = item.GLAccount;
                                        objDTO.UOMID = GetBOMIDs(ImportMastersDTO.TableName.UnitMaster, item.Unit);
                                        objDTO.Unit = item.Unit;
                                        objDTO.LeadTimeInDays = item.LeadTimeInDays;
                                        objDTO.Taxable = item.Taxable;
                                        objDTO.Consignment = item.Consignment;
                                        //objDTO.ItemUniqueNumber = objCommonDAL.UniqueItemId();
                                        objDTO.ItemUniqueNumber = objCommonDAL.GetItemUniqueIdByRoom(item.Room.GetValueOrDefault(0), item.CompanyID.GetValueOrDefault(0));
                                        objDTO.IsTransfer = item.IsTransfer;
                                        objDTO.IsPurchase = item.IsPurchase;
                                        objDTO.DefaultLocation = 0;// GetIDs(ImportMastersDTO.TableName.BinMaster, item.InventryLocation);
                                        objDTO.InventryLocation = item.InventryLocation;
                                        objDTO.InventoryClassification = Convert.ToInt32(GetBOMIDs(ImportMastersDTO.TableName.InventoryClassificationMaster, item.InventoryClassificationName));
                                        objDTO.InventoryClassificationName = item.InventoryClassificationName;
                                        objDTO.ItemTypeName = item.ItemTypeName;
                                        objDTO.SerialNumberTracking = item.SerialNumberTracking;
                                        objDTO.LotNumberTracking = item.LotNumberTracking;
                                        objDTO.DateCodeTracking = item.DateCodeTracking;
                                        objDTO.ItemType = item.ItemTypeName == "Item" ? 1 : item.ItemTypeName == "Quick List" ? 2 : item.ItemTypeName == "Kit" ? 3 : item.ItemTypeName == "Labor" ? 4 : 1;
                                        objDTO.ImagePath = item.ImagePath;
                                        //objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                                        //objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                                        //objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                                        //objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                                        //objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                                        //objDTO.DefaultPullQuantity = 0;
                                        //objDTO.DefaultReorderQuantity = 0;
                                        //objDTO.CriticalQuantity = 0;
                                        //objDTO.MinimumQuantity = 0;
                                        //objDTO.MaximumQuantity = 0;
                                        objDTO.Trend = false;
                                        objDTO.CategoryColor = "";
                                        objDTO.IsLotSerialExpiryCost = "";
                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        //objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();
                                        objDTO.IsBOMItem = true;
                                        objDTO.WhatWhereAction = "Import";
                                        objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                        objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                        objDTO.AddedFrom = "Web";
                                        objDTO.EditedFrom = "Web";

                                        objDTO.CriticalQuantity = item.CriticalQuantity;
                                        objDTO.MinimumQuantity = item.MinimumQuantity;
                                        objDTO.MaximumQuantity = item.MaximumQuantity;
                                        item.Cost = item.Cost ?? 0;
                                        item.SellPrice = item.SellPrice ?? 0;
                                        item.Markup = item.Markup ?? 0;
                                        objDTO.Cost = item.Cost;
                                        objDTO.SellPrice = item.SellPrice;
                                        objDTO.Markup = item.Markup;
                                        if (item.Cost != 0 && item.SellPrice != 0 && item.Markup != 0)
                                        {
                                            objDTO.Markup = Convert.ToDouble(((Convert.ToDecimal(objDTO.SellPrice) * Convert.ToDecimal(100)) / Convert.ToDecimal(objDTO.Cost)) - Convert.ToDecimal(100));
                                            // Calculate MArkup based on price and cost
                                        }
                                        else if (item.Cost != 0 && item.SellPrice == 0 && item.Markup == 0)
                                        {
                                            // Prise will become same as cost
                                            objDTO.SellPrice = objDTO.Cost;
                                        }
                                        else if (item.Cost != 0 && item.SellPrice != 0 && item.Markup == 0)
                                        {
                                            // Calculate MArkup based on price and cost
                                            objDTO.Markup = Convert.ToDouble(((Convert.ToDecimal(objDTO.SellPrice) * Convert.ToDecimal(100)) / Convert.ToDecimal(objDTO.Cost)) - Convert.ToDecimal(100));
                                        }
                                        else if (item.Cost != 0 && item.SellPrice == 0 && item.Markup != 0)
                                        {
                                            //Calculate prise based on cost and markup
                                            objDTO.SellPrice = Convert.ToDouble(Convert.ToDecimal(objDTO.Cost) + ((Convert.ToDecimal(objDTO.Cost) * Convert.ToDecimal(objDTO.Markup)) / Convert.ToDecimal(100)));
                                        }
                                        else if (item.Cost == 0 && item.SellPrice != 0 && item.Markup != 0)
                                        {
                                            // Calculate cost based on prise and markup                                 
                                            //objDTO.Cost = objDTO.SellPrice - ((objDTO.SellPrice * objDTO.Markup) / 100);
                                            objDTO.Cost = Convert.ToDouble((Convert.ToDecimal(100) * Convert.ToDecimal(item.SellPrice)) / (Convert.ToDecimal(item.Markup) + Convert.ToDecimal(100)));
                                            //Please follow Markup= (((sell-cost)/cost)*100)
                                        }
                                        else if (item.Cost == 0 && item.SellPrice == 0 && item.Markup == 0)
                                        {
                                            // All are zero so no calc
                                        }
                                        else if (item.Cost == 0 && item.SellPrice != 0 && item.Markup == 0)
                                        {
                                            // cost will become same as prise
                                            objDTO.Cost = objDTO.SellPrice;
                                        }
                                        else if (item.Cost == 0 && item.SellPrice == 0 && item.Markup != 0)
                                        {
                                            objDTO.Markup = 0;
                                            // Cost and prise will remain zero and save markup only Or make markup zero because no prise and cost
                                        }
                                        objDTO.CostUOMID = item.CostUOMName == "" ? (long?)null : GetBOMIDs(ImportMastersDTO.TableName.CostUOMMaster, item.CostUOMName);
                                        objDTO.CostUOMName = item.CostUOMName;
                                        objDTO.DefaultReorderQuantity = item.DefaultReorderQuantity ?? 0;
                                        objDTO.DefaultPullQuantity = item.DefaultPullQuantity ?? 0;
                                        objDTO.Link1 = item.Link1;
                                        objDTO.Link2 = item.Link2;
                                        objDTO.ItemLink2ImageType = "InternalLink";
                                        objDTO.ImageType = "ExternalImage";
                                        objDTO.ItemImageExternalURL = item.ItemImageExternalURL;
                                        objDTO.ItemLink2ExternalURL = item.ItemLink2ExternalURL;
                                        if (string.IsNullOrWhiteSpace(item.ItemImageExternalURL) && (!string.IsNullOrEmpty(item.ImagePath)))
                                        {
                                            objDTO.ImageType = "ImagePath";
                                        }
                                        if (string.IsNullOrWhiteSpace(item.Link2) && (!string.IsNullOrEmpty(item.ItemLink2ExternalURL)))
                                        {
                                            objDTO.ItemLink2ImageType = "ExternalURL";
                                        }
                                        objDTO.ItemDocExternalURL = item.ItemDocExternalURL;
                                        objDTO.IsActive = item.IsActive;
                                        objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                                        objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                                        objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                                        objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                                        objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                                        objDTO.IsItemLevelMinMaxQtyRequired = item.IsItemLevelMinMaxQtyRequired;
                                        objDTO.IsEnforceDefaultReorderQuantity = item.IsEnforceDefaultReorderQuantity ?? false;
                                        objDTO.PullQtyScanOverride = item.PullQtyScanOverride;
                                        objDTO.IsActive = item.IsActive;
                                        objDTO.LongDescription = item.LongDescription;
                                        objDTO.EnrichedProductData = item.EnrichedProductData;
                                        objDTO.EnhancedDescription = item.EnhancedDescription;
                                        // objDTO.LastCost = 0.0;
                                        lstItemGUID.Add(objDTO.GUID);
                                        //if (item.SupplierPartNo != null)
                                        //{
                                        //    ItemSupplierDetailsDAL objItemSupplierDetailsDAL = new ItemSupplierDetailsDAL(SessionHelper.EnterPriseDBName);
                                        //    bool Result = objItemSupplierDetailsDAL.CheckSupplierDuplicateByBOMItemNumber(item.SupplierPartNo.Trim(), objDTO.ItemNumber, true);
                                        //    if (!Result)
                                        //    {
                                        //        SaveToolList = false;
                                        //        objDTO.Status = "Fail";
                                        //        objDTO.Reason = ResMessage.DuplicateSerialNumber;
                                        //        item.Status = "Fail";
                                        //        item.Reason = ResMessage.DuplicateSerialNumber;
                                        //    }
                                        //}
                                        //if (item.ManufacturerNumber != null)
                                        //{
                                        //    ItemManufacturerDetailsDAL objItemManufacturerDetailsDAL = new ItemManufacturerDetailsDAL(SessionHelper.EnterPriseDBName);
                                        //    bool Result = objItemManufacturerDetailsDAL.CheckManufacturerNoDuplicateByBOMItemNumber(item.ManufacturerNumber.Trim(), objDTO.ItemNumber, true);
                                        //    if (!Result)
                                        //    {
                                        //        SaveToolList = false;
                                        //        objDTO.Status = "Fail";
                                        //        objDTO.Reason = ResMessage.DuplicateManufacturerNumber;
                                        //        item.Status = "Fail";
                                        //        item.Reason = ResMessage.DuplicateManufacturerNumber;
                                        //    }
                                        //}
                                        if (item.ItemNumber.Trim() != "" && SaveToolList)
                                        {
                                            CurrentBOMItemList.Add(objDTO);
                                            //CurrentItemDTOList.Add(objDTO);

                                            //CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportItemColumn.UDF1.ToString());
                                            //CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportItemColumn.UDF2.ToString());
                                            //CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportItemColumn.UDF3.ToString());
                                            //CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportItemColumn.UDF4.ToString());
                                            //CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportItemColumn.UDF5.ToString());

                                        }
                                        else
                                            CurrentBlankBOMItemList.Add(item);
                                    }

                                    List<BOMItemMasterMain> lstreturn = new List<BOMItemMasterMain>();
                                    if (CurrentBOMItemList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.BOMItemMaster.ToString(), CurrentBOMItemList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    if (CurrentBlankBOMItemList.Count > 0)
                                    {
                                        foreach (BOMItemMasterMain item in CurrentBlankBOMItemList)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        savedOnlyitemIds = string.Join(",", lstreturn.Where(i => i.ID != 0 && (!string.IsNullOrEmpty(i.ImagePath))).Select(p => p.ID.ToString() + "#" + p.ImagePath.ToString()));
                                        savedItemIdsWithLink2 = string.Join(",", lstreturn.Where(i => i.ID != 0 && (!string.IsNullOrEmpty(i.Link2))).Select(p => p.ID.ToString() + "#" + p.Link2.ToString()));
                                        savedItemGuids = string.Join(",", lstreturn.Where(i => i.GUID != Guid.Empty).Select(p => p.GUID.ToString()));
                                        foreach (BOMItemMasterMain b in lstreturn.Where(i => i.ID == 0 && (!string.IsNullOrEmpty(i.ImagePath))))
                                        {
                                            //long id = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetIDByItemNumber(Convert.ToString(b.ItemNumber), Convert.ToInt64(b.Room), Convert.ToInt64(b.CompanyID));
                                            ItemMasterDTO objItemMaster = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetItemByItemNumberPlain(Convert.ToString(b.ItemNumber), Convert.ToInt64(0), Convert.ToInt64(b.CompanyID));
                                            if (objItemMaster != null)
                                            {
                                                if (string.IsNullOrEmpty(savedOnlyitemIds))
                                                {
                                                    savedOnlyitemIds = objItemMaster.ID + "#" + objItemMaster.ImagePath.ToString();
                                                }
                                                else
                                                {
                                                    savedOnlyitemIds += "," + objItemMaster.ID + "#" + objItemMaster.ImagePath.ToString();
                                                }
                                            }
                                        }

                                        foreach (BOMItemMasterMain b in lstreturn.Where(i => i.ID == 0 && (!string.IsNullOrEmpty(i.Link2))))
                                        {
                                            ItemMasterDTO objItemMaster = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetItemByItemNumberPlain(Convert.ToString(b.ItemNumber), Convert.ToInt64(0), Convert.ToInt64(b.CompanyID));
                                            if (objItemMaster != null)
                                            {
                                                if (string.IsNullOrEmpty(savedItemIdsWithLink2))
                                                {
                                                    savedItemIdsWithLink2 = objItemMaster.ID + "#" + objItemMaster.Link2.ToString();
                                                }
                                                else
                                                {
                                                    savedItemIdsWithLink2 += "," + objItemMaster.ID + "#" + objItemMaster.Link2.ToString();
                                                }
                                            }
                                        }
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<BOMItemMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }


                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ItemManufacturerDetails:
                            importBAL.SaveItemManufacturer(lst, CurrentOptionList,
                                 CurrentItemManufacturerList, ImportMastersDTO.TableName.ItemManufacturerDetails, para, HasMoreRecords,
                                IsFirstCall, ref message, ref status, ref allSuccesfulRecords);

                            #region Item Manufacturer

                            //else if (ImportMastersDTO.TableName.ItemManufacturerDetails.ToString() == TableName)
                            //{
                            //    List<ItemManufacturer> CurrentBlankItemManufacturermain = new List<ItemManufacturer>();
                            //    ItemManufacturer[] LstItemManufacturermain = s.Deserialize<ItemManufacturer[]>(para);
                            //    if (LstItemManufacturermain != null && LstItemManufacturermain.Length > 0)
                            //    {
                            //        CurrentBlankItemManufacturermain = new List<ItemManufacturer>();

                            //        ItemManufacturer objItemManufacturerDAL = new ItemManufacturer();
                            //        CurrentItemManufacturerList = new List<ItemManufacturer>();
                            //        List<ManufacturerMasterDTO> objManufacturerMasterDALList = new List<ManufacturerMasterDTO>();
                            //        ManufacturerMasterDAL objManufacturerMasterDAL = new ManufacturerMasterDAL(SessionHelper.EnterPriseDBName);
                            //        objManufacturerMasterDALList = objManufacturerMasterDAL.GetManufacturerByRoomNormal(SessionHelper.RoomID, SessionHelper.CompanyID, false, false, false, "ID DESC");
                            //        foreach (ItemManufacturer ManufacturerMasterList in LstItemManufacturermain.GroupBy(l => l.ManufacturerName).Select(g => g.First()).ToList())
                            //        {
                            //            if (ManufacturerMasterList.ManufacturerName.ToLower().Trim() != string.Empty)
                            //            {
                            //                if ((from p in objManufacturerMasterDALList
                            //                     where ((p.Manufacturer ?? string.Empty).ToLower().Trim() == (ManufacturerMasterList.ManufacturerName.ToLower().Trim()) && p.isForBOM == false && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                            //                     select p).Any())
                            //                {

                            //                }
                            //                else
                            //                {
                            //                    ManufacturerMasterDTO objManufacturerMasterDTO = new ManufacturerMasterDTO();
                            //                    objManufacturerMasterDTO.Manufacturer = ManufacturerMasterList.ManufacturerName;
                            //                    objManufacturerMasterDTO.Room = SessionHelper.RoomID;
                            //                    objManufacturerMasterDTO.CompanyID = SessionHelper.CompanyID;
                            //                    objManufacturerMasterDTO.CreatedBy = SessionHelper.UserID;
                            //                    objManufacturerMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                            //                    objManufacturerMasterDTO.Created = DateTimeUtility.DateTimeNow;
                            //                    objManufacturerMasterDTO.Updated = DateTimeUtility.DateTimeNow;
                            //                    objManufacturerMasterDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //                    objManufacturerMasterDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //                    objManufacturerMasterDTO.AddedFrom = "Web";
                            //                    objManufacturerMasterDTO.EditedFrom = "Web";
                            //                    objManufacturerMasterDTO.GUID = Guid.NewGuid();
                            //                    objManufacturerMasterDTO.IsArchived = false;
                            //                    objManufacturerMasterDTO.IsDeleted = false;
                            //                    objManufacturerMasterDTO.isForBOM = false;
                            //                    objManufacturerMasterDTO.RefBomId = null;
                            //                    Int64 ManufacturerMasterID = objManufacturerMasterDAL.Insert(objManufacturerMasterDTO);
                            //                    objManufacturerMasterDTO = objManufacturerMasterDAL.GetManufacturerByIDNormal(ManufacturerMasterID, SessionHelper.RoomID, SessionHelper.CompanyID, false);
                            //                    objManufacturerMasterDALList.Add(objManufacturerMasterDTO);

                            //                }
                            //            }
                            //        }
                            //        bool SaveList = true;
                            //        foreach (ItemManufacturer item in LstItemManufacturermain)
                            //        {
                            //            SaveList = true;
                            //            ItemManufacturer objDTO = new ItemManufacturer();
                            //            Guid? ItemGUID = GetGUID(ImportMastersDTO.TableName.ItemMaster, item.ItemNumber);

                            //            if ((objDTO.ManufacturerName != null || objDTO.ManufacturerName != string.Empty))
                            //            {
                            //                if (ItemGUID.HasValue && ItemGUID != Guid.Empty)
                            //                {
                            //                    objDTO.ItemGUID = ItemGUID.Value;
                            //                    objDTO.ManufacturerName = item.ManufacturerName;

                            //                    ItemManufacturerDetailsDAL objItemManufacturerDetailsDAL = new ItemManufacturerDetailsDAL(SessionHelper.EnterPriseDBName);
                            //                    if (objItemManufacturerDetailsDAL.CheckManufacturerNoDuplicate(item.ManufacturerNumber.Trim(), SessionHelper.RoomID, SessionHelper.CompanyID, objDTO.ItemGUID))
                            //                    {

                            //                        objDTO.ManufacturerNumber = item.ManufacturerNumber;
                            //                    }
                            //                    else
                            //                    {
                            //                        SaveList = false;
                            //                        objDTO = item;
                            //                        objDTO.Status = "Fail";
                            //                        objDTO.Reason = item.ManufacturerNumber.Trim() + " ManufacturerNumber is already exists.";
                            //                    }
                            //                    objDTO.IsDefault = item.IsDefault;
                            //                    objDTO.ManufacturerID = objManufacturerMasterDALList.ToList().Where(m => m.Manufacturer == item.ManufacturerName && m.Room == SessionHelper.RoomID && m.CompanyID == SessionHelper.CompanyID && m.IsDeleted == false && m.IsArchived == false && m.isForBOM == false).FirstOrDefault().ID;
                            //                    objDTO.IsDeleted = false;
                            //                    objDTO.IsArchived = false;
                            //                    objDTO.Created = DateTimeUtility.DateTimeNow;
                            //                    objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //                    objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //                    objDTO.Room = SessionHelper.RoomID;
                            //                    objDTO.CompanyID = SessionHelper.CompanyID;
                            //                    objDTO.CreatedBy = SessionHelper.UserID;
                            //                    objDTO.GUID = Guid.NewGuid();
                            //                    objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //                    objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //                    objDTO.AddedFrom = "Web";
                            //                    objDTO.EditedFrom = "Web";
                            //                }
                            //                if (ItemGUID.HasValue && ItemGUID != Guid.Empty && SaveList)
                            //                {
                            //                    var itemval = CurrentItemManufacturerList.FirstOrDefault(x => x.ItemGUID == objDTO.ItemGUID && x.ManufacturerName == objDTO.ManufacturerName);
                            //                    if (itemval != null)
                            //                        CurrentItemManufacturerList.Remove(itemval);
                            //                    CurrentItemManufacturerList.Add(objDTO);
                            //                }
                            //                else
                            //                {
                            //                    objDTO = item;
                            //                    if (ItemGUID.HasValue && ItemGUID == Guid.Empty)
                            //                    {
                            //                        objDTO.Status = "Fail";
                            //                        objDTO.Reason = "Item does not exist.";
                            //                    }
                            //                    CurrentBlankItemManufacturermain.Add(objDTO);
                            //                }
                            //            }
                            //            else
                            //            {
                            //                objDTO = item;
                            //                objDTO.Status = "Fail";

                            //                objDTO.Reason = "ManufacturerName is Required.";


                            //                CurrentBlankItemManufacturermain.Add(objDTO);
                            //            }





                            //        }

                            //        List<ItemManufacturer> lstreturn = new List<ItemManufacturer>();
                            //        if (CurrentItemManufacturerList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ItemManufacturerDetails.ToString(), CurrentItemManufacturerList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankItemManufacturermain.Count > 0)
                            //        {
                            //            foreach (ItemManufacturer item in CurrentBlankItemManufacturermain)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<ItemManufacturer>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (CurrentItemManufacturerList.Count > 0)
                            //        {
                            //            eTurns.DAL.CacheHelper<IEnumerable<ItemManufacturerDetailsDTO>>.InvalidateCache();
                            //            ItemManufacturerDetailsDAL objItemManufacturerDetailsDAL = new ItemManufacturerDetailsDAL(SessionHelper.EnterPriseDBName);
                            //            List<ItemManufacturerDetailsDTO> objItemManufacturerDetailsDTO = new List<ItemManufacturerDetailsDTO>();
                            //            objItemManufacturerDetailsDTO = objItemManufacturerDetailsDAL.GetItemManufacturerByRoomNormal(SessionHelper.RoomID, SessionHelper.CompanyID);
                            //            foreach (ItemManufacturer objCurrentItemManu in CurrentItemManufacturerList.GroupBy(l => l.ItemGUID).Select(g => g.First()).ToList())
                            //            {
                            //                foreach (ItemManufacturerDetailsDTO objItemManufacturer in objItemManufacturerDetailsDTO.ToList().Where(l => l.IsDefault == true && l.ItemGUID == objCurrentItemManu.ItemGUID))
                            //                {
                            //                    ItemMasterDTO objItemMasterDTO = new ItemMasterDTO();
                            //                    ItemMasterDAL objItemMasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                            //                    if (objItemManufacturer.ItemGUID != Guid.Empty)
                            //                        objItemMasterDTO = objItemMasterDAL.GetRecordOnlyItemsFields(objItemManufacturer.ItemGUID.ToString(), SessionHelper.RoomID, SessionHelper.CompanyID);

                            //                    if (objItemMasterDTO != null)
                            //                    {
                            //                        objItemMasterDTO.ManufacturerID = objItemManufacturer.ManufacturerID;
                            //                        objItemMasterDTO.ManufacturerNumber = objItemManufacturer.ManufacturerNumber;
                            //                        objItemMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                            //                        objItemMasterDTO.Updated = DateTimeUtility.DateTimeNow;
                            //                        objItemMasterDAL.Edit(objItemMasterDTO, SessionUserId);
                            //                    }
                            //                }
                            //            }
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //        Session["ItemManufacture"] = null;


                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ItemSupplierDetails:
                            importBAL.SaveItemSupplier(lst, CurrentOptionList,
                                CurrentItemSupplierList, ImportMastersDTO.TableName.ItemSupplierDetails, para, HasMoreRecords,
                                IsFirstCall, ref message, ref status, ref allSuccesfulRecords);

                            #region Item Supplier

                            //else if (ImportMastersDTO.TableName.ItemSupplierDetails.ToString() == TableName)
                            //{
                            //    List<ItemSupplier> CurrentBlankItemSuppliermain = new List<ItemSupplier>();
                            //    ItemSupplier[] LstItemSuppliermain = s.Deserialize<ItemSupplier[]>(para);
                            //    if (LstItemSuppliermain != null && LstItemSuppliermain.Length > 0)
                            //    {
                            //        CurrentBlankItemSuppliermain = new List<ItemSupplier>();

                            //        ItemSupplier objItemSupplierDAL = new ItemSupplier();
                            //        CurrentItemSupplierList = new List<ItemSupplier>();
                            //        List<SupplierMasterDTO> objSupplierMasterDALList = new List<SupplierMasterDTO>();
                            //        SupplierMasterDAL objSupplierMasterDAL = new SupplierMasterDAL(SessionHelper.EnterPriseDBName);
                            //        objSupplierMasterDALList = objSupplierMasterDAL.GetSupplierByRoomPlain(SessionHelper.RoomID, SessionHelper.CompanyID, false).ToList();
                            //        foreach (ItemSupplier SupplierMasterList in LstItemSuppliermain.GroupBy(l => l.SupplierName).Select(g => g.First()).ToList())
                            //        {
                            //            if (SupplierMasterList.SupplierName.ToLower().Trim() != string.Empty)
                            //            {
                            //                if ((from p in objSupplierMasterDALList
                            //                     where (p.SupplierName.ToLower().Trim() == (SupplierMasterList.SupplierName.ToLower().Trim()) && p.isForBOM == false && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                            //                     select p).Any())
                            //                {

                            //                }
                            //                else
                            //                {
                            //                    SupplierMasterDTO objSupplierMasterDTO = new SupplierMasterDTO();
                            //                    objSupplierMasterDTO.SupplierName = SupplierMasterList.SupplierName.Trim();

                            //                    objSupplierMasterDTO.Room = SessionHelper.RoomID;
                            //                    objSupplierMasterDTO.CompanyID = SessionHelper.CompanyID;
                            //                    objSupplierMasterDTO.CreatedBy = SessionHelper.UserID;
                            //                    objSupplierMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                            //                    objSupplierMasterDTO.Created = DateTimeUtility.DateTimeNow;
                            //                    objSupplierMasterDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                            //                    objSupplierMasterDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //                    objSupplierMasterDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //                    objSupplierMasterDTO.AddedFrom = "Web";
                            //                    objSupplierMasterDTO.EditedFrom = "Web";
                            //                    objSupplierMasterDTO.GUID = Guid.NewGuid();
                            //                    objSupplierMasterDTO.IsArchived = false;
                            //                    objSupplierMasterDTO.IsDeleted = false;
                            //                    objSupplierMasterDTO.isForBOM = false;
                            //                    objSupplierMasterDTO.RefBomId = null;
                            //                    objSupplierMasterDTO.IsEmailPOInBody = false;
                            //                    objSupplierMasterDTO.IsEmailPOInPDF = false;
                            //                    objSupplierMasterDTO.IsEmailPOInCSV = false;
                            //                    objSupplierMasterDTO.IsEmailPOInX12 = false;
                            //                    objSupplierMasterDTO.IsSendtoVendor = false;
                            //                    objSupplierMasterDTO.IsVendorReturnAsn = false;
                            //                    objSupplierMasterDTO.IsSupplierReceivesKitComponents = false;
                            //                    Int64 SupplierMasterID = objSupplierMasterDAL.Insert(objSupplierMasterDTO);

                            //                    // Start -- insert into Room Schedule for PullSchedule type is Immediate 
                            //                    if (SupplierMasterID > 0)
                            //                    {
                            //                        SchedulerDTO objSchedulerDTO = objSupplierMasterDAL.GetRoomSchedule(SupplierMasterID, objSupplierMasterDTO.Room.GetValueOrDefault(0), 7);
                            //                        if (objSchedulerDTO == null)
                            //                        {
                            //                            // insert into Room Schedule for PullSchedule type is Immediate 
                            //                            SchedulerDTO objPullSchedulerDTO = new SchedulerDTO();
                            //                            objPullSchedulerDTO.SupplierId = SupplierMasterID;
                            //                            objPullSchedulerDTO.CompanyId = objSupplierMasterDTO.CompanyID.GetValueOrDefault(0);
                            //                            objPullSchedulerDTO.RoomId = objSupplierMasterDTO.Room.GetValueOrDefault(0);
                            //                            objPullSchedulerDTO.LoadSheduleFor = 7;
                            //                            objPullSchedulerDTO.ScheduleMode = 5;
                            //                            objPullSchedulerDTO.IsScheduleActive = true;
                            //                            objPullSchedulerDTO.MonthlyDayOfMonth = 2;
                            //                            objSupplierMasterDAL.SaveSupplierSchedule(objPullSchedulerDTO);
                            //                        }
                            //                    }

                            //                    /// End- logic for insert into Room Schedule for PullSchedule type is Immediate


                            //                    objSupplierMasterDTO = objSupplierMasterDAL.GetSupplierByIDPlain(SupplierMasterID);
                            //                    objSupplierMasterDALList.Add(objSupplierMasterDTO);

                            //                }
                            //            }
                            //        }
                            //        bool SaveToolList = true;
                            //        foreach (ItemSupplier item in LstItemSuppliermain)
                            //        {
                            //            SaveToolList = true;

                            //            ItemSupplier objDTO = new ItemSupplier();
                            //            Guid? ItemGUID = GetGUID(ImportMastersDTO.TableName.ItemMaster, item.ItemNumber);

                            //            if ((objDTO.SupplierName != null || objDTO.SupplierName != string.Empty))
                            //            {
                            //                if (ItemGUID.HasValue && ItemGUID != Guid.Empty)
                            //                {
                            //                    objDTO.ItemGUID = ItemGUID.Value;
                            //                    objDTO.SupplierName = item.SupplierName.Trim();
                            //                    //ItemSupplierDetailsDAL objItemSupplierDetailsDAL = new ItemSupplierDetailsDAL(SessionHelper.EnterPriseDBName);
                            //                    //if (objItemSupplierDetailsDAL.CheckSupplierDuplicate(item.SupplierNumber.Trim(), SessionHelper.RoomID, SessionHelper.CompanyID, objDTO.ItemGUID))
                            //                    //{

                            //                    objDTO.SupplierNumber = item.SupplierNumber;
                            //                    //}
                            //                    //else
                            //                    //{
                            //                    //    SaveToolList = false;
                            //                    //    objDTO = item;
                            //                    //    objDTO.Status = "Fail";

                            //                    //    objDTO.Reason = item.SupplierNumber.Trim() + " SupplierNumber is already exists.";
                            //                    //}



                            //                    objDTO.IsDefault = item.IsDefault;
                            //                    objDTO.SupplierID = objSupplierMasterDALList.ToList().Where(m => m.SupplierName.ToLower().Trim() == item.SupplierName.ToLower().Trim() && m.Room == SessionHelper.RoomID && m.CompanyID == SessionHelper.CompanyID && m.IsDeleted == false && m.IsArchived == false && m.isForBOM == false).FirstOrDefault().ID;
                            //                    objDTO.IsDeleted = false;
                            //                    objDTO.IsArchived = false;
                            //                    objDTO.Created = DateTimeUtility.DateTimeNow;
                            //                    objDTO.Updated = DateTimeUtility.DateTimeNow;
                            //                    objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //                    objDTO.Room = SessionHelper.RoomID;
                            //                    objDTO.CompanyID = SessionHelper.CompanyID;
                            //                    objDTO.CreatedBy = SessionHelper.UserID;
                            //                    objDTO.GUID = Guid.NewGuid();
                            //                    objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //                    objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //                    if (!string.IsNullOrEmpty(item.BlanketPOName))
                            //                    {
                            //                        objDTO.BlanketPOID = GetIDs(ImportMastersDTO.TableName.SupplierBlanketPODetails, Convert.ToString(item.BlanketPOName.Trim()), objDTO.SupplierID);
                            //                    }
                            //                    else
                            //                        objDTO.BlanketPOID = null;
                            //                    objDTO.AddedFrom = "Web";
                            //                    objDTO.EditedFrom = "Web";
                            //                }
                            //                if (ItemGUID.HasValue && ItemGUID != Guid.Empty && SaveToolList)
                            //                {
                            //                    var itemval = CurrentItemSupplierList.FirstOrDefault(x => x.ItemGUID == objDTO.ItemGUID && x.SupplierName == objDTO.SupplierName);
                            //                    if (itemval != null)
                            //                        CurrentItemSupplierList.Remove(itemval);
                            //                    CurrentItemSupplierList.Add(objDTO);
                            //                }
                            //                else
                            //                {
                            //                    objDTO = item;
                            //                    if (ItemGUID.HasValue && ItemGUID == Guid.Empty)
                            //                    {
                            //                        objDTO.Status = "Fail";
                            //                        objDTO.Reason = "Item does not exist.";
                            //                    }
                            //                    CurrentBlankItemSuppliermain.Add(objDTO);
                            //                }
                            //            }
                            //            else
                            //            {
                            //                objDTO = item;
                            //                objDTO.Status = "Fail";

                            //                objDTO.Reason = "SupplierName is Required.";


                            //                CurrentBlankItemSuppliermain.Add(objDTO);
                            //            }
                            //        }

                            //        List<ItemSupplier> lstreturn = new List<ItemSupplier>();
                            //        if (CurrentItemSupplierList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ItemSupplierDetails.ToString(), CurrentItemSupplierList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankItemSuppliermain.Count > 0)
                            //        {
                            //            foreach (ItemSupplier item in CurrentBlankItemSuppliermain)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<ItemSupplier>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (CurrentItemSupplierList.Count > 0)
                            //        {
                            //            eTurns.DAL.CacheHelper<IEnumerable<ItemSupplierDetailsDTO>>.InvalidateCache();

                            //            eTurns.DAL.CacheHelper<IEnumerable<ItemSupplier>>.InvalidateCache();
                            //            ItemSupplierDetailsDAL objItemSupplierDetailsDAL = new ItemSupplierDetailsDAL(SessionHelper.EnterPriseDBName);
                            //            List<ItemSupplierDetailsDTO> objItemSupplierDetailsDTO = new List<ItemSupplierDetailsDTO>();
                            //            objItemSupplierDetailsDTO = objItemSupplierDetailsDAL.GetSuppliersByRoomNormal(SessionHelper.RoomID, SessionHelper.CompanyID, "ID DESC");
                            //            foreach (ItemSupplier objCurrentItemManu in CurrentItemSupplierList.GroupBy(l => l.ItemGUID).Select(g => g.First()).ToList())
                            //            {
                            //                foreach (ItemSupplierDetailsDTO objItemManufacturer in objItemSupplierDetailsDTO.ToList().Where(l => l.IsDefault == true && l.ItemGUID == objCurrentItemManu.ItemGUID))
                            //                {
                            //                    ItemMasterDTO objItemMasterDTO = new ItemMasterDTO();
                            //                    ItemMasterDAL objItemMasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                            //                    if (objItemManufacturer.ItemGUID != Guid.Empty)
                            //                        objItemMasterDTO = objItemMasterDAL.GetRecordOnlyItemsFields(objItemManufacturer.ItemGUID.ToString(), SessionHelper.RoomID, SessionHelper.CompanyID);

                            //                    if (objItemMasterDTO != null)
                            //                    {
                            //                        objItemMasterDTO.SupplierID = objItemManufacturer.SupplierID;
                            //                        objItemMasterDTO.SupplierPartNo = objItemManufacturer.SupplierNumber;
                            //                        objItemMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                            //                        objItemMasterDTO.Updated = DateTimeUtility.DateTimeNow;
                            //                        objItemMasterDAL.Edit(objItemMasterDTO, SessionUserId);
                            //                    }
                            //                }
                            //            }
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //        Session["ItemSupplier"] = null;


                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.BarcodeMaster:
                            importBAL.SaveBarcodeMaster(lst, CurrentOptionList,
                                CurrentBarcodeList, CurrentItemManufacturerList,
                                ImportMastersDTO.TableName.BarcodeMaster, para, HasMoreRecords,
                                IsFirstCall, ref message, ref status, ref allSuccesfulRecords);

                            #region Barcode Master

                            //else if (ImportMastersDTO.TableName.BarcodeMaster.ToString() == TableName)
                            //{
                            //    List<ImportBarcodeMaster> CurrentBlankBarcodemain = new List<ImportBarcodeMaster>();
                            //    ImportBarcodeMaster[] LstItemManufacturermain = s.Deserialize<ImportBarcodeMaster[]>(para);
                            //    if (LstItemManufacturermain != null && LstItemManufacturermain.Length > 0)
                            //    {
                            //        CurrentBlankBarcodemain = new List<ImportBarcodeMaster>();

                            //        ImportBarcodeMaster objBarcodeDAL = new ImportBarcodeMaster();
                            //        CurrentItemManufacturerList = new List<ItemManufacturer>();
                            //        List<BarcodeMasterDTO> objManufacturerMasterDALList = new List<BarcodeMasterDTO>();
                            //        CurrentBarcodeList = new List<ImportBarcodeMaster>();

                            //        //List<BinMasterDTO> objBinMasterListDTO = new BinMasterDAL(SessionHelper.EnterPriseDBName).GetAllRecords(SessionHelper.RoomID, SessionHelper.CompanyID, false, false).ToList();
                            //        List<BinMasterDTO> objBinMasterListDTO = new BinMasterDAL(SessionHelper.EnterPriseDBName).GetBinMasterByRoomID(SessionHelper.RoomID, SessionHelper.CompanyID, false, false).ToList();
                            //        foreach (ImportBarcodeMaster item in LstItemManufacturermain)
                            //        {

                            //            ImportBarcodeMaster objDTO = new ImportBarcodeMaster();

                            //            ModuleMasterDTO objModuleMasterDTO = new ModuleMasterDAL(SessionHelper.EnterPriseDBName).GetModuleByNameNormal(item.ModuleName);
                            //            BarcodeMasterDAL objBarcodeMasterDAL = new BarcodeMasterDAL(SessionHelper.EnterPriseDBName);
                            //            BarcodeMasterDTO objBarcodeMasterDTO = new BarcodeMasterDTO();



                            //            if ((item.ItemNumber != null && item.ModuleName != string.Empty && item.BarcodeString != string.Empty))
                            //            {
                            //                Guid? ItemGUID;
                            //                if (item.ModuleName.ToLower().Trim() == "item master")
                            //                {
                            //                    ItemMasterDAL objItemmasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                            //                    ItemMasterDTO objItemmasterDTO = new ItemMasterDTO();
                            //                    ItemGUID = objItemmasterDAL.GetGuidByItemNumber(item.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);
                            //                }
                            //                else if (item.ModuleName.ToLower().Trim() == "assets")
                            //                {
                            //                    AssetMasterDAL objAssetmasterDAL = new AssetMasterDAL(SessionHelper.EnterPriseDBName);
                            //                    List<AssetMasterDTO> objAssetmasterDTO = new List<AssetMasterDTO>();
                            //                    objAssetmasterDTO = objAssetmasterDAL.GetAllAssetsByRoom(SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                            //                    if (objAssetmasterDTO != null)
                            //                    {
                            //                        AssetMasterDTO objAssetMasterDTO = objAssetmasterDTO.Where(a => a.AssetName == item.ItemNumber).FirstOrDefault();
                            //                        if (objAssetMasterDTO != null)
                            //                        {
                            //                            ItemGUID = objAssetMasterDTO.GUID;
                            //                        }
                            //                        else
                            //                        {
                            //                            ItemGUID = Guid.Empty;
                            //                        }
                            //                    }
                            //                    else
                            //                    {
                            //                        ItemGUID = Guid.Empty;
                            //                    }
                            //                }
                            //                else if (item.ModuleName.ToLower().Trim() == "tool master")
                            //                {
                            //                    ToolMasterDAL objToolmasterDAL = new ToolMasterDAL(SessionHelper.EnterPriseDBName);
                            //                    ToolMasterDTO objToolMasterDTO = objToolmasterDAL.GetToolBySerialPlain(item.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);
                            //                    if (objToolMasterDTO != null)
                            //                    {
                            //                        ItemGUID = objToolMasterDTO.GUID;
                            //                    }
                            //                    else
                            //                    {
                            //                        ItemGUID = Guid.Empty;
                            //                    }

                            //                }
                            //                else
                            //                {
                            //                    ItemGUID = Guid.Empty;
                            //                }
                            //                if (ItemGUID.HasValue && ItemGUID != Guid.Empty)
                            //                {
                            //                    objBarcodeMasterDTO = objBarcodeMasterDAL.GetAllRecords(SessionHelper.RoomID, SessionHelper.CompanyID).ToList().Where(b => b.BarcodeString == item.BarcodeString && b.RefGUID == ItemGUID.Value).FirstOrDefault();
                            //                }
                            //                else
                            //                {
                            //                    objBarcodeMasterDTO = null;
                            //                }
                            //                if (objBarcodeMasterDTO != null)
                            //                {
                            //                    objDTO = item;
                            //                    objDTO.Status = "Fail";
                            //                    objDTO.Reason = "Barcode string already exists.";
                            //                    CurrentBlankBarcodemain.Add(objDTO);
                            //                }
                            //                else
                            //                {
                            //                    if (ItemGUID.HasValue && ItemGUID != Guid.Empty)
                            //                    {
                            //                        objDTO.RefGuid = ItemGUID.Value;
                            //                        objDTO.BarcodeString = item.BarcodeString;
                            //                        objDTO.ModuleGuid = objModuleMasterDTO.GUID;
                            //                        if (item.ModuleName == "Item Master")
                            //                        {


                            //                            if (!string.IsNullOrEmpty(item.BinNumber))
                            //                            {
                            //                                BinMasterDTO objBinMasterDTO = objBinMasterListDTO.Where(b => b.BinNumber.ToLower().Trim() == item.BinNumber.ToLower().Trim() && b.ItemGUID == ItemGUID.Value).FirstOrDefault();
                            //                                if (objBinMasterDTO != null)
                            //                                {
                            //                                    objDTO.BinGuid = objBinMasterDTO.GUID;
                            //                                }
                            //                                else
                            //                                {
                            //                                    BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                            //                                    BinMasterDTO objBinMasterDTOToInsert = null;
                            //                                    {
                            //                                        objBinMasterDTOToInsert = new BinMasterDTO();
                            //                                        objBinMasterDTOToInsert.BinNumber = item.BinNumber.Trim();
                            //                                        objBinMasterDTOToInsert.ParentBinId = null;
                            //                                        objBinMasterDTOToInsert.CreatedBy = SessionHelper.UserID;
                            //                                        objBinMasterDTOToInsert.LastUpdatedBy = SessionHelper.UserID;
                            //                                        objBinMasterDTOToInsert.Created = DateTimeUtility.DateTimeNow;
                            //                                        objBinMasterDTOToInsert.LastUpdated = DateTimeUtility.DateTimeNow;
                            //                                        objBinMasterDTOToInsert.Room = SessionHelper.RoomID;
                            //                                        objBinMasterDTOToInsert.CompanyID = SessionHelper.CompanyID;
                            //                                        objBinMasterDTOToInsert.AddedFrom = "Web";
                            //                                        objBinMasterDTOToInsert.EditedFrom = "Web";
                            //                                        objBinMasterDTOToInsert.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //                                        objBinMasterDTOToInsert.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //                                        objBinMasterDTOToInsert.IsOnlyFromItemUI = true;
                            //                                        objBinMasterDTOToInsert = objBinMasterDAL.InsertBin(objBinMasterDTOToInsert);

                            //                                    }
                            //                                    objDTO.BinGuid = (objBinMasterDTOToInsert.GUID);
                            //                                    BinMasterDTO objInventoryLocation = objBinMasterDAL.GetInventoryLocation(objBinMasterDTOToInsert.ID, ItemGUID.Value, SessionHelper.RoomID, SessionHelper.CompanyID);

                            //                                    if (objInventoryLocation == null)
                            //                                    {
                            //                                        objInventoryLocation = new BinMasterDTO();
                            //                                        objInventoryLocation.BinNumber = objBinMasterDTOToInsert.BinNumber;
                            //                                        objInventoryLocation.ParentBinId = objBinMasterDTOToInsert.ID;
                            //                                        objInventoryLocation.CreatedBy = SessionHelper.UserID;
                            //                                        objInventoryLocation.LastUpdatedBy = SessionHelper.UserID;
                            //                                        objInventoryLocation.Created = DateTimeUtility.DateTimeNow;
                            //                                        objInventoryLocation.LastUpdated = DateTimeUtility.DateTimeNow;
                            //                                        objInventoryLocation.MinimumQuantity = objBinMasterDTOToInsert.MinimumQuantity;
                            //                                        objInventoryLocation.MaximumQuantity = objBinMasterDTOToInsert.MaximumQuantity;
                            //                                        objInventoryLocation.CriticalQuantity = objBinMasterDTOToInsert.CriticalQuantity;
                            //                                        objInventoryLocation.eVMISensorID = objBinMasterDTOToInsert.eVMISensorID;
                            //                                        objInventoryLocation.eVMISensorPort = objBinMasterDTOToInsert.eVMISensorPort;
                            //                                        objInventoryLocation.IsDefault = objBinMasterDTOToInsert.IsDefault;
                            //                                        objInventoryLocation.ItemGUID = ItemGUID.Value;
                            //                                        objInventoryLocation.Room = SessionHelper.RoomID;
                            //                                        objInventoryLocation.CompanyID = SessionHelper.CompanyID;
                            //                                        objInventoryLocation.AddedFrom = "Web";
                            //                                        objInventoryLocation.EditedFrom = "Web";
                            //                                        objInventoryLocation.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //                                        objInventoryLocation.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //                                        objInventoryLocation.IsOnlyFromItemUI = true;
                            //                                        objInventoryLocation = objBinMasterDAL.InsertBin(objInventoryLocation);
                            //                                        objDTO.BinGuid = (objInventoryLocation.GUID);
                            //                                    }
                            //                                    else
                            //                                    {
                            //                                        objInventoryLocation.LastUpdated = DateTimeUtility.DateTimeNow;
                            //                                        objInventoryLocation.LastUpdatedBy = SessionHelper.UserID;
                            //                                        objInventoryLocation.MinimumQuantity = objBinMasterDTOToInsert.MinimumQuantity;
                            //                                        objInventoryLocation.MaximumQuantity = objBinMasterDTOToInsert.MaximumQuantity;
                            //                                        objInventoryLocation.CriticalQuantity = objBinMasterDTOToInsert.CriticalQuantity;
                            //                                        objInventoryLocation.eVMISensorID = objBinMasterDTOToInsert.eVMISensorID;
                            //                                        objInventoryLocation.eVMISensorPort = objBinMasterDTOToInsert.eVMISensorPort;
                            //                                        objInventoryLocation.IsDefault = objBinMasterDTOToInsert.IsDefault;
                            //                                        objInventoryLocation.EditedFrom = "Web";
                            //                                        objInventoryLocation.IsOnlyFromItemUI = true;
                            //                                        objInventoryLocation.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //                                        objBinMasterDAL.Edit(objInventoryLocation);
                            //                                    }
                            //                                }
                            //                            }
                            //                            else
                            //                            {
                            //                                BinMasterDTO objBinMasterDTO = objBinMasterListDTO.Where(b => b.IsDefault == true && b.ItemGUID == ItemGUID.Value).FirstOrDefault();
                            //                                if (objBinMasterDTO != null)
                            //                                    objDTO.BinGuid = objBinMasterDTO.GUID;
                            //                            }

                            //                        }

                            //                        objDTO.ModuleName = item.ModuleName;
                            //                        objDTO.ItemNumber = item.ItemNumber;
                            //                        objDTO.IsDeleted = false;
                            //                        objDTO.IsArchived = false;
                            //                        objDTO.CreatedOn = DateTimeUtility.DateTimeNow;
                            //                        objDTO.UpdatedOn = DateTimeUtility.DateTimeNow;
                            //                        objDTO.UpdatedBy = SessionHelper.UserID;
                            //                        objDTO.RoomID = SessionHelper.RoomID;
                            //                        objDTO.CompanyID = SessionHelper.CompanyID;
                            //                        objDTO.CreatedBy = SessionHelper.UserID;
                            //                        objDTO.GUID = Guid.NewGuid();
                            //                        objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                            //                        objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                            //                        objDTO.AddedFrom = "Web";
                            //                        objDTO.EditedFrom = "Web";
                            //                        objDTO.BarcodeAdded = "Manual";
                            //                    }

                            //                    if (ItemGUID.HasValue && ItemGUID != Guid.Empty)
                            //                    {
                            //                        var itemval = CurrentBarcodeList.FirstOrDefault(x => x.RefGuid == objDTO.RefGuid && x.ModuleGuid == objDTO.ModuleGuid && x.BarcodeString == objDTO.BarcodeString);
                            //                        if (itemval != null)
                            //                            CurrentBarcodeList.Remove(itemval);
                            //                        CurrentBarcodeList.Add(objDTO);
                            //                    }
                            //                    else
                            //                    {
                            //                        objDTO = item;

                            //                        objDTO.Status = "Fail";
                            //                        if (item.ModuleName.ToLower().Trim() == "item master")
                            //                        {
                            //                            objDTO.Reason = "Item Number does not exist.";
                            //                        }
                            //                        else if (item.ModuleName.ToLower().Trim() == "assets")
                            //                        {
                            //                            objDTO.Reason = "Asset does not exist.";
                            //                        }
                            //                        else if (item.ModuleName.ToLower().Trim() == "tool master")
                            //                        {
                            //                            objDTO.Reason = "Tool does not exist.";
                            //                        }

                            //                        CurrentBlankBarcodemain.Add(objDTO);
                            //                    }
                            //                }
                            //            }
                            //            else
                            //            {
                            //                objDTO = item;
                            //                objDTO.Status = "Fail";

                            //                objDTO.Reason = "Item Master is Required,BarcodeString is Required,ModuleName is Required.";


                            //                CurrentBlankBarcodemain.Add(objDTO);
                            //            }

                            //        }

                            //        List<ImportBarcodeMaster> lstreturn = new List<ImportBarcodeMaster>();
                            //        if (CurrentBarcodeList.Count > 0)
                            //            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.BarcodeMaster.ToString(), CurrentBarcodeList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, CurrentOptionList);
                            //        if (CurrentBlankBarcodemain.Count > 0)
                            //        {
                            //            foreach (ImportBarcodeMaster item in CurrentBlankBarcodemain)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<ImportBarcodeMaster>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }

                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }
                            //        Session["ItemManufacture"] = null;


                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.UDF:

                            #region [UDF]

                            //else if (ImportMastersDTO.TableName.UDF.ToString() == TableName)
                            {
                                List<UDFMasterMain> CurrentBlankUDFmain = new List<UDFMasterMain>();
                                List<UDFMasterMain> CurrentUDFmain = new List<UDFMasterMain>();
                                UDFMasterMain[] lstUdfimport = s.Deserialize<UDFMasterMain[]>(para);
                                List<UDFMasterMain> lstreturn = new List<UDFMasterMain>();
                                Dictionary<string, int> modulewiseUDF = new Dictionary<string, int>();
                                UDFDAL _objUDFDAL = new UDFDAL(SessionHelper.EnterPriseDBName);

                                if (lstUdfimport != null && lstUdfimport.Length > 0)
                                {
                                    bool isadded = true;
                                    foreach (UDFMasterMain item in lstUdfimport)
                                    {
                                        isadded = true;
                                        item.Reason = string.Empty;
                                        if (!string.IsNullOrWhiteSpace(item.ModuleName) && !string.IsNullOrWhiteSpace(item.ControlType) && !string.IsNullOrWhiteSpace(item.UDFColumnName))
                                        {

                                            if (!eTurnsWeb.Models.UDFDictionaryTables.IsVaidImportUDFTable(item.ModuleName.ToLower()))
                                            {
                                                item.Reason += ResImportMasters.MsgInvalidTableName;
                                                item.Status = "fail";
                                                isadded = false;
                                            }
                                            if (!(new string[] { "udf1", "udf2", "udf3", "udf4", "udf5" }).Contains(item.UDFColumnName.ToLower().Trim()))
                                            {
                                                if (!modulewiseUDF.ContainsKey(item.ModuleName))
                                                {
                                                    UDFModule objUDFModule = _objUDFDAL.GetUDFModule(item.ModuleName);
                                                    if (objUDFModule != null)
                                                    {
                                                        if (objUDFModule.NoOfUdfs > 5)
                                                        {
                                                            modulewiseUDF.Add(item.ModuleName, objUDFModule.NoOfUdfs);
                                                        }
                                                    }

                                                }
                                                if(!modulewiseUDF.ContainsKey(item.ModuleName))// && modulewiseUDF[item.ModuleName] > 5 && (!(new string[] { "udf6", "udf7", "udf8", "udf9", "udf10" }).Contains(item.UDFColumnName.ToLower().Trim())))
                                                {
                                                    item.Reason += ResImportMasters.MsgInvalidUDFName;
                                                    item.Status = "fail";
                                                    isadded = false;

                                                } else if (!(new string[] { "udf6", "udf7", "udf8", "udf9", "udf10" }).Contains(item.UDFColumnName.ToLower().Trim()))
                                                {
                                                    item.Reason += ResImportMasters.MsgInvalidUDFName;
                                                    item.Status = "fail";
                                                    isadded = false;
                                                }
                                          
                                            }
                                            if (!(new string[] { "textbox", "dropdown", "dropdown editable" }).Contains(item.ControlType.ToLower().Trim()))
                                            {
                                                item.Reason += string.Format(ResCommon.MsgInvalid, ResUDFSetup.ControlType); // "control type name is invalid";
                                                item.Status = "fail";
                                                isadded = false;
                                            }
                                            if (isadded)
                                            {
                                                CurrentUDFmain.Add(item);
                                            }
                                        }
                                        else
                                        {
                                            if (string.IsNullOrWhiteSpace(item.ModuleName))
                                            {
                                                item.Reason += ResImportMasters.MsgModuleNameRequired;
                                                item.Status = "fail";
                                                isadded = false;
                                            }
                                            if (string.IsNullOrWhiteSpace(item.ControlType))
                                            {
                                                item.Reason += string.Format(ResMessage.MsgRequired, ResUDFSetup.ControlType);//"Control type is mandatory";
                                                item.Status = "fail";
                                                isadded = false;
                                            }
                                            if (string.IsNullOrWhiteSpace(item.UDFColumnName))
                                            {
                                                item.Reason += ResImportMasters.MsgUDFNameRequired;
                                                item.Status = "fail";
                                                isadded = false;
                                            }
                                        }

                                    }
                                    UDFOptionDAL objUDFDAL = new UDFOptionDAL(SessionHelper.EnterPriseDBName);
                                    lstreturn = objUDFDAL.SaveModuleUDF(CurrentUDFmain, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
                                    //lstreturn = CurrentUDFmain;
                                    foreach (UDFMasterMain um in lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success"))
                                    {
                                        //actual resource value  um.UDFColumnName
                                        eTurns.DTO.Resources.ResourceHelper resHelper = new eTurns.DTO.Resources.ResourceHelper();
                                        eTurns.DTO.Resources.ResourceModuleHelper resModuleHelper = new eTurns.DTO.Resources.ResourceModuleHelper();
                                        string culter = eTurns.DTO.Resources.ResourceHelper.CurrentCult.ToString();
                                        string ResFileName = eTurnsWeb.Models.UDFDictionaryTables.GetUDFResourceFromKey((um.ModuleName));
                                        string val = ResourceUtils.GetResource(ResFileName, um.UDFColumnName, true, true, false);
                                        resHelper.SaveResourcesByKey(ResFileName, culter, um.UDFColumnName, um.UDFName, true, false);
                                        resModuleHelper.SaveResourcesByKey(ResFileName, culter, um.UDFColumnName, um.UDFName, true, false);
                                        UDFDAL objUDF = new UDFDAL(SessionHelper.EnterPriseDBName);
                                        //List<string> ReportResourceFileNameList = objUDF.getReportResourceFileName(ResFileName);
                                        Dictionary<int, string> ReportResourceFileNameList = objUDF.getReportResourceFileNameWithPrefix(ResFileName);

                                        {
                                            if (ReportResourceFileNameList != null && ReportResourceFileNameList.Count() > 0)
                                            {
                                                foreach (KeyValuePair<int, string> ReportResourceFileName in ReportResourceFileNameList)
                                                {
                                                    string ResourceFileName = ReportResourceFileName.Value.Split('$')[0];
                                                    string Prefix = ReportResourceFileName.Value.Split('$')[1];

                                                    um.UDFColumnName = Prefix + um.UDFColumnName;

                                                    val = ResourceUtils.GetResource(ResourceFileName, um.UDFColumnName, true, true, false);
                                                    resHelper.SaveResourcesByKey(ResourceFileName, culter, um.UDFColumnName, um.UDFName, true, false, false);
                                                    resModuleHelper.SaveResourcesByKey(ResourceFileName, culter, um.UDFColumnName, um.UDFName, true, false, false);
                                                    if (!string.IsNullOrWhiteSpace(Prefix))
                                                    {
                                                        um.UDFColumnName = um.UDFColumnName.Replace(Prefix, "");
                                                    }

                                                }
                                            }
                                        }

                                    }
                                    CurrentBlankUDFmain = lstUdfimport.Where(t => t.Status == "fail").ToList();
                                    lstreturn = CurrentUDFmain.Union(CurrentBlankUDFmain).ToList();
                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<UDFMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }

                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                    Session["ItemManufacture"] = null;


                                }
                                CacheHelper<IEnumerable<UDFDTO>>.InvalidateCache();
                                CacheHelper<IEnumerable<UDFOptionsDTO>>.InvalidateCache();

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ProjectMaster:
                            #region Project Spend Master

                            //else if (ImportMastersDTO.TableName.ProjectMaster.ToString() == TableName)
                            {
                                List<ProjectMasterMain> CurrentBlankProjectSpendmain = new List<ProjectMasterMain>();
                                ProjectMasterMain[] LstProjectSpendmain = s.Deserialize<ProjectMasterMain[]>(para);
                                if (LstProjectSpendmain != null && LstProjectSpendmain.Length > 0)
                                {
                                    CurrentBlankProjectSpendmain = new List<ProjectMasterMain>();

                                    ProjectMasterMain objBarcodeDAL = new ProjectMasterMain();
                                    CurrentProjectMasterList = new List<ProjectMasterMain>();
                                    List<ProjectMasterDTO> objProjectSpendList = new List<ProjectMasterDTO>();
                                    CurrentProjectMasterList = new List<ProjectMasterMain>();


                                    foreach (ProjectMasterMain item in LstProjectSpendmain)
                                    {
                                        Guid? ItemGUID;

                                        ItemMasterDAL objItemmasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                                        ItemMasterDTO objItemmasterDTO = new ItemMasterDTO();
                                        ItemGUID = objItemmasterDAL.GetGuidByItemNumber(item.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);

                                        ProjectMasterMain objDTO = new ProjectMasterMain();
                                        if ((item.ItemNumber != null && item.ProjectSpendName != string.Empty && item.DollarLimitAmount != null))
                                        {

                                            objDTO.ProjectSpendName = item.ProjectSpendName;
                                            objDTO.Description = item.Description;
                                            objDTO.DollarLimitAmount = item.DollarLimitAmount;
                                            objDTO.TrackAllUsageAgainstThis = item.TrackAllUsageAgainstThis;
                                            objDTO.IsClosed = item.IsClosed;
                                            objDTO.UDF1 = item.UDF1;
                                            objDTO.UDF2 = item.UDF2;
                                            objDTO.UDF3 = item.UDF3;
                                            objDTO.UDF4 = item.UDF4;
                                            objDTO.UDF5 = item.UDF5;
                                            objDTO.ItemNumber = item.ItemNumber;
                                            objDTO.ItemDollarLimitAmount = item.ItemDollarLimitAmount;
                                            objDTO.ItemQuantityLimitAmount = item.ItemQuantityLimitAmount;
                                            objDTO.IsLineItemDeleted = item.IsLineItemDeleted;

                                            objDTO.IsDeleted = item.IsDeleted;
                                            objDTO.IsArchived = item.IsArchived;
                                            objDTO.Created = DateTimeUtility.DateTimeNow;
                                            objDTO.Updated = DateTimeUtility.DateTimeNow;
                                            objDTO.LastUpdatedBy = SessionHelper.UserID;
                                            objDTO.Room = SessionHelper.RoomID;
                                            objDTO.CompanyID = SessionHelper.CompanyID;
                                            objDTO.CreatedBy = SessionHelper.UserID;
                                            objDTO.GUID = Guid.NewGuid();
                                            objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                            objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                            objDTO.AddedFrom = "Web";
                                            objDTO.EditedFrom = "Web";
                                            objDTO.WhatWhereAction = "Import";
                                            if (ItemGUID.HasValue && ItemGUID != Guid.Empty)
                                            {
                                                var itemval = CurrentProjectMasterList.FirstOrDefault(x => x.ItemNumber == objDTO.ItemNumber && x.ProjectSpendName == objDTO.ProjectSpendName);
                                                ProjectMasterMain objProjectMasterMain = CurrentProjectMasterList.Where(x => x.ProjectSpendName == item.ProjectSpendName).FirstOrDefault();

                                                if (itemval != null)
                                                    CurrentProjectMasterList.Remove(itemval);
                                                if (objProjectMasterMain != null)
                                                {
                                                    objDTO.DollarLimitAmount = objProjectMasterMain.DollarLimitAmount;
                                                    objDTO.UDF1 = objProjectMasterMain.UDF1;
                                                    objDTO.UDF2 = objProjectMasterMain.UDF2;
                                                    objDTO.UDF3 = objProjectMasterMain.UDF3;
                                                    objDTO.UDF4 = objProjectMasterMain.UDF4;
                                                    objDTO.UDF5 = objProjectMasterMain.UDF5;
                                                    objDTO.TrackAllUsageAgainstThis = objProjectMasterMain.TrackAllUsageAgainstThis;
                                                    objDTO.IsClosed = objProjectMasterMain.IsClosed;
                                                    objDTO.IsDeleted = objProjectMasterMain.IsDeleted;
                                                }
                                                CurrentProjectMasterList.Add(objDTO);
                                            }
                                            else
                                            {
                                                objDTO = item;

                                                objDTO.Status = "Fail";
                                                objDTO.Reason = ResItemMaster.MsgItemDoesNotExist; 
                                                CurrentBlankProjectSpendmain.Add(objDTO);
                                            }
                                        }
                                        else
                                        {

                                            objDTO = item;
                                            objDTO.Status = "Fail";
                                            objDTO.Reason = string.Format(ResMessage.MsgRequired, ResItemMaster.ItemNumber) + string.Format(ResMessage.MsgRequired, ResProjectMaster.ProjectSpendName) + string.Format(ResMessage.MsgRequired, ResProjectMaster.DollarLimitAmount);
                                            CurrentBlankProjectSpendmain.Add(objDTO);
                                        }
                                    }
                                    List<ProjectMasterMain> lstreturn = new List<ProjectMasterMain>();
                                    if (CurrentProjectMasterList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ProjectMaster.ToString(), CurrentProjectMasterList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);

                                    ProjectMasterDAL objProjectMasterDAL = new ProjectMasterDAL(SessionHelper.EnterPriseDBName);

                                    foreach (ProjectMasterMain p in lstreturn)
                                    {
                                        ItemMasterDAL objItemMasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                                        Guid? ItemGuid = new Guid();
                                        Guid ProjectMasterGUID = new Guid();
                                        ItemGuid = objItemMasterDAL.GetItemGuIDOnlyByItemNumber(p.ItemNumber, SessionHelper.RoomID);
                                        var projectMaster = objProjectMasterDAL.GetProjectByName(p.ProjectSpendName, SessionHelper.RoomID, SessionHelper.CompanyID, null);

                                        if (projectMaster != null && projectMaster.GUID != Guid.Empty)
                                        {
                                            ProjectMasterGUID = projectMaster.GUID;
                                        }

                                        ProjectSpendItemsDAL objProjectSpendItemsDAL = new ProjectSpendItemsDAL(SessionHelper.EnterPriseDBName);
                                        ProjectSpendItemsDTO objProjectSpendItem = objProjectSpendItemsDAL.GetSingleProjectSpendItemByItemGuidPlain(ProjectMasterGUID, SessionHelper.RoomID, SessionHelper.CompanyID, ItemGuid.GetValueOrDefault(Guid.Empty));

                                        if (objProjectSpendItem == null)
                                        {
                                            objProjectSpendItem = new ProjectSpendItemsDTO();
                                            objProjectSpendItem.GUID = new Guid();
                                            objProjectSpendItem.ID = 0;
                                            objProjectSpendItem.AddedFrom = "Web";
                                            objProjectSpendItem.Created = DateTimeUtility.DateTimeNow;
                                            objProjectSpendItem.CreatedBy = SessionHelper.UserID;
                                            objProjectSpendItem.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                        }

                                        //ProjectSpendItemsDTO objProjectSpendItem = new ProjectSpendItemsDTO();

                                        objProjectSpendItem.CompanyID = SessionHelper.CompanyID;

                                        objProjectSpendItem.QuantityLimit = p.ItemQuantityLimitAmount;
                                        objProjectSpendItem.DollarLimitAmount = p.ItemDollarLimitAmount;
                                        objProjectSpendItem.EditedFrom = "Web";
                                        objProjectSpendItem.IsArchived = p.IsArchived;
                                        objProjectSpendItem.IsDeleted = p.IsLineItemDeleted;
                                        objProjectSpendItem.IsArchived = p.IsLineItemDeleted;
                                        objProjectSpendItem.LastUpdated = DateTimeUtility.DateTimeNow;
                                        objProjectSpendItem.LastUpdatedBy = SessionHelper.UserID;
                                        objProjectSpendItem.ProjectGUID = ProjectMasterGUID;
                                        objProjectSpendItem.ReceivedOn = DateTimeUtility.DateTimeNow;

                                        objProjectSpendItem.Room = SessionHelper.RoomID;
                                        if (ItemGuid != null)
                                            objProjectSpendItem.ItemGUID = ItemGuid;

                                        //Extra Fields to set
                                        objProjectSpendItem.QuantityUsed = 0;
                                        objProjectSpendItem.DollarUsedAmount = 0;


                                        if (objProjectSpendItem.ID == 0)
                                        {
                                            objProjectSpendItemsDAL.Insert(objProjectSpendItem);
                                        }
                                        else
                                        {
                                            objProjectSpendItemsDAL.Edit(objProjectSpendItem);
                                        }
                                    }

                                    if (CurrentBlankProjectSpendmain.Count > 0)
                                    {
                                        foreach (ProjectMasterMain item in CurrentBlankProjectSpendmain)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<ProjectMasterMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }

                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                    Session["ItemSupplier"] = null;
                                }
                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ItemLocationQty:
                            #region Item Location Quantity Master
                            //if (ImportMastersDTO.TableName.ItemLocationQty.ToString() == TableName)
                            {

                                //XElement Settinfile = XElement.Load(System.Web.Hosting.HostingEnvironment.MapPath("/SiteSettings.xml"));
                                string ILQImportNew = SiteSettingHelper.ILQImportNew; // Settinfile.Element("ILQImportNew").Value;
                                List<InventoryLocationMain> CurrentBlankInventoryLocationList = new List<InventoryLocationMain>();
                                List<InventoryLocationMain> LstInventoryLocation = s.Deserialize<List<InventoryLocationMain>>(para);
                                if (ILQImportNew == "1")
                                {
                                    List<ItemLocationDetailsDTO> lstProperRecords = new List<ItemLocationDetailsDTO>();
                                    List<ItemLocationDetailsDTO> lstNotProperRecords = new List<ItemLocationDetailsDTO>();
                                    List<ItemLocationDetailsDTO> lstValidated = new List<ItemLocationDetailsDTO>();
                                    ItemLocationDetailsDAL objItemLocationDetailsDAL = new ItemLocationDetailsDAL(SessionHelper.EnterPriseDBName);
                                    string RoomDateFormat = Convert.ToString(SessionHelper.RoomDateFormat);
                                    string MsgCreditTransactionForSerialNumber = string.Empty;
                                    string MsgPullQtyIsntEnoughForCredit = string.Empty;
                                    lstValidated = objItemLocationDetailsDAL.ValidateILQRecords(LstInventoryLocation, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, RoomDateFormat,SessionHelper.EnterPriceID, ResourceHelper.CurrentCult, out MsgCreditTransactionForSerialNumber, out MsgPullQtyIsntEnoughForCredit, false);
                                    lstProperRecords = lstValidated.Where(t => (t.ErrorMessege ?? "") == "").ToList();

                                    #region WI-7318	AB Integration | Sync Item cost when an item Added to Order line item.
                                    List<string> ASINs = new List<string>();
                                    Dictionary<List<ItemMasterDTO>, string> lstNonOrderableItems = new Dictionary<List<ItemMasterDTO>, string>();
                                    if (SessionHelper.AllowABIntegration)
                                    {
                                        foreach (var ABitem in lstProperRecords)
                                        {
                                            ItemMasterDTO objABItemDTO = new ItemMasterDTO();
                                            objABItemDTO = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetItemWithMasterTableJoins(null, ABitem.ItemGUID.GetValueOrDefault(Guid.Empty), SessionHelper.RoomID, SessionHelper.CompanyID);

                                            if (objABItemDTO != null && !string.IsNullOrWhiteSpace(objABItemDTO.SupplierPartNo))
                                            {
                                                ProductDetailsDAL objProductDetailsDAL = new ProductDetailsDAL(SessionHelper.EnterPriseDBName);
                                                Int64 ABItemMappingID = objProductDetailsDAL.CheckItemAddedFromAB(objABItemDTO.SupplierPartNo, objABItemDTO.GUID, SessionHelper.CompanyID, SessionHelper.RoomID);
                                                if (ABItemMappingID > 0)
                                                {
                                                    ASINs.Add(objABItemDTO.SupplierPartNo);
                                                }
                                            }
                                        }
                                        if (ASINs != null && ASINs.Count > 0)
                                        {
                                            lstNonOrderableItems = eTurns.ABAPIBAL.Helper.ABAPIHelper.ItemSyncToRoom(ASINs, SessionHelper.CompanyID, SessionHelper.RoomID, SessionHelper.UserID, SessionHelper.EnterPriseDBName);
                                            if (lstNonOrderableItems != null && lstNonOrderableItems.Count > 0
                                                 && lstNonOrderableItems.Values.Contains("success")
                                                 && lstNonOrderableItems.Keys.Count > 0
                                                 && lstNonOrderableItems.Keys.SelectMany(c => c).ToList().Count > 0)
                                            {
                                                List<ItemMasterDTO> lstReturnsItems = new List<ItemMasterDTO>();
                                                lstReturnsItems = lstNonOrderableItems.Keys.SelectMany(c => c).ToList();
                                                foreach (ItemMasterDTO itemMaster in lstReturnsItems)
                                                {
                                                    foreach (ItemLocationDetailsDTO objRecords in lstValidated.Where(x => x.ItemNumber == itemMaster.ItemNumber).ToList())
                                                    {
                                                        objRecords.ErrorMessege = (string.IsNullOrWhiteSpace(objRecords.ErrorMessege)
                                                                                    ? string.Format(ResOrder.ItemnotOrderable, itemMaster.ItemNumber)
                                                                                    : objRecords.ErrorMessege + "," + string.Format(ResOrder.ItemnotOrderable, itemMaster.ItemNumber));
                                                    }
                                                }
                                                lstProperRecords = lstProperRecords.Where(x => !lstReturnsItems.Select(y => y.ItemNumber).Contains(x.ItemNumber)).ToList();                                                
                                            }
                                        }
                                    }
                                    foreach (var ABitem in lstProperRecords)
                                    {
                                        ItemMasterDTO objItemDTO = new ItemMasterDTO();
                                        objItemDTO = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetItemWithMasterTableJoins(null, ABitem.ItemGUID.GetValueOrDefault(Guid.Empty), SessionHelper.RoomID, SessionHelper.CompanyID);

                                        if (SessionHelper.AllowABIntegration && ASINs != null && ASINs.Count > 0
                                            && objItemDTO != null
                                            && ASINs.Contains(objItemDTO.SupplierPartNo))
                                        {
                                            ABitem.Cost = objItemDTO.Cost.GetValueOrDefault(0);
                                        }
                                    }
                                    #endregion

                                    lstProperRecords = (from ilq in lstProperRecords
                                                        group ilq by new { ilq.BinNumber, ilq.BinID, ilq.Cost, ilq.Expiration, ilq.ItemNumber, ilq.LotNumber, ilq.Received, ilq.SerialNumber, ilq.ItemGUID } into groupedilq
                                                        select new ItemLocationDetailsDTO
                                                        {
                                                            BinID = groupedilq.Key.BinID,
                                                            BinNumber = groupedilq.Key.BinNumber,
                                                            CompanyID = SessionHelper.CompanyID,
                                                            ConsignedQuantity = groupedilq.Sum(t => (t.ConsignedQuantity ?? 0)),
                                                            Cost = groupedilq.Key.Cost,
                                                            Created = DateTime.UtcNow,
                                                            CreatedBy = SessionHelper.UserID,
                                                            CustomerOwnedQuantity = groupedilq.Sum(t => (t.CustomerOwnedQuantity ?? 0)),
                                                            Expiration = groupedilq.Key.Expiration,
                                                            GUID = Guid.NewGuid(),
                                                            InsertedFrom = "import",
                                                            IsArchived = false,
                                                            IsDeleted = false,
                                                            ItemGUID = groupedilq.Key.ItemGUID,
                                                            ItemNumber = groupedilq.Key.ItemNumber,
                                                            LastUpdatedBy = SessionHelper.UserID,
                                                            LotNumber = (!string.IsNullOrWhiteSpace(groupedilq.Key.LotNumber)) ? groupedilq.Key.LotNumber.Trim() : string.Empty,
                                                            Received = groupedilq.Key.Received,
                                                            ReceivedDate = string.IsNullOrWhiteSpace(groupedilq.Key.Received) ? DateTimeUtility.DateTimeNow.Date : DateTime.ParseExact(groupedilq.Key.Received, Convert.ToString(SessionHelper.RoomDateFormat), ResourceHelper.CurrentCult, DateTimeStyles.None),
                                                            Room = SessionHelper.RoomID,
                                                            SerialNumber = (!string.IsNullOrWhiteSpace(groupedilq.Key.SerialNumber)) ? groupedilq.Key.SerialNumber.Trim() : string.Empty,
                                                            Updated = DateTime.UtcNow,
                                                            //  ErrorMessege = string.Join(",", groupedilq.Select(t => t.ErrorMessege).ToArray()),

                                                        }).ToList();


                                    CartItemDAL objCartItemDAL = new CartItemDAL(SessionHelper.EnterPriseDBName);

                                    lstNotProperRecords = lstValidated.Where(t => (t.ErrorMessege ?? "") != "").ToList();

                                    if (lstNotProperRecords.Count > 0)
                                    {
                                        if (lstNotProperRecords.Where(x => x.ErrorMessege.Contains(MsgCreditTransactionForSerialNumber)
                                                                           || x.ErrorMessege.Contains(MsgPullQtyIsntEnoughForCredit)).Count() > 0)
                                        {
                                            List<Guid> lstNotProperGuid = new List<Guid>();
                                            lstNotProperGuid.AddRange(lstNotProperRecords.Where(x => (x.ErrorMessege ?? "") != "").Select(m => m.ItemGUID.GetValueOrDefault(Guid.Empty)).Distinct().ToList());
                                            lstProperRecords = lstProperRecords.Where(x => !lstNotProperGuid.Contains(x.ItemGUID.GetValueOrDefault(Guid.Empty))).ToList();
                                        }
                                    }

                                    if (lstProperRecords != null && lstProperRecords.Count > 0)
                                    {
                                        DataTable dtItemLocations = GetTableFromList(lstProperRecords);
                                        objItemLocationDetailsDAL.ApplyItemLocationQtyWithCost(dtItemLocations, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
                                        lstProperRecords.ForEach(t =>
                                        {
                                            //objCartItemDAL.AutoCartUpdateByCode(t.ItemGUID ?? Guid.Empty, SessionHelper.UserID, "Web", "ImportControler>> SaveImport");
                                            objCartItemDAL.AutoCartUpdateByCode(t.ItemGUID ?? Guid.Empty, SessionHelper.UserID, "Web", "BulkImport >> Import ItemLocation", SessionUserId);

                                        });
                                    }
                                    LstInventoryLocation = new List<InventoryLocationMain>();
                                    lstNotProperRecords.ForEach(t =>
                                    {
                                        InventoryLocationMain objInventoryLocationMain = new InventoryLocationMain();
                                        objInventoryLocationMain.BinNumber = t.BinNumber;
                                        objInventoryLocationMain.ItemNumber = t.ItemNumber;
                                        objInventoryLocationMain.customerownedquantity = t.CustomerOwnedQuantity;
                                        objInventoryLocationMain.consignedquantity = t.ConsignedQuantity;
                                        objInventoryLocationMain.Cost = t.Cost;
                                        objInventoryLocationMain.Expiration = t.Expiration;
                                        objInventoryLocationMain.SerialNumber = (!string.IsNullOrWhiteSpace(t.SerialNumber)) ? t.SerialNumber.Trim() : string.Empty;
                                        objInventoryLocationMain.LotNumber = (!string.IsNullOrWhiteSpace(t.LotNumber)) ? t.LotNumber : string.Empty;
                                        objInventoryLocationMain.Received = t.Received;
                                        objInventoryLocationMain.Status = "fail";
                                        objInventoryLocationMain.Reason = t.ErrorMessege;
                                        LstInventoryLocation.Add(objInventoryLocationMain);
                                    });

                                    if (LstInventoryLocation.Count() > 0)
                                    {
                                        allSuccesfulRecords = false;
                                    }

                                    SaveImportDataListSession<InventoryLocationMain>(HasMoreRecords, IsFirstCall, LstInventoryLocation.ToList());
                                    //Session["importedData"] = LstInventoryLocation.ToList();
                                }
                                else
                                {

                                    if (LstInventoryLocation != null && LstInventoryLocation.Count > 0)
                                    {
                                        CurrentInventoryLocationMasterList = new List<InventoryLocationMain>();
                                        //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.CategoryMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                        //CurrentOptionList = new List<UDFOptionsMain>();

                                        List<ItemMasterDTO> oItemMasterList = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetRecordsOnlyItemsFields(SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                                        bool saveData = true;
                                        foreach (InventoryLocationMain item in LstInventoryLocation)
                                        {
                                            saveData = true;
                                            //ItemMasterDTO objItemMasterDTO = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetRecordByItemNumber(item.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                                            ItemMasterDTO objItemMasterDTO = oItemMasterList.Where(x => x.ItemNumber == item.ItemNumber).FirstOrDefault();
                                            InventoryLocationMain objDTO = new InventoryLocationMain();
                                            objDTO.ID = item.ID;
                                            objDTO.ItemNumber = item.ItemNumber;
                                            objDTO.ItemGUID = objItemMasterDTO == null ? Guid.Empty : objItemMasterDTO.GUID;
                                            objDTO.BinNumber = item.BinNumber;
                                            objDTO.Received = DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy");
                                            objDTO.consignedquantity = item.consignedquantity;
                                            objDTO.customerownedquantity = item.customerownedquantity;


                                            if (objItemMasterDTO != null && !objItemMasterDTO.Consignment)
                                            {
                                                objDTO.consignedquantity = 0;
                                            }
                                            if (objItemMasterDTO != null && objItemMasterDTO.Consignment)
                                            {
                                                objDTO.customerownedquantity = 0;
                                            }
                                            try
                                            {
                                                if (!string.IsNullOrEmpty(item.Expiration))
                                                {
                                                    DateTime expiryDate = DateTime.ParseExact(item.Expiration, SessionHelper.RoomDateFormat, ResourceHelper.CurrentCult);
                                                    objDTO.displayExpiration = item.Expiration;
                                                }
                                            }
                                            catch
                                            {
                                                objDTO.displayExpiration = null;
                                                objDTO.Status = "Fail";
                                                objDTO.Reason = string.Format(ResImportMasters.DateShouldBeInFormat, ResItemLocationDetails.ExpirationDate, SessionHelper.RoomDateFormat) + " ";
                                                saveData = false;
                                            }
                                            if (objItemMasterDTO != null && objItemMasterDTO.DateCodeTracking == true)
                                            {
                                                objDTO.Expiration = item.Expiration;
                                            }
                                            objDTO.SerialNumber = (!string.IsNullOrWhiteSpace(item.SerialNumber)) ? item.SerialNumber.Trim() : string.Empty;
                                            objDTO.LotNumber = (!string.IsNullOrWhiteSpace(item.LotNumber)) ? item.LotNumber.Trim() : string.Empty;
                                            objDTO.Cost = item.Cost;
                                            objDTO.IsDeleted = false;
                                            objDTO.IsArchived = false;
                                            objDTO.Created = DateTimeUtility.DateTimeNow;
                                            objDTO.Updated = DateTimeUtility.DateTimeNow;
                                            objDTO.LastUpdatedBy = SessionHelper.UserID;
                                            objDTO.Room = SessionHelper.RoomID;
                                            objDTO.CompanyID = SessionHelper.CompanyID;
                                            objDTO.CreatedBy = SessionHelper.UserID;
                                            objDTO.InsertedFrom = "Import";
                                            objDTO.GUID = Guid.NewGuid();

                                            if (objDTO.ItemGUID.ToString() != Guid.Empty.ToString() && item.BinNumber.Trim() != "" && saveData)
                                            {
                                                CurrentInventoryLocationMasterList.Add(objDTO);
                                            }
                                            else
                                            {
                                                CurrentBlankInventoryLocationList.Add(objDTO);
                                            }
                                            if (objItemMasterDTO != null && objItemMasterDTO.Consignment && (item.customerownedquantity ?? 0) > 0)
                                            {
                                                objDTO = new InventoryLocationMain();
                                                objDTO.ID = item.ID;
                                                objDTO.ItemNumber = item.ItemNumber;
                                                objDTO.ItemGUID = objItemMasterDTO == null ? Guid.NewGuid() : objItemMasterDTO.GUID;
                                                objDTO.BinNumber = item.BinNumber;
                                                objDTO.Received = DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy");
                                                objDTO.customerownedquantity = item.customerownedquantity;
                                                objDTO.consignedquantity = 0;
                                                objDTO.displayExpiration = item.Expiration;
                                                if (objItemMasterDTO != null && objItemMasterDTO.DateCodeTracking == true)
                                                {
                                                    objDTO.Expiration = item.Expiration;
                                                }
                                                objDTO.SerialNumber = (!string.IsNullOrWhiteSpace(item.SerialNumber)) ? item.SerialNumber.Trim() : string.Empty;
                                                objDTO.LotNumber = (!string.IsNullOrWhiteSpace(item.LotNumber)) ? item.LotNumber : string.Empty;
                                                objDTO.Cost = item.Cost;
                                                objDTO.IsDeleted = false;
                                                objDTO.IsArchived = false;
                                                objDTO.Created = DateTimeUtility.DateTimeNow;
                                                objDTO.Updated = DateTimeUtility.DateTimeNow;
                                                objDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objDTO.Room = SessionHelper.RoomID;
                                                objDTO.CompanyID = SessionHelper.CompanyID;
                                                objDTO.CreatedBy = SessionHelper.UserID;
                                                objDTO.InsertedFrom = "Import";
                                                objDTO.GUID = Guid.NewGuid();

                                                if (objDTO.ItemGUID.ToString() != Guid.Empty.ToString() && item.BinNumber.Trim() != "" && saveData)
                                                {
                                                    CurrentInventoryLocationMasterList.Add(objDTO);
                                                }
                                                else
                                                {
                                                    CurrentBlankInventoryLocationList.Add(objDTO);
                                                }
                                            }
                                        }

                                        List<InventoryLocationMain> lstreturn = new List<InventoryLocationMain>();
                                        if (CurrentInventoryLocationMasterList.Count > 0)
                                            lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.BinMaster.ToString(), CurrentInventoryLocationMasterList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                        if (CurrentBlankInventoryLocationList.Count > 0)
                                        {
                                            foreach (InventoryLocationMain item in CurrentBlankInventoryLocationList.Where(c => c.ItemGUID == Guid.Empty))
                                            {
                                                item.Status = "Fail";
                                                item.Reason = ResItemMaster.MsgItemDoesNotExist;
                                                lstreturn.Add(item);
                                            }
                                            foreach (InventoryLocationMain item in CurrentBlankInventoryLocationList.Where(c => c.ItemGUID != Guid.Empty && (string.IsNullOrEmpty(c.Expiration)) && c.Status == "Fail"))
                                            {
                                                item.Status = "Fail";
                                                item.Reason = string.Format(ResImportMasters.DateShouldBeInFormat, ResItemLocationDetails.ExpirationDate, SessionHelper.RoomDateFormat) + " ";
                                                lstreturn.Add(item);
                                            }
                                        }

                                        //if (lstreturn.Count == 0)
                                        //{
                                        //    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        //    status = ResMessage.SaveMessage;
                                        //    ClearCurrentResourceList();
                                        //    Session["importedData"] = null;
                                        //}
                                        //else
                                        //{
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<InventoryLocationMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                        //}
                                        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                        {
                                            allSuccesfulRecords = false;
                                        }
                                        //CacheHelper<IEnumerable<inventory>>.InvalidateCache();
                                        //(new CategoryMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);

                                    }


                                }
                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ManualCount:
                            #region Manual Count Master
                            //if (ImportMastersDTO.TableName.ManualCount.ToString() == TableName)
                            {

                                //XElement Settinfile = XElement.Load(System.Web.Hosting.HostingEnvironment.MapPath("/SiteSettings.xml"));
                                string ILQImportNew = SiteSettingHelper.ILQImportNew;   //Settinfile.Element("ILQImportNew").Value;
                                List<InventoryLocationMain> CurrentBlankInventoryLocationList = new List<InventoryLocationMain>();
                                List<InventoryLocationMain> LstInventoryLocation = s.Deserialize<List<InventoryLocationMain>>(para);
                                List<InventoryLocationMain> objListInventoryLocationMain = new List<InventoryLocationMain>();
                                if (Session["InventoryLocationList"] != null)
                                {
                                    objListInventoryLocationMain = (List<InventoryLocationMain>)Session["InventoryLocationList"];

                                }
                                objListInventoryLocationMain = objListInventoryLocationMain.Union(LstInventoryLocation).ToList();
                                Session["InventoryLocationList"] = objListInventoryLocationMain;
                                if (objListInventoryLocationMain.Count == TotalCount)
                                {
                                    LstInventoryLocation = (List<InventoryLocationMain>)Session["InventoryLocationList"];
                                    Session["InventoryLocationList"] = null;
                                    if (ILQImportNew == "1")
                                    {

                                        List<ItemLocationDetailsDTO> lstProperRecords = new List<ItemLocationDetailsDTO>();
                                        List<ItemLocationDetailsDTO> lstNotProperRecords = new List<ItemLocationDetailsDTO>();
                                        List<ItemLocationDetailsDTO> lstValidated = new List<ItemLocationDetailsDTO>();
                                        List<ItemLocationDetailsDTO> lstProperRecordsAfter = new List<ItemLocationDetailsDTO>();
                                        ItemLocationDetailsDAL objItemLocationDetailsDAL = new ItemLocationDetailsDAL(SessionHelper.EnterPriseDBName);
                                        string RoomDateFormat = Convert.ToString(SessionHelper.RoomDateFormat);
                                        string MsgCreditTransactionForSerialNumber = string.Empty;
                                        string MsgPullQtyIsntEnoughForCredit = string.Empty;
                                        lstValidated = objItemLocationDetailsDAL.ValidateILQRecordsForCount(LstInventoryLocation, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, RoomDateFormat,SessionHelper.EnterPriceID,ResourceHelper.CurrentCult, out MsgCreditTransactionForSerialNumber, out MsgPullQtyIsntEnoughForCredit, true, true);
                                        lstProperRecords = lstValidated.Where(t => (t.ErrorMessege ?? "") == "").ToList();
                                        lstProperRecordsAfter.AddRange(lstProperRecords);
                                        CartItemDAL objCartItemDAL = new CartItemDAL(SessionHelper.EnterPriseDBName);

                                        lstNotProperRecords = lstValidated.Where(t => (t.ErrorMessege ?? "") != "").ToList();

                                        if (lstNotProperRecords.Count > 0)
                                        {
                                            if (lstNotProperRecords.Where(x => x.ErrorMessege.Contains(MsgCreditTransactionForSerialNumber)
                                                                               || x.ErrorMessege.Contains(MsgPullQtyIsntEnoughForCredit)).Count() > 0)
                                            {
                                                List<Guid> lstNotProperGuid = new List<Guid>();
                                                lstNotProperGuid.AddRange(lstNotProperRecords.Where(x => (x.ErrorMessege ?? "") != "").Select(m => m.ItemGUID.GetValueOrDefault(Guid.Empty)).Distinct().ToList());
                                                lstProperRecords = lstProperRecords.Where(x => !lstNotProperGuid.Contains(x.ItemGUID.GetValueOrDefault(Guid.Empty))).ToList();
                                            }
                                        }

                                        if (lstProperRecords != null && lstProperRecords.Count > 0)
                                        {
                                            InventoryCountDTO objInventoryCountDTO = InsertCount("M");

                                            List<CountLineItemDetailDTO> lstCountLineItemDetail = new List<CountLineItemDetailDTO>();
                                            InventoryCountDetailDTO objInventoryCountDetailDTO = new InventoryCountDetailDTO();

                                            lstProperRecords.ForEach(t =>
                                            {
                                                if (objInventoryCountDTO != null && objInventoryCountDTO.ID > 0)
                                                {
                                                    if (t.SerialNumberTracking || t.LotNumberTracking || t.DateCodeTracking)
                                                    {
                                                        if (t.SerialNumberTracking
                                                           && string.IsNullOrWhiteSpace(t.SerialNumber)
                                                           && (t.CustomerOwnedQuantity.GetValueOrDefault(0) + t.ConsignedQuantity.GetValueOrDefault(0)) == 0)
                                                        {
                                                            BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                                                            List<CountLineItemDetailDTO> locations = objBinMasterDAL.GetAllItemLocationsByItemId(t.ItemGUID.GetValueOrDefault(Guid.Empty), SessionHelper.CompanyID, SessionHelper.RoomID, false);
                                                            List<CountLineItemDetailDTO> Sublocations = locations.Where(x => x.BinID == t.BinID).ToList();

                                                            foreach (CountLineItemDetailDTO objLocation in Sublocations)
                                                            {
                                                                Int64 ExistCount = lstProperRecords.Where(l => l.BinID == t.BinID
                                                                                        && l.SerialNumber == objLocation.LotSerialNumber
                                                                                        && (l.CustomerOwnedQuantity.GetValueOrDefault(0) + l.ConsignedQuantity.GetValueOrDefault(0)) > 0).Count();

                                                                if (ExistCount <= 0)
                                                                {
                                                                    CountLineItemDetailDTO objCountLineItemDetailDTO = new CountLineItemDetailDTO();
                                                                    objCountLineItemDetailDTO.ID = 0;
                                                                    objCountLineItemDetailDTO.ItemGUID = t.ItemGUID.GetValueOrDefault(Guid.Empty);
                                                                    objCountLineItemDetailDTO.ItemNumber = t.ItemNumber;
                                                                    objCountLineItemDetailDTO.ItemDescription = t.ItemDescription;
                                                                    objCountLineItemDetailDTO.ItemType = t.ItemType;
                                                                    objCountLineItemDetailDTO.Comment = "";
                                                                    objCountLineItemDetailDTO.BinID = t.BinID;
                                                                    objCountLineItemDetailDTO.BinNumber = t.BinNumber;
                                                                    objCountLineItemDetailDTO.CustomerOwnedQuantity = 0;
                                                                    objCountLineItemDetailDTO.CountCustomerOwnedQuantity = t.CustomerOwnedQuantity;
                                                                    objCountLineItemDetailDTO.ConsignedQuantity = 0;
                                                                    objCountLineItemDetailDTO.CountConsignedQuantity = t.ConsignedQuantity;
                                                                    objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                                    objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                                    objCountLineItemDetailDTO.LotSerialNumber = (t.SerialNumberTracking ? (objLocation.LotSerialNumber) : (t.LotNumberTracking ? objLocation.LotSerialNumber : ""));
                                                                    objCountLineItemDetailDTO.LotNumber = (t.LotNumberTracking ? objLocation.LotSerialNumber : "");
                                                                    objCountLineItemDetailDTO.SerialNumber = (t.SerialNumberTracking ? objLocation.LotSerialNumber : "");
                                                                    objCountLineItemDetailDTO.Expiration = "";
                                                                    objCountLineItemDetailDTO.Received = "";
                                                                    objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;
                                                                    objCountLineItemDetailDTO.ExpirationDate = t.ExpirationDate;
                                                                    objCountLineItemDetailDTO.ReceivedDate = t.ReceivedDate;
                                                                    objCountLineItemDetailDTO.Cost = t.Cost;
                                                                    objCountLineItemDetailDTO.GUID = null;
                                                                    objCountLineItemDetailDTO.IsStagingLocationCount = false;
                                                                    objCountLineItemDetailDTO.CountGUID = objInventoryCountDTO.GUID;
                                                                    objCountLineItemDetailDTO.CountDetailGUID = null;
                                                                    objCountLineItemDetailDTO.Consignment = t.IsConsignedSerialLot;
                                                                    objCountLineItemDetailDTO.IsConsigned = (t.ConsignedQuantity > 0 ? true : false);
                                                                    objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                                    objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                                    objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;

                                                                    objCountLineItemDetailDTO.UDF1 = t.UDF1;
                                                                    objCountLineItemDetailDTO.UDF2 = t.UDF2;
                                                                    objCountLineItemDetailDTO.UDF3 = t.UDF3;
                                                                    objCountLineItemDetailDTO.UDF4 = t.UDF4;
                                                                    objCountLineItemDetailDTO.UDF5 = t.UDF5;

                                                                    lstCountLineItemDetail.Add(objCountLineItemDetailDTO);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            CountLineItemDetailDTO objCountLineItemDetailDTO = new CountLineItemDetailDTO();
                                                            objCountLineItemDetailDTO.ID = 0;
                                                            objCountLineItemDetailDTO.ItemGUID = t.ItemGUID.GetValueOrDefault(Guid.Empty);
                                                            objCountLineItemDetailDTO.ItemNumber = t.ItemNumber;
                                                            objCountLineItemDetailDTO.ItemDescription = t.ItemDescription;
                                                            objCountLineItemDetailDTO.ItemType = t.ItemType;
                                                            objCountLineItemDetailDTO.Comment = "";
                                                            objCountLineItemDetailDTO.BinID = t.BinID;
                                                            objCountLineItemDetailDTO.BinNumber = t.BinNumber;
                                                            objCountLineItemDetailDTO.CustomerOwnedQuantity = 0;
                                                            objCountLineItemDetailDTO.CountCustomerOwnedQuantity = t.CustomerOwnedQuantity;
                                                            objCountLineItemDetailDTO.ConsignedQuantity = 0;
                                                            objCountLineItemDetailDTO.CountConsignedQuantity = t.ConsignedQuantity;
                                                            objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                            objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                            objCountLineItemDetailDTO.LotSerialNumber = (t.SerialNumberTracking ? (t.SerialNumber) : (t.LotNumberTracking ? t.LotNumber : ""));
                                                            objCountLineItemDetailDTO.LotNumber = t.LotNumber;
                                                            objCountLineItemDetailDTO.SerialNumber = t.SerialNumber;
                                                            objCountLineItemDetailDTO.Expiration = "";
                                                            objCountLineItemDetailDTO.Received = "";
                                                            objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;
                                                            objCountLineItemDetailDTO.ExpirationDate = t.ExpirationDate;
                                                            objCountLineItemDetailDTO.ReceivedDate = t.ReceivedDate;
                                                            objCountLineItemDetailDTO.Cost = t.Cost;
                                                            objCountLineItemDetailDTO.GUID = null;
                                                            objCountLineItemDetailDTO.IsStagingLocationCount = false;
                                                            objCountLineItemDetailDTO.CountGUID = objInventoryCountDTO.GUID;
                                                            objCountLineItemDetailDTO.CountDetailGUID = null;
                                                            objCountLineItemDetailDTO.Consignment = t.IsConsignedSerialLot;
                                                            objCountLineItemDetailDTO.IsConsigned = (t.ConsignedQuantity > 0 ? true : false);
                                                            objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                            objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                            objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;

                                                            objCountLineItemDetailDTO.UDF1 = t.UDF1;
                                                            objCountLineItemDetailDTO.UDF2 = t.UDF2;
                                                            objCountLineItemDetailDTO.UDF3 = t.UDF3;
                                                            objCountLineItemDetailDTO.UDF4 = t.UDF4;
                                                            objCountLineItemDetailDTO.UDF5 = t.UDF5;

                                                            lstCountLineItemDetail.Add(objCountLineItemDetailDTO);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Guid CountDetailGUID = Guid.Empty;
                                                        AddItemToCountAndReturnDetailGUID(objInventoryCountDTO.GUID, t.ItemGUID.GetValueOrDefault(Guid.Empty), t.BinID.GetValueOrDefault(0), t.ConsignedQuantity.GetValueOrDefault(0), t.CustomerOwnedQuantity.GetValueOrDefault(0), false, 0, 0, t.UDF1, t.UDF2, t.UDF3, t.UDF4, t.UDF5, t.ItemDescription, t.ItemType, true, t.ProjectSpentGUID.GetValueOrDefault(Guid.Empty), out CountDetailGUID);
                                                    }
                                                }
                                            });
                                            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
                                            {
                                                AddUpdateLotDetailPopupForCount(lstCountLineItemDetail);
                                            }

                                            #region WI-4991

                                            if (objInventoryCountDTO != null && objInventoryCountDTO.GUID != null)
                                            {
                                                AddMissingSerialForItemCount(lstProperRecords, objInventoryCountDTO.GUID);
                                            }

                                            #endregion

                                            lstProperRecords.ForEach(t =>
                                            {
                                                objCartItemDAL.AutoCartUpdateByCode(t.ItemGUID ?? Guid.Empty, SessionHelper.UserID, "Web", "BulkImport >> ManualCount", SessionUserId);
                                            });

                                            #region WI-6496 - Scheduled Immediate Inventory Count report not sending
                                            if (objInventoryCountDTO != null && objInventoryCountDTO.ID > 0)
                                            {
                                                string dataGUIDs = "<DataGuids>" + objInventoryCountDTO.GUID + "</DataGuids>";
                                                string eTurnsScheduleDBName = (Convert.ToString(ConfigurationManager.AppSettings["eTurnsScheduleDBName"]) ?? "eTurnsSchedule");
                                                NotificationDAL objNotificationDAL = new NotificationDAL(SessionHelper.EnterPriseDBName);

                                                string eventName = "OCNTC";
                                                List<NotificationDTO> lstOCNTCNotification = objNotificationDAL.GetCurrentNotificationListByEventName(eventName, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
                                                if (lstOCNTCNotification != null && lstOCNTCNotification.Count > 0)
                                                {
                                                    objNotificationDAL.SendMailForImmediate(lstOCNTCNotification, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, SessionHelper.EnterPriceID, eTurnsScheduleDBName, dataGUIDs);
                                                }                                            
                                            }
                                            #endregion
                                        }
                                        LstInventoryLocation = new List<InventoryLocationMain>();
                                        if (lstNotProperRecords.Count > 0)
                                            lstNotProperRecords.AddRange(lstProperRecordsAfter);
                                        lstNotProperRecords.ForEach(t =>
                                        {
                                            InventoryLocationMain objInventoryLocationMain = new InventoryLocationMain();
                                            objInventoryLocationMain.BinNumber = t.BinNumber;
                                            objInventoryLocationMain.ItemNumber = t.ItemNumber;
                                            objInventoryLocationMain.customerownedquantity = t.CustomerOwnedQuantity;
                                            objInventoryLocationMain.consignedquantity = t.ConsignedQuantity;
                                            objInventoryLocationMain.Cost = t.Cost;
                                            objInventoryLocationMain.Expiration = t.Expiration;
                                            objInventoryLocationMain.SerialNumber = (!string.IsNullOrWhiteSpace(t.SerialNumber)) ? t.SerialNumber.Trim() : string.Empty;
                                            objInventoryLocationMain.LotNumber = (!string.IsNullOrWhiteSpace(t.LotNumber)) ? t.LotNumber.Trim() : string.Empty;
                                            objInventoryLocationMain.Received = t.Received;
                                            objInventoryLocationMain.Status = (t.ErrorMessege != "" && t.ErrorMessege != null) ? "fail" : "";
                                            objInventoryLocationMain.Reason = t.ErrorMessege;
                                            objInventoryLocationMain.ProjectSpend = t.ProjectSpend;
                                            objInventoryLocationMain.UDF1 = t.UDF1;
                                            objInventoryLocationMain.UDF2 = t.UDF2;
                                            objInventoryLocationMain.UDF3 = t.UDF3;
                                            objInventoryLocationMain.UDF4 = t.UDF4;
                                            objInventoryLocationMain.UDF5 = t.UDF5;
                                            objInventoryLocationMain.ItemDescription = t.ItemDescription;
                                            LstInventoryLocation.Add(objInventoryLocationMain);
                                        });

                                        if (LstInventoryLocation.Count() > 0)
                                        {
                                            allSuccesfulRecords = false;
                                        }

                                        SaveImportDataListSession<InventoryLocationMain>(HasMoreRecords, true, LstInventoryLocation.ToList());
                                        //Session["importedData"] = LstInventoryLocation.ToList();
                                    }
                                    else
                                    {
                                        Session["InventoryLocationList"] = null;
                                        if (LstInventoryLocation != null && LstInventoryLocation.Count > 0)
                                        {
                                            CurrentInventoryLocationMasterList = new List<InventoryLocationMain>();
                                            //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.CategoryMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                            //CurrentOptionList = new List<UDFOptionsMain>();

                                            List<ItemMasterDTO> oItemMasterList = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetRecordsOnlyItemsFields(SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                                            bool saveData = true;
                                            foreach (InventoryLocationMain item in LstInventoryLocation)
                                            {
                                                saveData = true;
                                                //ItemMasterDTO objItemMasterDTO = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetRecordByItemNumber(item.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                                                ItemMasterDTO objItemMasterDTO = oItemMasterList.Where(x => x.ItemNumber == item.ItemNumber).FirstOrDefault();
                                                InventoryLocationMain objDTO = new InventoryLocationMain();
                                                objDTO.ID = item.ID;
                                                objDTO.ItemNumber = item.ItemNumber;
                                                objDTO.ItemGUID = objItemMasterDTO == null ? Guid.Empty : objItemMasterDTO.GUID;
                                                objDTO.BinNumber = item.BinNumber;
                                                objDTO.Received = DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy");
                                                objDTO.consignedquantity = item.consignedquantity;
                                                objDTO.customerownedquantity = item.customerownedquantity;



                                                if (objItemMasterDTO != null && !objItemMasterDTO.Consignment)
                                                {
                                                    objDTO.consignedquantity = 0;
                                                }
                                                if (objItemMasterDTO != null && objItemMasterDTO.Consignment)
                                                {
                                                    objDTO.customerownedquantity = 0;
                                                }
                                                try
                                                {
                                                    if (!string.IsNullOrEmpty(item.Expiration))
                                                    {
                                                        DateTime expiryDate = DateTime.ParseExact(item.Expiration, SessionHelper.RoomDateFormat, ResourceHelper.CurrentCult);
                                                        objDTO.displayExpiration = item.Expiration;
                                                    }
                                                }
                                                catch
                                                {
                                                    objDTO.displayExpiration = null;
                                                    objDTO.Status = "Fail";
                                                    objDTO.Reason = string.Format(ResImportMasters.DateShouldBeInFormat, ResItemLocationDetails.ExpirationDate, SessionHelper.RoomDateFormat) + " ";
                                                    saveData = false;
                                                }
                                                if (objItemMasterDTO != null && objItemMasterDTO.DateCodeTracking == true)
                                                {
                                                    objDTO.Expiration = item.Expiration;
                                                }
                                                objDTO.SerialNumber = (!string.IsNullOrWhiteSpace(item.SerialNumber)) ? item.SerialNumber.Trim() : string.Empty;
                                                objDTO.LotNumber = (!string.IsNullOrWhiteSpace(item.LotNumber)) ? item.LotNumber : string.Empty;
                                                objDTO.Cost = item.Cost;
                                                objDTO.IsDeleted = false;
                                                objDTO.IsArchived = false;
                                                objDTO.Created = DateTimeUtility.DateTimeNow;
                                                objDTO.Updated = DateTimeUtility.DateTimeNow;
                                                objDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objDTO.Room = SessionHelper.RoomID;
                                                objDTO.CompanyID = SessionHelper.CompanyID;
                                                objDTO.CreatedBy = SessionHelper.UserID;
                                                objDTO.InsertedFrom = "Import";
                                                objDTO.GUID = Guid.NewGuid();




                                                if (objDTO.ItemGUID.ToString() != Guid.Empty.ToString() && item.BinNumber.Trim() != "" && saveData)
                                                {
                                                    CurrentInventoryLocationMasterList.Add(objDTO);
                                                }
                                                else
                                                {
                                                    CurrentBlankInventoryLocationList.Add(objDTO);
                                                }
                                                if (objItemMasterDTO != null && objItemMasterDTO.Consignment && (item.customerownedquantity ?? 0) > 0)
                                                {
                                                    objDTO = new InventoryLocationMain();
                                                    objDTO.ID = item.ID;
                                                    objDTO.ItemNumber = item.ItemNumber;
                                                    objDTO.ItemGUID = objItemMasterDTO == null ? Guid.NewGuid() : objItemMasterDTO.GUID;
                                                    objDTO.BinNumber = item.BinNumber;
                                                    objDTO.Received = DateTimeUtility.DateTimeNow.ToString("MM/dd/yyyy");
                                                    objDTO.customerownedquantity = item.customerownedquantity;
                                                    objDTO.consignedquantity = 0;
                                                    objDTO.displayExpiration = item.Expiration;
                                                    if (objItemMasterDTO != null && objItemMasterDTO.DateCodeTracking == true)
                                                    {
                                                        objDTO.Expiration = item.Expiration;
                                                    }
                                                    objDTO.SerialNumber = (!string.IsNullOrWhiteSpace(item.SerialNumber)) ? item.SerialNumber.Trim() : string.Empty;
                                                    objDTO.LotNumber = (!string.IsNullOrWhiteSpace(item.LotNumber)) ? item.LotNumber : string.Empty;
                                                    objDTO.Cost = item.Cost;
                                                    objDTO.IsDeleted = false;
                                                    objDTO.IsArchived = false;
                                                    objDTO.Created = DateTimeUtility.DateTimeNow;
                                                    objDTO.Updated = DateTimeUtility.DateTimeNow;
                                                    objDTO.LastUpdatedBy = SessionHelper.UserID;
                                                    objDTO.Room = SessionHelper.RoomID;
                                                    objDTO.CompanyID = SessionHelper.CompanyID;
                                                    objDTO.CreatedBy = SessionHelper.UserID;
                                                    objDTO.InsertedFrom = "Import";
                                                    objDTO.GUID = Guid.NewGuid();




                                                    if (objDTO.ItemGUID.ToString() != Guid.Empty.ToString() && item.BinNumber.Trim() != "" && saveData)
                                                    {
                                                        CurrentInventoryLocationMasterList.Add(objDTO);
                                                    }
                                                    else
                                                    {
                                                        CurrentBlankInventoryLocationList.Add(objDTO);
                                                    }
                                                }
                                            }

                                            List<InventoryLocationMain> lstreturn = new List<InventoryLocationMain>();
                                            if (CurrentInventoryLocationMasterList.Count > 0)
                                                lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.BinMaster.ToString(), CurrentInventoryLocationMasterList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                            if (CurrentBlankInventoryLocationList.Count > 0)
                                            {
                                                foreach (InventoryLocationMain item in CurrentBlankInventoryLocationList.Where(c => c.ItemGUID == Guid.Empty))
                                                {
                                                    item.Status = "Fail";
                                                    item.Reason = ResItemMaster.MsgItemDoesNotExist;
                                                    lstreturn.Add(item);
                                                }
                                                foreach (InventoryLocationMain item in CurrentBlankInventoryLocationList.Where(c => c.ItemGUID != Guid.Empty && (string.IsNullOrEmpty(c.Expiration)) && c.Status == "Fail"))
                                                {
                                                    item.Status = "Fail";
                                                    item.Reason = string.Format(ResImportMasters.DateShouldBeInFormat, ResItemLocationDetails.ExpirationDate, SessionHelper.RoomDateFormat)+ " ";
                                                    lstreturn.Add(item);
                                                }
                                            }

                                            //if (lstreturn.Count == 0)
                                            //{
                                            //    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                            //    status = ResMessage.SaveMessage;
                                            //    ClearCurrentResourceList();
                                            //    Session["importedData"] = null;
                                            //}
                                            //else
                                            //{
                                            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                            status = ResMessage.SaveMessage;
                                            SaveImportDataListSession<InventoryLocationMain>(HasMoreRecords, true, lstreturn);
                                            //Session["importedData"] = lstreturn;
                                            //}
                                            if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                            {
                                                allSuccesfulRecords = false;
                                            }
                                            //CacheHelper<IEnumerable<inventory>>.InvalidateCache();
                                            //(new CategoryMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);

                                            if (lstreturn != null && lstreturn.Count > 0)
                                            {
                                                List<InventoryLocationMain> lstInvLoc = new List<InventoryLocationMain>();
                                                lstInvLoc = lstreturn.Where(x => x.Status.ToLower() == "success").ToList();
                                                //if (lstInvLoc != null && lstInvLoc.Count > 0)
                                                //{
                                                //    QuickBookItemDAL objQBItemDAL = new QuickBookItemDAL(SessionHelper.EnterPriseDBName);
                                                //    List<Guid> lstItemGuid = lstInvLoc.Select(t => t.ItemGUID.GetValueOrDefault(Guid.Empty)).Distinct().ToList();
                                                //    foreach (Guid itemGUID in lstItemGuid)
                                                //    {
                                                //        objQBItemDAL.InsertQuickBookItem(itemGUID, SessionHelper.EnterPriceID, SessionHelper.CompanyID, SessionHelper.RoomID, "Update", false, SessionHelper.UserID, "Web", null, "BulkImport >> Manual Count");
                                                //    }
                                                //}

                                            }

                                        }
                                    }


                                }
                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.WorkOrder:
                            #region WorkOrder
                            //else if (ImportMastersDTO.TableName.WorkOrder.ToString() == TableName)
                            {
                                List<TechnicianMasterDTO> objTechnicialMasterDALList = new List<TechnicianMasterDTO>();
                                List<WorkOrderMain> CurrentBlankWOList = new List<WorkOrderMain>();
                                WorkOrderMain[] LstWorkOrderMain = s.Deserialize<WorkOrderMain[]>(para);
                                if (LstWorkOrderMain != null && LstWorkOrderMain.Length > 0)
                                {
                                    CurrentWorkOrderList = new List<WorkOrderMain>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.WorkOrder.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.WorkOrder.ToString());


                                    eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                    IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("WorkOrder", SessionHelper.RoomID, SessionHelper.CompanyID);


                                    CurrentOptionList = new List<UDFOptionsMain>();
                                    TechnicialMasterDAL objTechnicialMasterDAL = new TechnicialMasterDAL(SessionHelper.EnterPriseDBName);
                                    objTechnicialMasterDALList = objTechnicialMasterDAL.GetTechnicianByRoomIDPlain(SessionHelper.RoomID, SessionHelper.CompanyID).ToList();
                                    foreach (WorkOrderMain toolList in LstWorkOrderMain.GroupBy(l => l.Technician).Select(g => g.First()).ToList())
                                    {
                                        if (toolList.Technician.ToLower().Trim() != string.Empty)
                                        {
                                            if ((from p in objTechnicialMasterDALList
                                                 where (p.TechnicianCode.ToLower().Trim() == (toolList.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                 select p).Any())
                                            {

                                            }
                                            else
                                            {
                                                TechnicianMasterDTO objTechnicianMasterDTO = new TechnicianMasterDTO();
                                                objTechnicianMasterDTO.TechnicianCode = toolList.Technician;
                                                objTechnicianMasterDTO.Room = SessionHelper.RoomID;
                                                objTechnicianMasterDTO.CompanyID = SessionHelper.CompanyID;
                                                objTechnicianMasterDTO.CreatedBy = SessionHelper.UserID;
                                                objTechnicianMasterDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objTechnicianMasterDTO.Created = DateTimeUtility.DateTimeNow;
                                                objTechnicianMasterDTO.Updated = DateTimeUtility.DateTimeNow;
                                                objTechnicianMasterDTO.GUID = Guid.NewGuid();
                                                objTechnicianMasterDTO.IsArchived = false;
                                                objTechnicianMasterDTO.IsDeleted = false;
                                                Int64 TechnicanID = objTechnicialMasterDAL.Insert(objTechnicianMasterDTO);
                                                objTechnicianMasterDTO = objTechnicialMasterDAL.GetTechnicianByIDPlain(TechnicanID, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                objTechnicialMasterDALList.Add(objTechnicianMasterDTO);

                                            }
                                        }
                                    }
                                    //bool IsEmailPOInBody = false; bool IsEmailPOInPDF = false; bool IsEmailPOInCSV = false; bool IsEmailPOInX12 = false;
                                    foreach (WorkOrderMain item in LstWorkOrderMain)
                                    {
                                        WorkOrderMain objDTO = new WorkOrderMain();
                                        objDTO.ID = item.ID;
                                        objDTO.WOName = item.WOName;
                                        objDTO.ReleaseNumber = item.ReleaseNumber;
                                        objDTO.Description = (item.Description == null) ? string.Empty : (item.Description.Length > 1024 ? item.Description.Substring(0, 1024) : item.Description);
                                        objDTO.SupplierId = GetIDs(ImportMastersDTO.TableName.SupplierMaster, item.SupplierName);

                                        objDTO.SupplierAccountGuid = new CommonDAL(SessionHelper.EnterPriseDBName).GetOrInsertSupplierAccountByName(item.SupplierAccount, SessionHelper.UserID, SessionHelper.RoomID, SessionHelper.CompanyID, objDTO.SupplierId.Value);
                                        if (objDTO.SupplierAccountGuid == Guid.Empty)
                                            objDTO.SupplierAccountGuid = null;

                                        if (!string.IsNullOrWhiteSpace(item.Technician))
                                        {
                                            if ((from p in objTechnicialMasterDALList
                                                 where (p.TechnicianCode.ToLower().Trim() == (item.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                 select p).Any())
                                            {

                                                TechnicianMasterDTO objTechnician = (from p in objTechnicialMasterDALList
                                                                                     where (p.TechnicianCode.ToLower().Trim() == (item.Technician.ToLower().Trim()) && p.IsDeleted == false && p.Room == SessionHelper.RoomID && p.CompanyID == SessionHelper.CompanyID)
                                                                                     select p).FirstOrDefault();
                                                if (objTechnician != null)
                                                {
                                                    objDTO.TechnicianID = objTechnician.ID;
                                                    objDTO.Technician = item.Technician;
                                                }

                                            }

                                        }
                                        if (!string.IsNullOrWhiteSpace(item.Customer))
                                        {
                                            CustomerMasterDTO objCustomer = new CustomerMasterDTO();
                                            objCustomer = GetCustomerMaster(ImportMastersDTO.TableName.CustomerMaster, item.Customer);
                                            if (objCustomer != null)
                                            {
                                                objDTO.CustomerID = objCustomer.ID;
                                                objDTO.CustomerGUID = objCustomer.GUID;
                                            }
                                        }
                                        if (item.WOStatus != null && (item.WOStatus.ToLower() == "open" || item.WOStatus.ToLower() == "close"))
                                        {
                                            if (item.WOStatus.ToLower() == "open")
                                            {
                                                objDTO.WOStatus = "Open";
                                            }
                                            else if (item.WOStatus.ToLower() == "close")
                                            {
                                                objDTO.WOStatus = "Close";
                                            }
                                            else
                                            {
                                                objDTO.WOStatus = "Open";
                                            }
                                        }
                                        else
                                        {
                                            objDTO.WOStatus = "Open";

                                        }
                                        if (item.WOType != null && (item.WOType.ToLower() == "workorder"))
                                        {
                                            objDTO.WOType = item.WOType;
                                        }
                                        else
                                        {
                                            objDTO.WOType = "WorkOrder";

                                        }


                                        bool saveWO = true;
                                        string errorMsg = string.Empty;
                                        CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);
                                        if (!string.IsNullOrWhiteSpace(errorMsg))
                                        {
                                            objDTO.Status = "Fail";
                                            if (!string.IsNullOrEmpty(objDTO.Reason))
                                                objDTO.Reason += errorMsg;
                                            else
                                                objDTO.Reason = errorMsg;
                                            saveWO = false;
                                            item.Status = objDTO.Status;
                                            item.Reason = errorMsg;
                                        }

                                        objDTO.UDF1 = (item.UDF1 == null) ? null : (item.UDF1.Length > 255 ? item.UDF1.Substring(0, 255) : item.UDF1);
                                        objDTO.UDF2 = (item.UDF2 == null) ? null : (item.UDF2.Length > 255 ? item.UDF2.Substring(0, 255) : item.UDF2);
                                        objDTO.UDF3 = (item.UDF3 == null) ? null : (item.UDF3.Length > 255 ? item.UDF3.Substring(0, 255) : item.UDF3);
                                        objDTO.UDF4 = (item.UDF4 == null) ? null : (item.UDF4.Length > 255 ? item.UDF4.Substring(0, 255) : item.UDF4);
                                        objDTO.UDF5 = (item.UDF5 == null) ? null : (item.UDF5.Length > 255 ? item.UDF5.Substring(0, 255) : item.UDF5);
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                        objDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                        objDTO.AddedFrom = "Web";
                                        objDTO.EditedFrom = "Web";
                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.WhatWhereAction = "Import Workorder";
                                        objDTO.GUID = Guid.NewGuid();
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.IsSignatureCapture = false;
                                        objDTO.IsSignatureRequired = false;
                                        objDTO.Asset = item.Asset;
                                        objDTO.Odometer_OperationHours = item.Odometer_OperationHours;

                                        if (item.WOName.Trim() != "" && saveWO)
                                        {
                                            WorkOrderMain itemval = null;
                                            if (String.IsNullOrEmpty(item.ReleaseNumber) || String.IsNullOrWhiteSpace(item.ReleaseNumber))
                                            {
                                                itemval = CurrentWorkOrderList.FirstOrDefault(x => x.WOName == item.WOName && (String.IsNullOrEmpty(x.ReleaseNumber) || String.IsNullOrWhiteSpace(x.ReleaseNumber)));
                                            }
                                            else
                                            {
                                                itemval = CurrentWorkOrderList.FirstOrDefault(x => x.WOName == item.WOName && x.ReleaseNumber == item.ReleaseNumber);
                                            }
                                            if (itemval != null)
                                                CurrentWorkOrderList.Remove(itemval);
                                            CurrentWorkOrderList.Add(objDTO);

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.WorkOrderColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.WorkOrderColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.WorkOrderColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.WorkOrderColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.WorkOrderColumn.UDF5.ToString());
                                            //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportSupplierColumn.UDF6.ToString());

                                        }
                                        else
                                            CurrentBlankWOList.Add(objDTO);
                                    }

                                    List<WorkOrderMain> lstreturn = new List<WorkOrderMain>();
                                    if (CurrentWorkOrderList.Count > 0)
                                        //lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.SupplierMaster.ToString(), CurrentSupplierList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, CurrentOptionList);
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.WorkOrder.ToString(), CurrentWorkOrderList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    if (CurrentBlankWOList.Count > 0)
                                    {
                                        foreach (WorkOrderMain item in CurrentBlankWOList)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<WorkOrderMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }

                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.PullMaster:
                            #region PullImport
                            //else if (ImportMastersDTO.TableName.PullMaster.ToString() == TableName)
                            {
                                List<PullImport> CurrentBlankPIList = new List<PullImport>();
                                PullImport[] LstPullImportMain = s.Deserialize<PullImport[]>(para);
                                List<PullImport> lstreturn = new List<PullImport>();
                                PullImport objReturn;

                                ItemMasterDAL objDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                                BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                                JavaScriptSerializer serializer = new JavaScriptSerializer();
                                ReqPullAllJsonResponse errMsg = null;

                                ItemMasterDTO objItemMaster = null;
                                Guid? ItemGuid = null;
                                int? ItemType = null;
                                double? OnHandQuantity = null;
                                double PullQuantity = 0;
                                Int64 BinID = 0;
                                Guid? WOGuid = null;
                                Guid? assetGuid = null;
                                bool IsValid = true;
                                double? WOItemSellPrice = null;
                                bool AllowEditItemSellPriceonWorkOrderPull = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowEditItemSellPriceonWorkOrderPull);

                                if (LstPullImportMain != null && LstPullImportMain.Length > 0)
                                {
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.PullMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.PullMaster.ToString());

                                    eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                    IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("PullMaster", SessionHelper.RoomID, SessionHelper.CompanyID);


                                    foreach (PullImport objPullImport in LstPullImportMain)
                                    {
                                        CurrentOptionList = new List<UDFOptionsMain>();
                                        errMsg = new ReqPullAllJsonResponse();
                                        objItemMaster = new ItemMasterDTO();
                                        ItemGuid = null;
                                        ItemType = null;
                                        OnHandQuantity = null;
                                        PullQuantity = 0;
                                        BinID = 0;
                                        WOGuid = null;
                                        IsValid = true;
                                        WOItemSellPrice = null;

                                        objReturn = new PullImport();
                                        objReturn.ItemNumber = objPullImport.ItemNumber;
                                        objReturn.PullQuantity = objPullImport.PullQuantity;
                                        objReturn.Location = objPullImport.Location;
                                        objReturn.UDF1 = objPullImport.UDF1;
                                        objReturn.UDF2 = objPullImport.UDF2;
                                        objReturn.UDF3 = objPullImport.UDF3;
                                        objReturn.UDF4 = objPullImport.UDF4;
                                        objReturn.UDF5 = objPullImport.UDF5;
                                        objReturn.ProjectSpendName = objPullImport.ProjectSpendName.Trim();
                                        objReturn.PullOrderNumber = objPullImport.PullOrderNumber.Trim();
                                        objReturn.WorkOrder = objPullImport.WorkOrder.Trim();
                                        objReturn.Asset = objPullImport.Asset.Trim();
                                        objReturn.ActionType = objPullImport.ActionType.Trim();
                                        objReturn.Status = "success";
                                        objReturn.Reason = "";
                                        if (!string.IsNullOrWhiteSpace(objPullImport.WorkOrder.Trim())
                                            && AllowEditItemSellPriceonWorkOrderPull)
                                        {
                                            objReturn.ItemSellPrice = objPullImport.ItemSellPrice;
                                        }

                                        string errorMsg = string.Empty;
                                        CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, objPullImport.UDF1, objPullImport.UDF2, objPullImport.UDF3, objPullImport.UDF4, objPullImport.UDF5, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);
                                        if (!string.IsNullOrWhiteSpace(errorMsg))
                                        {
                                            objReturn.Status = "Fail";
                                            if (!string.IsNullOrEmpty(objReturn.Reason))
                                                objReturn.Reason += errorMsg;
                                            else
                                                objReturn.Reason = errorMsg;

                                            IsValid = false;
                                            objPullImport.Status = objReturn.Status;
                                            objPullImport.Reason = objReturn.Reason;
                                        }

                                        //------------------Validate Action Type------------------
                                        // && objReturn.ActionType.Trim().ToUpper() != "CREDIT"
                                        if (objReturn.ActionType.Trim().ToUpper() != "PULL")
                                        {
                                            objReturn.Status = "Fail";
                                            objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.ActionType);
                                            IsValid = false;
                                        }

                                        //-------------------Validate Item Number-------------------
                                        //
                                        if (IsValid)
                                        {
                                            if (String.IsNullOrEmpty(objReturn.ItemNumber))
                                            {
                                                objReturn.Status = "Fail";
                                                objReturn.Reason = string.Format(ResMessage.MsgRequired, ResItemMaster.ItemNumber);
                                                IsValid = false;
                                            }
                                            else
                                            {
                                                objItemMaster = objDAL.GetItemByItemNumberPlain(objReturn.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                if (objItemMaster == null || objItemMaster.GUID == null || objItemMaster.GUID == Guid.Empty)
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = ResItemMaster.MsgItemDoesNotExist;
                                                    IsValid = false;
                                                }
                                                else if (objItemMaster.SerialNumberTracking == true || objItemMaster.LotNumberTracking)
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = ResPullMaster.CannotPullSerialLotItem;
                                                    IsValid = false;
                                                }
                                                else
                                                {
                                                    ItemGuid = objItemMaster.GUID;
                                                    ItemType = objItemMaster.ItemType;
                                                    OnHandQuantity = objItemMaster.OnHandQuantity;
                                                }
                                            }
                                        }

                                        //-------------------Validate Quantity-------------------
                                        //
                                        if (IsValid)
                                        {
                                            if (!Double.TryParse(objReturn.PullQuantity, out PullQuantity))
                                            {
                                                objReturn.Status = "Fail";
                                                objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.PullQuantity); 
                                                IsValid = false;
                                            }
                                            else if (PullQuantity <= 0)
                                            {
                                                objReturn.Status = "Fail";
                                                objReturn.Reason = string.Format(ResCommon.MsgGreaterThanZero,ResPullImport.PullQuantity);
                                                IsValid = false;
                                            }
                                        }
                                        double ItemSellPrice = 0;
                                        if (AllowEditItemSellPriceonWorkOrderPull
                                            && !string.IsNullOrWhiteSpace(objReturn.WorkOrder)
                                            && !string.IsNullOrWhiteSpace(objReturn.ItemSellPrice)
                                            && !Double.TryParse(objReturn.ItemSellPrice, out ItemSellPrice))
                                        {
                                            objReturn.Status = "Fail";
                                            objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.ItemSellPrice);
                                            IsValid = false;
                                        }
                                        //-------------------Validate Location-------------------
                                        //
                                        if (IsValid)
                                        {
                                            if (objReturn.ActionType.Trim().ToUpper() == "PULL")
                                            {
                                                if (String.IsNullOrEmpty(objReturn.Location))
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = string.Format(ResMessage.MsgRequired, ResPullImport.Location);
                                                    IsValid = false;
                                                }
                                                else if (ItemGuid != null)
                                                {
                                                    BinMasterDTO objBinMaster = objBinMasterDAL.GetItemBinByNameOrDefault(ItemGuid.Value, objReturn.Location);
                                                    if (objBinMaster == null || objBinMaster.ID <= 0)
                                                    {
                                                        bool isAllowNegetive = false;
                                                        RoomDAL objRoomDAL = new RoomDAL(SessionHelper.EnterPriseDBName);
                                                        RoomDTO objRoomDTO = objRoomDAL.GetRoomByIDPlain(SessionHelper.RoomID);
                                                        if (objRoomDTO != null && objRoomDTO.AllowPullBeyondAvailableQty == true
                                                            && objItemMaster != null
                                                            && objItemMaster.SerialNumberTracking == false
                                                            && objItemMaster.LotNumberTracking == false
                                                            && objItemMaster.DateCodeTracking == false)
                                                        {
                                                            isAllowNegetive = true;
                                                            BinMasterDTO objNewBinMasterDTO = new BinMasterDTO();
                                                            Int64? NewBinID = 0;
                                                            NewBinID = objBinMasterDAL.GetOrInsertBinIDByName(ItemGuid.Value, objReturn.Location,SessionHelper.UserID, SessionHelper.RoomID, SessionHelper.CompanyID, false);
                                                            if (NewBinID <= 0)
                                                            {
                                                                objReturn.Status = "Fail";
                                                                objReturn.Reason = string.Format(ResMessage.MsgDoesNotExist, ResPullImport.Location);
                                                                IsValid = false;
                                                            }
                                                            else
                                                            { BinID = NewBinID.GetValueOrDefault(0); }
                                                        }
                                                        else
                                                        {
                                                            objReturn.Status = "Fail";
                                                            objReturn.Reason = string.Format(ResMessage.MsgDoesNotExist, ResPullImport.Location);
                                                            IsValid = false;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        BinID = objBinMaster.ID;
                                                    }
                                                }
                                            }
                                            else if (objReturn.ActionType.Trim().ToUpper() == "CREDIT")
                                            {
                                                BinID = objBinMasterDAL.GetOrInsertBinIDByName(ItemGuid.Value, objReturn.Location, SessionHelper.UserID, SessionHelper.RoomID, SessionHelper.CompanyID, false) ?? 0;
                                            }
                                        }

                                        //----------------Work Order----------------
                                        //
                                        if (IsValid)
                                        {
                                            if (!String.IsNullOrEmpty(objReturn.WorkOrder))
                                            {
                                                WorkOrderDAL objWorkOrderDAL = new WorkOrderDAL(SessionHelper.EnterPriseDBName);
                                                CommonDAL objCommonDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
                                                WorkOrderDTO objWorkOrderDTO = new WorkOrderDTO();
                                                objWorkOrderDTO.ID = 0;
                                                objWorkOrderDTO.CreatedBy = SessionHelper.UserID;
                                                objWorkOrderDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objWorkOrderDTO.Room = SessionHelper.RoomID;
                                                objWorkOrderDTO.CompanyID = SessionHelper.CompanyID;
                                                objWorkOrderDTO.WOType = "WorkOrder";
                                                objWorkOrderDTO.WOStatus = "Open";
                                                objWorkOrderDTO.WOName = objReturn.WorkOrder.Trim();
                                                objWorkOrderDTO.ReleaseNumber = objWorkOrderDAL.GenerateAndGetReleaseNumber(objReturn.WorkOrder, 0, SessionHelper.RoomID, SessionHelper.CompanyID);

                                                WorkOrderDTO objDTO = objWorkOrderDAL.GetWorkOrdersByNamePlainSingle(objWorkOrderDTO.WOName, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                if (objDTO != null && objDTO.GUID != null && objDTO.GUID != Guid.Empty && objDTO.WOStatus.Trim().ToUpper() == "OPEN")
                                                {
                                                    WOGuid = objDTO.GUID;
                                                }
                                                else
                                                {
                                                    objWorkOrderDTO.GUID = Guid.NewGuid();
                                                    objWorkOrderDTO.WhatWhereAction = "Work Order";
                                                    WOGuid = objWorkOrderDAL.Insert(objWorkOrderDTO);
                                                }

                                                if (WOGuid != null && !string.IsNullOrEmpty(objReturn.Asset))
                                                {
                                                    AssetMasterDAL assetMaster = new AssetMasterDAL(SessionHelper.EnterPriseDBName);
                                                    AssetMasterDTO asset = new AssetMasterDTO();
                                                    asset = assetMaster.GetAssetByName(objReturn.Asset, SessionHelper.RoomID, SessionHelper.CompanyID);

                                                    if (asset != null && asset.GUID != null && asset.GUID != Guid.Empty)
                                                    {
                                                        assetGuid = asset.GUID;
                                                    }
                                                    else
                                                    {
                                                        asset = new AssetMasterDTO();
                                                        asset.ID = 0;
                                                        asset.CreatedBy = SessionHelper.UserID;
                                                        asset.LastUpdatedBy = SessionHelper.UserID;
                                                        asset.Room = SessionHelper.RoomID;
                                                        asset.CompanyID = SessionHelper.CompanyID;
                                                        asset.AddedFrom = "Web";
                                                        asset.EditedFrom = "Web";
                                                        asset.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                        asset.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                        asset.AssetName = objReturn.Asset.Trim();
                                                        asset.GUID = Guid.NewGuid();
                                                        asset.MaintenanceType = 0;
                                                        var assetId = assetMaster.Insert(asset);
                                                        if (assetId > 0)
                                                        {
                                                            assetGuid = asset.GUID;
                                                        }
                                                    }
                                                    if (assetGuid != null && assetGuid != Guid.Empty)
                                                    {
                                                        objWorkOrderDAL.AssignAssetToWorkorder(WOGuid.Value, assetGuid.Value, SessionHelper.UserID, SessionHelper.CompanyID, SessionHelper.RoomID);
                                                    }
                                                }
                                            }
                                        }

                                        //-------------------PULL-------------------
                                        //
                                        if (IsValid)
                                        {
                                            PullController objPullController = new PullController();

                                            if (objReturn.ActionType.Trim().ToUpper() == "PULL")
                                            {                                                
                                                if (AllowEditItemSellPriceonWorkOrderPull
                                                    && !string.IsNullOrWhiteSpace(objReturn.WorkOrder.Trim())
                                                    && !string.IsNullOrWhiteSpace(objPullImport.ItemSellPrice)
                                                    && Convert.ToDouble(objPullImport.ItemSellPrice) > 0)
                                                {
                                                    WOItemSellPrice = Convert.ToDouble(objPullImport.ItemSellPrice);
                                                }

                                                JsonResult repsonse = objPullController.UpdatePullData(0, ItemGuid.Value.ToString(), "", PullQuantity, BinID, "pull", PullQuantity, objReturn.UDF1, objReturn.UDF2, objReturn.UDF3, objReturn.UDF4, objReturn.UDF5, null, WOGuid.ToString(), null, objReturn.ProjectSpendName, objReturn.PullOrderNumber, PullType: Convert.ToInt64(PullInsertTypeEnum.WebImportPull),EditedSellPrice: WOItemSellPrice);
                                                errMsg = serializer.Deserialize<ReqPullAllJsonResponse>(serializer.Serialize(repsonse.Data));
                                                if (errMsg.Status.ToLower() == "ok")
                                                {
                                                    IEnumerable<UDFDTO> InsertUDFDataFromDB = objUDFDAL.GetUDFsByUDFTableNamePlain("PullMaster", SessionHelper.RoomID, SessionHelper.CompanyID);
                                                    UDFController objUDFController = new UDFController();
                                                    if ((!string.IsNullOrWhiteSpace(objPullImport.UDF1)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf1").Any())
                                                    {
                                                        Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf1").FirstOrDefault().ID;
                                                        objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF1, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                    if ((!string.IsNullOrWhiteSpace(objPullImport.UDF2)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf2").Any())
                                                    {
                                                        Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf2").FirstOrDefault().ID;
                                                        objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF2, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                    if ((!string.IsNullOrWhiteSpace(objPullImport.UDF3)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf3").Any())
                                                    {
                                                        Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf3").FirstOrDefault().ID;
                                                        objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF3, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                    if ((!string.IsNullOrWhiteSpace(objPullImport.UDF4)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf4").Any())
                                                    {
                                                        Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf4").FirstOrDefault().ID;
                                                        objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF4, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                    if ((!string.IsNullOrWhiteSpace(objPullImport.UDF5)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf5").Any())
                                                    {
                                                        Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf5").FirstOrDefault().ID;
                                                        objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF5, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                    }
                                                }
                                                if (errMsg.Status.ToUpper() == "FAIL")
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = errMsg.Message;
                                                    IsValid = false;
                                                }
                                                else if (!String.IsNullOrWhiteSpace(errMsg.LocationMSG))
                                                {

                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = errMsg.LocationMSG;
                                                    IsValid = false;
                                                }
                                            }
                                            else if (objReturn.ActionType.Trim().ToUpper() == "CREDIT")
                                            {
                                                WOItemSellPrice = null;
                                                 JsonResult repsonse = objPullController.UpdatePullData(0, ItemGuid.Value.ToString(), "", PullQuantity, BinID, "credit", PullQuantity, objReturn.UDF1, objReturn.UDF2, objReturn.UDF3, objReturn.UDF4, objReturn.UDF5, null, WOGuid.ToString(), null, objReturn.ProjectSpendName, objReturn.PullOrderNumber, PullType: Convert.ToInt64(PullInsertTypeEnum.WebImportPull),EditedSellPrice: WOItemSellPrice);
                                                errMsg = serializer.Deserialize<ReqPullAllJsonResponse>(serializer.Serialize(repsonse.Data));
                                                if (errMsg.Status.ToUpper() == "FAIL")
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = errMsg.Message;
                                                    IsValid = false;
                                                }
                                                else if (!String.IsNullOrWhiteSpace(errMsg.LocationMSG))
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = errMsg.LocationMSG;
                                                    IsValid = false;
                                                }

                                                //ItemInfoToCredit objItemInfoToCredit = new ItemInfoToCredit();
                                                //objItemInfoToCredit.RowID = 0;
                                                //objItemInfoToCredit.ItemGuid = ItemGuid.Value;
                                                //objItemInfoToCredit.WOGuid = WOGuid;
                                                //objItemInfoToCredit.QLGuid = null;
                                                //objItemInfoToCredit.ItemType = ItemType.Value;
                                                //objItemInfoToCredit.Bin = objReturn.Location;
                                                //objItemInfoToCredit.Quantity = PullQuantity;
                                                //objItemInfoToCredit.UDF1 = objReturn.UDF1;
                                                //objItemInfoToCredit.UDF2 = objReturn.UDF2;
                                                //objItemInfoToCredit.UDF3 = objReturn.UDF3;
                                                //objItemInfoToCredit.UDF4 = objReturn.UDF4;
                                                //objItemInfoToCredit.UDF5 = objReturn.UDF5;
                                                //objItemInfoToCredit.PrevPullQty = OnHandQuantity.Value;
                                                //objItemInfoToCredit.ItemNumber = objReturn.ItemNumber;
                                                //objItemInfoToCredit.ProjectName = objReturn.ProjectSpendName;
                                                //objItemInfoToCredit.PullOrderNumber = objReturn.PullOrderNumber;

                                                //objItemInfoToCredit.PrevPullsToCredit = new List<PullDetailToCredit>();
                                                //PullDetailToCredit objPullDetailToCredit = new PullDetailToCredit();
                                                //objPullDetailToCredit.Serial = "";
                                                //objPullDetailToCredit.Lot = "";
                                                //objPullDetailToCredit.ExpireDate = "";
                                                //objPullDetailToCredit.Qty = PullQuantity;
                                                //objItemInfoToCredit.PrevPullsToCredit.Add(objPullDetailToCredit);

                                                ////objItemInfoToCredit.ItemTracking = "";
                                                ////objItemInfoToCredit.IsModelShow = false;                                    
                                                ////objItemInfoToCredit.QuickListName = "";
                                                ////objItemInfoToCredit.ItemQtyInQL = 0;
                                                ////objItemInfoToCredit.CreditQLQty = 0;
                                                ////objItemInfoToCredit.ErrorMessage = "";

                                                //List<ItemInfoToCredit> CreditDetails = new List<ItemInfoToCredit>();
                                                //CreditDetails.Add(objItemInfoToCredit);

                                                ////-----------------------------------------------------------------
                                                ////
                                                //ActionResult objActionResult = objPullController.SavePullCredit(CreditDetails);
                                                //if(objActionResult != null)
                                                //{
                                                //    JsonResult repsonse = (JsonResult)objActionResult;
                                                //    errMsg = serializer.Deserialize<ReqPullAllJsonResponse>(serializer.Serialize(repsonse.Data));
                                                //    if (errMsg.Status.ToUpper() == "FAIL")
                                                //    {
                                                //        objReturn.Status = "Fail";
                                                //        objReturn.Reason = errMsg.Message;
                                                //        IsValid = false;
                                                //    }
                                                //}                                    
                                            }
                                        }

                                        lstreturn.Add(objReturn);
                                    }

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<PullImport>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }

                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.PullImportWithLotSerial:
                            #region PullImportWithLotSerial
                            //else if (ImportMastersDTO.TableName.PullImportWithLotSerial.ToString() == TableName)
                            {
                                List<PullImportWithLotSerial> CurrentBlankPIList = new List<PullImportWithLotSerial>();
                                PullImportWithLotSerial[] LstPullImport = s.Deserialize<PullImportWithLotSerial[]>(para);
                                List<PullImportWithLotSerial> LstPullImportMain = new List<PullImportWithLotSerial>();
                                List<PullImportWithLotSerial> lstreturn = new List<PullImportWithLotSerial>();
                                PullImportWithLotSerial objReturn;

                                if (Session["PullImportWithLotSerial"] != null)
                                {
                                    LstPullImportMain = (List<PullImportWithLotSerial>)Session["PullImportWithLotSerial"];
                                }

                                LstPullImportMain = LstPullImportMain.Union(LstPullImport).ToList();
                                Session["PullImportWithLotSerial"] = LstPullImportMain;

                                if (LstPullImportMain.Count == TotalCount)
                                {
                                    LstPullImportMain = (List<PullImportWithLotSerial>)Session["PullImportWithLotSerial"];
                                    Session["PullImportWithLotSerial"] = null;

                                    ItemMasterDAL objDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                                    BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                                    JavaScriptSerializer serializer = new JavaScriptSerializer();
                                    ReqPullAllJsonResponse errMsg = null;
                                    ProjectMasterDAL objPrjDAL = new ProjectMasterDAL(SessionHelper.EnterPriseDBName);

                                    ItemMasterDTO objItemMaster = null;
                                    Guid? ItemGuid = null;
                                    int? ItemType = null;
                                    double? OnHandQuantity = null;
                                    double PullQuantity = 0;
                                    Int64 BinID = 0;
                                    Guid? WOGuid = null;
                                    Guid? assetGuid = null;
                                    bool IsValid = true;
                                    double? WOItemSellPrice = null;
                                    bool AllowEditItemSellPriceonWorkOrderPull = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.AllowEditItemSellPriceonWorkOrderPull);

                                    #region Taking Distinct ItemNumber from uploaded list

                                    List<string> lstItemNumbers = new List<string>();
                                    lstItemNumbers = LstPullImportMain.Select(x => x.ItemNumber).Distinct().ToList();

                                    #endregion

                                    #region get itemtracking type and other details from item numbers

                                    List<ItemMasterDTO> lstItemMaster = new List<ItemMasterDTO>();
                                    lstItemMaster = objDAL.GetItemByItemNumbers(lstItemNumbers, SessionHelper.CompanyID, SessionHelper.RoomID);

                                    #endregion

                                    #region Ignoring Serail,Lot and Expiration inputs based on Item Tracking Type

                                    foreach (PullImportWithLotSerial pullImport in LstPullImportMain)
                                    {
                                        ItemMasterDTO objItems = new ItemMasterDTO();
                                        objItems = lstItemMaster.Where(x => x.ItemNumber.Equals(pullImport.ItemNumber)).FirstOrDefault();

                                        if (objItems != null && !objItems.SerialNumberTracking && !objItems.LotNumberTracking && !objItems.DateCodeTracking)
                                        {
                                            pullImport.ItemTrackingType = 0;
                                            pullImport.SerialNumber = "";
                                            pullImport.LotNumber = "";
                                            pullImport.ExpirationDate = "";
                                        }
                                        else if (objItems != null && objItems.SerialNumberTracking && objItems.DateCodeTracking)
                                        {
                                            pullImport.ItemTrackingType = 4;
                                            pullImport.LotNumber = "";
                                        }
                                        else if (objItems != null && objItems.LotNumberTracking && objItems.DateCodeTracking)
                                        {
                                            pullImport.ItemTrackingType = 5;
                                            pullImport.SerialNumber = "";
                                        }
                                        else if (objItems != null && objItems.SerialNumberTracking)
                                        {
                                            pullImport.ItemTrackingType = 1;
                                            pullImport.LotNumber = "";
                                            pullImport.ExpirationDate = "";
                                        }
                                        else if (objItems != null && objItems.LotNumberTracking)
                                        {
                                            pullImport.ItemTrackingType = 2;
                                            pullImport.SerialNumber = "";
                                            pullImport.ExpirationDate = "";
                                        }
                                        else if (objItems != null && objItems.DateCodeTracking)
                                        {
                                            pullImport.ItemTrackingType = 3;
                                            pullImport.SerialNumber = "";
                                            pullImport.LotNumber = "";
                                        }
                                    }

                                    var lstDuplicateSerial = LstPullImportMain.Where(t => (t.ItemTrackingType == 1 || t.ItemTrackingType == 4) && !string.IsNullOrWhiteSpace(t.SerialNumber)).GroupBy(d => new { d.ItemNumber, d.SerialNumber })
                                                              .Where(g => g.Count() > 1)
                                                              .Select(g => g.Key).ToList();

                                    if (lstDuplicateSerial.Count() > 0)
                                    {
                                        foreach (PullImportWithLotSerial objDuplicatSerial in LstPullImportMain.Where(t => t.ItemTrackingType == 1 || t.ItemTrackingType == 4).ToList())
                                        {
                                            if (lstDuplicateSerial.Where(x => x.ItemNumber.Equals(objDuplicatSerial.ItemNumber)
                                                                             && x.SerialNumber.Equals(objDuplicatSerial.SerialNumber)).Count() > 0)
                                            {
                                                objDuplicatSerial.Status = "Fail";
                                                objDuplicatSerial.Reason = ResPullMaster.DuplicateSerialNotAllowed; 

                                                lstreturn.Add(objDuplicatSerial);
                                            }
                                        }

                                        LstPullImportMain = LstPullImportMain.Where(x => string.IsNullOrWhiteSpace(x.Status) && string.IsNullOrWhiteSpace(x.Reason)).ToList();
                                    }

                                    #endregion

                                    #region Final list based on grouping and sum of poolQuantity

                                    #region For General Item

                                    List<PullImportWithLotSerial> lstGeneralImportList = (from pull in LstPullImportMain
                                                                                          where pull.ItemTrackingType <= 0
                                                                                          group pull by new
                                                                                          {
                                                                                              ItemNumber = pull.ItemNumber,
                                                                                              Location = pull.Location,
                                                                                              UDF1 = pull.UDF1,
                                                                                              UDF2 = pull.UDF2,
                                                                                              UDF3 = pull.UDF3,
                                                                                              UDF4 = pull.UDF4,
                                                                                              UDF5 = pull.UDF5,
                                                                                              ProjectSpendName = pull.ProjectSpendName.Trim(),
                                                                                              PullOrderNumber = pull.PullOrderNumber.Trim(),
                                                                                              WorkOrder = pull.WorkOrder.Trim(),
                                                                                              Asset = pull.Asset.Trim(),
                                                                                              ActionType = pull.ActionType.Trim(),
                                                                                              ItemSellPrice = (string.IsNullOrWhiteSpace(pull.ItemSellPrice) ? "0" : pull.ItemSellPrice)
                                                                                          } into newGroup
                                                                                          select new PullImportWithLotSerial
                                                                                          {
                                                                                              ItemNumber = newGroup.Key.ItemNumber,
                                                                                              PullQuantity = Convert.ToString(newGroup.Sum(x => Convert.ToDecimal(x.PullQuantity))),
                                                                                              Location = newGroup.Key.Location,
                                                                                              UDF1 = newGroup.Key.UDF1,
                                                                                              UDF2 = newGroup.Key.UDF2,
                                                                                              UDF3 = newGroup.Key.UDF3,
                                                                                              UDF4 = newGroup.Key.UDF4,
                                                                                              UDF5 = newGroup.Key.UDF5,
                                                                                              ProjectSpendName = newGroup.Key.ProjectSpendName.Trim(),
                                                                                              PullOrderNumber = newGroup.Key.PullOrderNumber.Trim(),
                                                                                              WorkOrder = newGroup.Key.WorkOrder.Trim(),
                                                                                              Asset = newGroup.Key.Asset.Trim(),
                                                                                              ActionType = newGroup.Key.ActionType.Trim(),
                                                                                              ItemSellPrice = (string.IsNullOrWhiteSpace(newGroup.Key.ItemSellPrice.Trim()) ? "0" : newGroup.Key.ItemSellPrice.Trim())
                                                                                          }).ToList();

                                    #endregion

                                    #region  for Serial Lot Exp item

                                    List<PullImportWithLotSerial> lstLotSerialImportList = (from pull in LstPullImportMain
                                                                                            where pull.ItemTrackingType > 0
                                                                                            group pull by new
                                                                                            {
                                                                                                ItemNumber = pull.ItemNumber,
                                                                                                Location = pull.Location,
                                                                                                UDF1 = pull.UDF1,
                                                                                                UDF2 = pull.UDF2,
                                                                                                UDF3 = pull.UDF3,
                                                                                                UDF4 = pull.UDF4,
                                                                                                UDF5 = pull.UDF5,
                                                                                                ProjectSpendName = pull.ProjectSpendName.Trim(),
                                                                                                PullOrderNumber = pull.PullOrderNumber.Trim(),
                                                                                                WorkOrder = pull.WorkOrder.Trim(),
                                                                                                Asset = pull.Asset.Trim(),
                                                                                                ActionType = pull.ActionType.Trim(),
                                                                                                LotNumber = pull.LotNumber.Trim(),
                                                                                                SerialNumber = pull.SerialNumber.Trim(),
                                                                                                ExpirationDate = pull.ExpirationDate.Trim()
                                                                                            } into newGroup
                                                                                            select new PullImportWithLotSerial
                                                                                            {
                                                                                                ItemNumber = newGroup.Key.ItemNumber,
                                                                                                PullQuantity = Convert.ToString(newGroup.Sum(x => Convert.ToDecimal(x.PullQuantity))),
                                                                                                Location = newGroup.Key.Location,
                                                                                                UDF1 = newGroup.Key.UDF1,
                                                                                                UDF2 = newGroup.Key.UDF2,
                                                                                                UDF3 = newGroup.Key.UDF3,
                                                                                                UDF4 = newGroup.Key.UDF4,
                                                                                                UDF5 = newGroup.Key.UDF5,
                                                                                                ProjectSpendName = newGroup.Key.ProjectSpendName.Trim(),
                                                                                                PullOrderNumber = newGroup.Key.PullOrderNumber.Trim(),
                                                                                                WorkOrder = newGroup.Key.WorkOrder.Trim(),
                                                                                                Asset = newGroup.Key.Asset.Trim(),
                                                                                                ActionType = newGroup.Key.ActionType.Trim(),
                                                                                                LotNumber = newGroup.Key.LotNumber.Trim(),
                                                                                                SerialNumber = newGroup.Key.SerialNumber.Trim(),
                                                                                                ExpirationDate = newGroup.Key.ExpirationDate.Trim(),
                                                                                                ItemSellPrice = Convert.ToString(newGroup.SelectMany(x => string.IsNullOrWhiteSpace(x.ItemSellPrice) ? "0" : x.ItemSellPrice).FirstOrDefault())
                                                                                            }).ToList();

                                    //List<PullImportWithLotSerial> lstLotSerialImportListForItems = (from pull in lstLotSerialImportList                                              
                                    //                          group pull by new
                                    //                          {
                                    //                              ItemNumber = pull.ItemNumber,
                                    //                              Location = pull.Location,
                                    //                              UDF1 = pull.UDF1,
                                    //                              UDF2 = pull.UDF2,
                                    //                              UDF3 = pull.UDF3,
                                    //                              UDF4 = pull.UDF4,
                                    //                              UDF5 = pull.UDF5,
                                    //                              ProjectSpendName = pull.ProjectSpendName.Trim(),
                                    //                              PullOrderNumber = pull.PullOrderNumber.Trim(),
                                    //                              WorkOrder = pull.WorkOrder.Trim(),
                                    //                              Asset = pull.Asset.Trim(),
                                    //                              ActionType = pull.ActionType.Trim()
                                    //                          } into newGroup
                                    //                          select new PullImportWithLotSerial
                                    //                          {
                                    //                              ItemNumber = newGroup.Key.ItemNumber,
                                    //                              PullQuantity = Convert.ToString(newGroup.Sum(x => Convert.ToDecimal(x.PullQuantity))),
                                    //                              Location = newGroup.Key.Location,
                                    //                              UDF1 = newGroup.Key.UDF1,
                                    //                              UDF2 = newGroup.Key.UDF2,
                                    //                              UDF3 = newGroup.Key.UDF3,
                                    //                              UDF4 = newGroup.Key.UDF4,
                                    //                              UDF5 = newGroup.Key.UDF5,
                                    //                              ProjectSpendName = newGroup.Key.ProjectSpendName.Trim(),
                                    //                              PullOrderNumber = newGroup.Key.PullOrderNumber.Trim(),
                                    //                              WorkOrder = newGroup.Key.WorkOrder.Trim(),
                                    //                              Asset = newGroup.Key.Asset.Trim(),
                                    //                              ActionType = newGroup.Key.ActionType.Trim()
                                    //                          }).ToList();

                                    #endregion

                                    #endregion

                                    #region For Genral Type Items

                                    if (lstGeneralImportList != null && lstGeneralImportList.Count > 0)
                                    {
                                        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.PullMaster.ToString());

                                        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("PullMaster", SessionHelper.RoomID, SessionHelper.CompanyID);

                                        foreach (PullImportWithLotSerial objPullImport in lstGeneralImportList)
                                        {
                                            CurrentOptionList = new List<UDFOptionsMain>();
                                            errMsg = new ReqPullAllJsonResponse();
                                            objItemMaster = new ItemMasterDTO();
                                            ItemGuid = null;
                                            ItemType = null;
                                            OnHandQuantity = null;
                                            PullQuantity = 0;
                                            BinID = 0;
                                            WOGuid = null;
                                            IsValid = true;
                                            WOItemSellPrice = null;

                                            objReturn = new PullImportWithLotSerial();
                                            objReturn.ItemNumber = objPullImport.ItemNumber;
                                            objReturn.PullQuantity = objPullImport.PullQuantity;
                                            objReturn.Location = objPullImport.Location;
                                            objReturn.UDF1 = objPullImport.UDF1;
                                            objReturn.UDF2 = objPullImport.UDF2;
                                            objReturn.UDF3 = objPullImport.UDF3;
                                            objReturn.UDF4 = objPullImport.UDF4;
                                            objReturn.UDF5 = objPullImport.UDF5;
                                            objReturn.ProjectSpendName = objPullImport.ProjectSpendName.Trim();
                                            objReturn.PullOrderNumber = objPullImport.PullOrderNumber.Trim();
                                            objReturn.WorkOrder = objPullImport.WorkOrder.Trim();
                                            objReturn.Asset = objPullImport.Asset.Trim();
                                            objReturn.ActionType = objPullImport.ActionType.Trim();
                                            objReturn.SerialNumber = null;
                                            objReturn.LotNumber = null;
                                            objReturn.ExpirationDate = null;
                                            objReturn.Status = "success";
                                            objReturn.Reason = "";
                                            if (!string.IsNullOrWhiteSpace(objPullImport.WorkOrder.Trim())
                                            && AllowEditItemSellPriceonWorkOrderPull)
                                            {
                                                objReturn.ItemSellPrice = objPullImport.ItemSellPrice;
                                            }
                                            string errorMsg = string.Empty;
                                            CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, objPullImport.UDF1, objPullImport.UDF2, objPullImport.UDF3, objPullImport.UDF4, objPullImport.UDF5, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);
                                            if (!string.IsNullOrWhiteSpace(errorMsg))
                                            {
                                                objReturn.Status = "Fail";
                                                if (!string.IsNullOrEmpty(objReturn.Reason))
                                                    objReturn.Reason += errorMsg;
                                                else
                                                    objReturn.Reason = errorMsg;

                                                IsValid = false;
                                                objPullImport.Status = objReturn.Status;
                                                objPullImport.Reason = objReturn.Reason;
                                            }

                                            //------------------Validate Action Type------------------
                                            // && objReturn.ActionType.Trim().ToUpper() != "CREDIT"
                                            if (objReturn.ActionType.Trim().ToUpper() != "PULL")
                                            {
                                                objReturn.Status = "Fail";
                                                objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.ActionType);
                                                IsValid = false;
                                            }

                                            //-------------------Validate Item Number-------------------
                                            //
                                            if (IsValid)
                                            {
                                                if (String.IsNullOrEmpty(objReturn.ItemNumber))
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = string.Format(ResMessage.MsgRequired, ResItemMaster.ItemNumber);
                                                    IsValid = false;
                                                }
                                                else
                                                {
                                                    objItemMaster = objDAL.GetItemByItemNumberPlain(objReturn.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                    if (objItemMaster == null || objItemMaster.GUID == null || objItemMaster.GUID == Guid.Empty)
                                                    {
                                                        objReturn.Status = "Fail";
                                                        objReturn.Reason = ResItemMaster.MsgItemDoesNotExist;
                                                        IsValid = false;
                                                    }
                                                    //else if (objItemMaster.SerialNumberTracking == true || objItemMaster.LotNumberTracking)
                                                    //{
                                                    //    objReturn.Status = "Fail";
                                                    //    objReturn.Reason = "Can not pull serial/lot item.";
                                                    //    IsValid = false;
                                                    //}
                                                    else
                                                    {
                                                        ItemGuid = objItemMaster.GUID;
                                                        ItemType = objItemMaster.ItemType;
                                                        OnHandQuantity = objItemMaster.OnHandQuantity;
                                                    }
                                                }
                                            }

                                            //-------------------Validate Quantity-------------------
                                            //
                                            if (IsValid)
                                            {
                                                if (!Double.TryParse(objReturn.PullQuantity, out PullQuantity))
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.PullQuantity);
                                                    IsValid = false;
                                                }
                                                else if (PullQuantity <= 0)
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = string.Format(ResCommon.MsgGreaterThanZero, ResPullImport.PullQuantity);
                                                    IsValid = false;
                                                }
                                            }
                                            double ItemSellPrice = 0;
                                            if (AllowEditItemSellPriceonWorkOrderPull
                                                && !string.IsNullOrWhiteSpace(objReturn.WorkOrder)
                                                && !string.IsNullOrWhiteSpace(objReturn.ItemSellPrice)
                                                && !Double.TryParse(objReturn.ItemSellPrice, out ItemSellPrice))
                                            {
                                                objReturn.Status = "Fail";
                                                objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.ItemSellPrice);
                                                IsValid = false;
                                            }
                                            //-------------------Validate Location-------------------
                                            //
                                            if (IsValid)
                                            {
                                                if (objReturn.ActionType.Trim().ToUpper() == "PULL")
                                                {
                                                    if (String.IsNullOrEmpty(objReturn.Location))
                                                    {
                                                        objReturn.Status = "Fail";
                                                        objReturn.Reason = string.Format(ResMessage.MsgRequired, ResPullImport.Location);
                                                        IsValid = false;
                                                    }
                                                    else if (ItemGuid != null)
                                                    {
                                                        BinMasterDTO objBinMaster = objBinMasterDAL.GetItemBinByNameOrDefault(ItemGuid.Value, objReturn.Location);
                                                        if (objBinMaster == null || objBinMaster.ID <= 0)
                                                        {
                                                            objReturn.Status = "Fail";
                                                            objReturn.Reason = string.Format(ResMessage.MsgDoesNotExist, ResPullImport.Location);
                                                            IsValid = false;
                                                        }
                                                        else
                                                        {
                                                            BinID = objBinMaster.ID;
                                                        }
                                                    }

                                                    bool IsAllowConsignedCredit = SessionHelper.GetModulePermission(SessionHelper.ModuleList.AllowConsignedCreditPull, SessionHelper.PermissionType.AllowPull);
                                                    if (!IsAllowConsignedCredit)
                                                    {
                                                        if (objItemMaster.Consignment)
                                                        {
                                                            objReturn.Status = "Fail";
                                                            objReturn.Reason = ResPullMaster.NoRightsToPullConsignItem;
                                                            IsValid = false;
                                                        }
                                                    }
                                                }
                                                else if (objReturn.ActionType.Trim().ToUpper() == "CREDIT")
                                                {
                                                    BinID = objBinMasterDAL.GetOrInsertBinIDByName(ItemGuid.Value, objReturn.Location, SessionHelper.UserID, SessionHelper.RoomID, SessionHelper.CompanyID, false) ?? 0;
                                                }
                                            }

                                            //----------------Work Order----------------
                                            //

                                            #region Work Order

                                            if (IsValid)
                                            {
                                                if (!String.IsNullOrEmpty(objReturn.WorkOrder))
                                                {
                                                    WorkOrderDAL objWorkOrderDAL = new WorkOrderDAL(SessionHelper.EnterPriseDBName);
                                                    CommonDAL objCommonDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
                                                    WorkOrderDTO objWorkOrderDTO = new WorkOrderDTO();
                                                    objWorkOrderDTO.ID = 0;
                                                    objWorkOrderDTO.CreatedBy = SessionHelper.UserID;
                                                    objWorkOrderDTO.LastUpdatedBy = SessionHelper.UserID;
                                                    objWorkOrderDTO.Room = SessionHelper.RoomID;
                                                    objWorkOrderDTO.CompanyID = SessionHelper.CompanyID;
                                                    objWorkOrderDTO.WOType = "WorkOrder";
                                                    objWorkOrderDTO.WOStatus = "Open";
                                                    objWorkOrderDTO.WOName = objReturn.WorkOrder.Trim();
                                                    objWorkOrderDTO.ReleaseNumber = objWorkOrderDAL.GenerateAndGetReleaseNumber(objReturn.WorkOrder, 0, SessionHelper.RoomID, SessionHelper.CompanyID);

                                                    WorkOrderDTO objDTO = objWorkOrderDAL.GetWorkOrdersByNamePlainSingle(objWorkOrderDTO.WOName, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                    if (objDTO != null && objDTO.GUID != null && objDTO.GUID != Guid.Empty && objDTO.WOStatus.Trim().ToUpper() == "OPEN")
                                                    {
                                                        WOGuid = objDTO.GUID;
                                                    }
                                                    else
                                                    {
                                                        objWorkOrderDTO.GUID = Guid.NewGuid();
                                                        objWorkOrderDTO.WhatWhereAction = "Work Order";
                                                        WOGuid = objWorkOrderDAL.Insert(objWorkOrderDTO);
                                                    }

                                                    if (WOGuid != null && !string.IsNullOrEmpty(objReturn.Asset))
                                                    {
                                                        AssetMasterDAL assetMaster = new AssetMasterDAL(SessionHelper.EnterPriseDBName);
                                                        AssetMasterDTO asset = new AssetMasterDTO();
                                                        asset = assetMaster.GetAssetByName(objReturn.Asset, SessionHelper.RoomID, SessionHelper.CompanyID);

                                                        if (asset != null && asset.GUID != null && asset.GUID != Guid.Empty)
                                                        {
                                                            assetGuid = asset.GUID;
                                                        }
                                                        else
                                                        {
                                                            asset = new AssetMasterDTO();
                                                            asset.ID = 0;
                                                            asset.CreatedBy = SessionHelper.UserID;
                                                            asset.LastUpdatedBy = SessionHelper.UserID;
                                                            asset.Room = SessionHelper.RoomID;
                                                            asset.CompanyID = SessionHelper.CompanyID;
                                                            asset.AddedFrom = "Web";
                                                            asset.EditedFrom = "Web";
                                                            asset.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                            asset.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                            asset.AssetName = objReturn.Asset.Trim();
                                                            asset.GUID = Guid.NewGuid();
                                                            asset.MaintenanceType = 0;
                                                            var assetId = assetMaster.Insert(asset);
                                                            if (assetId > 0)
                                                            {
                                                                assetGuid = asset.GUID;
                                                            }
                                                        }
                                                        if (assetGuid != null && assetGuid != Guid.Empty)
                                                        {
                                                            objWorkOrderDAL.AssignAssetToWorkorder(WOGuid.Value, assetGuid.Value, SessionHelper.UserID, SessionHelper.CompanyID, SessionHelper.RoomID);
                                                        }
                                                    }
                                                }
                                            }

                                            #endregion

                                            //-------------------PULL-------------------
                                            //

                                            #region PULL

                                            if (IsValid)
                                            {
                                                PullController objPullController = new PullController();

                                                if (objReturn.ActionType.Trim().ToUpper() == "PULL")
                                                {
                                                    if (!objItemMaster.SerialNumberTracking
                                                        && !objItemMaster.LotNumberTracking
                                                        && !objItemMaster.DateCodeTracking)
                                                    {
                                                        if (AllowEditItemSellPriceonWorkOrderPull
                                                        && !string.IsNullOrWhiteSpace(objReturn.WorkOrder.Trim())
                                                        && !string.IsNullOrWhiteSpace(objPullImport.ItemSellPrice)
                                                        && Convert.ToDouble(objPullImport.ItemSellPrice) > 0)
                                                        {
                                                            WOItemSellPrice = Convert.ToDouble(objPullImport.ItemSellPrice);
                                                        }
                                                        JsonResult repsonse = objPullController.UpdatePullData(0, ItemGuid.Value.ToString(), "", PullQuantity, BinID, "pull", PullQuantity, objReturn.UDF1, objReturn.UDF2, objReturn.UDF3, objReturn.UDF4, objReturn.UDF5, null, WOGuid.ToString(), null, objReturn.ProjectSpendName, objReturn.PullOrderNumber, PullType: Convert.ToInt64(PullInsertTypeEnum.WebImportPullWithSerial),EditedSellPrice: WOItemSellPrice);
                                                        errMsg = serializer.Deserialize<ReqPullAllJsonResponse>(serializer.Serialize(repsonse.Data));

                                                        if (errMsg.Status.ToLower() == "ok")
                                                        {
                                                            IEnumerable<UDFDTO> InsertUDFDataFromDB = objUDFDAL.GetUDFsByUDFTableNamePlain("PullMaster", SessionHelper.RoomID, SessionHelper.CompanyID);
                                                            UDFController objUDFController = new UDFController();
                                                            if ((!string.IsNullOrWhiteSpace(objPullImport.UDF1)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf1").Any())
                                                            {
                                                                Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf1").FirstOrDefault().ID;
                                                                objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF1, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                            }
                                                            if ((!string.IsNullOrWhiteSpace(objPullImport.UDF2)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf2").Any())
                                                            {
                                                                Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf2").FirstOrDefault().ID;
                                                                objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF2, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                            }
                                                            if ((!string.IsNullOrWhiteSpace(objPullImport.UDF3)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf3").Any())
                                                            {
                                                                Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf3").FirstOrDefault().ID;
                                                                objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF3, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                            }
                                                            if ((!string.IsNullOrWhiteSpace(objPullImport.UDF4)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf4").Any())
                                                            {
                                                                Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf4").FirstOrDefault().ID;
                                                                objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF4, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                            }
                                                            if ((!string.IsNullOrWhiteSpace(objPullImport.UDF5)) && InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf5").Any())
                                                            {
                                                                Int64 UDFID = InsertUDFDataFromDB.Where(u => u.UDFColumnName.ToLower().Trim() == "udf5").FirstOrDefault().ID;
                                                                objUDFController.InsertUDFOptionNew(UDFID, objPullImport.UDF5, "PullMaster", SessionHelper.EnterPriceID, false, false);
                                                            }
                                                        }
                                                        if (errMsg.Status.ToUpper() == "FAIL")
                                                        {
                                                            objReturn.Status = "Fail";
                                                            objReturn.Reason = errMsg.Message;
                                                            IsValid = false;
                                                        }
                                                        else if (!String.IsNullOrWhiteSpace(errMsg.LocationMSG))
                                                        {

                                                            objReturn.Status = "Fail";
                                                            objReturn.Reason = errMsg.LocationMSG;
                                                            IsValid = false;
                                                        }
                                                    }
                                                }
                                                else if (objReturn.ActionType.Trim().ToUpper() == "CREDIT")
                                                {
                                                    JsonResult repsonse = objPullController.UpdatePullData(0, ItemGuid.Value.ToString(), "", PullQuantity, BinID, "credit", PullQuantity, objReturn.UDF1, objReturn.UDF2, objReturn.UDF3, objReturn.UDF4, objReturn.UDF5, null, WOGuid.ToString(), null, objReturn.ProjectSpendName, objReturn.PullOrderNumber, PullType: Convert.ToInt64(PullInsertTypeEnum.WebImportPullWithSerial));
                                                    errMsg = serializer.Deserialize<ReqPullAllJsonResponse>(serializer.Serialize(repsonse.Data));
                                                    if (errMsg.Status.ToUpper() == "FAIL")
                                                    {
                                                        objReturn.Status = "Fail";
                                                        objReturn.Reason = errMsg.Message;
                                                        IsValid = false;
                                                    }
                                                    else if (!String.IsNullOrWhiteSpace(errMsg.LocationMSG))
                                                    {
                                                        objReturn.Status = "Fail";
                                                        objReturn.Reason = errMsg.LocationMSG;
                                                        IsValid = false;
                                                    }
                                                }
                                            }

                                            #endregion

                                            //foreach (PullImportWithLotSerial Return in LstPullImportMain.Where(x => x.ItemTrackingType == 0).ToList())
                                            //{
                                            //    if (Return.ActionType.Equals(objReturn.ActionType)
                                            //        && Return.Asset.Equals(objReturn.Asset)
                                            //        && Return.ItemNumber.Equals(objReturn.ItemNumber)
                                            //        && Return.Location.Equals(objReturn.Location)
                                            //        && Return.ProjectSpendName.Equals(objReturn.ProjectSpendName)
                                            //        && Return.PullOrderNumber.Equals(objReturn.PullOrderNumber)
                                            //        && Return.UDF1.Equals(objReturn.UDF1)
                                            //        && Return.UDF2.Equals(objReturn.UDF2)
                                            //        && Return.UDF3.Equals(objReturn.UDF3)
                                            //        && Return.UDF4.Equals(objReturn.UDF4)
                                            //        && Return.UDF5.Equals(objReturn.UDF5)
                                            //        && Return.WorkOrder.Equals(objReturn.WorkOrder)
                                            //        )
                                            //    {
                                            //        Return.Reason = objReturn.Reason;
                                            //        Return.Status = objReturn.Status;

                                            //        lstreturn.Add(objReturn);
                                            //    }
                                            //}

                                            lstreturn.Add(objReturn);

                                            //lstreturn.AddRange(LstPullImportMain);
                                        }

                                        //if (lstreturn.Count == 0)
                                        //{
                                        //    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        //    status = ResMessage.SaveMessage;
                                        //    ClearCurrentResourceList();
                                        //    if (HasMoreRecords == false)
                                        //        Session["importedData"] = null;
                                        //}
                                        //else
                                        //{
                                        //    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        //    status = ResMessage.SaveMessage;
                                        //    SaveImportDataListSession<PullImportWithLotSerial>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //    //Session["importedData"] = lstreturn;
                                        //}

                                        //if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                        //{
                                        //    allSuccesfulRecords = false;
                                        //}
                                    }

                                    #endregion

                                    #region For Lot and Serial Type Items

                                    if (lstLotSerialImportList != null && lstLotSerialImportList.Count > 0)
                                    {
                                        lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.PullMaster.ToString());

                                        eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                        IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("PullMaster", SessionHelper.RoomID, SessionHelper.CompanyID);

                                        List<ItemPullLotSerialInfo> lstItemPullInfo = new List<ItemPullLotSerialInfo>();

                                        foreach (PullImportWithLotSerial objPullImport in lstLotSerialImportList)
                                        {
                                            CurrentOptionList = new List<UDFOptionsMain>();
                                            errMsg = new ReqPullAllJsonResponse();
                                            objItemMaster = new ItemMasterDTO();
                                            ItemGuid = null;
                                            ItemType = null;
                                            OnHandQuantity = null;
                                            PullQuantity = 0;
                                            BinID = 0;
                                            WOGuid = null;
                                            IsValid = true;
                                            WOItemSellPrice = null;

                                            objReturn = new PullImportWithLotSerial();
                                            objReturn.ItemNumber = objPullImport.ItemNumber;
                                            objReturn.PullQuantity = objPullImport.PullQuantity;
                                            objReturn.Location = objPullImport.Location;
                                            objReturn.UDF1 = objPullImport.UDF1;
                                            objReturn.UDF2 = objPullImport.UDF2;
                                            objReturn.UDF3 = objPullImport.UDF3;
                                            objReturn.UDF4 = objPullImport.UDF4;
                                            objReturn.UDF5 = objPullImport.UDF5;
                                            objReturn.ProjectSpendName = objPullImport.ProjectSpendName.Trim();
                                            objReturn.PullOrderNumber = objPullImport.PullOrderNumber.Trim();
                                            objReturn.WorkOrder = objPullImport.WorkOrder.Trim();
                                            objReturn.Asset = objPullImport.Asset.Trim();
                                            objReturn.ActionType = objPullImport.ActionType.Trim();
                                            objReturn.SerialNumber = objPullImport.SerialNumber;
                                            objReturn.LotNumber = objPullImport.LotNumber;
                                            objReturn.ExpirationDate = objPullImport.ExpirationDate;
                                            objReturn.Status = "success";
                                            objReturn.Reason = "";
                                            if(!string.IsNullOrWhiteSpace(objPullImport.WorkOrder.Trim())
                                            && AllowEditItemSellPriceonWorkOrderPull
                                            && !string.IsNullOrWhiteSpace(objPullImport.ItemSellPrice))
                                            {
                                                objReturn.ItemSellPrice = objPullImport.ItemSellPrice;
                                            }


                                            //if (objItemMaster.SerialNumberTracking && lstLotSerialImportList.GroupBy(x => new { x.ItemNumber, x.SerialNumber }).Any(c => c.Count() > 1))
                                            //{
                                            //    objReturn.Status = "Fail";
                                            //    objReturn.Reason = "Duplicate serial number not allowed for same item.";
                                            //    IsValid = false;
                                            //}

                                            //------------------Validate Action Type------------------
                                            if (objReturn.ActionType.Trim().ToUpper() != "PULL")
                                            {
                                                objReturn.Status = "Fail";
                                                objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.ActionType);

                                                objPullImport.Status = objReturn.Status;
                                                objPullImport.Reason = objReturn.Reason;

                                                IsValid = false;
                                            }

                                            //-------------------PULL-------------------
                                            //

                                            #region PULL

                                            if (IsValid)
                                            {
                                                PullController objPullController = new PullController();

                                                if (objPullImport.ActionType.Trim().ToUpper() == "PULL")
                                                {
                                                    //-------------------Validate Item Number-------------------
                                                    //

                                                    if (String.IsNullOrEmpty(objPullImport.ItemNumber))
                                                    {
                                                        objReturn.Status = "Fail";
                                                        objReturn.Reason = string.Format(ResMessage.MsgRequired, ResItemMaster.ItemNumber);

                                                        objPullImport.Status = objReturn.Status;
                                                        objPullImport.Reason = objReturn.Reason;
                                                        IsValid = false;
                                                    }
                                                    else
                                                    {
                                                        objItemMaster = objDAL.GetItemByItemNumberPlain(objPullImport.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                        if (objItemMaster == null || objItemMaster.GUID == null || objItemMaster.GUID == Guid.Empty)
                                                        {
                                                            objReturn.Status = "Fail";
                                                            objReturn.Reason = ResItemMaster.MsgItemDoesNotExist;

                                                            objPullImport.Status = objReturn.Status;
                                                            objPullImport.Reason = objReturn.Reason;
                                                            IsValid = false;
                                                        }
                                                        else
                                                        {
                                                            ItemGuid = objItemMaster.GUID;
                                                            ItemType = objItemMaster.ItemType;
                                                            OnHandQuantity = objItemMaster.OnHandQuantity;
                                                        }
                                                    }
                                                    // validate projectspend
                                                    if (IsValid && objPullImport.ActionType.Trim().ToUpper() == "PULL")
                                                    {
                                                        bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);
                                                        bool IsProjectSpendInsertAllow = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);

                                                        if (!string.IsNullOrEmpty(objPullImport.ProjectSpendName.Trim()) && (HasOnTheFlyEntryRight == false || IsProjectSpendInsertAllow == false))
                                                        {
                                                            ProjectMasterDTO objProjectDTO = objPrjDAL.GetProjectspendByName(objPullImport.ProjectSpendName.Trim(), SessionHelper.RoomID, SessionHelper.CompanyID, false, false, null);
                                                            if (objProjectDTO == null)
                                                            {
                                                                objReturn.Status = "Fail";
                                                                objReturn.Reason = ResPullMaster.NoProjectspendOntheFlyRight;
                                                                objPullImport.Status = objReturn.Status;
                                                                objPullImport.Reason = objReturn.Reason;
                                                                IsValid = false;
                                                            }
                                                        }
                                                    }

                                                    if (IsValid)
                                                    {
                                                        string errorMsg = string.Empty;
                                                        CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, objPullImport.UDF1, objPullImport.UDF2, objPullImport.UDF3, objPullImport.UDF4, objPullImport.UDF5, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);
                                                        if (!string.IsNullOrWhiteSpace(errorMsg))
                                                        {
                                                            objReturn.Status = "Fail";
                                                            if (!string.IsNullOrEmpty(objReturn.Reason))
                                                                objReturn.Reason += errorMsg;
                                                            else
                                                                objReturn.Reason = errorMsg;

                                                            IsValid = false;
                                                            objPullImport.Status = objReturn.Status;
                                                            objPullImport.Reason = objReturn.Reason;
                                                        }

                                                        //-------------------Validate Quantity-------------------
                                                        //
                                                        if (!Double.TryParse(objReturn.PullQuantity, out PullQuantity))
                                                        {
                                                            objReturn.Status = "Fail";
                                                            objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.PullQuantity);
                                                            objPullImport.Status = objReturn.Status;
                                                            objPullImport.Reason = objReturn.Reason;
                                                            IsValid = false;
                                                        }
                                                        else if (PullQuantity <= 0)
                                                        {
                                                            objReturn.Status = "Fail";
                                                            objReturn.Reason = string.Format(ResCommon.MsgGreaterThanZero, ResPullImport.PullQuantity);
                                                            objPullImport.Status = objReturn.Status;
                                                            objPullImport.Reason = objReturn.Reason;
                                                            IsValid = false;
                                                        }
                                                        double ItemSellPrice = 0;
                                                        if (AllowEditItemSellPriceonWorkOrderPull
                                                            && !string.IsNullOrWhiteSpace(objReturn.WorkOrder)
                                                            && !string.IsNullOrWhiteSpace(objReturn.ItemSellPrice)
                                                            && !Double.TryParse(objReturn.ItemSellPrice, out ItemSellPrice))
                                                        {
                                                            objReturn.Status = "Fail";
                                                            objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.ItemSellPrice);
                                                            IsValid = false;
                                                        }
                                                        //-------------------Validate Location-------------------
                                                        //
                                                        if (objReturn.ActionType.Trim().ToUpper() == "PULL")
                                                        {
                                                            if (String.IsNullOrEmpty(objReturn.Location))
                                                            {
                                                                objReturn.Status = "Fail";
                                                                objReturn.Reason = string.Format(ResMessage.MsgRequired, ResPullImport.Location);
                                                                objPullImport.Status = objReturn.Status;
                                                                objPullImport.Reason = objReturn.Reason;
                                                                IsValid = false;
                                                            }
                                                            else if (ItemGuid != null)
                                                            {
                                                                BinMasterDTO objBinMaster = objBinMasterDAL.GetItemBinByNameOrDefault(ItemGuid.Value, objReturn.Location);
                                                                if (objBinMaster == null || objBinMaster.ID <= 0)
                                                                {
                                                                    objReturn.Status = "Fail";
                                                                    objReturn.Reason = string.Format(ResMessage.MsgDoesNotExist, ResPullImport.Location);
                                                                    objPullImport.Status = objReturn.Status;
                                                                    objPullImport.Reason = objReturn.Reason;
                                                                    IsValid = false;
                                                                }
                                                                else
                                                                {
                                                                    BinID = objBinMaster.ID;
                                                                }
                                                            }

                                                            bool IsAllowConsignedCredit = SessionHelper.GetModulePermission(SessionHelper.ModuleList.AllowConsignedCreditPull, SessionHelper.PermissionType.AllowPull);
                                                            if (!IsAllowConsignedCredit)
                                                            {
                                                                if (objItemMaster.Consignment)
                                                                {
                                                                    objReturn.Status = "Fail";
                                                                    objReturn.Reason = ResPullMaster.NoRightsToPullConsignItem;
                                                                    objPullImport.Status = objReturn.Status;
                                                                    objPullImport.Reason = objReturn.Reason;
                                                                    IsValid = false;
                                                                }
                                                            }
                                                        }
                                                        else if (objReturn.ActionType.Trim().ToUpper() == "CREDIT")
                                                        {
                                                            BinID = objBinMasterDAL.GetOrInsertBinIDByName(ItemGuid.Value, objReturn.Location, SessionHelper.UserID, SessionHelper.RoomID, SessionHelper.CompanyID, false) ?? 0;
                                                        }

                                                        if (objItemMaster.SerialNumberTracking)
                                                        {
                                                            if (Convert.ToDouble(objReturn.PullQuantity) > 1)
                                                            {
                                                                objReturn.Status = "Fail";
                                                                objReturn.Reason = ResPullMaster.SerialItemQtyMustBeOne;
                                                                objPullImport.Status = objReturn.Status;
                                                                objPullImport.Reason = objReturn.Reason;
                                                                IsValid = false;
                                                            }
                                                            if (string.IsNullOrWhiteSpace(objReturn.SerialNumber))
                                                            {
                                                                objReturn.Status = "Fail";
                                                                objReturn.Reason = string.Format(ResMessage.MsgRequired, ResPullImport.SerialNumber); 
                                                                objPullImport.Status = objReturn.Status;
                                                                objPullImport.Reason = objReturn.Reason;
                                                                IsValid = false;
                                                            }
                                                        }

                                                        if (objItemMaster.LotNumberTracking)
                                                        {
                                                            if (string.IsNullOrWhiteSpace(objReturn.LotNumber))
                                                            {
                                                                objReturn.Status = "Fail";
                                                                objReturn.Reason = string.Format(ResMessage.MsgRequired, ResPullImport.LotNumber);
                                                                objPullImport.Status = objReturn.Status;
                                                                objPullImport.Reason = objReturn.Reason;
                                                                IsValid = false;
                                                            }
                                                        }

                                                        if (objItemMaster.DateCodeTracking)
                                                        {
                                                            if (string.IsNullOrWhiteSpace(objReturn.ExpirationDate))
                                                            {
                                                                objReturn.Status = "Fail";
                                                                objReturn.Reason = string.Format(ResMessage.MsgRequired, ResPullImport.ExpirationDate);
                                                                objPullImport.Status = objReturn.Status;
                                                                objPullImport.Reason = objReturn.Reason;
                                                                IsValid = false;
                                                            }
                                                            else
                                                            {
                                                                // check for date as par room date format
                                                                string RoomDateFormat = Convert.ToString(SessionHelper.RoomDateFormat);
                                                                DateTime expiryDate = DateTime.MinValue;
                                                                DateTime.TryParseExact(objReturn.ExpirationDate, RoomDateFormat, ResourceHelper.CurrentCult, DateTimeStyles.None, out expiryDate);
                                                                if (expiryDate == DateTime.MinValue)
                                                                {
                                                                    objReturn.Status = "Fail";
                                                                    objReturn.Reason = string.Format(ResImportMasters.DateShouldBeInFormat, ResPullImport.ExpirationDate, RoomDateFormat);
                                                                    objPullImport.Status = objReturn.Status;
                                                                    objPullImport.Reason = objReturn.Reason;
                                                                    IsValid = false;
                                                                }
                                                            }
                                                        }

                                                        //----------------Work Order----------------
                                                        //
                                                        if (IsValid)
                                                        {
                                                            #region WorkOrder

                                                            if (!String.IsNullOrEmpty(objPullImport.WorkOrder))
                                                            {
                                                                WorkOrderDAL objWorkOrderDAL = new WorkOrderDAL(SessionHelper.EnterPriseDBName);
                                                                CommonDAL objCommonDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
                                                                WorkOrderDTO objWorkOrderDTO = new WorkOrderDTO();
                                                                objWorkOrderDTO.ID = 0;
                                                                objWorkOrderDTO.CreatedBy = SessionHelper.UserID;
                                                                objWorkOrderDTO.LastUpdatedBy = SessionHelper.UserID;
                                                                objWorkOrderDTO.Room = SessionHelper.RoomID;
                                                                objWorkOrderDTO.CompanyID = SessionHelper.CompanyID;
                                                                objWorkOrderDTO.WOType = "WorkOrder";
                                                                objWorkOrderDTO.WOStatus = "Open";
                                                                objWorkOrderDTO.WOName = objPullImport.WorkOrder.Trim();
                                                                objWorkOrderDTO.ReleaseNumber = objWorkOrderDAL.GenerateAndGetReleaseNumber(objPullImport.WorkOrder, 0, SessionHelper.RoomID, SessionHelper.CompanyID);

                                                                WorkOrderDTO objDTO = objWorkOrderDAL.GetWorkOrdersByNamePlainSingle(objWorkOrderDTO.WOName, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                                if (objDTO != null && objDTO.GUID != null && objDTO.GUID != Guid.Empty && objDTO.WOStatus.Trim().ToUpper() == "OPEN")
                                                                {
                                                                    WOGuid = objDTO.GUID;
                                                                }
                                                                else
                                                                {
                                                                    objWorkOrderDTO.GUID = Guid.NewGuid();
                                                                    objWorkOrderDTO.WhatWhereAction = "Work Order";
                                                                    WOGuid = objWorkOrderDAL.Insert(objWorkOrderDTO);
                                                                }

                                                                if (WOGuid != null && !string.IsNullOrEmpty(objPullImport.Asset))
                                                                {
                                                                    AssetMasterDAL assetMaster = new AssetMasterDAL(SessionHelper.EnterPriseDBName);
                                                                    AssetMasterDTO asset = new AssetMasterDTO();
                                                                    asset = assetMaster.GetAssetByName(objPullImport.Asset, SessionHelper.RoomID, SessionHelper.CompanyID);

                                                                    if (asset != null && asset.GUID != null && asset.GUID != Guid.Empty)
                                                                    {
                                                                        assetGuid = asset.GUID;
                                                                    }
                                                                    else
                                                                    {
                                                                        asset = new AssetMasterDTO();
                                                                        asset.ID = 0;
                                                                        asset.CreatedBy = SessionHelper.UserID;
                                                                        asset.LastUpdatedBy = SessionHelper.UserID;
                                                                        asset.Room = SessionHelper.RoomID;
                                                                        asset.CompanyID = SessionHelper.CompanyID;
                                                                        asset.AddedFrom = "Web";
                                                                        asset.EditedFrom = "Web";
                                                                        asset.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                                        asset.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                                        asset.AssetName = objPullImport.Asset.Trim();
                                                                        asset.GUID = Guid.NewGuid();
                                                                        asset.MaintenanceType = 0;
                                                                        var assetId = assetMaster.Insert(asset);
                                                                        if (assetId > 0)
                                                                        {
                                                                            assetGuid = asset.GUID;
                                                                        }
                                                                    }
                                                                    if (assetGuid != null && assetGuid != Guid.Empty)
                                                                    {
                                                                        objWorkOrderDAL.AssignAssetToWorkorder(WOGuid.Value, assetGuid.Value, SessionHelper.UserID, SessionHelper.CompanyID, SessionHelper.RoomID);
                                                                    }
                                                                }
                                                            }

                                                            #endregion
                                                        }

                                                        if (IsValid)
                                                        {
                                                            ItemPullLotSerialInfo objItemPullInfo = new ItemPullLotSerialInfo();
                                                            objItemPullInfo.BinID = BinID;
                                                            objItemPullInfo.BinNumber = objPullImport.Location;
                                                            objItemPullInfo.ItemGUID = ItemGuid.Value;
                                                            objItemPullInfo.ItemID = objItemMaster.ID;
                                                            objItemPullInfo.ItemNumber = objPullImport.ItemNumber;
                                                            objItemPullInfo.ProjectSpendName = objPullImport.ProjectSpendName;
                                                            objItemPullInfo.PullOrderNumber = objPullImport.PullOrderNumber;
                                                            objItemPullInfo.PullQuantity = Convert.ToDouble(objPullImport.PullQuantity);
                                                            objItemPullInfo.UDF1 = objPullImport.UDF1;
                                                            objItemPullInfo.UDF2 = objPullImport.UDF2;
                                                            objItemPullInfo.UDF3 = objPullImport.UDF3;
                                                            objItemPullInfo.UDF4 = objPullImport.UDF4;
                                                            objItemPullInfo.UDF5 = objPullImport.UDF5;
                                                            objItemPullInfo.WorkOrderDetailGUID = WOGuid;
                                                            objItemPullInfo.DateCodeTracking = objItemMaster.DateCodeTracking;
                                                            objItemPullInfo.LotNumberTracking = objItemMaster.LotNumberTracking;
                                                            objItemPullInfo.SerialNumberTracking = objItemMaster.SerialNumberTracking;

                                                            objItemPullInfo.SerialNumber = objPullImport.SerialNumber;
                                                            objItemPullInfo.LotNumber = objPullImport.LotNumber;
                                                            objItemPullInfo.LotOrSerailNumber = (!string.IsNullOrEmpty(objPullImport.SerialNumber) ? objPullImport.SerialNumber : objPullImport.LotNumber);
                                                            if (!string.IsNullOrWhiteSpace(objPullImport.WorkOrder.Trim())
                                                            && AllowEditItemSellPriceonWorkOrderPull
                                                            && !string.IsNullOrWhiteSpace(objPullImport.ItemSellPrice))
                                                            {
                                                                objItemPullInfo.PullCost = Convert.ToDouble(objPullImport.ItemSellPrice);
                                                            }
                                                            if (!string.IsNullOrEmpty(objPullImport.ExpirationDate))
                                                            {
                                                                objItemPullInfo.strExpirationDate = objPullImport.ExpirationDate;
                                                                objItemPullInfo.ExpirationDate = Convert.ToDateTime(objPullImport.ExpirationDate);
                                                            }
                                                            if (objItemMaster.DateCodeTracking && !string.IsNullOrWhiteSpace(objPullImport.ExpirationDate))
                                                            {
                                                                objItemPullInfo.strExpirationDate = objPullImport.ExpirationDate;
                                                            }
                                                            if (objItemMaster.SerialNumberTracking && objItemMaster.DateCodeTracking && !string.IsNullOrWhiteSpace(objPullImport.ExpirationDate))
                                                            {
                                                                objItemPullInfo.SerialLotExpirationcombin = objPullImport.SerialNumber + "_" + objPullImport.ExpirationDate;
                                                            }
                                                            else if (objItemMaster.LotNumberTracking && objItemMaster.DateCodeTracking && !string.IsNullOrWhiteSpace(objPullImport.ExpirationDate))
                                                            {
                                                                objItemPullInfo.SerialLotExpirationcombin = objPullImport.LotNumber + "_" + objPullImport.ExpirationDate;
                                                            }
                                                            else
                                                            {
                                                                if (!string.IsNullOrWhiteSpace(objPullImport.ExpirationDate))
                                                                {
                                                                    objItemPullInfo.SerialLotExpirationcombin = objPullImport.ExpirationDate;
                                                                }
                                                            }

                                                            lstItemPullInfo.Add(objItemPullInfo);
                                                        }
                                                    }
                                                }
                                                else if (objPullImport.ActionType.Trim().ToUpper() == "CREDIT")
                                                {
                                                    JsonResult repsonse = objPullController.UpdatePullData(0, ItemGuid.Value.ToString(), "", PullQuantity, BinID, "credit", PullQuantity, objPullImport.UDF1, objPullImport.UDF2, objPullImport.UDF3, objPullImport.UDF4, objPullImport.UDF5, null, WOGuid.ToString(), null, objPullImport.ProjectSpendName, objPullImport.PullOrderNumber,PullType : Convert.ToInt64(PullInsertTypeEnum.WebImportPullWithSerial));
                                                    errMsg = serializer.Deserialize<ReqPullAllJsonResponse>(serializer.Serialize(repsonse.Data));
                                                    if (errMsg.Status.ToUpper() == "FAIL")
                                                    {
                                                        objPullImport.Status = "Fail";
                                                        objPullImport.Reason = errMsg.Message;
                                                        IsValid = false;
                                                    }
                                                    else if (!String.IsNullOrWhiteSpace(errMsg.LocationMSG))
                                                    {
                                                        objPullImport.Status = "Fail";
                                                        objPullImport.Reason = errMsg.LocationMSG;
                                                        IsValid = false;
                                                    }
                                                }

                                                #endregion
                                            }

                                            lstreturn.Add(objReturn);
                                        }

                                        if (lstItemPullInfo != null && lstItemPullInfo.Count > 0)
                                        {
                                            PullController objPullController = new PullController();
                                            object repsonse = objPullController.PullSerialsAndLotsNewForImport(lstItemPullInfo).Data;

                                            List<ItemPullLotSerialInfo> lstItemPullInfoError = new List<ItemPullLotSerialInfo>();
                                            string ErrorMessage = "";
                                            lstItemPullInfoError = (List<ItemPullLotSerialInfo>)repsonse;
                                            for (int i = 0; i < lstItemPullInfoError.Count; i++)
                                            {
                                                ErrorMessage = "";
                                                for (int j = 0; j < lstItemPullInfoError[i].ErrorList.Count; j++)
                                                {
                                                    errMsg.Status = "Fail";
                                                    string[] strErrorMessage;
                                                    strErrorMessage = lstItemPullInfoError[i].ErrorList[j].ErrorMessage.Split(':');

                                                    if (ErrorMessage == "")
                                                    {
                                                        if (strErrorMessage.Length > 0)
                                                            ErrorMessage = strErrorMessage[1];
                                                    }
                                                    else
                                                    {
                                                        if (strErrorMessage.Length > 0)
                                                            ErrorMessage = ErrorMessage + ";" + strErrorMessage[1];
                                                    }

                                                    if (!string.IsNullOrWhiteSpace(strErrorMessage[0]))
                                                    {
                                                        foreach (PullImportWithLotSerial rtn in lstreturn.Where(x => x.ItemNumber.Equals(lstItemPullInfoError[i].ItemNumber)
                                                                   && x.Location.Equals(lstItemPullInfoError[i].BinNumber)
                                                                   && (x.ProjectSpendName ?? string.Empty).Equals(lstItemPullInfoError[i].ProjectSpendName ?? string.Empty)
                                                                   && (x.PullOrderNumber ?? string.Empty).Equals(lstItemPullInfoError[i].PullOrderNumber ?? string.Empty)
                                                                   && (x.UDF1 ?? string.Empty).Equals(lstItemPullInfoError[i].UDF1 ?? string.Empty)
                                                                   && (x.UDF2 ?? string.Empty).Equals(lstItemPullInfoError[i].UDF2 ?? string.Empty)
                                                                   && (x.UDF3 ?? string.Empty).Equals(lstItemPullInfoError[i].UDF3 ?? string.Empty)
                                                                   && (x.UDF4 ?? string.Empty).Equals(lstItemPullInfoError[i].UDF4 ?? string.Empty)
                                                                   && (x.UDF5 ?? string.Empty).Equals(lstItemPullInfoError[i].UDF5 ?? string.Empty)))
                                                        {
                                                            List<ItemLocationLotSerialDTO> lstItemLocationDetailsDTO = new List<ItemLocationLotSerialDTO>();
                                                            if (!string.IsNullOrWhiteSpace(rtn.SerialNumber) && !string.IsNullOrWhiteSpace(rtn.ExpirationDate))
                                                            {
                                                                lstItemLocationDetailsDTO = lstItemPullInfoError[i].lstItemPullDetails.Where(x =>
                                                                                                                (x.SerialNumber ?? string.Empty).Equals(rtn.SerialNumber ?? string.Empty)
                                                                                                                && (x.strExpirationDate ?? null).Equals(rtn.ExpirationDate ?? null)
                                                                                                                && !string.IsNullOrWhiteSpace(x.ValidationMessage)).ToList();
                                                            }
                                                            else if (!string.IsNullOrWhiteSpace(rtn.LotNumber) && !string.IsNullOrWhiteSpace(rtn.ExpirationDate))
                                                            {
                                                                lstItemLocationDetailsDTO = lstItemPullInfoError[i].lstItemPullDetails.Where(x =>
                                                                                                                (x.LotNumber ?? string.Empty).Equals(rtn.LotNumber ?? string.Empty)
                                                                                                                && (x.strExpirationDate ?? null).Equals(rtn.ExpirationDate ?? null)
                                                                                                                && !string.IsNullOrWhiteSpace(x.ValidationMessage)).ToList();
                                                            }
                                                            else if (!string.IsNullOrWhiteSpace(rtn.SerialNumber))
                                                            {
                                                                lstItemLocationDetailsDTO = lstItemPullInfoError[i].lstItemPullDetails.Where(x =>
                                                                                                                (x.SerialNumber ?? string.Empty).Equals(rtn.SerialNumber ?? string.Empty)
                                                                                                                && !string.IsNullOrWhiteSpace(x.ValidationMessage)).ToList();
                                                            }
                                                            else if (!string.IsNullOrWhiteSpace(rtn.LotNumber))
                                                            {
                                                                lstItemLocationDetailsDTO = lstItemPullInfoError[i].lstItemPullDetails.Where(x =>
                                                                                                                (x.LotNumber ?? string.Empty).Equals(rtn.LotNumber ?? string.Empty)
                                                                                                                && !string.IsNullOrWhiteSpace(x.ValidationMessage)).ToList();
                                                            }
                                                            else if (!string.IsNullOrWhiteSpace(rtn.ExpirationDate))
                                                            {
                                                                lstItemLocationDetailsDTO = lstItemPullInfoError[i].lstItemPullDetails.Where(x =>
                                                                                                                (x.strExpirationDate ?? null).Equals(rtn.ExpirationDate ?? null)
                                                                                                                && !string.IsNullOrWhiteSpace(x.ValidationMessage)).ToList();
                                                            }
                                                            if (lstItemLocationDetailsDTO.Count > 0)
                                                            {
                                                                rtn.Status = "Fail";
                                                                rtn.Reason = ErrorMessage;
                                                            }
                                                            else if (lstItemPullInfoError[i].ErrorList[j].ErrorCode == "1"
                                                                || lstItemPullInfoError[i].ErrorList[j].ErrorCode == "2"
                                                                || lstItemPullInfoError[i].ErrorList[j].ErrorCode == "3"
                                                                || lstItemPullInfoError[i].ErrorList[j].ErrorCode == "7")
                                                            {
                                                                rtn.Status = "Fail";
                                                                rtn.Reason = ErrorMessage;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (!string.IsNullOrWhiteSpace(ErrorMessage))
                                            {
                                                errMsg.Message = ErrorMessage;
                                                errMsg.Status = "Fail";
                                            }
                                            else
                                            {
                                                errMsg.Message = "";
                                                errMsg.Status = "ok";
                                            }
                                        }

                                        //if (lstreturn.Count == 0)
                                        //{
                                        //    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        //    status = ResMessage.SaveMessage;
                                        //    ClearCurrentResourceList();
                                        //    if (HasMoreRecords == false)
                                        //        Session["importedData"] = null;
                                        //}
                                        //else
                                        //{
                                        //    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        //    status = ResMessage.SaveMessage;
                                        //    SaveImportDataListSession<PullImportWithLotSerial>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //}

                                        //if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                        //{
                                        //    allSuccesfulRecords = false;
                                        //}
                                    }

                                    #endregion

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<PullImportWithLotSerial>(HasMoreRecords, true, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }

                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }

                                    
                                    if(lstreturn != null && lstreturn.Count > 0)
                                    {
                                        List<PullImportWithLotSerial> lstPullSerialLot = new List<PullImportWithLotSerial>();
                                        lstPullSerialLot = lstreturn.Where(x => x.Status.ToLower() == "success").ToList();
                                        //if(lstPullSerialLot != null && lstPullSerialLot.Count > 0)
                                        //{
                                        //    QuickBookItemDAL objQBItemDAL = new QuickBookItemDAL(SessionHelper.EnterPriseDBName);
                                        //    List<string> lstItemNumber = lstPullSerialLot.Select(t => t.ItemNumber).Distinct().ToList();
                                        //    foreach (string itemNumber in lstItemNumber)
                                        //    {
                                        //        ItemMasterDTO objItemDTO = objDAL.GetItemByItemNumberPlain(itemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);
                                        //        if(objItemDTO != null)
                                        //            objQBItemDAL.InsertQuickBookItem(objItemDTO.GUID, SessionHelper.EnterPriceID, SessionHelper.CompanyID, SessionHelper.RoomID, "Update", false, SessionHelper.UserID, "Web", null, "Pull");
                                        //    }
                                        //}
                                    }
                                }
                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ItemLocationChange:

                            importBAL.SaveItemLocationChange(lst, CurrentOptionList,
                                CurrentLocationChangeList, ImportMastersDTO.TableName.ItemLocationChange,
                                para, HasMoreRecords, IsFirstCall, ref message, ref status, ref allSuccesfulRecords);

                            #region Item Location Change
                            //else if (ImportMastersDTO.TableName.ItemLocationChange.ToString() == TableName)
                            //{
                            //    List<ItemMasterBinDTO> objItemMasterBinDTOList = new List<ItemMasterBinDTO>();
                            //    List<ItemLocationChangeImport> CurrentBlankItemLocationChangeImportList = new List<ItemLocationChangeImport>();
                            //    ItemLocationChangeImport[] LstItemLocationChangeMain = s.Deserialize<ItemLocationChangeImport[]>(para);
                            //    if (LstItemLocationChangeMain != null && LstItemLocationChangeMain.Length > 0)
                            //    {
                            //        CurrentBlankItemLocationChangeImportList = new List<ItemLocationChangeImport>();
                            //        CurrentLocationChangeList = new List<ItemLocationChangeImport>();
                            //        //bool IsEmailPOInBody = false; bool IsEmailPOInPDF = false; bool IsEmailPOInCSV = false; bool IsEmailPOInX12 = false;
                            //        foreach (ItemLocationChangeImport item in LstItemLocationChangeMain)
                            //        {
                            //            ItemLocationChangeImport objDTO = new ItemLocationChangeImport();

                            //            Guid? ItemGUID = GetGUID(ImportMastersDTO.TableName.ItemMaster, item.ItemNumber); //(ImportMastersDTO.TableName.SupplierMaster, item.SupplierName);
                            //            if (ItemGUID != null && ItemGUID != Guid.Empty)
                            //            {
                            //                BinMasterDAL objItemLocationLevelQuanityDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);

                            //                BinMasterDTO objBinMasterDTO = objItemLocationLevelQuanityDAL.GetItemLocationsWithBinName((ItemGUID ?? Guid.Empty), SessionHelper.RoomID, SessionHelper.CompanyID, item.OldLocationName);
                            //                //BinMasterDTO objBinMasterDTO = null;
                            //                //if (lstBinReplanish.Where(c => c.BinNumber == item.OldLocationName).Any())
                            //                //{
                            //                //    objBinMasterDTO = lstBinReplanish.Where(c => c.BinNumber == item.OldLocationName).FirstOrDefault();
                            //                //}
                            //                if (objBinMasterDTO == null)
                            //                {
                            //                    objDTO = item;
                            //                    //if (ItemGUID.HasValue && ItemGUID == Guid.Empty)
                            //                    {
                            //                        objDTO.Status = "Fail";
                            //                        objDTO.Reason = item.OldLocationName + " bin does not exist for item#: " + item.ItemNumber + ".";
                            //                    }
                            //                    CurrentBlankItemLocationChangeImportList.Add(objDTO);
                            //                }
                            //                else
                            //                {
                            //                    ItemMasterBinDAL objItemMasterBinDAL = new ItemMasterBinDAL(SessionHelper.EnterPriseDBName);
                            //                    // ItemMasterBinDTO objItemMasterBinDTO = objItemMasterBinDAL.GetBinItemUsingGuid((objBinMasterDTO.GUID), SessionHelper.RoomID, SessionHelper.CompanyID, false, false).ToList().FirstOrDefault();
                            //                    bool Isdefault = objItemMasterBinDAL.GetBinItemIsDefault((objBinMasterDTO.GUID), SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                            //                    objDTO.ID = item.ID;
                            //                    objDTO.ItemNumber = item.ItemNumber;
                            //                    objDTO.OldLocationName = item.OldLocationName;
                            //                    objDTO.NewLocationName = (item.NewLocationName);
                            //                    objDTO.ItemGuid = ItemGUID;
                            //                    objDTO.IsDefault = Isdefault;
                            //                    objDTO.Room = SessionHelper.RoomID;
                            //                    objDTO.CompanyID = SessionHelper.CompanyID;
                            //                    objDTO.LastUpdatedBy = SessionHelper.UserID;
                            //                    objDTO.OldLocation = objBinMasterDTO.ID;
                            //                    if ((!string.IsNullOrWhiteSpace(item.ItemNumber)) && (!string.IsNullOrWhiteSpace(item.OldLocationName)) && (!string.IsNullOrWhiteSpace(item.NewLocationName)))
                            //                    {
                            //                        ItemLocationChangeImport itemval = null;

                            //                        if (item.ItemNumber != null && (!string.IsNullOrWhiteSpace(item.ItemNumber)) && item.OldLocationName != null && (!string.IsNullOrWhiteSpace(item.OldLocationName)))
                            //                            itemval = CurrentLocationChangeList.FirstOrDefault(x => x.ItemNumber == item.ItemNumber && x.OldLocationName == item.OldLocationName);

                            //                        if (itemval != null)
                            //                            CurrentLocationChangeList.Remove(itemval);
                            //                        CurrentLocationChangeList.Add(objDTO);

                            //                        //CheckUDF(lst, CurrentOptionList, objDTO.UDF6 == null ? "" : objDTO.UDF6, CommonUtility.ImportSupplierColumn.UDF6.ToString());

                            //                    }
                            //                    else
                            //                        CurrentBlankItemLocationChangeImportList.Add(objDTO);
                            //                }
                            //            }
                            //            else
                            //            {
                            //                objDTO = item;
                            //                if (ItemGUID.HasValue && ItemGUID == Guid.Empty)
                            //                {
                            //                    objDTO.Status = "Fail";
                            //                    objDTO.Reason = item.ItemNumber + " item does not exist.";
                            //                }
                            //                CurrentBlankItemLocationChangeImportList.Add(objDTO);
                            //            }


                            //        }

                            //        List<ItemLocationChangeImport> lstreturn = new List<ItemLocationChangeImport>();
                            //        if (CurrentLocationChangeList.Count > 0)
                            //        {
                            //            foreach (ItemLocationChangeImport i in CurrentLocationChangeList)
                            //            {

                            //                string Message = string.Empty;
                            //                if (i.NewLocationName != i.OldLocationName)
                            //                {
                            //                    ItemMasterBinDAL objItemMasterBinDAL = new ItemMasterBinDAL(SessionHelper.EnterPriseDBName);
                            //                    Message = objItemMasterBinDAL.SaveItemMasterBin(i.ItemGuid ?? Guid.Empty, i.OldLocation ?? 0, i.NewLocationName, SessionHelper.UserID, SessionHelper.RoomID, SessionHelper.CompanyID, i.IsDefault ?? false);
                            //                    if (Message != "Success")
                            //                    {
                            //                        i.Status = "Fail";
                            //                        i.Reason = Message;
                            //                        lstreturn.Add(i);
                            //                    }
                            //                    else
                            //                    {
                            //                        i.Status = "success";
                            //                        i.Reason = "";
                            //                    }
                            //                }

                            //            }

                            //        }
                            //        //lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.SupplierMaster.ToString(), CurrentSupplierList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, CurrentOptionList);
                            //        //lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.ItemLocationChange.ToString(), CurrentLocationChangeList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, CurrentOptionList);
                            //        if (CurrentBlankItemLocationChangeImportList.Count > 0)
                            //        {
                            //            foreach (ItemLocationChangeImport item in CurrentBlankItemLocationChangeImportList)
                            //            {
                            //                lstreturn.Add(item);
                            //            }
                            //        }

                            //        if (lstreturn.Count == 0)
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            ClearCurrentResourceList();
                            //            if (HasMoreRecords == false)
                            //                Session["importedData"] = null;
                            //        }
                            //        else
                            //        {
                            //            message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                            //            status = ResMessage.SaveMessage;
                            //            SaveImportDataListSession<ItemLocationChangeImport>(HasMoreRecords, IsFirstCall, lstreturn);
                            //            //Session["importedData"] = lstreturn;
                            //        }
                            //        if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                            //        {
                            //            allSuccesfulRecords = false;
                            //        }

                            //    }

                            //}
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.PullMasterWithSameQty:
                            #region PullImportWithSameQty
                            //else if (ImportMastersDTO.TableName.PullMasterWithSameQty.ToString() == TableName)
                            {
                                List<PullMaster> CurrentBlankPIList = new List<PullMaster>();
                                PullImportWithSameQty[] LstPullImportMain = s.Deserialize<PullImportWithSameQty[]>(para);
                                List<PullImportWithSameQty> lstreturn = new List<PullImportWithSameQty>();
                                PullImportWithSameQty objReturn;

                                ItemMasterDAL objDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                                BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                                JavaScriptSerializer serializer = new JavaScriptSerializer();
                                ReqPullAllJsonResponse errMsg = null;
                                ProjectMasterDAL objPrjDAL = new ProjectMasterDAL(SessionHelper.EnterPriseDBName);

                                ItemMasterDTO objItemMaster = null;
                                Guid? ItemGuid = null;
                                int? ItemType = null;
                                double? OnHandQuantity = null;
                                Int64 BinID = 0;
                                Guid? WOGuid = null;
                                Guid? assetGuid = null;
                                bool IsValid = true;
                                DataTable DTPullData = new DataTable();
                                List<PullImportWithSameQty> lstreturnFailed = new List<PullImportWithSameQty>();

                                List<PullImportWithSameQty> objPullImportWithSameQtyList = new List<PullImportWithSameQty>();
                                if (LstPullImportMain != null && LstPullImportMain.Length > 0)
                                {
                                    LstPullImportMain = LstPullImportMain.OrderBy(x => x.CreatedDate).ToArray();

                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.PullMaster.ToString(), UDFControlTypes.Textbox.ToString());
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.PullMaster.ToString());

                                    eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                    IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("PullMaster", SessionHelper.RoomID, SessionHelper.CompanyID);

                                    //LstPullImportMain = LstPullImportMain.

                                    List<WorkOrderDTO> lstWorkorderGuidandName = new List<WorkOrderDTO>();

                                    foreach (PullImportWithSameQty objPullImport in LstPullImportMain)
                                    {
                                        CurrentOptionList = new List<UDFOptionsMain>();
                                        errMsg = new ReqPullAllJsonResponse();
                                        objItemMaster = new ItemMasterDTO();
                                        ItemGuid = null;
                                        ItemType = null;
                                        OnHandQuantity = null;
                                        BinID = 0;
                                        WOGuid = null;
                                        IsValid = true;

                                        objReturn = new PullImportWithSameQty();
                                        objReturn.ItemNumber = objPullImport.ItemNumber;
                                        objReturn.PullQuantity = objPullImport.PullQuantity;
                                        objReturn.BinNumber = objPullImport.BinNumber;
                                        objReturn.UDF1 = objPullImport.UDF1;
                                        objReturn.UDF2 = objPullImport.UDF2;
                                        objReturn.UDF3 = objPullImport.UDF3;
                                        objReturn.UDF4 = objPullImport.UDF4;
                                        objReturn.UDF5 = objPullImport.UDF5;
                                        objReturn.ProjectSpendName = objPullImport.ProjectSpendName;
                                        objReturn.PullOrderNumber = objPullImport.PullOrderNumber;
                                        objReturn.WorkOrder = objPullImport.WorkOrder;
                                        objReturn.Asset = objPullImport.Asset;
                                        objReturn.ActionType = objPullImport.ActionType;
                                        objReturn.Created = objPullImport.Created;

                                        objReturn.ItemCost = objPullImport.ItemCost;
                                        objReturn.CostUOMValue = objPullImport.CostUOMValue;
                                        objReturn.Status = "success";
                                        objReturn.Reason = "";



                                        string errorMsg = string.Empty;
                                        CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, objPullImport.UDF1, objPullImport.UDF2, objPullImport.UDF3, objPullImport.UDF4, objPullImport.UDF5, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);
                                        if (!string.IsNullOrWhiteSpace(errorMsg))
                                        {
                                            objReturn.Status = "Fail";
                                            if (!string.IsNullOrEmpty(objReturn.Reason))
                                                objReturn.Reason += errorMsg;
                                            else
                                                objReturn.Reason = errorMsg;

                                            IsValid = false;
                                            objPullImport.Status = objReturn.Status;
                                            objPullImport.Reason = objReturn.Reason;
                                        }

                                        //------------------Validate Action Type------------------
                                        //
                                        if (objReturn.ActionType.Trim().ToUpper() != "PULL" && objReturn.ActionType.Trim().ToUpper() != "CREDIT")
                                        {
                                            objReturn.Status = "Fail";
                                            objReturn.Reason = string.Format(ResCommon.MsgInvalid, ResPullImport.ActionType);
                                            IsValid = false;
                                        }

                                        //-------------------Validate Item Number-------------------
                                        //
                                        if (IsValid)
                                        {
                                            if (String.IsNullOrEmpty(objReturn.ItemNumber))
                                            {
                                                objReturn.Status = "Fail";
                                                objReturn.Reason = string.Format(ResMessage.MsgRequired, ResItemMaster.ItemNumber);
                                                IsValid = false;
                                            }
                                            else
                                            {
                                                objItemMaster = objDAL.GetItemByItemNumberPlain(objReturn.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                if (objItemMaster == null || objItemMaster.GUID == null || objItemMaster.GUID == Guid.Empty)
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = ResItemMaster.MsgItemDoesNotExist;
                                                    IsValid = false;
                                                }
                                                else if (objItemMaster.SerialNumberTracking == true || objItemMaster.LotNumberTracking)
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = ResPullMaster.CannotPullSerialLotItem;
                                                    IsValid = false;
                                                }
                                                else
                                                {
                                                    ItemGuid = objItemMaster.GUID;
                                                    ItemType = objItemMaster.ItemType;
                                                    OnHandQuantity = objItemMaster.OnHandQuantity;
                                                }
                                            }
                                        }

                                        //-------------------Validate Quantity-------------------
                                        //
                                        if (IsValid)
                                        {
                                            //if (!Double.TryParse(objReturn.PullQuantity, out PullQuantity))
                                            //{
                                            //    objReturn.Status = "Fail";
                                            //    objReturn.Reason = "Invalid quantity.";
                                            //    IsValid = false;
                                            //}
                                            //else
                                            if (objReturn.PullQuantity <= 0)
                                            {
                                                objReturn.Status = "Fail";
                                                objReturn.Reason = string.Format(ResCommon.MsgGreaterThanZero, ResPullImport.PullQuantity);
                                                IsValid = false;
                                            }
                                        }
                                        //-------------------Validate Projectspend-------------------
                                        if (IsValid && (objPullImport.ActionType.Trim().ToUpper() == "PULL" || objPullImport.ActionType.Trim().ToUpper() != "CREDIT"))
                                        {
                                            bool HasOnTheFlyEntryRight = eTurnsWeb.Helper.SessionHelper.GetAdminPermission(eTurnsWeb.Helper.SessionHelper.ModuleList.OnTheFlyEntry);
                                            bool IsProjectSpendInsertAllow = eTurnsWeb.Helper.SessionHelper.GetModulePermission(eTurnsWeb.Helper.SessionHelper.ModuleList.ProjectMaster, eTurnsWeb.Helper.SessionHelper.PermissionType.Insert);

                                            if (!string.IsNullOrEmpty(objPullImport.ProjectSpendName.Trim()) && (HasOnTheFlyEntryRight == false || IsProjectSpendInsertAllow == false))
                                            {
                                                ProjectMasterDTO objProjectDTO = objPrjDAL.GetProjectspendByName(objPullImport.ProjectSpendName.Trim(), SessionHelper.RoomID, SessionHelper.CompanyID, false, false, null);
                                                if (objProjectDTO == null)
                                                {
                                                    objReturn.Status = "Fail";
                                                    objReturn.Reason = ResPullMaster.NoProjectspendOntheFlyRight;
                                                    objPullImport.Status = objReturn.Status;
                                                    objPullImport.Reason = objReturn.Reason;
                                                    IsValid = false;
                                                }
                                            }
                                        }
                                        //-------------------Validate Location-------------------
                                        //
                                        if (IsValid)
                                        {
                                            if (objReturn.ActionType.Trim().ToUpper() == "PULL")
                                            {
                                                //if (String.IsNullOrEmpty(objReturn.BinNumber))
                                                //{
                                                //    objReturn.Status = "Fail";
                                                //    objReturn.Reason = "BinNumber is required.";
                                                //    IsValid = false;
                                                //}
                                                //else
                                                if (ItemType.GetValueOrDefault(1) != 4 && ItemGuid != null && (!String.IsNullOrWhiteSpace(objReturn.BinNumber)))
                                                {
                                                    BinMasterDTO objBinMaster = objBinMasterDAL.GetOrInsertItemBinFromPullHistoryImport(ItemGuid.Value, objReturn.BinNumber, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, false, objReturn.CreatedDate.GetValueOrDefault(DateTimeUtility.DateTimeNow));
                                                    if (objBinMaster != null && objBinMaster.ID > 0)
                                                    {
                                                        BinID = objBinMaster.ID;
                                                    }
                                                    //BinMasterDTO objBinMaster = objBinMasterDAL.GetItemBinByNameOrDefault(ItemGuid.Value, objReturn.BinNumber);
                                                    //if (objBinMaster == null || objBinMaster.ID <= 0)
                                                    //{
                                                    //    objReturn.Status = "Fail";
                                                    //    objReturn.Reason = "BinNumber does not exists.";
                                                    //    IsValid = false;
                                                    //}
                                                    //else
                                                    //{
                                                    //    BinID = objBinMaster.ID;
                                                    //}
                                                }
                                            }
                                            else if (objReturn.ActionType.Trim().ToUpper() == "CREDIT")
                                            {
                                                BinMasterDTO objBinMaster = objBinMasterDAL.GetOrInsertItemBinFromPullHistoryImport(ItemGuid.Value, objReturn.BinNumber, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, false, objReturn.CreatedDate.GetValueOrDefault(DateTimeUtility.DateTimeNow));
                                                if (objBinMaster != null && objBinMaster.ID > 0)
                                                {
                                                    BinID = objBinMaster.ID;
                                                }
                                                //BinID = objBinMasterDAL.GetOrInsertBinIDByName(ItemGuid.Value, objReturn.BinNumber, SessionHelper.UserID, SessionHelper.RoomID, SessionHelper.CompanyID, false) ?? 0;
                                            }
                                        }


                                        if (IsValid)
                                        {
                                            if (!String.IsNullOrEmpty(objReturn.WorkOrder))
                                            {
                                                WorkOrderDAL objWorkOrderDAL = new WorkOrderDAL(SessionHelper.EnterPriseDBName);
                                                CommonDAL objCommonDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
                                                WorkOrderDTO objWorkOrderDTO = new WorkOrderDTO();
                                                objWorkOrderDTO.ID = 0;
                                                objWorkOrderDTO.CreatedBy = SessionHelper.UserID;
                                                objWorkOrderDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objWorkOrderDTO.Room = SessionHelper.RoomID;
                                                objWorkOrderDTO.CompanyID = SessionHelper.CompanyID;
                                                objWorkOrderDTO.WOType = "WorkOrder";
                                                objWorkOrderDTO.WOStatus = "Open";
                                                objWorkOrderDTO.WOName = objReturn.WorkOrder.Trim();
                                                objWorkOrderDTO.ReleaseNumber = objWorkOrderDAL.GenerateAndGetReleaseNumber(objReturn.WorkOrder, 0, SessionHelper.RoomID, SessionHelper.CompanyID);

                                                DateTime CreatedDate;
                                                if (DateTime.TryParse(Convert.ToString(objReturn.CreatedDate), out CreatedDate))
                                                {
                                                    objWorkOrderDTO.Created = CreatedDate;
                                                    objWorkOrderDTO.Updated = CreatedDate;
                                                    objWorkOrderDTO.ReceivedOn = CreatedDate;
                                                    objWorkOrderDTO.ReceivedOnWeb = CreatedDate;
                                                }
                                                else
                                                {
                                                    objWorkOrderDTO.Created = DateTimeUtility.DateTimeNow;
                                                    objWorkOrderDTO.Updated = DateTimeUtility.DateTimeNow;
                                                    objWorkOrderDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                    objWorkOrderDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                }

                                                WorkOrderDTO objWorkorderGuidandNameDTO = new WorkOrderDTO();
                                                bool isWoInsert = false;

                                                WorkOrderDTO objDTO = objWorkOrderDAL.GetWorkOrdersByNamePlainSingle(objWorkOrderDTO.WOName, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                if (objDTO != null && objDTO.GUID != null && objDTO.GUID != Guid.Empty && objDTO.WOStatus.Trim().ToUpper() == "OPEN")
                                                {
                                                    objWorkorderGuidandNameDTO.Action = "old";
                                                    WOGuid = objDTO.GUID;

                                                    string columnList = "ID,RoomName,IsAllowWorkOrdersDuplicate";
                                                    RoomDTO roomDTO = objCommonDAL.GetSingleRecord<RoomDTO>(columnList, "Room", "ID = " + SessionHelper.RoomID.ToString() + "", "");

                                                    if (roomDTO.IsAllowWorkOrdersDuplicate == true)
                                                    {
                                                        if (lstWorkorderGuidandName.Count <= 0 
                                                            || lstWorkorderGuidandName.Where(x => x.WOName == objDTO.WOName && x.Action == "new").Count() <= 0)
                                                        {
                                                            isWoInsert = true;
                                                        }
                                                    }

                                                    //TODO: NEED TO SAVE WOGUID AND UPDATE UsedItems,COSTobjDTO AND SELLPRICE AT THE LAST

                                                    //objWorkOrderDTO.UsedItems = objDTO.UsedItems + 1;

                                                    //double itemCost = 0;
                                                    //double costUOMValue = 1;
                                                    //double.TryParse(objReturn.ItemCost, out itemCost);
                                                    //double.TryParse(objReturn.CostUOMValue, out costUOMValue);
                                                    //costUOMValue = costUOMValue < 1 ? 1 : costUOMValue;
                                                    //objWorkOrderDTO.UsedItemsCost = objDTO.UsedItemsCost.Value + ((itemCost * objReturn.PullQuantity) / costUOMValue);
                                                    //objWorkOrderDAL.UpdateWorkorderItemUsedAmdCost(objDTO.GUID, objWorkOrderDTO.UsedItems.Value, objWorkOrderDTO.UsedItemsCost.Value, SessionHelper.UserID, SessionHelper.CompanyID, SessionHelper.RoomID);

                                                    //objWorkOrderDTO.UsedItemsSellPrice = objDTO.UsedItemsSellPrice + ((itemCost * objReturn.PullQuantity) / costUOMValue);
                                                    //objWorkOrderDAL.UpdateWorkorderItemSellPrice(objDTO.GUID, objWorkOrderDTO.UsedItemsSellPrice, SessionHelper.UserID, SessionHelper.CompanyID, SessionHelper.RoomID);
                                                }
                                                else
                                                {
                                                    isWoInsert = true;
                                                    //objWorkOrderDTO.GUID = Guid.NewGuid();
                                                    //objWorkOrderDTO.WhatWhereAction = "Work Order";
                                                    //objWorkOrderDTO.UsedItems = 1;
                                                    //double itemCost = 0;
                                                    //double costUOMValue = 1;
                                                    //double.TryParse(objReturn.ItemCost, out itemCost);
                                                    //double.TryParse(objReturn.CostUOMValue, out costUOMValue);
                                                    //costUOMValue = costUOMValue < 1 ? 1 : costUOMValue;
                                                    //objWorkOrderDTO.UsedItemsCost = ((itemCost * objReturn.PullQuantity) / costUOMValue);
                                                    //objWorkOrderDTO.UsedItemsSellPrice = ((itemCost * objReturn.PullQuantity) / costUOMValue);
                                                    //WOGuid = objWorkOrderDAL.Insert(objWorkOrderDTO);
                                                    //objWorkorderGuidandNameDTO.Action = "new";
                                                }
                                                if (isWoInsert)
                                                {
                                                    objWorkOrderDTO.GUID = Guid.NewGuid();
                                                    objWorkOrderDTO.WhatWhereAction = "Work Order";
                                                    objWorkOrderDTO.UsedItems = 0;
                                                    WOGuid = objWorkOrderDAL.InsertFromPullHistoryImport(objWorkOrderDTO);
                                                    objWorkorderGuidandNameDTO.Action = "new";
                                                }

                                                if (WOGuid != null)
                                                {
                                                    objPullImport.WorkOrderGuid = WOGuid.Value;
                                                    objWorkorderGuidandNameDTO.GUID = WOGuid.Value;
                                                    objWorkorderGuidandNameDTO.WOName = objReturn.WorkOrder.Trim();

                                                    lstWorkorderGuidandName.Add(objWorkorderGuidandNameDTO);
                                                }

                                                if (WOGuid != null && !string.IsNullOrEmpty(objReturn.Asset))
                                                {
                                                    AssetMasterDAL assetMaster = new AssetMasterDAL(SessionHelper.EnterPriseDBName);
                                                    AssetMasterDTO asset = new AssetMasterDTO();
                                                    asset = assetMaster.GetAssetByName(objReturn.Asset, SessionHelper.RoomID, SessionHelper.CompanyID);

                                                    if (asset != null && asset.GUID != null && asset.GUID != Guid.Empty)
                                                    {
                                                        assetGuid = asset.GUID;
                                                    }
                                                    else
                                                    {
                                                        asset = new AssetMasterDTO();
                                                        asset.ID = 0;
                                                        asset.CreatedBy = SessionHelper.UserID;
                                                        asset.LastUpdatedBy = SessionHelper.UserID;
                                                        asset.Room = SessionHelper.RoomID;
                                                        asset.CompanyID = SessionHelper.CompanyID;
                                                        asset.AddedFrom = "Web";
                                                        asset.EditedFrom = "Web";

                                                        DateTime assetCreatedDate;
                                                        if (DateTime.TryParse(Convert.ToString(objReturn.CreatedDate), out assetCreatedDate))
                                                        {
                                                            asset.ReceivedOn = assetCreatedDate;
                                                            asset.ReceivedOnWeb = assetCreatedDate;
                                                            asset.Created = assetCreatedDate;
                                                            asset.Updated = assetCreatedDate;
                                                        }
                                                        else
                                                        {
                                                            asset.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                            asset.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                            asset.Created = DateTimeUtility.DateTimeNow;
                                                            asset.Updated = DateTimeUtility.DateTimeNow;
                                                        }

                                                        asset.AssetName = objReturn.Asset.Trim();
                                                        asset.GUID = Guid.NewGuid();
                                                        asset.MaintenanceType = 0;
                                                        var assetId = assetMaster.InsertFromPullHistoryImport(asset);
                                                        if (assetId > 0)
                                                        {
                                                            assetGuid = asset.GUID;
                                                        }
                                                    }
                                                    if (assetGuid != null && assetGuid != Guid.Empty)
                                                    {
                                                        objWorkOrderDAL.AssignAssetToWorkorderFromPullHistoryImport(WOGuid.Value, assetGuid.Value, SessionHelper.UserID, SessionHelper.CompanyID, SessionHelper.RoomID, asset.Created.GetValueOrDefault(DateTimeUtility.DateTimeNow));
                                                    }
                                                }
                                            }
                                        }


                                        if (IsValid)
                                        {
                                            PullController objPullController = new PullController();
                                            objPullImport.Status = "success";
                                            objPullImport.Reason = "";
                                            objPullImportWithSameQtyList.Add(objPullImport);
                                        }
                                        else
                                        {
                                            lstreturnFailed.Add(objReturn);
                                        }
                                        // lstreturn.Add(objReturn);
                                    }
                                    if (objPullImportWithSameQtyList.Count > 0)
                                    {
                                        DTPullData = GetPullHistoryTableFromList(objPullImportWithSameQtyList);
                                        //DTPullData = CommonUtilityHelper.ToDataTable(objPullImportWithSameQtyList);
                                        lstreturn = objImport.PullImportWithSameQty(DTPullData, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, "Import-Web", "SaveImport");
                                    }
                                    if (lstreturn == null || lstreturn.Count == 0)
                                    {
                                        lstreturn = new List<PullImportWithSameQty>();
                                    }
                                    foreach (PullImportWithSameQty p in lstreturnFailed)
                                    {
                                        lstreturn.Add(p);
                                    }
                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<PullImportWithSameQty>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }

                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.AssetToolScheduler:
                            #region Asset Tool Scheduler
                            //else if (ImportMastersDTO.TableName.AssetToolScheduler.ToString() == TableName)
                            {

                                List<AssetToolScheduler> CurrentBlankATSchedulerList = new List<AssetToolScheduler>();

                                AssetToolScheduler[] LstATScheduler = s.Deserialize<AssetToolScheduler[]>(para);

                                if (LstATScheduler != null && LstATScheduler.Length > 0)
                                {

                                    CurrentAssetToolSchedulerList = new List<AssetToolScheduler>();
                                    lst = obj.GetAllUDFList(SessionHelper.RoomID, "ToolsScheduler");

                                    eTurns.DAL.UDFDAL objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                                    IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain("ToolsScheduler", SessionHelper.RoomID, SessionHelper.CompanyID);
                                    CurrentOptionList = new List<UDFOptionsMain>();
                                    bool SaveToolList = true;

                                    foreach (AssetToolScheduler item in LstATScheduler)
                                    {
                                        SaveToolList = true;
                                        AssetToolScheduler objDTO = new AssetToolScheduler();
                                        objDTO.ID = item.ID;

                                        if (!string.IsNullOrWhiteSpace(item.SchedulerName))
                                        {
                                            objDTO.SchedulerName = item.SchedulerName;
                                        }
                                        else
                                        {
                                            item.Status = "Fail";
                                            if (!string.IsNullOrEmpty(item.Reason))
                                                item.Reason += (" " + string.Format(ResMessage.MsgRequired, ResToolsScheduler.SchedulerName));
                                            else
                                                item.Reason = " " + string.Format(ResMessage.MsgRequired, ResToolsScheduler.SchedulerName);
                                            SaveToolList = false;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.ScheduleForName))
                                        {
                                            if (item.ScheduleForName.ToLower() != "tool" && item.ScheduleForName.ToLower() != "asset")
                                            {
                                                item.Status = "Fail";
                                                if (!string.IsNullOrEmpty(item.Reason))
                                                    item.Reason += (" "+ ResToolMaster.SchedulerTypeToolOrAsset);
                                                else
                                                    item.Reason = " " + ResToolMaster.SchedulerTypeToolOrAsset;
                                                SaveToolList = false;
                                            }
                                            else
                                            {
                                                if (item.ScheduleForName.ToLower() == "tool")
                                                    objDTO.ScheduleFor = 2;
                                                else if (item.ScheduleForName.ToLower() == "asset")
                                                    objDTO.ScheduleFor = 1;
                                            }
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.SchedulerTypeName))
                                        {
                                            if (item.SchedulerTypeName.ToLower() != MaintenanceScheduleType.None.ToString().ToLower()
                                                && item.SchedulerTypeName.ToLower() != MaintenanceScheduleType.TimeBase.ToString().ToLower()
                                                && item.SchedulerTypeName.ToLower() != MaintenanceScheduleType.CheckOuts.ToString().ToLower()
                                                && item.SchedulerTypeName.ToLower() != MaintenanceScheduleType.OperationalHours.ToString().ToLower()
                                                && item.SchedulerTypeName.ToLower() != MaintenanceScheduleType.Mileage.ToString().ToLower())
                                            {
                                                item.Status = "Fail";
                                                if (!string.IsNullOrEmpty(item.Reason))
                                                    item.Reason += (" " + ResToolsScheduler.SchedulerTypeShouldBe);
                                                else
                                                    item.Reason = " " + ResToolsScheduler.SchedulerTypeShouldBe;
                                                SaveToolList = false;
                                            }
                                            else
                                            {
                                                if (item.SchedulerTypeName.ToLower() == MaintenanceScheduleType.None.ToString().ToLower())
                                                {
                                                    objDTO.SchedulerType = 0;
                                                    objDTO.TimeBasedFrequency = 0;
                                                    objDTO.TimeBaseUnit = 0;
                                                }

                                                if (item.SchedulerTypeName.ToLower() == MaintenanceScheduleType.TimeBase.ToString().ToLower())
                                                {
                                                    objDTO.SchedulerType = 1;
                                                    objDTO.TimeBasedFrequency = item.TimeBasedFrequency.GetValueOrDefault(0);

                                                    if (item.TimeBasedFrequency.GetValueOrDefault(0) <= 0)
                                                    {
                                                        item.Status = "Fail";
                                                        if (!string.IsNullOrEmpty(item.Reason))
                                                            item.Reason += (" " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsScheduler.TimeBasedFrequency));
                                                        else
                                                            item.Reason = " " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsScheduler.TimeBasedFrequency);
                                                        SaveToolList = false;
                                                    }

                                                    if (string.IsNullOrWhiteSpace(item.TimeBasedUnitName))
                                                    {
                                                        item.Status = "Fail";
                                                        if (!string.IsNullOrEmpty(item.Reason))
                                                            item.Reason += (" " +  ResToolsScheduler.TimeBasedUnitMustBe);
                                                        else
                                                            item.Reason = " " + ResToolsScheduler.TimeBasedUnitMustBe;
                                                        SaveToolList = false;
                                                    }
                                                    else
                                                    {
                                                        if (item.TimeBasedUnitName.ToLower() != "days"
                                                            && item.TimeBasedUnitName.ToLower() != "weeks"
                                                            && item.TimeBasedUnitName.ToLower() != "months"
                                                            && item.TimeBasedUnitName.ToLower() != "years")
                                                        {
                                                            item.Status = "Fail";
                                                            if (!string.IsNullOrEmpty(item.Reason))
                                                                item.Reason += (" " + ResToolsScheduler.TimeBasedUnitMustBe);
                                                            else
                                                                item.Reason = " " + ResToolsScheduler.TimeBasedUnitMustBe;
                                                            SaveToolList = false;
                                                        }
                                                        else
                                                        {
                                                            if (!string.IsNullOrWhiteSpace(item.TimeBasedUnitName))
                                                            {
                                                                if (item.TimeBasedUnitName.ToLower() == "days")
                                                                    objDTO.TimeBaseUnit = 1;
                                                                if (item.TimeBasedUnitName.ToLower() == "weeks")
                                                                    objDTO.TimeBaseUnit = 2;
                                                                if (item.TimeBasedUnitName.ToLower() == "months")
                                                                    objDTO.TimeBaseUnit = 3;
                                                                if (item.TimeBasedUnitName.ToLower() == "years")
                                                                    objDTO.TimeBaseUnit = 4;
                                                            }

                                                        }
                                                    }
                                                }


                                            }

                                            if (item.SchedulerTypeName.ToLower() == MaintenanceScheduleType.OperationalHours.ToString().ToLower())
                                            {
                                                objDTO.SchedulerType = 2;
                                                objDTO.OperationalHours = item.OperationalHours;
                                                if (item.OperationalHours.GetValueOrDefault(0.0) <= 0.0)
                                                {
                                                    {
                                                        item.Status = "Fail";
                                                        if (!string.IsNullOrEmpty(item.Reason))
                                                            item.Reason += (" " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsScheduler.OperationalHours));
                                                        else
                                                            item.Reason = " " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsScheduler.OperationalHours);
                                                        SaveToolList = false;
                                                    }
                                                }
                                                objDTO.TimeBasedFrequency = 0;
                                                objDTO.TimeBaseUnit = 0;

                                            }

                                            if (item.SchedulerTypeName.ToLower() == MaintenanceScheduleType.Mileage.ToString().ToLower())
                                            {
                                                objDTO.SchedulerType = 3;
                                                objDTO.Mileage = item.Mileage;
                                                if (item.Mileage.GetValueOrDefault(0.0) <= 0.0)
                                                {
                                                    {
                                                        item.Status = "Fail";
                                                        if (!string.IsNullOrEmpty(item.Reason))
                                                            item.Reason += (" " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsScheduler.Mileage));
                                                        else
                                                            item.Reason = " " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsScheduler.Mileage);
                                                        SaveToolList = false;
                                                    }
                                                }
                                                objDTO.TimeBasedFrequency = 0;
                                                objDTO.TimeBaseUnit = 0;
                                            }

                                            if (item.SchedulerTypeName.ToLower() == MaintenanceScheduleType.CheckOuts.ToString().ToLower())
                                            {
                                                objDTO.SchedulerType = 4;
                                                objDTO.CheckOuts = item.CheckOuts;
                                                if (item.CheckOuts.GetValueOrDefault(0) <= 0)
                                                {
                                                    {
                                                        item.Status = "Fail";
                                                        if (!string.IsNullOrEmpty(item.Reason))
                                                            item.Reason += " " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsScheduler.CheckOuts);
                                                        else
                                                            item.Reason = " " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsScheduler.CheckOuts);
                                                        SaveToolList = false;
                                                    }
                                                }
                                                objDTO.TimeBasedFrequency = 0;
                                                objDTO.TimeBaseUnit = 0;

                                            }

                                        }
                                        else
                                        {
                                            objDTO.SchedulerType = 0;
                                            objDTO.TimeBasedFrequency = 0;
                                            objDTO.TimeBaseUnit = 0;
                                        }

                                        objDTO.ItemNumber = item.ItemNumber;
                                        if (!string.IsNullOrWhiteSpace(item.ItemNumber))
                                        {
                                            Guid? ItemGUID = GetGUID(ImportMastersDTO.TableName.ItemMaster, item.ItemNumber);
                                            if (ItemGUID.HasValue && ItemGUID == Guid.Empty)
                                            {
                                                item.Status = "Fail";
                                                if (!string.IsNullOrEmpty(item.Reason))
                                                    item.Reason = item.Reason + " " + ResItemMaster.MsgItemDoesNotExist;
                                                else
                                                    item.Reason = " " + ResItemMaster.MsgItemDoesNotExist;
                                                SaveToolList = false;
                                            }
                                            else
                                            {

                                                objDTO.ItemGUID = ItemGUID;
                                                if (item.Quantity.GetValueOrDefault(0.0) <= 0.0 && item.IsDeleted.GetValueOrDefault(false) == false)
                                                {
                                                    item.Status = "Fail";
                                                    if (!string.IsNullOrEmpty(item.Reason))
                                                        item.Reason += (" " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsSchedulerDetails.Quantity));
                                                    else
                                                        item.Reason = " " + string.Format(ResCommon.MsgGreaterThanZero, ResToolsSchedulerDetails.Quantity); 
                                                    SaveToolList = false;
                                                }
                                                else
                                                    objDTO.Quantity = item.Quantity;
                                            }
                                        }

                                        objDTO.ScheduleForName = item.ScheduleForName;
                                        objDTO.SchedulerTypeName = item.SchedulerTypeName;
                                        objDTO.Description = item.Description;

                                        objDTO.UDF1 = item.UDF1;
                                        objDTO.UDF2 = item.UDF2;
                                        objDTO.UDF3 = item.UDF3;
                                        objDTO.UDF4 = item.UDF4;
                                        objDTO.UDF5 = item.UDF5;


                                        objDTO.IsDeleted = item.IsDeleted ?? false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();

                                        lstItemGUID.Add(objDTO.GUID.Value);


                                        /*/////CODE FOR CHECK UDF IS REQUIRED///////*/
                                        string errorMsg = string.Empty;
                                        CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, item.UDF1, item.UDF2, item.UDF3, item.UDF4, item.UDF5, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);
                                        if (!string.IsNullOrEmpty(errorMsg))
                                        {
                                            item.Status = "Fail";
                                            if (!string.IsNullOrEmpty(item.Reason))
                                                item.Reason += errorMsg;
                                            else
                                                item.Reason = errorMsg;
                                            SaveToolList = false;
                                        }
                                        /*/////CODE FOR CHECK UDF IS REQUIRED///////*/

                                        objDTO.Reason = item.Reason;
                                        objDTO.Status = item.Status;

                                        if (!string.IsNullOrWhiteSpace(item.SchedulerName) && item.ScheduleForName.Trim() != "" && SaveToolList)
                                        {
                                            var itemval = CurrentAssetToolSchedulerList.FirstOrDefault(x => x.SchedulerName.ToLower() == item.SchedulerName.ToLower()
                                                                                                        && x.ScheduleForName.ToLower() == item.ScheduleForName.ToLower()
                                                                                                        && (x.ItemNumber ?? string.Empty).ToLower() == (item.ItemNumber ?? string.Empty).ToLower());
                                            if (itemval != null)
                                                CurrentAssetToolSchedulerList.Remove(itemval);
                                            CurrentAssetToolSchedulerList.Add(objDTO);
                                            //CurrentItemDTOList.Add(objDTO);

                                            item.Status = "Success";
                                            item.Reason = "N/A";

                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF1 == null ? "" : objDTO.UDF1, CommonUtility.ImportItemColumn.UDF1.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF2 == null ? "" : objDTO.UDF2, CommonUtility.ImportItemColumn.UDF2.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF3 == null ? "" : objDTO.UDF3, CommonUtility.ImportItemColumn.UDF3.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF4 == null ? "" : objDTO.UDF4, CommonUtility.ImportItemColumn.UDF4.ToString());
                                            CheckUDF(lst, CurrentOptionList, objDTO.UDF5 == null ? "" : objDTO.UDF5, CommonUtility.ImportItemColumn.UDF5.ToString());

                                        }
                                        else
                                            CurrentBlankATSchedulerList.Add(item);
                                    }

                                    List<AssetToolScheduler> lstreturn = new List<AssetToolScheduler>();
                                    if (CurrentAssetToolSchedulerList.Count > 0)
                                    {
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.AssetToolScheduler.ToString(), CurrentAssetToolSchedulerList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList);
                                    }

                                    List<AssetToolScheduler> finalSchedulerList = new List<AssetToolScheduler>();

                                    foreach (AssetToolScheduler scheduler in CurrentAssetToolSchedulerList)
                                    {
                                        AssetToolScheduler tempscheduler = lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success"
                                                                        && l.ScheduleFor == scheduler.ScheduleFor
                                                                        && l.SchedulerName == scheduler.SchedulerName
                                                                        && l.SchedulerType == scheduler.SchedulerType).FirstOrDefault();
                                        if (tempscheduler != null)
                                        {
                                            scheduler.Status = tempscheduler.Status;
                                            scheduler.Reason = tempscheduler.Reason;
                                            scheduler.ID = tempscheduler.ID;
                                        }

                                        finalSchedulerList.Add(scheduler);
                                    }


                                    ToolsSchedulerDetailsDAL objToolsSchedulerDetailsDAL = new ToolsSchedulerDetailsDAL(SessionHelper.EnterPriseDBName);
                                    ToolsSchedulerDAL objScheduleDAL = new ToolsSchedulerDAL(SessionHelper.EnterPriseDBName);

                                    ItemMasterDAL objItemMasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                                    bool isInsert = true;
                                    foreach (AssetToolScheduler item in finalSchedulerList.Where(l => l.Status != null && l.Status.ToLower() == "success"))
                                    {

                                        ToolsSchedulerDetailsDTO objToolsSchedulerDetailsDTO;
                                        ToolsSchedulerDTO objScheduleDTO = objScheduleDAL.GetToolSchedulerByNameAndFor(SessionHelper.RoomID, SessionHelper.CompanyID, false, false, item.SchedulerName, item.ScheduleFor);
                                        ItemMasterDTO objItemMaster = null;

                                        if (!string.IsNullOrWhiteSpace(item.ItemNumber) && item.ItemGUID.GetValueOrDefault(Guid.Empty) != Guid.Empty)
                                        {
                                            objItemMaster = new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetItemByItemNumberPlain(Convert.ToString(item.ItemNumber), Convert.ToInt64(item.Room), Convert.ToInt64(item.CompanyID));
                                        }

                                        if (objItemMaster != null)
                                        {
                                            objToolsSchedulerDetailsDTO = objToolsSchedulerDetailsDAL.GetToolScheduleLineItemByItemGUIDNormal(objScheduleDTO.GUID, objItemMaster.GUID, SessionHelper.RoomID, SessionHelper.CompanyID).FirstOrDefault();
                                            if (objToolsSchedulerDetailsDTO != null && objToolsSchedulerDetailsDTO.ID > 0)
                                                isInsert = false;

                                            if (isInsert == true)
                                            {
                                                objToolsSchedulerDetailsDTO = new ToolsSchedulerDetailsDTO();
                                                objToolsSchedulerDetailsDTO.GUID = Guid.NewGuid();
                                                objToolsSchedulerDetailsDTO.ID = 0;
                                                objToolsSchedulerDetailsDTO.Created = DateTimeUtility.DateTimeNow;
                                                objToolsSchedulerDetailsDTO.CreatedBy = SessionHelper.UserID;
                                            }

                                            objToolsSchedulerDetailsDTO.CompanyID = SessionHelper.CompanyID;
                                            objToolsSchedulerDetailsDTO.IsArchived = false;
                                            objToolsSchedulerDetailsDTO.IsDeleted = item.IsDeleted;
                                            objToolsSchedulerDetailsDTO.ItemCost = objItemMaster.Cost;
                                            objToolsSchedulerDetailsDTO.ItemGUID = objItemMaster.GUID;
                                            objToolsSchedulerDetailsDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                                            objToolsSchedulerDetailsDTO.LastUpdatedBy = SessionHelper.UserID;
                                            objToolsSchedulerDetailsDTO.Quantity = item.Quantity;
                                            objToolsSchedulerDetailsDTO.Room = SessionHelper.RoomID;
                                            objToolsSchedulerDetailsDTO.ScheduleGUID = objScheduleDTO.GUID;
                                            if (isInsert == true)
                                            {
                                                objToolsSchedulerDetailsDAL.Insert(objToolsSchedulerDetailsDTO);
                                            }
                                            else
                                            {
                                                objToolsSchedulerDetailsDAL.EditForImport(objToolsSchedulerDetailsDTO);
                                            }
                                        }
                                    }

                                    if (CurrentBlankATSchedulerList.Count > 0)
                                    {
                                        foreach (AssetToolScheduler item in CurrentBlankATSchedulerList)
                                        {
                                            finalSchedulerList.Add(item);
                                        }
                                    }

                                    if (finalSchedulerList.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {

                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<AssetToolScheduler>(HasMoreRecords, IsFirstCall, finalSchedulerList);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (finalSchedulerList.Count() != finalSchedulerList.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }


                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.PastMaintenanceDue:
                            #region PastMaintenanceDue

                            //else if (ImportMastersDTO.TableName.PastMaintenanceDue.ToString() == TableName)
                            {
                                List<PastMaintenanceDueImport> CurrentBlankPastMaintenanceDue = new List<PastMaintenanceDueImport>();
                                PastMaintenanceDueImport[] LstPastMaintenanceDueImport = s.Deserialize<PastMaintenanceDueImport[]>(para);
                                if (LstPastMaintenanceDueImport != null && LstPastMaintenanceDueImport.Length > 0)
                                {
                                    CurrentPastMaintenanceDueImportList = new List<PastMaintenanceDueImport>();
                                    List<PastMaintenanceDueImport> CurrentPastMaintenanceMappingList = new List<PastMaintenanceDueImport>();
                                    //lst = obj.GetUDFList(SessionHelper.RoomID, ImportMastersDTO.TableName.ToolMaster.ToString(), UDFControlTypes.Textbox.ToString());

                                    List<ToolMasterDTO> objToolMasterDTOList = new List<ToolMasterDTO>();
                                    ToolMasterDAL objToolMasterDAL = new ToolMasterDAL(SessionHelper.EnterPriseDBName);
                                    objToolMasterDTOList = objToolMasterDAL.GetToolByRoomPlain(SessionHelper.RoomID, SessionHelper.CompanyID).ToList();

                                    List<AssetMasterDTO> objAssetMasterDTOList = new List<AssetMasterDTO>();
                                    AssetMasterDAL objAssetMasterDAL = new AssetMasterDAL(SessionHelper.EnterPriseDBName);
                                    objAssetMasterDTOList = objAssetMasterDAL.GetAllAssetsByRoom(SessionHelper.RoomID, SessionHelper.CompanyID, false, false);

                                    ToolsSchedulerDAL objToolsSchedulerDALNew = new ToolsSchedulerDAL(SessionHelper.EnterPriseDBName);
                                    List<ToolsSchedulerDTO> objToolsSchedulerDTOList = new List<ToolsSchedulerDTO>();
                                    objToolsSchedulerDTOList = objToolsSchedulerDALNew.GetToolsSchedulerByRoomPlain(SessionHelper.RoomID, SessionHelper.CompanyID).ToList();

                                    foreach (PastMaintenanceDueImport pastMaintenanceDueImport in LstPastMaintenanceDueImport.ToList())
                                    {
                                        if (pastMaintenanceDueImport.ScheduleFor.ToLower().Trim() == "asset")
                                        {
                                            pastMaintenanceDueImport.ScheduleFor = "1";
                                            pastMaintenanceDueImport.ToolGUID = null;
                                            if (pastMaintenanceDueImport.AssetName.ToLower().Trim() != string.Empty)
                                            {
                                                AssetMasterDTO objAssetMasterDTOnew = new AssetMasterDTO();
                                                objAssetMasterDTOnew = objAssetMasterDTOList.Where(t => t.AssetName == pastMaintenanceDueImport.AssetName).FirstOrDefault();
                                                if (objAssetMasterDTOnew == null)
                                                {
                                                    objAssetMasterDTOnew = new AssetMasterDTO();
                                                    objAssetMasterDTOnew.AssetName = pastMaintenanceDueImport.AssetName;
                                                    objAssetMasterDTOnew.Room = SessionHelper.RoomID;
                                                    objAssetMasterDTOnew.CompanyID = SessionHelper.CompanyID;
                                                    objAssetMasterDTOnew.CreatedBy = SessionHelper.UserID;
                                                    objAssetMasterDTOnew.LastUpdatedBy = SessionHelper.UserID;
                                                    objAssetMasterDTOnew.Created = DateTimeUtility.DateTimeNow;
                                                    objAssetMasterDTOnew.Updated = DateTimeUtility.DateTimeNow;
                                                    objAssetMasterDTOnew.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                    objAssetMasterDTOnew.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                    objAssetMasterDTOnew.GUID = Guid.NewGuid();
                                                    objAssetMasterDTOnew.IsArchived = false;
                                                    objAssetMasterDTOnew.IsDeleted = false;
                                                    objAssetMasterDTOnew.AddedFrom = "Web";
                                                    objAssetMasterDTOnew.EditedFrom = "Web";

                                                    Int64 AssetID = objAssetMasterDAL.Insert(objAssetMasterDTOnew);
                                                    objAssetMasterDTOnew = objAssetMasterDAL.GetAssetById(AssetID, SessionHelper.RoomID, SessionHelper.CompanyID, false, false);
                                                    pastMaintenanceDueImport.AssetGUID = objAssetMasterDTOnew.GUID;
                                                    objAssetMasterDTOList.Add(objAssetMasterDTOnew);

                                                }
                                                else
                                                {
                                                    pastMaintenanceDueImport.AssetGUID = objAssetMasterDTOnew.GUID;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            pastMaintenanceDueImport.ScheduleFor = "2";
                                            pastMaintenanceDueImport.AssetGUID = null;
                                            if (pastMaintenanceDueImport.Serial.ToLower().Trim() != string.Empty)
                                            {
                                                ToolMasterDTO objToolMasterDTOnew = new ToolMasterDTO();
                                                objToolMasterDTOnew = objToolMasterDTOList.Where(t => t.Serial == pastMaintenanceDueImport.Serial && ((string.IsNullOrWhiteSpace(pastMaintenanceDueImport.ToolName) || t.ToolName == pastMaintenanceDueImport.ToolName))).FirstOrDefault();
                                                if (objToolMasterDTOnew == null)
                                                {
                                                    objToolMasterDTOnew = new ToolMasterDTO();
                                                    objToolMasterDTOnew.ToolName = pastMaintenanceDueImport.ToolName;
                                                    objToolMasterDTOnew.GUID = Guid.NewGuid();
                                                    objToolMasterDTOnew.CompanyID = SessionHelper.CompanyID;
                                                    objToolMasterDTOnew.CreatedBy = SessionHelper.UserID;
                                                    objToolMasterDTOnew.LastUpdatedBy = SessionHelper.UserID;
                                                    objToolMasterDTOnew.Created = DateTimeUtility.DateTimeNow;
                                                    objToolMasterDTOnew.Updated = DateTimeUtility.DateTimeNow;
                                                    objToolMasterDTOnew.Serial = pastMaintenanceDueImport.Serial;
                                                    objToolMasterDTOnew.Description = "";
                                                    objToolMasterDTOnew.ToolCategoryID = 0;
                                                    objToolMasterDTOnew.Cost = 0;
                                                    objToolMasterDTOnew.IsGroupOfItems = 0;
                                                    objToolMasterDTOnew.Quantity = 1;
                                                    objToolMasterDTOnew.CheckedOutMQTY = 0;
                                                    objToolMasterDTOnew.CheckedOutQTY = 0;
                                                    objToolMasterDTOnew.ReceivedOn = DateTimeUtility.DateTimeNow;
                                                    objToolMasterDTOnew.CreatedBy = SessionHelper.UserID;
                                                    objToolMasterDTOnew.LastUpdatedBy = SessionHelper.UserID;
                                                    objToolMasterDTOnew.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                                                    objToolMasterDTOnew.Room = SessionHelper.RoomID;
                                                    objToolMasterDTOnew.AddedFrom = "Web";
                                                    objToolMasterDTOnew.EditedFrom = "Web";
                                                    objToolMasterDTOnew.IsAutoMaintain = false;
                                                    objToolMasterDTOnew.MaintenanceType = 0;
                                                    objToolMasterDTOnew.IsArchived = false;
                                                    objToolMasterDTOnew.IsDeleted = false;
                                                    Int64 ToolID = objToolMasterDAL.Insert(objToolMasterDTOnew);
                                                    objToolMasterDTOnew = objToolMasterDAL.GetToolByIDPlain(ToolID);
                                                    objToolMasterDTOList.Add(objToolMasterDTOnew);
                                                    pastMaintenanceDueImport.ToolGUID = objToolMasterDTOnew.GUID;

                                                }
                                                else
                                                {
                                                    pastMaintenanceDueImport.ToolGUID = objToolMasterDTOnew.GUID;
                                                }
                                            }
                                        }
                                        if (pastMaintenanceDueImport.SchedulerName != string.Empty)
                                        {
                                            ToolsSchedulerDTO objToolsSchedulerDTONew = new ToolsSchedulerDTO();
                                            objToolsSchedulerDTONew = objToolsSchedulerDTOList.Where(t => t.SchedulerName == pastMaintenanceDueImport.SchedulerName && t.ScheduleFor == Convert.ToByte(pastMaintenanceDueImport.ScheduleFor)).FirstOrDefault();
                                            if (objToolsSchedulerDTONew == null)
                                            {
                                                objToolsSchedulerDTONew = new ToolsSchedulerDTO();
                                                objToolsSchedulerDTONew.SchedulerName = pastMaintenanceDueImport.SchedulerName;
                                                objToolsSchedulerDTONew.SchedulerType = (int)MaintenanceScheduleType.None;
                                                objToolsSchedulerDTONew.Created = DateTimeUtility.DateTimeNow;
                                                objToolsSchedulerDTONew.CreatedBy = SessionHelper.UserID;
                                                objToolsSchedulerDTONew.Updated = DateTimeUtility.DateTimeNow;
                                                objToolsSchedulerDTONew.LastUpdatedBy = SessionHelper.UserID;
                                                objToolsSchedulerDTONew.Room = SessionHelper.RoomID;
                                                objToolsSchedulerDTONew.IsArchived = false;
                                                objToolsSchedulerDTONew.IsDeleted = false;
                                                objToolsSchedulerDTONew.GUID = Guid.NewGuid();
                                                objToolsSchedulerDTONew.CompanyID = SessionHelper.CompanyID;
                                                objToolsSchedulerDTONew.UDF1 = string.Empty;
                                                objToolsSchedulerDTONew.UDF2 = string.Empty;
                                                objToolsSchedulerDTONew.UDF3 = string.Empty;
                                                objToolsSchedulerDTONew.UDF4 = string.Empty;
                                                objToolsSchedulerDTONew.UDF5 = string.Empty;
                                                objToolsSchedulerDTONew.ScheduleFor = Convert.ToByte(pastMaintenanceDueImport.ScheduleFor);
                                                objToolsSchedulerDTONew.Description = string.Empty;
                                                objToolsSchedulerDTONew.SchedulerType = 0;
                                                objToolsSchedulerDTONew.TimeBasedFrequency = 0;
                                                objToolsSchedulerDTONew.TimeBaseUnit = 0;
                                                objToolsSchedulerDTONew.RecurringDays = 0;
                                                objToolsSchedulerDTONew.CheckOuts = null;
                                                objToolsSchedulerDALNew.Insert(objToolsSchedulerDTONew);
                                                objToolsSchedulerDTOList.Add(objToolsSchedulerDTONew);
                                                pastMaintenanceDueImport.SchedulerGUID = objToolsSchedulerDTONew.GUID;
                                            }
                                            else
                                            {
                                                pastMaintenanceDueImport.SchedulerGUID = objToolsSchedulerDTONew.GUID;
                                            }
                                            pastMaintenanceDueImport.TrackngMeasurement = objToolsSchedulerDTONew.SchedulerType;
                                        }

                                    }

                                    bool SavePastDueList = true;
                                    ToolMasterDAL objToolDAL = new ToolMasterDAL(SessionHelper.EnterPriseDBName);
                                    ToolMasterDTO objToolMasterDTO = new ToolMasterDTO();
                                    List<PastMaintenanceDueImport> objMaintenanceLineItem = new List<PastMaintenanceDueImport>();
                                    foreach (PastMaintenanceDueImport item in LstPastMaintenanceDueImport.ToList())
                                    {
                                        SavePastDueList = true;
                                        PastMaintenanceDueImport objDTO = new PastMaintenanceDueImport();
                                        objDTO.ID = item.ID;
                                        objDTO.AssetName = item.AssetName;
                                        objDTO.ScheduleFor = item.ScheduleFor;
                                        objDTO.displayMaitenanceDate = item.displayMaitenanceDate;
                                        objDTO.ToolName = item.ToolName;
                                        objDTO.Serial = item.Serial;
                                        objDTO.ItemNumber = item.ItemNumber;
                                        objDTO.ItemCost = item.ItemCost;
                                        objDTO.Quantity = item.Quantity;
                                        objDTO.MaintenanceName = item.SchedulerName;
                                        objDTO.MaintenanceType = "Past";
                                        objDTO.SchedulerType = 0;
                                        objDTO.SchedulerName = item.SchedulerName;
                                        DateTime dt;
                                        DateTime.TryParseExact(item.displayMaitenanceDate, SessionHelper.RoomDateFormat, ResourceHelper.CurrentCult, System.Globalization.DateTimeStyles.None, out dt);
                                        if (dt != DateTime.MinValue)
                                        {
                                            objDTO.MaintenanceDate = dt;
                                            objDTO.ScheduleDate = dt;
                                        }
                                        else
                                        {
                                            objDTO.Status = "fail";
                                            objDTO.Reason = ResToolsMaintenance.EnterProperMaintenanceDate; 
                                            SavePastDueList = false;
                                        }
                                        objDTO.SchedulerGUID = item.SchedulerGUID;

                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.IsArchived = false;
                                        objDTO.IsDeleted = false;
                                        objDTO.AssetGUID = item.AssetGUID;
                                        objDTO.ToolGUID = item.ToolGUID;
                                        objDTO.GUID = Guid.NewGuid();
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        //objDTO.ToolCategoryID = item.ToolCategory == "" ? (long?)null : GetIDs(ImportMastersDTO.TableName.ToolCategoryMaster, item.ToolCategory);

                                        objDTO.Quantity = item.Quantity;
                                        objDTO.UDF1 = item.UDF1;
                                        objDTO.UDF2 = item.UDF2;
                                        objDTO.UDF3 = item.UDF3;
                                        objDTO.UDF4 = item.UDF4;
                                        objDTO.UDF5 = item.UDF5;
                                        objDTO.IsDeleted = false;
                                        objDTO.IsArchived = false;
                                        objDTO.Created = DateTimeUtility.DateTimeNow;
                                        objDTO.Updated = DateTimeUtility.DateTimeNow;
                                        objDTO.LastUpdatedBy = SessionHelper.UserID;
                                        objDTO.Room = SessionHelper.RoomID;
                                        objDTO.CompanyID = SessionHelper.CompanyID;
                                        objDTO.CreatedBy = SessionHelper.UserID;
                                        objDTO.GUID = Guid.NewGuid();
                                        objDTO.TrackngMeasurement = item.TrackngMeasurement;

                                        /*/////CODE FOR CHECK CHECKOUT UDF IS REQUIRED///////*/

                                        if (objDTO.SchedulerName.Trim() != "" && objDTO.Status != "fail" && objDTO.MaintenanceDate != null && SavePastDueList)
                                        {
                                            objDTO.Status = "Close";

                                            //var itemval = CurrentPastMaintenanceDueImportList.FirstOrDefault(x => x.ScheduleFor == objDTO.ScheduleFor && (x.SchedulerName ?? string.Empty) == (objDTO.SchedulerName ?? string.Empty) && (x.displayMaitenanceDate) == (objDTO.displayMaitenanceDate));
                                            //if (itemval != null)
                                            //    CurrentPastMaintenanceDueImportList.Remove(itemval);

                                            CurrentPastMaintenanceDueImportList.Add(objDTO);
                                            objMaintenanceLineItem.Add(objDTO);
                                            if (objDTO.ScheduleFor == "1")
                                            {
                                                var itemmap = CurrentPastMaintenanceMappingList.FirstOrDefault(x => x.ScheduleFor == objDTO.ScheduleFor && (x.SchedulerName ?? string.Empty) == (objDTO.SchedulerName ?? string.Empty) && (x.AssetName) == (objDTO.AssetName));
                                                if (itemmap != null)
                                                    CurrentPastMaintenanceMappingList.Remove(itemmap);

                                                CurrentPastMaintenanceMappingList.Add(objDTO);

                                            }
                                            if (objDTO.ScheduleFor == "2")
                                            {
                                                var itemmap1 = CurrentPastMaintenanceMappingList.FirstOrDefault(x => x.ScheduleFor == objDTO.ScheduleFor && (x.SchedulerName ?? string.Empty) == (objDTO.SchedulerName ?? string.Empty) && (x.ToolName) == (objDTO.ToolName) && (x.Serial) == (objDTO.Serial));
                                                if (itemmap1 != null)
                                                    CurrentPastMaintenanceMappingList.Remove(itemmap1);

                                                CurrentPastMaintenanceMappingList.Add(objDTO);

                                            }

                                        }
                                        else
                                            CurrentBlankPastMaintenanceDue.Add(objDTO);
                                    }

                                    List<PastMaintenanceDueImport> lstreturn = new List<PastMaintenanceDueImport>();
                                    if (CurrentPastMaintenanceDueImportList.Count > 0)
                                        lstreturn = objImport.BulkInsert(ImportMastersDTO.TableName.PastMaintenanceDue.ToString(), CurrentPastMaintenanceDueImportList, SessionHelper.RoomID, SessionHelper.CompanyID, Session["ColuumnList"].ToString(), SessionHelper.UserID, SessionUserId, SessionHelper.EnterPriceID, CurrentOptionList, isImgZipAvail, isLink2ZipAvail);


                                    if (CurrentBlankPastMaintenanceDue.Count > 0)
                                    {
                                        foreach (PastMaintenanceDueImport item in CurrentBlankPastMaintenanceDue)
                                        {
                                            lstreturn.Add(item);
                                        }
                                    }
                                    List<ItemMasterDTO> lstItemMasterDTO = new List<ItemMasterDTO>();
                                    ItemMasterDAL objItemMasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                                    lstItemMasterDTO = objItemMasterDAL.GetAllItemsWithoutJoins(SessionHelper.RoomID, SessionHelper.CompanyID, false, false, null);

                                    foreach (PastMaintenanceDueImport p in objMaintenanceLineItem.Where(l => l.Status != null && (l.Status.ToLower() == "success" || l.Status.ToLower() == "close") && (!string.IsNullOrWhiteSpace(l.ItemNumber) && l.Quantity != null && l.Quantity >= 0)).ToList())
                                    {
                                        Guid? MaintenanceGuid = Guid.Empty;
                                        Guid? ScheduleGuid = Guid.Empty;
                                        PastMaintenanceDueImport p1 = lstreturn.Where(x => x.ScheduleFor == p.ScheduleFor && (x.SchedulerName ?? string.Empty) == (p.SchedulerName ?? string.Empty) && (x.MaintenanceDate) == (p.MaintenanceDate)).FirstOrDefault();
                                        if (p1 != null)
                                        {
                                            MaintenanceGuid = p1.GUID;
                                            ScheduleGuid = p1.SchedulerGUID;
                                        }
                                        if (!string.IsNullOrWhiteSpace(p.ItemNumber) && (p.Quantity ?? 0) > 0)
                                        {
                                            ItemMasterDTO objItemMasterDTONew = lstItemMasterDTO.Where(i => i.ItemNumber == p.ItemNumber).FirstOrDefault();
                                            if (objItemMasterDTONew == null)
                                            {
                                                p.Status = "fail";
                                                if (p.Reason != "N/A")
                                                {
                                                    p.Reason += (" " + ResItemMaster.MsgItemDoesNotExist);
                                                }
                                                else
                                                {
                                                    p.Reason = " " + ResItemMaster.MsgItemDoesNotExist;
                                                }
                                            }
                                            else
                                            {
                                                double? ItemCost = 0;
                                                if (p.ItemCost == null)
                                                {
                                                    ItemCost = objItemMasterDTONew.Cost;
                                                }
                                                else
                                                {
                                                    ItemCost = p.ItemCost;
                                                }

                                                ToolMaintenanceDetailsDAL objToolMaintenanceDetailsDAL = new ToolMaintenanceDetailsDAL(SessionHelper.EnterPriseDBName);
                                                ToolMaintenanceDetailsDTO objToolMaintenanceDetailsDTO = new ToolMaintenanceDetailsDTO();
                                                objToolMaintenanceDetailsDTO.CompanyID = SessionHelper.CompanyID;
                                                objToolMaintenanceDetailsDTO.Created = DateTimeUtility.DateTimeNow;
                                                objToolMaintenanceDetailsDTO.CreatedBy = SessionHelper.UserID;
                                                objToolMaintenanceDetailsDTO.GUID = Guid.NewGuid();
                                                objToolMaintenanceDetailsDTO.ID = 0;
                                                objToolMaintenanceDetailsDTO.IsArchived = false;
                                                objToolMaintenanceDetailsDTO.IsDeleted = false;
                                                objToolMaintenanceDetailsDTO.ItemCost = ItemCost;
                                                objToolMaintenanceDetailsDTO.ItemGUID = objItemMasterDTONew.GUID;
                                                objToolMaintenanceDetailsDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                                                objToolMaintenanceDetailsDTO.LastUpdatedBy = SessionHelper.UserID;
                                                objToolMaintenanceDetailsDTO.MaintenanceGUID = MaintenanceGuid;
                                                objToolMaintenanceDetailsDTO.Quantity = p.Quantity;
                                                objToolMaintenanceDetailsDTO.Room = SessionHelper.RoomID;
                                                objToolMaintenanceDetailsDAL.Insert(objToolMaintenanceDetailsDTO);

                                                ToolsSchedulerDetailsDAL objToolsSchedulerDetailsDAL = new ToolsSchedulerDetailsDAL(SessionHelper.EnterPriseDBName);
                                                ToolsSchedulerDetailsDTO objToolsSchedulerDetailsDTO = new ToolsSchedulerDetailsDTO();
                                                //List<ToolsSchedulerDetailsDTO> lstToolsSchedulerDetailsDTO = objToolsSchedulerDetailsDAL.GetAllRecords(ScheduleGuid ?? Guid.Empty, SessionHelper.RoomID, SessionHelper.CompanyID, false, false).ToList();
                                                List<ToolsSchedulerDetailsDTO> lstToolsSchedulerDetailsDTO = objToolsSchedulerDetailsDAL.GetToolScheduleLineItemsNormal(ScheduleGuid ?? Guid.Empty, SessionHelper.RoomID, SessionHelper.CompanyID);
                                                if (lstToolsSchedulerDetailsDTO == null || lstToolsSchedulerDetailsDTO.Count() == 0 || lstToolsSchedulerDetailsDTO.Where(l => l.ItemGUID == objItemMasterDTONew.GUID).Count() == 0)
                                                {

                                                    objToolsSchedulerDetailsDTO.CompanyID = SessionHelper.CompanyID;
                                                    objToolsSchedulerDetailsDTO.Created = DateTimeUtility.DateTimeNow;
                                                    objToolsSchedulerDetailsDTO.CreatedBy = SessionHelper.UserID;
                                                    objToolsSchedulerDetailsDTO.GUID = Guid.NewGuid();
                                                    objToolsSchedulerDetailsDTO.ID = 0;
                                                    objToolsSchedulerDetailsDTO.IsArchived = false;
                                                    objToolsSchedulerDetailsDTO.IsDeleted = false;
                                                    objToolsSchedulerDetailsDTO.ItemCost = ItemCost;
                                                    objToolsSchedulerDetailsDTO.ItemGUID = objItemMasterDTONew.GUID;
                                                    objToolsSchedulerDetailsDTO.LastUpdated = DateTimeUtility.DateTimeNow;
                                                    objToolsSchedulerDetailsDTO.LastUpdatedBy = SessionHelper.UserID;
                                                    objToolsSchedulerDetailsDTO.Quantity = p.Quantity;
                                                    objToolsSchedulerDetailsDTO.Room = SessionHelper.RoomID;
                                                    objToolsSchedulerDetailsDTO.ScheduleGUID = ScheduleGuid;
                                                    objToolsSchedulerDetailsDAL.Insert(objToolsSchedulerDetailsDTO);
                                                }
                                            }
                                        }

                                        //Scheduler Mapping  
                                    }

                                    foreach (PastMaintenanceDueImport p in CurrentPastMaintenanceMappingList.Where(l => l.Status != null && (l.Status.ToLower() == "success" || l.Status.ToLower() == "close")).ToList())
                                    {
                                        Guid? MaintenanceGuid = Guid.Empty;
                                        Guid? ScheduleGuid = Guid.Empty;
                                        PastMaintenanceDueImport p1 = lstreturn.Where(x => x.ScheduleFor == p.ScheduleFor && (x.SchedulerName ?? string.Empty) == (p.SchedulerName ?? string.Empty) && (x.MaintenanceDate) == (p.MaintenanceDate)).FirstOrDefault();
                                        if (p1 != null)
                                        {
                                            MaintenanceGuid = p1.GUID;
                                            ScheduleGuid = p1.SchedulerGUID;
                                        }
                                        ToolsSchedulerDAL objToolsSchedulerDAL = new ToolsSchedulerDAL(SessionHelper.EnterPriseDBName);
                                        List<ToolsSchedulerMappingDTO> lstMappings = objToolsSchedulerDAL.GetScheduleMapping(p.ToolGUID, p.AssetGUID, ScheduleGuid, p.TrackngMeasurement);
                                        if (lstMappings == null || lstMappings.Count() == 0)
                                        {
                                            ToolsSchedulerMappingDTO objToolsSchedulerMappingDTO = new ToolsSchedulerMappingDTO();
                                            objToolsSchedulerMappingDTO.SchedulerFor = Convert.ToByte(p.ScheduleFor);
                                            objToolsSchedulerMappingDTO.SchedulerType = (int)MaintenanceScheduleType.None;
                                            objToolsSchedulerMappingDTO.ToolSchedulerGuid = ScheduleGuid;
                                            objToolsSchedulerMappingDTO.ToolGUID = p.ToolGUID;
                                            objToolsSchedulerMappingDTO.AssetGUID = p.AssetGUID;
                                            objToolsSchedulerMappingDTO.Created = DateTimeUtility.DateTimeNow;
                                            objToolsSchedulerMappingDTO.CreatedBy = SessionHelper.UserID;
                                            objToolsSchedulerMappingDTO.Updated = DateTimeUtility.DateTimeNow;
                                            objToolsSchedulerMappingDTO.LastUpdatedBy = SessionHelper.UserID;
                                            objToolsSchedulerMappingDTO.Room = SessionHelper.RoomID;
                                            objToolsSchedulerMappingDTO.IsArchived = false;
                                            objToolsSchedulerMappingDTO.IsDeleted = false;
                                            objToolsSchedulerMappingDTO.GUID = Guid.NewGuid();
                                            objToolsSchedulerMappingDTO.CompanyID = SessionHelper.CompanyID;
                                            objToolsSchedulerMappingDTO.UDF1 = null;
                                            objToolsSchedulerMappingDTO.UDF2 = null;
                                            objToolsSchedulerMappingDTO.UDF3 = null;
                                            objToolsSchedulerMappingDTO.UDF4 = null;
                                            objToolsSchedulerMappingDTO.UDF5 = null;
                                            objToolsSchedulerMappingDTO.MaintenanceName = p.MaintenanceName;
                                            objAssetMasterDAL.InsertToolmapping(objToolsSchedulerMappingDTO);
                                        }
                                    }
                                    List<PastMaintenanceDueImport> CurrentPastMaintenanceMappingList1 = lstreturn.Where(l => l.Status != null && (l.Status.ToLower() == "success" || l.Status.ToLower() == "close")).ToList();
                                    CurrentPastMaintenanceMappingList1 = (from mi in CurrentPastMaintenanceMappingList1
                                                                          group mi by new { mi.AssetGUID, mi.ToolGUID, mi.SchedulerGUID } into groupedilq
                                                                          select new PastMaintenanceDueImport() { AssetGUID = groupedilq.Key.AssetGUID, ToolGUID = groupedilq.Key.ToolGUID, SchedulerGUID = groupedilq.Key.SchedulerGUID }).ToList();
                                    ToolsMaintenanceDAL objToolsMaintenanceDAL = new ToolsMaintenanceDAL(SessionHelper.EnterPriseDBName);
                                    foreach (var item in CurrentPastMaintenanceMappingList1)
                                    {
                                        objToolsMaintenanceDAL.CreateNewMaintenanceAuto(item.AssetGUID, item.ToolGUID, item.SchedulerGUID.GetValueOrDefault(Guid.Empty), SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
                                    }
                                    lstreturn.ForEach(t =>
                                    {
                                        t.ScheduleFor = t.ScheduleFor == "1" ? "Asset" : "Tool";
                                    });

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<PastMaintenanceDueImport>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && (l.Status.ToLower() == "success" || l.Status.ToLower() == "close")).Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }
                                    eTurns.DAL.CacheHelper<IEnumerable<ToolMasterDTO>>.InvalidateCache();

                                }

                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ToolCheckInOutHistory:
                            #region ToolCheckInCheckOutHistory

                            // else if (ImportMastersDTO.TableName.ToolCheckInOutHistory.ToString() == TableName)
                            {
                                List<ToolCheckInCheckOut> toolCheckInCheckOutList = s.Deserialize<List<ToolCheckInCheckOut>>(para);
                                DataTable DTToolCheckInCheckOutData = new DataTable();
                                List<ToolCheckInCheckOut> lstreturn = new List<ToolCheckInCheckOut>();
                                UDFDAL objUDFDAL = new UDFDAL(SessionHelper.EnterPriseDBName);
                                IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetRequiredUDFsByUDFTableNamePlain(ImportMastersDTO.TableName.ToolCheckInOutHistory.ToString(), SessionHelper.RoomID, SessionHelper.CompanyID);
                                var recordsInvalidateForUDF = new List<ToolCheckInCheckOut>();
                                var recordsToBeDelete = new List<int>();
                                bool allowToolOrdering = SessionHelper.AllowToolOrdering;
                                // Below given code block is to set status and message for records which are invalid for UDF data.
                                // In DB we are ignoring records which have status fail.
                                for (int checkInCheckOutCount = 0; checkInCheckOutCount < toolCheckInCheckOutList.Count(); checkInCheckOutCount++)
                                {
                                    string errorMsg = string.Empty;
                                    var checkInCheckOut = toolCheckInCheckOutList[checkInCheckOutCount];
                                    CommonUtilityHelper.CheckUDFIsRequired(UDFDataFromDB, checkInCheckOut.CheckOutUDF1, checkInCheckOut.CheckOutUDF2, checkInCheckOut.CheckOutUDF3, checkInCheckOut.CheckOutUDF4, checkInCheckOut.CheckOutUDF5, out errorMsg,SessionHelper.EnterPriceID,SessionHelper.CompanyID,SessionHelper.RoomID,currentCulture);

                                    if (!string.IsNullOrWhiteSpace(errorMsg))
                                    {
                                        checkInCheckOut.Status = "Fail";
                                        if (!string.IsNullOrEmpty(checkInCheckOut.Reason))
                                            checkInCheckOut.Reason += errorMsg;
                                        else
                                            checkInCheckOut.Reason = errorMsg;
                                    }
                                }

                                if (toolCheckInCheckOutList != null && toolCheckInCheckOutList.Any())
                                {
                                    DTToolCheckInCheckOutData = CommonUtilityHelper.ToDataTable(toolCheckInCheckOutList);
                                    lstreturn = objImport.ImportToolCheckInCheckOutHistory(DTToolCheckInCheckOutData, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, "Import-Web", allowToolOrdering);
                                }

                                if (lstreturn == null || lstreturn.Count == 0)
                                {
                                    lstreturn = new List<ToolCheckInCheckOut>();
                                }

                                if (lstreturn.Count == 0)
                                {
                                    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                    status = ResMessage.SaveMessage;
                                    ClearCurrentResourceList();
                                    if (HasMoreRecords == false)
                                        Session["importedData"] = null;
                                }
                                else
                                {
                                    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                    status = ResMessage.SaveMessage;
                                    var failRecords = lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "fail").ToList(); // show only failed records
                                    SaveImportDataListSession<ToolCheckInCheckOut>(HasMoreRecords, IsFirstCall, failRecords);
                                }

                                if (lstreturn.Any() && lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "fail").Count() > 0)
                                {
                                    allSuccesfulRecords = false;
                                }

                            }

                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ToolCertificationImages:
                            #region ToolCertificationImages

                            //else if (ImportMastersDTO.TableName.ToolCertificationImages.ToString() == TableName)
                            {
                                List<ToolImageImport> toolCertificationImages = s.Deserialize<List<ToolImageImport>>(para);
                                DataTable DTToolCertificationImages = new DataTable();
                                List<ToolImageImport> lstreturn = new List<ToolImageImport>();

                                if (toolCertificationImages != null && toolCertificationImages.Any())
                                {
                                    DTToolCertificationImages = CommonUtilityHelper.ToDataTable(toolCertificationImages);
                                    lstreturn = objImport.ImportToolCertificationImages(DTToolCertificationImages, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, "Import-Web");
                                }

                                if (lstreturn == null || lstreturn.Count == 0)
                                {
                                    lstreturn = new List<ToolImageImport>();
                                }

                                if (lstreturn.Count == 0)
                                {
                                    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                    status = ResMessage.SaveMessage;
                                    ClearCurrentResourceList();
                                    if (HasMoreRecords == false)
                                        Session["importedData"] = null;
                                }
                                else
                                {
                                    savedOnlyitemIds = string.Join(",", lstreturn.Where(i => i.Id != 0 && (!string.IsNullOrEmpty(i.ImageName)) && i.Status != null && i.Status.ToLower() == "success").Select(p => p.Id.ToString() + "#" + p.ImageName.ToString()));
                                    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                    status = ResMessage.SaveMessage;
                                    var failRecords = lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "fail").ToList(); // show only failed records
                                    SaveImportDataListSession<ToolImageImport>(HasMoreRecords, IsFirstCall, failRecords);
                                }

                                if (lstreturn.Any() && lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "fail").Count() > 0)
                                {
                                    allSuccesfulRecords = false;
                                }
                            }

                            #endregion
                            break;
                        case ImportMastersDTO.TableName.ToolAdjustmentCount:
                            #region Too Adjustment Count 
                            //if (ImportMastersDTO.TableName.ToolAdjustmentCount.ToString() == TableName)
                            {


                                List<ToolAssetQuantityMain> CurrentBlankToolAssetQuantityList = new List<ToolAssetQuantityMain>();
                                List<ToolAssetQuantityMain> LstToolAssetQuantity = s.Deserialize<List<ToolAssetQuantityMain>>(para);
                                List<ToolAssetQuantityMain> objListToolAssetQuantityMain = new List<ToolAssetQuantityMain>();
                                if (Session["ToolAssetQuantityList"] != null)
                                {
                                    objListToolAssetQuantityMain = (List<ToolAssetQuantityMain>)Session["ToolAssetQuantityList"];

                                }
                                objListToolAssetQuantityMain = objListToolAssetQuantityMain.Union(LstToolAssetQuantity).ToList();
                                Session["ToolAssetQuantityList"] = objListToolAssetQuantityMain;
                                if (objListToolAssetQuantityMain.Count == TotalCount)
                                {
                                    LstToolAssetQuantity = (List<ToolAssetQuantityMain>)Session["ToolAssetQuantityList"];
                                    Session["ToolAssetQuantityList"] = null;

                                    List<ToolAssetQuantityDetailDTO> lstProperRecords = new List<ToolAssetQuantityDetailDTO>();
                                    List<ToolAssetQuantityDetailDTO> lstNotProperRecords = new List<ToolAssetQuantityDetailDTO>();
                                    List<ToolAssetQuantityDetailDTO> lstValidated = new List<ToolAssetQuantityDetailDTO>();

                                    ToolAssetQuantityDetailDAL objToolAssetQuantityDetailsDAL = new ToolAssetQuantityDetailDAL(SessionHelper.EnterPriseDBName);
                                    lstValidated = objToolAssetQuantityDetailsDAL.ValidateTAQRecords(LstToolAssetQuantity, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, SessionHelper.EnterPriceID, ResourceHelper.CurrentCult.Name, true, false);
                                    lstProperRecords = lstValidated.Where(t => (t.ErrorMessege ?? "") == "").ToList();


                                    lstNotProperRecords = lstValidated.Where(t => (t.ErrorMessege ?? "") != "").ToList();
                                    if (lstProperRecords != null && lstProperRecords.Count > 0)
                                    {
                                        //Guid InsertedCountGuid = Guid.Empty;
                                        //DataTable dtToolLocations = GetToolTableFromList(lstProperRecords);
                                        //InsertedCountGuid = objToolAssetQuantityDetailsDAL.ToolAssetApplyCountLineitem(dtToolLocations, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);

                                        //#region WI-4988

                                        //if (InsertedCountGuid != null && InsertedCountGuid != Guid.Empty)
                                        //{
                                        //    AddMissingSerialForToolCount(lstProperRecords, InsertedCountGuid);
                                        //}

                                        //#endregion

                                        ToolAssetCountDTO objToolAssetCountDTO = InsertCountForTool("A");

                                        List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetail = new List<ToolAssetCountLineItemDetailDTO>();
                                        ToolAssetCountDetailDTO objToolAssetCountDetailDTO = new ToolAssetCountDetailDTO();

                                        lstProperRecords.ForEach(t =>
                                        {
                                            if (objToolAssetCountDTO != null && objToolAssetCountDTO.ID > 0)
                                            {
                                                if (t.SerialNumberTracking || t.LotNumberTracking || t.DateCodeTracking)
                                                {
                                                    ToolAssetCountLineItemDetailDTO objCountLineItemDetailDTO = new ToolAssetCountLineItemDetailDTO();
                                                    objCountLineItemDetailDTO.ID = 0;
                                                    objCountLineItemDetailDTO.ToolGUID = t.ToolGUID.GetValueOrDefault(Guid.Empty);
                                                    objCountLineItemDetailDTO.ToolName = t.ToolName;
                                                    objCountLineItemDetailDTO.ToolDescription = "";
                                                    objCountLineItemDetailDTO.Comment = "";
                                                    objCountLineItemDetailDTO.ToolBinID = t.ToolBinID;
                                                    objCountLineItemDetailDTO.Location = t.Location;
                                                    objCountLineItemDetailDTO.Quantity = 0;
                                                    objCountLineItemDetailDTO.CountQuantity = t.Quantity;
                                                    objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                    objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                    objCountLineItemDetailDTO.LotSerialNumber = (t.SerialNumberTracking ? (t.SerialNumber) : (t.LotNumberTracking ? t.LotNumber : ""));
                                                    objCountLineItemDetailDTO.SerialNumber = t.SerialNumber;
                                                    objCountLineItemDetailDTO.Received = "";
                                                    objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;
                                                    objCountLineItemDetailDTO.ReceivedDate = t.ReceivedDate;
                                                    objCountLineItemDetailDTO.Cost = t.Cost;
                                                    objCountLineItemDetailDTO.GUID = null;
                                                    objCountLineItemDetailDTO.CountGUID = objToolAssetCountDTO.GUID;
                                                    objCountLineItemDetailDTO.CountDetailGUID = null;
                                                    objCountLineItemDetailDTO.SerialNumberTracking = t.SerialNumberTracking;
                                                    objCountLineItemDetailDTO.LotNumberTracking = t.LotNumberTracking;
                                                    objCountLineItemDetailDTO.DateCodeTracking = t.DateCodeTracking;

                                                    lstCountLineItemDetail.Add(objCountLineItemDetailDTO);
                                                }
                                                else
                                                {
                                                    Guid CountDetailGUID = Guid.Empty;
                                                    AddItemToCountAndReturnDetailGUIDForTool(objToolAssetCountDTO.GUID, t.ToolGUID.GetValueOrDefault(Guid.Empty), t.ToolBinID.GetValueOrDefault(0), t.Quantity, 0, t.UDF1, t.UDF2, t.UDF3, t.UDF4, t.UDF5, "", true, out CountDetailGUID);
                                                }
                                            }
                                        });
                                        if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
                                        {
                                            AddUpdateLotDetailPopupForCountForTool(lstCountLineItemDetail);
                                        }

                                        #region WI-4988

                                        if (objToolAssetCountDTO != null && objToolAssetCountDTO.GUID != null)
                                        {
                                            AddMissingSerialForToolCount(lstProperRecords, objToolAssetCountDTO.GUID);
                                        }

                                        #endregion
                                    }
                                    LstToolAssetQuantity = new List<ToolAssetQuantityMain>();
                                    lstNotProperRecords.ForEach(t =>
                                    {
                                        ToolAssetQuantityMain objToolAssetQuantityMain = new ToolAssetQuantityMain();
                                        objToolAssetQuantityMain.BinNumber = t.Location;
                                        objToolAssetQuantityMain.ToolName = t.ToolName;
                                        objToolAssetQuantityMain.Quantity = t.Quantity;
                                        objToolAssetQuantityMain.SerialNumber = (!string.IsNullOrWhiteSpace(t.SerialNumber)) ? t.SerialNumber.Trim() : string.Empty;
                                        objToolAssetQuantityMain.Status = "fail";
                                        objToolAssetQuantityMain.Reason = t.ErrorMessege;
                                        LstToolAssetQuantity.Add(objToolAssetQuantityMain);
                                    });

                                    if (LstToolAssetQuantity.Count() > 0)
                                    {
                                        allSuccesfulRecords = false;
                                    }

                                    SaveImportDataListSession<ToolAssetQuantityMain>(HasMoreRecords, true, LstToolAssetQuantity);


                                }
                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.MoveMaterial:
                            #region MoveMaterial

                            List<MoveMaterial> moveMaterialList = s.Deserialize<List<MoveMaterial>>(para);
                            DataTable DTMoveMaterialData = new DataTable();
                            List<MoveMaterial> lstMoveMaterialReturn = new List<MoveMaterial>();

                            if (moveMaterialList != null && moveMaterialList.Any())
                            {
                                DTMoveMaterialData = CommonUtilityHelper.ToDataTable(moveMaterialList);
                                lstMoveMaterialReturn = objImport.ImportMoveMaterial(DTMoveMaterialData, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
                            }

                            if (lstMoveMaterialReturn == null || lstMoveMaterialReturn.Count == 0)
                            {
                                lstMoveMaterialReturn = new List<MoveMaterial>();
                            }

                            if (lstMoveMaterialReturn.Count == 0)
                            {
                                message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                status = ResMessage.SaveMessage;
                                ClearCurrentResourceList();
                                if (HasMoreRecords == false)
                                    Session["importedData"] = null;
                            }
                            else
                            {
                                message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                status = ResMessage.SaveMessage;
                                var failRecords = lstMoveMaterialReturn.Where(l => l.Status != null && l.Status.ToLower() == "fail").ToList(); // show only failed records
                                SaveImportDataListSession<MoveMaterial>(HasMoreRecords, IsFirstCall, failRecords);
                            }

                            if (lstMoveMaterialReturn.Any() && lstMoveMaterialReturn.Where(l => l.Status != null && l.Status.ToLower() == "fail").Count() > 0)
                            {
                                allSuccesfulRecords = false;
                            }

                            #endregion
                            break;
                        case ImportMastersDTO.TableName.EnterpriseQuickList:
                            #region MoveMaterial

                            List<EnterpriseQLImport> enterpriseQLImports = s.Deserialize<List<EnterpriseQLImport>>(para);
                            foreach (var item in enterpriseQLImports)
                            {
                                if (item.Quantity != null && item.Quantity != 0)
                                    continue;
                                item.Quantity = 1;
                            }
                            DataTable DTEnterpriseQLData = new DataTable();
                            List<EnterpriseQLImport> lstEnterpriseQLReturn = new List<EnterpriseQLImport>();

                            if (enterpriseQLImports != null && enterpriseQLImports.Any())
                            {
                                DTEnterpriseQLData = CommonUtilityHelper.ToDataTable(enterpriseQLImports);
                                lstEnterpriseQLReturn = objImport.ImportEnterpriseQL(DTEnterpriseQLData, SessionHelper.EnterPriceID, SessionHelper.UserID);
                            }

                            if (lstEnterpriseQLReturn == null || lstEnterpriseQLReturn.Count == 0)
                                lstEnterpriseQLReturn = new List<EnterpriseQLImport>();

                            if (lstEnterpriseQLReturn.Count == 0)
                            {
                                message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                status = ResMessage.SaveMessage;
                                ClearCurrentResourceList();
                                if (HasMoreRecords == false)
                                    Session["importedData"] = null;
                            }
                            else
                            {
                                message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                status = ResMessage.SaveMessage;
                                var failRecords = lstEnterpriseQLReturn.Where(l => l.Status != null && l.Status.ToLower() == "fail").ToList(); // show only failed records
                                SaveImportDataListSession<MoveMaterial>(HasMoreRecords, IsFirstCall, failRecords);
                            }

                            if (lstEnterpriseQLReturn.Any() && lstEnterpriseQLReturn.Where(l => l.Status != null && l.Status.ToLower() == "fail").Count() > 0)
                                allSuccesfulRecords = false;

                            #endregion
                            break;
                        case ImportMastersDTO.TableName.Requisition:
                            #region Requisition
                            
                            string roleIdsToCheck = "65,66,67,85,29,47,143,40,49,46";
                            List<UserRoleModuleDetailsDTO> userRoleModuleDetailsDTO = new List<UserRoleModuleDetailsDTO>();
                            List<RequisitionImport> requisitionImport = s.Deserialize<List<RequisitionImport>>(para);                            
                            DataTable dtRequisitionImport = new DataTable();
                            List<RequisitionImport> lstreturnRequisition = new List<RequisitionImport>();
                            List<RequisitionImport> processesRequisition = new List<RequisitionImport>();
                            RequisitionMasterDAL requisitionMasterDAL = new RequisitionMasterDAL(SessionHelper.EnterPriseDBName);

                            if (SessionHelper.UserType == 1)
                                userRoleModuleDetailsDTO = new eTurnsMaster.DAL.UserMasterDAL().GetUserRoleModuleDetails(SessionHelper.UserID, SessionHelper.RoleID, SessionHelper.RoomID, SessionHelper.CompanyID, roleIdsToCheck);
                            else if (SessionHelper.UserType == 2 || SessionHelper.UserType == 3)
                                userRoleModuleDetailsDTO = new eTurns.DAL.UserMasterDAL(SessionHelper.EnterPriseDBName).GetUserRoleModuleDetails(SessionHelper.UserID, SessionHelper.RoleID, SessionHelper.RoomID, SessionHelper.CompanyID, roleIdsToCheck);

                            UserAccessDTO userAccess = null;

                            if (SessionHelper.UserType == 1)
                            {
                                eTurnsMaster.DAL.UserMasterDAL objUserdal = new eTurnsMaster.DAL.UserMasterDAL();
                                userAccess = objUserdal.GetUserRoomAccessesByUserId(SessionHelper.EnterPriceID, SessionHelper.CompanyID, SessionHelper.RoomID, SessionHelper.UserID);
                            }
                            else
                            {
                                eTurns.DAL.UserMasterDAL objUserdal = new eTurns.DAL.UserMasterDAL(SessionHelper.EnterPriseDBName);
                                userAccess = objUserdal.GetUserRoomAccessesByUserId(SessionHelper.EnterPriceID, SessionHelper.CompanyID, SessionHelper.RoomID, SessionHelper.UserID);
                            }

                            ValidateRequisitionImport(requisitionImport, userRoleModuleDetailsDTO, userAccess);

                            if (requisitionImport != null && requisitionImport.Any())
                            {
                                var validRequisitions = requisitionImport.Where(l => l.Status == null || l.Status.ToLower() != "fail").ToList();
                                var invalidRequisitions = requisitionImport.Where(l => l.Status != null && l.Status.ToLower().Equals("fail")).ToList();

                                if (validRequisitions != null && validRequisitions.Any() && validRequisitions.Count() > 0)
                                {
                                    dtRequisitionImport = CommonUtilityHelper.ToDataTable(validRequisitions);
                                    processesRequisition = objImport.ImportRequisition(dtRequisitionImport, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, "Import-Web");
                                }
                                
                                if (invalidRequisitions != null && invalidRequisitions.Any() && invalidRequisitions.Count() > 0)
                                {
                                    lstreturnRequisition.AddRange(invalidRequisitions);
                                }

                                if (processesRequisition != null && processesRequisition.Any() && processesRequisition.Count() > 0)
                                {
                                    lstreturnRequisition.AddRange(processesRequisition);
                                }

                                if (lstreturnRequisition != null && lstreturnRequisition.Any() && lstreturnRequisition.Count() > 0)
                                { 
                                    lstreturnRequisition = lstreturnRequisition.OrderBy(e=> e.Id).ToList();
                                }
                            }

                            if (lstreturnRequisition == null || lstreturnRequisition.Count == 0)
                            {
                                lstreturnRequisition = new List<RequisitionImport>();
                            }

                            try
                            {
                                if (lstreturnRequisition != null && lstreturnRequisition.Any() &&
                                    lstreturnRequisition.Where(l => l.Status == null || l.Status.ToLower() != "fail").Count() > 0)
                                {
                                    var successedRequisitions = lstreturnRequisition.Where(l => (l.Status == null || l.Status.ToLower() != "fail")
                                            && l.RequisitionId.GetValueOrDefault(0) > 0 && l.RequisitionGuid.GetValueOrDefault(Guid.Empty) != Guid.Empty).ToList().GroupBy(l => l.RequisitionId.GetValueOrDefault(0)).Select(g => g.First()).ToList();

                                    if (successedRequisitions != null && successedRequisitions.Any() && successedRequisitions.Count() > 0)
                                    {
                                        var consumeController = new ConsumeController();

                                        foreach (var requisition in successedRequisitions)
                                        {
                                            var objDTO = requisitionMasterDAL.GetRequisitionByIDFull(requisition.RequisitionId.GetValueOrDefault(0));

                                            if (objDTO != null && objDTO.ID > 0)
                                            {
                                                if (objDTO.RequisitionStatus == "Submitted")
                                                {
                                                    consumeController.SendMailToApprover(objDTO, "APPROVED");
                                                }
                                                if (objDTO.RequisitionStatus == "Approved")
                                                {
                                                    eTurns.DAL.UserMasterDAL userMasterDAL = new eTurns.DAL.UserMasterDAL(SessionHelper.EnterPriseDBName);
                                                    eTurnsMaster.DAL.UserMasterDAL objReqRequesterUserMasterDAL = new eTurnsMaster.DAL.UserMasterDAL();
                                                    UserMasterDTO ReqUser = new UserMasterDTO();

                                                    string ReqRequesterEmailAddress = SessionHelper.LoggedinUser.Email;//"";
                                                    string ReqApproverEmailAddress = SessionHelper.LoggedinUser.Email; //"";

                                                    #region commented

                                                    //if (objDTO.RequesterID.GetValueOrDefault(0) > 0)
                                                    //{
                                                    //    var t = SessionHelper.LoggedinUser.Email;
                                                    //    ReqUser = objReqRequesterUserMasterDAL.GetUserByIdPlain(objDTO.RequesterID.GetValueOrDefault(0));
                                                    //    if (ReqUser == null)
                                                    //    {
                                                    //        ReqUser = userMasterDAL.GetUserByIdPlain(objDTO.RequesterID.GetValueOrDefault(0));
                                                    //    }
                                                    //    if (ReqUser != null && !string.IsNullOrWhiteSpace(ReqUser.Email))
                                                    //    {
                                                    //        ReqRequesterEmailAddress = ReqUser.Email;
                                                    //    }
                                                    //}
                                                    //if (objDTO.ApproverID.GetValueOrDefault(0) > 0)
                                                    //{
                                                    //    ReqUser = objReqRequesterUserMasterDAL.GetUserByIdPlain(objDTO.ApproverID.GetValueOrDefault(0));
                                                    //    if (ReqUser == null)
                                                    //    {
                                                    //        ReqUser = userMasterDAL.GetUserByIdPlain(objDTO.ApproverID.GetValueOrDefault(0));
                                                    //    }
                                                    //    if (ReqUser != null && !string.IsNullOrWhiteSpace(ReqUser.Email))
                                                    //    {
                                                    //        ReqApproverEmailAddress = ReqUser.Email;
                                                    //    }
                                                    //}

                                                    #endregion

                                                    consumeController.SendMailForOrderAprOrRej(objDTO, "APPROVED", ReqRequesterEmailAddress, ReqApproverEmailAddress);
                                                }

                                                try
                                                {
                                                    string requisitionGUIDs = "<DataGuids>" + Convert.ToString(objDTO.GUID) + "</DataGuids>";
                                                    string eventName = "ORQC";
                                                    string eTurnsScheduleDBName = (Convert.ToString(ConfigurationManager.AppSettings["eTurnsScheduleDBName"]) ?? "eTurnsSchedule");
                                                    NotificationDAL objNotificationDAL = new NotificationDAL(SessionHelper.EnterPriseDBName);
                                                    List<NotificationDTO> lstNotification = objNotificationDAL.GetCurrentNotificationListByEventName(eventName, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);

                                                    if (lstNotification != null && lstNotification.Count > 0)
                                                    {
                                                        objNotificationDAL.SendMailForImmediate(lstNotification, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, SessionHelper.EnterPriceID, eTurnsScheduleDBName, requisitionGUIDs);
                                                        //Session["REQEvent"] = "";
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    CommonUtility.LogError(ex, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.EnterPriceID);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            catch(Exception ex)
                            {
                                
                            }
                            finally
                            {
                                if (lstreturnRequisition.Count == 0)
                                {
                                    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                    status = ResMessage.SaveMessage;
                                    ClearCurrentResourceList();
                                    if (HasMoreRecords == false)
                                        Session["importedData"] = null;
                                }
                                else
                                {
                                    message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                    status = ResMessage.SaveMessage;
                                    var failRecords = lstreturnRequisition.Where(l => l.Status != null && l.Status.ToLower() == "fail").ToList(); // show only failed records
                                    SaveImportDataListSession<RequisitionImport>(HasMoreRecords, IsFirstCall, failRecords);
                                }

                                if (lstreturnRequisition.Any() && lstreturnRequisition.Where(l => l.Status != null && l.Status.ToLower() == "fail").Count() > 0)
                                {
                                    allSuccesfulRecords = false;
                                }
                            }

                            #endregion
                            break;
                        case ImportMastersDTO.TableName.QuoteMaster:
                            #region QuoteMaster
                             
                            {
                                QuoteMasterDAL objQutDAL = new QuoteMasterDAL(SessionHelper.EnterPriseDBName);
                                SupplierMasterDAL objSupplierMasterDAL = new SupplierMasterDAL(SessionHelper.EnterPriseDBName);
                                List<QuoteMasterItemsMain> CurrentBlankQuickListItemsMain = new List<QuoteMasterItemsMain>();
                                QuoteMasterItemsMain[] LstQuoteMasterItemsMain = s.Deserialize<QuoteMasterItemsMain[]>(para);
                                 
                                if (LstQuoteMasterItemsMain != null && LstQuoteMasterItemsMain.Length > 0)
                                {
                                    string RoleCheck = "148,149,150";
                                    List<UserRoleModuleDetailsDTO> objUserRoleModuleDetailsDTO = new List<UserRoleModuleDetailsDTO>();
                                    if (SessionHelper.UserType == 1)
                                        objUserRoleModuleDetailsDTO = new eTurnsMaster.DAL.UserMasterDAL().GetUserRoleModuleDetails(SessionHelper.UserID, SessionHelper.RoleID, SessionHelper.RoomID, SessionHelper.CompanyID, RoleCheck);
                                    else if (SessionHelper.UserType == 2 || SessionHelper.UserType == 3)
                                        objUserRoleModuleDetailsDTO = new eTurns.DAL.UserMasterDAL(SessionHelper.EnterPriseDBName).GetUserRoleModuleDetails(SessionHelper.UserID, SessionHelper.RoleID, SessionHelper.RoomID, SessionHelper.CompanyID, RoleCheck);

                                    CommonDAL objCommonDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
                                    List<QuoteMasterItemsMain> lstreturn = objCommonDAL.InsertQuoteImport(LstQuoteMasterItemsMain.ToList(), SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.EnterPriseDBName, SessionHelper.UserID, SessionHelper.RoomDateFormat, SessionHelper.RoomCulture, objUserRoleModuleDetailsDTO, SessionUserId,SessionHelper.EnterPriceID);
                                    List<QuoteMasterItemsMain> lstQuote = lstreturn;

                                    #region Quote Email Send
                                    if (lstQuote != null && lstQuote.Count > 0)
                                    {

                                        QuoteController objQutContlr = new QuoteController();
                                        lstQuote = lstQuote.Where(x => x.Status.ToLower() == "success" && x.QuoteGUID != Guid.Empty).ToList();
                                        List<string> LstQuoteGUID = lstQuote.Select(x => x.QuoteGUID.ToString()).Distinct().ToList();
                                        foreach (string strQuoteGUID in LstQuoteGUID)
                                        {
                                            QuoteMasterDTO objDTO = objQutDAL.GetQuoteByGuidNormal(Guid.Parse(strQuoteGUID));
                                            if (objDTO != null)
                                            {
                                                if (objDTO.QuoteStatus == (int)QuoteStatus.UnSubmitted)
                                                {
                                                    objQutContlr.SendMailQuoteUnSubmitted( objDTO);
                                                }
                                                if (objDTO.QuoteStatus == (int)QuoteStatus.Submitted)
                                                {
                                                    objQutContlr.SendMailToApprovalAuthority(objDTO);
                                                }
                                                if (objDTO.QuoteStatus == (int)QuoteStatus.Approved || objDTO.QuoteStatus == (int)QuoteStatus.Transmitted)
                                                {
                                                    eTurns.DAL.UserMasterDAL userMasterDAL = new eTurns.DAL.UserMasterDAL(SessionHelper.EnterPriseDBName);
                                                    eTurnsMaster.DAL.UserMasterDAL objReqRequesterUserMasterDAL = new eTurnsMaster.DAL.UserMasterDAL();
                                                    UserMasterDTO ReqUser = new UserMasterDTO();

                                                    string QutRequesterEmailAddress = "";
                                                    string QutApproverEmailAddress = "";
                                                    if (objDTO.RequesterID.GetValueOrDefault(0) > 0)
                                                    {
                                                        ReqUser = objReqRequesterUserMasterDAL.GetUserByIdPlain(objDTO.RequesterID.GetValueOrDefault(0));
                                                        if (ReqUser == null)
                                                        {
                                                            ReqUser = userMasterDAL.GetUserByIdPlain(objDTO.RequesterID.GetValueOrDefault(0));
                                                        }
                                                        if (ReqUser != null && !string.IsNullOrWhiteSpace(ReqUser.Email))
                                                        {
                                                            QutRequesterEmailAddress = ReqUser.Email;
                                                        }
                                                    }
                                                    if (objDTO.ApproverID.GetValueOrDefault(0) > 0)
                                                    {
                                                        ReqUser = objReqRequesterUserMasterDAL.GetUserByIdPlain(objDTO.ApproverID.GetValueOrDefault(0));
                                                        if (ReqUser == null)
                                                        {
                                                            ReqUser = userMasterDAL.GetUserByIdPlain(objDTO.ApproverID.GetValueOrDefault(0));
                                                        }
                                                        if (ReqUser != null && !string.IsNullOrWhiteSpace(ReqUser.Email))
                                                        {
                                                            QutApproverEmailAddress = ReqUser.Email;
                                                        }
                                                    }

                                                    objDTO.QuoteSupplierIdsCSV =   lstQuote.Where(x => x.QuoteGUID == objDTO.GUID).FirstOrDefault().QuoteSupplierIdsCSV;
                                                    objQutContlr.SendMailToSupplier(objDTO);
                                                    objQutContlr.SendMailForQuoteApprovedOrReject(objDTO, "approved", QutRequesterEmailAddress, QutApproverEmailAddress);
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    if (lstreturn.Count == 0)
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        ClearCurrentResourceList();
                                        if (HasMoreRecords == false)
                                            Session["importedData"] = null;
                                    }
                                    else
                                    {
                                        message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                        status = ResMessage.SaveMessage;
                                        SaveImportDataListSession<QuoteMasterItemsMain>(HasMoreRecords, IsFirstCall, lstreturn);
                                        //Session["importedData"] = lstreturn;
                                    }
                                    if (lstreturn.Count() != lstreturn.Where(l => l.Status != null && l.Status.ToLower() == "success").Count())
                                    {
                                        allSuccesfulRecords = false;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case ImportMastersDTO.TableName.SupplierCatalog:
                            #region Supplier Catalog

                            List<SupplierCatalogImport> supplierCatalogImport = s.Deserialize<List<SupplierCatalogImport>>(para);
                            DataTable dtSuuplierCatalogImport = new DataTable();
                            DataTable dtSupplierCatelogImport = new DataTable();
                            List<SupplierCatalogImport> lstreturnSupplierCatalog = new List<SupplierCatalogImport>();
                            List<SupplierCatalogImport> processesSupplierCatalog = new List<SupplierCatalogImport>();
                            ValidateSupplierCatalog(supplierCatalogImport);

                            if (supplierCatalogImport != null && supplierCatalogImport.Any() && supplierCatalogImport.Count > 0)
                            {
                                var validSupplierCatalog = supplierCatalogImport.Where(l => l.Status == null || l.Status.ToLower() != "fail").ToList();
                                var invalidSupplierCatalog = supplierCatalogImport.Where(l => l.Status != null && l.Status.ToLower().Equals("fail")).ToList();

                                if (validSupplierCatalog != null && validSupplierCatalog.Any() && validSupplierCatalog.Count() > 0)
                                {
                                    dtRequisitionImport = CommonUtilityHelper.ToDataTable(validSupplierCatalog);
                                    processesSupplierCatalog = objImport.ImportSupplierCatalog(dtRequisitionImport);
                                }

                                if (invalidSupplierCatalog != null && invalidSupplierCatalog.Any() && invalidSupplierCatalog.Count() > 0)
                                {
                                    lstreturnSupplierCatalog.AddRange(invalidSupplierCatalog);
                                }

                                if (processesSupplierCatalog != null && processesSupplierCatalog.Any() && processesSupplierCatalog.Count() > 0)
                                {
                                    lstreturnSupplierCatalog.AddRange(processesSupplierCatalog);
                                }

                                if (lstreturnSupplierCatalog != null && lstreturnSupplierCatalog.Any() && lstreturnSupplierCatalog.Count() > 0)
                                {
                                    lstreturnSupplierCatalog = lstreturnSupplierCatalog.OrderBy(e => e.Id).ToList();
                                    savedOnlyitemIds = string.Join(",", processesSupplierCatalog.Where(i => i.Id != 0 && i.Status != "fail" && (!string.IsNullOrEmpty(i.ImagePath))).Select(p => p.Id.ToString() + "#" + p.ImagePath.ToString()));
                                }
                            }

                            if (lstreturnSupplierCatalog == null || lstreturnSupplierCatalog.Count == 0)
                            {
                                lstreturnSupplierCatalog = new List<SupplierCatalogImport>();
                            }

                            if (lstreturnSupplierCatalog.Count == 0)
                            {
                                message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                status = ResMessage.SaveMessage;
                                ClearCurrentResourceList();
                                if (HasMoreRecords == false)
                                    Session["importedData"] = null;
                            }
                            else
                            {

                                message = string.Format(ResMessage.SaveMessage, HttpStatusCode.OK);
                                status = ResMessage.SaveMessage;
                                var failRecords = lstreturnSupplierCatalog.Where(l => l.Status != null && l.Status.ToLower() == "fail").ToList(); // show only failed records
                                SaveImportDataListSession<SupplierCatalogImport>(HasMoreRecords, IsFirstCall, failRecords);
                            }

                            if (lstreturnSupplierCatalog.Any() && lstreturnSupplierCatalog.Where(l => l.Status != null && l.Status.ToLower() == "fail").Count() > 0)
                            {
                                allSuccesfulRecords = false;
                            }

                            #endregion
                            break;
                    } // switch

                    if (ImportMastersDTO.TableName.ItemMaster.ToString() == TableName)
                    {
                        //Suggested Order calling for the particullar imported items...

                        if (ImportMastersDTO.TableName.ItemMaster.ToString() == TableName)
                        {
                            QuickBookItemDAL objQBItemDAL = new QuickBookItemDAL(SessionHelper.EnterPriseDBName);
                            foreach (Guid gid in lstItemGUID)
                            {
                                //new CartItemDAL(SessionHelper.EnterPriseDBName).AutoCartUpdateByCode(gid, SessionHelper.UserID, "Web", "ImportControler>> SaveImport");
                                new CartItemDAL(SessionHelper.EnterPriseDBName).AutoCartUpdateByCode(gid, SessionHelper.UserID, "Web", "BulkImport >> Import Item", SessionUserId);

                                new ItemMasterDAL(SessionHelper.EnterPriseDBName).GetAndUpdateExtCostAndAvgCost(gid, SessionHelper.RoomID, SessionHelper.CompanyID);
                                new DashboardDAL(SessionHelper.EnterPriseDBName).SetItemsAutoClassification(gid, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, 1);
                                //objQBItemDAL.InsertQuickBookItem(gid, SessionHelper.EnterPriceID, SessionHelper.CompanyID, SessionHelper.RoomID, "Update", false, SessionHelper.UserID, "Web", null, "BulkImport >> Import Item");
                                //ItemMasterDAL objItemMasterLeveQuantityDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                                //ItemMasterDTO objItemLeveQuantity = new ItemMasterDTO();
                                //objItemLeveQuantity = objItemMasterLeveQuantityDAL.GetRecord(gid.ToString(), eTurnsWeb.Helper.SessionHelper.RoomID, eTurnsWeb.Helper.SessionHelper.CompanyID);
                                //if (objItemLeveQuantity!=null && objItemLeveQuantity.DefaultLocation > 0)
                                //{ 
                                //ImportDAL objImporLoctDAL=new ImportDAL(SessionHelper.EnterPriseDBName);
                                //objImporLoctDAL.SaveItemLocationLevelQuantity(objItemLeveQuantity, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
                                //}
                            }
                        }

                        //call default supplier function
                        ItemMasterDAL objItemMasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                        //objItemMasterDAL.UpdateSupplierDetails(SessionHelper.CompanyID, SessionHelper.RoomID, SessionHelper.UserID);

                        CacheHelper<IEnumerable<BinMasterDTO>>.InvalidateCache();
                        //(new BinMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false);

                        CacheHelper<IEnumerable<CategoryMasterDTO>>.InvalidateCache();
                        //(new CategoryMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);


                        //CacheHelper<IEnumerable<GLAccountMasterDTO>>.InvalidateCache();
                        //(new GLAccountMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);


                        CacheHelper<IEnumerable<JobTypeMasterDTO>>.InvalidateCache();
                        //(new JobTypeMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false);


                        CacheHelper<IEnumerable<ManufacturerMasterDTO>>.InvalidateCache();
                        //(new ManufacturerMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);


                        CacheHelper<IEnumerable<UnitMasterDTO>>.InvalidateCache();
                        //(new UnitMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);


                        CacheHelper<IEnumerable<SupplierMasterDTO>>.InvalidateCache();
                        //(new SupplierMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);

                        CacheHelper<IEnumerable<UnitMasterDTO>>.InvalidateCache();
                        //(new UnitMasterDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID, false, false, false);

                        CacheHelper<IEnumerable<ItemManufacturerDetailsDTO>>.InvalidateCache();
                        (new ItemManufacturerDetailsDAL(SessionHelper.EnterPriseDBName)).GetItemManufacturerByRoomNormal(0, SessionHelper.CompanyID);

                        CacheHelper<IEnumerable<ItemSupplierDetailsDTO>>.InvalidateCache();
                        //(new ItemSupplierDetailsDAL(SessionHelper.EnterPriseDBName)).GetCachedData(0, SessionHelper.CompanyID);
                        //   CacheHelper<IEnumerable<ItemLocationLevelQuanityDTO>>.InvalidateCache();
                        //   (new ItemLocationLevelQuanityDAL()).GetCachedData(0, SessionHelper.CompanyID);
                        //Regenerate Cache for items only..

                        //CacheHelper<IEnumerable<ItemMasterDTO>>.InvalidateCache();
                        //objItemMasterDAL.GetCachedData(0, SessionHelper.CompanyID);
                    }

                }
                #endregion

                //assume success here and clear Cache for this company
                //GenerateCacheController objCache = new GenerateCacheController();
                //objCache.GenerateCacheCompany(SessionHelper.UserID, SessionHelper.CompanyID);

            }
            catch (Exception ex)
            {
                message = string.Format(ResMessage.SaveErrorMsg, HttpStatusCode.ExpectationFailed);// "(" + hrmResult.StatusCode + ") Error! Record Not Saved";
                status = "fail";
                allSuccesfulRecords = false;
            }
            finally
            {

                // resHelper = null;
            }
            var jsonResult = Json(new { Message = message, Status = status, allSuccesfulRecords = allSuccesfulRecords, savedOnlyitemIds = savedOnlyitemIds, savedItemIdsWithLink2 = savedItemIdsWithLink2, savedItemGuids = savedItemGuids }, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;

            return jsonResult;
        }

        public void SaveImportDataListSession<t>(bool HasMoreRecords, bool IsFirstCall, object lstreturn)
        {

            ImportBAL.SaveImportDataListSession<t>(HasMoreRecords, IsFirstCall, lstreturn);

            //if (HasMoreRecords == true)
            //{
            //    List<t> lst1 = null;
            //    List<t> lst2 = (List<t>)lstreturn;

            //    if (IsFirstCall == true)
            //        lst1 = new List<t>();
            //    else
            //        lst1 = (List<t>)Session["importedData"];

            //    lst1 = lst1.Union(lst2).ToList();
            //    foreach (var obj in lst1)
            //    {
            //        string value = string.Empty;
            //        foreach (PropertyInfo pi in ((t)obj).GetType().GetProperties().Where(x => x.PropertyType == typeof(string)))
            //        {
            //            value = pi.GetValue(obj, null) as string;
            //            if (!string.IsNullOrEmpty(value))
            //                pi.SetValue(obj, Convert.ChangeType(HttpUtility.HtmlEncode(value), pi.PropertyType), null);
            //        }
            //    }
            //    Session["importedData"] = lst1.ToList();
            //}
            //else
            //{
            //    foreach (var obj in (List<t>)lstreturn)
            //    {
            //        string value = string.Empty;
            //        foreach (PropertyInfo pi in ((t)obj).GetType().GetProperties().Where(x => x.PropertyType == typeof(string)))
            //        {
            //            value = pi.GetValue(obj, null) as string;
            //            if (!string.IsNullOrEmpty(value))
            //                pi.SetValue(obj, Convert.ChangeType(HttpUtility.HtmlEncode(value), pi.PropertyType), null);
            //        }
            //    }
            //    Session["importedData"] = lstreturn;
            //}
        }

        #region WI-4991

        public InventoryCountDTO InsertCount(string CountType)
        {
            string strDateFormat = "MM/dd/yyyy";
            RegionSettingDAL objRegionSettingDAL = new RegionSettingDAL(SessionHelper.EnterPriseDBName);
            DateTime datetimetoConsider = objRegionSettingDAL.GetCurrentDatetimebyTimeZone(SessionHelper.RoomID, SessionHelper.CompanyID, 0);

            eTurnsRegionInfo objeTurnsRegionInfo = new eTurnsRegionInfo();
            objeTurnsRegionInfo = objRegionSettingDAL.GetRegionSettingsById(SessionHelper.RoomID, SessionHelper.CompanyID, 0);
            if (objeTurnsRegionInfo != null && !string.IsNullOrEmpty(objeTurnsRegionInfo.ShortDatePattern) && objeTurnsRegionInfo.ShortDatePattern.Equals("yy/m/d"))
            {
                strDateFormat = "yyyy/MM/dd";
            }

            RoomDTO obj = new RoomDTO();
            RoomDAL objDAL = new RoomDAL(SessionHelper.EnterPriseDBName);
            CommonDAL objCommonDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
            string AutoCountNumber = string.Empty;
            //obj = objDAL.GetRoomByIDPlain(SessionHelper.RoomID);
            string columnList = "ID,RoomName,CountAutoSequence,NextCountNo";
            obj = objCommonDAL.GetSingleRecord<RoomDTO>(columnList, "Room", "ID = " + SessionHelper.RoomID.ToString() + "", "");
            if (obj != null)
            {
                Int64 iNextNo = 0;
                if (obj.CountAutoSequence == null || obj.CountAutoSequence <= 0)
                    obj.CountAutoSequence = 3;
                switch (obj.CountAutoSequence.GetValueOrDefault(0))
                {
                    case 0:
                        AutoCountNumber = string.Empty;
                        break;
                    case 3: //Increamenting by Count#
                        Int64.TryParse(Convert.ToString(obj.NextCountNo), out iNextNo);
                        iNextNo = iNextNo + 1;
                        AutoCountNumber = Convert.ToString(iNextNo);
                        break;
                    case 5: //Date + Incrementing#                       
                        Int64.TryParse(obj.NextCountNo, out iNextNo);
                        iNextNo = iNextNo + 1;
                        AutoCountNumber = datetimetoConsider.ToString(strDateFormat) + "-" + iNextNo.ToString();
                        break;
                    case 6: //Date
                        AutoCountNumber = datetimetoConsider.ToString(strDateFormat);
                        break;
                }
            }

            InventoryCountDAL objInventoryCountDAL = new InventoryCountDAL(SessionHelper.EnterPriseDBName);
            InventoryCountDTO objInventoryCountDTO = new InventoryCountDTO();
            if (CountType.ToLower().Equals("m"))
            {
                objInventoryCountDTO.AddedFrom = "Manual Import";
            }
            else
            {
                objInventoryCountDTO.AddedFrom = "Adjustment Import";
            }
            objInventoryCountDTO.CompanyId = SessionHelper.CompanyID;
            objInventoryCountDTO.CompleteCauseCountGUID = null;
            objInventoryCountDTO.CountCompletionDate = null;
            objInventoryCountDTO.CountDate = datetimetoConsider;
            objInventoryCountDTO.CountItemDescription = string.Empty;
            objInventoryCountDTO.CountName = AutoCountNumber.ToString();
            objInventoryCountDTO.CountStatus = "O";
            objInventoryCountDTO.CountType = CountType;
            objInventoryCountDTO.Created = DateTime.UtcNow;
            objInventoryCountDTO.CreatedBy = SessionHelper.UserID;
            objInventoryCountDTO.EditedFrom = objInventoryCountDTO.AddedFrom;
            objInventoryCountDTO.GUID = Guid.NewGuid();
            objInventoryCountDTO.ID = 0;
            objInventoryCountDTO.IsArchived = false;
            objInventoryCountDTO.IsClosed = false;
            objInventoryCountDTO.IsDeleted = false;
            objInventoryCountDTO.LastUpdatedBy = SessionHelper.UserID;
            objInventoryCountDTO.ReceivedOn = DateTime.UtcNow;
            objInventoryCountDTO.ReceivedOnWeb = DateTime.UtcNow;
            objInventoryCountDTO.RoomId = SessionHelper.RoomID;
            objInventoryCountDTO.UDF1 = "";
            objInventoryCountDTO.UDF2 = "";
            objInventoryCountDTO.UDF3 = "";
            objInventoryCountDTO.UDF4 = "";
            objInventoryCountDTO.UDF5 = "";
            objInventoryCountDTO.Updated = DateTime.UtcNow;
            objInventoryCountDTO.Year = (short)DateTime.UtcNow.Year;
            return objInventoryCountDAL.SaveInventoryCountForImport(objInventoryCountDTO);

        }

        public bool AddItemToCountAndReturnDetailGUID(Guid? CountGuid, Guid? ItemGUID, long? BinId, double? ConsignedQuantity, double? CustomerOwnedQuantity, bool? IsStagingLocationCount, double? ItemLocationCoQty, double? ItemLocationConQty, string UDF1, string UDF2, string UDF3, string UDF4, string UDF5, string CountLineItemDescription, int? ItemType, bool SaveCountLineItemDetail, Guid? ProjectSpendGUID, out Guid CountDetailGUID, List<CountLineItemDetailDTO> lstCountLineItemDetail = null)
        {
            InventoryCountDAL objInventoryCountDAL = new InventoryCountDAL(SessionHelper.EnterPriseDBName);
            InventoryCountDTO objInventoryCountDTO = new InventoryCountDTO();
            objInventoryCountDTO = objInventoryCountDAL.GetInventoryCountByGUId(CountGuid ?? Guid.NewGuid(), SessionHelper.RoomID, SessionHelper.CompanyID);
            List<InventoryCountDetailDTO> lstInventoryCountDetail = objInventoryCountDAL.GetAllLineItemsWithinCount(objInventoryCountDTO.ID);
            InventoryCountDetailDTO objInventoryCountDetailDTO = new InventoryCountDetailDTO();
            CountDetailGUID = Guid.Empty;

            if ((ItemType ?? 0) == 1 || (ItemType ?? 0) == 3)
            {
                if (lstInventoryCountDetail != null && lstInventoryCountDetail.Where(x => x.ItemGUID == ItemGUID && x.BinID == BinId && x.IsApplied == false).Count() <= 0)
                {
                    BinMasterDTO objBinMasterDTO = new BinMasterDAL(SessionHelper.EnterPriseDBName).GetBinByID(BinId ?? 0, SessionHelper.RoomID, SessionHelper.CompanyID);
                    objInventoryCountDetailDTO.BinGUID = objBinMasterDTO.GUID;
                    objInventoryCountDetailDTO.BinID = objBinMasterDTO.ID;
                    objInventoryCountDetailDTO.BinNumber = objBinMasterDTO.BinNumber;
                    objInventoryCountDetailDTO.CompanyId = SessionHelper.CompanyID;
                    objInventoryCountDetailDTO.ConsignedQuantity = 0;
                    objInventoryCountDetailDTO.CountConsignedQuantity = ConsignedQuantity;
                    objInventoryCountDetailDTO.CountCustomerOwnedQuantity = CustomerOwnedQuantity;
                    objInventoryCountDetailDTO.CountDate = objInventoryCountDTO.CountDate;
                    objInventoryCountDetailDTO.CountItemStatus = string.Empty;
                    objInventoryCountDetailDTO.CountLineItemDescription = HttpUtility.UrlDecode(CountLineItemDescription);
                    objInventoryCountDetailDTO.CountName = objInventoryCountDTO.CountName;
                    objInventoryCountDetailDTO.CountQuantity = 0;
                    objInventoryCountDetailDTO.CountStatus = objInventoryCountDTO.CountStatus;
                    objInventoryCountDetailDTO.CountType = objInventoryCountDTO.CountType;
                    objInventoryCountDetailDTO.Created = DateTimeUtility.DateTimeNow;
                    objInventoryCountDetailDTO.CreatedBy = SessionHelper.UserID;
                    objInventoryCountDetailDTO.CreatedByName = SessionHelper.UserName;
                    objInventoryCountDetailDTO.CustomerOwnedQuantity = 0;
                    objInventoryCountDetailDTO.GUID = Guid.NewGuid();
                    objInventoryCountDetailDTO.ID = 0;
                    objInventoryCountDetailDTO.InventoryCountGUID = objInventoryCountDTO.GUID;
                    objInventoryCountDetailDTO.IsStagingLocationCount = IsStagingLocationCount ?? false;
                    objInventoryCountDetailDTO.IsApplied = false;
                    objInventoryCountDetailDTO.IsArchived = false;
                    objInventoryCountDetailDTO.IsClosed = false;
                    objInventoryCountDetailDTO.IsDeleted = false;
                    objInventoryCountDetailDTO.ItemGUID = ItemGUID ?? Guid.NewGuid();
                    objInventoryCountDetailDTO.LastUpdatedBy = SessionHelper.UserID;
                    objInventoryCountDetailDTO.RoomId = SessionHelper.RoomID;
                    objInventoryCountDetailDTO.RoomName = SessionHelper.RoomName;
                    objInventoryCountDetailDTO.UDF1 = HttpUtility.UrlDecode(UDF1) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF1);
                    objInventoryCountDetailDTO.UDF2 = HttpUtility.UrlDecode(UDF2) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF2);
                    objInventoryCountDetailDTO.UDF3 = HttpUtility.UrlDecode(UDF3) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF3);
                    objInventoryCountDetailDTO.UDF4 = HttpUtility.UrlDecode(UDF4) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF4);
                    objInventoryCountDetailDTO.UDF5 = HttpUtility.UrlDecode(UDF5) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF5);
                    objInventoryCountDetailDTO.Updated = DateTimeUtility.DateTimeNow;
                    objInventoryCountDetailDTO.UpdatedByName = SessionHelper.UserName;
                    objInventoryCountDetailDTO.AddedFrom = "Web";
                    objInventoryCountDetailDTO.EditedFrom = "Web";
                    objInventoryCountDetailDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                    objInventoryCountDetailDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                    objInventoryCountDetailDTO.IsOnlyFromItemUI = true;
                    objInventoryCountDetailDTO.ProjectSpendGUID = objInventoryCountDTO.ProjectSpendGUID;

                    try
                    {
                        objInventoryCountDAL.SaveInventoryCountLineItem(objInventoryCountDetailDTO, SaveCountLineItemDetail, lstCountLineItemDetail);
                        CountDetailGUID = objInventoryCountDetailDTO.GUID;
                    }
                    catch
                    {
                        CountDetailGUID = Guid.Empty;
                    }
                }
            }
            return true;
        }

        public void AddUpdateLotDetailPopupForCount(List<CountLineItemDetailDTO> lstCountLineItemDetail)
        {
            CommonDAL cmnDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
            InventoryCountDAL objInventoryCountDAL = new InventoryCountDAL(SessionHelper.EnterPriseDBName);
            List<CountLineItemDetailDTO> lstCountLineItemDetailTmp = new List<CountLineItemDetailDTO>();
            int ValidItemCount = 0;
            Guid? CountDetailGUID = null;
            Guid ItemGUID = Guid.Empty;
            long BinId = 0;
            bool IsAdd = false;
            bool IsUpdate = false;

            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
            {
                //--------------------------------------------------
                //
                BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                //---------------VALIDATE COUNT LINE ITEM LIST AND CHECK FOR ADD OR UPDATE---------------
                //
                foreach (CountLineItemDetailDTO objCountLineItemDetailDTO in lstCountLineItemDetail)
                {
                    objCountLineItemDetailDTO.IsValidObject = true;

                    //------------------------------------------------------------------------
                    //
                    objCountLineItemDetailDTO.BinNumber = objCountLineItemDetailDTO.BinNumber.Trim();

                    if (objCountLineItemDetailDTO.DateCodeTracking == true)
                    {
                        objCountLineItemDetailDTO.Expiration = objCountLineItemDetailDTO.ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat);

                        if ((objCountLineItemDetailDTO.SerialNumberTracking == true || objCountLineItemDetailDTO.LotNumberTracking == true)
                                && objCountLineItemDetailDTO.LotSerialNumber.Contains('-') && objCountLineItemDetailDTO.LotSerialNumber.Contains('/'))
                        {
                            objCountLineItemDetailDTO.LotSerialNumber = objCountLineItemDetailDTO.LotSerialNumber.Substring(0, objCountLineItemDetailDTO.LotSerialNumber.LastIndexOf('-'));
                        }
                    }
                    else
                        objCountLineItemDetailDTO.Expiration = "";

                    if (objCountLineItemDetailDTO.SerialNumberTracking == true)
                    {
                        objCountLineItemDetailDTO.SerialNumber = objCountLineItemDetailDTO.LotSerialNumber;
                        objCountLineItemDetailDTO.LotNumber = "";
                    }
                    else if (objCountLineItemDetailDTO.LotNumberTracking == true)
                    {
                        objCountLineItemDetailDTO.SerialNumber = "";
                        objCountLineItemDetailDTO.LotNumber = objCountLineItemDetailDTO.LotSerialNumber;
                    }

                    //-----------------------INSERT NEW BIN IF REQUIRED-----------------------
                    //

                    BinMasterDTO objBinDTO = objBinMasterDAL.GetItemBinPlain(objCountLineItemDetailDTO.ItemGUID.Value, objCountLineItemDetailDTO.BinNumber, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, objCountLineItemDetailDTO.IsStagingLocationCount.GetValueOrDefault(false));
                    if (objBinDTO != null && objBinDTO.ID > 0)
                    {
                        objCountLineItemDetailDTO.BinID = objBinDTO.ID;
                    }

                    //-------------------------SET QUANTITY-------------------------
                    //
                    if (objCountLineItemDetailDTO.Consignment == true && objCountLineItemDetailDTO.IsConsigned == true)
                    {
                        objCountLineItemDetailDTO.CountCustomerOwnedQuantity = (-0.000000001);
                        objCountLineItemDetailDTO.CountConsignedQuantity = (objCountLineItemDetailDTO.CountConsignedQuantity != null ? objCountLineItemDetailDTO.CountConsignedQuantity : (-0.000000001));
                    }
                    else if (objCountLineItemDetailDTO.Consignment == true && objCountLineItemDetailDTO.IsConsigned == false)
                    {
                        objCountLineItemDetailDTO.CountCustomerOwnedQuantity = (objCountLineItemDetailDTO.CountCustomerOwnedQuantity != null ? objCountLineItemDetailDTO.CountCustomerOwnedQuantity : (-0.000000001));
                        objCountLineItemDetailDTO.CountConsignedQuantity = (-0.000000001);
                    }
                    else
                    {
                        objCountLineItemDetailDTO.CountCustomerOwnedQuantity = objCountLineItemDetailDTO.CountCustomerOwnedQuantity;
                        objCountLineItemDetailDTO.CountConsignedQuantity = (-0.000000001);
                    }

                    //-------------------------CHECK FOR ADD OR EDIT-------------------------
                    //
                    if (objInventoryCountDAL.GetCountDetailGUIDByItemGUIDBinID(objCountLineItemDetailDTO.CountGUID.Value, objCountLineItemDetailDTO.ItemGUID.Value, objCountLineItemDetailDTO.BinID.Value, out CountDetailGUID))
                    {
                        if (CountDetailGUID != null && CountDetailGUID != Guid.Empty)
                        {
                            objCountLineItemDetailDTO.CountDetailGUID = CountDetailGUID;
                            objCountLineItemDetailDTO.IsAdd = false;
                            objCountLineItemDetailDTO.IsUpdate = true;
                            ValidItemCount = ValidItemCount + 1;
                        }
                        else
                        {
                            objCountLineItemDetailDTO.CountDetailGUID = null;
                            objCountLineItemDetailDTO.IsAdd = true;
                            objCountLineItemDetailDTO.IsUpdate = false;
                            ValidItemCount = ValidItemCount + 1;
                        }
                    }
                    else
                    {
                        objCountLineItemDetailDTO.IsAdd = false;
                        objCountLineItemDetailDTO.IsUpdate = false;
                    }
                }
                lstCountLineItemDetail = (from A in lstCountLineItemDetail where A.IsValidObject == true orderby A.ItemGUID, A.BinID select A).ToList();

                //-------------------------------------------------------------------
                //
                if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0 && ValidItemCount > 0)
                {
                    //-------------------------------------------------------------------
                    //
                    foreach (CountLineItemDetailDTO objCountLineItemDetailDTO in lstCountLineItemDetail)
                    {
                        if (ItemGUID != Guid.Empty && BinId != 0 && lstCountLineItemDetailTmp.Count > 0 &&
                            (objCountLineItemDetailDTO.ItemGUID != ItemGUID || objCountLineItemDetailDTO.BinID != BinId))
                        {
                            if (IsAdd == true)
                                SaveLotDetailPopupForCountAdd(lstCountLineItemDetailTmp);
                            else if (IsUpdate == true)
                                SaveLotDetailPopupForCountUpdate(lstCountLineItemDetailTmp);

                            lstCountLineItemDetailTmp = new List<CountLineItemDetailDTO>();
                        }

                        lstCountLineItemDetailTmp.Add(objCountLineItemDetailDTO);
                        IsAdd = objCountLineItemDetailDTO.IsAdd.Value;
                        IsUpdate = objCountLineItemDetailDTO.IsUpdate.Value;
                        ItemGUID = objCountLineItemDetailDTO.ItemGUID.Value;
                        BinId = objCountLineItemDetailDTO.BinID.Value;
                    }

                    if (lstCountLineItemDetailTmp.Count > 0)
                    {
                        if (IsAdd == true)
                            SaveLotDetailPopupForCountAdd(lstCountLineItemDetailTmp);
                        else if (IsUpdate == true)
                            SaveLotDetailPopupForCountUpdate(lstCountLineItemDetailTmp);
                    }

                    //-------------------------------------------------------------------
                    //
                }
            }
        }

        public bool SaveLotDetailPopupForCountAdd(List<CountLineItemDetailDTO> lstCountLineItemDetail)
        {
            Guid CountGUID = Guid.Empty;
            Guid CountDetailGUID = Guid.Empty;
            double? ConsignedQuantity = 0;
            double? CustomerOwnedQuantity = 0;
            InventoryCountDAL objInventoryCountDAL = new InventoryCountDAL(SessionHelper.EnterPriseDBName);

            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
            {
                //-------------------------------------------------------------------
                //
                ConsignedQuantity = (from A in lstCountLineItemDetail select (A.CountConsignedQuantity < 0 ? 0 : A.CountConsignedQuantity)).Sum();
                CustomerOwnedQuantity = (from A in lstCountLineItemDetail select (A.CountCustomerOwnedQuantity < 0 ? 0 : A.CountCustomerOwnedQuantity)).Sum();

                if (ConsignedQuantity < 0)
                    ConsignedQuantity = (-0.000000001);

                if (CustomerOwnedQuantity < 0)
                    CustomerOwnedQuantity = (-0.000000001);

                //-------------------------------------------------------------------
                //

                if (AddItemToCountAndReturnDetailGUID(lstCountLineItemDetail[0].CountGUID.GetValueOrDefault(Guid.Empty), lstCountLineItemDetail[0].ItemGUID.GetValueOrDefault(Guid.Empty), lstCountLineItemDetail[0].BinID.GetValueOrDefault(0),
                                                      ConsignedQuantity.GetValueOrDefault(0), CustomerOwnedQuantity.GetValueOrDefault(0), lstCountLineItemDetail[0].IsStagingLocationCount.GetValueOrDefault(false),
                                                      null, null, lstCountLineItemDetail[0].UDF1, lstCountLineItemDetail[0].UDF2, lstCountLineItemDetail[0].UDF3, lstCountLineItemDetail[0].UDF4, lstCountLineItemDetail[0].UDF5, lstCountLineItemDetail[0].ItemDescription, lstCountLineItemDetail[0].ItemType.GetValueOrDefault(1), false, lstCountLineItemDetail[0].ProjectSpendGUID.GetValueOrDefault(Guid.Empty), out CountDetailGUID, lstCountLineItemDetail))
                {
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetail)
                    {
                        objCountLineItemDetail.CountDetailGUID = CountDetailGUID;
                        objCountLineItemDetail.GUID = Guid.NewGuid();
                        objCountLineItemDetail.CompanyID = SessionHelper.CompanyID;
                        objCountLineItemDetail.RoomID = SessionHelper.RoomID;
                        objCountLineItemDetail.Created = DateTime.UtcNow;
                        objCountLineItemDetail.CreatedBy = SessionHelper.UserID;
                        objCountLineItemDetail.Updated = DateTime.UtcNow;
                        objCountLineItemDetail.LastUpdatedBy = SessionHelper.UserID;
                        objCountLineItemDetail.IsDeleted = false;
                        objCountLineItemDetail.IsArchived = false;
                        objCountLineItemDetail.AddedFrom = "Web";
                        objCountLineItemDetail.ReceivedOn = DateTime.UtcNow;
                        objCountLineItemDetail.ReceivedOnWeb = DateTime.UtcNow;
                        objInventoryCountDAL.AddCountLineItemDetail(objCountLineItemDetail);
                    }
                }

                return true;
            }
            else
            {
                return false;
            }
        }

        public bool SaveLotDetailPopupForCountUpdate(List<CountLineItemDetailDTO> lstCountLineItemDetail)
        {
            List<CountLineItemDetailDTO> lstCountLineItemDetailTmp;
            CountLineItemDetailDTO objCountLineItemDetailTmp;
            DateTime? ExpirationDate = null;
            double? CustomerOwnedQuantity = 0;
            double? ConsignedQuantity = 0;

            //-------------------------------------------------------------------
            //
            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0 && lstCountLineItemDetail[0].CountDetailGUID != null)
            {
                InventoryCountDAL objInventoryCountDAL = new InventoryCountDAL(SessionHelper.EnterPriseDBName);
                List<CountLineItemDetailDTO> lstCountLineItemDetailExisting = objInventoryCountDAL.GetCountLineItemDetailList(lstCountLineItemDetail[0].CountDetailGUID.Value, SessionHelper.RoomDateFormat);

                if (lstCountLineItemDetail[0].SerialNumberTracking == true || lstCountLineItemDetail[0].LotNumberTracking == true)
                {
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetailExisting)
                    {
                        if (lstCountLineItemDetail.Where(x => x.LotSerialNumber.ToUpper().Trim() == objCountLineItemDetail.LotSerialNumber.ToUpper().Trim()
                                                                      && (x.DateCodeTracking == false || x.ExpirationDate == null ? "" : ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy")) == (objCountLineItemDetail.DateCodeTracking == false || objCountLineItemDetail.ExpirationDate == null ? "" : ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy"))).Count() <= 0)
                        {
                            //---------------Delete Missing LOT/Serial---------------
                            //
                            objCountLineItemDetail.IsDeleted = true;
                            objInventoryCountDAL.DeleteCountLineItemDetail(objCountLineItemDetail.GUID.Value);
                        }
                    }

                    CountLineItemDetailDTO objCountLineItemEditDetail;
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetail)
                    {
                        if (lstCountLineItemDetailExisting.Where(x => x.LotSerialNumber.ToUpper().Trim() == objCountLineItemDetail.LotSerialNumber.ToUpper().Trim()
                                                                      && (x.DateCodeTracking == false || x.ExpirationDate == null ? "" : ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy")) == (objCountLineItemDetail.DateCodeTracking == false || objCountLineItemDetail.ExpirationDate == null ? "" : ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy"))).Count() > 0)
                        {
                            //---------------Update Existing LOT/Serial---------------
                            //
                            objCountLineItemEditDetail = lstCountLineItemDetailExisting.Where(x => x.LotSerialNumber.ToUpper().Trim() == objCountLineItemDetail.LotSerialNumber.ToUpper().Trim()
                                                                      && (x.DateCodeTracking == false || x.ExpirationDate == null ? "" : ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy")) == (objCountLineItemDetail.DateCodeTracking == false || objCountLineItemDetail.ExpirationDate == null ? "" : ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy"))).FirstOrDefault();

                            objCountLineItemEditDetail.Comment = objCountLineItemDetail.Comment;
                            objCountLineItemEditDetail.CountCustomerOwnedQuantity = objCountLineItemDetail.CountCustomerOwnedQuantity;
                            objCountLineItemEditDetail.CountConsignedQuantity = objCountLineItemDetail.CountConsignedQuantity;

                            ExpirationDate = objCountLineItemDetail.ExpirationDate;
                            objCountLineItemEditDetail.ExpirationDate = ExpirationDate;
                            objCountLineItemEditDetail.Expiration = (ExpirationDate == null ? "" : ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat));

                            objCountLineItemEditDetail.IsConsigned = lstCountLineItemDetail[0].IsConsigned;
                            objCountLineItemEditDetail.LotNumberTracking = lstCountLineItemDetail[0].LotNumberTracking;
                            objCountLineItemEditDetail.SerialNumberTracking = lstCountLineItemDetail[0].SerialNumberTracking;
                            objCountLineItemEditDetail.DateCodeTracking = lstCountLineItemDetail[0].DateCodeTracking;

                            objCountLineItemEditDetail.Updated = DateTime.UtcNow;
                            objCountLineItemEditDetail.LastUpdatedBy = SessionHelper.UserID;
                            objCountLineItemEditDetail.EditedFrom = "Web";



                            objInventoryCountDAL.UpdateCountLineItemDetail(objCountLineItemEditDetail);
                        }
                        else
                        {
                            //---------------Insert New LOT/Serial---------------
                            //
                            objCountLineItemDetail.GUID = Guid.NewGuid();
                            objCountLineItemDetail.CompanyID = SessionHelper.CompanyID;
                            objCountLineItemDetail.RoomID = SessionHelper.RoomID;
                            objCountLineItemDetail.Created = DateTime.UtcNow;
                            objCountLineItemDetail.CreatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.Updated = DateTime.UtcNow;
                            objCountLineItemDetail.LastUpdatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.IsDeleted = false;
                            objCountLineItemDetail.IsArchived = false;
                            objCountLineItemDetail.AddedFrom = "Web";
                            objCountLineItemDetail.ReceivedOn = DateTime.UtcNow;
                            objCountLineItemDetail.ReceivedOnWeb = DateTime.UtcNow;
                            objInventoryCountDAL.AddCountLineItemDetail(objCountLineItemDetail);
                        }
                    }
                }
                else
                {
                    bool IsNew = false;
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetail)
                    {
                        IsNew = true;
                        objCountLineItemDetailTmp = null;
                        if (objCountLineItemDetail.GUID != null && objCountLineItemDetail.GUID != Guid.Empty)
                        {
                            objCountLineItemDetailTmp = lstCountLineItemDetailExisting.Where(x => x.GUID == objCountLineItemDetail.GUID).FirstOrDefault();
                            if (objCountLineItemDetailTmp != null)
                                IsNew = false;
                        }

                        if (IsNew)
                        {
                            objCountLineItemDetailTmp = new CountLineItemDetailDTO();
                            objCountLineItemDetail.GUID = Guid.NewGuid();
                            objCountLineItemDetail.ItemGUID = objCountLineItemDetail.ItemGUID;
                            objCountLineItemDetail.BinID = objCountLineItemDetail.BinID;
                            objCountLineItemDetail.CompanyID = SessionHelper.CompanyID;
                            objCountLineItemDetail.RoomID = SessionHelper.RoomID;
                            objCountLineItemDetail.Created = DateTime.UtcNow;
                            objCountLineItemDetail.CreatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.AddedFrom = "Web";
                            objCountLineItemDetail.ReceivedOn = DateTime.UtcNow;
                            objCountLineItemDetail.ReceivedOnWeb = DateTime.UtcNow;
                            objCountLineItemDetail.Received = (objCountLineItemDetail.ExpirationDate == null ? "" : objCountLineItemDetail.ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat));
                            objCountLineItemDetail.Cost = objCountLineItemDetail.Cost;
                            objCountLineItemDetail.CountGUID = objCountLineItemDetail.CountGUID;
                            objCountLineItemDetail.CountDetailGUID = objCountLineItemDetail.CountDetailGUID;
                        }

                        objCountLineItemDetailTmp.Comment = objCountLineItemDetail.Comment;
                        objCountLineItemDetailTmp.CountCustomerOwnedQuantity = objCountLineItemDetail.CountCustomerOwnedQuantity;
                        objCountLineItemDetailTmp.CountConsignedQuantity = objCountLineItemDetail.CountCustomerOwnedQuantity;
                        ExpirationDate = objCountLineItemDetail.ExpirationDate;
                        objCountLineItemDetailTmp.ExpirationDate = ExpirationDate;
                        objCountLineItemDetailTmp.Expiration = (ExpirationDate == null ? "" : ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat));
                        objCountLineItemDetailTmp.Updated = DateTime.UtcNow;
                        objCountLineItemDetailTmp.LastUpdatedBy = SessionHelper.UserID;
                        objCountLineItemDetailTmp.EditedFrom = "Web";
                        objCountLineItemDetail.IsDeleted = false;
                        objCountLineItemDetail.IsArchived = false;

                        if (IsNew)
                        {
                            objInventoryCountDAL.AddCountLineItemDetail(objCountLineItemDetail);
                        }
                        else
                        {
                            objInventoryCountDAL.UpdateCountLineItemDetail(objCountLineItemDetail);
                        }
                    }

                    //---------------Delete Missing LOT/Serial---------------
                    //
                    lstCountLineItemDetailTmp = lstCountLineItemDetailExisting.Where(x => !lstCountLineItemDetail.Select(y => y.GUID).Contains(x.GUID)).ToList();
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetailTmp)
                    {
                        objCountLineItemDetail.IsDeleted = true;
                        objInventoryCountDAL.DeleteCountLineItemDetail(objCountLineItemDetail.GUID.Value);
                    }
                }

                CustomerOwnedQuantity = lstCountLineItemDetail.Select(x => (x.CountCustomerOwnedQuantity < 0 ? 0 : x.CountCustomerOwnedQuantity)).Sum();
                ConsignedQuantity = lstCountLineItemDetail.Select(x => (x.CountConsignedQuantity < 0 ? 0 : x.CountConsignedQuantity)).Sum();
                objInventoryCountDAL.UpdateCountInInventoryCountDetails(lstCountLineItemDetail[0].CountDetailGUID, CustomerOwnedQuantity, ConsignedQuantity, lstCountLineItemDetail);
            }

            return true;
        }

        public bool AddMissingSerialForItemCount(List<ItemLocationDetailsDTO> lstCountLineItemDetail, Guid InsertedCountGuid)
        {
            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
            {
                BinMasterDAL objBinMasterDAL = new BinMasterDAL(SessionHelper.EnterPriseDBName);
                ItemMasterDAL objItemMasterDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                InventoryCountDAL objInventoryCountDAL = new InventoryCountDAL(SessionHelper.EnterPriseDBName);

                var lstItemGuid = lstCountLineItemDetail.GroupBy(x => x.ItemGUID).Select(g => g.First()).ToList();
                long SessionUserId = SessionHelper.UserID;
                foreach (ItemLocationDetailsDTO ItemGuids in lstItemGuid)
                {
                    ItemMasterDTO objItem = objItemMasterDAL.GetItemWithoutJoins(0, ItemGuids.ItemGUID);

                    List<InventoryCountDetail> CountDetailGUID = new List<InventoryCountDetail>();
                    CountDetailGUID = objInventoryCountDAL.GetCountDetailGUIDByCountGuid(InsertedCountGuid, objItem.GUID);

                    foreach (InventoryCountDetail objCountDetailGUID in CountDetailGUID)
                    {
                        List<CountLineItemDetailDTO> lstCountLineItemDetailSave = objInventoryCountDAL.GetLotDetailForCountByCountDetailGUID(objCountDetailGUID.GUID, objItem.GUID, SessionHelper.RoomDateFormat, SessionHelper.CompanyID, SessionHelper.RoomID, false);

                        if (objItem != null && objItem.ID > 0
                            && (objItem.SerialNumberTracking == true
                                || objItem.LotNumberTracking == true
                                || objItem.DateCodeTracking == true)
                               )
                        {
                            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
                            {
                                List<CountLineItemDetailDTO> locations = new List<CountLineItemDetailDTO>();
                                if (objItem.SerialNumberTracking == true
                                    || objItem.LotNumberTracking == true)
                                {
                                    locations = objBinMasterDAL.GetAllItemLocationsByItemId(objItem.GUID, SessionHelper.CompanyID, SessionHelper.RoomID, false);
                                }
                                else if (objItem.DateCodeTracking == true)
                                {
                                    locations = objBinMasterDAL.GetAllDateCodeItemLocationsByItemId(objItem.GUID, SessionHelper.CompanyID, SessionHelper.RoomID, false);
                                }
                                List<CountLineItemDetailDTO> Sublocations = new List<CountLineItemDetailDTO>();
                                if (objItem.SerialNumberTracking == true
                                    || objItem.LotNumberTracking == true)
                                {
                                    Sublocations = locations.Where(x => x.BinID == lstCountLineItemDetailSave[0].BinID && !lstCountLineItemDetailSave.Select(y => y.LotSerialNumber.ToUpper().Trim()).Contains(x.LotSerialNumber.ToUpper().Trim())).ToList();
                                }
                                else if (objItem.DateCodeTracking == true)
                                {
                                    Sublocations = locations.Where(x => x.BinID == lstCountLineItemDetailSave[0].BinID && !lstCountLineItemDetailSave.Select(y => y.ExpirationDate).Contains(x.ExpirationDate)).ToList();
                                }

                                foreach (CountLineItemDetailDTO objLocation in Sublocations)
                                {
                                    CountLineItemDetailDTO objCountLineItemDetailDTO = new CountLineItemDetailDTO();

                                    objCountLineItemDetailDTO.ItemGUID = objItem.GUID;
                                    objCountLineItemDetailDTO.ItemNumber = objItem.ItemNumber;
                                    objCountLineItemDetailDTO.ItemDescription = objItem.Description;
                                    objCountLineItemDetailDTO.ItemType = objItem.ItemType;
                                    objCountLineItemDetailDTO.Consignment = objItem.Consignment;

                                    if (objItem.SerialNumberTracking == true)
                                        objCountLineItemDetailDTO.Comment = ResImportMasters.ImportMissingSerials; 
                                    else if (objItem.LotNumberTracking == true)
                                        objCountLineItemDetailDTO.Comment = ResImportMasters.ImportMissingSerials;
                                    else if (objItem.DateCodeTracking == true)
                                        objCountLineItemDetailDTO.Comment = ResImportMasters.ImportMissingExpirationDates;

                                    objCountLineItemDetailDTO.BinID = objLocation.BinID;
                                    objCountLineItemDetailDTO.BinNumber = objLocation.BinNumber;
                                    objCountLineItemDetailDTO.CustomerOwnedQuantity = null;
                                    objCountLineItemDetailDTO.ConsignedQuantity = null;
                                    objCountLineItemDetailDTO.AvailableQuantity = null;
                                    objCountLineItemDetailDTO.CountCustomerOwnedQuantity = 0;
                                    objCountLineItemDetailDTO.CountConsignedQuantity = 0;
                                    objCountLineItemDetailDTO.SerialNumberTracking = objItem.SerialNumberTracking;
                                    objCountLineItemDetailDTO.LotNumberTracking = objItem.LotNumberTracking;
                                    objCountLineItemDetailDTO.DateCodeTracking = objItem.DateCodeTracking;
                                    objCountLineItemDetailDTO.LotSerialNumber = ((objItem.SerialNumberTracking == true || objItem.LotNumberTracking == true) ? objLocation.LotSerialNumber : "");
                                    objCountLineItemDetailDTO.LotNumber = objItem.LotNumberTracking == true ? objLocation.LotSerialNumber : "";
                                    objCountLineItemDetailDTO.SerialNumber = (objItem.SerialNumberTracking == true ? objLocation.LotSerialNumber : "");
                                    objCountLineItemDetailDTO.Expiration = objItem.DateCodeTracking ? (objLocation.ExpirationDate == null ? "" : objLocation.ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat)) : "";
                                    objCountLineItemDetailDTO.ExpirationDate = objItem.DateCodeTracking ? objLocation.ExpirationDate : null;
                                    objCountLineItemDetailDTO.ReceivedDate = DateTime.UtcNow;
                                    objCountLineItemDetailDTO.Cost = objItem.Cost;
                                    objCountLineItemDetailDTO.IsStagingLocationCount = objLocation.IsStagingLocationCount;
                                    objCountLineItemDetailDTO.CountGUID = InsertedCountGuid;
                                    objCountLineItemDetailDTO.CountDetailGUID = objCountDetailGUID.GUID;
                                    objCountLineItemDetailDTO.IsValidObject = true;
                                    lstCountLineItemDetailSave.Add(objCountLineItemDetailDTO);
                                }

                                SaveSerialDetailForCountUpdate(lstCountLineItemDetailSave);
                            }
                        }

                        double CustomerOwnedQty = 0;
                        bool IsValidInvalidQuantity = true;
                        double ConsignedOwnedQty = 0;
                        int TotalItems = 0;
                        int InvalidQuantity = 0;

                        InventoryCountDetailDTO InventoryCount = new InventoryCountDetailDTO();
                        InventoryCount = objInventoryCountDAL.GetInventoryCountdtlByGUId(objCountDetailGUID.GUID, SessionHelper.RoomID, SessionHelper.CompanyID);
                        if (InventoryCount != null && InventoryCount.ID > 0)
                        {
                            InventoryCountDetailDTO objInventoryCountDetailDTO = new InventoryCountDetailDTO();
                            objInventoryCountDetailDTO = objInventoryCountDAL.BeforeApplyAction(InventoryCount, SessionHelper.UserID, lstCountLineItemDetailSave);
                            if (lstCountLineItemDetailSave != null || lstCountLineItemDetailSave.Count > 0)
                            {
                                CustomerOwnedQty = lstCountLineItemDetailSave.Sum(x => (x.CountCustomerOwnedQuantity == null ? 0 : x.CountCustomerOwnedQuantity.Value));
                                ConsignedOwnedQty = lstCountLineItemDetailSave.Sum(x => (x.CountConsignedQuantity == null ? 0 : x.CountConsignedQuantity.Value));
                                TotalItems++;
                                if (((objInventoryCountDetailDTO.CountCustomerOwnedQuantity == null || objInventoryCountDetailDTO.CountCustomerOwnedQuantity == (-0.000000001)) ? 0 : objInventoryCountDetailDTO.CountCustomerOwnedQuantity.Value) != (CustomerOwnedQty == (-0.000000001) ? 0 : CustomerOwnedQty)
                                    || ((objInventoryCountDetailDTO.CountConsignedQuantity == null || objInventoryCountDetailDTO.CountConsignedQuantity == (-0.000000001)) ? 0 : objInventoryCountDetailDTO.CountConsignedQuantity.Value) != (ConsignedOwnedQty == (-0.000000001) ? 0 : ConsignedOwnedQty))
                                {
                                    if (InventoryCount.SerialNumberTracking == true || InventoryCount.LotNumberTracking == true)
                                    {
                                        IsValidInvalidQuantity = false;
                                        InvalidQuantity++;
                                    }
                                    else
                                    {
                                        CustomerOwnedQty = ((objInventoryCountDetailDTO.CountCustomerOwnedQuantity == null || objInventoryCountDetailDTO.CountCustomerOwnedQuantity == (-0.000000001)) ? 0 : objInventoryCountDetailDTO.CountCustomerOwnedQuantity.Value);
                                        ConsignedOwnedQty = ((objInventoryCountDetailDTO.CountConsignedQuantity == null || objInventoryCountDetailDTO.CountConsignedQuantity == (-0.000000001)) ? 0 : objInventoryCountDetailDTO.CountConsignedQuantity.Value);
                                        objInventoryCountDAL.UpdateCountLineItemDetailQty(InventoryCount.CountDetailGUID, objInventoryCountDetailDTO.CountCustomerOwnedQuantity, objInventoryCountDetailDTO.CountConsignedQuantity, objInventoryCountDetailDTO.CusOwnedDifference, objInventoryCountDetailDTO.ConsignedDifference);
                                    }
                                }

                                if (IsValidInvalidQuantity == true)
                                {
                                    List<ItemLocationDetailsDTO> lstProperRecords = new List<ItemLocationDetailsDTO>();
                                    List<MaterialStagingPullDetailDTO> lstStgProperRecords = new List<MaterialStagingPullDetailDTO>();
                                    CartItemDAL objCartItemDAL = new CartItemDAL(SessionHelper.EnterPriseDBName);
                                    ItemLocationDetailsDTO objItemLocationDetailsDTO;
                                    MaterialStagingPullDetailDTO objMaterialStgPullDetailsDTO;
                                    bool isProperRecordsAvail = false;

                                    foreach (CountLineItemDetailDTO objCountLineItemDetailDTO in lstCountLineItemDetailSave)
                                    {
                                        if (objCountLineItemDetailDTO.IsStagingLocationCount.GetValueOrDefault(false) == true)
                                        {
                                            objMaterialStgPullDetailsDTO = new MaterialStagingPullDetailDTO();
                                            objMaterialStgPullDetailsDTO.ItemGUID = objCountLineItemDetailDTO.ItemGUID.GetValueOrDefault(Guid.Empty);
                                            objMaterialStgPullDetailsDTO.StagingBinId = objCountLineItemDetailDTO.BinID.GetValueOrDefault(0);

                                            objMaterialStgPullDetailsDTO.ConsignedQuantity = objCountLineItemDetailDTO.CountConsignedQuantity;
                                            objMaterialStgPullDetailsDTO.CustomerOwnedQuantity = objCountLineItemDetailDTO.CountCustomerOwnedQuantity;
                                            if (objMaterialStgPullDetailsDTO.SerialNumberTracking == true || objMaterialStgPullDetailsDTO.LotNumberTracking == true)
                                            {
                                                if (objMaterialStgPullDetailsDTO.ConsignedQuantity < 0)
                                                    objMaterialStgPullDetailsDTO.ConsignedQuantity = 0;

                                                if (objMaterialStgPullDetailsDTO.CustomerOwnedQuantity < 0)
                                                    objMaterialStgPullDetailsDTO.CustomerOwnedQuantity = 0;
                                            }

                                            objMaterialStgPullDetailsDTO.UDF1 = HttpUtility.UrlDecode(InventoryCount.UDF1);
                                            objMaterialStgPullDetailsDTO.UDF2 = HttpUtility.UrlDecode(InventoryCount.UDF2);
                                            objMaterialStgPullDetailsDTO.UDF3 = HttpUtility.UrlDecode(InventoryCount.UDF3);
                                            objMaterialStgPullDetailsDTO.UDF4 = HttpUtility.UrlDecode(InventoryCount.UDF4);
                                            objMaterialStgPullDetailsDTO.UDF5 = HttpUtility.UrlDecode(InventoryCount.UDF5);
                                            objMaterialStgPullDetailsDTO.ItemNumber = objCountLineItemDetailDTO.ItemNumber;
                                            objMaterialStgPullDetailsDTO.BinNumber = objCountLineItemDetailDTO.BinNumber;
                                            objMaterialStgPullDetailsDTO.Expiration = objCountLineItemDetailDTO.Expiration;
                                            objMaterialStgPullDetailsDTO.Received = objCountLineItemDetailDTO.Received;
                                            objMaterialStgPullDetailsDTO.LotNumber = (!string.IsNullOrWhiteSpace(objCountLineItemDetailDTO.LotNumber)) ? objCountLineItemDetailDTO.LotNumber.Trim() : string.Empty;
                                            objMaterialStgPullDetailsDTO.SerialNumber = (!string.IsNullOrWhiteSpace(objCountLineItemDetailDTO.SerialNumber)) ? objCountLineItemDetailDTO.SerialNumber.Trim() : string.Empty;
                                            lstStgProperRecords.Add(objMaterialStgPullDetailsDTO);
                                        }
                                        else
                                        {
                                            objItemLocationDetailsDTO = new ItemLocationDetailsDTO();
                                            objItemLocationDetailsDTO.ItemGUID = objCountLineItemDetailDTO.ItemGUID;
                                            objItemLocationDetailsDTO.BinID = objCountLineItemDetailDTO.BinID;

                                            objItemLocationDetailsDTO.ConsignedQuantity = objCountLineItemDetailDTO.CountConsignedQuantity;
                                            objItemLocationDetailsDTO.CustomerOwnedQuantity = objCountLineItemDetailDTO.CountCustomerOwnedQuantity;
                                            if (objCountLineItemDetailDTO.SerialNumberTracking == true || objCountLineItemDetailDTO.LotNumberTracking == true)
                                            {
                                                if (objItemLocationDetailsDTO.ConsignedQuantity < 0)
                                                    objItemLocationDetailsDTO.ConsignedQuantity = 0;

                                                if (objItemLocationDetailsDTO.CustomerOwnedQuantity < 0)
                                                    objItemLocationDetailsDTO.CustomerOwnedQuantity = 0;
                                            }

                                            objItemLocationDetailsDTO.UDF1 = HttpUtility.UrlDecode(InventoryCount.UDF1);
                                            objItemLocationDetailsDTO.UDF2 = HttpUtility.UrlDecode(InventoryCount.UDF2);
                                            objItemLocationDetailsDTO.UDF3 = HttpUtility.UrlDecode(InventoryCount.UDF3);
                                            objItemLocationDetailsDTO.UDF4 = HttpUtility.UrlDecode(InventoryCount.UDF4);
                                            objItemLocationDetailsDTO.UDF5 = HttpUtility.UrlDecode(InventoryCount.UDF5);
                                            objItemLocationDetailsDTO.ItemNumber = objCountLineItemDetailDTO.ItemNumber;
                                            objItemLocationDetailsDTO.BinNumber = objCountLineItemDetailDTO.BinNumber;
                                            objItemLocationDetailsDTO.Expiration = objCountLineItemDetailDTO.Expiration;
                                            objItemLocationDetailsDTO.Received = objCountLineItemDetailDTO.Received;
                                            objItemLocationDetailsDTO.LotNumber = (!string.IsNullOrWhiteSpace(objCountLineItemDetailDTO.LotNumber)) ? objCountLineItemDetailDTO.LotNumber.Trim() : string.Empty;
                                            objItemLocationDetailsDTO.SerialNumber = (!string.IsNullOrWhiteSpace(objCountLineItemDetailDTO.SerialNumber)) ? objCountLineItemDetailDTO.SerialNumber.Trim() : string.Empty;
                                            lstProperRecords.Add(objItemLocationDetailsDTO);
                                        }

                                        if (objCountLineItemDetailDTO.LotNumberTracking.GetValueOrDefault(false) == true || objCountLineItemDetailDTO.SerialNumberTracking.GetValueOrDefault(false) == true || objCountLineItemDetailDTO.DateCodeTracking.GetValueOrDefault(false) == true)
                                            UpdateCountLineItemOnApplyForImport(objCountLineItemDetailDTO, lstCountLineItemDetailSave);
                                    }


                                    if (lstStgProperRecords != null && lstStgProperRecords.Count > 0)
                                    {
                                        ItemLocationDetailsDAL objItemLocationDetailsDAL = new ItemLocationDetailsDAL(SessionHelper.EnterPriseDBName);
                                        DataTable dtItemLocations = GetTableFromStgList(lstStgProperRecords);
                                        objItemLocationDetailsDAL.ApplyStageCountLineitem(dtItemLocations, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, InsertedCountGuid, objInventoryCountDetailDTO.GUID);

                                        isProperRecordsAvail = true;
                                    }


                                    if (lstProperRecords != null && lstProperRecords.Count > 0)
                                    {

                                        ItemLocationDetailsDAL objItemLocationDetailsDAL = new ItemLocationDetailsDAL(SessionHelper.EnterPriseDBName);
                                        DataTable dtItemLocations = GetTableFromList(lstProperRecords);
                                        objItemLocationDetailsDAL.ApplyCountLineitem(dtItemLocations, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, InsertedCountGuid, objInventoryCountDetailDTO.GUID);

                                        new ItemLocationDetailsDAL(SessionHelper.EnterPriseDBName).InsertCreditHistoryForCount(SessionHelper.RoomID, SessionHelper.CompanyID, InsertedCountGuid, objInventoryCountDetailDTO.GUID);

                                        lstProperRecords.ForEach(t =>
                                        {
                                            objCartItemDAL.AutoCartUpdateByCode(t.ItemGUID ?? Guid.Empty, SessionHelper.UserID, "Web", "Inventory Manual Import >> Apply Count", SessionUserId);
                                        });

                                        if (objItem != null && objItem.ItemType == 3 && objItem.IsBuildBreak.GetValueOrDefault(false) == true)
                                        {
                                            new KitDetailDAL(SessionHelper.EnterPriseDBName).UpdateQtyToMeedDemand(InventoryCount.ItemGUID, SessionHelper.UserID, SessionUserId);
                                        }
                                        isProperRecordsAvail = true;
                                    }

                                    if (isProperRecordsAvail)
                                    {
                                        // PostApplyAction

                                        objInventoryCountDAL.PostApplyOnSignleLineItem(objInventoryCountDetailDTO, SessionHelper.UserID);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return true;
        }

        public bool SaveSerialDetailForCountUpdate(List<CountLineItemDetailDTO> lstCountLineItemDetail)
        {
            List<CountLineItemDetailDTO> lstCountLineItemDetailTmp;
            CountLineItemDetailDTO objCountLineItemDetailTmp;
            DateTime? ExpirationDate = null;
            double? CustomerOwnedQuantity = 0;
            double? ConsignedQuantity = 0;
            //-------------------------------------------------------------------
            //
            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0 && lstCountLineItemDetail[0].CountDetailGUID != null)
            {
                InventoryCountDAL objInventoryCountDAL = new InventoryCountDAL(SessionHelper.EnterPriseDBName);
                List<CountLineItemDetailDTO> lstCountLineItemDetailExisting = objInventoryCountDAL.GetCountLineItemDetailList(lstCountLineItemDetail[0].CountDetailGUID.Value, SessionHelper.RoomDateFormat);

                if (lstCountLineItemDetail[0].SerialNumberTracking == true || lstCountLineItemDetail[0].LotNumberTracking == true)
                {
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetailExisting)
                    {
                        if (lstCountLineItemDetail.Where(x => x.LotSerialNumber.ToUpper().Trim() == objCountLineItemDetail.LotSerialNumber.ToUpper().Trim()
                                                                      && (x.DateCodeTracking == false || x.ExpirationDate == null ? "" : ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy")) == (objCountLineItemDetail.DateCodeTracking == false || objCountLineItemDetail.ExpirationDate == null ? "" : ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy"))).Count() <= 0)
                        {
                            //---------------Delete Missing LOT/Serial---------------
                            //
                            objCountLineItemDetail.IsDeleted = true;
                            objInventoryCountDAL.DeleteCountLineItemDetail(objCountLineItemDetail.GUID.Value);
                        }
                    }

                    CountLineItemDetailDTO objCountLineItemEditDetail;
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetail)
                    {
                        if (lstCountLineItemDetailExisting.Where(x => x.LotSerialNumber.ToUpper().Trim() == objCountLineItemDetail.LotSerialNumber.ToUpper().Trim()
                                                                      && (x.DateCodeTracking == false || x.ExpirationDate == null ? "" : ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy")) == (objCountLineItemDetail.DateCodeTracking == false || objCountLineItemDetail.ExpirationDate == null ? "" : ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy"))).Count() > 0)
                        {
                            //---------------Update Existing LOT/Serial---------------
                            //
                            objCountLineItemEditDetail = lstCountLineItemDetailExisting.Where(x => x.LotSerialNumber.ToUpper().Trim() == objCountLineItemDetail.LotSerialNumber.ToUpper().Trim()
                                                                      && (x.DateCodeTracking == false || x.ExpirationDate == null ? "" : ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy")) == (objCountLineItemDetail.DateCodeTracking == false || objCountLineItemDetail.ExpirationDate == null ? "" : ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy"))).FirstOrDefault();

                            objCountLineItemEditDetail.Comment = objCountLineItemDetail.Comment;
                            objCountLineItemEditDetail.CountCustomerOwnedQuantity = objCountLineItemDetail.CountCustomerOwnedQuantity;
                            objCountLineItemEditDetail.CountConsignedQuantity = objCountLineItemDetail.CountConsignedQuantity;

                            ExpirationDate = objCountLineItemDetail.ExpirationDate;
                            objCountLineItemEditDetail.ExpirationDate = ExpirationDate;
                            objCountLineItemEditDetail.Expiration = (ExpirationDate == null ? "" : ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat));

                            objCountLineItemEditDetail.IsConsigned = lstCountLineItemDetail[0].IsConsigned;
                            objCountLineItemEditDetail.LotNumberTracking = lstCountLineItemDetail[0].LotNumberTracking;
                            objCountLineItemEditDetail.SerialNumberTracking = lstCountLineItemDetail[0].SerialNumberTracking;
                            objCountLineItemEditDetail.DateCodeTracking = lstCountLineItemDetail[0].DateCodeTracking;

                            objCountLineItemEditDetail.Updated = DateTime.UtcNow;
                            objCountLineItemEditDetail.LastUpdatedBy = SessionHelper.UserID;
                            objCountLineItemEditDetail.EditedFrom = "Web";



                            objInventoryCountDAL.UpdateCountLineItemDetail(objCountLineItemEditDetail);
                        }
                        else
                        {
                            //---------------Insert New LOT/Serial---------------
                            //
                            objCountLineItemDetail.GUID = Guid.NewGuid();
                            objCountLineItemDetail.CompanyID = SessionHelper.CompanyID;
                            objCountLineItemDetail.RoomID = SessionHelper.RoomID;
                            objCountLineItemDetail.Created = DateTime.UtcNow;
                            objCountLineItemDetail.CreatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.Updated = DateTime.UtcNow;
                            objCountLineItemDetail.LastUpdatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.IsDeleted = false;
                            objCountLineItemDetail.IsArchived = false;
                            objCountLineItemDetail.AddedFrom = "Web";
                            objCountLineItemDetail.ReceivedOn = DateTime.UtcNow;
                            objCountLineItemDetail.ReceivedOnWeb = DateTime.UtcNow;
                            objInventoryCountDAL.AddCountLineItemDetail(objCountLineItemDetail);
                        }
                    }
                }
                else if (lstCountLineItemDetail[0].DateCodeTracking == true)
                {
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetailExisting)
                    {
                        if (lstCountLineItemDetail.Where(x => ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy") == ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy")).Count() <= 0)
                        {
                            //---------------Delete Missing datecode---------------
                            //
                            objCountLineItemDetail.IsDeleted = true;
                            objInventoryCountDAL.DeleteCountLineItemDetail(objCountLineItemDetail.GUID.Value);
                        }
                    }

                    CountLineItemDetailDTO objCountLineItemEditDetail;
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetail)
                    {
                        if (lstCountLineItemDetailExisting.Where(x => ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy") == ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy")).Count() > 0)
                        {
                            //---------------Update Existing datecode---------------
                            //
                            objCountLineItemEditDetail = lstCountLineItemDetailExisting.Where(x => ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy") == ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy")).FirstOrDefault();

                            objCountLineItemEditDetail.Comment = objCountLineItemDetail.Comment;
                            objCountLineItemEditDetail.CountCustomerOwnedQuantity = objCountLineItemDetail.CountCustomerOwnedQuantity;
                            objCountLineItemEditDetail.CountConsignedQuantity = objCountLineItemDetail.CountConsignedQuantity;

                            ExpirationDate = objCountLineItemDetail.ExpirationDate;
                            objCountLineItemEditDetail.ExpirationDate = ExpirationDate;
                            objCountLineItemEditDetail.Expiration = (ExpirationDate == null ? "" : ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat));

                            objCountLineItemEditDetail.IsConsigned = lstCountLineItemDetail[0].IsConsigned;
                            objCountLineItemEditDetail.LotNumberTracking = lstCountLineItemDetail[0].LotNumberTracking;
                            objCountLineItemEditDetail.SerialNumberTracking = lstCountLineItemDetail[0].SerialNumberTracking;
                            objCountLineItemEditDetail.DateCodeTracking = lstCountLineItemDetail[0].DateCodeTracking;

                            objCountLineItemEditDetail.Updated = DateTime.UtcNow;
                            objCountLineItemEditDetail.LastUpdatedBy = SessionHelper.UserID;
                            objCountLineItemEditDetail.EditedFrom = "Web";



                            objInventoryCountDAL.UpdateCountLineItemDetail(objCountLineItemEditDetail);
                        }
                        else
                        {
                            //---------------Insert New LOT/Serial---------------
                            //
                            objCountLineItemDetail.GUID = Guid.NewGuid();
                            objCountLineItemDetail.CompanyID = SessionHelper.CompanyID;
                            objCountLineItemDetail.RoomID = SessionHelper.RoomID;
                            objCountLineItemDetail.Created = DateTime.UtcNow;
                            objCountLineItemDetail.CreatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.Updated = DateTime.UtcNow;
                            objCountLineItemDetail.LastUpdatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.IsDeleted = false;
                            objCountLineItemDetail.IsArchived = false;
                            objCountLineItemDetail.AddedFrom = "Web";
                            objCountLineItemDetail.ReceivedOn = DateTime.UtcNow;
                            objCountLineItemDetail.ReceivedOnWeb = DateTime.UtcNow;
                            objInventoryCountDAL.AddCountLineItemDetail(objCountLineItemDetail);
                        }
                    }
                }
                else
                {
                    bool IsNew = false;
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetail)
                    {
                        IsNew = true;
                        objCountLineItemDetailTmp = null;
                        if (objCountLineItemDetail.GUID != null && objCountLineItemDetail.GUID != Guid.Empty)
                        {
                            objCountLineItemDetailTmp = lstCountLineItemDetailExisting.Where(x => x.GUID == objCountLineItemDetail.GUID).FirstOrDefault();
                            if (objCountLineItemDetailTmp != null)
                                IsNew = false;
                        }

                        if (IsNew)
                        {
                            objCountLineItemDetailTmp = new CountLineItemDetailDTO();
                            objCountLineItemDetail.GUID = Guid.NewGuid();
                            objCountLineItemDetail.ItemGUID = objCountLineItemDetail.ItemGUID;
                            objCountLineItemDetail.BinID = objCountLineItemDetail.BinID;
                            objCountLineItemDetail.CompanyID = SessionHelper.CompanyID;
                            objCountLineItemDetail.RoomID = SessionHelper.RoomID;
                            objCountLineItemDetail.Created = DateTime.UtcNow;
                            objCountLineItemDetail.CreatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.AddedFrom = "Web";
                            objCountLineItemDetail.ReceivedOn = DateTime.UtcNow;
                            objCountLineItemDetail.ReceivedOnWeb = DateTime.UtcNow;
                            objCountLineItemDetail.Received = (objCountLineItemDetail.ExpirationDate == null ? "" : objCountLineItemDetail.ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat));
                            objCountLineItemDetail.Cost = objCountLineItemDetail.Cost;
                            objCountLineItemDetail.CountGUID = objCountLineItemDetail.CountGUID;
                            objCountLineItemDetail.CountDetailGUID = objCountLineItemDetail.CountDetailGUID;
                        }

                        objCountLineItemDetailTmp.Comment = objCountLineItemDetail.Comment;
                        objCountLineItemDetailTmp.CountCustomerOwnedQuantity = objCountLineItemDetail.CountCustomerOwnedQuantity;
                        objCountLineItemDetailTmp.CountConsignedQuantity = objCountLineItemDetail.CountCustomerOwnedQuantity;
                        ExpirationDate = objCountLineItemDetail.ExpirationDate;
                        objCountLineItemDetailTmp.ExpirationDate = ExpirationDate;
                        objCountLineItemDetailTmp.Expiration = (ExpirationDate == null ? "" : ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat));
                        objCountLineItemDetailTmp.Updated = DateTime.UtcNow;
                        objCountLineItemDetailTmp.LastUpdatedBy = SessionHelper.UserID;
                        objCountLineItemDetailTmp.EditedFrom = "Web";
                        objCountLineItemDetail.IsDeleted = false;
                        objCountLineItemDetail.IsArchived = false;

                        if (IsNew)
                        {
                            objInventoryCountDAL.AddCountLineItemDetail(objCountLineItemDetail);
                        }
                        else
                        {
                            objInventoryCountDAL.UpdateCountLineItemDetail(objCountLineItemDetail);
                        }
                    }

                    //---------------Delete Missing LOT/Serial---------------
                    //
                    lstCountLineItemDetailTmp = lstCountLineItemDetailExisting.Where(x => !lstCountLineItemDetail.Select(y => y.GUID).Contains(x.GUID)).ToList();
                    foreach (CountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetailTmp)
                    {
                        objCountLineItemDetail.IsDeleted = true;
                        objInventoryCountDAL.DeleteCountLineItemDetail(objCountLineItemDetail.GUID.Value);
                    }
                }

                CustomerOwnedQuantity = lstCountLineItemDetail.Select(x => (x.CountCustomerOwnedQuantity < 0 ? 0 : x.CountCustomerOwnedQuantity)).Sum();
                ConsignedQuantity = lstCountLineItemDetail.Select(x => (x.CountConsignedQuantity < 0 ? 0 : x.CountConsignedQuantity)).Sum();
                objInventoryCountDAL.UpdateCountInInventoryCountDetails(lstCountLineItemDetail[0].CountDetailGUID, CustomerOwnedQuantity, ConsignedQuantity, lstCountLineItemDetail);
            }

            return true;
        }

        public void UpdateCountLineItemOnApplyForImport(CountLineItemDetailDTO objCountLineItemDetail, List<CountLineItemDetailDTO> lstCountLineItemDetail)
        {
            CountLineItemDetailDTO objCountLineItemEditDetail = new CountLineItemDetailDTO();
            DateTime? ExpirationDate = null;
            objCountLineItemEditDetail = lstCountLineItemDetail.Where(x => (x.LotSerialNumber ?? string.Empty).ToUpper().Trim() == (objCountLineItemDetail.LotSerialNumber ?? string.Empty).ToUpper().Trim()
                                                                     && (x.DateCodeTracking == false || x.ExpirationDate == null ? "" : ((DateTime)x.ExpirationDate).ToString("dd.MM.yyyy")) == (objCountLineItemDetail.DateCodeTracking == false || objCountLineItemDetail.ExpirationDate == null ? "" : ((DateTime)objCountLineItemDetail.ExpirationDate).ToString("dd.MM.yyyy"))).FirstOrDefault();

            objCountLineItemEditDetail.Comment = objCountLineItemDetail.Comment;
            objCountLineItemEditDetail.CountCustomerOwnedQuantity = objCountLineItemDetail.CountCustomerOwnedQuantity;
            objCountLineItemEditDetail.CountConsignedQuantity = objCountLineItemDetail.CountConsignedQuantity;

            ExpirationDate = objCountLineItemDetail.ExpirationDate;
            objCountLineItemEditDetail.ExpirationDate = ExpirationDate;
            objCountLineItemEditDetail.Expiration = (ExpirationDate == null ? "" : ExpirationDate.Value.ToString(SessionHelper.RoomDateFormat));

            objCountLineItemEditDetail.IsConsigned = lstCountLineItemDetail[0].IsConsigned;
            objCountLineItemEditDetail.LotNumberTracking = lstCountLineItemDetail[0].LotNumberTracking;
            objCountLineItemEditDetail.SerialNumberTracking = lstCountLineItemDetail[0].SerialNumberTracking;
            objCountLineItemEditDetail.DateCodeTracking = lstCountLineItemDetail[0].DateCodeTracking;

            objCountLineItemEditDetail.Updated = DateTime.UtcNow;
            objCountLineItemEditDetail.LastUpdatedBy = SessionHelper.UserID;
            objCountLineItemEditDetail.EditedFrom = "Web";

            new InventoryCountDAL(SessionHelper.EnterPriseDBName).UpdateCountLineItemDetail(objCountLineItemEditDetail);
        }

        private DataTable GetTableFromStgList(List<MaterialStagingPullDetailDTO> lstItemLocs)
        {
            RegionSettingDAL objRegionSettingDAL = new RegionSettingDAL(SessionHelper.EnterPriseDBName);
            DateTime datetimetoConsider = objRegionSettingDAL.GetCurrentDatetimebyTimeZone(SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID);
            DataTable ReturnDT = new DataTable("ItemLocationParam");
            try
            {
                DataColumn[] arrColumns = new DataColumn[]            {
                new DataColumn() { AllowDBNull=true,ColumnName="ItemGUID",DataType=typeof(Guid)},
                new DataColumn() { AllowDBNull=true,ColumnName="ItemNumber",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="BinID",DataType=typeof(Int64)},
                new DataColumn() { AllowDBNull=true,ColumnName="BinNumber",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="Expiration",DataType=typeof(DateTime)},
                new DataColumn() { AllowDBNull=true,ColumnName="Received",DataType=typeof(DateTime)},
                new DataColumn() { AllowDBNull=true,ColumnName="LotNumber",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="SerialNumber",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="ConsignedQuantity",DataType=typeof(float)},
                new DataColumn() { AllowDBNull=true,ColumnName="CustomerOwnedQuantity",DataType=typeof(float)},
                new DataColumn() { AllowDBNull=true,ColumnName="ReceiptCost",DataType=typeof(float)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF1",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF2",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF3",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF4",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF5",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="ProjectSpend",DataType=typeof(String)}
            };
                ReturnDT.Columns.AddRange(arrColumns);

                if (lstItemLocs != null && lstItemLocs.Count > 0)
                {
                    foreach (var item in lstItemLocs)
                    {
                        DateTime tempDT = DateTime.Now;
                        DateTime.TryParseExact(item.Expiration, SessionHelper.RoomDateFormat, ResourceHelper.CurrentCult, System.Globalization.DateTimeStyles.None, out tempDT);
                        DataRow row = ReturnDT.NewRow();
                        row["ItemGUID"] = item.ItemGUID;
                        row["ItemNumber"] = item.ItemNumber;
                        row["BinID"] = (item.StagingBinId > 0) ? (object)item.StagingBinId : DBNull.Value;
                        row["BinNumber"] = item.BinNumber;
                        row["Expiration"] = tempDT != DateTime.MinValue ? (object)tempDT : DBNull.Value;
                        row["Received"] = datetimetoConsider;
                        row["LotNumber"] = item.LotNumber;
                        row["SerialNumber"] = item.SerialNumber;
                        row["ConsignedQuantity"] = item.ConsignedQuantity.HasValue ? (object)item.ConsignedQuantity.Value : DBNull.Value;
                        row["CustomerOwnedQuantity"] = item.CustomerOwnedQuantity.HasValue ? (object)item.CustomerOwnedQuantity.Value : DBNull.Value;
                        row["ReceiptCost"] = item.Cost.HasValue ? (object)item.Cost.Value : DBNull.Value;
                        row["UDF1"] = item.UDF1;
                        row["UDF2"] = item.UDF2;
                        row["UDF3"] = item.UDF3;
                        row["UDF4"] = item.UDF4;
                        row["UDF5"] = item.UDF5;
                        row["ProjectSpend"] = string.Empty;
                        ReturnDT.Rows.Add(row);
                    }
                }

                return ReturnDT;
            }
            catch
            {
                return ReturnDT;
            }
        }

        #endregion

        #region WI-4988

        public ToolAssetCountDTO InsertCountForTool(string CountType)
        {
            string strDateFormat = "MM/dd/yyyy";
            RegionSettingDAL objRegionSettingDAL = new RegionSettingDAL(SessionHelper.EnterPriseDBName);
            DateTime datetimetoConsider = objRegionSettingDAL.GetCurrentDatetimebyTimeZone(SessionHelper.RoomID, SessionHelper.CompanyID, 0);

            eTurnsRegionInfo objeTurnsRegionInfo = new eTurnsRegionInfo();
            objeTurnsRegionInfo = objRegionSettingDAL.GetRegionSettingsById(SessionHelper.RoomID, SessionHelper.CompanyID, 0);
            if (objeTurnsRegionInfo != null && !string.IsNullOrEmpty(objeTurnsRegionInfo.ShortDatePattern) && objeTurnsRegionInfo.ShortDatePattern.Equals("yy/m/d"))
            {
                strDateFormat = "yyyy/MM/dd";
            }

            RoomDTO obj = new RoomDTO();
            RoomDAL objDAL = new RoomDAL(SessionHelper.EnterPriseDBName);
            CommonDAL objCommonDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
            string AutoCountNumber = string.Empty;
            //obj = objDAL.GetRoomByIDPlain(SessionHelper.RoomID);
            string columnList = "ID,RoomName,ToolCountAutoSequence,NextToolCountNo";
            obj = objCommonDAL.GetSingleRecord<RoomDTO>(columnList, "Room", "ID = " + SessionHelper.RoomID.ToString() + "", "");

            if (obj != null)
            {
                Int64 iNextNo = 0;
                if (obj.ToolCountAutoSequence == null || obj.ToolCountAutoSequence <= 0)
                    obj.ToolCountAutoSequence = 3;
                switch (obj.ToolCountAutoSequence.GetValueOrDefault(0))
                {
                    case 0:
                        AutoCountNumber = string.Empty;
                        break;
                    case 3: //Increamenting by Count#
                        Int64.TryParse(Convert.ToString(obj.NextToolCountNo), out iNextNo);
                        iNextNo = iNextNo + 1;
                        AutoCountNumber = Convert.ToString(iNextNo);
                        break;
                    case 5: //Date + Incrementing#                       
                        Int64.TryParse(obj.NextToolCountNo, out iNextNo);
                        iNextNo = iNextNo + 1;
                        AutoCountNumber = datetimetoConsider.ToString(strDateFormat) + "-" + iNextNo.ToString();
                        break;
                    case 6: //Date
                        AutoCountNumber = datetimetoConsider.ToString(strDateFormat);
                        break;
                }
            }

            ToolAssetCountDAL objToolAssetCountDAL = new ToolAssetCountDAL(SessionHelper.EnterPriseDBName);
            ToolAssetCountDTO objToolAssetCountDTO = new ToolAssetCountDTO();
            if (CountType.ToLower().Equals("m"))
            {
                objToolAssetCountDTO.AddedFrom = "Manual Import";
            }
            else
            {
                objToolAssetCountDTO.AddedFrom = "Adjustment Import";
            }
            objToolAssetCountDTO.CompanyId = SessionHelper.CompanyID;
            objToolAssetCountDTO.CompleteCauseCountGUID = null;
            objToolAssetCountDTO.CountCompletionDate = null;
            objToolAssetCountDTO.CountDate = datetimetoConsider;
            objToolAssetCountDTO.CountItemDescription = string.Empty;
            objToolAssetCountDTO.CountName = AutoCountNumber.ToString();
            objToolAssetCountDTO.CountStatus = "O";
            objToolAssetCountDTO.CountType = CountType;
            objToolAssetCountDTO.Created = DateTime.UtcNow;
            objToolAssetCountDTO.CreatedBy = SessionHelper.UserID;
            objToolAssetCountDTO.EditedFrom = objToolAssetCountDTO.AddedFrom;
            objToolAssetCountDTO.GUID = Guid.NewGuid();
            objToolAssetCountDTO.ID = 0;
            objToolAssetCountDTO.IsArchived = false;
            objToolAssetCountDTO.IsClosed = false;
            objToolAssetCountDTO.IsDeleted = false;
            objToolAssetCountDTO.LastUpdatedBy = SessionHelper.UserID;
            objToolAssetCountDTO.ReceivedOn = DateTime.UtcNow;
            objToolAssetCountDTO.ReceivedOnWeb = DateTime.UtcNow;
            objToolAssetCountDTO.RoomId = SessionHelper.RoomID;
            objToolAssetCountDTO.UDF1 = "";
            objToolAssetCountDTO.UDF2 = "";
            objToolAssetCountDTO.UDF3 = "";
            objToolAssetCountDTO.UDF4 = "";
            objToolAssetCountDTO.UDF5 = "";
            objToolAssetCountDTO.Updated = DateTime.UtcNow;
            objToolAssetCountDTO.Year = (short)DateTime.UtcNow.Year;
            return objToolAssetCountDAL.SaveInventoryCountForImport(objToolAssetCountDTO);

        }

        public bool AddItemToCountAndReturnDetailGUIDForTool(Guid? CountGuid, Guid? ToolGUID, long? ToolBinId, double? Quantity, double? ToolLocationQty, string UDF1, string UDF2, string UDF3, string UDF4, string UDF5, string CountLineItemDescription, bool SaveCountLineItemDetail, out Guid CountDetailGUID, List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetail = null)
        {
            ToolAssetCountDAL objToolAssetCountDAL = new ToolAssetCountDAL(SessionHelper.EnterPriseDBName);
            ToolAssetCountDTO objToolAssetCountDTO = new ToolAssetCountDTO();
            objToolAssetCountDTO = objToolAssetCountDAL.GetToolCountByGUId(CountGuid ?? Guid.NewGuid(), SessionHelper.RoomID, SessionHelper.CompanyID);
            List<ToolAssetCountDetailDTO> lstToolAssetCountDetail = objToolAssetCountDAL.GetAllLineItemsWithinToolCount(objToolAssetCountDTO.ID);
            ToolAssetCountDetailDTO objToolAssetCountDetailDTO = new ToolAssetCountDetailDTO();
            CountDetailGUID = Guid.Empty;

            if (lstToolAssetCountDetail != null && lstToolAssetCountDetail.Where(x => x.ToolGUID == ToolGUID && x.ToolBinID == ToolBinId && x.IsApplied == false).Count() <= 0)
            {
                ToolLocationDetailsDTO objLocationMasterDTO = new ToolLocationDetailsDAL(SessionHelper.EnterPriseDBName).GetToolLocationDetailsByID(ToolBinId ?? 0, SessionHelper.RoomID, SessionHelper.CompanyID);
                objToolAssetCountDetailDTO.ToolBinGUID = objLocationMasterDTO.LocationGUID;
                objToolAssetCountDetailDTO.ToolBinID = objLocationMasterDTO.ID;
                objToolAssetCountDetailDTO.Location = objLocationMasterDTO.ToolLocationName;
                objToolAssetCountDetailDTO.CompanyId = SessionHelper.CompanyID;
                objToolAssetCountDetailDTO.Quantity = 0;
                objToolAssetCountDetailDTO.CountQuantity = Quantity ?? 0;
                objToolAssetCountDetailDTO.CountDate = objToolAssetCountDTO.CountDate;
                objToolAssetCountDetailDTO.CountItemStatus = string.Empty;
                objToolAssetCountDetailDTO.CountLineItemDescription = HttpUtility.UrlDecode(CountLineItemDescription);
                objToolAssetCountDetailDTO.CountName = objToolAssetCountDTO.CountName;
                objToolAssetCountDetailDTO.CountStatus = objToolAssetCountDTO.CountStatus;
                objToolAssetCountDetailDTO.CountType = objToolAssetCountDTO.CountType;
                objToolAssetCountDetailDTO.Created = DateTimeUtility.DateTimeNow;
                objToolAssetCountDetailDTO.CreatedBy = SessionHelper.UserID;
                objToolAssetCountDetailDTO.CreatedByName = SessionHelper.UserName;
                objToolAssetCountDetailDTO.GUID = Guid.NewGuid();
                objToolAssetCountDetailDTO.ID = 0;
                objToolAssetCountDetailDTO.ToolAssetCountGUID = objToolAssetCountDTO.GUID;
                objToolAssetCountDetailDTO.IsApplied = false;
                objToolAssetCountDetailDTO.IsArchived = false;
                objToolAssetCountDetailDTO.IsClosed = false;
                objToolAssetCountDetailDTO.IsDeleted = false;
                objToolAssetCountDetailDTO.ToolGUID = ToolGUID ?? Guid.NewGuid();
                objToolAssetCountDetailDTO.LastUpdatedBy = SessionHelper.UserID;
                objToolAssetCountDetailDTO.RoomId = SessionHelper.RoomID;
                objToolAssetCountDetailDTO.RoomName = SessionHelper.RoomName;
                objToolAssetCountDetailDTO.UDF1 = HttpUtility.UrlDecode(UDF1) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF1);
                objToolAssetCountDetailDTO.UDF2 = HttpUtility.UrlDecode(UDF2) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF2);
                objToolAssetCountDetailDTO.UDF3 = HttpUtility.UrlDecode(UDF3) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF3);
                objToolAssetCountDetailDTO.UDF4 = HttpUtility.UrlDecode(UDF4) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF4);
                objToolAssetCountDetailDTO.UDF5 = HttpUtility.UrlDecode(UDF5) == "undefined" ? string.Empty : HttpUtility.UrlDecode(UDF5);
                objToolAssetCountDetailDTO.Updated = DateTimeUtility.DateTimeNow;
                objToolAssetCountDetailDTO.UpdatedByName = SessionHelper.UserName;
                objToolAssetCountDetailDTO.AddedFrom = "Web";
                objToolAssetCountDetailDTO.EditedFrom = "Web";
                objToolAssetCountDetailDTO.ReceivedOn = DateTimeUtility.DateTimeNow;
                objToolAssetCountDetailDTO.ReceivedOnWeb = DateTimeUtility.DateTimeNow;
                objToolAssetCountDetailDTO.IsOnlyFromItemUI = true;

                try
                {
                    objToolAssetCountDAL.SaveToolCountLineItem(objToolAssetCountDetailDTO, SaveCountLineItemDetail, lstCountLineItemDetail);
                    CountDetailGUID = objToolAssetCountDetailDTO.GUID;
                }
                catch
                {
                    CountDetailGUID = Guid.Empty;
                }
            }
            return true;
        }

        public void AddUpdateLotDetailPopupForCountForTool(List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetail)
        {
            CommonDAL cmnDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
            ToolAssetCountDAL objToolAssetCountDAL = new ToolAssetCountDAL(SessionHelper.EnterPriseDBName);
            List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetailTmp = new List<ToolAssetCountLineItemDetailDTO>();
            int ValidItemCount = 0;
            Guid? CountDetailGUID = null;
            Guid ToolGuid = Guid.Empty;
            long BinId = 0;
            bool IsAdd = false;
            bool IsUpdate = false;

            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
            {
                //--------------------------------------------------
                //
                LocationMasterDAL objBinMasterDAL = new LocationMasterDAL(SessionHelper.EnterPriseDBName);
                //---------------VALIDATE COUNT LINE ITEM LIST AND CHECK FOR ADD OR UPDATE---------------
                //
                foreach (ToolAssetCountLineItemDetailDTO objCountLineItemDetailDTO in lstCountLineItemDetail)
                {
                    objCountLineItemDetailDTO.IsValidObject = true;

                    //------------------------------------------------------------------------
                    //
                    objCountLineItemDetailDTO.Location = objCountLineItemDetailDTO.Location.Trim();
                    if (objCountLineItemDetailDTO.SerialNumberTracking == true)
                    {
                        objCountLineItemDetailDTO.SerialNumber = objCountLineItemDetailDTO.LotSerialNumber;
                        objCountLineItemDetailDTO.SerialNumber = objCountLineItemDetailDTO.SerialNumber;
                    }

                    //-------------------------SET QUANTITY-------------------------
                    //

                    objCountLineItemDetailDTO.CountQuantity = (objCountLineItemDetailDTO.CountQuantity != null ? objCountLineItemDetailDTO.CountQuantity : (-0.000000001));

                    //-------------------------CHECK FOR ADD OR EDIT-------------------------
                    //
                    if (objToolAssetCountDAL.GetCountDetailGUIDByToolGUIDBinID(objCountLineItemDetailDTO.CountGUID.Value, objCountLineItemDetailDTO.ToolGUID.Value, objCountLineItemDetailDTO.ToolBinID.Value, out CountDetailGUID))
                    {
                        if (CountDetailGUID != null && CountDetailGUID != Guid.Empty)
                        {
                            objCountLineItemDetailDTO.CountDetailGUID = CountDetailGUID;
                            objCountLineItemDetailDTO.IsAdd = false;
                            objCountLineItemDetailDTO.IsUpdate = true;
                            ValidItemCount = ValidItemCount + 1;
                        }
                        else
                        {
                            objCountLineItemDetailDTO.CountDetailGUID = null;
                            objCountLineItemDetailDTO.IsAdd = true;
                            objCountLineItemDetailDTO.IsUpdate = false;
                            ValidItemCount = ValidItemCount + 1;
                        }
                    }
                    else
                    {
                        objCountLineItemDetailDTO.IsAdd = false;
                        objCountLineItemDetailDTO.IsUpdate = false;
                    }
                }
                lstCountLineItemDetail = (from A in lstCountLineItemDetail where A.IsValidObject == true orderby A.ToolGUID, A.ToolBinID select A).ToList();

                //-------------------------------------------------------------------
                //
                if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0 && ValidItemCount > 0)
                {
                    //-------------------------------------------------------------------
                    //
                    foreach (ToolAssetCountLineItemDetailDTO objCountLineItemDetailDTO in lstCountLineItemDetail)
                    {
                        if (ToolGuid != Guid.Empty && BinId != 0 && lstCountLineItemDetailTmp.Count > 0 &&
                            (objCountLineItemDetailDTO.ToolGUID != ToolGuid || objCountLineItemDetailDTO.ToolBinID != BinId))
                        {
                            if (IsAdd == true)
                                SaveLotDetailPopupForToolCountAdd(lstCountLineItemDetailTmp);

                            lstCountLineItemDetailTmp = new List<ToolAssetCountLineItemDetailDTO>();
                        }

                        lstCountLineItemDetailTmp.Add(objCountLineItemDetailDTO);
                        IsAdd = objCountLineItemDetailDTO.IsAdd.Value;
                        IsUpdate = objCountLineItemDetailDTO.IsUpdate.Value;
                        ToolGuid = objCountLineItemDetailDTO.ToolGUID.Value;
                        BinId = objCountLineItemDetailDTO.ToolBinID.Value;
                    }

                    if (lstCountLineItemDetailTmp.Count > 0)
                    {
                        if (IsAdd == true)
                            SaveLotDetailPopupForToolCountAdd(lstCountLineItemDetailTmp);
                    }
                }
            }
        }

        public bool SaveLotDetailPopupForToolCountAdd(List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetail)
        {
            Guid CountGUID = Guid.Empty;
            Guid CountDetailGUID = Guid.Empty;
            double? Quantity = 0;

            ToolAssetCountDAL objToolAssetCountDAL = new ToolAssetCountDAL(SessionHelper.EnterPriseDBName);

            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
            {
                //-------------------------------------------------------------------
                //
                Quantity = (from A in lstCountLineItemDetail select (A.CountQuantity < 0 ? 0 : A.CountQuantity)).Sum();

                if (Quantity < 0)
                    Quantity = (-0.000000001);

                //-------------------------------------------------------------------
                //

                if (AddItemToCountAndReturnDetailGUIDForTool(lstCountLineItemDetail[0].CountGUID.GetValueOrDefault(Guid.Empty), lstCountLineItemDetail[0].ToolGUID.GetValueOrDefault(Guid.Empty), lstCountLineItemDetail[0].ToolBinID.GetValueOrDefault(0),
                                                      Quantity.GetValueOrDefault(0), null, null, null, null, null, null, null, false, out CountDetailGUID, lstCountLineItemDetail))
                {
                    foreach (ToolAssetCountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetail)
                    {
                        objCountLineItemDetail.CountDetailGUID = CountDetailGUID;
                        objCountLineItemDetail.GUID = Guid.NewGuid();
                        objCountLineItemDetail.CompanyID = SessionHelper.CompanyID;
                        objCountLineItemDetail.RoomID = SessionHelper.RoomID;
                        objCountLineItemDetail.Created = DateTime.UtcNow;
                        objCountLineItemDetail.CreatedBy = SessionHelper.UserID;
                        objCountLineItemDetail.Updated = DateTime.UtcNow;
                        objCountLineItemDetail.LastUpdatedBy = SessionHelper.UserID;
                        objCountLineItemDetail.IsDeleted = false;
                        objCountLineItemDetail.IsArchived = false;
                        objCountLineItemDetail.AddedFrom = "Web";
                        objCountLineItemDetail.ReceivedOn = DateTime.UtcNow;
                        objCountLineItemDetail.ReceivedOnWeb = DateTime.UtcNow;
                        objToolAssetCountDAL.AddToolAssetCountLineItemDetail(objCountLineItemDetail);
                    }
                }

                return true;
            }
            else
            {
                return false;
            }
        }

        public bool AddMissingSerialForToolCount(List<ToolAssetQuantityDetailDTO> lstCountLineItemDetail, Guid InsertedCountGuid)
        {
            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
            {
                ToolLocationDetailsDAL objToolLocationDetailsDAL = new ToolLocationDetailsDAL(SessionHelper.EnterPriseDBName);
                ToolMasterDAL objToolMasterDAL = new ToolMasterDAL(SessionHelper.EnterPriseDBName);
                ToolAssetCountDAL objToolAssetCountDAL = new ToolAssetCountDAL(SessionHelper.EnterPriseDBName);
                InventoryCountDAL objInventoryCountDAL = new InventoryCountDAL(SessionHelper.EnterPriseDBName);

                var lstToolGUID = lstCountLineItemDetail.GroupBy(x => x.ToolGUID).Select(g => g.First()).ToList();

                foreach (ToolAssetQuantityDetailDTO ToolGuid in lstToolGUID)
                {
                    ToolMasterDTO objTool = objToolMasterDAL.GetToolByGUIDPlain(ToolGuid.ToolGUID.GetValueOrDefault(Guid.Empty));

                    List<Guid> CountDetailGUIDs = new List<Guid>();
                    CountDetailGUIDs = objToolAssetCountDAL.GetCountDetailGUIDByCountGuid(InsertedCountGuid, ToolGuid.ToolGUID.GetValueOrDefault(Guid.Empty));

                    foreach (Guid objCountDetailGUID in CountDetailGUIDs)
                    {
                        List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetailSave = objToolAssetCountDAL.GetLotDetailForCountByCountDetailGUID(objCountDetailGUID, objTool.GUID, SessionHelper.RoomDateFormat, SessionHelper.CompanyID, SessionHelper.RoomID, false);

                        if (lstCountLineItemDetailSave != null && lstCountLineItemDetailSave.Count() > 0 && lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0)
                        {
                            if (objTool != null && objTool.ID > 0 && objTool.SerialNumberTracking == true)
                            {

                                List<ToolAssetCountLineItemDetailDTO> locations = objToolAssetCountDAL.GetAllToolLocationsByToolGuid(objTool.GUID, SessionHelper.CompanyID, SessionHelper.RoomID);
                                List<ToolAssetCountLineItemDetailDTO> Sublocations = locations.Where(x => x.ToolBinID == lstCountLineItemDetailSave[0].ToolBinID && !lstCountLineItemDetailSave.Select(y => y.SerialNumber.ToUpper().Trim()).Contains(x.SerialNumber.ToUpper().Trim())).ToList();

                                foreach (ToolAssetCountLineItemDetailDTO objLocation in Sublocations)
                                {
                                    ToolAssetCountLineItemDetailDTO objCountLineItemDetailDTO = new ToolAssetCountLineItemDetailDTO();

                                    objCountLineItemDetailDTO.ToolGUID = objTool.GUID;
                                    objCountLineItemDetailDTO.ToolName = objTool.ToolName;
                                    objCountLineItemDetailDTO.InventoryCountDetailDescription = objTool.Description;
                                    objCountLineItemDetailDTO.Comment = "Not specified serials in Tool Import";
                                    objCountLineItemDetailDTO.ToolBinID = objLocation.ToolBinID;
                                    objCountLineItemDetailDTO.Location = objLocation.Location;
                                    objCountLineItemDetailDTO.AvailableQuantity = null;
                                    objCountLineItemDetailDTO.CountQuantity = 0;
                                    objCountLineItemDetailDTO.Quantity = null;
                                    objCountLineItemDetailDTO.SerialNumberTracking = objTool.SerialNumberTracking;
                                    objCountLineItemDetailDTO.LotNumberTracking = objTool.LotNumberTracking;
                                    objCountLineItemDetailDTO.DateCodeTracking = objTool.DateCodeTracking;
                                    objCountLineItemDetailDTO.LotSerialNumber = (objTool.SerialNumberTracking == true ? objLocation.SerialNumber : "");
                                    objCountLineItemDetailDTO.SerialNumber = (objTool.SerialNumberTracking == true ? objLocation.SerialNumber : "");
                                    objCountLineItemDetailDTO.ReceivedDate = DateTime.UtcNow;
                                    objCountLineItemDetailDTO.Cost = objTool.Cost;
                                    objCountLineItemDetailDTO.CountGUID = InsertedCountGuid;
                                    objCountLineItemDetailDTO.CountDetailGUID = objCountDetailGUID;
                                    objCountLineItemDetailDTO.IsValidObject = true;
                                    lstCountLineItemDetailSave.Add(objCountLineItemDetailDTO);
                                }
                                SaveSerialDetailForCountUpdateToolCount(lstCountLineItemDetailSave);
                            }

                            double Quantity = 0;
                            bool IsValidInvalidQuantity = true;
                            int TotalItems = 0;
                            int InvalidQuantity = 0;

                            ToolAssetCountDetailDTO ToolCount = new ToolAssetCountDetailDTO();
                            ToolCount = objToolAssetCountDAL.GetToolCountdtlByGUId(objCountDetailGUID, SessionHelper.RoomID, SessionHelper.CompanyID);
                            if (ToolCount != null && ToolCount.ID > 0)
                            {
                                ToolAssetCountDetailDTO objToolAssetCountDetailDTO = new ToolAssetCountDetailDTO();
                                objToolAssetCountDetailDTO = objToolAssetCountDAL.BeforeApplyAction(ToolCount, SessionHelper.UserID, SessionHelper.CompanyID, SessionHelper.RoomID, lstCountLineItemDetailSave);
                                if (lstCountLineItemDetailSave != null || lstCountLineItemDetailSave.Count > 0)
                                {
                                    Quantity = lstCountLineItemDetailSave.Sum(x => (x.CountQuantity == null ? 0 : x.CountQuantity.Value));
                                    TotalItems++;
                                    if (((objToolAssetCountDetailDTO.CountQuantity == (-0.000000001)) ? 0 : objToolAssetCountDetailDTO.CountQuantity) != (Quantity == (-0.000000001) ? 0 : Quantity))
                                    {
                                        if (ToolCount.SerialNumberTracking == true)
                                        {
                                            IsValidInvalidQuantity = false;
                                            InvalidQuantity++;
                                        }
                                    }

                                    if (IsValidInvalidQuantity == true)
                                    {
                                        List<ToolAssetQuantityDetailDTO> lstProperRecords = new List<ToolAssetQuantityDetailDTO>();
                                        CartItemDAL objCartItemDAL = new CartItemDAL(SessionHelper.EnterPriseDBName);

                                        ToolAssetQuantityDetailDTO objToolAssetQuantityDetailDTO;
                                        bool isProperRecordsAvail = false;

                                        foreach (ToolAssetCountLineItemDetailDTO objCountLineItemDetailDTO in lstCountLineItemDetailSave)
                                        {
                                            objToolAssetQuantityDetailDTO = new ToolAssetQuantityDetailDTO();
                                            objToolAssetQuantityDetailDTO.ToolGUID = objCountLineItemDetailDTO.ToolGUID;
                                            objToolAssetQuantityDetailDTO.ToolBinID = objCountLineItemDetailDTO.ToolBinID;
                                            objToolAssetQuantityDetailDTO.Quantity = objCountLineItemDetailDTO.CountQuantity.GetValueOrDefault(0);
                                            if (objCountLineItemDetailDTO.SerialNumberTracking == true)
                                            {
                                                if (objToolAssetQuantityDetailDTO.Quantity < 0)
                                                    objToolAssetQuantityDetailDTO.Quantity = 0;
                                            }

                                            objToolAssetQuantityDetailDTO.ToolName = objCountLineItemDetailDTO.ToolName;
                                            objToolAssetQuantityDetailDTO.ReceivedDate = objCountLineItemDetailDTO.ReceivedDate;
                                            objToolAssetQuantityDetailDTO.SerialNumber = (!string.IsNullOrWhiteSpace(objCountLineItemDetailDTO.SerialNumber)) ? objCountLineItemDetailDTO.SerialNumber.Trim() : string.Empty;

                                            lstProperRecords.Add(objToolAssetQuantityDetailDTO);

                                            if (objCountLineItemDetailDTO.LotNumberTracking.GetValueOrDefault(false) == true || objCountLineItemDetailDTO.SerialNumberTracking.GetValueOrDefault(false) == true || objCountLineItemDetailDTO.DateCodeTracking.GetValueOrDefault(false) == true)
                                                UpdateCountLineItemOnApplyForImportToolCount(objCountLineItemDetailDTO, lstCountLineItemDetailSave);
                                        }

                                        if (lstProperRecords != null && lstProperRecords.Count > 0)
                                        {
                                            DataTable dtToolLocations = GetToolCountTableFromList(lstProperRecords);
                                            objToolAssetCountDAL.ApplyCountLineitem(dtToolLocations, SessionHelper.RoomID, SessionHelper.CompanyID, SessionHelper.UserID, InsertedCountGuid, objToolAssetCountDetailDTO.GUID);

                                            isProperRecordsAvail = true;
                                        }

                                        if (isProperRecordsAvail)
                                        {
                                            // PostApplyAction

                                            objToolAssetCountDAL.PostApplyOnSignleLineItem(objToolAssetCountDetailDTO, SessionHelper.UserID);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return true;
        }

        public bool SaveSerialDetailForCountUpdateToolCount(List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetail)
        {
            List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetailTmp;
            ToolAssetCountLineItemDetailDTO objCountLineItemDetailTmp;
            double? Quantity = 0;
            //-------------------------------------------------------------------
            //
            if (lstCountLineItemDetail != null && lstCountLineItemDetail.Count > 0 && lstCountLineItemDetail[0].CountDetailGUID != null)
            {
                ToolAssetCountDAL objToolAssetCountDAL = new ToolAssetCountDAL(SessionHelper.EnterPriseDBName);
                List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetailExisting = objToolAssetCountDAL.GetToolAssetCountLineItemDetailList(lstCountLineItemDetail[0].CountDetailGUID.Value);

                if (lstCountLineItemDetail[0].SerialNumberTracking == true || lstCountLineItemDetail[0].LotNumberTracking == true)
                {
                    foreach (ToolAssetCountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetailExisting)
                    {
                        List<ToolAssetCountLineItemDetailDTO> lst = lstCountLineItemDetail.Where(x => x.LotSerialNumber.ToUpper().Trim() == objCountLineItemDetail.LotSerialNumber.ToUpper().Trim()).ToList();

                        if (!lst.Any())
                        {
                            //---------------Delete Missing LOT/Serial---------------
                            //
                            objCountLineItemDetail.IsDeleted = true;
                            objToolAssetCountDAL.DeleteCountLineItemDetail(objCountLineItemDetail.GUID.Value);
                        }
                    }

                    ToolAssetCountLineItemDetailDTO objCountLineItemEditDetail;
                    foreach (ToolAssetCountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetail)
                    {
                        if (lstCountLineItemDetailExisting.Where(x => x.LotSerialNumber.ToUpper().Trim() == objCountLineItemDetail.LotSerialNumber.ToUpper().Trim()).Count() > 0)
                        {
                            //---------------Update Existing LOT/Serial---------------
                            //
                            objCountLineItemEditDetail = lstCountLineItemDetailExisting.Where(x => x.LotSerialNumber.ToUpper().Trim() == objCountLineItemDetail.LotSerialNumber.ToUpper().Trim()).FirstOrDefault();

                            objCountLineItemEditDetail.Comment = objCountLineItemDetail.Comment;
                            objCountLineItemEditDetail.CountQuantity = objCountLineItemDetail.CountQuantity;
                            objCountLineItemEditDetail.LotNumberTracking = lstCountLineItemDetail[0].LotNumberTracking;
                            objCountLineItemEditDetail.SerialNumberTracking = lstCountLineItemDetail[0].SerialNumberTracking;
                            objCountLineItemEditDetail.DateCodeTracking = lstCountLineItemDetail[0].DateCodeTracking;

                            objCountLineItemEditDetail.Updated = DateTime.UtcNow;
                            objCountLineItemEditDetail.LastUpdatedBy = SessionHelper.UserID;
                            objCountLineItemEditDetail.EditedFrom = "Web";



                            objToolAssetCountDAL.UpdateToolAssetCountLineItemDetail(objCountLineItemEditDetail);
                        }
                        else
                        {
                            //---------------Insert New LOT/Serial---------------
                            //
                            objCountLineItemDetail.GUID = Guid.NewGuid();
                            objCountLineItemDetail.CompanyID = SessionHelper.CompanyID;
                            objCountLineItemDetail.RoomID = SessionHelper.RoomID;
                            objCountLineItemDetail.Created = DateTime.UtcNow;
                            objCountLineItemDetail.CreatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.Updated = DateTime.UtcNow;
                            objCountLineItemDetail.LastUpdatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.IsDeleted = false;
                            objCountLineItemDetail.IsArchived = false;
                            objCountLineItemDetail.AddedFrom = "Web";
                            objCountLineItemDetail.ReceivedOn = DateTime.UtcNow;
                            objCountLineItemDetail.ReceivedOnWeb = DateTime.UtcNow;
                            objToolAssetCountDAL.AddToolAssetCountLineItemDetail(objCountLineItemDetail);
                        }
                    }
                }
                else
                {
                    bool IsNew = false;
                    foreach (ToolAssetCountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetail)
                    {
                        IsNew = true;
                        objCountLineItemDetailTmp = null;
                        if (objCountLineItemDetail.GUID != null && objCountLineItemDetail.GUID != Guid.Empty)
                        {
                            objCountLineItemDetailTmp = lstCountLineItemDetailExisting.Where(x => x.GUID == objCountLineItemDetail.GUID).FirstOrDefault();
                            if (objCountLineItemDetailTmp != null)
                                IsNew = false;
                        }

                        if (IsNew)
                        {
                            objCountLineItemDetailTmp = new ToolAssetCountLineItemDetailDTO();
                            objCountLineItemDetail.GUID = Guid.NewGuid();
                            objCountLineItemDetail.ToolGUID = objCountLineItemDetail.ToolGUID;
                            objCountLineItemDetail.ToolBinID = objCountLineItemDetail.ToolBinID;
                            objCountLineItemDetail.CompanyID = SessionHelper.CompanyID;
                            objCountLineItemDetail.RoomID = SessionHelper.RoomID;
                            objCountLineItemDetail.Created = DateTime.UtcNow;
                            objCountLineItemDetail.CreatedBy = SessionHelper.UserID;
                            objCountLineItemDetail.AddedFrom = "Web";
                            objCountLineItemDetail.ReceivedOn = DateTime.UtcNow;
                            objCountLineItemDetail.ReceivedOnWeb = DateTime.UtcNow;
                            objCountLineItemDetail.Received = (objCountLineItemDetail.ReceivedDate == null ? "" : objCountLineItemDetail.ReceivedDate.Value.ToString(SessionHelper.RoomDateFormat));
                            objCountLineItemDetail.Cost = objCountLineItemDetail.Cost;
                            objCountLineItemDetail.CountGUID = objCountLineItemDetail.CountGUID;
                            objCountLineItemDetail.CountDetailGUID = objCountLineItemDetail.CountDetailGUID;
                        }

                        objCountLineItemDetailTmp.Comment = objCountLineItemDetail.Comment;
                        objCountLineItemDetailTmp.CountQuantity = objCountLineItemDetail.CountQuantity;
                        objCountLineItemDetailTmp.Updated = DateTime.UtcNow;
                        objCountLineItemDetailTmp.LastUpdatedBy = SessionHelper.UserID;
                        objCountLineItemDetailTmp.EditedFrom = "Web";
                        objCountLineItemDetail.IsDeleted = false;
                        objCountLineItemDetail.IsArchived = false;

                        if (IsNew)
                        {
                            objToolAssetCountDAL.AddToolAssetCountLineItemDetail(objCountLineItemDetail);
                        }
                        else
                        {
                            objToolAssetCountDAL.UpdateToolAssetCountLineItemDetail(objCountLineItemDetail);
                        }
                    }

                    //---------------Delete Missing LOT/Serial---------------
                    //
                    lstCountLineItemDetailTmp = lstCountLineItemDetailExisting.Where(x => !lstCountLineItemDetail.Select(y => y.GUID).Contains(x.GUID)).ToList();
                    foreach (ToolAssetCountLineItemDetailDTO objCountLineItemDetail in lstCountLineItemDetailTmp)
                    {
                        objCountLineItemDetail.IsDeleted = true;
                        objToolAssetCountDAL.DeleteCountLineItemDetail(objCountLineItemDetail.GUID.Value);
                    }
                }

                Quantity = lstCountLineItemDetail.Select(x => (x.CountQuantity < 0 ? 0 : x.CountQuantity)).Sum();
                objToolAssetCountDAL.UpdateCountInToolAssetCountDetails(lstCountLineItemDetail[0].CountDetailGUID, Quantity, lstCountLineItemDetail);
            }

            return true;
        }

        public void UpdateCountLineItemOnApplyForImportToolCount(ToolAssetCountLineItemDetailDTO objCountLineItemDetail, List<ToolAssetCountLineItemDetailDTO> lstCountLineItemDetail)
        {
            ToolAssetCountLineItemDetailDTO objCountLineItemEditDetail = new ToolAssetCountLineItemDetailDTO();

            objCountLineItemEditDetail = lstCountLineItemDetail.Where(x => (x.LotSerialNumber ?? string.Empty).ToUpper().Trim() == (objCountLineItemDetail.LotSerialNumber ?? string.Empty).ToUpper().Trim()).FirstOrDefault();

            objCountLineItemEditDetail.Comment = objCountLineItemDetail.Comment;
            objCountLineItemEditDetail.CountQuantity = objCountLineItemDetail.CountQuantity;

            objCountLineItemEditDetail.LotNumberTracking = lstCountLineItemDetail[0].LotNumberTracking;
            objCountLineItemEditDetail.SerialNumberTracking = lstCountLineItemDetail[0].SerialNumberTracking;
            objCountLineItemEditDetail.DateCodeTracking = lstCountLineItemDetail[0].DateCodeTracking;

            objCountLineItemEditDetail.Updated = DateTime.UtcNow;
            objCountLineItemEditDetail.LastUpdatedBy = SessionHelper.UserID;
            objCountLineItemEditDetail.EditedFrom = "Web";

            new ToolAssetCountDAL(SessionHelper.EnterPriseDBName).UpdateToolAssetCountLineItemDetail(objCountLineItemEditDetail);
        }

        #endregion

        private DataTable GetPullHistoryTableFromList(List<PullImportWithSameQty> lstPullHistory)
        {
            DataTable ReturnDT = new DataTable("PullMasterTable");
            try
            {
                DataColumn[] arrColumns = new DataColumn[]
                {
                new DataColumn() { AllowDBNull=true,ColumnName="ID",DataType=typeof(Int64)},
                new DataColumn() { AllowDBNull=true,ColumnName="ItemNumber",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="PullQuantity",DataType=typeof(float)},
                new DataColumn() { AllowDBNull=true,ColumnName="BinNumber",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF1",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF2",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF3",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF4",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="UDF5",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="ProjectSpendName",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="PullOrderNumber",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="WorkOrder",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="Asset",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="ActionType",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="Created",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="ItemCost",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="CostUOMValue",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="Status",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="Reason",DataType=typeof(String)},
                new DataColumn() { AllowDBNull=true,ColumnName="WorkOrderGUID",DataType=typeof(Guid)}
            };
                ReturnDT.Columns.AddRange(arrColumns);

                if (lstPullHistory != null && lstPullHistory.Count > 0)
                {
                    foreach (var item in lstPullHistory)
                    {
                        DataRow row = ReturnDT.NewRow();
                        row["ID"] = item.ID;
                        row["ItemNumber"] = item.ItemNumber;
                        row["PullQuantity"] = (item.PullQuantity) > 0 ? (object)item.PullQuantity : DBNull.Value;
                        row["BinNumber"] = item.BinNumber;
                        row["UDF1"] = item.UDF1;
                        row["UDF2"] = item.UDF2;
                        row["UDF3"] = item.UDF3;
                        row["UDF4"] = item.UDF4;
                        row["UDF5"] = item.UDF5;
                        row["ProjectSpendName"] = item.ProjectSpendName;
                        row["PullOrderNumber"] = item.PullOrderNumber;
                        row["WorkOrder"] = item.WorkOrder;
                        row["Asset"] = item.Asset;
                        row["ActionType"] = item.ActionType;
                        row["Created"] = item.CreatedDate.HasValue ? (object)item.CreatedDate.Value : DBNull.Value;
                        row["ItemCost"] = item.ItemCost;
                        row["CostUOMValue"] = item.CostUOMValue;
                        row["Status"] = item.Status;
                        row["Reason"] = item.Reason;
                        row["WorkOrderGUID"] = item.WorkOrderGuid.HasValue ? (object)item.WorkOrderGuid.Value : DBNull.Value;
                        ReturnDT.Rows.Add(row);
                    }
                }
                return ReturnDT;
            }
            catch
            {
                return ReturnDT;
            }
        }

        private void ValidateRequisitionImport(List<RequisitionImport> Requisitions , List<UserRoleModuleDetailsDTO> UserRoleDetails
            , UserAccessDTO userAccess)
        { 
            if (Requisitions != null && Requisitions.Any() && Requisitions.Count() > 0)
            {
                RequisitionMasterDAL requisitionMasterDAL = new RequisitionMasterDAL(SessionHelper.EnterPriseDBName);
                SupplierMasterDAL objDAL = new SupplierMasterDAL(SessionHelper.EnterPriseDBName);
                SupplierAccountDetailsDAL objSupplierAccountDetailsDAL = new SupplierAccountDetailsDAL(SessionHelper.EnterPriseDBName);
                CustomerMasterDAL customerMasterDAL = new CustomerMasterDAL(SessionHelper.EnterPriseDBName);
                CommonDAL objCDAL = objCDAL = new CommonDAL(SessionHelper.EnterPriseDBName);
                WorkOrderDAL objWODAL = new WorkOrderDAL(SessionHelper.EnterPriseDBName);
                MaterialStagingDAL msDAL = new MaterialStagingDAL(SessionHelper.EnterPriseDBName);
                TechnicialMasterDAL TechnicialMasterDAL = new TechnicialMasterDAL(SessionHelper.EnterPriseDBName);
                ProjectMasterDAL projectMasterDAL = new ProjectMasterDAL(SessionHelper.EnterPriseDBName);
                bool IsOntheflyright = false;
                string columnList = "ID,RoomName,IsAllowRequisitionDuplicate,AttachingWOWithRequisition,DefaultRequisitionRequiredDays";
                RoomDTO roomDTO = objCDAL.GetSingleRecord<RoomDTO>(columnList, "Room", "ID = " + SessionHelper.RoomID.ToString() + "", "");
                ItemMasterDAL ItemDAL = new ItemMasterDAL(SessionHelper.EnterPriseDBName);
                ToolMasterDAL ToolDAL = new ToolMasterDAL(SessionHelper.EnterPriseDBName);
                var objUDFDAL = new eTurns.DAL.UDFDAL(SessionHelper.EnterPriseDBName);
                RegionSettingDAL objRegionSettingDAL = new RegionSettingDAL(SessionHelper.EnterPriseDBName);
                var msgInvalidTechnician = ResToolMaster.MsgInvalidTechnicianWithName;
                if (UserRoleDetails != null && UserRoleDetails.Count() > 0)
                {
                    var Ontheflyright = UserRoleDetails.Where(i => i.ModuleID == 29).FirstOrDefault();

                    if (Ontheflyright != null)
                    {
                        IsOntheflyright = Ontheflyright.IsChecked;
                    }
                }

                foreach (var requisition in Requisitions)
                {
                    string strOK1 = "ok";
                    
                    if (!roomDTO.IsAllowRequisitionDuplicate.GetValueOrDefault(true))
                        strOK1 = requisitionMasterDAL.RequisitionNumberDuplicateCheck(0, requisition.RequisitionNumber, SessionHelper.CompanyID, SessionHelper.RoomID);

                    if (strOK1 == "duplicate")
                    {
                        requisition.Reason += string.Format(ResMessage.DuplicateMessage, ResRequisitionMaster.RequisitionNumber, requisition.RequisitionNumber);
                        requisition.Status = "fail";
                    }

                    DateTime datetimetoConsider = objRegionSettingDAL.GetCurrentDatetimebyTimeZone(SessionHelper.RoomID, SessionHelper.CompanyID, 0);

                    if (string.IsNullOrEmpty(requisition.RequiredDate) || string.IsNullOrWhiteSpace(requisition.RequiredDate))
                    {
                        if (roomDTO.DefaultRequisitionRequiredDays.GetValueOrDefault(0) <= 0)
                        {
                            requisition.Reason += string.Format(ResMessage.MsgRequired, ResRequisitionMaster.RequiredDate);
                            requisition.Status = "fail";
                        }
                        else
                        {
                            requisition.RequiredDate = datetimetoConsider.AddDays(roomDTO.DefaultRequisitionRequiredDays.GetValueOrDefault(0)).ToString();
                            requisition.RequiredDt = datetimetoConsider.AddDays(roomDTO.DefaultRequisitionRequiredDays.GetValueOrDefault(0));
                        }
                    }
                    else
                    {
                        DateTime dt;
                        string _expirationDt = requisition.RequiredDate.Split(' ')[0];
                        DateTime.TryParseExact(_expirationDt, SessionHelper.RoomDateFormat, ResourceHelper.CurrentCult, System.Globalization.DateTimeStyles.None, out dt);

                        if (dt != DateTime.MinValue)
                        {
                            requisition.RequiredDate = dt.ToString(SessionHelper.RoomDateFormat);
                            requisition.RequiredDt = dt;
                        }
                        else
                        {
                            requisition.Reason += string.Format(ResImportMasters.DateShouldBeInFormat, ResRequisitionMaster.RequiredDate, SessionHelper.RoomDateFormat);
                            requisition.Status = "fail";
                        }
                    }

                    if (SessionHelper.RoleID != -1)
                    {
                        SupplierMasterDTO supplier = null;

                        if (!string.IsNullOrEmpty(requisition.Supplier) && !string.IsNullOrWhiteSpace(requisition.Supplier))
                        {
                            supplier = objDAL.GetSupplierByNamePlain(SessionHelper.RoomID, SessionHelper.CompanyID, false, requisition.Supplier.Trim());

                            if (!(supplier != null && supplier.ID > 0))
                            {
                                if (UserRoleDetails != null && UserRoleDetails.Count() > 0)
                                {
                                    bool IsInsertSupplier = false;
                                    var InsertSupplierRights = UserRoleDetails.Where(i => i.ModuleID == 47).FirstOrDefault();

                                    if (InsertSupplierRights != null)
                                    {
                                        IsInsertSupplier = InsertSupplierRights.IsInsert;
                                    }
                                    if (IsInsertSupplier && IsOntheflyright)
                                    {
                                        SupplierMasterDTO objDTO = new SupplierMasterDTO
                                        {
                                            ID = 1,
                                            SupplierName = requisition.Supplier.Length > 255 ? requisition.Supplier.Substring(0, 255) : requisition.Supplier,
                                            IsEmailPOInBody = false,
                                            IsEmailPOInPDF = false,
                                            IsEmailPOInCSV = false,
                                            IsEmailPOInX12 = false,
                                            IsDeleted = false,
                                            IsArchived = false,
                                            Created = DateTime.UtcNow,
                                            LastUpdated = System.DateTime.UtcNow,
                                            LastUpdatedBy = SessionHelper.UserID,
                                            Room = SessionHelper.RoomID,
                                            CompanyID = SessionHelper.CompanyID,
                                            CreatedBy = SessionHelper.UserID,
                                            GUID = Guid.NewGuid(),
                                            AddedFrom = "Requisition Import",
                                            EditedFrom = "Requisition Import",
                                            ReceivedOn = DateTimeUtility.DateTimeNow,
                                            ReceivedOnWeb = DateTimeUtility.DateTimeNow
                                        };
                                        
                                        supplier.ID = objDAL.Insert(objDTO);
                                    }
                                    else
                                    {
                                        requisition.Status = "fail";
                                        requisition.Reason+= (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResOrder.Supplier, requisition.Supplier));
                                    }
                                }
                            }                            
                        }

                        if (supplier != null && supplier.ID > 0 && !string.IsNullOrEmpty(requisition.SupplierAccount) && 
                            !string.IsNullOrWhiteSpace(requisition.SupplierAccount))
                        {
                            List<SupplierAccountDetailsDTO> lstItemSupplier = objSupplierAccountDetailsDAL.GetAllAccountsBySupplierID(supplier.ID,SessionHelper.RoomID, SessionHelper.CompanyID).ToList();
                            
                            if (lstItemSupplier != null && lstItemSupplier.Count > 0)
                            {
                                var account = lstItemSupplier.Where(x => x.IsDeleted == false && (x.AccountNo ?? string.Empty).ToLower() == requisition.SupplierAccount.ToLower()).OrderByDescending(x => x.Created).FirstOrDefault();
                                
                                if (!(account != null && account.ID > 0))
                                {
                                    if (UserRoleDetails != null && UserRoleDetails.Count() > 0)
                                    {
                                        bool IsInsertSuppAccDetail = false;
                                        var InsertSuppAccDetailRights = UserRoleDetails.Where(i => i.ModuleID == 143).FirstOrDefault();

                                        if (InsertSuppAccDetailRights != null)
                                        {
                                            IsInsertSuppAccDetail = InsertSuppAccDetailRights.IsInsert;
                                        }

                                        if (IsInsertSuppAccDetail && IsOntheflyright)
                                        {
                                            //SupplierAccountDetailsDTO objSupAccDTO = new SupplierAccountDetailsDTO();
                                            //SupplierAccountDetailsDAL objSAD = new SupplierAccountDetailsDAL(EnterpriseDBName);

                                            //objSupAccDTO.AccountName = accountNumber;
                                            //objSupAccDTO.AccountNo = accountNumber;
                                            //objSupAccDTO.Created = DateTime.UtcNow;
                                            //objSupAccDTO.LastUpdatedBy = UserID;
                                            //objSupAccDTO.Updated = DateTime.UtcNow;
                                            //objSupAccDTO.CreatedBy = UserID;
                                            //objSupAccDTO.SupplierID = supplierID;
                                            //objSupAccDTO.CompanyID = CompanyID;
                                            //objSupAccDTO.Room = RoomID;
                                            //objSupAccDTO.IsDefault = isDefaultInsertAccount;
                                            //objSAD.Insert(objSupAccDTO);

                                            //return objSupAccDTO.GUID;
                                        }
                                        else
                                        { 
                                            requisition.Reason += (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResOrder.SupplierAccountGuid, requisition.SupplierAccount));
                                            requisition.Status = "fail";
                                        }
                                    }
                                }
                            }
                            
                        }

                        if (supplier != null && supplier.ID > 0 && !string.IsNullOrEmpty(requisition.BillingAccount) &&
                            !string.IsNullOrWhiteSpace(requisition.BillingAccount))
                        {
                            List<SupplierAccountDetailsDTO> lstItemSupplier = objSupplierAccountDetailsDAL.GetAllAccountsBySupplierID(supplier.ID, SessionHelper.RoomID, SessionHelper.CompanyID).ToList();

                            if (lstItemSupplier != null && lstItemSupplier.Count > 0)
                            {
                                var account = lstItemSupplier.Where(x => x.IsDeleted == false && (x.AccountNo ?? string.Empty).ToLower() == requisition.BillingAccount.ToLower()).OrderByDescending(x => x.Created).FirstOrDefault();

                                if (!(account != null && account.ID > 0))
                                {
                                    if (UserRoleDetails != null && UserRoleDetails.Count() > 0)
                                    {
                                        bool IsInsertSuppAccDetail = false;
                                        var InsertSuppAccDetailRights = UserRoleDetails.Where(i => i.ModuleID == 143).FirstOrDefault();

                                        if (InsertSuppAccDetailRights != null)
                                        {
                                            IsInsertSuppAccDetail = InsertSuppAccDetailRights.IsInsert;
                                        }

                                        if (IsInsertSuppAccDetail && IsOntheflyright)
                                        {
                                            //SupplierAccountDetailsDTO objSupAccDTO = new SupplierAccountDetailsDTO();
                                            //SupplierAccountDetailsDAL objSAD = new SupplierAccountDetailsDAL(EnterpriseDBName);

                                            //objSupAccDTO.AccountName = accountNumber;
                                            //objSupAccDTO.AccountNo = accountNumber;
                                            //objSupAccDTO.Created = DateTime.UtcNow;
                                            //objSupAccDTO.LastUpdatedBy = UserID;
                                            //objSupAccDTO.Updated = DateTime.UtcNow;
                                            //objSupAccDTO.CreatedBy = UserID;
                                            //objSupAccDTO.SupplierID = supplierID;
                                            //objSupAccDTO.CompanyID = CompanyID;
                                            //objSupAccDTO.Room = RoomID;
                                            //objSupAccDTO.IsDefault = isDefaultInsertAccount;
                                            //objSAD.Insert(objSupAccDTO);

                                            //return objSupAccDTO.GUID;
                                        }
                                        else
                                        {
                                            requisition.Reason += (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResRequisitionMaster.BillingAccountID, requisition.BillingAccount));
                                            requisition.Status = "fail";
                                        }
                                    }
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(requisition.CustomerName) && !string.IsNullOrWhiteSpace(requisition.CustomerName))
                        {
                            var customer = customerMasterDAL.GetCustomerByName(requisition.CustomerName.Trim(),SessionHelper.RoomID, SessionHelper.CompanyID);
                            
                            if (customer == null)
                            {
                                bool IsInsertCustomer = false;
                                var InsertCustomerRights = UserRoleDetails.Where(i => i.ModuleID == 40).FirstOrDefault();

                                if (InsertCustomerRights != null)
                                {
                                    IsInsertCustomer = InsertCustomerRights.IsInsert;
                                }

                                if (IsInsertCustomer == false || IsOntheflyright == false)
                                {
                                    requisition.Reason += (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResRequisitionMaster.CustomerGUID, requisition.CustomerName));
                                    requisition.Status = "fail";
                                }
                            }
                        }
                        
                        if (!string.IsNullOrEmpty(requisition.Workorder) && !string.IsNullOrWhiteSpace(requisition.Workorder))
                        {
                            int? _AttachingWOWithRequisition = (int)AttachingWOWithRequisition.New;
                            
                            if (roomDTO != null)
                            {
                                _AttachingWOWithRequisition = roomDTO.AttachingWOWithRequisition.GetValueOrDefault((int)AttachingWOWithRequisition.New);
                            }

                            WorkOrderDTO objWODTO = new WorkOrderDTO();
                            objWODTO = objWODAL.GetWorkOrdersByNamePlainSingle(requisition.Workorder, SessionHelper.RoomID, SessionHelper.CompanyID);

                            if ((objWODTO == null || objWODTO.ID == 0) && _AttachingWOWithRequisition == (int)AttachingWOWithRequisition.Existing)
                            {
                                requisition.Reason += ResRequisitionMaster.NoRightsToInsertNewWOToReq; 
                                requisition.Status = "fail";
                            }
                            else if (objWODTO != null && objWODTO.ID > 0 && _AttachingWOWithRequisition == (int)AttachingWOWithRequisition.New)
                            {
                                requisition.Reason += ResRequisitionMaster.NoRightsToUseExistingWOToReq;
                                requisition.Status = "fail";
                            }

                            if ((objWODTO == null || objWODTO.ID == 0) && (_AttachingWOWithRequisition == (int)AttachingWOWithRequisition.New || 
                                _AttachingWOWithRequisition == (int)AttachingWOWithRequisition.Mixed))
                            {
                                if (UserRoleDetails != null && UserRoleDetails.Any() && UserRoleDetails.Count() > 0)
                                {
                                    bool isHavingWorkorderInsertRight = false;
                                    var WorkorderInsertRight = UserRoleDetails.Where(i => i.ModuleID == 67).FirstOrDefault();

                                    if (WorkorderInsertRight != null)
                                    {
                                        isHavingWorkorderInsertRight = WorkorderInsertRight.IsInsert;
                                    }

                                    if (!isHavingWorkorderInsertRight || !IsOntheflyright)
                                    {
                                        requisition.Reason += (" " + ResMessage.NoRightsToInsertWorkorder);
                                        requisition.Status = "fail";
                                    }
                                }                                
                            }
                        }

                        if (!string.IsNullOrEmpty(requisition.StagingName) && !string.IsNullOrWhiteSpace(requisition.StagingName))
                        {
                            IEnumerable<MaterialStagingDTO> MSDTOList = msDAL.GetMaterialStaging(SessionHelper.RoomID, SessionHelper.CompanyID, false, false, requisition.StagingName, null);
                            if (!(MSDTOList != null && MSDTOList.Count() > 0))
                            {
                                bool IsInsertMS = false;
                                var InsertMaterialStagingRights = UserRoleDetails.Where(i => i.ModuleID == 65).FirstOrDefault();

                                if (InsertMaterialStagingRights != null)
                                {
                                    IsInsertMS = InsertMaterialStagingRights.IsInsert;
                                }

                                if (IsInsertMS == false || IsOntheflyright == false)
                                {
                                    requisition.Reason += (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResMaterialStaging.StagingName, requisition.StagingName));
                                    requisition.Status = "fail";
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(requisition.Technician) && !string.IsNullOrWhiteSpace(requisition.Technician))
                        {
                            string TechnicianCode = "";
                            string TechnicianName = requisition.Technician.Trim();
                            
                            if (TechnicianName.Contains(" --- "))
                            {
                                TechnicianCode = TechnicianName.Split(new string[1] { " --- " }, StringSplitOptions.RemoveEmptyEntries)[0];
                                TechnicianName = TechnicianName.Split(new string[1] { " --- " }, StringSplitOptions.RemoveEmptyEntries)[1];
                            }
                            else
                            {
                                TechnicianCode = TechnicianName;
                                TechnicianName = "";
                            }

                            if (TechnicianCode.Trim() == "")
                            {
                                requisition.Reason += (" " + string.Format(msgInvalidTechnician, requisition.Technician));
                                requisition.Status = "fail";
                            }

                            if ((!string.IsNullOrEmpty(TechnicianCode) && TechnicianCode.IndexOf("---") >= 0)
                                || (!string.IsNullOrEmpty(TechnicianName) && TechnicianName.IndexOf("---") >= 0))
                            {
                                requisition.Reason += ResToolCheckInOutHistory.MsgRemoveInvalidValueFromTechnician + " : " + requisition.Technician;
                                requisition.Status = "fail";
                            }

                            TechnicianMasterDTO objTechnicianMasterDTO = TechnicialMasterDAL.GetTechnicianByCodePlain(TechnicianCode, SessionHelper.RoomID, SessionHelper.CompanyID);

                            if (objTechnicianMasterDTO == null)
                            {
                                bool IsInsertTechnician = false;
                                var InsertCustomerRights = UserRoleDetails.Where(i => i.ModuleID == 49).FirstOrDefault();

                                if (InsertCustomerRights != null)
                                {
                                    IsInsertTechnician = InsertCustomerRights.IsInsert;
                                }

                                if (IsInsertTechnician == false || IsOntheflyright == false)
                                {
                                    requisition.Reason += (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResRequisitionMaster.TechnicianID, requisition.Technician));
                                    requisition.Status = "fail";
                                }
                            }                             
                        }

                        if (!string.IsNullOrEmpty(requisition.ProjectSpend) && !string.IsNullOrWhiteSpace(requisition.ProjectSpend))
                        {
                            ProjectMasterDTO psdto = projectMasterDAL.GetProjectspendByName(requisition.ProjectSpend.Trim(), SessionHelper.RoomID, SessionHelper.CompanyID, false, false, false);
                            
                            if (psdto == null)
                            {
                                bool IsInsertPS = false;
                                var InsertProjectSpendRights = UserRoleDetails.Where(i => i.ModuleID == 46).FirstOrDefault();

                                if (InsertProjectSpendRights != null)
                                {
                                    IsInsertPS = InsertProjectSpendRights.IsInsert;
                                }

                                if (IsInsertPS == false || IsOntheflyright == false)
                                {
                                    requisition.Reason += (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResRequisitionMaster.ProjectSpendGUID, requisition.ProjectSpend));
                                    requisition.Status = "fail";
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(requisition.LineItemProjectSpend) && !string.IsNullOrWhiteSpace(requisition.LineItemProjectSpend))
                        {
                            ProjectMasterDTO psdto = projectMasterDAL.GetProjectspendByName(requisition.LineItemProjectSpend.Trim(), SessionHelper.RoomID, SessionHelper.CompanyID, false, false, false);

                            if (psdto == null)
                            {
                                bool IsInsertPS = false;
                                var InsertProjectSpendRights = UserRoleDetails.Where(i => i.ModuleID == 46).FirstOrDefault();

                                if (InsertProjectSpendRights != null)
                                {
                                    IsInsertPS = InsertProjectSpendRights.IsInsert;
                                }

                                if (IsInsertPS == false || IsOntheflyright == false)
                                {
                                    requisition.Reason += (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResRequisitionMaster.ProjectSpendGUID, requisition.LineItemProjectSpend));
                                    requisition.Status = "fail";
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(requisition.LineItemTechnician) && !string.IsNullOrWhiteSpace(requisition.LineItemTechnician))
                        {
                            string TechnicianCode = "";
                            string TechnicianName = requisition.LineItemTechnician.Trim();

                            if (TechnicianName.Contains(" --- "))
                            {
                                TechnicianCode = TechnicianName.Split(new string[1] { " --- " }, StringSplitOptions.RemoveEmptyEntries)[0];
                                TechnicianName = TechnicianName.Split(new string[1] { " --- " }, StringSplitOptions.RemoveEmptyEntries)[1];
                            }
                            else
                            {
                                TechnicianCode = TechnicianName;
                                TechnicianName = "";
                            }

                            if (TechnicianCode.Trim() == "")
                            {
                                requisition.Reason += (" " + string.Format(msgInvalidTechnician, requisition.LineItemTechnician));
                                requisition.Status = "fail";
                            }

                            if ((!string.IsNullOrEmpty(TechnicianCode) && TechnicianCode.IndexOf("---") >= 0)
                                || (!string.IsNullOrEmpty(TechnicianName) && TechnicianName.IndexOf("---") >= 0))
                            {
                                requisition.Reason += ResToolCheckInOutHistory.MsgRemoveInvalidValueFromTechnician + " : " + requisition.LineItemTechnician;
                                requisition.Status = "fail";
                            }

                            TechnicianMasterDTO objTechnicianMasterDTO = TechnicialMasterDAL.GetTechnicianByCodePlain(TechnicianCode, SessionHelper.RoomID, SessionHelper.CompanyID);

                            if (objTechnicianMasterDTO == null)
                            {
                                bool IsInsertTechnician = false;
                                var InsertCustomerRights = UserRoleDetails.Where(i => i.ModuleID == 49).FirstOrDefault();

                                if (InsertCustomerRights != null)
                                {
                                    IsInsertTechnician = InsertCustomerRights.IsInsert;
                                }

                                if (IsInsertTechnician == false || IsOntheflyright == false)
                                {
                                    requisition.Reason += (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResRequisitionMaster.TechnicianID, requisition.LineItemTechnician));
                                    requisition.Status = "fail";
                                }
                            }
                        }

                        if (supplier != null && supplier.ID > 0 && !string.IsNullOrEmpty(requisition.LineItemSupplierAccount) &&
                            !string.IsNullOrWhiteSpace(requisition.LineItemSupplierAccount))
                        {
                            List<SupplierAccountDetailsDTO> lstItemSupplier = objSupplierAccountDetailsDAL.GetAllAccountsBySupplierID(supplier.ID, SessionHelper.RoomID, SessionHelper.CompanyID).ToList();

                            if (lstItemSupplier != null && lstItemSupplier.Count > 0)
                            {
                                var account = lstItemSupplier.Where(x => x.IsDeleted == false && (x.AccountNo ?? string.Empty).ToLower() == requisition.LineItemSupplierAccount.ToLower()).OrderByDescending(x => x.Created).FirstOrDefault();

                                if (!(account != null && account.ID > 0))
                                {
                                    if (UserRoleDetails != null && UserRoleDetails.Count() > 0)
                                    {
                                        bool IsInsertSuppAccDetail = false;
                                        var InsertSuppAccDetailRights = UserRoleDetails.Where(i => i.ModuleID == 143).FirstOrDefault();

                                        if (InsertSuppAccDetailRights != null)
                                        {
                                            IsInsertSuppAccDetail = InsertSuppAccDetailRights.IsInsert;
                                        }

                                        if (!IsInsertSuppAccDetail || !IsOntheflyright)
                                        {
                                            requisition.Reason += (" " + string.Format(ResCommon.MsgNotAllowToInsert, ResOrder.SupplierAccountGuid, requisition.LineItemSupplierAccount));
                                            requisition.Status = "fail";
                                        }
                                    }
                                }
                            }

                        }
                        
                        if (requisition.RequisitionStatus.ToLower() == "approved")
                        {
                            bool isHavingReqApproveRight = false;
                            var requisitionApproveRights = UserRoleDetails.Where(i => i.ModuleID == 85).FirstOrDefault();

                            if (requisitionApproveRights != null)
                            {
                                isHavingReqApproveRight = requisitionApproveRights.IsInsert;
                            }

                            if (!isHavingReqApproveRight)
                            {
                                requisition.Reason += (" " + ResRequisitionMaster.NotAllowToApproveRequisition); 
                                requisition.Status = "fail";
                            }
                        }

                        if(supplier != null && supplier.ID > 0)
                        {
                            if (userAccess != null && !string.IsNullOrWhiteSpace(userAccess.SupplierIDs))
                            {
                                List<string> strSupplier = userAccess.SupplierIDs.Split(new char[1] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();
                                
                                if (strSupplier != null && strSupplier.Count > 0)
                                {
                                    if (strSupplier.Contains(supplier.ID.ToString()) == false)
                                    {
                                        requisition.Reason += (" " + ResRequisitionMaster.SupplierApprove +" " + requisition.Supplier);
                                        requisition.Status = "fail";
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(requisition.Workorder) && !string.IsNullOrWhiteSpace(requisition.Workorder))
                        {
                            int? _AttachingWOWithRequisition = (int)AttachingWOWithRequisition.New;

                            if (roomDTO != null)
                            {
                                _AttachingWOWithRequisition = roomDTO.AttachingWOWithRequisition.GetValueOrDefault((int)AttachingWOWithRequisition.New);
                            }

                            WorkOrderDTO objWODTO = new WorkOrderDTO();
                            objWODTO = objWODAL.GetWorkOrdersByNamePlainSingle(requisition.Workorder, SessionHelper.RoomID, SessionHelper.CompanyID);

                            if ((objWODTO == null || objWODTO.ID == 0) && _AttachingWOWithRequisition == (int)AttachingWOWithRequisition.Existing)
                            {
                                requisition.Reason += ResRequisitionMaster.NoRightsToInsertNewWOToReq;
                                requisition.Status = "fail";
                            }
                            else if (objWODTO != null && objWODTO.ID > 0 && _AttachingWOWithRequisition == (int)AttachingWOWithRequisition.New)
                            {
                                requisition.Reason += ResRequisitionMaster.NoRightsToUseExistingWOToReq;
                                requisition.Status = "fail";
                            }
                        }
                    }
                    
                    if ((string.IsNullOrEmpty(requisition.ItemNumber) || string.IsNullOrWhiteSpace(requisition.ItemNumber)
                        || requisition.ItemNumber.Trim().Length < 1)
                       &&
                        (
                        ((string.IsNullOrEmpty(requisition.Tool) || string.IsNullOrWhiteSpace(requisition.Tool) || requisition.Tool.Trim().Length < 1))
                        || (string.IsNullOrEmpty(requisition.ToolSerial) || string.IsNullOrWhiteSpace(requisition.ToolSerial) || requisition.ToolSerial.Trim().Length < 1)
                        )
                        && (!string.IsNullOrEmpty(requisition.RequisitionStatus) && !string.IsNullOrWhiteSpace(requisition.RequisitionStatus) && 
                            requisition.RequisitionStatus == "Submitted" || requisition.RequisitionStatus == "Approved")
                        )
                    {
                        requisition.Reason += (" " + ResRequisitionMaster.ItemOrToolDetailRequired); 
                        requisition.Status = "fail";
                    }

                    if (requisition.Status != "fail" && requisition.RequisitionStatus == "Submitted")
                    {
                        if (SessionHelper.RoleID == -1)
                        {
                            requisition.RequisitionStatus = "Approved";
                        }
                        else
                        {
                            bool isHavingReqApproveRight = false;
                            var requisitionApproveRights = UserRoleDetails.Where(i => i.ModuleID == 85).FirstOrDefault();

                            if (requisitionApproveRights != null)
                            {
                                isHavingReqApproveRight = requisitionApproveRights.IsInsert;
                            }

                            if (isHavingReqApproveRight)
                            {
                                requisition.RequisitionStatus = "Approved";
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(requisition.ItemNumber) && !string.IsNullOrWhiteSpace(requisition.ItemNumber))
                    {
                        var InsertedItemDTO = ItemDAL.GetItemByItemNumberPlain(requisition.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);

                        if (InsertedItemDTO == null)
                        {
                            InsertedItemDTO = ItemDAL.GetItemBySupplierPartNumberPlain(requisition.ItemNumber, SessionHelper.RoomID, SessionHelper.CompanyID);
                        }

                        if (InsertedItemDTO == null)
                        {
                            requisition.Reason += (string.Format(ResMessage.MsgDoesNotExist, ResItemMaster.ItemNumber) + " : " + requisition.ItemNumber);
                            requisition.Status = "fail";
                        }
                        else if (InsertedItemDTO.ItemType == 3 || InsertedItemDTO.ItemType == 4)
                        {
                            requisition.Reason += (ResRequisitionMaster.KitOrLaborItemNotAllowed + ": " + requisition.ItemNumber); 
                            requisition.Status = "fail";
                        }
                        else
                        { 
                            requisition.ItemGuid = InsertedItemDTO.GUID;

                            if (string.IsNullOrEmpty(requisition.Bin) || string.IsNullOrWhiteSpace(requisition.Bin))
                            {
                                requisition.Reason += (" " + string.Format(ResMessage.MsgRequired, ResRequisitionDetails.BinID));
                                requisition.Status = "fail";
                            }

                            if (requisition.RequisitionStatus.ToUpper() == "UNSUBMITTED"
                                 || requisition.RequisitionStatus.ToUpper() == "SUBMITTED"
                                 || requisition.RequisitionStatus.ToUpper() == "APPROVED")
                            {
                                if (InsertedItemDTO.PullQtyScanOverride && InsertedItemDTO.DefaultPullQuantity > 0)
                                {
                                    if (requisition.RequisitionStatus.ToUpper() == "UNSUBMITTED"
                                        || requisition.RequisitionStatus.ToUpper() == "SUBMITTED")
                                    {
                                        if (requisition.QuantityRequisitioned < InsertedItemDTO.DefaultPullQuantity || (decimal)requisition.QuantityRequisitioned % (decimal)InsertedItemDTO.DefaultPullQuantity != 0)
                                        {
                                            requisition.Reason += string.Format(ResRequisitionMaster.RequisitionQtyEqualsDefaultPullQty, InsertedItemDTO.DefaultPullQuantity, requisition.ItemNumber);
                                            requisition.Status = "fail"; 
                                        }
                                    }
                                    else if (requisition.RequisitionStatus.ToUpper() == "APPROVED")
                                    {
                                        if (requisition.QuantityApproved < InsertedItemDTO.DefaultPullQuantity || (decimal)requisition.QuantityApproved % (decimal)InsertedItemDTO.DefaultPullQuantity != 0)
                                        {
                                            requisition.Reason += string.Format(ResRequisitionMaster.ApprovedQtyEqualsDefaultPullQty, InsertedItemDTO.DefaultPullQuantity, requisition.ItemNumber);
                                            requisition.Status = "fail"; 
                                        }
                                    }
                                }
                            }

                            if (requisition.Status != "fail")
                            {
                                requisition.ItemCost = ItemDAL.GetItemCostByRoomModuleSettings(SessionHelper.CompanyID, SessionHelper.RoomID, (long)SessionHelper.ModuleList.Requisitions, requisition.ItemGuid.Value, false);
                                requisition.ItemSellPrice = ItemDAL.GetItemSellPriceByRoomModuleSettings(SessionHelper.CompanyID, SessionHelper.RoomID, (long)SessionHelper.ModuleList.Requisitions, (Guid)requisition.ItemGuid.Value, false) ?? 0;
                            }
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(requisition.Tool) && !string.IsNullOrEmpty(requisition.ToolSerial))
                        {
                            var InsertedToolDTO = ToolDAL.GetToolBySerialAndNamePlain(requisition.Tool, requisition.ToolSerial, SessionHelper.RoomID, SessionHelper.CompanyID);

                            if (InsertedToolDTO == null)
                            {
                                requisition.Status = "fail";
                                requisition.Reason += (" " + string.Format(ResRequisitionMaster.ToolSerialNotExist, requisition.Tool, requisition.ToolSerial)); 
                            }
                            else
                            {
                                requisition.ToolGuid = InsertedToolDTO.GUID;
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(requisition.LineItemRequiredDate) && !string.IsNullOrWhiteSpace(requisition.LineItemRequiredDate))
                    {
                        DateTime dt;
                        string _expirationDt = requisition.LineItemRequiredDate.Split(' ')[0];
                        DateTime.TryParseExact(_expirationDt, SessionHelper.RoomDateFormat, ResourceHelper.CurrentCult, DateTimeStyles.None, out dt);

                        if (dt != DateTime.MinValue)
                        {
                            requisition.LineItemRequiredDate = dt.ToString(SessionHelper.RoomDateFormat);
                            requisition.LineItemRequiredDt = dt;
                        }
                        else
                        {
                            requisition.Reason += string.Format(ResImportMasters.DateShouldBeInFormat, ResRequisitionDetails.LineItemRequiredDate, SessionHelper.RoomDateFormat);
                            requisition.Status = "fail";
                        }
                    }

                    
                    IEnumerable<UDFDTO> UDFDataFromDB = objUDFDAL.GetNonDeletedUDFsByUDFTableNamePlain("RequisitionMaster",SessionHelper.RoomID,SessionHelper.CompanyID);
                    string errorMsg = string.Empty;
                    CommonUtility.CheckUDFIsRequiredAndInsert(UDFDataFromDB, requisition.RequisitionUDF1, requisition.RequisitionUDF2, requisition.RequisitionUDF3, requisition.RequisitionUDF4, requisition.RequisitionUDF5, out errorMsg);
                    
                    if (!string.IsNullOrEmpty(errorMsg))
                    {
                        requisition.Reason += errorMsg;
                        requisition.Status = "fail";
                    }

                    if (requisition.Status != "fail" && requisition.ItemGuid.GetValueOrDefault(Guid.Empty) != Guid.Empty)
                    {
                        IEnumerable<UDFDTO> pullUDF = objUDFDAL.GetNonDeletedUDFsByUDFTableNamePlain("PullMaster", SessionHelper.RoomID, SessionHelper.CompanyID);
                        string pullUdferrorMsg = string.Empty;
                        CommonUtility.CheckUDFIsRequiredAndInsert(pullUDF, requisition.PullUDF1, requisition.PullUDF2, requisition.PullUDF3, requisition.PullUDF4, requisition.PullUDF5, out pullUdferrorMsg, "Pull");

                        if (!string.IsNullOrEmpty(pullUdferrorMsg))
                        {
                            requisition.Reason += pullUdferrorMsg;
                            requisition.Status = "fail";
                        }
                    }

                    if (requisition.Status != "fail" && requisition.ToolGuid.GetValueOrDefault(Guid.Empty) != Guid.Empty)
                    {
                        IEnumerable<UDFDTO> toolCheckOutUDF = objUDFDAL.GetNonDeletedUDFsByUDFTableNamePlain("ToolCheckInOutHistory", SessionHelper.RoomID, SessionHelper.CompanyID);
                        string toolCheckOutUdferrorMsg = string.Empty;
                        CommonUtility.CheckUDFIsRequiredAndInsert(toolCheckOutUDF, requisition.ToolCheckoutUDF1, requisition.ToolCheckoutUDF2, requisition.ToolCheckoutUDF3, requisition.ToolCheckoutUDF4, requisition.ToolCheckoutUDF5, out toolCheckOutUdferrorMsg, "ToolCheckout");

                        if (!string.IsNullOrEmpty(toolCheckOutUdferrorMsg))
                        {
                            requisition.Reason += toolCheckOutUdferrorMsg;
                            requisition.Status = "fail";
                        }
                    }
                   
                }
            }
        }

        private void ValidateSupplierCatalog(List<SupplierCatalogImport> supplierCatalogImports)
        {
            if (supplierCatalogImports != null && supplierCatalogImports.Any() && supplierCatalogImports.Count() > 0)
            {
                foreach(var item in supplierCatalogImports)
                {
                    if (string.IsNullOrEmpty(item.ItemNumber) || string.IsNullOrWhiteSpace(item.ItemNumber))
                    {
                        item.Reason += string.Format(ResMessage.MsgRequired, ResItemMaster.ItemNumber);
                        item.Status = "fail";
                    }
                }
            }
        }
        #endregion
    }
}
