var TZOfset = new Date().getTimezoneOffset();
var RefreshTime;
var UserCreatedNarroValues;
var UserUpdatedNarroValues;
var IsEditMode = false;
var IsShowView = false;
var IsShowHistory = false;
var UserUDF1NarrowValues;
var UserUDF2NarrowValues;
var UserUDF3NarrowValues;
var UserUDF4NarrowValues;
var UserUDF5NarrowValues;

var UserUDF6NarrowValues;
var UserUDF7NarrowValues;
var UserUDF8NarrowValues;
var UserUDF9NarrowValues;
var UserUDF10NarrowValues;

var UserSupplierNarroValues;
var ItemUDF1;
var ItemUDF2;
var ItemUDF3;
var ItemUDF4;
var ItemUDF5;

var ItemUDF6;
var ItemUDF7;
var ItemUDF8;
var ItemUDF9;
var ItemUDF10;

var ToolCheckOutUDF1;
var ToolCheckOutUDF2;
var ToolCheckOutUDF3;
var ToolCheckOutUDF4;
var ToolCheckOutUDF5;

var ToolTechUDF1;
var ToolTechUDF2;
var ToolTechUDF3;
var ToolTechUDF4;
var ToolTechUDF5;


var HasInsertPermission = true;
var HasOnlyViewPermission = false;

var PullSupplierNarroValues;
var BinNarroValuesIM;
var ManufacturerNarroValues;
var ItemLocationNarroValues;
var ItemTrackingTypeNarroValues;
var StockStatusTypeNarroValues;
var PullCategoryNarroValues;
var PullProjectSpendNarroValues;
var PullWorkOrderValues;
var PullRequistionarroValues;
var PullOrderNumbernarroValues;
var PullSupplierAccountNumberValues;
var StageLocationHeaderNarroValues;
var StageLocationNarroValues;

var OrderSupplierNarroValues;
var WorkOrderNarroValues;
var OrderNumberNarroValues;
var OrderStatusNarroValues;
var OrderRequiredDateNarroValues;
var ReceiveSupplierNarroValues;
var ReceivePONarroValues;
var POReceiveaDateValues;
var ReceiveCreatedByNarroValues;
var ReceiveUpdatedByNarroValues;
var ReceiveIncomplateTab = false;

var CreatedBySelectedValues = '';
var UpdatedBySelectedValues = '';
var OrderUDF1NarrowValues = ''
var OrderUDF2NarrowValues = ''
var OrderUDF3NarrowValues = ''
var OrderUDF4NarrowValues = ''
var OrderUDF5NarrowValues = ''

var HasOrderTab = false;
var HasRequisitionTab = false;
var HasScheduleTab = false;

var SchedulerItemSearchValue = '';
var SchedulerTypeSearchValue = '';
var RoomStatusValue = '';
var PullPOStatusValue = '';
var CompanyStatusValue = '';

var CostNarroSearchValue = '';
var IsBillingNarroSearchValue = '';
var IsEDISentNarroSearchValue = '';
var UserTypeNarroValues = "";
var ReportTypeNarroSearchValue = "";
var ItemNumberItemBinNarroValues = "";
var BinListItemBinNarroValues = "";
var spendPerSpendLimit = '';
var TotalSpendLimit = '';
var TotalSpendRemaining = '';
var TotalItemSpendLimit = '';

var AverageCostNarroSearchValue = '';
var TurnsNarroSearchValue = '';

var PullActionTypeNarroSearchValue = '';
var PullConsignmentNarroSearchValue = '';
var ItemListNarroSearchValue = '';
var BinListNarroSearchValue = '';

var MatStagLocationsNarroValues = '';
var CartSupplierNarroValues = '';
//var ItemLocationNarroValues = '';
var CartRTNarroValues = '';
var IsDeleteItemPictureViewRecord = false;

var SSNarroSearchValue = '';
var ItemActive = ''
var ItemTypeNarroSearchValue = '';
var InventoryClassificationNarroSearchValue = '';
var FilterStringGlobalUse = '';

var RequisitionTabFilter = '';
var RequisitionCurrentTab = '';
var ToolListTab = '';
var RequisitionNarrowFilterString = '';
var ToolMasterNewNarrowFilterString = '';
var QuoteNarrowFilterString = '';
var LocationValue;
var MaintenanceValue;
var WorkOrderValue;
var ToolCategoryValue;
var AssetCategoryValue;
var ToolTechnicianValue;
var ToolCheckoutValue;
var ToolMaintanceValue;
var ToolStatusValue;
var ToolCostValue;

var THLocationValue = "";
var THMaintenanceValue = "";
var ToolHistoryCategoryValue = "";
var ToolHistoryTechnicianValue = "";
var ToolHistoryCheckoutValue = "";
var THCostNarroSearchValue = '';
var ToolHistoryCreatedByNarroValues = "";
var ToolHistoryUpdatedByNarroValues = "";
var ToolWrittenOffCategoryValue = "";
var ToolWrittenOffCreatedByNarroValues = "";
var ToolWrittenOffUpdatedByNarroValues = "";

var WOTechnicianValues;
var WOSupplierValues;
var RequistionSupplierValues;
var WOCustomerValues;
var WOTypeValues;
var WOStatusValues;
var WOAssetValues;
var WOToolValues;
var UserRoomNarroValues = '';
var UserRoleNarroValues = '';
var UserEnterpriseNarroValues = '';
var UserCompanyNarroValues = '';
var RoleCompanyNarroValues = '';
var RoleEnterpriseNarroValues = '';
var RoleRoomNarroValues = '';
var RoleUserTypeNarroValues = '';
var ICountTypeNarroValues = '';
var ICountStatusNarroValues = '';
var MoveTypeNarroValues = '';
var IsColumnResizeFistTimeForControls = true;
var MouleTypeNarroValues = ''
var ItemsNarroValues = ''
var CateogryNarroValues = ''
var isDirtyForm = false;

var AllowDeletePopupPSInPull = false;

var IsNarrowSearchRefreshRequired = false;

var EnterpriseNarroValues = '';
var RoleCompanyNarroValues = '';

eraseCookieforshift("selectstartindex");
eraseCookieforshift("selectendindex");
eraseCookieforshift("finalselectedarray");
var ntfcScheduleNarroValues = '';
var ntfcReportsNarroValues = '';
var ntfcEmailTemlateNarroValues = '';
var ntfcNotificationTypeNarroValues = '';
var AvgUsageNarroSearchValue = '';

var specialKeys = new Array();
var FadeOutTime = 400;
var DelayTime = 4000;
var wHeight = $(window).height();
var dHeight = wHeight * 0.75;
var BillingRoomTypeTypeNarroValues;
var InvoiceBranchNarroValues = '';
var ddlRequisitionStatusNarroValues;
var GoForSearch = false;
var dashboardReorder = false;
var IsSetSessionInProgress = false;
var duplicateColumnArray = new Array();
var gridDuplicateColumnCount;
var gridDuplicateColumnCountForCountLineItems;
var isFromNarrowSearchClear = false;

var ScheduleForNarroValues;
var ScheduleItemNarroValues;
var ScheduleTypeNarroValues;
var SchedulerNameNarroValues;
var ToolAssetNameNarroValues;
var ScheduleCreatedByNarroValues;
var ScheduleUpdatedByNarroValues;
var RoleRoomNarroText = '';
var ReportGlobalText = '';
var arrChangeItems = new Array();
var QuoteStatusNarroValues = '';
var QuoteSupplierNarrowValues = '';
var MoreLocation  = '';

(function (w) {
    var String = w.String, Proto = String.prototype;

    (function (o, p) {
        if (p in o ? o[p] ? false : true : true) {
            var r = /^\s+/;
            o[p] = o.trimLeft || function () {
                return this.replace(r, '')
            }
        }
    })(Proto, 'trimStart');

})(window);

function NotAllowCharacter(e) {
    var keyCode = e.keyCode == 0 ? e.charCode : e.keyCode;
    var result = !(specialKeys.indexOf(keyCode) != -1);
    return result;
}

function AllowCharactersOnly(e) {

    var keyCode = e.keyCode == 0 ? e.charCode : e.keyCode;
    if ((keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 90) || (keyCode >= 97 && keyCode <= 122) || (specialKeys.indexOf(keyCode) != -1)) {
        return true;
    }
    else {
        return false;
    }
    var result = (specialKeys.indexOf(keyCode) >= 0) ? true : false;
    return result;
}
function getCurrentDate() {
    var d = new Date();
    var n = d.getDate();
    var m = d.getMonth() + 1;
    var y = d.getFullYear();
    if (n <= 9) {
        n = "0" + n;
    }
    if (m <= 9) {
        m = "0" + m;
    }

    return m + '/' + n + '/' + y;
}


function GetDateInFormat(obj, val) {
    if (val == null || val == '')
        return '';
    var dx = new Date(parseInt(val.substr(6)));
    var dd = dx.getDate();
    var mm = dx.getMonth() + 1;
    var yy = dx.getFullYear();

    if (dd <= 9) {
        dd = "0" + dd;
    }
    if (mm <= 9) {
        mm = "0" + mm;
    }
    return dd + "/" + mm + "/" + yy;
}
function CheckDateBYCompanyConfig(obj) {
    //var hdn = "m/d/yy";
    var hdn = $("#hdDateFormat").val();
    var reg = /^([1-9]|0[1-9]|1[0-2])[\/]([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])[\/](1[9][0-9][0-9]|2[0][0-9][0-9]|[0-9][0-9])$/g;
    //var reg1 = /^([1-9]|0[1-9]|1[0-2])[\/]([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])[\/]([0-9][0-9]|[0-9][0-9])$/g;
    if (hdn == "yy/m/d") {
        reg = /^([0-9][0-9]|1[9][0-9][0-9]|2[0][0-9][0-9])[\/]([1-9]|0[1-9]|1[0-2])[\/]([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])$/g;
        //reg1 = /^([0-9][0-9]|[0-9][0-9])[\/]([1-9]|0[1-9]|1[0-2])[\/]([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])$/g;
    }



    if (reg.test(obj)) {
        return "valid";
    }
    else {
        return "invalid-" + hdn;
    }
}
function GetDateInYYYYMMDDFormat(val) {


    var varHDDateForamt = $("#hdDateFormat").val();
    //var varHDDateForamt = "m/d/yy";

    if (val == null || val == '')
        return '';

    if (varHDDateForamt == "m/d/yy") {

        // val comes in mm/dd/yyyy format    
        var datePart = val.match(/\d+/g),
            year = datePart[2], // get only two digits
            month = datePart[0],
            day = datePart[1];
        return year + '/' + month + '/' + day;
    }
    else if (varHDDateForamt == "d/m/yy") {
        var datePart = val.match(/\d+/g),
            year = datePart[2], // get only two digits
            month = datePart[1],
            day = datePart[0];
        return year + '/' + month + '/' + day;
    }
    else if (varHDDateForamt == "yy/m/d") {
        var datePart = val.match(/\d+/g),
            year = datePart[0], // get only two digits
            month = datePart[1],
            day = datePart[2];
        return year + '/' + month + '/' + day;
    }
    else
        return "";

}



function GetDateInFullFormat(obj) {
    if (obj == null || obj == '')
        return '';
    var somedate = moment(parseInt(obj.substr(6))).subtract(300, 'minutes');


    //var somedate = moment(parseInt(obj.substr(6)));
    var varHDDateForamt = $("#hdDateFormat").val();
    //var varHDDateForamt = "m/d/yy";
    var curdat = "";
    if (varHDDateForamt == "m/d/yy") {
        curdat = moment(somedate).format('M/D/YY h:mm:ss a');
    }
    else if (varHDDateForamt == "d/m/yy") {
        curdat = moment(somedate).format('D/M/YY h:mm:ss a');
    }
    else if (varHDDateForamt == "yy/m/d") {
        curdat = moment(somedate).format('YY/M/D h:mm:ss a');
    }
    else {
        curdat = moment(somedate).format('M/D/YY h:mm:ss a');
    }

    return curdat;

}


function getCurrentDateByRoomFormat() {
    //var dateFormat =new Date();
    //var date = $.datepicker.formatDate(RoomDateJSFormat, new Date(dateFormat));
    //alert(date);
    //return date;
    var d = new Date();
    var n = d.getDate();
    var m = d.getMonth() + 1;
    var y = d.getFullYear();
    if (n <= 9) {
        n = "0" + n;
    }
    if (m <= 9) {
        m = "0" + m;
    }
    var monthFullNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var monthShortNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    var currdat = $("#hdDateFormat").val();

    //  alert(currdat + ' ---> ' + RoomDateJSFormat);
    if (currdat.indexOf('yyyy') >= 0) {
        currdat = currdat.replace('yyyy', y);
    }
    else if (currdat.indexOf('yy') >= 0) {
        currdat = currdat.replace('yy', y);
    }
    else if (currdat.indexOf('y') >= 0) {
        currdat = currdat.replace('y', y.toString().substr(-2));
    }

    if (currdat.indexOf('mm') >= 0) {
        currdat = currdat.replace('mm', m);
    }
    else if (currdat.indexOf('m') >= 0) {
        currdat = currdat.replace('m', m);
    }
    else if (currdat.indexOf('MM') >= 0) {
        currdat = currdat.replace('MM', monthFullNames[m - 1]);
        //currdat = currdat.replace('MM', m);
    }
    else if (currdat.indexOf('M') >= 0) {
        currdat = currdat.replace('M', monthShortNames[m - 1]);
    }

    if (currdat.indexOf('dd') >= 0) {
        currdat = currdat.replace('dd', n);
    }
    else if (currdat.indexOf('d') >= 0) {
        currdat = currdat.replace('d', n);
    }
    return currdat;

}




//function GetDateInFullFormat(obj) {

//    if (obj == null || obj == '')
//        return '';
//    var todayDate = new Date(parseInt(obj.substr(6)));
//    var somedate = moment(parseInt(obj.substr(6))).subtract(serverUTCOffset, 'minutes');
////    somedate = moment(somedate).format('M/D/YY');

//    var date = todayDate.getDate();

//    var month = todayDate.getMonth() + 1;
//    var year = todayDate.getFullYear();
//    var hours = todayDate.getHours();
//    var minutes = todayDate.getMinutes();
//    var seconds = todayDate.getSeconds();
//    var ampm = hours >= 12 ? 'PM' : 'AM';
//    var hours = hours % 12;
//    hours = hours ? hours : 12; // the hour '0' should be '12'
//    hours = hours < 10 ? '0' + hours : hours;
//    minutes = minutes < 10 ? '0' + minutes : minutes;
//    seconds = seconds < 10 ? '0' + seconds : seconds;
//    strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;


//    var varHDDateForamt = $("#hdDateFormat").val();
//    var curdat = "";
//    if (varHDDateForamt == "m/d/yy") {
//        curdat = moment(somedate).format('M/D/YY h:mm:ss a');
//    }
//    else if (varHDDateForamt == "d/m/yy") {
//        curdat = moment(somedate).format('D/M/YY h:mm:ss a');
//    }
//    else if (varHDDateForamt == "yy/m/d") {
//        curdat = moment(somedate).format('YY/M/D h:mm:ss a');
//    }
//    else
//        curdat = moment(somedate).format('M/D/YY h:mm:ss a');
//    if (gblActionName.toLowerCase() == 'pullmasterlist') {
//        //        alert(moment(obj));
//        //        alert("\n" + "passed date : " + obj + "\n Todays date: " + todayDate + "\n Current date : " + curdat);
//    }
//    return curdat;
//}

function GetDateInShortFormat(obj) {
    if (obj == null || obj == '')
        return '';
    var todayDate = new Date(parseInt(obj.substr(6)));
    var date = todayDate.getDate();
    var month = todayDate.getMonth() + 1;
    var year = todayDate.getFullYear();
    var hours = todayDate.getHours();
    var minutes = todayDate.getMinutes();
    var seconds = todayDate.getSeconds();
    var varHDDateForamt = $("#hdDateFormat").val();
    //var varHDDateForamt = "m/d/yy";
    var curdat = "";
    if (varHDDateForamt == "m/d/yy") {
        curdat = month + "/" + date + "/" + year
    }
    else if (varHDDateForamt == "d/m/yy") {
        curdat = date + "/" + month + "/" + year
    }
    else if (varHDDateForamt == "yy/m/d") {
        curdat = year + "/" + month + "/" + date
    }
    else
        curdat = month + "/" + date + "/" + year

    return curdat;
}

function AddDaystoDate(obj, Days) { // obj = required date
    var d1 = GetDateInFullFormatCustomizedOnlyDate(obj);
    var RequestedDate = new Date(d1);
    var nextDate = new Date(RequestedDate.getFullYear(), RequestedDate.getMonth(), RequestedDate.getDate() + parseInt(Days));
    return nextDate;
}

function GetTodayDateInFormat() {
    var varHDDateForamt = $("#hdDateFormat").val();
    //var varHDDateForamt = "m/d/yy";
    var todayDate = new Date();
    var date = todayDate.getDate();
    var month = todayDate.getMonth() + 1;
    var year = todayDate.getFullYear();
    var ReqDate = "";
    var curdat = "";
    if (varHDDateForamt == "m/d/yy") {
        curdat = month + "/" + date + "/" + year;
    }
    else if (varHDDateForamt == "d/m/yy") {
        curdat = date + "/" + month + "/" + year;
    }
    else if (varHDDateForamt == "yy/m/d") {
        curdat = year + "/" + month + "/" + date;
    }
    else
        curdat = month + "/" + date + "/" + year;

    var d2 = new Date(curdat);
    return d2;
}

function GetDateInFullFormatCustomized(obj) {
    if (obj == null || obj == '')
        return '';
    var todayDate = new Date(Date.parse(obj)); //new Date(parseInt(obj.substr(10)));
    var date = todayDate.getDate();
    var month = todayDate.getMonth() + 1;
    var year = todayDate.getFullYear();
    var hours = todayDate.getHours();
    var minutes = todayDate.getMinutes();
    var seconds = todayDate.getSeconds();
    var ampm = hours >= 12 ? 'PM' : 'AM';
    var hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    hours = hours < 10 ? '0' + hours : hours;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;

    var varHDDateForamt = $("#hdDateFormat").val();
    //var varHDDateForamt = "m/d/yy";
    var curdat = "";
    if (varHDDateForamt == "m/d/yy") {
        curdat = month + "/" + date + "/" + year + " " + strTime;
    }
    else if (varHDDateForamt == "d/m/yy") {
        curdat = date + "/" + month + "/" + year + " " + strTime;
    }
    else if (varHDDateForamt == "yy/m/d") {
        curdat = year + "/" + month + "/" + date + " " + strTime;
    }
    else
        curdat = month + "/" + date + "/" + year + " " + strTime;

    return curdat;
}

function GetDateInFullFormatCustomizedOnlyDate(obj) {

    if (obj == null || obj == '')
        return '';

    var todayDate = new Date(Date.parse(obj)); //new Date(parseInt(obj.substr(10)));
    var date = todayDate.getDate();
    var month = todayDate.getMonth() + 1;
    var year = todayDate.getFullYear();
    var hours = todayDate.getHours();
    var minutes = todayDate.getMinutes();
    var seconds = todayDate.getSeconds();
    var ampm = hours >= 12 ? 'PM' : 'AM';
    var hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    hours = hours < 10 ? '0' + hours : hours;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;

    var varHDDateForamt = $("#hdDateFormat").val();
    //var varHDDateForamt = "m/d/yy";
    var curdat = "";
    if (varHDDateForamt == "m/d/yy") {
        curdat = month + "/" + date + "/" + year;
    }
    else if (varHDDateForamt == "d/m/yy") {
        curdat = date + "/" + month + "/" + year;
    }
    else if (varHDDateForamt == "yy/m/d") {
        curdat = year + "/" + month + "/" + date;
    }
    else
        curdat = month + "/" + date + "/" + year;

    return curdat;
}

function GetDateMMDDYYYYFormat(obj) {
    var todayDate = new Date(parseInt(obj.substr(6)));
    var date = todayDate.getDate();
    var month = todayDate.getMonth() + 1;
    var year = todayDate.getFullYear();
    var hours = todayDate.getHours();
    var minutes = todayDate.getMinutes();
    var seconds = todayDate.getSeconds();
    var ampm = hours >= 12 ? 'PM' : 'AM';
    var hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    hours = hours < 10 ? '0' + hours : hours;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;
    var curdat = month + "/" + date + "/" + year;  //+ " " + strTime;
    return curdat;
}


function TabItemClicked(action, formName) {
    if (IsEditMode) {
        IsEditMode = false;
        return;
    }
    AllowDeletePopup = false;
    $('#DivLoading').show();
    $(formName).append($('#tab1').load(action, function () { $('#DivLoading').hide(); $("#" + formName + " :input:text:visible:first").focus(); }));
    $.validator.unobtrusive.parseDynamicContent('#' + formName + ' input:last');
}


function TabItemClickedEdit(action, formName) {

    //Passing archived & deleted params while making the request
    var IsArchived = $('#IsArchivedRecords').is(':checked');
    var IsDeleted = $('#IsDeletedRecords').is(':checked');
    action += '?IsArchived=' + IsArchived + '&IsDeleted=' + IsDeleted;

    IsEditMode = true;
    IsShowHistory = true;
    AllowDeletePopup = false;

    if (action.toLowerCase().indexOf("edit") > 0) {
        if (!HasOnlyViewPermission) {
            $(".tab1").show();
            if (IsArchived || IsDeleted)
                $('.tab1').removeClass("tab1").addClass("tab9");
            else
                $('.tab1').removeClass("tab1").addClass("tab8");
        }
        else {
            $(".tab1").show();
            $('.tab1').removeClass("tab1").addClass("tab9");
        }
    }
    else if (action.toLowerCase().indexOf("view") > 0) {
        $('.tab1').removeClass("tab1").addClass("tab9");
    }

    $("#atab1").click();
    $('#DivLoading').show();
    if (formName == 'frmKitMaster' || formName == 'frmOrder') {
        $(formName).append($('#tab1').load(action, function () { $("#" + formName + " :input:text:visible:first").focus(); }));
    }
    else {
        $(formName).append($('#tab1').load(action, function () { $('#DivLoading').hide(); $("#" + formName + " :input:text:visible:first").focus(); }));
    }
    $.validator.unobtrusive.parseDynamicContent('#' + formName + ' input:last');
    if (action.toLowerCase().indexOf("edit") > 0) {
        if (!HasOnlyViewPermission) {
            $('li.tab8').find('a#atab1').removeAttr("onclick", "");
            $('li.tab8').find('a#atab1').attr("onclick", "TabItemClickedEdit('" + action + "','" + formName + "')");
        }
        else {
            $('li.tab9').find('a#atab1').removeAttr("onclick", "");
            $('li.tab9').find('a#atab1').attr("onclick", "TabItemClickedEdit('" + action + "','" + formName + "')");
        }
    }

}


function TabItemClickedEditMatStag(action, formName) {
    //Passing archived & deleted params while making the request
    var IsArchived = $('#IsArchivedRecords').is(':checked');
    var IsDeleted = $('#IsDeletedRecords').is(':checked');
    action += '?IsArchived=' + IsArchived + '&IsDeleted=' + IsDeleted;

    IsEditMode = true;
    IsShowHistory = true;
    AllowDeletePopup = false;

    if (action.toLowerCase().indexOf("edit") > 0) {
        if (!HasOnlyViewPermission) {
            $(".tab1").show();
            if (IsArchived || IsDeleted)
                $('.tab1').removeClass("tab1").addClass("tab9");
            else
                $('.tab1').removeClass("tab1").addClass("tab8");
        }
        else {
            $(".tab1").show();
            $('.tab1').removeClass("tab1").addClass("tab9");
        }
    }
    else if (action.toLowerCase().indexOf("view") > 0) {
        $('.tab1').removeClass("tab1").addClass("tab9");
    }

    $("#atab1").click();
    $('#DivLoading').show();
    $('#tab1').html("");
    $(formName).append($('#tab1').load(action, function () {
        $('#DivLoading').hide();
        $("#" + formName + " :input:text:visible:first").focus();



    }));
    $.validator.unobtrusive.parseDynamicContent('#' + formName + ' input:last');
    if (action.toLowerCase().indexOf("edit") > 0) {
        if (!HasOnlyViewPermission) {
            $('li.tab8').find('a#atab1').removeAttr("onclick", "");
            $('li.tab8').find('a#atab1').attr("onclick", "TabItemClickedEdit('" + action + "','" + formName + "')");
        }
        else {
            $('li.tab9').find('a#atab1').removeAttr("onclick", "");
            $('li.tab9').find('a#atab1').attr("onclick", "TabItemClickedEdit('" + action + "','" + formName + "')");
        }

    }


    //    $(this).find('#txtBinName').autocomplete();
}


function SwitchTabBasedOnPassedTab(tabnameactive) {
    var getDivName = '';
    $('ul.tabs li').each(function () {
        var liObject = $(this).find('a')[0];
        if (liObject.id == tabnameactive) {
            $(this).addClass('active');
            getDivName = tabnameactive.toString().substring(1);
            $("#" + getDivName).show();
        }
        else {
            $(this).removeClass('active');
            getDivName = liObject.id.toString().substring(1);
            $("#" + getDivName).hide();
        }
    });
}



function ChangeEditToNew(action, frmname) {
    $('li.tab8').find('a#atab1').removeAttr("onclick", "");
    $('li.tab8').find('a#atab1').attr("onclick", "TabItemClicked('" + action + "','" + frmname + "')");
    $('li.tab8').removeClass("tab8").addClass("tab1");

    $('li.tab9').find('a#atab1').removeAttr("onclick", "");
    $('li.tab9').find('a#atab1').attr("onclick", "TabItemClicked('" + action + "','" + frmname + "')");
    $('li.tab9').removeClass("tab9").addClass("tab1");

    if (HasInsertPermission == "False") {
        $('li.tab1').hide();
    }
    if (frmname == 'frmUDF') {
        $('li.tab1').hide();
    }
}


$.validator.unobtrusive.parseDynamicContent = function (selector) {
    //use the normal unobstrusive.parse method
    $.validator.unobtrusive.parse(selector);
    //get the relevant form
    var form = $(selector).first().closest('form');
    //get the collections of unobstrusive validators, and jquery validators
    //and compare the two
    var unobtrusiveValidation = form.data('unobtrusiveValidation');
    var validator = form.validate();
}

function SwitchTab(tabid, action, frmName) {
    if (!dirtyCheck()) {
        return false;
    }
    else {
        removeDirtyclass();
    }
    $('.tab8').removeClass("tab8").addClass("tab1");
    $('.tab9').removeClass("tab9").addClass("tab1");

    if (HasInsertPermission == "False") {
        $('.tab1').hide();
    }

    if (tabid == 0) // go to list, you are on new
    {
        AllowDeletePopup = true;
        $("#atab7").click();
        if (IsRefreshGrid) {
            IsRefreshGrid = false;
            oTable.fnDraw();
        }
    }
    else {// go to new, you are on list

        AllowDeletePopup = false;
        $("#atab1").click();
    }
    $('a#atab1').removeAttr("onclick", "");
    $('a#atab1').attr("onclick", "TabItemClicked('" + action + "','" + frmName + "')");
}
function validateNumeric() {
    $('body').on('blur', 'input.numericinput', function (event) {

        var decimalPoint = $("#hdNumberDecimalDigits").val();
        if (!$.isNumeric($(this).val())) {
            $(this).val('');
        }
        else {
            //  var currentValue = parseFloat($(this).val());
            //  currentValue = currentValue.toFixed(decimalPoint);
            //  $(this).val(currentValue);
        }
    });

    $('body').on('paste', 'input.numericinput', function (event) {

        if (!$.isNumeric($(this).val())) {
            $(this).val('');
        }
    });

    $('body').on('drop', 'input.numericinput', function (event) {

        if (!$.isNumeric($(this).val())) {
            $(this).val('');
        }
    });

    $('body').on('keydown', 'input.numericinput', function (evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode == 46 || charCode == 190 || charCode == 110) {
            var inputValue = $(this).val();
            if (inputValue.indexOf('.') < 1) {
                return true;
            }
            return false;
        }
        if (charCode != 46 && charCode != 17 && charCode != 86 && charCode > 31 && (charCode < 48 || charCode > 57) && (charCode < 96 || charCode > 105)) {
            return false;
        }
        return true;
    });


    $('body').on('blur', 'input.numericDecimalinput', function (event) {

        var decimalPoint = $("#hdNumberDecimalDigits").val();
        if (!$.isNumeric($(this).val())) {
            $(this).val('');
        }
        else {
            //  var currentValue = parseFloat($(this).val());
            //  currentValue = currentValue.toFixed(decimalPoint);
            //  $(this).val(currentValue);
        }
    });

    $('body').on('paste', 'input.numericDecimalinput', function (event) {

        if (!$.isNumeric($(this).val())) {
            $(this).val('');
        }
    });

    $('body').on('drop', 'input.numericDecimalinput', function (event) {

        if (!$.isNumeric($(this).val())) {
            $(this).val('');
        }
    });

    $('body').on('keydown', 'input.numericDecimalinput', function (evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode == 46 || charCode == 190 || charCode == 110) {
            var inputValue = $(this).val();
            var Dot = (inputValue.match(new RegExp("\\.", "g")) || []).length;

            if (Dot < 1) {
                return true;
            }
            return false;
        }
        if (charCode != 46 && charCode != 17 && charCode != 86 && charCode > 31 && (charCode < 48 || charCode > 57) && (charCode < 96 || charCode > 105)) {
            return false;
        }
        return true;
    });

    $('body').on('keypress', 'input.onlynumbers', function (e) {
        var charCode = (e.which) ? e.which : event.keyCode
        if (String.fromCharCode(charCode).match(/[^0-9]/g))
            return false;
    });

}


function OpenCatalogPopup(CatalogReportID, callF) {

    if (callF == "ItemList") {
        var selectedIDs = "";

        var anSelectedv = fnGetSelected($('#myDataTable').dataTable());
        if (anSelectedv.length > 0) {
            for (var i = 0; i < anSelectedv.length; i++) {
                var rowPosition1 = $('#myDataTable').dataTable().fnGetPosition(anSelectedv[i]);
                var aData = $('#myDataTable').dataTable().fnGetData(rowPosition1);
                selectedIDs = selectedIDs + aData.ID + ",";
            }
        }

        if (selectedIDs.length > 0) {
            $('#divCatalogReportPopup').data({ "CatalogID": 0, "ItemIDs": selectedIDs, "CallFrom": callF }).dialog('open').on('dialogclose', function (event) {
                $("form").off(".areYouSure");
                $(window).off('beforeunload');
            });;
            return false;
        }
        else {
            ShowNotificationMessage(MsgSelectRow);
            return false;
        }
    }
    else if (callF == "ItemBinMasterList") {
        var selectedIDs = "";
        var selectedBinIDs = "";

        var anSelectedv = fnGetSelected($('#myDataTable').dataTable());
        if (anSelectedv.length > 0) {
            for (var i = 0; i < anSelectedv.length; i++) {
                var rowPosition1 = $('#myDataTable').dataTable().fnGetPosition(anSelectedv[i]);
                var aData = $('#myDataTable').dataTable().fnGetData(rowPosition1);
                selectedIDs = selectedIDs + aData.ID + ",";

                if (CatalogReportID == 1 && $(anSelectedv[i]).find('#BinID') !== undefined && $(anSelectedv[i]).find('#BinID').val() != null
                    && $(anSelectedv[i]).find('#hdnListPageName') !== undefined && $(anSelectedv[i]).find('#hdnListPageName').val() == 'ItemBinMasterList') {

                    var BinId = $(anSelectedv[i]).find('#BinID').val();
                    selectedBinIDs = selectedBinIDs + BinId + ',';
                }
            }
        }

        if (selectedBinIDs.length > 0) {
            selectedIDs = selectedIDs + '#' + selectedBinIDs;
        }
        if (selectedIDs.length > 0) {
            $('#divCatalogReportPopup').data({ "CatalogID": 0, "ItemIDs": selectedIDs, "CallFrom": callF }).dialog('open').on('dialogclose', function (event) {
                $("form").off(".areYouSure");
                $(window).off('beforeunload');
            }); ;
            return false;
        }
        else {
            ShowNotificationMessage(MsgSelectAnyRow);
            return false;
        }
    }
    else {
        if (CatalogReportID > 0) {
            $('#divCatalogReportPopup').data({ "CatalogID": CatalogReportID, "ItemIDs": "", "CallFrom": callF }).dialog('open').on('dialogclose', function (event) {
                $("form").off(".areYouSure");
                $(window).off('beforeunload');
            });;
            return false;

        }
    }
}

function ShowHideCartCreateButton() {
    var $hdnPageName = $("#hdnPageName");
    if ($hdnPageName.val() !== undefined) {
        var pagename = '';
        pagename = $hdnPageName.val();
    }
    if (pagename == "CartItemList") {
        var anSelectedRows = fnGetSelected(oTable);
        if (anSelectedRows.length > 0) {
            if ($("#btnCheckout") != undefined) {
                if (!$('#IsDeletedRecords').is(':checked')) {
                    $("#btnCheckout").removeAttr('disabled', 'disabled');
                    $('#btnCheckout').removeClass('btnGeneraldisabled');
                    $('#btnCheckout').addClass('btnGeneral');
                    ShowHideChangeLog();
                }
                else {
                    $("#btnCheckout").attr('disabled', 'disabled');
                    $('#btnCheckout').removeClass('btnGeneral');
                    $('#btnCheckout').addClass('btnGeneraldisabled');
                    ShowHideChangeLog();
                }
                var _ReplanishType = '';
                var ArrFregments = location.hash.split('#');
                var i = 0;
                for (i = 0; i < ArrFregments.length; i++) {
                    if (ArrFregments[i].toUpperCase() == 'LISTORDERS') {
                        $("#btnCheckout").val(btnCreateOrders);
                        if ($("#deleteRows") != undefined) { $("#deleteRows").show(); }
                    }
                    else if (ArrFregments[i].toUpperCase() == 'LISTTRANSFERS') {
                        $("#btnCheckout").val(btnCreateTransfers);
                        if ($("#deleteRows") != undefined) { $("#deleteRows").show(); }
                    }
                    else if (ArrFregments[i].toUpperCase() == 'LISTSUGGESTEDRETURN') {
                        $("#btnCheckout").val(btnCreateReturns);
                        if ($("#deleteRows") != undefined) { $("#deleteRows").hide(); }
                    }
                    else if (ArrFregments[i] != "") {
                        $("#btnCheckout").val(btnCreate);
                        if ($("#deleteRows") != undefined) { $("#deleteRows").show(); }
                    }
                }
            }
        }
        else {
            if ($("#btnCheckout") != undefined) {
                $("#btnCheckout").attr('disabled', 'disabled');
                $('#btnCheckout').removeClass('btnGeneral');
                $('#btnCheckout').addClass('btnGeneraldisabled');

                var _ReplanishType = '';
                var ArrFregments = location.hash.split('#');
                var i = 0;
                for (i = 0; i < ArrFregments.length; i++) {
                    if (ArrFregments[i].toUpperCase() == 'LISTORDERS') {
                        $("#btnCheckout").val(btnCreateOrders);
                        if ($("#deleteRows") != undefined) { $("#deleteRows").show(); }
                    }
                    else if (ArrFregments[i].toUpperCase() == 'LISTTRANSFERS') {
                        $("#btnCheckout").val(btnCreateTransfers);
                        if ($("#deleteRows") != undefined) { $("#deleteRows").show(); }
                    }
                    else if (ArrFregments[i].toUpperCase() == 'LISTSUGGESTEDRETURN') {
                        $("#btnCheckout").val(btnCreateReturns);
                        if ($("#deleteRows") != undefined) { $("#deleteRows").hide(); }
                    }
                    else if (ArrFregments[i] != "") {
                        $("#btnCheckout").val(btnCreate);
                        if ($("#deleteRows") != undefined) { $("#deleteRows").show(); }
                    }
                }
            }
        }
    }
}

function ShowHideCartDeleteButton() {
    var pagename = '';
    var $IsDeletedRecords = $('#IsDeletedRecords')
        , $adeleteRows = $("a#deleteRows")
        , $hdnPageName = $("#hdnPageName");

    if ($IsDeletedRecords.attr('checked') === undefined && $IsDeletedRecords.attr('checked') !== "checked") {
        //$("a#deleteRows").show();
        $adeleteRows.removeAttr("style");
    }


    if ($hdnPageName.val() !== undefined) {
        pagename = $hdnPageName.val();
    }
    if (pagename.toLowerCase() == "cartitemlist") {
        $("#myDataTable").find("tbody tr.row_selected").each(function () {
            var aPos = oTable.fnGetPosition($(this)[0]);
            var aData = oTable.fnGetData(aPos);
            if (aData.IsItemOrderable == false) {
                $("#btnCheckout").attr('disabled', 'disabled');
                $('#btnCheckout').removeClass('btnGeneral');
                $('#btnCheckout').addClass('btnGeneraldisabled');
            }
            if (aData.IsAutoMatedEntry == "Yes") {
                //$("a#deleteRows").hide();
                $adeleteRows.attr("style", "display:inline-block;pointer-events: none;");
                return;
            }
        });

        var ArrFregments = location.hash.split('#');
        var i = 0;
        for (i = 0; i < ArrFregments.length; i++) {
            if (ArrFregments[i].toUpperCase() == 'LISTSUGGESTEDRETURN') {
                $adeleteRows.hide();
            }
        }
    }
}

function ShowHideChangeLog() {
    // To show or hide the History(change log) tab 

    var $tab6 = $("#tab6"), $tab23 = $("#tab23");
    if ($tab6.length <= 0 && $tab23.length <= 0) {
        return false;
    }

    var anSelectedRows = fnGetSelected(oTable);
    if (anSelectedRows != null) {
        if (anSelectedRows.length == 1) {
            $tab6.show();
            $tab23.show();
        }
        else {
            if (IsShowHistory) {
                $tab6.show();
                $tab23.show();
                IsShowHistory = false;
            }
            else {
                $tab6.hide();
                $tab23.hide();
            }
        }
    }
}

$(document).ready(function () {

    $("#divReceivedItem").dialog({
        autoOpen: false,
        modal: true,
        width: 1100,
        height: 600,
        title: ReceivedDetail,
        draggable: true,
        resizable: true,
        open: function () {
            var guid = $(this).data("Guid");
            var url = $(this).data("Url"); ;

            $.ajax({
                "url": url,
                "data": JSON.stringify({ 'dataGUID': guid }),
                "type": 'POST',
                "async": false,
                "cache": false,
                "dataType": "text",
                "contentType": "application/json",
                "success": function (response) {
                    $("#divReceivedItem").html(response);
                    $('#DivLoading').hide();
                },
                "error": function (err) {
                    $('#DivLoading').hide();
                }

            });
        },
        close: function () {
            $(this).empty();
        }

    });

    $("#divDetailGridReorderPopup").dialog({
        autoOpen: false,
        modal: true,
        width: 400,
        height: 500,
        title: ReorderColumnPopupHeader,
        draggable: true,
        resizable: true,
        open: function () {
            var dataTableName = $(this).data("DataTableName");
            var listName = $(this).data("ListName");
            var ColumnObjName = $(this).data("ColumnObjectName");
            if (listName == 'CountLineItem') {
                GenerateDetailGridCountLineColumns(dataTableName, listName, ColumnObjName);
            }
            else {
                GenerateDetailGridColumns(dataTableName, listName, ColumnObjName);
            }
            //$("#sortableContainer").sortable({ axis: "y", containment: "parent" });
            $('#divDetailGridReorderPopup').find('#ulDGColumnReOrder').sortable({ axis: "y", containment: "parent", items: "li:not(.unsortable)" });
            // $('#divDetailGridReorderPopup').find("#ulDGColumnReOrder").disableSelection();
        }
    });

    $('#myDataTable').on('page.dt', function () {
        var HistorySelected1 = fnGetSelected(oTable);
        if ($('#tab6') != 'undefined' && $('#tab6').is('hidden') == false && HistorySelected1.length > 0)
            $('#tab6').hide();
    });

    validateNumeric();
    setTimezoneCookie();
    $(document).on('keydown', "input[readonly]", function (e) {
        if (e.which === 8) {
            e.preventDefault();
        }
    });

    $(document).on('blur', "input[type='text']", function (e) {
        var txtvalue = $(this).val();
        if (txtvalue != null && txtvalue != "") {
            var regexForSpecialCharNotAllowed = /\<|\>/;
            var IsValidValue = regexForSpecialCharNotAllowed.test(txtvalue);
            if (IsValidValue == true) {
                ShowNotificationMessage(MsgInvalidStringRemoved);
                var desired = txtvalue.replace(/\<|\>/gi, '')
                $(this).val(desired);
                e.preventDefault();
                return false;
            }
        }
    });

    $("#divReorderPopup").dialog({
        autoOpen: false,
        modal: true,
        width: 450,
        height: dHeight,
        title: "Columns",
        draggable: true,
        resizable: true,
        open: function () {
            var Title = $('#divReorderPopup').find('#hdnReOrderTitle').val(); //$(this).data('Title');
            var dataTableName = $('#divReorderPopup').find('#hdnReOrderDataTableName').val(); //$(this).data('dataTableName');
            //var columnObj = $(this).data('objColumns');

            $('#ui-dialog-title-divReorderPopup').text(Title);
            GenerateAndShowGridColumnList(dataTableName);

            $('#divReorderPopup').find('#ulColumnReOrder').sortable({ axis: "y", containment: "parent", items: "li:not(.unsortable)" });

            $('#divReorderPopup').find("#ulColumnReOrder").disableSelection();
        },
        close: function () {
            ////$('#divReorderPopup').find('#hdnReOrderDataTableName').val("");
            //$('#divReorderPopup').find('#hdnReOrderTitle').val("");
            //$('#divReorderPopup').find('#hdnReOrderListName').val("");
            //$('#divReorderPopup').find('#hdnReOrderExecuteFunctionString').val("");
            $('#divReorderPopup li').each(function (index) {
                $(this).remove();
            });
        }
    });

    $('#divCatalogReportPopup').dialog({
        autoOpen: false,
        modal: true,
        width: 350,
        title: catalogReportPopupTitle,
        draggable: true,
        resizable: true,
        open: function () {
            $(this).find('form#frmRunCatalogPopup').unbind('submit'); //.submit()
            $(this).find('#hdnCatalogReportID').val($(this).data("CatalogID"));
            $(this).find('#hdnSelectedItemIDs').val($(this).data("ItemIDs"));
            $(this).find('#hdncallFrom').val($(this).data("CallFrom"));
            $(this).find('select#ddlGroupName').val('');
            $(this).find('select#ddlGroupName').change();

            if ($(this).data("CallFrom") == "ItemList") {
                $(this).find('#trInActiveItemChk').css("visibility", "hidden");
            }
            else {
                $(this).find('#trInActiveItemChk').css("visibility", "visible");
            }


        },
        close: function () {
            $(this).find('#hdnCatalogReportID').val('');
            $(this).find('#hdnSelectedItemIDs').val('');
            $(this).find('#hdncallFrom').val('');
            $(this).find('#trInActiveItemChk').css("visibility", "visible");
            $(this).find('form#frmRunCatalogPopup').unbind(event);
        }
    });

    $('#divLabelPrintPopup').dialog({
        autoOpen: false,
        modal: true,
        width: 380,
        title: lblLabels,
        draggable: true,
        resizable: true,
        open: function () {

            $(this).find('form#frmLabelPopup').unbind('submit'); //.submit()
            $(this).find('#hdnIDs').val($(this).data("IDs"));
            $(this).find('#hdnModuleID').val($(this).data("ModuleID"));
            $(this).find('#hdnSortField').val($(this).data("SortFields"));
            $(this).find('#hdnROTDIds').val($(this).data("ROTDIds"));
            if ($(this).data("CallFrom").length > 0)
                $(this).find('#hdnCallFrom').val($(this).data("CallFrom"));

        },
        close: function () {
            $(this).find('form#frmLabelPopup').unbind(event);
        }
    });

    $(".print").click(function () {
        IsFirstTime = true;
        SelectedRoomIDs = "";
        IsRoomFirstTime = true;
    });

    $("#dvReportParameters").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        title: "Report",
        title: ReorderColumnPopupHeader,
        draggable: true,
        resizable: true,
        open: function () {
            var dataToPass = $(this).data("data");
            $.ajax({
                type: "POST",
                url: "/Master/ReportParameters",
                contentType: 'application/json',
                dataType: 'json',
                data: dataToPass,
                success: function (retdt) {
                    $("#dvReportParameters").html(retdt);
                },
                error: function (err) {
                    ShowNotificationMessage(MsgErrorInProcess);
                }
            });

        },
        close: function () {
            $("#dvReportParameters").html("");
        }
    });

    $("#GlobalReprotBuilder").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        title: lblReports,
        draggable: false,
        resizable: false,
        open: function () {
            // fill drop down here 
            $('#DivLoading').show();
            GetMultiSelectCompanyDD("ComapnyGlobalReprotBuilder", "ComapnyGlobalReprotBuilderCollapse", "CompanyMaster", "", "Company");
        },
        close: function () {
            if (typeof ($("#ComapnyGlobalReprotBuilder").multiselect("getChecked").length) != undefined && $("#ComapnyGlobalReprotBuilder").multiselect("getChecked").length > 0) {
                $("#ComapnyGlobalReprotBuilder").multiselect("uncheckAll");
            }
            if (typeof ($("#RoomGlobalReprotBuilder").multiselect("getChecked").length) != undefined && $("#RoomGlobalReprotBuilder").multiselect("getChecked").length > 0) {
                $("#RoomGlobalReprotBuilder").multiselect("uncheckAll");
            }
            IsFirstTime = true;
            IsRoomFirstTime = true;
            $("#GlobalReprotBuilder").dialog("close");
        }
    });

    $("#ShowGlobalReprotBuilder").click(function () {

        if ($("#ComapnyGlobalReprotBuilder").multiselect("getChecked").length == 0 || $("#RoomGlobalReprotBuilder").multiselect("getChecked").length == 0) {
            ShowNotificationMessage("Comapny and Room both are required.");
            //showNotificationDialog();
        }
        else if ($("#GlobalReprotBuilder").dialog().data("pgid") == "PullMaster") {

            var StartDate = $("#SDGlobalReprotBuilder")[0].value;
            var EndDate = $("#EDGlobalReprotBuilder")[0].value;
            if (StartDate == "" || EndDate == "") {
                ShowNotificationMessage("Date range is required.");
                //showNotificationDialog();
            }
            else {
                callPrintTransaction("oTable", $("#GlobalReprotBuilder").dialog().data("pgid"), $("#GlobalReprotBuilder").dialog().data("IsSupport"), $("#GlobalReprotBuilder").dialog().data("Ids"), StartDate, EndDate);
                $("#GlobalReprotBuilder").dialog("close");
            }
        }
        else if ($("#GlobalReprotBuilder").dialog().data("pgid") == "ReceiveMasterList") {
            var StartDate = $("#SDGlobalReprotBuilder")[0].value;
            var EndDate = $("#EDGlobalReprotBuilder")[0].value;
            if (StartDate == "" || EndDate == "") {
                ShowNotificationMessage("Date range is required.");
                //showNotificationDialog();
            }
            else {
                callPrintTransaction("oTable", $("#GlobalReprotBuilder").dialog().data("pgid"), $("#GlobalReprotBuilder").dialog().data("IsSupport"), $("#GlobalReprotBuilder").dialog().data("Ids"), StartDate, EndDate);
                $("#GlobalReprotBuilder").dialog("close");
            }
        }
        else if ($("#GlobalReprotBuilder").dialog().data("pgid") === "OrderedItems") {
            var StartDate = $("#SDGlobalReprotBuilder")[0].value;
            var EndDate = $("#EDGlobalReprotBuilder")[0].value;
            if (StartDate == "" || EndDate == "") {
                ShowNotificationMessage("Date range is required.");
                //showNotificationDialog();
            }
            else {
                callPrintTransaction("oTable", $("#GlobalReprotBuilder").dialog().data("pgid"), $("#GlobalReprotBuilder").dialog().data("IsSupport"), $("#GlobalReprotBuilder").dialog().data("Ids"), StartDate, EndDate);
                $("#GlobalReprotBuilder").dialog("close");
            }
        }

        else {
            callPrintTransaction("oTable", $("#GlobalReprotBuilder").dialog().data("pgid"), $("#GlobalReprotBuilder").dialog().data("IsSupport"), $("#GlobalReprotBuilder").dialog().data("Ids"), "", "");
            $("#GlobalReprotBuilder").dialog("close");
        }
    });

    $('ul.tabs').each(function () {
        var $active, $content, $links = $(this).find('a');
        $active = $($links.filter('[href="' + location.hash + '"]')[1] || $links[1]);
        $content = $($active.attr('href'));

        $links.not($active).each(function () {
            $($(this).attr('href')).hide();
        });

        $(this).on('click', 'a', function (e) {
            // Make the old tab inactive.                
            $active.removeClass('active');
            $content.hide();

            $active = $(this);
            $content = $($(this).attr('href'));

            $active.addClass('active');
            $content.show();
            if ($content.selector == "#tab7") {
                AllowDeletePopup = true;
                if (IsRefreshGrid) {
                    IsRefreshGrid = false;
                    oTable.fnDraw();
                }
            }
            ShowHidHistoryTab();
            ShowHideOrderTab();
            e.preventDefault();
        });

    });

    $("div.userListBlock a.clsactionSelectAll").click(function () {

        $("#myDataTable").find("tbody tr").removeClass("row_selected").addClass("row_selected");

        $("#ItemModeDataTable").find("tbody tr").removeClass("row_selected").addClass("row_selected");
        $("#ItemModeDataTable tbody tr").each(function () {
            if ($(this).find("input#btnLoad").length > 0) {
                $(this).removeClass("row_selected");
            }
        });
        $(this).next("a.clsactionDeSelectAll").css('display', '');
        $(this).css('display', 'none');
        ShowHideCartCreateButton();
        ShowHideCartDeleteButton();
        if (gblActionName.toLowerCase() === "receivelist") {
            ShowHideButtons();
        }
        ShowHidHistoryTab();
        ShowHideOrderTab();
        ShowHideChangeLog();
        ShowHideSchedulerTab();
        ShowHideCartCreateButton();
        ShowHideCartDeleteButton();
        ShowHideReturnOrderTab();
    });
    $(document).on("click", "a.clsactionSelectAll", function () {
        if (gblActionName.toLowerCase() === "requisitionlist") {
            return;
        }

        $("#myDataTable").find("tbody tr").removeClass("row_selected").addClass("row_selected");

        $("#ItemModeDataTable").find("tbody tr").removeClass("row_selected").addClass("row_selected");
        $("#ItemModeDataTable tbody tr").each(function () {
            if ($(this).find("input#btnLoad").length > 0) {
                $(this).removeClass("row_selected");
            }
        });
        $(this).next("a.clsactionDeSelectAll").css('display', '');
        $(this).css('display', 'none');
        if (gblActionName.toLowerCase() === "receivelist") {
            ShowHideButtons();
        }
        $("#myDataTable tbody tr").each(function () {

            if ($("#hdnPageName").val() !== undefined && $("#hdnPageName").val() == "ItemMaster") {
                SetItemSelectedIds($(this));
            }
            if ($(this).find("input#notselectRow").length > 0) {
                $(this).toggleClass('row_selected');
            }
        });
        ShowHidHistoryTab();
        ShowHideOrderTab();
        ShowHideChangeLog();
        ShowHideSchedulerTab();
        ShowHideCartCreateButton();
        ShowHideCartDeleteButton();
        ShowHideAddLocationForCount();
        ShowHideReturnOrderTab();
        if (gblActionName.toLowerCase() === "quotetoorders") {
            RemovenonQuoteItems();
        }
        if (gblActionName.toLowerCase() == 'cartitemlist') {
            RemovenonOrderableItems();
        }
    });
    //$("div.userListBlock").on("click", "a.clsactionSelectAll", function () {
    //	  $("#myDataTable").find("tbody tr").removeClass("row_selected").addClass("row_selected");
    //    $("#ItemModeDataTable").find("tbody tr").removeClass("row_selected").addClass("row_selected");
    //    //$("#myDataTable").find("tbody tr").toggleClass('row_selected');
    //    //$("#actionDeSelectAll").css('display', '');
    //    //$("#actionSelectAll").css('display', 'none');
    //    $(this).next("a.clsactionDeSelectAll").css('display', '');
    //    $(this).css('display', 'none');
    //    ShowHideCartCreateButton();
    //    ShowHideCartDeleteButton();
    //});

    $("div.userListBlock a.clsactionDeSelectAll").click(function () {

        $("#myDataTable").find("tbody tr").removeClass("row_selected");
        $("#ItemModeDataTable").find("tbody tr").removeClass("row_selected");
        $(this).prev("a.clsactionSelectAll").css('display', '');
        $(this).css('display', 'none');
        ShowHideCartCreateButton();
        ShowHideCartDeleteButton();
        if (gblActionName.toLowerCase() === "receivelist") {
            ShowHideButtons();
        }
        ShowHidHistoryTab();
        ShowHideOrderTab();
        ShowHideChangeLog();
        ShowHideSchedulerTab();
        ShowHideCartCreateButton();
        ShowHideCartDeleteButton();
        ShowHideReturnOrderTab();
    });
    $(document).on("click", "a.clsactionDeSelectAll", function () {

        $("#myDataTable").find("tbody tr").removeClass("row_selected");
        $("#ItemModeDataTable").find("tbody tr").removeClass("row_selected");
        $(this).prev("a.clsactionSelectAll").css('display', '');
        $(this).css('display', 'none');
        if (gblActionName.toLowerCase() === "receivelist") {
            ShowHideButtons();
        }
        ShowHidHistoryTab();
        ShowHideOrderTab();
        ShowHideChangeLog();
        ShowHideSchedulerTab();
        ShowHideCartCreateButton();
        ShowHideCartDeleteButton();
        ShowHideAddLocationForCount();
        ShowHideReturnOrderTab();

        if ($("#hdnPageName").val() !== undefined && $("#hdnPageName").val() == "ItemMaster") {
            ClearItemSelectedIds();
        }
    });
    //$("div.userListBlock").on("click", "a.clsactionDeSelectAll", function () {
    //    $("#myDataTable").find("tbody tr").removeClass("row_selected");
    //    $("#ItemModeDataTable").find("tbody tr").removeClass("row_selected");
    //    //$("#actionDeSelectAll").css('display', 'none');
    //    //$("#actionSelectAll").css('display', '');
    //    $(this).prev("a.clsactionSelectAll").css('display', '');
    //    $(this).css('display', 'none');
    //    ShowHideCartCreateButton();
    //    ShowHideCartDeleteButton();
    //});

    //$("#actionSelectAll").click(function () {

    //    $("#myDataTable").find("tbody tr").removeClass("row_selected").addClass("row_selected");
    //    //$("#myDataTable").find("tbody tr").toggleClass('row_selected');
    //    $("#actionDeSelectAll").css('display', '');
    //    $("#actionSelectAll").css('display', 'none');
    //    ShowHideCartCreateButton();
    //    ShowHideCartDeleteButton();
    //});

    //$("#actionDeSelectAll").click(function () {
    //    $("#myDataTable").find("tbody tr").removeClass("row_selected");
    //    $("#actionDeSelectAll").css('display', 'none');
    //    $("#actionSelectAll").css('display', '');
    //    ShowHideCartCreateButton();
    //    ShowHideCartDeleteButton();
    //});

    var lastChecked;
    var starttrvalue = "";

    $(document).on("tap click", "#myDataTable tbody tr", function (e) {
        if (!$.isReady) {
            // return if document dom not loaded
            return false;
        }

        //                if (gblActionName === "ReceiveList") {
        //                    return;
        //                }
        //        else if (gblActionName == "ItemMasterList") {
        //            return;
        //        }
        //        else

        if ($(e.target).hasClass("control") == true || e.target.nodeName.toLowerCase() == "img" || e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text" || e.target.type == "button" || $(e.target).is('a') == true || $(e.target).is('span') == true
            || $(e.target).hasClass("selectBox") || e.target.type == "file"
        ) {
            e.stopPropagation();
        } else {

            if (IsDeleteItemPictureViewRecord) {
                //$(this).parent().parent().parent().parent().parent().toggleClass('row_selected');
            }
            else {
                //$(this).toggleClass('row_selected');
                if (lastChecked !== undefined && lastChecked != null && !lastChecked) {
                    lastChecked = this;
                }

                if (e.shiftKey) {
                    var $trs = $('#myDataTable  tbody  tr');
                    var start = $('#myDataTable tbody tr').index(this);
                    var end = $('#myDataTable tbody tr').index(lastChecked);


                    var stringval1 = readCookieforshift("selectstartindex");
                    if (stringval1 != null) {
                        var endindex = $(this).closest('tr').attr('id');
                        createCookieforshift("selectendindex", endindex, 1);
                        if ($("#hdnPageName").val() !== undefined) {
                            var pagename = '';
                            pagename = $("#hdnPageName").val();
                            GetOnlyIdsForPassPagesForshift(pagename, true);
                        }
                    }

                    for (i = Math.min(start, end); i <= Math.max(start, end); i++) {
                        var $tr = $($trs[i]);
                        if (!$('#myDataTable tbody tr').eq(i).hasClass('row_selected')) {
                            $('#myDataTable tbody tr').eq(i).addClass("row_selected");
                            if ($("#hdnPageName").val() !== undefined && $("#hdnPageName").val() == "ItemMaster") {
                                SetItemSelectedIds($tr);
                            }
                        }
                    }
                    if (window.getSelection) {
                        if (window.getSelection().empty) {  // Chrome
                            window.getSelection().empty();
                        } else if (window.getSelection().removeAllRanges) {  // Firefox
                            window.getSelection().removeAllRanges();
                        }
                    } else if (document.selection) {  // IE?
                        document.selection.empty();
                    }
                } else if ((e.metaKey || e.ctrlKey)) {
                    $(this).toggleClass('row_selected');
                } else {
                    $(this).toggleClass('row_selected');


                    if ($(this).hasClass('row_selected')) {
                        (starttrvalue == "") ? starttrvalue = $(this).closest('tr').attr('id') : starttrvalue = starttrvalue + "," + $(this).closest('tr').attr('id');
                        //                        var pageindex = "";
                        //                        $('#myDataTable_paginate span a').each(function () {
                        //                            if ($(this).hasClass('ui-state-disabled')) {
                        //                                pageindex = $(this).text();
                        //                            }
                        //                        });
                        // (pageindex == "") ? starttrvalue = starttrvalue : starttrvalue = starttrvalue + ":" + pageindex;
                        createCookieforshift("selectstartindex", starttrvalue, 1);
                    } else {

                        var stringval = readCookieforshift("selectstartindex");
                        if (stringval != "undefined") {
                            if (stringval != null) {
                                var tmp = stringval.split(',');
                                var index = tmp.indexOf($(this).closest('tr').attr('id'));
                                if (index !== -1) {
                                    tmp.splice(index, 1);
                                    stringval = tmp.join(',');
                                    //eraseCookieforshift("selectstartindex");
                                    //                                var pageindex1 = "";
                                    //                                $('#myDataTable_paginate span a').each(function () {
                                    //                                    if ($(this).hasClass('ui-state-disabled')) {
                                    //                                        pageindex1 = $(this).text();
                                    //                                    }
                                    //                                });
                                    //(pageindex1 == "") ? stringval = stringval : stringval = stringval + ":" + pageindex1;
                                    createCookieforshift("selectstartindex", stringval, 1);
                                }
                            }
                        }

                    }
                }

                lastChecked = this;
            }

            ShowHidHistoryTab();
            ShowHideOrderTab();
            ShowHideChangeLog();
            ShowHideSchedulerTab();
            ShowHideCartCreateButton();
            ShowHideCartDeleteButton();
            if (typeof (ShowHideUnCloseButton) !== 'undefined') {
                ShowHideUnCloseButton();
            }
            if (typeof (ShowHideCopyButton) !== 'undefined') {
                ShowHideCopyButton();
            }

            if (gblActionName.toLowerCase() === "receivelist") {
                ShowHideButtons();
            }
            if (gblActionName.toLowerCase() === "transferlist") {
                ShowHideTransferTab();
            }
            if (gblActionName.toLowerCase() === "quotetoorders") {
                RemovenonQuoteItems();
            }
            if (gblActionName.toLowerCase() == 'cartitemlist') {
                /*RemovenonOrderableItems();*/
            }
            if ($("#hdnPageName").val() !== undefined && $("#hdnPageName").val() == "ItemMaster") {
                SetItemSelectedIds($(this));
            }
            return false;
        }
    });

    //    $('#myDataTable tbody tr').live('tap click', function () {
    //        if (IsDeleteItemPictureViewRecord)
    //            $(this).parent().parent().parent().parent().parent().toggleClass('row_selected');
    //        else
    //            $(this).toggleClass('row_selected');

    //        ShowHidHistoryTab();
    //        ShowHideOrderTab();
    //        ShowHideChangeLog();
    //        return false;
    //    });

    $("table.tbldatach tbody tr").live('tap click', function (e) {
        if (e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text") {
            e.stopPropagation();
        } else {
            $(this).toggleClass('row_selected');
        }
    });



    // used for refresh the grid manually...
    //$('#refreshGrid').click(function () {
    $('#refreshGrid').live('click', function () {
        _Common.selectedGridOperation = _Common.gridOperations.Refresh;

        if ($("#tabWrittenOffTool").hasClass("selected")) {
            writtenOffToolTable.fnDraw();
        }
        else
        {
            oTable.fnDraw();
        }

        if (gblActionName.toLowerCase() == 'requisitionlist') {
            SetConsumeRedCount();
        }
        else if (gblActionName.toLowerCase() == 'cartitemlist' || gblActionName.toLowerCase() == 'orderlist' || gblActionName.toLowerCase() == 'returnorderlist' || gblActionName.toLowerCase() == 'transferlist' || gblActionName.toLowerCase() == 'receivelist') {
            SetReplenishRedCount();
        }
    });

    $(document).on("click", "#undeleteRows", function (e) {
        //$("#undeleteRows").click(function () {

        if ($("body").hasClass('DTTT_Print')) {
            return false;
        }
        else if (gblActionName.toLowerCase() == 'roomlist') {
            deleteURL = "/Master/UnDeleteRoomRecords";
        }
        else if (gblActionName.toLowerCase() === 'companylist') {
            deleteURL = "/Master/UnDeleteCompanyRecords";
        }
        else if (gblActionName.toLowerCase() == 'locationlist') {
            deleteURL = "/Master/UnDeleteLocationMasterRecords";
        }
        else if (gblActionName.toLowerCase() === 'enterpriselist') {
            deleteURL = "/Master/UnDeleteEnterpriseRecords";
        }
        else if (gblActionName.toLowerCase() == 'barcodemasterlist') {
            deleteURL = "/barcode/UnDeleteRecords";
        }
        else if (gblActionName.toLowerCase() == 'pullpomasterlist') {
            deleteURL = "/Pull/UnDeletePORecords";
        }
        else if (gblActionName.toLowerCase() == 'catalogreportlist') {
            deleteURL = "/CatalogReport/UndeleteCatalogReportDetailRecords";
        }
        if (gblActionName.toLowerCase() == 'workorderlist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#WorkOrderGUID').val() + ",";
                }

                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }

        //Undelete functionlality as Per WI-550 Start
        if (gblActionName.toLowerCase() == 'itemmasterlist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#ItemGUID').val() + ",";
                }

                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        if (gblActionName.toLowerCase() == 'schedulemapping') {
            deleteURL = "/Asset/UnDeleteScheduleRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#MappingGUID').val() + ",";
                }

                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() == 'maintenance') {
            deleteURL = "/Assets/UnDeleteToolMaintenanceRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    //stringIDs = stringIDs + $(anQLSelected).find('#MappingGUID').val() + ",";
                    stringIDs = stringIDs + $(anQLSelected).find('#ID').val() + ",";
                }

                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() == 'rolelist') {
            deleteURL = "/Master/UnDeleteRoleRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find("input[name='hdnConcatedId']").val() + ",";
                }

                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() == 'orderlist' || gblActionName.toLowerCase() == 'returnorderlist') {

            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#spnOrderGUID').val() + ",";
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() == 'quotelist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    //stringIDs = stringIDs + $(anQLSelected).find('#spnOrderGUID').val() + ",";
                    var rawData = oTable.fnGetData(anQLSelected[i]);

                    if (rawData != null && typeof (rawData) != "undefined" && rawData.ID != null && typeof (rawData.ID) != "undefined") {
                        stringIDs += rawData.ID + ",";
                        //ReqCount = ReqCount + 1;
                    }
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }

            }
        }
        else if (gblActionName.toLowerCase() == 'toolassetorderlist') {

            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#spnOrderGUID').val() + ",";
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() == 'inventorycountlist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#hdnUniqueID').val() + ",";
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }

        }
        else if (gblActionName.toLowerCase() == 'cartitemlist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#hdnUniqueID').val() + ",";
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
            else {
                $("#tab6").hide();
            }

        }

        else if (gblActionName.toLowerCase() == 'pullmasterlist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#hdnID').val() + ",";
                }

                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() == 'permissiontemplateslist') {
            deleteURL = "/Inventory/UnDeletePermissiontemplates";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#hdnid').val() + ",";
                }

                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }

        else if (gblActionName.toLowerCase() == 'projectlist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#ProjectGUID').val() + ",";
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() === 'transferlist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#spnTransferMasterGUID').text() + ",";
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() == 'bomitemlist') {
            deleteURL = "/BOM/UnDeleteRecords";
            var anSelected = fnGetSelected(oTable);
            if (anSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anSelected.length - 1; i++) {
                    stringIDs = stringIDs + anSelected[i].id + ",";
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() == 'assettoolschedulerlist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anSelected = fnGetSelected(oTable);
            if (anSelected.length !== 0) {
                var stringIDs = "";
                for (var i = 0; i <= anSelected.length - 1; i++) {
                    stringIDs = stringIDs + anSelected[i].id + ",";
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() === 'enterpriseqllist') {
            deleteURL = "/EnterpriseQL/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            if (anQLSelected.length !== 0)
            {
                var stringIDs = "";
                for (var i = 0; i <= anQLSelected.length - 1; i++) {
                    stringIDs = stringIDs + $(anQLSelected).find('#hdnGuid').val() + ",";
                }

                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }
        else if (gblActionName.toLowerCase() == 'assetcategorylist' || gblActionName.toLowerCase() == 'binlist' ||
            gblActionName.toLowerCase() == 'categorylist' ||
            gblActionName.toLowerCase() == 'costuomlist' ||
            gblActionName.toLowerCase() == 'customermasterlist' ||
            gblActionName.toLowerCase() == 'freighttypelist' ||
            gblActionName.toLowerCase() == 'sftplist' ||
            gblActionName.toLowerCase() == 'glaccountlist' || gblActionName.toLowerCase() == 'inventoryclassificationlist' || gblActionName.toLowerCase() == 'measurementtermlist'
            || gblActionName.toLowerCase() == 'manufacturerlist' || gblActionName.toLowerCase() == 'shipvialist'
            || gblActionName.toLowerCase() == 'supplierlist' || gblActionName.toLowerCase() == 'technicianlist'
            || gblActionName.toLowerCase() == 'toolcategorylist' || gblActionName.toLowerCase() == 'unitlist' || gblActionName.toLowerCase() == 'quicklist'
            || gblActionName.toLowerCase() == 'vendermasterlist'
            || gblActionName.toLowerCase() == 'assetlist' || gblActionName.toLowerCase() == 'toollist' || gblActionName.toLowerCase() == 'toollist' || gblActionName.toLowerCase() == 'kittoollist'
            || gblActionName.toLowerCase() == "templateconfigurationlist"
            || gblActionName.toLowerCase() == 'writtenoffcategorylist') {
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = $("table#myDataTable"); // fnGetSelected(oTable);

            if (anQLSelected.length !== 0) {
                var stringIDs = "";

                for (var i = 0; i < $("table#myDataTable tbody tr.row_selected").length; i++) {
                    var j = parseInt(i) + parseInt(1);
                    var currentRow = 1;
                    $("table#myDataTable tbody tr").each(function () {
                        var j = 0;
                        var cls = $(this).attr("class");
                        if (cls.indexOf("row_selected") >= 0) {
                            j++;

                            if (gblActionName.toLowerCase() != 'inventoryclassificationlist' && gblActionName.toLowerCase() != 'toollist' && gblActionName.toLowerCase() != 'kittoollist') {
                                stringIDs = stringIDs + $("table#myDataTable tbody tr:nth-child(" + (currentRow) + ")").attr("id") + ",";
                            }
                            else if (gblActionName.toLowerCase() == 'toollist' || gblActionName.toLowerCase() == 'kittoollist') {
                                stringIDs = stringIDs + $("table#myDataTable tbody tr:nth-child(" + (currentRow) + ") td").find("#hdnGUID").val() + ",";
                            }
                            else if (gblActionName.toLowerCase() == 'inventoryclassificationlist') {
                                stringIDs = stringIDs + $("table#myDataTable tbody tr:nth-child(" + (currentRow) + ") td:first").html() + ",";
                            }
                        }
                        currentRow++;
                    });
                }
                if (stringIDs.length !== 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }


        }

        //if (gblActionName.toLowerCase() == 'TemplateConfigurationList') {
        //    return false;
        //}
        if (gblActionName.toLowerCase() == 'requisitionlist') {
            return false;
        }
        else if (gblActionName.toLowerCase() == "quicklist") {
            var anQLSelected = fnGetSelected(oTable);

            var stringIDs = "";
            for (var i = 0; i <= anQLSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anQLSelected).find('#QuickListGUID').text() + ",";
            }

            if (stringIDs.length !== 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
        }
        else if (gblActionName.toLowerCase() == "materialstaginglist") {
            //return false;
            deleteURL = "/Inventory/UnDeleteRecords";
            var anQLSelected = fnGetSelected(oTable);
            var stringIDs = "";
            for (var i = 0; i <= anQLSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anQLSelected).find('#hdnUniqueID').val() + ",";
            }
            if (stringIDs.length !== 0) {
                $('#basic-Undelmodal-content').modal();
                IsDeletePopupOpen = true;
            }
        }
        //        else if (gblActionName.toLowerCase() == "cartitemlist") {
        //            //return false;
        //            deleteURL = "/Inventory/UnDeleteRecords";
        //            var anQLSelected = fnGetSelected(oTable);
        //            var stringIDs = "";
        //            for (var i = 0; i <= anQLSelected.length - 1; i++) {
        //                stringIDs = stringIDs + $(anQLSelected).find('#hdnUniqueID').val() + ",";
        //            }
        //            if (stringIDs.length !== 0) {
        //                $('#basic-Undelmodal-content').modal();
        //                IsDeletePopupOpen = true;
        //            }
        //        }
        else {
            var anSelected = fnGetSelected(oTable);
            var stringIDs = "";
            for (var i = 0; i <= anSelected.length - 1; i++) {
                stringIDs = stringIDs + anSelected[i].id + ",";
                if (stringIDs.length > 0) {
                    $('#basic-Undelmodal-content').modal();
                    IsDeletePopupOpen = true;
                }
            }
        }

    });
    //Undelete functionlality as Per WI-550 End
    $(document).off("click", "#deleteRows");
    $(document).on("click", "#deleteRows", function (e) {

        if ($("body").hasClass('DTTT_Print')) {
            return false;
        }
        //$('#deleteRows').click(function () {
        if (gblActionName.toLowerCase() == 'userlist') {
            deleteURL = "/Master/DeleteUserRecords";
        }

        if (gblActionName.toLowerCase() == 'itemmaster') {
            deleteURL = "/Inventory/DeleteRecords";
        }
        if (gblActionName.toLowerCase() == 'locationlist') {
            deleteURL = "/Master/DeleteLocationMasterRecords";
        }
        if (gblActionName.toLowerCase() === 'enterpriselist') {
            deleteURL = "/Master/DeleteEnterpriseRecords";
        }
        if (gblActionName.toLowerCase() == 'pullmasterlist')
            deleteURL = "/pull/deletepullmasterrecords";

        if (gblActionName.toLowerCase() == 'projectlist') {
            deleteURL = "/ProjectSpend/DeleteProjectRecords";
            var anQLSelected = fnGetSelected(oTable);
            var stringIDs = "";
            for (var i = 0; i <= anQLSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anQLSelected).find('#ProjectGUID').val() + ",";
            }
            if (stringIDs.length !== 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
        }
        if (gblActionName.toLowerCase() == 'inventorycountlist') {
            deleteURL = "/Inventory/DeleteInventoryCountRecords";
        }
        if (gblActionName.toLowerCase() == 'permissiontemplateslist') {
            deleteURL = "/Inventory/DeletePermissiontemplates";
        }
        if (gblActionName.toLowerCase() == 'schedulemapping') {
            deleteURL = "/Assets/DeleteMappingRecords";
        }
        if (gblActionName.toLowerCase() == "materialstaginglist") {
            deleteURL = "/Inventory/DeleteMaterialStagingRecords";
            var anQLSelected = fnGetSelected(oTable);
            var stringIDs = "";
            for (var i = 0; i <= anQLSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anQLSelected).find('#hdnUniqueID').val() + ",";
            }
            if (stringIDs.length !== 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
        }

        if (gblActionName.toLowerCase() == 'workorderlist') {
            deleteURL = "/WorkOrder/DeleteWOMasterRecords";
            var anQLSelected = fnGetSelected(oTable);
            var stringIDs = "";
            for (var i = 0; i <= anQLSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anQLSelected).find('#WorkOrderGUID').val() + ",";
            }
            if (stringIDs.length !== 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
        }

        if (gblActionName.toLowerCase() === 'toollist' || gblActionName.toLowerCase() == 'kittoollist') {
            deleteURL = "/Assets/DeleteToolRecords";
        }
        if (gblActionName.toLowerCase() === 'assetlist') {
            deleteURL = "/Assets/DeleteAssetRecords";
        }
        if (gblActionName.toLowerCase() === 'assetcategorylist') {
            deleteURL = "/Master/DeleteAssetCategoryRecords";
        }
        if (gblActionName.toLowerCase() === 'categorylist') {
            deleteURL = "/Master/DeleteCategoryRecords";
        }
        if (gblActionName.toLowerCase() === 'categorylist') {
            deleteURL = "/Master/DeleteCategoryRecords";
        }
        if (gblActionName.toLowerCase() === 'costuomlist') {
            deleteURL = "/Master/DeleteCostUOMRecords";
        }
        if (gblActionName.toLowerCase() === 'customermasterlist') {
            deleteURL = "/Master/DeleteCustomerMasterRecords";
        }
        if (gblActionName.toLowerCase() === 'freighttypelist') {
            deleteURL = "/Master/FrieghtTypeDelete";
        }
        if (gblActionName.toLowerCase() === 'sftplist') {
            deleteURL = "/Master/DeleteFTPMasterRecords";
        }
        if (gblActionName.toLowerCase() === 'glaccountlist') {
            deleteURL = "/Master/DeleteGLAccountRecords";
        }
        if (gblActionName.toLowerCase() === 'inventoryclassificationlist') {
            deleteURL = "/Master/DeleteInventoryClassificationRecords";
        }
        if (gblActionName.toLowerCase() === 'binlist') {
            deleteURL = "/Master/DeleteBinMasterRecords";
        }
        if (gblActionName.toLowerCase() === 'manufacturerlist') {
            deleteURL = "/Master/DeleteManufacturerRecords";
        }
        if (gblActionName.toLowerCase() === 'writtenoffcategorylist') {
            deleteURL = "/Master/DeleteWrittenOffCategoryList";
        }
        if (gblActionName.toLowerCase() === 'measurementtermlist') {
            deleteURL = "/Master/DeleteMeasurementTermRecords";
        }
        if (gblActionName.toLowerCase() === 'shipvialist') {
            deleteURL = "/Master/DeleteShipViaRecords";
        }
        if (gblActionName.toLowerCase() === 'supplierlist') {
            deleteURL = "/Master/DeleteSupplierRecords";
        }
        if (gblActionName.toLowerCase() === 'technicianlist') {
            deleteURL = "/Master/DeleteRecords";
        }
        if (gblActionName.toLowerCase() === 'toolcategorylist') {
            deleteURL = "/Master/DeleteToolCategoryRecords";
        }
        if (gblActionName.toLowerCase() === 'unitlist') {
            deleteURL = "/Master/DeleteUnitMasterRecords";
        }
        if (gblActionName.toLowerCase() === 'vendermasterlist') {
            deleteURL = "/Master/DeleteVenderMasterRecords";
        }
        if (gblActionName.toLowerCase() === 'dbscripttemplates') {
            deleteURL = "/EnterpriseAdmin/DeleteScript";
        }
        if (gblActionName.toLowerCase() === 'barcodemasterlist') {
            deleteURL = "/Barcode/DeleteBarcodeRecords";
        }
        if (gblActionName.toLowerCase() === 'rolelist') {
            deleteURL = "/Master/DeleteRoleRecords";
        }
        if (gblActionName.toLowerCase() === 'assettoolschedulerlist') {
            deleteURL = "/Assets/DeleteAssetToolScheduleRecords";
        }
        if (gblActionName.toLowerCase() === 'transferlist') {
            deleteURL = "/Transfer/DeleteTransferMasterRecords";
            var anQLSelected = fnGetSelected(oTable);
            var stringIDs = "";
            for (var i = 0; i <= anQLSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anQLSelected).find('#spnTransferMasterGUID').text() + ",";
            }
            if (stringIDs.length !== 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
        }

        if (gblActionName.toLowerCase() === 'enterpriselist')
            deleteURL = "/Master/DeleteEnterpriseRecords";
        if (gblActionName.toLowerCase() === 'orderlist' || gblActionName.toLowerCase() === 'returnorderlist')
            deleteURL = "/Order/DeleteOrderMasterRecords";

        if (gblActionName.toLowerCase() === 'quotelist')
            deleteURL = "/Quote/DeleteQuoteMasterRecords";

        if (gblActionName.toLowerCase() == 'TemplateConfigurationList') {
            return false;
        }
        else if (gblActionName.toLowerCase() == 'requisitionlist') {
            return false;
        }
        else if (gblActionName.toLowerCase() == "quicklist") {
            deleteURL = "/QuickList/DeleteQuickListMasterRecords";
            var anQLSelected = fnGetSelected(oTable);

            var stringIDs = "";
            for (var i = 0; i <= anQLSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anQLSelected).find('#QuickListGUID').text() + ",";
            }

            if (stringIDs.length !== 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
        }
        else if (gblActionName.toLowerCase() == "pullpomasterlist") {
            deleteURL = "/pull/DeletePORecords";
            var anQLSelected = fnGetSelected(oTable);

            var stringIDs = "";
            for (var i = 0; i <= anQLSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anQLSelected).find('#hdnID').text() + ",";
            }

            if (stringIDs.length !== 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
        }
        else if (gblActionName.toLowerCase() === 'enterpriseqllist') {
            deleteURL = "/EnterpriseQL/DeleteEnterpriseQL";
            var anQLSelected = fnGetSelected(oTable);

            var stringIDs = "";
            for (var i = 0; i <= anQLSelected.length - 1; i++) {
                stringIDs = stringIDs + $(anQLSelected).find('#hdnGuid').val() + ",";
            }

            if (stringIDs.length !== 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
        }
        else {
            var anSelected = fnGetSelected(oTable);
            var stringIDs = "";
            for (var i = 0; i <= anSelected.length - 1; i++) {
                if (deleteURL.toLowerCase() == "/pull/deletepullmasterrecords") {
                    var aPos = oTable.fnGetPosition($(anSelected[i])[0]);
                    var aData = oTable.fnGetData(aPos);
                    if (!(!isNaN(parseFloat(aData.ConsignedQuantity)) && parseFloat(aData.ConsignedQuantity) > 0 && aData.Billing == 'Yes')) {
                        stringIDs = stringIDs + aData.ID + ",";
                    }
                }
                else {
                    stringIDs = stringIDs + anSelected[i].id + ",";
                }
            }

            if (stringIDs.length > 0) {
                $('#basic-modal-content').modal();
                IsDeletePopupOpen = true;
            }
            else {
                return false;
            }
        }


    });

    //Undelete yes button functinality//////////////////////
    $("#btnUndeleteModelYes").live('click', function () {

        var anSelected = fnGetSelected(oTable);
        var stringIDs = "";
        var strModuleName = "";

        // set urls
        if (gblActionName.toLowerCase() == 'userlist') {
            deleteURL = "/Master/UnDeleteUserRecords";
        }
        else if (gblActionName.toLowerCase() == 'itemmasterlist' || gblActionName.toLowerCase() == 'orderlist' || gblActionName.toLowerCase() == 'assetcategorylist' || gblActionName.toLowerCase() == 'binlist' || gblActionName.toLowerCase() == 'customermasterlist' || gblActionName.toLowerCase() == 'freighttypelist' || gblActionName.toLowerCase() == 'glaccountlist' || gblActionName.toLowerCase() == 'inventoryclassificationlist'
            || gblActionName.toLowerCase() == 'manufacturerlist' || gblActionName.toLowerCase() == 'shipvialist' || gblActionName.toLowerCase() == 'supplierlist' || gblActionName.toLowerCase() == 'toolcategorylist'
            || gblActionName.toLowerCase() == 'unitlist' || gblActionName.toLowerCase() == 'vendermasterlist' || gblActionName.toLowerCase() == 'materialstaginglist' || gblActionName.toLowerCase() == "quicklist"
            || gblActionName.toLowerCase() == 'assetlist' || gblActionName.toLowerCase() == 'toollist' || gblActionName.toLowerCase() == 'kittoollist' || gblActionName.toLowerCase() == 'workorderlist' || gblActionName.toLowerCase() == 'cartitemlist'
            || gblActionName.toLowerCase() == 'barcodemasterlist' || gblActionName.toLowerCase() == 'assettoolschedulerlist' || gblActionName.toLowerCase() == 'quotelist'
            || gblActionName.toLowerCase() == 'roomlist' || gblActionName.toLowerCase() == 'notifications' || gblActionName.toLowerCase() == "templateconfigurationlist" || gblActionName.toLowerCase() == "writtenoffcategorylist") {
            deleteURL = "/Inventory/UnDeleteRecords";
        }
        else if (gblActionName.toLowerCase() == 'sftplist') {
            deleteURL = "/Master/UnDeleteFTPMasterRecords";
        }
        else if (gblActionName.toLowerCase() == 'pullpomasterlist') {
            deleteURL = "/Pull/UnDeletePORecords";
        }
        else if (gblActionName.toLowerCase() === 'dbscripttemplates') {
            deleteURL = "/EnterpriseAdmin/DeleteScript";
        }
        else if (gblActionName.toLowerCase() == 'permissiontemplateslist') {
            deleteURL = "/Inventory/UnDeletePermissiontemplates";
        }
        else if (gblActionName.toLowerCase() == 'schedulemapping') {
            deleteURL = "/Assets/UnDeleteScheduleRecords";
        }
        // set module name
        if (gblActionName.toLowerCase() == 'itemmasterlist') {
            strModuleName = "ItemMaster";
        }
        else if (gblActionName.toLowerCase() == 'roomlist') {
            strModuleName = "Room";
        }
        else if (gblActionName.toLowerCase() == 'workorderlist') {
            strModuleName = "WorkOrder";
        }
        else if (gblActionName.toLowerCase() == 'permissiontemplateslist') {
            strModuleName = "PermissionTemplate";
        }
        else if (gblActionName.toLowerCase() == 'requisitionlist') {
            strModuleName = "Requisition";
        }
        else if (gblActionName.toLowerCase() == 'orderlist' || gblActionName.toLowerCase() == 'returnorderlist') {
            strModuleName = "OrderMaster";
        }
        else if (gblActionName.toLowerCase() == 'toolassetorderlist') {
            strModuleName = "ToolAssetOrderMaster";
        }
        else if (gblActionName.toLowerCase() == 'inventorycountlist') {
            strModuleName = "InventoryCount";
        }
        else if (gblActionName.toLowerCase() == "transferlist") {
            strModuleName = "Transfer";
        }
        else if (gblActionName.toLowerCase() == 'pullmasterlist') {
            strModuleName = "Pull";
        }
        else if (gblActionName.toLowerCase() == 'materialstaginglist') {
            strModuleName = "MaterialStaging";
        }
        else if (gblActionName.toLowerCase() == 'assetcategorylist') {
            strModuleName = "AssetCategorys";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'binlist') {
            strModuleName = "binlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'projectlist') {
            strModuleName = 'projectspend';
        }
        else if (gblActionName.toLowerCase() == 'categorylist') {
            strModuleName = "categorylist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'costuomlist') {
            strModuleName = "costuomlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'customermasterlist') {
            strModuleName = "customermasterlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'freighttypelist') {
            strModuleName = "freighttypelist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'sftplist') {
            strModuleName = "sftplist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'glaccountlist') {
            strModuleName = "glaccountlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'inventoryclassificationlist') {
            strModuleName = "inventoryclassificationlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'measurementtermlist') {
            strModuleName = "measurementtermlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'manufacturerlist') {
            strModuleName = "manufacturerlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'shipvialist') {
            strModuleName = "shipvialist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'supplierlist') {
            strModuleName = "supplierlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'technicianlist') {
            strModuleName = "technicianlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'toolcategorylist') {
            strModuleName = "toolcategorylist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'unitlist') {
            strModuleName = "unitlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'vendermasterlist') {
            strModuleName = "vendermasterlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == "quicklist") {
            strModuleName = "quicklist";
        }
        else if (gblActionName.toLowerCase() == 'assetlist') {
            strModuleName = "assetlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");

        }
        else if (gblActionName.toLowerCase() == 'toollist' || gblActionName.toLowerCase() == 'kittoollist') {
            strModuleName = "toollist";
            anSelected = $("table#myDataTable tbody tr.row_selected");

        }
        else if (gblActionName.toLowerCase() == 'cartitemlist') {
            strModuleName = "cartitem";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() === 'dbscripttemplates') {
            strModuleName = "dbscriptlist";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        else if (gblActionName.toLowerCase() == 'assettoolschedulerlist') {
            strModuleName = "toolschedules";
        }
        else if (gblActionName.toLowerCase() == "templateconfigurationlist") {
            strModuleName = "templateconfiguration";
        }
        else if (gblActionName.toLowerCase() == "companylist") {
            deleteURL = "/master/UnDeleteCompanyMasterRecords";
        }
        else if (gblActionName.toLowerCase() == "companylist") {
            deleteURL = "/master/UnDeleteCompanyMasterRecords";
        }
        else if (gblActionName.toLowerCase() == 'enterpriseqllist') {
            deleteURL = "/EnterpriseQL/UnDeleteRecords";
        }
        else if (gblActionName.toLowerCase() == 'quotelist') {
            strModuleName = "QuoteMaster";
        }
        else if (gblActionName.toLowerCase() == "writtenoffcategorylist") {
            strModuleName = "toolwrittenoffcategory";
            anSelected = $("table#myDataTable tbody tr.row_selected");
        }
        var ReqCount = 0;

        if (anSelected.length != 0) {
            for (var i = 0; i <= anSelected.length - 1; i++) {
                if (gblActionName.toLowerCase() == 'userlist') {
                    stringIDs = stringIDs + $(anSelected[i]).attr('id') + ",";
                }
                else if (gblActionName.toLowerCase() == 'itemmasterlist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
                }
                else if (gblActionName.toLowerCase() == 'permissiontemplateslist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#hdnid')[0].value + ",";
                }
                else if (gblActionName.toLowerCase() == 'maintenance') {
                    var aData = oTable.fnGetData(anSelected[i]);
                    stringIDs = stringIDs + aData.ID + ",";
                }
                else if (gblActionName.toLowerCase() == 'rolelist') {
                    stringIDs = stringIDs + $(anSelected[i]).find("input[name='hdnConcatedId']").val() + ",";
                }
                else if (gblActionName.toLowerCase() == 'orderlist' || gblActionName.toLowerCase() == 'returnorderlist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#spnOrderGUID').text() + ",";
                }
                else if (gblActionName.toLowerCase() == "quotelist") {
                    var rawData = oTable.fnGetData(anSelected[i]);

                    if (rawData != null && typeof (rawData) != "undefined" && rawData.ID != null && typeof (rawData.ID) != "undefined") {
                        stringIDs += rawData.ID + ",";
                    }
                }
                else if (gblActionName.toLowerCase() == 'toolassetorderlist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#spnOrderGUID').text() + ",";
                }
                else if (gblActionName.toLowerCase() == 'inventorycountlist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == 'pullmasterlist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#hdnID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == 'projectlist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#ProjectGUID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == 'materialstaginglist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == 'requisitionlist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#RequisitionGUID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == "quicklist") {
                    stringIDs = stringIDs + $(anSelected[i]).find('#QuickListGUID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == "transferlist") {
                    var rawData = oTable.fnGetData(anSelected[i]);
                    if (rawData != null && typeof (rawData) != "undefined" && rawData.GUID != null && typeof (rawData.GUID) != "undefined"
                        && rawData.GUID.length > 0) {
                        stringIDs += rawData.GUID + ",";
                    }
                    //stringIDs = stringIDs + $(anSelected[i]).find('#spnTransferMasterGUID').text() + ",";
                }
                else if (gblActionName.toLowerCase() == 'toollist' || gblActionName.toLowerCase() == 'kittoollist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#hdnGUID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == "workorderlist") {
                    stringIDs = stringIDs + $(anSelected[i]).find('#WorkOrderGUID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == 'cartitemlist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == 'schedulemapping') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#MappingGUID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == 'pullpomasterlist') {
                    stringIDs = stringIDs + $(anSelected[i]).find('#hdnID').val() + ",";
                }
                else if (gblActionName.toLowerCase() == 'bomitemlist') {
                    stringIDs = stringIDs + anSelected[i].id + ",";
                }
                else if (gblActionName.toLowerCase() == 'roomlist') {
                    stringIDs = stringIDs + anSelected[i].id + ",";
                }
                else if (gblActionName.toLowerCase() == 'notifications') {
                    strModuleName = "NotificationMaster";
                    stringIDs = stringIDs + anSelected[i].id + ",";
                }
                else if (gblActionName.toLowerCase() == "companylist") {
                    var aData = oTable.fnGetData(anSelected[i]);
                    stringIDs = stringIDs + aData.ID + "_" + aData.EnterPriseId + ",";
                }
                else if (gblActionName.toLowerCase() == 'enterpriseqllist') {
                    stringIDs = stringIDs + $(anSelected[i]).find("#hdnGuid").val() + ",";
                }
                else if (gblActionName.toLowerCase() == "sftplist") {
                    var rawData = oTable.fnGetData(anSelected[i]);

                    if (rawData != null && typeof (rawData) != "undefined" && rawData.ID != null && typeof (rawData.ID) != "undefined") {
                        stringIDs += rawData.ID + ",";
                    }
                }
                else if (gblActionName.toLowerCase() == 'assetcategorylist' || gblActionName.toLowerCase() == 'binlist' ||
                    gblActionName.toLowerCase() == 'categorylist' ||
                    gblActionName.toLowerCase() == 'costuomlist' ||
                    gblActionName.toLowerCase() == 'customermasterlist' ||
                    gblActionName.toLowerCase() == 'freighttypelist' ||
                    gblActionName.toLowerCase() == 'glaccountlist' || gblActionName.toLowerCase() == 'inventoryclassificationlist' || gblActionName.toLowerCase() == 'measurementtermlist'
                    || gblActionName.toLowerCase() == 'manufacturerlist' || gblActionName.toLowerCase() == 'shipvialist'
                    || gblActionName.toLowerCase() == 'supplierlist' || gblActionName.toLowerCase() == 'technicianlist' || gblActionName.toLowerCase() == 'toolcategorylist'
                    || gblActionName.toLowerCase() == 'unitlist' || gblActionName.toLowerCase() == 'vendermasterlist' || gblActionName.toLowerCase() == "writtenoffcategorylist"
                    || gblActionName.toLowerCase() == 'assetlist' || gblActionName.toLowerCase() == 'assettoolschedulerlist' || gblActionName.toLowerCase() == "templateconfigurationlist") {
                    var j = parseInt(i) + parseInt(1);
                    var currentRow = 1;
                    $("table#myDataTable tbody tr").each(function () {
                        var j = 0;
                        var cls = $(this).attr("class");
                        if (cls.indexOf("row_selected") >= 0) {
                            j++;
                            if ((i + 1) == j) {
                                if (gblActionName.toLowerCase() != 'inventoryclassificationlist' && gblActionName.toLowerCase() != 'toollist' && gblActionName.toLowerCase() != 'kittoollist') {
                                    stringIDs = stringIDs + $("table#myDataTable tbody tr:nth-child(" + (currentRow) + ")").attr("id") + ",";
                                }
                                else if (gblActionName.toLowerCase() == 'toollist' || gblActionName.toLowerCase() == 'kittoollist') {
                                    stringIDs = stringIDs + $("table#myDataTable tbody tr:nth-child(" + (currentRow) + ") td").find("#hdnGUID").val() + ",";
                                }
                                else if (gblActionName.toLowerCase() == 'inventoryclassificationlist') {
                                    stringIDs = stringIDs + $("table#myDataTable tbody tr:nth-child(" + (currentRow) + ") td").find("span#RangeStartvalue").html() + ",";
                                }
                            }
                        }
                        currentRow++;
                    });
                }
                else if (gblActionName.toLowerCase() == "enterpriselist") {
                    stringIDs = stringIDs + anSelected[i].id + ",";
                }

                ReqCount = ReqCount + 1;
            }

            $('#DivLoading').show();
            $.ajax({
                'url': deleteURL,
                data: { ids: stringIDs, ModuleName: strModuleName },
                timeout: 0,
                success: function (response) {
                    if (response.Status == "ok") {
                        IsNarrowSearchRefreshRequired = true;
                        if (gblActionName.toLowerCase() == 'assettoolschedulerlist') {
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                            $("#spanGlobalMessage").html(response.Message);
                        }
                        else {
                            $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                            $("#spanGlobalMessage").html(MsgUndeleteSuccessfully.replace("{0}", ReqCount));
                        }

                        oTable.fnDraw();
                        if (gblActionName.toLowerCase() == 'itemmasterlist') {
                            SetItemCountInMenu();

                            if (typeof (CallNarrowfunctions) != "undefined") {
                                CallNarrowfunctions();
                            }
                        }
                        else if (gblActionName.toLowerCase() === "orderlist") {
                            IsRetainNarrow = true;
                            //_NarrowSearchSave.saveNarrowSearch('NarroSearchSaveOrderMaster', 'OrderMaster');
                            var tmpOrderCreated = CreatedBySelectedValues;
                            var tmpOrderUpdated = UpdatedBySelectedValues;
                            var tmpOrderSupplier = SupplierBySelectedValues;
                            var tmpOrderStatus = StatusBySelectedValues;
                            var tmpOrderRequiredDate = RequiredDateSelectedValues;
                            var tmpOrderShippingVendor = WorkOrderSelectedValues;
                            var tmpChangeOrderSelectedValues = ChangeOrderSelectedValues;
                            var tmpOrderUDF1 = OrderUDF1NarrowValues;
                            var tmpOrderUDF2 = OrderUDF2NarrowValues;
                            var tmpOrderUDF3 = OrderUDF3NarrowValues;
                            var tmpOrderUDF4 = OrderUDF4NarrowValues;
                            var tmpOrderUDF5 = OrderUDF5NarrowValues;

                            var tmpOrderDateCFrom = $("#OrdDateCFrom").val();//getTxtDateVal('OrdDateCFrom');
                            var tmpOrderDateCTo = $("#OrdDateCTo").val();//getTxtDateVal('OrdDateCTo');
                            var tmpOrderDateUFrom = $("#OrdDateUFrom").val();//getTxtDateVal('OrdDateUFrom');
                            var tmpOrderDateUTo = $("#OrdDateUTo").val(); //getTxtDateVal('OrdDateUTo');

                            fillOrderNarrowSearchDiv();
                            SetReplenishRedCount();

                            setTimeout(function () {
                                var optionSeperator = ")" + GuidSeparator;
                                for (var i = 0; i < tmpOrderSupplier.length; i++) {
                                    $("#OrderSupplier").multiselect("widget").find(":checkbox[value='" + tmpOrderSupplier[i] + "']").attr("checked", "checked");
                                    $("#OrderSupplier option[value='" + tmpOrderSupplier[i] + "']").attr("selected", 1);
                                    $("#OrderSupplier").multiselect("refresh");
                                }

                                var tmpOrderSupplierCollapseText = $("#OrderSupplier option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderSupplierCollapse = false;

                                for (var i = 0; i < tmpOrderSupplierCollapseText.length; i++) {
                                    if (tmpOrderSupplierCollapseText[i] != null && tmpOrderSupplierCollapseText[i] != "" && tmpOrderSupplierCollapseText[i].length > 0) {
                                        isShowOrderSupplierCollapse = true;
                                        $("#OrderSupplierCollapse").append("<span>" + tmpOrderSupplierCollapseText[i] + "</span>");
                                    }
                                }

                                if (isShowOrderSupplierCollapse) {
                                    $("#OrderSupplierCollapse").show();
                                }

                                $("#OrderSupplier").multiselect("refresh");
                                SupplierBySelectedValues = tmpOrderSupplier;

                                for (var i = 0; i < tmpOrderStatus.length; i++) {
                                    $("#OrderStatus").multiselect("widget").find(":checkbox[value='" + tmpOrderStatus[i] + "']").attr("checked", "checked");
                                    $("#OrderStatus option[value='" + tmpOrderStatus[i] + "']").attr("selected", 1);
                                    $("#OrderStatus").multiselect("refresh");
                                }

                                var tmpOrderStatusCollapseText = $("#OrderStatus option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderStatusCollapse = false;
                                for (var i = 0; i < tmpOrderStatusCollapseText.length; i++) {
                                    if (tmpOrderStatusCollapseText[i] != null && tmpOrderStatusCollapseText[i] != "" && tmpOrderStatusCollapseText[i].length > 0) {
                                        isShowOrderStatusCollapse = true;
                                        $("#OrderStatusCollapse").append("<span>" + tmpOrderStatusCollapseText[i] + "</span>");
                                    }
                                }

                                if (isShowOrderStatusCollapse) {
                                    $("#OrderStatusCollapse").show();
                                }

                                $("#OrderStatus").multiselect("refresh");
                                StatusBySelectedValues = tmpOrderStatus;

                                for (var i = 0; i < tmpOrderRequiredDate.length; i++) {
                                    $("#OrderRequiredDate").multiselect("widget").find(":checkbox[value='" + tmpOrderRequiredDate[i] + "']").attr("checked", "checked");
                                    $("#OrderRequiredDate option[value='" + tmpOrderRequiredDate[i] + "']").attr("selected", 1);
                                    $("#OrderRequiredDate").multiselect("refresh");
                                }

                                var tmpOrderRequiredDateCollapseText = $("#OrderRequiredDate option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderRequiredDateCollapse = false;
                                for (var i = 0; i < tmpOrderRequiredDateCollapseText.length; i++) {
                                    if (tmpOrderRequiredDateCollapseText[i] != null && tmpOrderRequiredDateCollapseText[i] != "" && tmpOrderRequiredDateCollapseText[i].length > 0) {
                                        isShowOrderRequiredDateCollapse = true;
                                        $("#OrderRequiredDateCollapse").append("<span>" + tmpOrderRequiredDateCollapseText[i] + "</span>"); //
                                    }
                                }

                                if (isShowOrderRequiredDateCollapse) {
                                    $("#OrderRequiredDateCollapse").show();
                                }

                                $("#OrderRequiredDate").multiselect("refresh");
                                RequiredDateSelectedValues = tmpOrderRequiredDate;

                                for (var i = 0; i < tmpOrderShippingVendor.length; i++) {
                                    $("#OrderShippingVendor").multiselect("widget").find(":checkbox[value='" + tmpOrderShippingVendor[i] + "']").attr("checked", "checked");
                                    $("#OrderShippingVendor option[value='" + tmpOrderShippingVendor[i] + "']").attr("selected", 1);
                                    $("#OrderShippingVendor").multiselect("refresh");
                                }

                                var tmpOrderShippingVendorCollapseText = $("#OrderShippingVendor option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderShippingVendorCollapse = false;

                                for (var i = 0; i < tmpOrderShippingVendorCollapseText.length; i++) {
                                    if (tmpOrderShippingVendorCollapseText[i] != null && tmpOrderShippingVendorCollapseText[i] != "" && tmpOrderShippingVendorCollapseText[i].length > 0) {
                                        isShowOrderShippingVendorCollapse = true;
                                        $("#OrderShippingVendorCollapse").append("<span>" + tmpOrderShippingVendorCollapseText[i] + "</span>"); //
                                    }
                                }

                                if (isShowOrderShippingVendorCollapse) {
                                    $("#OrderShippingVendorCollapse").show();
                                }

                                $("#OrderShippingVendor").multiselect("refresh");
                                WorkOrderSelectedValues = tmpOrderShippingVendor;

                                for (var i = 0; i < tmpOrderCreated.length; i++) {
                                    $("#OrderCreatedBy").multiselect("widget").find(":checkbox[value='" + tmpOrderCreated[i] + "']").attr("checked", "checked");
                                    $("#OrderCreatedBy option[value='" + tmpOrderCreated[i] + "']").attr("selected", 1);
                                    $("#OrderCreatedBy").multiselect("refresh");
                                }

                                var tmpOrderCreatedByCollapseText = $("#OrderCreatedBy option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderCreatedByCollapse = false;

                                for (var i = 0; i < tmpOrderCreatedByCollapseText.length; i++) {
                                    if (tmpOrderCreatedByCollapseText[i] != null && tmpOrderCreatedByCollapseText[i] != "" && tmpOrderCreatedByCollapseText[i].length > 0) {
                                        isShowOrderCreatedByCollapse = true;
                                        $("#OrderCreatedByCollapse").append("<span>" + tmpOrderCreatedByCollapseText[i] + "</span>"); //
                                    }

                                }

                                if (isShowOrderCreatedByCollapse) {
                                    $("#OrderCreatedByCollapse").show();
                                }

                                $("#OrderCreatedBy").multiselect("refresh");
                                CreatedBySelectedValues = tmpOrderCreated;

                                for (var i = 0; i < tmpOrderUpdated.length; i++) {
                                    $("#OrderUpdatedBy").multiselect("widget").find(":checkbox[value='" + tmpOrderUpdated[i] + "']").attr("checked", "checked");
                                    $("#OrderUpdatedBy option[value='" + tmpOrderUpdated[i] + "']").attr("selected", 1);
                                    $("#OrderUpdatedBy").multiselect("refresh");
                                }

                                var tmpOrderUpdatedByCollapseText = $("#OrderUpdatedBy option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderUpdatedByCollapse = false;
                                for (var i = 0; i < tmpOrderUpdatedByCollapseText.length; i++) {
                                    if (tmpOrderUpdatedByCollapseText[i] != null && tmpOrderUpdatedByCollapseText[i] != "" && tmpOrderUpdatedByCollapseText[i].length > 0) {
                                        isShowOrderUpdatedByCollapse = true;
                                        $("#OrderUpdatedByCollapse").append("<span>" + tmpOrderUpdatedByCollapseText[i] + "</span>"); //
                                    }
                                }

                                if (isShowOrderUpdatedByCollapse) {
                                    $("#OrderUpdatedByCollapse").show();
                                }

                                $("#OrderUpdatedBy").multiselect("refresh");
                                UpdatedBySelectedValues = tmpOrderUpdated;

                                for (var i = 0; i < tmpChangeOrderSelectedValues.length; i++) {
                                    $("#ChangeOrder").multiselect("widget").find(":checkbox[value='" + tmpChangeOrderSelectedValues[i] + "']").attr("checked", "checked");
                                    $("#ChangeOrder option[value='" + tmpChangeOrderSelectedValues[i] + "']").attr("selected", 1);
                                    $("#ChangeOrder").multiselect("refresh");
                                }

                                var tmpChangeOrderCollapseText = $("#ChangeOrder option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowChangeOrderCollapse = false;
                                for (var i = 0; i < tmpChangeOrderCollapseText.length; i++) {
                                    if (tmpChangeOrderCollapseText[i] != null && tmpChangeOrderCollapseText[i] != "" && tmpChangeOrderCollapseText[i].length > 0) {
                                        isShowChangeOrderCollapse = true;
                                        $("#ChangeOrderCollapse").append("<span>" + tmpChangeOrderCollapseText[i] + "</span>"); //
                                    }
                                }

                                if (isShowChangeOrderCollapse) {
                                    $("#ChangeOrderCollapse").show();
                                }

                                $("#ChangeOrder").multiselect("refresh");
                                ChangeOrderSelectedValues = tmpChangeOrderSelectedValues;

                                for (var i = 0; i < tmpOrderUDF1.length; i++) {
                                    $("#OrderUDF1").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF1[i] + "']").attr("checked", "checked");
                                    $("#OrderUDF1 option[value='" + tmpOrderUDF1[i] + "']").attr("selected", 1);
                                    $("#OrderUDF1").multiselect("refresh");
                                }

                                var tmpOrderUDF1CollapseText = $("#OrderUDF1 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderUDF1Collapse = false;
                                for (var i = 0; i < tmpOrderUDF1CollapseText.length; i++) {
                                    if (tmpOrderUDF1CollapseText[i] != null && tmpOrderUDF1CollapseText[i] != "" && tmpOrderUDF1CollapseText[i].length > 0) {
                                        isShowOrderUDF1Collapse = true;
                                        $("#OrderUDF1Collapse").append("<span>" + tmpOrderUDF1CollapseText[i] + "</span>"); //
                                    }

                                }

                                if (isShowOrderUDF1Collapse) {
                                    $("#OrderUDF1Collapse").show();
                                }

                                $("#OrderUDF1").multiselect("refresh");
                                OrderUDF1NarrowValues = tmpOrderUDF1;

                                for (var i = 0; i < tmpOrderUDF2.length; i++) {
                                    $("#OrderUDF2").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF2[i] + "']").attr("checked", "checked");
                                    $("#OrderUDF2 option[value='" + tmpOrderUDF2[i] + "']").attr("selected", 1);
                                    $("#OrderUDF2").multiselect("refresh");
                                }

                                var tmpOrderUDF2CollapseText = $("#OrderUDF2 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderUDF2Collapse = false;
                                for (var i = 0; i < tmpOrderUDF2CollapseText.length; i++) {
                                    if (tmpOrderUDF2CollapseText[i] != null && tmpOrderUDF2CollapseText[i] != "" && tmpOrderUDF2CollapseText[i].length > 0) {
                                        isShowOrderUDF2Collapse = true;
                                        $("#OrderUDF2Collapse").append("<span>" + tmpOrderUDF2CollapseText[i] + "</span>"); //
                                    }

                                }

                                if (isShowOrderUDF2Collapse) {
                                    $("#OrderUDF2Collapse").show();
                                }

                                $("#OrderUDF2").multiselect("refresh");
                                OrderUDF2NarrowValues = tmpOrderUDF2;

                                for (var i = 0; i < tmpOrderUDF3.length; i++) {
                                    $("#OrderUDF3").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF3[i] + "']").attr("checked", "checked");
                                    $("#OrderUDF3 option[value='" + tmpOrderUDF3[i] + "']").attr("selected", 1);
                                    $("#OrderUDF3").multiselect("refresh");
                                }

                                var tmpOrderUDF3CollapseText = $("#OrderUDF3 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderUDF3Collapse = false;
                                for (var i = 0; i < tmpOrderUDF3CollapseText.length; i++) {
                                    if (tmpOrderUDF3CollapseText[i] != null && tmpOrderUDF3CollapseText[i] != "" && tmpOrderUDF3CollapseText[i].length > 0) {
                                        isShowOrderUDF3Collapse = true;
                                        $("#OrderUDF3Collapse").append("<span>" + tmpOrderUDF3CollapseText[i] + "</span>"); //
                                    }

                                }

                                if (isShowOrderUDF3Collapse) {
                                    $("#OrderUDF3Collapse").show();
                                }

                                $("#OrderUDF3").multiselect("refresh");
                                OrderUDF3NarrowValues = tmpOrderUDF3;

                                for (var i = 0; i < tmpOrderUDF4.length; i++) {
                                    $("#OrderUDF4").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF4[i] + "']").attr("checked", "checked");
                                    $("#OrderUDF4 option[value='" + tmpOrderUDF4[i] + "']").attr("selected", 1);
                                    $("#OrderUDF4").multiselect("refresh");
                                }

                                var tmpOrderUDF4CollapseText = $("#OrderUDF4 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderUDF4Collapse = false;
                                for (var i = 0; i < tmpOrderUDF4CollapseText.length; i++) {
                                    if (tmpOrderUDF4CollapseText[i] != null && tmpOrderUDF4CollapseText[i] != "" && tmpOrderUDF4CollapseText[i].length > 0) {
                                        isShowOrderUDF4Collapse = true;
                                        $("#OrderUDF4Collapse").append("<span>" + tmpOrderUDF4CollapseText[i] + "</span>"); //v
                                    }

                                }

                                if (isShowOrderUDF4Collapse) {
                                    $("#OrderUDF4Collapse").show();
                                }

                                $("#OrderUDF4").multiselect("refresh");
                                OrderUDF4NarrowValues = tmpOrderUDF4;

                                for (var i = 0; i < tmpOrderUDF5.length; i++) {
                                    $("#OrderUDF5").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF5[i] + "']").attr("checked", "checked");
                                    $("#OrderUDF5 option[value='" + tmpOrderUDF5[i] + "']").attr("selected", 1);
                                    $("#OrderUDF5").multiselect("refresh");
                                }

                                var tmpOrderUDF5CollapseText = $("#OrderUDF5 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                var isShowOrderUDF5Collapse = false;
                                for (var i = 0; i < tmpOrderUDF5CollapseText.length; i++) {
                                    if (tmpOrderUDF5CollapseText[i] != null && tmpOrderUDF5CollapseText[i] != "" && tmpOrderUDF5CollapseText[i].length > 0) {
                                        isShowOrderUDF5Collapse = true;
                                        $("#OrderUDF5Collapse").append("<span>" + tmpOrderUDF5CollapseText[i] + "</span>"); //
                                    }

                                }

                                if (isShowOrderUDF5Collapse) {
                                    $("#OrderUDF5Collapse").show();
                                }

                                $("#OrderUDF5").multiselect("refresh");
                                OrderUDF5NarrowValues = tmpOrderUDF5;
                                $("#OrdDateCFrom").val(tmpOrderDateCFrom);
                                $("#OrdDateCTo").val(tmpOrderDateCTo);
                                $("#OrdDateUFrom").val(tmpOrderDateUFrom);
                                $("#OrdDateUTo").val(tmpOrderDateUTo);
                            }, 5000);

                        }
                    }
                    else {
                        $("#spanGlobalMessage").removeClass('succesIcon errorIcon').addClass('WarningIcon');
                        $("#spanGlobalMessage").html(response.Message);
                    }
                    showNotificationDialog();
                    $('#DivLoading').hide();
                },
                error: function (response) {
                    $('#DivLoading').hide();
                },
                complete: function () {
                    if (oTable.fnGetData().length == 0) {
                        oTable.fnDraw();
                    }
                }
            });
            $.modal.impl.close();
            IsDeletePopupOpen = false;
        }


    });

    $("#btnModelYes").click(function () {
        //var anSelected = fnGetSelected(oTable);
        var anSelected = (deleteURL.toLowerCase() == "/assets/deletewrittenofftoolrecordsbytoolguids")
            ? fnGetSelected(writtenOffToolTable)
            : ((deleteURL.toLowerCase() == "/assets/deletewrittenofftoolrecordsbyids")
                ? fnGetSelected(writtenOffToolDetailTable)
                : fnGetSelected(oTable));

        var stringIDs = "";
        var ReqCount = 0;
        var totalDeletedQtyForWrittenOffTool = 0;
        var toolGuidForWrittenOffTool;

        if (gblActionName.toLowerCase() == 'itemmasterlist') {
            deleteURL = "/Inventory/DeleteRecords";
        }
        else if (gblActionName.toLowerCase() == 'bomitemlist') {
            deleteURL = "/BOM/DeleteRecords";
        }
        else if (gblActionName.toLowerCase() == 'toolassetorderlist') {
            deleteURL = "/ToolAssetOrder/DeleteOrderMasterRecords";
        }
        else if (gblActionName.toLowerCase() == 'maintenance') {
            deleteURL = "/Assets/DeleteToolMaintenanceRecords";
        }
        else if (gblActionName.toLowerCase() == 'notifications') {
            deleteURL = "/Notification/DeleteNotification";
        }
        for (var i = 0; i <= anSelected.length - 1; i++) {
            if (gblActionName.toLowerCase() === "quicklist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#QuickListGUID')[0].value + ",";
                ReqCount = ReqCount + 1;
            }
            else if (deleteURL.toLowerCase() == "/master/undeletecompanyrecords") {
                var aData = oTable.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + ",";
            }
            else if (gblActionName.toLowerCase() === "workorderlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#WorkOrderGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist" && deleteURL.toLowerCase() == "/assets/deletewrittenofftoolrecordsbytoolguids") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnWOTTooGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist" && deleteURL.toLowerCase() == "/assets/deletewrittenofftoolrecordsbyids") {
                var aData = writtenOffToolDetailTable.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + ",";
                totalDeletedQtyForWrittenOffTool = totalDeletedQtyForWrittenOffTool + parseFloat(FormatedCostQtyValues((aData.Quantity), 2));
                toolGuidForWrittenOffTool = aData.ToolGUID;
            }
            else if ((gblActionName.toLowerCase() === "toollist" || gblActionName.toLowerCase() == 'kittoollist') && deleteURL.indexOf("DeleteWrittenOffToolRecordsByToolGuids") <= -1) {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnToolPKID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == 'requisitionlist') {
                var SpanReqStatus = $(anSelected[i]).find('#spnRequisitionStatus').text();
                var NumberofItemsrequisitioned = $(anSelected[i]).find('#spnNumberofItemsrequisitioned').text();
                if (SpanReqStatus == "Unsubmitted" || SpanReqStatus == "Submitted" || SpanReqStatus == "Closed" || NumberofItemsrequisitioned == "0" || NumberofItemsrequisitioned == 0) {
                    //stringIDs = stringIDs + anSelected[i].id + ",";
                    stringIDs = stringIDs + $(anSelected[i]).find('#RequisitionGUID')[0].value + ",";
                    ReqCount = ReqCount + 1;
                }
            }
            else if (gblActionName.toLowerCase() == "orderlist") {
                var IsDeleteable = $(anSelected[i]).find('#spnIsableToDelete').text();
                if (IsDeleteable == 'true') {
                    var orderID = $(anSelected[i]).find('#spnOrderMasterID').text();
                    stringIDs = stringIDs + orderID + ",";
                    ReqCount = ReqCount + 1;
                }
            }
            else if (gblActionName.toLowerCase() == "toolassetorderlist") {
                var IsDeleteable = $(anSelected[i]).find('#spnIsableToDelete').text();
                if (IsDeleteable == 'true') {
                    var orderID = $(anSelected[i]).find('#spnOrderMasterID').text();
                    stringIDs = stringIDs + orderID + ",";
                    ReqCount = ReqCount + 1;
                }
            }
            else if (gblActionName.toLowerCase() == "transferlist") {
                var rawData = oTable.fnGetData(anSelected[i]);
                if (rawData != null && typeof (rawData) != "undefined" && rawData.IsAbleToDelete && rawData.GUID != null && typeof (rawData.GUID) != "undefined"
                    && rawData.GUID.length > 0) {
                    stringIDs += rawData.GUID + ",";
                    ReqCount = ReqCount + 1;
                }
            }
            else if (gblActionName.toLowerCase() == "materialstaginglist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID').val() + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() == "cartitemlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID').val() + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() == "rolelist") {
                stringIDs = stringIDs + $(anSelected[i]).find("input[name='hdnConcatedId']").val() + ",";
                ReqCount = ReqCount + 1;
            }
            else if (deleteURL.toLowerCase() == "/inventory/deletematerialstagingrecords") {
                stringIDs = stringIDs + $(anSelected[i]).find("input[type='hidden'][name='hdnUniqueID']").val() + ",";
            }
            else if (deleteURL.toLowerCase() == "/pull/deletepullmasterrecords") {
                var aPos = oTable.fnGetPosition($(anSelected[i])[0]);
                var aData = oTable.fnGetData(aPos);
                if (!(!isNaN(parseFloat(aData.ConsignedQuantity)) && parseFloat(aData.ConsignedQuantity) > 0 && aData.Billing == 'Yes')) {
                    stringIDs = stringIDs + $(anSelected[i]).find('#spnPullMasterID').text() + ",";
                    ReqCount = ReqCount + 1;
                }
            }
            else if (deleteURL.toLowerCase() == "/inventory/deleterecords") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (deleteURL.toLowerCase() == "/bom/deleterecords") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (deleteURL.toLowerCase() == "/assets/deletemappingrecords") {
                stringIDs = stringIDs + $(anSelected[i]).find('#MappingGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == 'permissiontemplateslist') {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnid')[0].value + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() == "inventorycountlist") {

                var aData = oTable.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + ",";
                //                alert(stringIDs);
                //                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID').val() + ",";
                ReqCount = ReqCount + 1; ;
            }
            else if (gblActionName.toLowerCase() == "companylist") { // deleteURL.toLowerCase() == "/master/deletecompanymasterrecords"
                deleteURL = "/master/deletecompanymasterrecords";
                var aData = oTable.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + "_" + aData.EnterPriseId + ",";
            }
            else if (deleteURL.toLowerCase() == "/master/deleteroomrecords" || deleteURL.toLowerCase() == "/master/softdeleteroomrecords" || deleteURL.toLowerCase() == "/master/undeleteroomrecords") {
                var aData = oTable.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + "_" + aData.EnterpriseId + "_" + aData.CompanyID + ",";
            }
            else if (gblActionName.toLowerCase() == 'dbscripttemplates') {
                if ($(anSelected[i]).find('#hdnid')[0].value != "1" && $(anSelected[i]).find('#hdnid')[0].value != "2" &&
                    $(anSelected[i]).find('#hdnid')[0].value != "3" && $(anSelected[i]).find('#hdnid')[0].value != "4") {
                    stringIDs = stringIDs + $(anSelected[i]).find('#hdnid')[0].value + ",";
                    ReqCount = ReqCount + 1;
                }
            }
            else if (gblActionName.toLowerCase() == 'maintenance') {
                var aData = oTable.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() == "pullpomasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnID').val() + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() == 'inventoryclassificationlist') {
                stringIDs = stringIDs + $(anSelected[i]).find("span#RangeStartvalue").html() + ",";
            }
            else if (gblActionName.toLowerCase() == 'bomitemlist') {
                stringIDs = stringIDs + anSelected[i].id + ",";
            }
            else if (gblActionName.toLowerCase() == 'catalogreportlist') {
                stringIDs = stringIDs + $(anSelected[i]).find("input#hdnId").val() + ",";
            }
            else if (gblActionName.toLowerCase() == 'userlist') {
                var aData = oTable.fnGetData(anSelected[i]);
                stringIDs = stringIDs + aData.ID + "_" + aData.EnterpriseId + ",";
            }
            else if (gblActionName.toLowerCase() == 'enterpriseqllist') {
                stringIDs = stringIDs + $(anSelected[i]).find("#hdnGuid").val() + ",";
            }
            else if (gblActionName.toLowerCase() == "quotelist") {
                var rawData = oTable.fnGetData(anSelected[i]);

                if (rawData != null && typeof (rawData) != "undefined" && rawData.IsAbleToDelete != null && typeof (rawData.IsAbleToDelete) != "undefined"
                    && rawData.IsAbleToDelete == true)
                {
                    stringIDs += rawData.ID + ",";
                    ReqCount = ReqCount + 1;
                }
            }
            else if (gblActionName.toLowerCase() == "sftplist")
            {
                var rawData = oTable.fnGetData(anSelected[i]);

                if (rawData != null && typeof (rawData) != "undefined" && rawData.ID != null && typeof (rawData.ID) != "undefined")
                {
                    stringIDs += rawData.ID + ",";
                    ReqCount = ReqCount + 1;
                }
            }
            else {
                stringIDs = stringIDs + anSelected[i].id + ",";
                ReqCount = ReqCount + 1;
            }
        }

        if (anSelected.length !== 0 && stringIDs != null && stringIDs.length > 0) {
            $('#DivLoading').show();
            $.ajax({
                url: deleteURL,
                type: "POST",
                data: { ids: stringIDs },
                timeout: 0,
                success: function (response) {
                    if (gblActionName != null && gblActionName.toLowerCase() == "toollist" && deleteURL.toLowerCase() == "/assets/deletewrittenofftoolrecordsbyids") {
                        writtenOffToolTable.fnDraw();
                    }
                    else if (typeof (oTable != 'undefined')) {
                        oTable.fnStandingRedraw();
                    }

                    if (response.Status == "ok" || response == "ok") {

                        IsNarrowSearchRefreshRequired = true;
                        for (var i = 0; i <= anSelected.length - 1; i++) {
                            if (deleteURL.toLowerCase() == "/pull/deletepullmasterrecords") {
                                var aPos = oTable.fnGetPosition($(anSelected[i])[0]);
                                var aData = oTable.fnGetData(aPos);
                                if (!(!isNaN(parseFloat(aData.ConsignedQuantity)) && parseFloat(aData.ConsignedQuantity) > 0 && aData.Billing == 'Yes')) {
                                    oTable.fnDeleteRow(anSelected[i]);
                                }
                            }
                            //else if (gblActionName.toLowerCase() == "toollist" && deleteURL.toLowerCase() == "/assets/deletewrittenofftoolrecordsbyids") {
                            //    //writtenOffToolDetailTable.fnDeleteRow(anSelected[i]);
                            //    //writtenOffToolDetailTable.fnDraw();
                            //}
                            //else {
                            //    //oTable.fnDeleteRow(anSelected[i]);
                            //}
                        }

                        if (anSelected.length > 0) {
                            if (gblActionName.toLowerCase() == 'pullmasterlist' || gblActionName.toLowerCase() == 'requisitionlist' || gblActionName.toLowerCase() == 'orderlist' || gblActionName.toLowerCase() == 'transferlist' || gblActionName.toLowerCase() == 'materialstaginglist' || gblActionName.toLowerCase() == 'cartitemlist' || gblActionName.toLowerCase() == 'quicklist' || gblActionName.toLowerCase() == 'inventorycountlist' || gblActionName.toLowerCase() == 'dbscripttemplates'
                                || gblActionName.toLowerCase() == "permissiontemplateslist" || gblActionName.toLowerCase() == "barcodemasterlist" || gblActionName.toLowerCase() == "pullpomasterlist" || gblActionName.toLowerCase() == "quotelist" ) {
                                $("#spanGlobalMessage").removeClass('WarningIcon errorIcon').addClass('succesIcon');
                                $("#spanGlobalMessage").html(MsgDeleteSuccessfully.replace("{0}", ReqCount));
                            }
                            else {
                                $("#spanGlobalMessage").html(response.Message);
                            }

                            ShowHidHistoryTab();
                            ShowHideChangeLog();
                            if (gblActionName.toLowerCase() == 'requisitionlist') {
                                SetTabswithCount('RequisitionMaster', 'RequisitionStatus');
                                UpdateTopMenuReqCount();
                            }
                            else if (gblActionName.toLowerCase() == 'itemmasterlist') {
                                SetItemCountInMenu();
                                if (typeof (CallNarrowfunctions) != "undefined") {
                                    CallNarrowfunctions();
                                }
                            }
                            else if (gblActionName.toLowerCase() === "quicklist") {
                                fillQLNarrowSearchDiv();
                            }
                            else if (gblActionName.toLowerCase() === "orderlist") {
                                IsRetainNarrow = true;
                                //_NarrowSearchSave.saveNarrowSearch('NarroSearchSaveOrderMaster', 'OrderMaster');
                                var tmpOrderCreated = CreatedBySelectedValues;
                                var tmpOrderUpdated = UpdatedBySelectedValues;
                                var tmpOrderSupplier = SupplierBySelectedValues;
                                var tmpOrderStatus = StatusBySelectedValues;
                                var tmpOrderRequiredDate = RequiredDateSelectedValues;
                                var tmpOrderShippingVendor = WorkOrderSelectedValues;
                                var tmpChangeOrderSelectedValues = ChangeOrderSelectedValues;
                                var tmpOrderUDF1 = OrderUDF1NarrowValues;
                                var tmpOrderUDF2 = OrderUDF2NarrowValues;
                                var tmpOrderUDF3 = OrderUDF3NarrowValues;
                                var tmpOrderUDF4 = OrderUDF4NarrowValues;
                                var tmpOrderUDF5 = OrderUDF5NarrowValues;

                                var tmpOrderDateCFrom = $("#OrdDateCFrom").val();//getTxtDateVal('OrdDateCFrom');
                                var tmpOrderDateCTo = $("#OrdDateCTo").val();//getTxtDateVal('OrdDateCTo');
                                var tmpOrderDateUFrom = $("#OrdDateUFrom").val();//getTxtDateVal('OrdDateUFrom');
                                var tmpOrderDateUTo = $("#OrdDateUTo").val(); //getTxtDateVal('OrdDateUTo');

                                fillOrderNarrowSearchDiv();
                                SetReplenishRedCount();

                                setTimeout(function () {
                                    var optionSeperator = ")" + GuidSeparator;
                                    for (var i = 0; i < tmpOrderSupplier.length; i++) {
                                        $("#OrderSupplier").multiselect("widget").find(":checkbox[value='" + tmpOrderSupplier[i] + "']").attr("checked", "checked");
                                        $("#OrderSupplier option[value='" + tmpOrderSupplier[i] + "']").attr("selected", 1);
                                        $("#OrderSupplier").multiselect("refresh");
                                    }

                                    var tmpOrderSupplierCollapseText = $("#OrderSupplier option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderSupplierCollapse = false;

                                    for (var i = 0; i < tmpOrderSupplierCollapseText.length; i++)
                                    {
                                        if (tmpOrderSupplierCollapseText[i] != null && tmpOrderSupplierCollapseText[i] != "" && tmpOrderSupplierCollapseText[i].length > 0)
                                        {
                                            isShowOrderSupplierCollapse = true;
                                            $("#OrderSupplierCollapse").append("<span>" + tmpOrderSupplierCollapseText[i] + "</span>");
                                        }
                                    }

                                    if (isShowOrderSupplierCollapse)
                                    {
                                        $("#OrderSupplierCollapse").show();
                                    }

                                    $("#OrderSupplier").multiselect("refresh");
                                    SupplierBySelectedValues = tmpOrderSupplier;

                                    for (var i = 0; i < tmpOrderStatus.length; i++) {
                                        $("#OrderStatus").multiselect("widget").find(":checkbox[value='" + tmpOrderStatus[i] + "']").attr("checked", "checked");
                                        $("#OrderStatus option[value='" + tmpOrderStatus[i] + "']").attr("selected", 1);
                                        $("#OrderStatus").multiselect("refresh");
                                    }

                                    var tmpOrderStatusCollapseText = $("#OrderStatus option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderStatusCollapse = false;
                                    for (var i = 0; i < tmpOrderStatusCollapseText.length; i++) {
                                        if (tmpOrderStatusCollapseText[i] != null && tmpOrderStatusCollapseText[i] != "" && tmpOrderStatusCollapseText[i].length > 0) {
                                            isShowOrderStatusCollapse = true;
                                            $("#OrderStatusCollapse").append("<span>" + tmpOrderStatusCollapseText[i] + "</span>");
                                        }
                                    }

                                    if (isShowOrderStatusCollapse) {
                                        $("#OrderStatusCollapse").show();
                                    }

                                    $("#OrderStatus").multiselect("refresh");
                                    StatusBySelectedValues = tmpOrderStatus;

                                    for (var i = 0; i < tmpOrderRequiredDate.length; i++) {
                                        $("#OrderRequiredDate").multiselect("widget").find(":checkbox[value='" + tmpOrderRequiredDate[i] + "']").attr("checked", "checked");
                                        $("#OrderRequiredDate option[value='" + tmpOrderRequiredDate[i] + "']").attr("selected", 1);
                                        $("#OrderRequiredDate").multiselect("refresh");
                                    }

                                    var tmpOrderRequiredDateCollapseText = $("#OrderRequiredDate option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderRequiredDateCollapse = false;
                                    for (var i = 0; i < tmpOrderRequiredDateCollapseText.length; i++) {
                                        if (tmpOrderRequiredDateCollapseText[i] != null && tmpOrderRequiredDateCollapseText[i] != "" && tmpOrderRequiredDateCollapseText[i].length > 0) {
                                            isShowOrderRequiredDateCollapse = true;
                                            $("#OrderRequiredDateCollapse").append("<span>" + tmpOrderRequiredDateCollapseText[i] + "</span>"); //
                                        }
                                    }

                                    if (isShowOrderRequiredDateCollapse) {
                                        $("#OrderRequiredDateCollapse").show();
                                    }

                                    $("#OrderRequiredDate").multiselect("refresh");
                                    RequiredDateSelectedValues = tmpOrderRequiredDate;

                                    for (var i = 0; i < tmpOrderShippingVendor.length; i++) {
                                        $("#OrderShippingVendor").multiselect("widget").find(":checkbox[value='" + tmpOrderShippingVendor[i] + "']").attr("checked", "checked");
                                        $("#OrderShippingVendor option[value='" + tmpOrderShippingVendor[i] + "']").attr("selected", 1);
                                        $("#OrderShippingVendor").multiselect("refresh");
                                    }

                                    var tmpOrderShippingVendorCollapseText = $("#OrderShippingVendor option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderShippingVendorCollapse = false;

                                    for (var i = 0; i < tmpOrderShippingVendorCollapseText.length; i++) {
                                        if (tmpOrderShippingVendorCollapseText[i] != null && tmpOrderShippingVendorCollapseText[i] != "" && tmpOrderShippingVendorCollapseText[i].length > 0) {
                                            isShowOrderShippingVendorCollapse = true;
                                            $("#OrderShippingVendorCollapse").append("<span>" + tmpOrderShippingVendorCollapseText[i] + "</span>"); //
                                        }
                                    }

                                    if (isShowOrderShippingVendorCollapse) {
                                        $("#OrderShippingVendorCollapse").show();
                                    }

                                    $("#OrderShippingVendor").multiselect("refresh");
                                    WorkOrderSelectedValues = tmpOrderShippingVendor;

                                    for (var i = 0; i < tmpOrderCreated.length; i++) {
                                        $("#OrderCreatedBy").multiselect("widget").find(":checkbox[value='" + tmpOrderCreated[i] + "']").attr("checked", "checked");
                                        $("#OrderCreatedBy option[value='" + tmpOrderCreated[i] + "']").attr("selected", 1);
                                        $("#OrderCreatedBy").multiselect("refresh");
                                    }

                                    var tmpOrderCreatedByCollapseText = $("#OrderCreatedBy option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderCreatedByCollapse = false;

                                    for (var i = 0; i < tmpOrderCreatedByCollapseText.length; i++) {
                                        if (tmpOrderCreatedByCollapseText[i] != null && tmpOrderCreatedByCollapseText[i] != "" && tmpOrderCreatedByCollapseText[i].length > 0) {
                                            isShowOrderCreatedByCollapse = true;
                                            $("#OrderCreatedByCollapse").append("<span>" + tmpOrderCreatedByCollapseText[i] + "</span>"); //
                                        }

                                    }

                                    if (isShowOrderCreatedByCollapse) {
                                        $("#OrderCreatedByCollapse").show();
                                    }

                                    $("#OrderCreatedBy").multiselect("refresh");
                                    CreatedBySelectedValues = tmpOrderCreated;

                                    for (var i = 0; i < tmpOrderUpdated.length; i++) {
                                        $("#OrderUpdatedBy").multiselect("widget").find(":checkbox[value='" + tmpOrderUpdated[i] + "']").attr("checked", "checked");
                                        $("#OrderUpdatedBy option[value='" + tmpOrderUpdated[i] + "']").attr("selected", 1);
                                        $("#OrderUpdatedBy").multiselect("refresh");
                                    }

                                    var tmpOrderUpdatedByCollapseText = $("#OrderUpdatedBy option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderUpdatedByCollapse = false;
                                    for (var i = 0; i < tmpOrderUpdatedByCollapseText.length; i++) {
                                        if (tmpOrderUpdatedByCollapseText[i] != null && tmpOrderUpdatedByCollapseText[i] != "" && tmpOrderUpdatedByCollapseText[i].length > 0) {
                                            isShowOrderUpdatedByCollapse = true;
                                            $("#OrderUpdatedByCollapse").append("<span>" + tmpOrderUpdatedByCollapseText[i] + "</span>"); //
                                        }
                                    }

                                    if (isShowOrderUpdatedByCollapse) {
                                        $("#OrderUpdatedByCollapse").show();
                                    }

                                    $("#OrderUpdatedBy").multiselect("refresh");
                                    UpdatedBySelectedValues = tmpOrderUpdated;

                                    for (var i = 0; i < tmpChangeOrderSelectedValues.length; i++) {
                                        $("#ChangeOrder").multiselect("widget").find(":checkbox[value='" + tmpChangeOrderSelectedValues[i] + "']").attr("checked", "checked");
                                        $("#ChangeOrder option[value='" + tmpChangeOrderSelectedValues[i] + "']").attr("selected", 1);
                                        $("#ChangeOrder").multiselect("refresh");
                                    }

                                    var tmpChangeOrderCollapseText = $("#ChangeOrder option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowChangeOrderCollapse = false;
                                    for (var i = 0; i < tmpChangeOrderCollapseText.length; i++) {
                                        if (tmpChangeOrderCollapseText[i] != null && tmpChangeOrderCollapseText[i] != "" && tmpChangeOrderCollapseText[i].length > 0) {
                                            isShowChangeOrderCollapse = true;
                                            $("#ChangeOrderCollapse").append("<span>" + tmpChangeOrderCollapseText[i] + "</span>"); //
                                        }
                                    }

                                    if (isShowChangeOrderCollapse) {
                                        $("#ChangeOrderCollapse").show();
                                    }

                                    $("#ChangeOrder").multiselect("refresh");
                                    ChangeOrderSelectedValues = tmpChangeOrderSelectedValues;

                                    for (var i = 0; i < tmpOrderUDF1.length; i++) {
                                        $("#OrderUDF1").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF1[i] + "']").attr("checked", "checked");
                                        $("#OrderUDF1 option[value='" + tmpOrderUDF1[i] + "']").attr("selected", 1);
                                        $("#OrderUDF1").multiselect("refresh");
                                    }

                                    var tmpOrderUDF1CollapseText = $("#OrderUDF1 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderUDF1Collapse = false;
                                    for (var i = 0; i < tmpOrderUDF1CollapseText.length; i++) {
                                        if (tmpOrderUDF1CollapseText[i] != null && tmpOrderUDF1CollapseText[i] != "" && tmpOrderUDF1CollapseText[i].length > 0) {
                                            isShowOrderUDF1Collapse = true;
                                            $("#OrderUDF1Collapse").append("<span>" + tmpOrderUDF1CollapseText[i] + "</span>"); //
                                        }

                                    }

                                    if (isShowOrderUDF1Collapse) {
                                        $("#OrderUDF1Collapse").show();
                                    }

                                    $("#OrderUDF1").multiselect("refresh");
                                    OrderUDF1NarrowValues = tmpOrderUDF1;

                                    for (var i = 0; i < tmpOrderUDF2.length; i++) {
                                        $("#OrderUDF2").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF2[i] + "']").attr("checked", "checked");
                                        $("#OrderUDF2 option[value='" + tmpOrderUDF2[i] + "']").attr("selected", 1);
                                        $("#OrderUDF2").multiselect("refresh");
                                    }

                                    var tmpOrderUDF2CollapseText = $("#OrderUDF2 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderUDF2Collapse = false;
                                    for (var i = 0; i < tmpOrderUDF2CollapseText.length; i++) {
                                        if (tmpOrderUDF2CollapseText[i] != null && tmpOrderUDF2CollapseText[i] != "" && tmpOrderUDF2CollapseText[i].length > 0) {
                                            isShowOrderUDF2Collapse = true;
                                            $("#OrderUDF2Collapse").append("<span>" + tmpOrderUDF2CollapseText[i] + "</span>"); //
                                        }

                                    }

                                    if (isShowOrderUDF2Collapse) {
                                        $("#OrderUDF2Collapse").show();
                                    }

                                    $("#OrderUDF2").multiselect("refresh");
                                    OrderUDF2NarrowValues = tmpOrderUDF2;

                                    for (var i = 0; i < tmpOrderUDF3.length; i++) {
                                        $("#OrderUDF3").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF3[i] + "']").attr("checked", "checked");
                                        $("#OrderUDF3 option[value='" + tmpOrderUDF3[i] + "']").attr("selected", 1);
                                        $("#OrderUDF3").multiselect("refresh");
                                    }

                                    var tmpOrderUDF3CollapseText = $("#OrderUDF3 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderUDF3Collapse = false;
                                    for (var i = 0; i < tmpOrderUDF3CollapseText.length; i++) {
                                        if (tmpOrderUDF3CollapseText[i] != null && tmpOrderUDF3CollapseText[i] != "" && tmpOrderUDF3CollapseText[i].length > 0) {
                                            isShowOrderUDF3Collapse = true;
                                            $("#OrderUDF3Collapse").append("<span>" + tmpOrderUDF3CollapseText[i] + "</span>"); //
                                        }

                                    }

                                    if (isShowOrderUDF3Collapse) {
                                        $("#OrderUDF3Collapse").show();
                                    }

                                    $("#OrderUDF3").multiselect("refresh");
                                    OrderUDF3NarrowValues = tmpOrderUDF3;
                                    for (var i = 0; i < tmpOrderUDF4.length; i++) {
                                        $("#OrderUDF4").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF4[i] + "']").attr("checked", "checked");
                                        $("#OrderUDF4 option[value='" + tmpOrderUDF4[i] + "']").attr("selected", 1);
                                        $("#OrderUDF4").multiselect("refresh");
                                    }

                                    var tmpOrderUDF4CollapseText = $("#OrderUDF4 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderUDF4Collapse = false;
                                    for (var i = 0; i < tmpOrderUDF4CollapseText.length; i++) {
                                        if (tmpOrderUDF4CollapseText[i] != null && tmpOrderUDF4CollapseText[i] != "" && tmpOrderUDF4CollapseText[i].length > 0) {
                                            isShowOrderUDF4Collapse = true;
                                            $("#OrderUDF4Collapse").append("<span>" + tmpOrderUDF4CollapseText[i] + "</span>"); //v
                                        }

                                    }

                                    if (isShowOrderUDF4Collapse) {
                                        $("#OrderUDF4Collapse").show();
                                    }

                                    $("#OrderUDF4").multiselect("refresh");
                                    OrderUDF4NarrowValues = tmpOrderUDF4;

                                    for (var i = 0; i < tmpOrderUDF5.length; i++) {
                                        $("#OrderUDF5").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF5[i] + "']").attr("checked", "checked");
                                        $("#OrderUDF5 option[value='" + tmpOrderUDF5[i] + "']").attr("selected", 1);
                                        $("#OrderUDF5").multiselect("refresh");
                                    }

                                    var tmpOrderUDF5CollapseText = $("#OrderUDF5 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                                    var isShowOrderUDF5Collapse = false;
                                    for (var i = 0; i < tmpOrderUDF5CollapseText.length; i++) {
                                        if (tmpOrderUDF5CollapseText[i] != null && tmpOrderUDF5CollapseText[i] != "" && tmpOrderUDF5CollapseText[i].length > 0) {
                                            isShowOrderUDF5Collapse = true;
                                            $("#OrderUDF5Collapse").append("<span>" + tmpOrderUDF5CollapseText[i] + "</span>"); //
                                        }

                                    }

                                    if (isShowOrderUDF5Collapse) {
                                        $("#OrderUDF5Collapse").show();
                                    }

                                    $("#OrderUDF5").multiselect("refresh");
                                    OrderUDF5NarrowValues = tmpOrderUDF5;
                                    $("#OrdDateCFrom").val(tmpOrderDateCFrom);
                                    $("#OrdDateCTo").val(tmpOrderDateCTo);
                                    $("#OrdDateUFrom").val(tmpOrderDateUFrom);
                                    $("#OrdDateUTo").val(tmpOrderDateUTo);
                                }, 5000);

                            }
                            else if (gblActionName.toLowerCase() === "transferlist") {
                                fillTransferNarrowSearchDiv();
                            }

                            else if (gblActionName.toLowerCase() === "roomlist" || gblActionName.toLowerCase() === "companylist" || gblActionName.toLowerCase() === 'enterpriselist') {
                                window.location.reload();
                            }
                            else if (gblActionName.toLowerCase() == "toollist" && deleteURL.toLowerCase() == "/assets/deletewrittenofftoolrecordsbytoolguids") {
                                if (typeof (writtenOffToolTable != 'undefined')) {
                                    writtenOffToolTable.fnStandingRedraw();

                                    //writtenOffToolDetailTable.fnStandingRedraw();
                                }
                                //writtenOffToolTable.fnDraw();
                            }
                            else if (gblActionName.toLowerCase() == "toollist" && deleteURL.toLowerCase() == "/assets/deletewrittenofftoolrecordsbyids") {

                                if (typeof (writtenOffToolDetailTable != 'undefined')) {
                                    if (!isNaN(totalDeletedQtyForWrittenOffTool)) {
                                        var totalQuantityBeforeUpadting = parseFloat($("#spn" + toolGuidForWrittenOffTool).text());
                                        var totalQuantityAfterUpadting = parseFloat(totalQuantityBeforeUpadting) - totalDeletedQtyForWrittenOffTool;
                                        if (!isNaN(totalQuantityAfterUpadting)) {
                                            $("#spn" + toolGuidForWrittenOffTool).text(FormatedCostQtyValues((totalQuantityAfterUpadting), 2));
                                        }
                                    }
                                    //writtenOffToolDetailTable.fnStandingRedraw();
                                    //writtenOffToolTable.fnStandingRedraw();
                                }
                            }
                            else if (gblActionName.toLowerCase() == "schedulemapping" && deleteURL.toLowerCase() == "/assets/deletemappingrecords") {
                                RefreshNarrowSearch();
                            }
                        }
                        showNotificationDialog();
                    }
                    else if (response.Status == "notdelete" || response == "notdelete") {

                        if (gblActionName.toLowerCase() == 'transferlist') {

                            $("#spanGlobalMessage").html(MsgSubmittedUnsubmittedRestriction);
                            ShowHidHistoryTab();
                            ShowHideChangeLog();

                            if (gblActionName.toLowerCase() == 'toollist' || gblActionName.toLowerCase() == 'kittoollist') {
                                oTable.fnDraw();
                            }


                            showNotificationDialog();
                        }
                    }
                    else if (response.Status == "DefaultBinDelete") {
                        $("#spanGlobalMessage").html(response.Message);
                        ShowHidHistoryTab();
                        ShowHideChangeLog();
                        showNotificationDialog();
                    }
                    else {

                        if (response == '') {
                            $("#spanGlobalMessage").html(MsgErrorInProcess);
                        }
                        else {
                            if (gblActionName.toLowerCase() === "templateconfigurationlist") {
                                $("#spanGlobalMessage").html(response.Message);
                            }
                            else if (gblActionName.toLowerCase() === "barcodemasterlist" && response != '') { // rajn barcode
                                $("#spanGlobalMessage").html(response);
                                //showNotificationDialog();
                            }
                            else if (deleteURL.toLowerCase() == "/Master/UnDeleteUserRecords".toLowerCase()) {
                                $("#spanGlobalMessage").html(response.Message);
                            }
                            else if (deleteURL.toLowerCase() == "/Master/UnDeleteCompanyRecords".toLowerCase()) {
                                $("#spanGlobalMessage").html(response.Message);
                                window.location.reload();
                            }
                            else
                                $("#spanGlobalMessage").html(response.Message);
                        }

                        ShowHidHistoryTab();
                        ShowHideChangeLog();

                        if (gblActionName == 'ToolList' || gblActionName.toLowerCase() == 'kittoollist') {
                            oTable.fnDraw();
                        }


                        showNotificationDialog();
                    }
                    $('#DivLoading').hide();

                },
                error: function (response) {
                    $('#DivLoading').hide();
                    // through errror message
                },
                complete: function () {
                    if (oTable.fnGetData().length == 0) {
                        oTable.fnDraw();
                    }
                }
            });
            $.modal.impl.close();
            IsDeletePopupOpen = false;
        }
        else
        {
            if (gblActionName.toLowerCase() == "quotelist" && stringIDs != null && stringIDs.length < 1)
            {
                $.modal.impl.close();
                IsDeletePopupOpen = false;
                ShowNotificationMessage(msgSelectAtleaseOneQuoteRecord);
                //showNotificationDialog();
            }

        }

    });

    $('#PageNumber').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            $(".go").click();
            return false;
        }
    });

    $(".go").click(function () {
        if ($('#PageNumber').length) {
            var pval = $('#PageNumber').val();
            if (pval == "" || pval.match(/[^0-9]/)) {
                return;
            }
            if (pval == 0)
                return;
            oTable.fnPageChange(Number(pval - 1));
            $('#PageNumber').val('');
        }
    });

    //    $(".columnsetup").click(function () {
    //        $(".refreshBlock").toggle();
    //    });

    function fnGetSelected(oTableLocal) {
        if (oTableLocal != null && oTableLocal != undefined)
            return oTableLocal.$('tr.row_selected');
        else
            return null;
    }

    var NotAllowedCharCodes = [9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40];

    _Common.setGloblaSearch('global_filter', 'myDataTable', function (txtSearch) {
        fnFilterGlobal();
    },
        function (txtSearch, keycode) {
            fnFilterGlobalOnEnter(keycode);
        }
    );

    ////Apply filter
    ////$("#global_filter").keyup(fnFilterGlobal);
    //var timeoutsc1;
    //$(document).on('propertychange input', "#global_filter", function () {
    //    //SearchByBarcode(this);
    //    clearTimeout(timeoutsc1);
    //    var self = this;
    //    timeoutsc1 = setTimeout(function () {

    //        if (SearchPattern == 2 || SearchPattern == "2") {
    //            fnFilterGlobal();
    //        }
    //        else {
    //            //$('#global_filter').unbind("keypress");
    //            //$('#global_filter').keypress(function (event) {

    //            //    var keycode = (event.keyCode ? event.keyCode : event.which);
    //            //    //if (keycode == '13') {
    //            //    //    GoForSearch = true;
    //            //    //}
    //            //    setTimeout(function () { fnFilterGlobalOnEnter(keycode); }, 200);
    //            //    // event.stopPropagation();
    //            //});
    //            if ($("#global_filter").val().length == 0) {
    //                setTimeout(function () { fnFilterGlobalOnEnter(0); }, 200);
    //            }

    //        }

    //    }, 500);
    //});
    //if (SearchPattern == 2 || SearchPattern == "2") {
    //    //$("#global_filter").keypress(function (e) {
    //    //    if (e.which == 13 && $("#global_filter").val().length >= 2) {
    //    //        FilterDataFromGlobalFilter();
    //    //    }
    //    //});
    //}
    //else {
    //    //$("#global_filter").keypress(function (e) {
    //    $("#global_filter").off("keyup").on("keyup", function (e) {
    //        //fnFilterGlobalOnEnter(0);
    //        var keycode = e.keyCode || e.which;
    //        clearTimeout(timeoutsc1);
    //        timeoutsc1 = setTimeout(function () { fnFilterGlobalOnEnter(keycode); }, 500);
    //    });
    //}

    //$('#global_filter').bind('textchange', function () {
    //    clearTimeout(timeoutsc1);
    //    var self = this;
    //    timeoutsc1 = setTimeout(function () {
    //        fnFilterGlobal();
    //    }, 200);
    //});

    //Needneed
    //$(document).on('input', '#global_filter', function () {

    //    var searchtext = $("#global_filter").val().replace(/'/g, "''");

    //    // Need to add below code for Requisition Tab Filter 
    //    if (RequisitionTabFilter != '') {
    //        if (RequisitionTabFilter.indexOf("[####]") >= 0)
    //            searchtext = searchtext + RequisitionTabFilter;
    //        else
    //            searchtext = searchtext + "[####]" + RequisitionTabFilter;
    //    }
    //    $('#myDataTable').dataTable().fnFilter(searchtext, null, null, null);

    //    HideOtherTabs();
    //    return false;
    //});
    // comment for wi-1518 and added above code
    //$("#global_filter").keydown(function (e) {
    //    var code = (e.keyCode ? e.keyCode : e.which);

    //    if (code == 13) {

    //        var searchtext = $("#global_filter").val().replace(/'/g, "''");

    //        // Need to add below code for Requisition Tab Filter 
    //        if (RequisitionTabFilter != '') {
    //            if (RequisitionTabFilter.indexOf("[####]") >= 0)
    //                searchtext = searchtext + RequisitionTabFilter;
    //            else
    //                searchtext = searchtext + "[####]" + RequisitionTabFilter;
    //        }
    //        /////////////////////////////////////////////////////

    //        $('#myDataTable').dataTable().fnFilter(searchtext, null, null, null);

    //        HideOtherTabs();
    //        //TODO: for Barcode
    //        //            if (gblActionName === "ItemMasterList" || gblActionName === "KitList" || gblActionName === "ProjectList" || gblActionName === "QuickList" || gblActionName === "RequisitionList") {

    //        //                if ($('#myDataTable').dataTable().fnGetData().length === 1) {
    //        //                    $('#global_filter').val('');
    //        //                    $('#myDataTable tr').find('#aEditLink').click();
    //        //                }
    //        //            }
    //        //            else if (gblActionName === "MaterialStagingList") {
    //        //                if ($('#myDataTable').dataTable().fnGetData().length === 1) {
    //        //                    $('#myDataTable tr').find('.aEditLink').click();
    //        //                }
    //        //            }
    //        return false;
    //    }
    //});

    //TODO: for Barcode
    $("#btnBarcodeAddYes").click(function () {
        var newBarcodeText = '';
        newBarcodeText = $('#global_filter').val();
        var strModule = '';
        if (gblActionName.toLowerCase() === "itemmasterlist") {
            strModule = 'Item Master';
        }
        else if (gblActionName.toLowerCase() === "kitlist") {
            strModule = 'Kits';
        }
        else if (gblActionName.toLowerCase() === "orderlist") {
            newBarcodeText = $('#txtOrderFilter').val();
            strModule = 'Orders';
        }
        else if (gblActionName.toLowerCase() === "projectlist") {
            strModule = 'Project spent';
        }
        else if (gblActionName.toLowerCase() === "quicklist") {
            strModule = 'Quick List permission';
        }

        else if (gblActionName.toLowerCase() === "requisitionlist") {
            strModule = 'Requisitions';
        }
        else if (gblActionName.toLowerCase() === "materialstaginglist") {
            strModule = 'Material Staging';
        }
        else if (gblActionName.toLowerCase() === "quicklist") {
            strModule = 'Quick List permission';
        }
        else if (gblActionName.toLowerCase() === "assetlist") {
            strModule = 'Assets';
        }
        else if (gblActionName.toLowerCase() === "toollist") {
            strModule = 'Tool Master';
        }
        else if (gblActionName.toLowerCase() === "transferlist") {
            newBarcodeText = $('#txtTransferFilter').val();
            strModule = 'Transfer';
        }
        else if (gblActionName.toLowerCase() === "workorderlist") {
            strModule = 'Work Orders';
        }
        $.modal.impl.close();
        $("#divViewBarcodeModel").data({ "strModule": strModule, "barcodetext": newBarcodeText }).dialog('open');
    });


    //    $("#global_filter").keyup(function (e) {
    //        var code = (e.keyCode ? e.keyCode : e.which);
    //        var index = $.inArray(code, NotAllowedCharCodes);
    //        if (index >= 0) return false;
    //        if (code == 13) {
    //        }
    //        else {
    //            fnFilterGlobal();
    //        }
    //    });

    //    //Keydown event is required to handle ENTER KEY to work in IE
    //    $("#global_filter").keydown(function (e) {
    //        var code = (e.keyCode ? e.keyCode : e.which);
    //        if (code == 13) {
    //            var searchtext = $("#global_filter").val().replace(/'/g, "''");

    //            // Need to add below code for Requisition Tab Filter 
    //            if (RequisitionTabFilter != '') {
    //                if (RequisitionTabFilter.indexOf("[####]") >= 0)
    //                    searchtext = searchtext + RequisitionTabFilter;
    //                else
    //                    searchtext = searchtext + "[####]" + RequisitionTabFilter;
    //            }
    //            /////////////////////////////////////////////////////

    //            $('#myDataTable').dataTable().fnFilter(
    //                            searchtext,
    //                            null,
    //                            null,
    //                            null
    //                        );
    //            return false;
    //        }
    //    });

    //Clear Filter
    $(document).on("tap click touchstart", "#clear_global_filter", function () {
        if ($("#global_filter").val().length > 0) {
            $("#global_filter").val("");
            $("#global_filter").trigger("input");
        }
        return false;
    });
    //$("#clear_global_filter").click(function () {

    //});

    function funClearFilter() {
        //Check length first    
        if ($("#global_filter").val().length > 0) {
            $("#global_filter").val('');
            $('#myDataTable').dataTable().fnFilter(
                $("#global_filter").val(),
                null,
                null,
                null
            );
        }
        $("#global_filter").focus();
        return false;
    }


    $("#ddlGroupName").change(function () {
        //if ($(this).val() == "Location") {
        var optionList = '';

        $.ajax({
            'url': '/CatalogReport/GetSortByOptions',
            data: { OptionFor: $(this).val() },
            success: function (response) {
                $("#ddlSort").empty();
                var s = '';
                $.each(response.OptionData, function (i, val) {
                    s += '<option value="' + val.key + '">' + val.value + '</option>';
                });

                $("#ddlSort").append(s);
            },
            error: function (response) {
                // through errror message
            }
        });
        //}
    });

});

function ShowHidHistoryTab() {
    // To show or hide the History(change log) tab 
    var $tab5 = $(".tab5");
    if ($tab5.length <= 0) {
        return false;
    }
    var anSelectedRows = fnGetSelected(oTable);

    if (anSelectedRows != null && anSelectedRows != undefined) {
        if (anSelectedRows.length == 1)
            $tab5.show();
        else {
            if (IsShowHistory) {
                $tab5.show();
                IsShowHistory = false;
            }
            else {
                $tab5.hide();
            }
        }
    }
}

function ShowHideReceiveAllButton() {
    var anSelectedRows = fnGetSelected(oTable);
    var DisplayBtn = false;
    if (gblActionName.toLowerCase() === "receivelist") {
        $("#myDataTable").find("tbody tr.row_selected").each(function () {
            var aPos = oTable.fnGetPosition($(this)[0]);
            var aData = oTable.fnGetData(aPos);
            if (aData.IsCloseLineItem == "No") {
                DisplayBtn = true;
            }
        });
        if (DisplayBtn) {
            $('#btnReceiveALL').css('display', 'inline');
        }
        else {
            $('#btnReceiveALL').css('display', 'none');
        }
    }
}

function ShowHideAddLocationForCount() {
    if (typeof oTableItemModel !== 'undefined' && oTableItemModel !== undefined && oTableItemModel != null) {
        var anSelectedRows = fnGetSelected(oTableItemModel);
        if (anSelectedRows != null) {
            if (anSelectedRows.length == 1) {
                $('#divAddLocation').css('display', '');
            }
            else {
                $('#divAddLocation').css('display', 'none');
            }
        }
        else {
            $('#divAddLocation').css('display', 'none');
        }
    }
}

function SetInCompleteSession()
{
    $.ajax({
        url: SetIncompleteSessionURL,
        type: 'POST',
        async: true,
        //"dataType": "text",
        contentType: "application/json",
        success: function (response) {
        },
        "error": function (err) {
        }
    });
}

function SetNgNLFUrl() {
    var hash = window.location.hash;
    var url = "/" + gblControllerName.toLowerCase() + "/" + gblActionName.toLowerCase();

    if (typeof (hash) != "undefined" && hash != null && hash.length > 0) {
        url = url + hash;
    }
    //var urlWithoutQueryString = window.location.href.split('?')[0];// this can be used to get complete url without query string.

    $.ajax({
        url: GetNgNLFUrl,
        type: 'POST',
        async: true,
        "data": JSON.stringify({ 'MVCUrl': url }),
        contentType: "application/json",
        success: function (response) {
            if (typeof (response) != "undefined" && response != null && typeof (response.result) != "undefined" && response.result != null &&
                typeof (response.result.NgNLFUrl) != "undefined" && response.result.NgNLFUrl != null && response.result.NgNLFUrl.length > 0)
            {
                $("#lnkNgNLF").show();
                $("#lnkNgNLF").attr('href', response.result.NgNLFUrl);
            }
        },
        "error": function (err) {
        }
    });
}
//

$(window).load(function () {

    if (IsSetSessionCompleted !== undefined && IsSetSessionCompleted != null && IsSetSessionCompleted == "False") {
        setTimeout(function () {
            SetInCompleteSession();
        }, 5000);
    }
    //if (typeof (IsUserAllowedToAccessNgNLF) != "undefined" && IsUserAllowedToAccessNgNLF != null && IsUserAllowedToAccessNgNLF == "True")
    //{
    //    SetNgNLFUrl();
    //}

    if (parseInt($(document).find("table.dataTable").length) > parseInt(0)) {
        $.ajax({
            type: "GET",
            url: "/Master/GlobalUISettingsForGrid",
            data: { ID: 1, SearchType: 'user' },
            success: function (response) {
                RefreshTime = response;
                //setTimeout("RefreshGrid();", RefreshTime); // milliseconds

                var intervalinSec = parseInt(RefreshTime);
                if (intervalinSec != 0) {
                    if (intervalinSec == undefined || intervalinSec == '') {
                        intervalinSec = 10;
                    }
                    var intervalinMS = intervalinSec * 1000;
                    setInterval("RefreshGrid();", intervalinMS); // milliseconds            
                }
            }
        });
    }
});
function RefreshGrid() {
    var RefreshObject = $('#GridAutoRefresh');
    if (RefreshObject.is(':checked')) {
        //The code is written only for the list/history pages to get refreshed
        if ($("#tab5").hasClass('selected')) {
            _Common.selectedGridOperation = _Common.gridOperations.AutoRefresh;
            oTable.fnDraw();
        }
        else if ($("#tab2").hasClass('selected') && gblActionName.toLowerCase() == "orderlist") {
            _Common.selectedGridOperation = _Common.gridOperations.AutoRefresh;
            oTable.fnDraw();
        }
        else if ($("#tab3").hasClass('selected') && gblActionName.toLowerCase() == "orderlist") {
            _Common.selectedGridOperation = _Common.gridOperations.AutoRefresh;
            oTable.fnDraw();
        }
        else if ($("#tab4").hasClass('selected') && gblActionName.toLowerCase() == "orderlist") {
            _Common.selectedGridOperation = _Common.gridOperations.AutoRefresh;
            oTable.fnDraw();
        }
        else if ($("#tab7").hasClass('selected') && gblActionName.toLowerCase() == "orderlist") {
            _Common.selectedGridOperation = _Common.gridOperations.AutoRefresh;
            oTable.fnDraw();
        }
    }
    else
    {
        if ($("#tabWrittenOffTool").hasClass("selected") && $('#CtabWrittenOffTool #GridAutoRefresh').is(':checked')) {
            _Common.selectedGridOperation = _Common.gridOperations.AutoRefresh;
            writtenOffToolTable.fnDraw();
        }
    }
}


jQuery.fn.dataTableExt.oSort['string-case-asc'] = function (x, y) {
    return ((x < y) ? -1 : ((x > y) ? 1 : 0));
};

jQuery.fn.dataTableExt.oSort['string-case-desc'] = function (x, y) {
    return ((x < y) ? 1 : ((x > y) ? -1 : 0));
};


jQuery.fn.highlight = function (pat) {
    function innerHighlight(node, pat) {
        var skip = 0;
        if (node.nodeType == 3) {
            var pos = node.data.toUpperCase().indexOf(pat);
            if (pos >= 0) {
                var spannode = document.createElement('span');
                spannode.className = 'highlight';
                var middlebit = node.splitText(pos);
                var endbit = middlebit.splitText(pat.length);
                var middleclone = middlebit.cloneNode(true);
                spannode.appendChild(middleclone);
                middlebit.parentNode.replaceChild(spannode, middlebit);
                skip = 1;
            }
        }
        else if (node.nodeType == 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {
            for (var i = 0; i < node.childNodes.length; ++i) {
                i += innerHighlight(node.childNodes[i], pat);
            }
        }
        return skip;
    }
    return this.each(function ()
    {
        if (typeof (pat) != "undefined" && pat != null)
        {
            innerHighlight(this, pat.toUpperCase());
        }
    });
};
function newNormalize(node) {
    for (var i = 0, children = node.childNodes, nodeCount = children.length; i < nodeCount; i++) {
        var child = children[i];
        if (child.nodeType == 1) {
            newNormalize(child);
            continue;
        }
        if (child.nodeType != 3) { continue; }
        var next = child.nextSibling;
        if (next == null || next.nodeType != 3) { continue; }
        var combined_text = child.nodeValue + next.nodeValue;
        new_node = node.ownerDocument.createTextNode(combined_text);
        node.insertBefore(new_node, child);
        node.removeChild(child);
        node.removeChild(next);
        i--;
        nodeCount--;
    }
}

jQuery.fn.removeHighlight = function () {
    return this.find("span.highlight").each(function () {
        var thisParent = this.parentNode;
        thisParent.replaceChild(this.firstChild, this);
        newNormalize(thisParent);
    }).end();
};

function removeHighlight2(tblId) {
    $('#' + tblId + ' td span.highlight').each(function () {
        var thisParent = this.parentNode;
        thisParent.replaceChild(this.firstChild, this);
        newNormalize(thisParent);
    });
};

//function callPrint(DataTableName) {
//    //declare the oConfig variable
//    var oConfig = {
//        "sInfo": "<h6>Print view</h6><p>Please use your browser's print function to " +
//		  "print this table. Press escape when finished.",
//        "sMessage": null,
//        "bShowAll": false,
//        "sToolTip": "View print view",
//        "sButtonClass": "DTTT_button_print",
//        "sButtonText": "Print"
//    };

//    //Get the current instance and intialize the print
//    if (typeof (TableTools) != undefined && typeof (TableTools) != 'undefined')
//        TableTools.fnGetInstance(DataTableName).fnPrint(true, oConfig);
//}

function ShowGlobalReprotBuilder(PageNameForReport, IsSupportingInfo) {


    if (PageNameForReport == 'OrderMasterList' && IsSupportingInfo == false) {
        $('#btnShowOrderReports').click();
        return;
    }
    // Here needs to get Selected rows if seleted any else get all Data for print ...
    var anSelected = fnGetSelected(oTable);
    var stringIDs = "";
    if (PageNameForReport.toLowerCase() == "pullmaster") {
        stringIDs = "";
        $("#GlobalReprotBuilder").data("pgid", PageNameForReport).data("IsSupport", IsSupportingInfo).data("Ids", stringIDs).dialog("open").on('dialogclose', function (event) {
            $("form").off(".areYouSure");
            $(window).off('beforeunload');
        });
    }
    if (PageNameForReport.toLowerCase() == "receivemasterlist" || PageNameForReport.toLowerCase() == "ordereditems") {
        stringIDs = "";
        $("#GlobalReprotBuilder").data("pgid", PageNameForReport).data("IsSupport", IsSupportingInfo).data("Ids", stringIDs).dialog("open").on('dialogclose', function (event) {
            $("form").off(".areYouSure");
            $(window).off('beforeunload');
        });
    }
    else if (anSelected.length == 0) {
        GetOnlyIdsForPassPages(PageNameForReport, IsSupportingInfo);
    }
    else {

        for (var i = 0; i <= anSelected.length - 1; i++) {
            stringIDs = stringIDs + anSelected[i].id + ",";
        }
        $("#GlobalReprotBuilder").data("pgid", PageNameForReport).data("IsSupport", IsSupportingInfo).data("Ids", stringIDs).dialog("open");
    }
}

function GetOnlyIdsForPassPages(PageName, IsSupportPage) {

    var o = "";
    var sSource = "";
    var lowername = PageName.toLowerCase();
    switch (lowername) {
        case "requisitionmaster":
            sSource = "RequisitionMasterListAjax";
            break;
        case "workorder":
            sSource = "WOMasterListAjax";
            break;
        case "ordermasterlist":
            sSource = "OrderMasterListAjax";
            break;
        case "binmasterlist":
            sSource = "GetBinList";
            break;
        case "categorymasterlist":
            sSource = "CategoryListAjax";
            break;
        case "customermasterlist":
            sSource = "CustomerMasterListAjax";
            break;
        case "freighttypemasterlist":
            sSource = "DataProviderForFrieghtTypeGrid";
            break;
        case "glaccountmasterlist":
            sSource = "GetGLAccountList";
            break;
        case "locationmasterlist":
            sSource = "GetLocationList";
            break;
        case "manufacturermasterlist":
            sSource = "ManufacturerListAjax";
            break;
        case "measurementtermlist":
            sSource = "GetMeasurementTermList";
            break;
        case "shipviamasterlist":
            sSource = "ShipViaListAjax";
            break;
        case "suppliermasterlist":
            sSource = "GetSupplierList";
            break;
        case "technicianlist":
            sSource = "TechnicianListAjax";
            break;
        case "toolcategorylist":
            sSource = "ToolCategoryListAjax";
            break;
        case "assetcategorylist":
            sSource = "AssetCategoryListAjax";
            break;
        case "unitmasterlist":
            sSource = "GetUnitList";
            break;
        case "itemmasterlist":
            sSource = "ItemMasterListAjax";
            break;
        case "costuommasterlist":
            sSource = "CostUOMListAjax";
            break;
        case "inventoryclassificationmasterlist":
            sSource = "InventoryClassificationListAjax";
            break;
        case "inventorylocationslist":
            sSource = "InventoryLocationsAjax";
            break;
        case "materialstaging":
            sSource = "MaterialStagingListAjax";
            break;
    }


    var StartiDisplayLength = oTable.fnSettings()._iDisplayStart;
    var EndDisplayLength = oTable.fnSettings()._iDisplayLength;

    ///////////////////////////////// Call to get Ids /////////////////////////// START
    oTable.fnSettings().oFeatures.bStateSave = false;
    oTable.fnSettings()._iDisplayStart = 0;
    oTable.fnSettings()._iDisplayLength = 9999999;

    var aoData = oTable._fnAjaxParameters();
    var arrCols = new Array();
    var objCols = oTable.fnSettings().aoColumns;
    for (var i = 0; i <= objCols.length - 1; i++) {
        arrCols.push(objCols[i].mDataProp);
    }
    for (var j = 0; j <= aoData.length - 1; j++) {
        if (aoData[j].name == "sColumns") {
            aoData[j].value = arrCols.join("|");
            break;
        }
    }
    if (oTable.fnSettings().aaSorting.length != 0)
        aoData.push({ "name": "SortingField", "value": oTable.fnSettings().aaSorting[0][3] });
    else
        aoData.push({ "name": "SortingField", "value": "0" });

    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

    $.ajax({
        "dataType": 'json',
        "type": "POST",
        "url": sSource,
        cache: false,
        "async": false,
        "data": aoData,
        "headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
        "success": function (json) {
            if (json.aaData != '') {
                for (var i = 0; i <= json.aaData.length - 1; i++) {
                    o = o + json.aaData[i].ID + ",";
                }
            }
            $("#GlobalReprotBuilder").data("pgid", PageName).data("IsSupport", IsSupportPage).data("Ids", o).dialog("open").on('dialogclose', function (event) {
                $("form").off(".areYouSure");
                $(window).off('beforeunload');
            });
            //return o;
        },
        error: function (response) {

            //return o;
        }
    })
    ///////////////////////////////// Call to get Ids /////////////////////////// END

    ///////////////////////////////// Set Original settings /////////////////////////// START
    oTable.fnSettings().oFeatures.bStateSave = true;
    oTable.fnSettings()._iDisplayStart = StartiDisplayLength;
    oTable.fnSettings()._iDisplayLength = EndDisplayLength;
    ///////////////////////////////// Set Original settings /////////////////////////// END
}

function callPrint(DataTableName, columnsetupfor, IsSupportingInfo) {
    var lowername = (columnsetupfor !== undefined && columnsetupfor != null) ? columnsetupfor.toLowerCase() : "";
    if (IsSupportingInfo)
        var URLToOpen = location.protocol + "//" + location.host + "/Reports/" + escape("Supporting Information") + "/";
    else
        var URLToOpen = location.protocol + "//" + location.host + "/Reports/" + escape("Transaction") + "/";

    switch (lowername) {
        case "binmasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "BinLocation");
            break;
        case "categorymasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "Category");
            break;
        case "customermasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "Customers");
            break;
        case "freighttypemasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "FreightTypes");
            break;
        case "glaccountmasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "GLAccounts");
            break;
        case "locationmasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "Locations");
            break;
        case "manufacturermasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "Manufacturers");
            break;
        case "measurementtermlist":
            OpenPopup(columnsetupfor, URLToOpen + "MeasurementTerms");
            break;
        case "shipviamasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "ShipVia");
            break;
        case "suppliermasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "Supplier");
            break;
        case "technicianlist":
            OpenPopup(columnsetupfor, URLToOpen + "Technicians");
            break;
        case "toolcategorylist":
            OpenPopup(columnsetupfor, URLToOpen + "ToolCategory");
            break;
        case "assetcategorylist":
            OpenPopup(columnsetupfor, URLToOpen + "AssetCategory");
            break;
        case "unitmasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "Units");
            break;
        case "itemmasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "Items");
            break;
        case "costuommasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "CostUOM1");
            break;
        case "inventoryclassificationmasterlist":
            OpenPopup(columnsetupfor, URLToOpen + "InventoryClassificationMaster");
            break;
        case "inventorylocationslist":
            OpenPopup(columnsetupfor, URLToOpen + "InventoryLocationsMaster");
            break;

    }
}


function callPrintTransaction(DataTableName, columnsetupfor, IsSupportingInfo, IDs, StartDate, EndDate) {

    var lowername = columnsetupfor.toLowerCase();
    if (IsSupportingInfo)
        var URLToOpen = location.protocol + "//" + location.host + "/Reports/" + escape("Supporting Information") + "/";
    else
        var URLToOpen = location.protocol + "//" + location.host + "/Reports/" + escape("Transaction") + "/";

    var CurrentoTableCols = $(oTable).DataTable.settings[0].aoColumns;
    var CurrentoTableColsList = "";

    if (lowername != "requisitionmaster" && lowername != "ordermasterlist" && lowername != "workorder" && lowername != "pullmaster" && lowername != "receivemasterlist" && lowername != "ordereditems"
        && lowername != "toolassetordermasterlist") {
        for (var i = 0; i <= CurrentoTableCols.length - 1; i++) {
            if (CurrentoTableCols[i].bVisible && CurrentoTableCols[i].mDataProp != null) {
                CurrentoTableColsList += CurrentoTableCols[i].mDataProp + ":" + CurrentoTableCols[i].sTitle.trim() + ",";
            }
        }
    }

    var CompanyRprtIds = "";
    var RoomRprtIds = "";
    $("#ComapnyGlobalReprotBuilder").multiselect("getChecked").each(function () {
        CompanyRprtIds += this.value + ",";
    });
    $("#RoomGlobalReprotBuilder").multiselect("getChecked").each(function () {
        RoomRprtIds += this.value + ",";
    });

    $.ajax({
        "dataType": 'json',
        "type": "POST",
        "url": "/Master/AddReportParamsToSesstion",
        cache: false,
        "async": false,
        data: { Ids: IDs, Title: $("#textGlobalReprotBuilder")[0].value, StartDate: StartDate, EndDate: EndDate, DisplayFields: CurrentoTableColsList, CompanyIds: CompanyRprtIds, RoomIds: RoomRprtIds, BarcodeColumn: "" },
        "success": function (json) {

            switch (lowername) {

                case "requisitionmaster":
                    OpenPopup(columnsetupfor, URLToOpen + "Requisition");
                    break;
                case "ordermasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "PurchaseOrder");
                    break;
                case "workorder":
                    OpenPopup(columnsetupfor, URLToOpen + "WorkOrder");
                    break;
                case "pullmaster":
                    OpenPopup(columnsetupfor, URLToOpen + "Pulls");
                    break;
                case "binmasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "BinLocation");
                    break;
                case "categorymasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "Category");
                    break;
                case "customermasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "Customers");
                    break;
                case "freighttypemasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "FreightTypes");
                    break;
                case "glaccountmasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "GLAccounts");
                    break;
                case "locationmasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "Locations");
                    break;
                case "manufacturermasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "Manufacturers");
                    break;
                case "measurementtermlist":
                    OpenPopup(columnsetupfor, URLToOpen + "MeasurementTerms");
                    break;
                case "shipviamasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "ShipVia");
                    break;
                case "suppliermasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "Supplier");
                    break;
                case "technicianlist":
                    OpenPopup(columnsetupfor, URLToOpen + "Technicians");
                    break;
                case "toolcategorylist":
                    OpenPopup(columnsetupfor, URLToOpen + "ToolCategory");
                    break;
                case "assetcategorylist":
                    OpenPopup(columnsetupfor, URLToOpen + "AssetCategory");
                    break;
                case "unitmasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "Units");
                    break;
                case "itemmasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "Items");
                    break;
                case "receivemasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "Receives_HeaderReport");
                    break;
                case "ordereditems":
                    OpenPopup(columnsetupfor, URLToOpen + "OrderedItems_HeaderReport");
                    break;
                case "costuommasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "CostUOM1");
                    break;
                case "inventoryclassificationmasterlist":
                    OpenPopup(columnsetupfor, URLToOpen + "InventoryClassificationMaster");
                    break;
                case "inventorylocationslist":
                    OpenPopup(columnsetupfor, URLToOpen + "InventoryLocationsMaster");
                    break;
                case "materialstaging":
                    OpenPopup(columnsetupfor, URLToOpen + "rpt_StagingHeader");
                    break;

            }

        },
        error: function (response) {

        }
    })
}


function callPrintTransactionForAll(DataTableName, Path, CurrentoTableColsList, StartDate, EndDate, BarCodeColumns) {

    var URLToOpen = location.protocol + "//" + location.host + "/Reports" + escape(Path);
    var CompanyRprtIds = "";
    var RoomRprtIds = "";

    $("#ComapnyGlobalReprotBuilderForAll").multiselect("getChecked").each(function () {
        CompanyRprtIds += this.value + ",";
    });
    $("#RoomGlobalReprotBuilderForAll").multiselect("getChecked").each(function () {
        RoomRprtIds += this.value + ",";
    });

    $.ajax({
        "dataType": 'json',
        "type": "POST",
        "url": "/Master/AddReportParamsToSesstion",
        cache: false,
        "async": false,
        data: { Ids: "", Title: $("#textGlobalReprotBuilder")[0].value, StartDate: StartDate, EndDate: EndDate, DisplayFields: CurrentoTableColsList, CompanyIds: CompanyRprtIds, RoomIds: RoomRprtIds, BarcodeColumn: BarCodeColumns },
        "success": function (json) {
            OpenPopup("", URLToOpen);
        },
        error: function (response) {

        }
    })
}


function OpenPopup(columnsetupfor, URlToOpen) {

    IsFirstTime = true;
    IsRoomFirstTime = true;

    mywindow = window.open(URlToOpen, "_blank");
    //    mywindow.moveTo(0, 0);
}
function clearControls(form) {

    $(':input', '#' + form + '')
        .not(':button, :submit, :reset, :hidden')
        .val('')
        .removeAttr('checked')
        .removeAttr('selected')
        ;
}

function disableControls(form) {
    $(':input', '#' + form + '')
        .not('#btnCancel')
        .attr('disabled', 'disabled');
}

function readyonlyControls(form) {
    $(':input', '#' + form + '')
        .not('#btnCancel')
        .attr('readyonly', 'readyonly');
}



function NarrowSearchInGrid(searchstr) {
    FilterStringGlobalUse = searchstr;
    if (searchstr != '' && gblActionName.toLowerCase() == 'requisitionlist' && _NarrowSearchLayout.pageName == 'RequisitionMaster') {
        RequisitionNarrowFilterString = searchstr;
    }
    else if (searchstr != '' && gblActionName.toLowerCase() == 'toollist' && _NarrowSearchLayout.pageName == 'ToolMasterNew') {
        ToolMasterNewNarrowFilterString = searchstr;
    }
    else if (searchstr != '' && gblActionName.toLowerCase() == 'quotelist' && _NarrowSearchLayout.pageName == 'QuoteMaster')
    {
        QuoteNarrowFilterString = searchstr;
    }
    $('#myDataTable').dataTable().fnFilter(searchstr, null, null, null)
}

function NarrowSearchInGridTM(searchstr) {
    FilterStringGlobalUse = searchstr;
    if ($('#ToolModeDataTablePopup').length > 0) {
        $('#ToolModeDataTablePopup').dataTable().fnFilter(searchstr, null, null, null)
    }
    else if ($('#ToolModeDataTable').length > 0) {
        $('#ToolModeDataTable').dataTable().fnFilter(searchstr, null, null, null)
    }
}

function GetNarroHTML(tableName, textFieldName, companyID, roomID) {

    $.ajax({
        'url': '/Master/GetDDData',
        data: { TableName: tableName, TextFieldName: textFieldName },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (i, val) {
                s += '<option value="' + val.ID + '">' + val.Text + '</option>';
            });

            $("#UserCreated").append(s);
            $("#UserUpdated").append(s);

            $("#UserCreated").multiselect
                (
                    {
                        noneSelectedText: UserCreatedBy, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return CreatedBy + ' ' + numChecked + ' ' + selected;
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    UserCreatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });

                    _NarrowSearchSave.objSearch.UserCreated = UserCreatedNarroValues;

                    if (!isFromNarrowSearchClear) {
                        DoNarrowSearch();
                    }
                });

            $("#UserUpdated").multiselect
                (
                    {
                        noneSelectedText: UserUpdatedby, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return UpdatedBy + ' ' + numChecked + ' ' + selected;
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    UserUpdatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.UserUpdated = UserUpdatedNarroValues;

                    if (!isFromNarrowSearchClear) {
                        DoNarrowSearch();
                    }

                });
        },
        error: function (response) {
            // through errror message
        }
    });
}
function GetNarrowDDData(tableName, companyID, roomID, _IsArchived, _IsDeleted, _RequisitionCurrentTab) {

    if (tableName != 'BarcodeMaster') {
        $("#UserCreated").empty();
        $("#UserCreated").multiselect('destroy');
        $("#UserCreated").multiselectfilter('destroy');

        $("#UserCreated").append();
        $("#UserCreated").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    noneSelectedText: UserCreatedBy,
                    selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return CreatedBy + ' ' + numChecked + ' ' + selected;
                    },
                    open: function (event, ui) {

                    }
                },
                {
                    checkAll: function (ui) {
                        $("#UserCreatedCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#UserCreatedCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#UserCreatedCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#UserCreatedCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                if (ui.checked) {
                    if ($("#UserCreatedCollapse").text().indexOf(ui.text) == -1) {
                        $("#UserCreatedCollapse").append("<span>" + ui.text + "</span>");
                    }
                }
                else {
                    if (ui.checked == undefined) {
                        $("#UserCreatedCollapse").html('');
                    }
                    else if (!ui.checked) {
                        var text = $("#UserCreatedCollapse").html();
                        text = text.replace("<span>" + ui.text + "</span>", '');
                        $("#UserCreatedCollapse").html(text);
                    }
                    else
                        $("#UserCreatedCollapse").html('');
                }
                UserCreatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                    return input.value;
                });

                _NarrowSearchSave.objSearch.UserCreated = UserCreatedNarroValues;

                if ($("#UserCreatedCollapse").text().trim() != '')
                    $("#UserCreatedCollapse").show();
                else
                    $("#UserCreatedCollapse").hide();


                if ($("#UserCreatedCollapse").find('span').length <= 2) {
                    $("#UserCreatedCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#UserCreatedCollapse").scrollTop(0).height(100);
                }
                if (!isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();

                    DoNarrowSearch();
                }

            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
        //$.ajax({
        //    'url': '/Master/GetNarrowDDData',
        //    data: { TableName: tableName, TextFieldName: 'CreatedBy', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
        //    success: function (response) {
        //        var s = '';

        //        if (response.DDData != null) {

        //            if (tableName == "CartItem" || tableName == "CartItemList" || tableName == "MaterialStaging" || tableName == "EnterpriseMaster" || tableName == "CompanyMaster" || tableName == "InventoryCountList" || tableName == "RoleMaster" || tableName == "UserMaster" || tableName == "Room" || tableName == "AssetToolSchedulerList" || tableName == "WorkOrder" || tableName == "BinMaster" || tableName == "PullMaster" || tableName == "NotificationMasterList" || tableName == "FTPMasterList"
        //                || tableName == "RequisitionMaster" || tableName == "PermissionTemplateList" || tableName == "ToolMaster" || tableName == "MoveMaterial" || tableName == "BarcodeMaster" || tableName == "PullPoMasterList") {
        //                $.each(response.DDData, function (i, val) {

        //                    var ArrData = i.toString().split('[###]');
        //                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
        //                });
        //            }
        //            else {
        //                $.each(response.DDData, function (key, val) {

        //                    s += '<option value="' + key + '">' + key + ' (' + val + ')' + '</option>';
        //                });

        //            }
        //        }

        //        //Destroy widgets before reapplying the filter

        //    },
        //    error: function (response) {
        //        // through errror message            
        //    }
        //});

        //$.ajax({
        //    'url': '/Master/GetNarrowDDData',
        //    data: { TableName: tableName, TextFieldName: 'LastUpdatedBy', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
        //    success: function (response) {
        //        var s = '';
        //        if (response.DDData != null) {
        //            if (tableName == "CartItem" || tableName == "CartItemList" || tableName == "MaterialStaging" || tableName == "EnterpriseMaster" || tableName == "CompanyMaster" || tableName == "InventoryCountList" || tableName == "RoleMaster" || tableName == "UserMaster" || tableName == "Room" || tableName == "AssetToolSchedulerList" || tableName == "WorkOrder" || tableName == "BinMaster" || tableName == "PullMaster" || tableName == "NotificationMasterList" || tableName == "FTPMasterList"
        //                 || tableName == "RequisitionMaster" || tableName == "PermissionTemplateList" || tableName == "ToolMaster" || tableName == "MoveMaterial" || tableName == "BarcodeMaster" || tableName == "PullPoMasterList") {
        //                $.each(response.DDData, function (i, val) {

        //                    var ArrData = i.toString().split('[###]');
        //                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
        //                });
        //            }
        //            else {
        //                $.each(response.DDData, function (i, val) {
        //                    s += '<option value="' + i + '">' + i + ' (' + val + ')' + '</option>';
        //                });
        //            }

        //        }

        //        //Destroy widgets before reapplying the filter

        //    },
        //    error: function (response) {
        //        // through errror message
        //    }
        //});
        $("#UserUpdated").empty();
        $("#UserUpdated").multiselect('destroy');
        $("#UserUpdated").multiselectfilter('destroy');

        $("#UserUpdated").append();
        $("#UserUpdated").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    noneSelectedText: UserUpdatedby, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return UpdatedBy + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#UserUpdatedCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#UserUpdatedCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#UserUpdatedCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#UserUpdatedCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                if (ui.checked) {
                    if ($("#UserUpdatedCollapse").text().indexOf(ui.text) == -1) {
                        $("#UserUpdatedCollapse").append("<span>" + ui.text + "</span>");
                    }
                }
                else {
                    if (ui.checked == undefined) {
                        $("#UserUpdatedCollapse").html('');
                    }
                    else if (!ui.checked) {
                        var text = $("#UserUpdatedCollapse").html();
                        text = text.replace("<span>" + ui.text + "</span>", '');
                        $("#UserUpdatedCollapse").html(text);
                    }
                    else
                        $("#UserUpdatedCollapse").html('');
                }
                UserUpdatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                    return input.value;
                })

                _NarrowSearchSave.objSearch.UserUpdated = UserUpdatedNarroValues;

                if ($("#UserUpdatedCollapse").text().trim() != '')
                    $("#UserUpdatedCollapse").show();
                else
                    $("#UserUpdatedCollapse").hide();

                if ($("#UserUpdatedCollapse").find('span').length <= 2) {
                    $("#UserUpdatedCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#UserUpdatedCollapse").scrollTop(0).height(100);
                }
                if (!isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }

            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });


        setTimeout(function () {
            FillCommonNarrowSearch(tableName, companyID, roomID, _IsArchived, _IsDeleted, _RequisitionCurrentTab);
        }, 5000);
    }

}
function GetNarrowDDData1(tableName, companyID, roomID, _IsArchived, _IsDeleted, _RequisitionCurrentTab) {

    if (tableName != 'BarcodeMaster') {

        $.ajax({
            'url': '/Master/GetNarrowDDData',
            data: { TableName: tableName, TextFieldName: 'CreatedBy', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
            success: function (response) {
                var s = '';

                if (response.DDData != null) {

                    if (tableName == "CartItem" || tableName == "CartItemList" || tableName == "MaterialStaging" || tableName == "EnterpriseMaster" || tableName == "CompanyMaster" || tableName == "InventoryCountList" || tableName == "RoleMaster" || tableName == "UserMaster" || tableName == "Room" || tableName == "AssetToolSchedulerList" || tableName == "WorkOrder" || tableName == "BinMaster" || tableName == "PullMaster" || tableName == "NotificationMasterList" || tableName == "FTPMasterList"
                        || tableName == "ReportMasterList" || tableName == "ItemMasterBinList" || tableName == "RequisitionMaster" || tableName == "PermissionTemplateList" || tableName == "ToolMaster" || tableName == "KitToolMaster" || tableName == "MoveMaterial" || tableName == "BarcodeMaster" || tableName == "PullPoMasterList" || tableName == "KitToolMasterNew" || tableName == "ToolMasterNew" || tableName == "QuoteMaster") {
                        $.each(response.DDData, function (i, val) {

                            var ArrData = i.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                        });
                    }
                    else {
                        $.each(response.DDData, function (key, val) {

                            s += '<option value="' + key + '">' + key + ' (' + val + ')' + '</option>';
                        });

                    }
                }

                //Destroy widgets before reapplying the filter
                $("#UserCreated").empty();
                $("#UserCreated").multiselect('destroy');
                $("#UserCreated").multiselectfilter('destroy');

                $("#UserCreated").append(s);
                $("#UserCreated").multiselect
                    (
                        {
                            noneSelectedText: UserCreatedBy, selectedList: 5,
                            selectedText: function (numChecked, numTotal, checkedItems) {
                                return CreatedBy + ' ' + numChecked + ' ' + selected;
                            }
                        },
                        {
                            checkAll: function (ui) {
                                $("#UserCreatedCollapse").html('');
                                for (var i = 0; i <= ui.target.length - 1; i++) {
                                    if ($("#UserCreatedCollapse").text().indexOf(ui.target[i].text) == -1) {
                                        $("#UserCreatedCollapse").append("<span>" + ui.target[i].text + "</span>");
                                    }
                                }
                                $("#UserCreatedCollapse").show();
                            }
                        }
                    )
                    .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                    .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                        if (ui.checked) {
                            if ($("#UserCreatedCollapse").text().indexOf(ui.text) == -1) {
                                $("#UserCreatedCollapse").append("<span>" + ui.text + "</span>");
                            }
                        }
                        else {
                            if (ui.checked == undefined) {
                                $("#UserCreatedCollapse").html('');
                            }
                            else if (!ui.checked) {
                                var text = $("#UserCreatedCollapse").html();
                                text = text.replace("<span>" + ui.text + "</span>", '');
                                $("#UserCreatedCollapse").html(text);
                            }
                            else
                                $("#UserCreatedCollapse").html('');
                        }
                        UserCreatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        })

                        _NarrowSearchSave.objSearch.UserCreated = UserCreatedNarroValues;

                        if ($("#UserCreatedCollapse").text().trim() != '')
                            $("#UserCreatedCollapse").show();
                        else
                            $("#UserCreatedCollapse").hide();


                        if ($("#UserCreatedCollapse").find('span').length <= 2) {
                            $("#UserCreatedCollapse").scrollTop(0).height(50);
                        }
                        else {
                            $("#UserCreatedCollapse").scrollTop(0).height(100);
                        }
                        if (!isFromNarrowSearchClear) {
                            clearGlobalIfNotInFocus();
                            DoNarrowSearch();
                        }

                    }).multiselectfilter();

                _NarrowSearchSave.setControlValue("UserCreated");
            },
            error: function (response) {
                // through errror message            
            }
        });

        $.ajax({
            'url': '/Master/GetNarrowDDData',
            data: { TableName: tableName, TextFieldName: 'LastUpdatedBy', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
            success: function (response) {
                var s = '';
                if (response.DDData != null) {
                    if (tableName == "CartItem" || tableName == "CartItemList" || tableName == "MaterialStaging" || tableName == "EnterpriseMaster" || tableName == "CompanyMaster" || tableName == "InventoryCountList" || tableName == "RoleMaster" || tableName == "UserMaster" || tableName == "Room" || tableName == "AssetToolSchedulerList" || tableName == "WorkOrder" || tableName == "BinMaster" || tableName == "PullMaster" || tableName == "NotificationMasterList" || tableName == "FTPMasterList"
                        || tableName == "ReportMasterList" || tableName == "ItemMasterBinList" || tableName == "RequisitionMaster" || tableName == "PermissionTemplateList" || tableName == "ToolMaster" || tableName == "KitToolMaster" || tableName == "MoveMaterial" || tableName == "BarcodeMaster" || tableName == "PullPoMasterList" || tableName == "KitToolMasterNew" || tableName == "QuoteMaster" ) {
                        $.each(response.DDData, function (i, val) {

                            var ArrData = i.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                        });
                    }
                    else {
                        $.each(response.DDData, function (i, val) {
                            s += '<option value="' + i + '">' + i + ' (' + val + ')' + '</option>';
                        });
                    }

                }

                //Destroy widgets before reapplying the filter
                $("#UserUpdated").empty();
                $("#UserUpdated").multiselect('destroy');
                $("#UserUpdated").multiselectfilter('destroy');

                $("#UserUpdated").append(s);
                $("#UserUpdated").multiselect
                    (
                        {
                            noneSelectedText: UserUpdatedby, selectedList: 5,
                            selectedText: function (numChecked, numTotal, checkedItems) {
                                return UpdatedBy + ' ' + numChecked + ' ' + selected;
                            }
                        },
                        {
                            checkAll: function (ui) {
                                $("#UserUpdatedCollapse").html('');
                                for (var i = 0; i <= ui.target.length - 1; i++) {
                                    if ($("#UserUpdatedCollapse").text().indexOf(ui.target[i].text) == -1) {
                                        $("#UserUpdatedCollapse").append("<span>" + ui.target[i].text + "</span>");
                                    }
                                }
                                $("#UserUpdatedCollapse").show();
                            }
                        }
                    )
                    .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                    .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                        if (ui.checked) {
                            if ($("#UserUpdatedCollapse").text().indexOf(ui.text) == -1) {
                                $("#UserUpdatedCollapse").append("<span>" + ui.text + "</span>");
                            }
                        }
                        else {
                            if (ui.checked == undefined) {
                                $("#UserUpdatedCollapse").html('');
                            }
                            else if (!ui.checked) {
                                var text = $("#UserUpdatedCollapse").html();
                                text = text.replace("<span>" + ui.text + "</span>", '');
                                $("#UserUpdatedCollapse").html(text);
                            }
                            else
                                $("#UserUpdatedCollapse").html('');
                        }
                        UserUpdatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        })
                        _NarrowSearchSave.objSearch.UserUpdated = UserUpdatedNarroValues;

                        if ($("#UserUpdatedCollapse").text().trim() != '')
                            $("#UserUpdatedCollapse").show();
                        else
                            $("#UserUpdatedCollapse").hide();

                        if ($("#UserUpdatedCollapse").find('span').length <= 2) {
                            $("#UserUpdatedCollapse").scrollTop(0).height(50);
                        }
                        else {
                            $("#UserUpdatedCollapse").scrollTop(0).height(100);
                        }
                        if (!isFromNarrowSearchClear) {
                            clearGlobalIfNotInFocus();
                            DoNarrowSearch();
                        }
                    }).multiselectfilter();

                _NarrowSearchSave.setControlValue("UserUpdated");
            },
            error: function (response) {
                // through errror message
            }
        });
    }

}

function GetNarroHTMLForUDF(tableName, companyID, roomID, _IsArchived, _IsDeleted, _RequisitionCurrentTab, suFix, suFix2) {
    if (tableName != "RequisitionMaster") {
        _RequisitionCurrentTab = 'ToolList';
        if (tableName == 'KitToolMaster')
            _RequisitionCurrentTab = 'KitList';
    }
    var UDFObject;
    if (tableName == "UserMaster" || tableName == "Room") {
        var udfList = [];
        $("select[name='udflist']").each(function () {
            var UDFUniqueID = this.getAttribute('UID');
            var UDFName = this.id;
            var tableNameAdjusted = tableName;

            udfList.push({
                TableName: tableNameAdjusted,
                UDFName: UDFName,
                UDFUniqueID: UDFUniqueID
            });
        });
        if (udfList.length > 0) {
            $.ajax({
                url: '/Master/GetUDFDDData_All',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ udfRequests: udfList, IsDeleted: _IsDeleted }),
                success: function (response) {
                    $.each(response, function (index, udfResponse) {
                        var s = '';
                        if (udfResponse.DDData != null) {
                            $.each(udfResponse.DDData, function (UDFVal, ValCount) {
                                s += '<option value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')</option>';
                            });
                        }

                        var UDFColumnNameTemp = udfResponse.UDFColName.toString().replace("_dd", "");
                        var ddl = $('[id="' + udfResponse.UDFColName + '"]');
                        var UDFUniqueID = udfResponse.UDFUniqueID;

                        ddl.empty();
                        ddl.multiselect('destroy');
                        ddl.multiselectfilter('destroy');
                        ddl.append(s);

                        ddl.multiselect({
                            checkAllText: Check,
                            uncheckAllText: UnCheck,
                            loadMoreText: loadMoreText,
                            loadAllText: loadAllText,
                            noneSelectedText: UDFColumnNameTemp,
                            selectedList: 5,
                            selectedText: function (numChecked, numTotal, checkedItems) {
                                return UDFColumnNameTemp + ' ' + numChecked + ' ' + selected;
                            }
                        }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });

                        ddl.unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                            .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                                var CollapseObject = $('#' + UDFUniqueID + 'Collapse');
                                if (ui.checked) {
                                    if ($(CollapseObject).text().indexOf(ui.text) == -1) {
                                        $(CollapseObject).append("<span>" + ui.text + "</span>");
                                    }
                                } else {
                                    if (ui.checked === undefined) {
                                        $(CollapseObject).html('');
                                    } else if (!ui.checked) {
                                        var text = $(CollapseObject).html();
                                        text = text.replace("<span>" + ui.text + "</span>", '');
                                        $(CollapseObject).html(text);
                                    } else {
                                        $(CollapseObject).html('');
                                    }
                                }
                                var selectedValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                });

                                if (UDFUniqueID == "UDF1") {
                                    _NarrowSearchSave.objSearch.UDF1 = selectedValues;
                                    UserUDF1NarrowValues = selectedValues;
                                }
                                else if (UDFUniqueID == "UDF2") {
                                    _NarrowSearchSave.objSearch.UDF2 = selectedValues;
                                    UserUDF2NarrowValues = selectedValues;
                                }
                                else if (UDFUniqueID == "UDF3") {
                                    _NarrowSearchSave.objSearch.UDF3 = selectedValues;
                                    UserUDF3NarrowValues = selectedValues;
                                }
                                else if (UDFUniqueID == "UDF4") {
                                    _NarrowSearchSave.objSearch.UDF4 = selectedValues;
                                    UserUDF4NarrowValues = selectedValues;
                                }
                                else if (UDFUniqueID == "UDF5") {
                                    _NarrowSearchSave.objSearch.UDF5 = selectedValues;
                                    UserUDF5NarrowValues = selectedValues;
                                }
                                else if (UDFUniqueID == "UDF6") {
                                    _NarrowSearchSave.objSearch.UDF6 = selectedValues;
                                    UserUDF6NarrowValues = selectedValues;
                                }
                                else if (UDFUniqueID == "UDF7") {
                                    _NarrowSearchSave.objSearch.UDF7 = selectedValues;
                                    UserUDF7NarrowValues = selectedValues;
                                }
                                else if (UDFUniqueID == "UDF8") {
                                    _NarrowSearchSave.objSearch.UDF8 = selectedValues;
                                    UserUDF8NarrowValues = selectedValues;
                                }
                                else if (UDFUniqueID == "UDF9") {
                                    _NarrowSearchSave.objSearch.UDF9 = selectedValues;
                                    UserUDF9NarrowValues = selectedValues;
                                }
                                else if (UDFUniqueID == "UDF10") {
                                    _NarrowSearchSave.objSearch.UDF10 = selectedValues;
                                    UserUDF10NarrowValues = selectedValues;
                                }

                                // Collapse box show/hide logic
                                if ($(CollapseObject).text().trim() != '') {
                                    $(CollapseObject).show();
                                } else {
                                    $(CollapseObject).hide();
                                }

                                if ($(CollapseObject).find('span').length <= 2) {
                                    $(CollapseObject).scrollTop(0).height(50);
                                } else {
                                    $(CollapseObject).scrollTop(0).height(100);
                                }

                                if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                                    clearGlobalIfNotInFocus();
                                    DoNarrowSearch();
                                }
                            });

                        ddl.multiselect("refresh");
                        ddl.multiselectfilter("refresh");

                        _NarrowSearchSave.setControlValue(UDFUniqueID);
                    });
                },
                error: function () {
                    alert("Error fetching UDF data");
                }
            });
        }
    }
    else {
        $("select[name='udflist']").each(function (index) {

            var UDFUniqueID = this.getAttribute('UID');
            if ((tableName == "ToolMaster" || tableName == "KitToolMaster" || tableName == "ToolMasterNew" || tableName == "KitToolMasterNew") && this.id.toLowerCase().indexOf("_tool") >= 0) {
                tableName = "ToolCheckOUT";
            }
            $.ajax({
                'url': '/Master/GetUDFDDData',
                data: { TableName: tableName, UDFName: this.id, UDFUniqueID: UDFUniqueID, IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
                success: function (response) {
                    var s = '';
                    if (response.DDData != null) {
                        if (tableName == "PullMaster" || tableName.toLowerCase() == "itemmaster" || tableName.toLowerCase() == "itembinmaster") {
                            $.each(response.DDData, function (i, val) {
                                var ArrData = i.toString().split('[###]');
                                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                            });
                        }
                        else {
                            $.each(response.DDData, function (UDFVal, ValCount) {
                                s += '<option value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')' + '</option>';
                            });
                        }

                    }

                    var UDFColumnNameTemp = response.UDFColName.toString().replace("_dd", "");

                    //Destroy widgets before reapplying the filter

                    $('[id="' + response.UDFColName + '"]').empty();
                    $('[id="' + response.UDFColName + '"]').multiselect('destroy');
                    $('[id="' + response.UDFColName + '"]').multiselectfilter('destroy');
                    $('[id="' + response.UDFColName + '"]').append(s);




                    var currentDataCount = $('select#' + response.UDFColName + ' option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allpullns" + UDFUniqueID + "").hide();
                        $(".morepullns" + UDFUniqueID + "").hide();

                        $(".alltoolns" + UDFUniqueID + "").hide();
                        $(".moretoolns" + UDFUniqueID + "").hide();
                    }

                    $('[id="' + response.UDFColName + '"]').multiselect
                        (
                            {
                                checkAllText: Check,
                                uncheckAllText: UnCheck,
                                loadMoreText: loadMoreText,
                                loadAllText: loadAllText,
                                noneSelectedText: UDFColumnNameTemp, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return UDFColumnNameTemp + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    var CollapseObject = $('#' + UDFUniqueID + 'Collapse')
                                    $(CollapseObject).html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($(CollapseObject).text().indexOf(ui.target[i].text) == -1) {
                                            $(CollapseObject).append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $(CollapseObject).show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {

                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                                var currentDataCount = $("select[id='" + this.id + "'] option").length; //$('select#' + this.id + ' option').length;
                                var _selectedPUDF = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });
                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".allpullns" + UDFUniqueID + "").hide();
                                    $(".morepullns" + UDFUniqueID + "").hide();

                                    $(".alltoolns" + UDFUniqueID + "").hide();
                                    $(".moretoolns" + UDFUniqueID + "").hide();
                                }
                                $.ajax({
                                    'url': '/Master/GetUDFDDData',
                                    data: { TableName: tableName, UDFName: this.id, UDFUniqueID: UDFUniqueID, IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab, LoadDataCount: _loaddataCount },
                                    success: function (responseNew) {

                                        var s = '';
                                        if (responseNew.DDData != null) {
                                            if (tableName == "PullMaster") {
                                                $.each(responseNew.DDData, function (i, val) {
                                                    var ArrData = i.toString().split('[###]');
                                                    if ($.inArray(ArrData[1], _selectedPUDF) > -1) {
                                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                                                    }
                                                    else {
                                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                                                    }
                                                });
                                            }
                                            else {
                                                $.each(responseNew.DDData, function (UDFVal, ValCount) {
                                                    if ($.inArray(UDFVal, _selectedPUDF) > -1) {
                                                        s += '<option selected="selected" value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')' + '</option>';
                                                    }
                                                    else {
                                                        s += '<option value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')' + '</option>';
                                                    }
                                                });
                                            }

                                        }



                                        //Destroy widgets before reapplying the filter
                                        $('[id="' + responseNew.UDFColName + '"]').empty();
                                        $('[id="' + responseNew.UDFColName + '"]').append(s);
                                        $('[id="' + responseNew.UDFColName + '"]').multiselect("refresh");
                                        $('[id="' + responseNew.UDFColName + '"]').multiselectfilter("refresh");

                                        var currentNewDataCount = $("select[id='" + responseNew.UDFColName + "'] option").length; //$('select#' + responseNew.UDFColName + ' option').length;
                                        if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                            $(".allpullns" + UDFUniqueID + "").hide();
                                            $(".morepullns" + UDFUniqueID + "").hide();

                                            $(".alltoolns" + UDFUniqueID + "").hide();
                                            $(".moretoolns" + UDFUniqueID + "").hide();
                                        }

                                    },
                                    error: function (responseNew) {
                                        // through errror message
                                    }
                                });

                            }
                            else {
                                var CollapseObject = $('#' + UDFUniqueID + 'Collapse')
                                if (ui.checked) {
                                    if ($(CollapseObject).text().indexOf(ui.text) == -1) {
                                        $(CollapseObject).append("<span>" + ui.text + "</span>");
                                    }
                                }
                                else {
                                    if (ui.checked == undefined) {
                                        $(CollapseObject).html('');
                                    }
                                    else if (!ui.checked) {
                                        var text = $(CollapseObject).html();
                                        text = text.replace("<span>" + ui.text + "</span>", '');
                                        $(CollapseObject).html(text);
                                    }
                                    else
                                        $(CollapseObject).html('');
                                }
                            }
                            if (UDFUniqueID == "UDF1") {
                                UserUDF1NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                                _NarrowSearchSave.objSearch.UDF1 = UserUDF1NarrowValues;
                            }
                            else if (UDFUniqueID == "UDF2") {
                                UserUDF2NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                                _NarrowSearchSave.objSearch.UDF2 = UserUDF2NarrowValues;
                            }
                            else if (UDFUniqueID == "UDF3") {
                                UserUDF3NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);

                                })
                                _NarrowSearchSave.objSearch.UDF3 = UserUDF3NarrowValues;
                            }
                            else if (UDFUniqueID == "UDF4") {
                                UserUDF4NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                                _NarrowSearchSave.objSearch.UDF4 = UserUDF4NarrowValues;
                            }
                            else if (UDFUniqueID == "UDF5") {
                                UserUDF5NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                                _NarrowSearchSave.objSearch.UDF5 = UserUDF5NarrowValues;
                            }
                            else if (UDFUniqueID == "UDF6") {
                                UserUDF6NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                                _NarrowSearchSave.objSearch.UDF6 = UserUDF6NarrowValues;
                            }
                            else if (UDFUniqueID == "UDF7") {
                                UserUDF7NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                                _NarrowSearchSave.objSearch.UDF7 = UserUDF7NarrowValues;
                            }
                            else if (UDFUniqueID == "UDF8") {
                                UserUDF8NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                                _NarrowSearchSave.objSearch.UDF8 = UserUDF8NarrowValues;
                            }
                            else if (UDFUniqueID == "UDF9") {
                                UserUDF9NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                                _NarrowSearchSave.objSearch.UDF9 = UserUDF9NarrowValues;
                            }
                            else if (UDFUniqueID == "UDF10") {
                                UserUDF10NarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                                _NarrowSearchSave.objSearch.UDF10 = UserUDF10NarrowValues;
                            }
                            if ($(CollapseObject).text().trim() != '')
                                $(CollapseObject).show();
                            else
                                $(CollapseObject).hide();


                            if ($(CollapseObject).find('span').length <= 2) {
                                $(CollapseObject).scrollTop(0).height(50);
                            }
                            else {
                                $(CollapseObject).scrollTop(0).height(100);
                            }

                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });

                    $('[id="' + response.UDFColName + '"]').multiselect("refresh");
                    $('[id="' + response.UDFColName + '"]').multiselectfilter("refresh");
                    var UDFUniqueIDVal = _Common.getQueryStringVal(this.url, "UDFUniqueID");
                    _NarrowSearchSave.setControlValue(UDFUniqueIDVal);

                },
                error: function (response) {

                    // through errror message
                }
            });
        });
    }

    if (suFix != null && suFix != '' && suFix != undefined) {
        $("select[name='udflist" + suFix + "']").each(function (index) {
            var tmpTableName = tableName;
            var UDFUniqueID = this.getAttribute('UID');
            if ((tableName == "ToolMaster" || tableName == "KitToolMaster" || tableName == "ToolMasterNew")) {
                if (this.id.toLowerCase().indexOf("_tool") >= 0) {
                    if (tableName == "KitToolMaster" || tableName == "KitToolMasterNew") {
                        tmpTableName = "KitToolCheckOUT";
                    }
                    else {
                        tmpTableName = "ToolCheckOUT";
                    }
                }
            }
            $.ajax({
                'url': '/Master/GetUDFDDData',
                data: { TableName: tmpTableName, UDFName: this.id, UDFUniqueID: UDFUniqueID, IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab, ToolCurrentTab: ToolListTab },
                success: function (response) {
                    var s = '';
                    if (response.DDData != null) {
                        $.each(response.DDData, function (UDFVal, ValCount) {
                            s += '<option value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')' + '</option>';
                        });
                    }
                    var UDFColumnNameTemp = response.UDFColName.toString().replace("_dd", "").replace(suFix, "");


                    //Destroy widgets before reapplying the filter
                    $('[id="' + response.UDFColName + '"]').empty();
                    $('[id="' + response.UDFColName + '"]').multiselect('destroy');
                    $('[id="' + response.UDFColName + '"]').multiselectfilter('destroy');

                    $('[id="' + response.UDFColName + '"]').append(s);

                    var currentDataCount = $('select#' + response.UDFColName + ' option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".alltoolchkns" + UDFUniqueID + "").hide();
                        $(".moretoolchkns" + UDFUniqueID + "").hide();
                    }

                    $('[id="' + response.UDFColName + '"]').multiselect
                        (
                            {
                                noneSelectedText: UDFColumnNameTemp, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return UDFColumnNameTemp + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    var CollapseObject = $('#' + UDFUniqueID + 'Collapse' + suFix)
                                    $(CollapseObject).html('');

                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($(CollapseObject).text().indexOf(ui.target[i].text) == -1) {
                                            $(CollapseObject).append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $(CollapseObject).show();
                                }
                            }).unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                                var currentDataCount = $('select#' + this.id + ' option').length;
                                var _selectedHUDF = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });
                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".alltoolchkns" + UDFUniqueID + "").hide();
                                    $(".moretoolchkns" + UDFUniqueID + "").hide();
                                }
                                $.ajax({
                                    'url': '/Master/GetUDFDDData',
                                    data: { TableName: tmpTableName, UDFName: this.id, UDFUniqueID: UDFUniqueID, IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab, ToolCurrentTab: ToolListTab, LoadDataCount: _loaddataCount },
                                    success: function (responseNew) {
                                        var s = '';
                                        $.each(responseNew.DDData, function (UDFVal, ValCount) {
                                            if ($.inArray(UDFVal, _selectedHUDF) > -1) {
                                                s += '<option selected="selected" value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')' + '</option>';
                                            }
                                            else {
                                                s += '<option value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')' + '</option>';
                                            }
                                        });

                                        //Destroy widgets before reapplying the filter
                                        $('[id="' + responseNew.UDFColName + '"]').empty();
                                        $('[id="' + responseNew.UDFColName + '"]').append(s);
                                        $('[id="' + responseNew.UDFColName + '"]').multiselect("refresh");
                                        $('[id="' + responseNew.UDFColName + '"]').multiselectfilter("refresh");

                                        var currentNewDataCount = $('select#' + responseNew.UDFColName + ' option').length;
                                        if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                            $(".alltoolchkns" + UDFUniqueID + "").hide();
                                            $(".moretoolchkns" + UDFUniqueID + "").hide();
                                        }
                                    },
                                    error: function (responseNew) {
                                        // through errror message
                                    }
                                });

                            }
                            else {
                                var CollapseObject = $('#' + UDFUniqueID + 'Collapse' + suFix)
                                if (ui.checked) {
                                    if ($(CollapseObject).text().indexOf(ui.text) == -1) {
                                        $(CollapseObject).append("<span>" + ui.text + "</span>");
                                    }
                                }
                                else {
                                    if (ui.checked == undefined) {
                                        $(CollapseObject).html('');
                                    }
                                    else if (!ui.checked) {
                                        var text = $(CollapseObject).html();
                                        text = text.replace("<span>" + ui.text + "</span>", '');
                                        $(CollapseObject).html(text);
                                    }
                                    else
                                        $(CollapseObject).html('');
                                }
                            }
                            if (UDFUniqueID == "UDF1") {
                                ToolCheckOutUDF1 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                            }
                            else if (UDFUniqueID == "UDF2") {
                                ToolCheckOutUDF2 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                            }
                            else if (UDFUniqueID == "UDF3") {
                                ToolCheckOutUDF3 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                            }
                            else if (UDFUniqueID == "UDF4") {
                                ToolCheckOutUDF4 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                            }
                            else {
                                ToolCheckOutUDF5 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })


                                if ($(CollapseObject).text().trim() != '')
                                    $(CollapseObject).show();
                                else
                                    $(CollapseObject).hide();


                                if ($(CollapseObject).find('span').length <= 2) {
                                    $(CollapseObject).scrollTop(0).height(50);
                                }
                                else {
                                    $(CollapseObject).scrollTop(0).height(100);
                                }
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();
                },
                error: function (response) {

                    // through errror message
                }
            });
        });
    }
    if (suFix2 != null && suFix2 != '' && suFix2 != undefined) {
        $("select[name='udflist" + suFix2 + "']").each(function (index) {
            var tmpTableName2 = tableName;
            var UDFUniqueID = this.getAttribute('UID');
            if (tableName == "ToolMaster" || tableName == "KitToolMaster" || tableName == "KitToolMasterNew" || tableName == "ToolMasterNew") {
                if (this.id.toLowerCase().indexOf("_tech") >= 0) {
                    if (tableName == "KitToolMaster" || tableName == "KitToolMasterNew")
                        tmpTableName2 = "KitToolTechnicianUDF";
                    else
                        tmpTableName2 = "ToolTechnicianUDF";
                }
            }
            $.ajax({
                'url': '/Master/GetUDFDDData',
                data: { TableName: tmpTableName2, UDFName: this.id, UDFUniqueID: UDFUniqueID, IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab, ToolCurrentTab: ToolListTab },
                success: function (response) {
                    var s = '';
                    if (response.DDData != null) {
                        $.each(response.DDData, function (UDFVal, ValCount) {
                            s += '<option value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')' + '</option>';
                        });
                    }
                    var UDFColumnNameTemp = response.UDFColName.toString().replace("_dd", "").replace(suFix2, "");


                    //Destroy widgets before reapplying the filter
                    $('[id="' + response.UDFColName + '"]').empty();
                    $('[id="' + response.UDFColName + '"]').multiselect('destroy');
                    $('[id="' + response.UDFColName + '"]').multiselectfilter('destroy');

                    $('[id="' + response.UDFColName + '"]').append(s);

                    var currentDataCount = $('select#' + response.UDFColName + ' option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".alltooltechns" + UDFUniqueID + "").hide();
                        $(".moretooltechns" + UDFUniqueID + "").hide();
                    }

                    $('[id="' + response.UDFColName + '"]').multiselect
                        (
                            {
                                noneSelectedText: UDFColumnNameTemp, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return UDFColumnNameTemp + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    var CollapseObject = $('#' + UDFUniqueID + 'Collapse' + suFix2)
                                    $(CollapseObject).html('');

                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($(CollapseObject).text().indexOf(ui.target[i].text) == -1) {
                                            $(CollapseObject).append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $(CollapseObject).show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                                var currentDataCount = $('select#' + this.id + ' option').length;
                                var _selectedTUDF = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });
                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".alltooltechns" + UDFUniqueID + "").hide();
                                    $(".moretooltechns" + UDFUniqueID + "").hide();
                                }
                                $.ajax({
                                    'url': '/Master/GetUDFDDData',
                                    data: { TableName: tmpTableName2, UDFName: this.id, UDFUniqueID: UDFUniqueID, IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab, ToolCurrentTab: ToolListTab, LoadDataCount: _loaddataCount },
                                    success: function (responseNew) {
                                        var s = '';
                                        $.each(responseNew.DDData, function (UDFVal, ValCount) {
                                            if ($.inArray(UDFVal, _selectedTUDF) > -1) {
                                                s += '<option selected="selected" value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')' + '</option>';
                                            }
                                            else {
                                                s += '<option value="' + UDFVal + '">' + UDFVal + ' (' + ValCount + ')' + '</option>';
                                            }
                                        });
                                        //Destroy widgets before reapplying the filter
                                        $('[id="' + responseNew.UDFColName + '"]').empty();
                                        $('[id="' + responseNew.UDFColName + '"]').append(s);
                                        $('[id="' + responseNew.UDFColName + '"]').multiselect("refresh");
                                        $('[id="' + responseNew.UDFColName + '"]').multiselectfilter("refresh");

                                        var currentNewDataCount = $('select#' + responseNew.UDFColName + ' option').length;
                                        if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                            $(".alltooltechns" + UDFUniqueID + "").hide();
                                            $(".moretooltechns" + UDFUniqueID + "").hide();
                                        }
                                    },
                                    error: function (responseNew) {
                                        // through errror message
                                    }
                                });

                            }
                            else {
                                var CollapseObject = $('#' + UDFUniqueID + 'Collapse' + suFix2)
                                if (ui.checked) {
                                    if ($(CollapseObject).text().indexOf(ui.text) == -1) {
                                        $(CollapseObject).append("<span>" + ui.text + "</span>");
                                    }
                                }
                                else {
                                    if (ui.checked == undefined) {
                                        $(CollapseObject).html('');
                                    }
                                    else if (!ui.checked) {
                                        var text = $(CollapseObject).html();
                                        text = text.replace("<span>" + ui.text + "</span>", '');
                                        $(CollapseObject).html(text);
                                    }
                                    else
                                        $(CollapseObject).html('');
                                }
                            }
                            if (UDFUniqueID == "UDF1") {
                                ToolTechUDF1 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                            }
                            else if (UDFUniqueID == "UDF2") {
                                ToolTechUDF2 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                            }
                            else if (UDFUniqueID == "UDF3") {
                                ToolTechUDF3 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                            }
                            else if (UDFUniqueID == "UDF4") {
                                ToolTechUDF4 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                            }
                            else {
                                ToolTechUDF5 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return escape(input.value);
                                })
                            }

                            if ($(CollapseObject).text().trim() != '')
                                $(CollapseObject).show();
                            else
                                $(CollapseObject).hide();


                            if ($(CollapseObject).find('span').length <= 2) {
                                $(CollapseObject).scrollTop(0).height(50);
                            }
                            else {
                                $(CollapseObject).scrollTop(0).height(100);
                            }

                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();
                },
                error: function (response) {

                    // through errror message
                }
            });
        });
    }
}

function GetAssetNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'AssetCategory', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });
            //Destroy widgets before reapplying the filter
            $("#AssetsCategory").empty();
            $("#AssetsCategory").multiselect('destroy');
            $("#AssetsCategory").multiselectfilter('destroy');

            $("#AssetsCategory").append(s);
            $("#AssetsCategory").multiselect(
                {
                    noneSelectedText: vAssetsCategory, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return vAssetsCategory + ': ' + numChecked + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#AssetsCategoryCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#AssetsCategoryCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#AssetsCategoryCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#AssetsCategoryCollapse").show();
                    }
                }
            )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#AssetsCategoryCollapse").text().indexOf(ui.text) == -1) {
                            $("#AssetsCategoryCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#AssetsCategoryCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#AssetsCategoryCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#AssetsCategoryCollapse").html(text);
                        }
                        else
                            $("#AssetsCategoryCollapse").html('');
                    }
                    AssetCategoryValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.AssetsCategory = AssetCategoryValue;

                    if ($("#AssetsCategoryCollapse").text().trim() != '')
                        $("#AssetsCategoryCollapse").show();
                    else
                        $("#AssetsCategoryCollapse").hide();


                    if ($("#AssetsCategoryCollapse").find('span').length <= 2) {
                        $("#AssetsCategoryCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#AssetsCategoryCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("AssetsCategory");
        },
        error: function (response) {
            // through errror message
        }
    });



}

function GetToolsNarrowSearchData(_IsArchived, _IsDeleted, TableName, _TabName) {
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: TableName, TextFieldName: 'ToolCategory', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName },
        success: function (response) {
            var selectedToolCategoryValue = ToolCategoryValue;
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });
            //Destroy widgets before reapplying the filter
            $("#ToolsCategoryCollapse").html('');
            $("#ToolsCategory").empty();
            $("#ToolsCategory").multiselect('destroy');
            $("#ToolsCategory").multiselectfilter('destroy');

            $("#ToolsCategory").append(s);
            var wasToolCategorySelected = (typeof (selectedToolCategoryValue) != undefined && selectedToolCategoryValue !== undefined && selectedToolCategoryValue != null && selectedToolCategoryValue != '' && selectedToolCategoryValue.length > 0)
                ? true : false;

            if (typeof (wasToolCategorySelected) != undefined && wasToolCategorySelected !== undefined && wasToolCategorySelected == true) {
                for (var i = 0; i < selectedToolCategoryValue.length; i++) {
                    $("#ToolsCategory").multiselect("widget").find(":checkbox[value='" + selectedToolCategoryValue[i] + "']").attr("checked", "checked");
                    $("#ToolsCategory option[value='" + selectedToolCategoryValue[i] + "']").attr("selected", 1);

                    var text = $("#ToolsCategory option[value='" + selectedToolCategoryValue[i] + "']").text()
                    if ($("#ToolsCategoryCollapse").text().indexOf(text) == -1) {
                        $("#ToolsCategoryCollapse").append("<span>" + text + "</span>");
                    }
                }
                $("#ToolsCategory").multiselect('reload');
            }

            var currentDataCount = $('select#ToolsCategory option').length;
            if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                $(".alltoolscategory").hide();
                $(".moretoolscategory").hide();
            }

            $("#ToolsCategory").multiselect(
                {
                    noneSelectedText: ToolsCategory, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ToolsCategory + ': ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#ToolsCategoryCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#ToolsCategoryCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#ToolsCategoryCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#ToolsCategoryCollapse").show();
                    }
                }
            ).unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                    if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                        var currentDataCount = $('select#ToolsCategory option').length;
                        var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        });

                        var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                        if (event.type == 'multiselectloadall') {
                            _loaddataCount = -1;
                            $(".alltoolscategory").hide();
                            $(".moretoolscategory").hide();
                        }
                        $.ajax({
                            'url': '/Master/GetNarrowDDData',
                            data: { TableName: TableName, TextFieldName: 'ToolCategory', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName, LoadDataCount: _loaddataCount },
                            success: function (response) {
                                var s = '';
                                $.each(response.DDData, function (ValData, ValCount) {

                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("#ToolsCategory").empty();
                                $("#ToolsCategory").append(s);
                                $("#ToolsCategory").multiselect("refresh");
                                $("#ToolsCategory").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#ToolsCategory option').length;

                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".alltoolscategory").hide();
                                    $(".moretoolscategory").hide();
                                }
                            },
                            error: function (response) {
                                // through errror message
                            }
                        });

                    }
                    else {

                        if (ui.checked) {
                            if ($("#ToolsCategoryCollapse").text().indexOf(ui.text) == -1) {
                                $("#ToolsCategoryCollapse").append("<span>" + ui.text + "</span>");
                            }
                        }
                        else {
                            if (ui.checked == undefined) {
                                $("#ToolsCategoryCollapse").html('');
                            }
                            else if (!ui.checked) {
                                var text = $("#ToolsCategoryCollapse").html();
                                text = text.replace("<span>" + ui.text + "</span>", '');
                                $("#ToolsCategoryCollapse").html(text);
                            }
                            else
                                $("#ToolsCategoryCollapse").html('');
                        }
                    }
                    ToolCategoryValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.ToolsCategory = ToolCategoryValue;

                    if ($("#ToolsCategoryCollapse").text().trim() != '')
                        $("#ToolsCategoryCollapse").show();
                    else
                        $("#ToolsCategoryCollapse").hide();


                    if ($("#ToolsCategoryCollapse").find('span').length <= 2) {
                        $("#ToolsCategoryCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ToolsCategoryCollapse").scrollTop(0).height(100);
                    }

                    if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("ToolsCategory");
        },
        error: function (response) {
            // through errror message
        }
    });

    $("#ToolsTechnician").empty();
    $("#ToolsTechnician").multiselect('destroy');
    $("#ToolsTechnician").multiselectfilter('destroy');

    $("#ToolsTechnician").multiselect(
        {
            noneSelectedText: TechnicianList, selectedList: 5,
            selectedText: function (numChecked, numTotal, checkedItems) {
                return TechnicianList + ': ' + numChecked + ' ' + selected;
            }
        },
        {
            checkAll: function (ui) {
                $("#ToolsTechnicianCollapse").html('');
                for (var i = 0; i <= ui.target.length - 1; i++) {
                    if ($("#ToolsTechnicianCollapse").text().indexOf(ui.target[i].text) == -1) {
                        $("#ToolsTechnicianCollapse").append("<span>" + ui.target[i].text + "</span>");
                    }
                }
                $("#ToolsTechnicianCollapse").show();
            }
        },
        {
            beforeopen: function () {
                if ($("#ToolsTechnician option").length == 0) {
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: TableName, TextFieldName: 'ToolsTechnician', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName },
                        success: function (response) {
                            var selectedToolTechnician = ToolTechnicianValue;
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {
                                var ArrData = ValData.toString().split('[###]');
                                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                            });
                            $("#ToolsTechnicianCollapse").html('');
                            $("#ToolsTechnician").empty();
                            $("#ToolsTechnician").append(s);

                            var wasTechnicianSelected = (typeof (selectedToolTechnician) != undefined && selectedToolTechnician !== undefined && selectedToolTechnician != null && selectedToolTechnician != '' && selectedToolTechnician.length > 0)
                                ? true : false;

                            if (typeof (wasTechnicianSelected) != undefined && wasTechnicianSelected !== undefined && wasTechnicianSelected == true) {
                                for (var i = 0; i < selectedToolTechnician.length; i++) {
                                    $("#ToolsTechnician").multiselect("widget").find(":checkbox[value='" + selectedToolTechnician[i] + "']").attr("checked", "checked");
                                    $("#ToolsTechnician option[value='" + selectedToolTechnician[i] + "']").attr("selected", 1);
                                    var text = $("#ToolsTechnician option[value='" + selectedToolTechnician[i] + "']").text()
                                    if ($("#ToolsTechnicianCollapse").text().indexOf(text) == -1) {
                                        $("#ToolsTechnicianCollapse").append("<span>" + text + "</span>");
                                    }
                                }
                                //$("select").multiselect('reload');
                                $("#ToolsTechnician").multiselect('reload');
                                //$("#ToolsTechnician").multiselect("refresh");                    
                            }
                            $("#ToolsTechnician").multiselect("refresh");
                            $("#ToolsTechnician").multiselectfilter("refresh");
                        },
                        error: function (response) {
                            // through errror message
                        }
                    });
                }
            }
        }
    ).unbind("multiselectclick multiselectcheckall multiselectuncheckall")
        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
            if (ui.checked) {
                if ($("#ToolsTechnicianCollapse").text().indexOf(ui.text) == -1) {
                    $("#ToolsTechnicianCollapse").append("<span>" + ui.text + "</span>");
                }
            }
            else {
                if (ui.checked == undefined) {
                    $("#ToolsTechnicianCollapse").html('');
                }
                else if (!ui.checked) {
                    var text = $("#ToolsTechnicianCollapse").html();
                    text = text.replace("<span>" + ui.text + "</span>", '');
                    $("#ToolsTechnicianCollapse").html(text);
                }
                else
                    $("#ToolsTechnicianCollapse").html('');
            }
            ToolTechnicianValue = $.map($(this).multiselect("getChecked"), function (input) {
                return input.value;
            })

            _NarrowSearchSave.objSearch.ToolsTechnician = ToolTechnicianValue;

            if ($("#ToolsTechnicianCollapse").text().trim() != '')
                $("#ToolsTechnicianCollapse").show();
            else
                $("#ToolsTechnicianCollapse").hide();


            if ($("#ToolsTechnicianCollapse").find('span').length <= 2) {
                $("#ToolsTechnicianCollapse").scrollTop(0).height(50);
            }
            else {
                $("#ToolsTechnicianCollapse").scrollTop(0).height(100);
            }
            if (!isFromNarrowSearchClear) {
                clearGlobalIfNotInFocus();
                DoNarrowSearch();
            }

            if (ToolTechnicianValue.length == 1) {
                $("input#btnToolCheckInAllBottom").show();
            }
            else {
                $("input#btnToolCheckInAllBottom").hide();
            }
        }).multiselectfilter();

    _NarrowSearchSave.setControlValue("ToolsTechnician");

    if (TableName == 'TechnicianMaster') {
        $.ajax({
            'url': '/Master/GetDDData',
            data: { TableName: 'TechnicianMaster', TextFieldName: 'Technician' },
            success: function (response) {
                var selectedTechnicianValue = TechicianValue;
                var s = '';
                $.each(response.DDData, function (i, val) {
                    s += '<option value="' + val.ID + '">' + val.Text + '</option>';
                });
                $("#ToolsTechnician").append(s);
                var wasTechnicianSelected = (typeof (selectedTechnicianValue) != undefined && selectedTechnicianValue !== undefined && selectedTechnicianValue != null && selectedTechnicianValue != '' && selectedTechnicianValue.length > 0)
                    ? true : false;

                if (typeof (wasTechnicianSelected) != undefined && wasTechnicianSelected !== undefined && wasTechnicianSelected == true) {
                    for (var i = 0; i < selectedTechnicianValue.length; i++) {
                        $("#ToolsTechnician").multiselect("widget").find(":checkbox[value='" + selectedTechnicianValue[i] + "']").attr("checked", "checked");
                        $("#ToolsTechnician option[value='" + selectedTechnicianValue[i] + "']").attr("selected", 1);
                    }
                    $("#ToolsTechnician").multiselect('reload');
                }
                $("#ToolsTechnician").multiselect(
                    {
                        noneSelectedText: TechnicianList, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return TechnicianList + numChecked + ' ' + selected;
                        }
                    }
                )
                    .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                    .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                        TechicianValue = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        })
                    });
            },
            error: function (response) {
                // through errror message
            }
        });
    }

    $.ajax({
        'url': '/Master/GetDDData',
        data: { TableName: 'WorkOrder', TextFieldName: 'WOName' },
        success: function (response) {
            var selectedWorkorderValue = WorkOrderValue;
            var s = '';
            $.each(response.DDData, function (i, val) {
                s += '<option value="' + val.ID + '">' + val.Text + '</option>';
            });
            $("#ToolsWorkOrder").append(s);
            var wasWorkorderSelected = (typeof (selectedWorkorderValue) != undefined && selectedWorkorderValue !== undefined && selectedWorkorderValue != null && selectedWorkorderValue != '' && selectedWorkorderValue.length > 0)
                ? true : false;

            if (typeof (wasWorkorderSelected) != undefined && wasWorkorderSelected !== undefined && wasWorkorderSelected == true) {
                for (var i = 0; i < selectedWorkorderValue.length; i++) {
                    $("#ToolsWorkOrder").multiselect("widget").find(":checkbox[value='" + selectedWorkorderValue[i] + "']").attr("checked", "checked");
                    $("#ToolsWorkOrder option[value='" + selectedWorkorderValue[i] + "']").attr("selected", 1);
                }
                $("#ToolsWorkOrder").multiselect('reload');
            }
            $("#ToolsWorkOrder").multiselect(
                {
                    noneSelectedText: 'Work Order', selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return 'Work Order: ' + numChecked + ' ' + selected;
                    }
                }
            )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    WorkOrderValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                });
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: TableName, TextFieldName: 'Location', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName },
        success: function (response) {
            var selectedLocationValue = LocationValue;
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ToolsLocationCollapse").html('');
            $("#ToolsLocation").empty();
            $("#ToolsLocation").multiselect('destroy');
            $("#ToolsLocation").multiselectfilter('destroy');

            $("#ToolsLocation").append(s);
            var wasLocationSelected = (typeof (selectedLocationValue) != undefined && selectedLocationValue !== undefined && selectedLocationValue != null && selectedLocationValue != '' && selectedLocationValue.length > 0)
                ? true : false;

            if (typeof (wasLocationSelected) != undefined && wasLocationSelected !== undefined && wasLocationSelected == true) {
                for (var i = 0; i < selectedLocationValue.length; i++) {
                    $("#ToolsLocation").multiselect("widget").find(":checkbox[value='" + selectedLocationValue[i] + "']").attr("checked", "checked");
                    $("#ToolsLocation option[value='" + selectedLocationValue[i] + "']").attr("selected", 1);
                    var text = $("#ToolsLocation option[value='" + selectedLocationValue[i] + "']").text()
                    if ($("#ToolsLocationCollapse").text().indexOf(text) == -1) {
                        $("#ToolsLocationCollapse").append("<span>" + text + "</span>");
                    }
                }
                $("#ToolsLocation").multiselect('reload');
            }
            var currentDataCount = $('select#ToolsLocation option').length;
            if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                $(".alltoolslocation").hide();
                $(".moretoolslocation").hide();
            }
            $("#ToolsLocation").multiselect(
                {
                    noneSelectedText: ToolsLocation, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ToolsLocation + ': ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#ToolsLocationCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#ToolsLocationCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#ToolsLocationCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#ToolsLocationCollapse").show();
                    }
                }
            ).unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                    if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                        var currentDataCount = $('select#ToolsLocation option').length;
                        var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        });

                        var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                        if (event.type == 'multiselectloadall') {
                            _loaddataCount = -1;
                            $(".alltoolslocation").hide();
                            $(".moretoolslocation").hide();
                        }
                        $.ajax({
                            'url': '/Master/GetNarrowDDData',
                            data: { TableName: TableName, TextFieldName: 'Location', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName, LoadDataCount: _loaddataCount },
                            success: function (response) {
                                var s = '';
                                $.each(response.DDData, function (ValData, ValCount) {

                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("#ToolsLocation").empty();
                                $("#ToolsLocation").append(s);
                                $("#ToolsLocation").multiselect("refresh");
                                $("#ToolsLocation").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#ToolsLocation option').length;

                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".alltoolslocation").hide();
                                    $(".moretoolslocation").hide();
                                }
                            },
                            error: function (response) {
                                // through errror message
                            }
                        });

                    }
                    else {
                        if (ui.checked) {
                            if ($("#ToolsLocationCollapse").text().indexOf(ui.text) == -1) {
                                $("#ToolsLocationCollapse").append("<span>" + ui.text + "</span>");
                            }
                        }
                        else {
                            if (ui.checked == undefined) {
                                $("#ToolsLocationCollapse").html('');
                            }
                            else if (!ui.checked) {
                                var text = $("#ToolsLocationCollapse").html();
                                text = text.replace("<span>" + ui.text + "</span>", '');
                                $("#ToolsLocationCollapse").html(text);
                            }
                            else
                                $("#ToolsLocationCollapse").html('');
                        }
                    }
                    LocationValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.ToolsLocation = LocationValue;

                    if ($("#ToolsLocationCollapse").text().trim() != '')
                        $("#ToolsLocationCollapse").show();
                    else
                        $("#ToolsLocationCollapse").hide();


                    if ($("#ToolsLocationCollapse").find('span').length <= 2) {
                        $("#ToolsLocationCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ToolsLocationCollapse").scrollTop(0).height(100);
                    }
                    if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();

                        DoNarrowSearch();
                    }
                }).multiselectfilter();

            _NarrowSearchSave.setControlValue("ToolsLocation");
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: TableName, TextFieldName: 'ToolMaintenance', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName },
        success: function (response) {
            var selectedMaintenanceValue = MaintenanceValue;
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('###');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ToolCheckoutCollapse").html('');
            $("#ToolCheckout").empty();
            $("#ToolCheckout").multiselect('destroy');
            $("#ToolCheckout").multiselectfilter('destroy');

            $("#ToolCheckout").append(s);
            var wasToolCheckoutSelected = (typeof (selectedMaintenanceValue) != undefined && selectedMaintenanceValue !== undefined && selectedMaintenanceValue != null && selectedMaintenanceValue != '' && selectedMaintenanceValue.length > 0)
                ? true : false;

            if (typeof (wasToolCheckoutSelected) != undefined && wasToolCheckoutSelected !== undefined && wasToolCheckoutSelected == true) {
                for (var i = 0; i < selectedMaintenanceValue.length; i++) {
                    $("#ToolCheckout").multiselect("widget").find(":checkbox[value='" + selectedMaintenanceValue[i] + "']").attr("checked", "checked");
                    $("#ToolCheckout option[value='" + selectedMaintenanceValue[i] + "']").attr("selected", 1);
                    var text = $("#ToolCheckout option[value='" + selectedMaintenanceValue[i] + "']").text()
                    if ($("#ToolCheckoutCollapse").text().indexOf(text) == -1) {
                        $("#ToolCheckoutCollapse").append("<span>" + text + "</span>");
                    }
                }
                $("#ToolCheckout").multiselect('reload');
            }
            $("#ToolCheckout").multiselect(
                {
                    noneSelectedText: ToolsMaintenance, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ToolsMaintenance + ': ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#ToolCheckoutCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#ToolCheckoutCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#ToolCheckoutCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#ToolCheckoutCollapse").show();
                    }
                }
            )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ToolCheckoutCollapse").text().indexOf(ui.text) == -1) {
                            $("#ToolCheckoutCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ToolCheckoutCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ToolCheckoutCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ToolCheckoutCollapse").html(text);
                        }
                        else
                            $("#ToolCheckoutCollapse").html('');
                    }
                    MaintenanceValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.ToolCheckout = MaintenanceValue;

                    if ($("#ToolCheckoutCollapse").text().trim() != '')
                        $("#ToolCheckoutCollapse").show();
                    else
                        $("#ToolCheckoutCollapse").hide();


                    if ($("#ToolCheckoutCollapse").find('span').length <= 2) {
                        $("#ToolCheckoutCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ToolCheckoutCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("ToolCheckout");
        },
        error: function (response) {
            // through errror message
        }
    });
    $("#ToolsMaintenance").multiselect(
        {
            noneSelectedText: 'Tool Maintenance', selectedList: 5,
            selectedText: function (numChecked, numTotal, checkedItems) {
                return 'Tool Maintenance: ' + numChecked + ' ' + selected;
            }
        }
    ).unbind("multiselectclick multiselectcheckall multiselectuncheckall")
        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
            ToolMaintanceValue = $.map($(this).multiselect("getChecked"), function (input) {
                return input.value;
            })
        });
}




function GetPullNarrowSearchData1(_TableName, _IsArchived, _IsDeleted) {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'SupplierName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#PullSupplier").empty();
            $("#PullSupplier").multiselect('destroy');
            $("#PullSupplier").multiselectfilter('destroy');

            $("#PullSupplier").append(s);
            $("#PullSupplier").multiselect
                (
                    {
                        noneSelectedText: Supplier, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Supplier + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullSupplierCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullSupplierCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullSupplierCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullSupplierCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullSupplierCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullSupplierCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullSupplierCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullSupplierCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullSupplierCollapse").html(text);
                        }
                        else
                            $("#PullSupplierCollapse").html('');
                    }
                    PullSupplierNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#PullSupplierCollapse").text().trim() != '')
                        $("#PullSupplierCollapse").show();
                    else
                        $("#PullSupplierCollapse").hide();


                    if ($("#PullSupplierCollapse").find('span').length <= 2) {
                        $("#PullSupplierCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullSupplierCollapse").scrollTop(0).height(100);
                    }

                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });




    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Manufacturer', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#Manufacturer").empty();
            $("#Manufacturer").multiselect('destroy');
            $("#Manufacturer").multiselectfilter('destroy');

            $("#Manufacturer").append(s);
            $("#Manufacturer").multiselect
                (
                    {
                        noneSelectedText: Manufacturer, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Manufacturer + ' ' + numChecked + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ManufacturerCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ManufacturerCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ManufacturerCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ManufacturerCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ManufacturerCollapse").text().indexOf(ui.text) == -1) {
                            $("#ManufacturerCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ManufacturerCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ManufacturerCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ManufacturerCollapse").html(text);
                        }
                        else
                            $("#ManufacturerCollapse").html('');
                    }
                    ManufacturerNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#ManufacturerCollapse").text().trim() != '')
                        $("#ManufacturerCollapse").show();
                    else
                        $("#ManufacturerCollapse").hide();


                    if ($("#ManufacturerCollapse").find('span').length <= 2) {
                        $("#ManufacturerCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ManufacturerCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'ItemLocation', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ItemLocation").empty();
            $("#ItemLocation").multiselect('destroy');
            $("#ItemLocation").multiselectfilter('destroy');

            $("#ItemLocation").append(s);
            $("#ItemLocation").multiselect
                (
                    {
                        noneSelectedText: ItemLocation, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return ItemLocation + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ItemLocationCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ItemLocationCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ItemLocationCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ItemLocationCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ItemLocationCollapse").text().indexOf(ui.text) == -1) {
                            $("#ItemLocationCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ItemLocationCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ItemLocationCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ItemLocationCollapse").html(text);
                        }
                        else
                            $("#ItemLocationCollapse").html('');
                    }
                    ItemLocationNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#ItemLocationCollapse").text().trim() != '')
                        $("#ItemLocationCollapse").show();
                    else
                        $("#ItemLocationCollapse").hide();


                    if ($("#ItemLocationCollapse").find('span').length <= 2) {
                        $("#ItemLocationCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ItemLocationCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Category', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#PullCategory").empty();
            $("#PullCategory").multiselect('destroy');
            $("#PullCategory").multiselectfilter('destroy');

            $("#PullCategory").append(s);
            $("#PullCategory").multiselect
                (
                    {
                        noneSelectedText: Category, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Category + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullCategoryCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullCategoryCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullCategoryCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullCategoryCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullCategoryCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullCategoryCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullCategoryCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullCategoryCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullCategoryCollapse").html(text);
                        }
                        else
                            $("#PullCategoryCollapse").html('');
                    }
                    PullCategoryNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#PullCategoryCollapse").text().trim() != '')
                        $("#PullCategoryCollapse").show();
                    else
                        $("#PullCategoryCollapse").hide();


                    if ($("#PullCategoryCollapse").find('span').length <= 2) {
                        $("#PullCategoryCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullCategoryCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'ProjectSpend', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#PullProjectSpend").empty();
            $("#PullProjectSpend").multiselect('destroy');
            $("#PullProjectSpend").multiselectfilter('destroy');

            $("#PullProjectSpend").append(s);
            $("#PullProjectSpend").multiselect
                (
                    {
                        noneSelectedText: ProjectSpend, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return ProjectSpend + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullProjectSpendCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullProjectSpendCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullProjectSpendCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullProjectSpendCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullProjectSpendCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullProjectSpendCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullProjectSpendCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullProjectSpendCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullProjectSpendCollapse").html(text);
                        }
                        else
                            $("#PullProjectSpendCollapse").html('');
                    }
                    PullProjectSpendNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#PullProjectSpendCollapse").text().trim() != '')
                        $("#PullProjectSpendCollapse").show();
                    else
                        $("#PullProjectSpendCollapse").hide();


                    if ($("#PullProjectSpendCollapse").find('span').length <= 2) {
                        $("#PullProjectSpendCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullProjectSpendCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'WorkOrder', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#PullWorkOrder").empty();
            $("#PullWorkOrder").multiselect('destroy');
            $("#PullWorkOrder").multiselectfilter('destroy');

            $("#PullWorkOrder").append(s);
            $("#PullWorkOrder").multiselect
                (
                    {
                        noneSelectedText: WorkOrder, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return WorkOrder + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullWorkOrderCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullWorkOrderCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullWorkOrderCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullWorkOrderCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullWorkOrderCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullWorkOrderCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullWorkOrderCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullWorkOrderCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullWorkOrderCollapse").html(text);
                        }
                        else
                            $("#PullWorkOrderCollapse").html('');
                    }
                    PullWorkOrderValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#PullWorkOrderCollapse").text().trim() != '')
                        $("#PullWorkOrderCollapse").show();
                    else
                        $("#PullWorkOrderCollapse").hide();


                    if ($("#PullWorkOrderCollapse").find('span').length <= 2) {
                        $("#PullWorkOrderCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullWorkOrderCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Requisition', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#PullRequistion").empty();
            $("#PullRequistion").multiselect('destroy');
            $("#PullRequistion").multiselectfilter('destroy');

            $("#PullRequistion").append(s);
            $("#PullRequistion").multiselect
                (
                    {
                        noneSelectedText: Requisition, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Requisition + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullRequistionCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullRequistionCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullRequistionCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullRequistionCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullRequistionCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullRequistionCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullRequistionCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullRequistionCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullRequistionCollapse").html(text);
                        }
                        else
                            $("#PullRequistionCollapse").html('');
                    }
                    PullRequistionarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#PullRequistionCollapse").text().trim() != '')
                        $("#PullRequistionCollapse").show();
                    else
                        $("#PullRequistionCollapse").hide();


                    if ($("#PullRequistionCollapse").find('span').length <= 2) {
                        $("#PullRequistionCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullRequistionCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'OrderNumber', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#PullOrderNumber").empty();
            $("#PullOrderNumber").multiselect('destroy');
            $("#PullOrderNumber").multiselectfilter('destroy');

            $("#PullOrderNumber").append(s);
            $("#PullOrderNumber").multiselect
                (
                    {
                        noneSelectedText: OrderNumber, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return OrderNumber + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullOrderNumberCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullOrderNumberCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullOrderNumberCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullOrderNumberCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullOrderNumberCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullOrderNumberCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullOrderNumberCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullOrderNumberCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullOrderNumberCollapse").html(text);
                        }
                        else
                            $("#PullOrderNumberCollapse").html('');
                    }
                    PullOrderNumbernarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#PullOrderNumberCollapse").text().trim() != '')
                        $("#PullOrderNumberCollapse").show();
                    else
                        $("#PullOrderNumberCollapse").hide();


                    if ($("#PullOrderNumberCollapse").find('span').length <= 2) {
                        $("#PullOrderNumberCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullOrderNumberCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'ActionType', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[0] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#PullActionType").empty();
            $("#PullActionType").multiselect('destroy');
            $("#PullActionType").multiselectfilter('destroy');

            $("#PullActionType").append(s);
            $("#PullActionType").multiselect
                (
                    {
                        noneSelectedText: ActionType, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return ActionType + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullActionTypeCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullActionTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullActionTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullActionTypeCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullActionTypeCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullActionTypeCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullActionTypeCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullActionTypeCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullActionTypeCollapse").html(text);
                        }
                        else
                            $("#PullActionTypeCollapse").html('');
                    }
                    PullActionTypeNarroSearchValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;

                    })
                    if ($("#PullActionTypeCollapse").text().trim() != '')
                        $("#PullActionTypeCollapse").show();
                    else
                        $("#PullActionTypeCollapse").hide();


                    if ($("#PullActionTypeCollapse").find('span').length <= 2) {
                        $("#PullActionTypeCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullActionTypeCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });


}


/////// /////// /////// GetPullNarrowSearchData/////// /////// /////// /////// ///////

function GetPullNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {
    //alert(typeof $("#PullProjectSpend"));
    if ($("#PullSupplier").length > 0) {
        //if ($('#ddlPullPOStatus') != undefined) {
        $("#PullSupplier").empty();
        $("#PullSupplier").multiselect('destroy');
        $("#PullSupplier").multiselectfilter('destroy');




        $("#PullSupplier").append();
        $("#PullSupplier").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    loadMoreText: loadMoreText,
                    loadAllText: loadAllText,
                    noneSelectedText: Supplier, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return Supplier + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#PullSupplierCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#PullSupplierCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#PullSupplierCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#PullSupplierCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {

                if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                    var currentDataCount = $('select#PullSupplier option').length;
                    var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });

                    var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                    if (event.type == 'multiselectloadall') {
                        _loaddataCount = -1;
                        $(".allpullsupp").hide();
                        $(".morepullsupp").hide();
                    }
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: _TableName, TextFieldName: 'SupplierName', IsArchived: _IsArchived, IsDeleted: _IsDeleted, LoadDataCount: _loaddataCount },
                        success: function (response) {
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {

                                var ArrData = ValData.toString().split('[###]');
                                if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                    s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                                else {
                                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                            });

                            //Destroy widgets before reapplying the filter
                            $("#PullSupplier").empty();
                            $("#PullSupplier").append(s);
                            $("#PullSupplier").multiselect("refresh");
                            $("#PullSupplier").multiselectfilter("refresh");

                            var currentNewDataCount = $('select#PullSupplier option').length;
                            if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                $(".allpullsupp").hide();
                                $(".morepullsupp").hide();
                            }

                        },
                        error: function (response) {
                            // through errror message
                        }
                    });

                }
                else {
                    if (ui.checked) {
                        if ($("#PullSupplierCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullSupplierCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullSupplierCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullSupplierCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullSupplierCollapse").html(text);
                        }
                        else
                            $("#PullSupplierCollapse").html('');
                    }
                    PullSupplierNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.PullSupplier = PullSupplierNarroValues;
                }


                if ($("#PullSupplierCollapse").text().trim() != '')
                    $("#PullSupplierCollapse").show();
                else
                    $("#PullSupplierCollapse").hide();


                if ($("#PullSupplierCollapse").find('span').length <= 2) {
                    $("#PullSupplierCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#PullSupplierCollapse").scrollTop(0).height(100);
                }
                if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }
            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });

    }
    if ($("#Manufacturer").length > 0) {

        $("#Manufacturer").empty();
        $("#Manufacturer").multiselect('destroy');
        $("#Manufacturer").multiselectfilter('destroy');

        $("#Manufacturer").append();
        $("#Manufacturer").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    loadMoreText: loadMoreText,
                    loadAllText: loadAllText,
                    noneSelectedText: Manufacturer, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return Manufacturer + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#ManufacturerCollapse").html('');
                        for (var i = 0; i <= $(this).multiselect("getChecked").length; i++) {
                            if ($("#ManufacturerCollapse").text().indexOf($(this).multiselect("getChecked")[i].title) == -1) {
                                $("#ManufacturerCollapse").append("<span>" + $(this).multiselect("getChecked")[i].title + "</span>");
                            }
                        }
                        $("#ManufacturerCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall", function (event, ui) {

                if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                    var currentDataCount = $('select#Manufacturer option').length;
                    var _selectedMN = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });

                    var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                    if (event.type == 'multiselectloadall') {
                        _loaddataCount = -1;
                        $(".allpullman").hide();
                        $(".morepullman").hide();
                    }
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: _TableName, TextFieldName: 'Manufacturer', IsArchived: _IsArchived, IsDeleted: _IsDeleted, LoadDataCount: _loaddataCount },
                        success: function (response) {
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {

                                var ArrData = ValData.toString().split('[###]');
                                if ($.inArray(ArrData[1], _selectedMN) > -1) {
                                    s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                                else {
                                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                            });

                            //Destroy widgets before reapplying the filter
                            $("#Manufacturer").empty();
                            $("#Manufacturer").append(s);
                            $("#Manufacturer").multiselect("refresh");
                            $("#Manufacturer").multiselectfilter("refresh");

                            var currentNewDataCount = $('select#Manufacturer option').length;
                            if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                $(".allpullman").hide();
                                $(".morepullman").hide();
                            }
                        },
                        error: function (response) {
                            // through errror message
                        }
                    });

                }
                else {

                    if (ui.checked) {
                        if ($("#ManufacturerCollapse").text().indexOf(ui.text) == -1) {
                            $("#ManufacturerCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ManufacturerCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ManufacturerCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ManufacturerCollapse").html(text);
                        }
                        else
                            $("#ManufacturerCollapse").html('');
                    }
                    ManufacturerNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.Manufacturer = ManufacturerNarroValues;
                }
                if ($("#ManufacturerCollapse").text().trim() != '')
                    $("#ManufacturerCollapse").show();
                else
                    $("#ManufacturerCollapse").hide();


                if ($("#ManufacturerCollapse").find('span').length <= 2) {
                    $("#ManufacturerCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#ManufacturerCollapse").scrollTop(0).height(100);
                }

                if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }

            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
    }
    if ($("#ItemLocation").length > 0) {
        $("#ItemLocation").empty();
        $("#ItemLocation").multiselect('destroy');
        $("#ItemLocation").multiselectfilter('destroy');

        $("#ItemLocation").append();
        $("#ItemLocation").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    noneSelectedText: ItemLocation, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ItemLocation + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#ItemLocationCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#ItemLocationCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#ItemLocationCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#ItemLocationCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                if (ui.checked) {
                    if ($("#ItemLocationCollapse").text().indexOf(ui.text) == -1) {
                        $("#ItemLocationCollapse").append("<span>" + ui.text + "</span>");
                    }
                }
                else {
                    if (ui.checked == undefined) {
                        $("#ItemLocationCollapse").html('');
                    }
                    else if (!ui.checked) {
                        var text = $("#ItemLocationCollapse").html();
                        text = text.replace("<span>" + ui.text + "</span>", '');
                        $("#ItemLocationCollapse").html(text);
                    }
                    else
                        $("#ItemLocationCollapse").html('');
                }
                ItemLocationNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                    return input.value;
                })
                _NarrowSearchSave.objSearch.ItemLocation = ItemLocationNarroValues;
                if ($("#ItemLocationCollapse").text().trim() != '')
                    $("#ItemLocationCollapse").show();
                else
                    $("#ItemLocationCollapse").hide();


                if ($("#ItemLocationCollapse").find('span').length <= 2) {
                    $("#ItemLocationCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#ItemLocationCollapse").scrollTop(0).height(100);
                }
                if (!isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }

            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
    }

    if ($("#PullCategory").length > 0) {
        $("#PullCategory").empty();
        $("#PullCategory").multiselect('destroy');
        $("#PullCategory").multiselectfilter('destroy');

        $("#PullCategory").append();
        $("#PullCategory").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    loadMoreText: loadMoreText,
                    loadAllText: loadAllText,
                    noneSelectedText: Category, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return Category + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#PullCategoryCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#PullCategoryCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#PullCategoryCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#PullCategoryCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall", function (event, ui) {
                if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                    var currentDataCount = $('select#PullCategory option').length;
                    var _selectedCT = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });

                    var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                    if (event.type == 'multiselectloadall') {
                        _loaddataCount = -1;
                        $(".allpullcat").hide();
                        $(".morepullcat").hide();
                    }
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: _TableName, TextFieldName: 'Category', IsArchived: _IsArchived, IsDeleted: _IsDeleted, LoadDataCount: _loaddataCount },
                        success: function (response) {
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {

                                var ArrData = ValData.toString().split('[###]');
                                if ($.inArray(ArrData[1], _selectedCT) > -1) {
                                    s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                                else {
                                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                            });

                            //Destroy widgets before reapplying the filter
                            $("#PullCategory").empty();
                            $("#PullCategory").append(s);
                            $("#PullCategory").multiselect("refresh");
                            $("#PullCategory").multiselectfilter("refresh");

                            var currentNewDataCount = $('select#PullCategory option').length;
                            if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                $(".allpullcat").hide();
                                $(".morepullcat").hide();
                            }
                        },
                        error: function (response) {
                            // through errror message
                        }
                    });

                }
                else {
                    if (ui.checked) {
                        if ($("#PullCategoryCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullCategoryCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullCategoryCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullCategoryCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullCategoryCollapse").html(text);
                        }
                        else
                            $("#PullCategoryCollapse").html('');
                    }
                    PullCategoryNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.PullCategory = PullCategoryNarroValues;
                }
                if ($("#PullCategoryCollapse").text().trim() != '')
                    $("#PullCategoryCollapse").show();
                else
                    $("#PullCategoryCollapse").hide();


                if ($("#PullCategoryCollapse").find('span').length <= 2) {
                    $("#PullCategoryCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#PullCategoryCollapse").scrollTop(0).height(100);
                }

                if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }
            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
    }
    if ($("#PullProjectSpend").length > 0) {
        $("#PullProjectSpend").empty();
        $("#PullProjectSpend").multiselect('destroy');
        $("#PullProjectSpend").multiselectfilter('destroy');

        $("#PullProjectSpend").append();
        $("#PullProjectSpend").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    loadMoreText: loadMoreText,
                    loadAllText: loadAllText,
                    noneSelectedText: ProjectSpend, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ProjectSpend + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#PullProjectSpendCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#PullProjectSpendCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#PullProjectSpendCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#PullProjectSpendCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                    var currentDataCount = $('select#PullProjectSpend option').length;
                    var _selectedPMS = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });

                    var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                    if (event.type == 'multiselectloadall') {
                        _loaddataCount = -1;
                        $(".allpullpsm").hide();
                        $(".morepullpsm").hide();
                    }
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: _TableName, TextFieldName: 'ProjectSpend', IsArchived: _IsArchived, IsDeleted: _IsDeleted, LoadDataCount: _loaddataCount },
                        success: function (response) {
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {

                                var ArrData = ValData.toString().split('[###]');
                                if ($.inArray(ArrData[1], _selectedPMS) > -1) {
                                    s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                                else {
                                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                            });

                            //Destroy widgets before reapplying the filter
                            $("#PullProjectSpend").empty();
                            $("#PullProjectSpend").append(s);
                            $("#PullProjectSpend").multiselect("refresh");
                            $("#PullProjectSpend").multiselectfilter("refresh");

                            var currentNewDataCount = $('select#PullProjectSpend option').length;
                            if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                $(".allpullpsm").hide();
                                $(".morepullpsm").hide();
                            }

                        },
                        error: function (response) {
                            // through errror message
                        }
                    });

                }
                else {
                    if (ui.checked) {
                        if ($("#PullProjectSpendCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullProjectSpendCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullProjectSpendCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullProjectSpendCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullProjectSpendCollapse").html(text);
                        }
                        else
                            $("#PullProjectSpendCollapse").html('');
                    }
                    PullProjectSpendNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.PullProjectSpend = PullProjectSpendNarroValues;
                }
                if ($("#PullProjectSpendCollapse").text().trim() != '')
                    $("#PullProjectSpendCollapse").show();
                else
                    $("#PullProjectSpendCollapse").hide();


                if ($("#PullProjectSpendCollapse").find('span').length <= 2) {
                    $("#PullProjectSpendCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#PullProjectSpendCollapse").scrollTop(0).height(100);
                }

                if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }
            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
    }

    if ($("#PullWorkOrder").length > 0) {
        $("#PullWorkOrder").empty();
        $("#PullWorkOrder").multiselect('destroy');
        $("#PullWorkOrder").multiselectfilter('destroy');

        $("#PullWorkOrder").append();
        $("#PullWorkOrder").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    loadMoreText: loadMoreText,
                    loadAllText: loadAllText,
                    noneSelectedText: WorkOrder, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return WorkOrder + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#PullWorkOrderCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#PullWorkOrderCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#PullWorkOrderCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#PullWorkOrderCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                    var currentDataCount = $('select#PullWorkOrder option').length;
                    var _selectedWO = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });

                    var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                    if (event.type == 'multiselectloadall') {
                        _loaddataCount = -1;
                        $(".allpullwo").hide();
                        $(".morepullwo").hide();
                    }
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: _TableName, TextFieldName: 'WorkOrder', IsArchived: _IsArchived, IsDeleted: _IsDeleted, LoadDataCount: _loaddataCount },
                        success: function (response) {
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {

                                var ArrData = ValData.toString().split('[###]');
                                if ($.inArray(ArrData[1], _selectedWO) > -1) {
                                    s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                                else {
                                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                            });

                            //Destroy widgets before reapplying the filter
                            $("#PullWorkOrder").empty();
                            $("#PullWorkOrder").append(s);
                            $("#PullWorkOrder").multiselect("refresh");
                            $("#PullWorkOrder").multiselectfilter("refresh");

                            var currentNewDataCount = $('select#PullWorkOrder option').length;
                            if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                $(".allpullwo").hide();
                                $(".morepullwo").hide();
                            }

                        },
                        error: function (response) {
                            // through errror message
                        }
                    });

                }
                else {

                    if (ui.checked) {
                        if ($("#PullWorkOrderCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullWorkOrderCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullWorkOrderCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullWorkOrderCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullWorkOrderCollapse").html(text);
                        }
                        else
                            $("#PullWorkOrderCollapse").html('');
                    }
                    PullWorkOrderValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });
                    _NarrowSearchSave.objSearch.PullWorkOrder = PullWorkOrderValues;
                }
                if ($("#PullWorkOrderCollapse").text().trim() != '')
                    $("#PullWorkOrderCollapse").show();
                else
                    $("#PullWorkOrderCollapse").hide();


                if ($("#PullWorkOrderCollapse").find('span').length <= 2) {
                    $("#PullWorkOrderCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#PullWorkOrderCollapse").scrollTop(0).height(100);
                }
                if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }
            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
    }
    if ($("#PullRequistion").length > 0) {
        $("#PullRequistion").empty();
        $("#PullRequistion").multiselect('destroy');
        $("#PullRequistion").multiselectfilter('destroy');

        $("#PullRequistion").append();
        $("#PullRequistion").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    loadMoreText: loadMoreText,
                    loadAllText: loadAllText,
                    noneSelectedText: Requisition, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return Requisition + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#PullRequistionCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#PullRequistionCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#PullRequistionCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#PullRequistionCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                    var currentDataCount = $('select#PullRequistion option').length;
                    var _selectedREQ = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });

                    var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                    if (event.type == 'multiselectloadall') {
                        _loaddataCount = -1;
                        $(".allpullreq").hide();
                        $(".morepullreq").hide();
                    }
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: _TableName, TextFieldName: 'Requisition', IsArchived: _IsArchived, IsDeleted: _IsDeleted, LoadDataCount: _loaddataCount },
                        success: function (response) {
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {

                                var ArrData = ValData.toString().split('[###]');
                                if ($.inArray(ArrData[1], _selectedREQ) > -1) {
                                    s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                                else {
                                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                            });

                            //Destroy widgets before reapplying the filter
                            $("#PullRequistion").empty();
                            $("#PullRequistion").append(s);
                            $("#PullRequistion").multiselect("refresh");
                            $("#PullRequistion").multiselectfilter("refresh");

                            var currentNewDataCount = $('select#PullRequistion option').length;
                            if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                $(".allpullreq").hide();
                                $(".morepullreq").hide();
                            }
                        },
                        error: function (response) {
                            // through errror message
                        }
                    });

                }
                else {
                    if (ui.checked) {
                        if ($("#PullRequistionCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullRequistionCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullRequistionCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullRequistionCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullRequistionCollapse").html(text);
                        }
                        else
                            $("#PullRequistionCollapse").html('');
                    }
                    PullRequistionarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.PullRequistion = PullRequistionarroValues;
                }
                if ($("#PullRequistionCollapse").text().trim() != '')
                    $("#PullRequistionCollapse").show();
                else
                    $("#PullRequistionCollapse").hide();


                if ($("#PullRequistionCollapse").find('span').length <= 2) {
                    $("#PullRequistionCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#PullRequistionCollapse").scrollTop(0).height(100);
                }
                if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }
            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });

    }
    if ($("#PullOrderNumber").length > 0) {
        $("#PullOrderNumber").empty();
        $("#PullOrderNumber").multiselect('destroy');
        $("#PullOrderNumber").multiselectfilter('destroy');

        $("#PullOrderNumber").append();
        $("#PullOrderNumber").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    loadMoreText: loadMoreText,
                    loadAllText: loadAllText,
                    noneSelectedText: OrderNumber, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return OrderNumber + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#PullOrderNumberCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#PullOrderNumberCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#PullOrderNumberCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#PullOrderNumberCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                    var currentDataCount = $('select#PullOrderNumber option').length;
                    var _selecteORDNM = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });

                    var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                    if (event.type == 'multiselectloadall') {
                        _loaddataCount = -1;
                        $(".allpullordnm").hide();
                        $(".morepullordnm").hide();
                    }
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: _TableName, TextFieldName: 'OrderNumber', IsArchived: _IsArchived, IsDeleted: _IsDeleted, LoadDataCount: _loaddataCount },
                        success: function (response) {
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {

                                var ArrData = ValData.toString().split('[###]');
                                if ($.inArray(ArrData[1], _selecteORDNM) > -1) {
                                    s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                                else {
                                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                            });

                            //Destroy widgets before reapplying the filter
                            $("#PullOrderNumber").empty();
                            $("#PullOrderNumber").append(s);
                            $("#PullOrderNumber").multiselect("refresh");
                            $("#PullOrderNumber").multiselectfilter("refresh");

                            var currentNewDataCount = $('select#PullOrderNumber option').length;
                            if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                $(".allpullordnm").hide();
                                $(".morepullordnm").hide();
                            }
                        },
                        error: function (response) {
                            // through errror message
                        }
                    });

                }
                else {
                    if (ui.checked) {
                        if ($("#PullOrderNumberCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullOrderNumberCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullOrderNumberCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullOrderNumberCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullOrderNumberCollapse").html(text);
                        }
                        else
                            $("#PullOrderNumberCollapse").html('');
                    }
                    PullOrderNumbernarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.PullOrderNumber = PullOrderNumbernarroValues;
                }
                if ($("#PullOrderNumberCollapse").text().trim() != '')
                    $("#PullOrderNumberCollapse").show();
                else
                    $("#PullOrderNumberCollapse").hide();


                if ($("#PullOrderNumberCollapse").find('span').length <= 2) {
                    $("#PullOrderNumberCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#PullOrderNumberCollapse").scrollTop(0).height(100);
                }
                if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }
            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });

    }

    ///////// Pull Supplier Account No Start //////////    
    if ($("#PullSupplierAccountNumber").length > 0) {
        $("#PullSupplierAccountNumber").empty();
        $("#PullSupplierAccountNumber").multiselect('destroy');
        $("#PullSupplierAccountNumber").multiselectfilter('destroy');

        $("#PullSupplierAccountNumber").append();
        $("#PullSupplierAccountNumber").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    loadMoreText: loadMoreText,
                    loadAllText: loadAllText,
                    noneSelectedText: AccountNumber, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return AccountNumber + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#PullSupplierAccountNumberCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#PullSupplierAccountNumberCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#PullSupplierAccountNumberCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#PullSupplierAccountNumberCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {

                    var currentDataCount = $('select#PullSupplierAccountNumber option').length;
                    var _selecteORDNM = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    });

                    var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                    if (event.type == 'multiselectloadall') {
                        _loaddataCount = -1;
                        $(".allpullsupplieraccountnm").hide();
                        $(".morepullsupplieraccountnm").hide();
                    }
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: _TableName, TextFieldName: 'SupplierAccountNumber', IsArchived: _IsArchived, IsDeleted: _IsDeleted, LoadDataCount: _loaddataCount },
                        success: function (response) {
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {

                                var ArrData = ValData.toString().split('[###]');
                                if ($.inArray(ArrData[1], _selecteORDNM) > -1) {
                                    s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                                else {
                                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                }
                            });

                            //Destroy widgets before reapplying the filter
                            $("#PullSupplierAccountNumber").empty();
                            $("#PullSupplierAccountNumber").append(s);
                            $("#PullSupplierAccountNumber").multiselect("refresh");
                            $("#PullSupplierAccountNumber").multiselectfilter("refresh");

                            var currentNewDataCount = $('select#PullSupplierAccountNumber option').length;
                            if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                $(".allpullsupplieraccountnm").hide();
                                $(".morepullsupplieraccountnm").hide();
                            }
                        },
                        error: function (response) {
                            // through errror message
                        }
                    });

                }
                else {
                    if (ui.checked) {
                        if ($("#PullSupplierAccountNumberCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullSupplierAccountNumberCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullSupplierAccountNumberCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullSupplierAccountNumberCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullSupplierAccountNumberCollapse").html(text);
                        }
                        else
                            $("#PullSupplierAccountNumberCollapse").html('');
                    }
                    PullSupplierAccountNumberValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.PullSupplierAccountNumber = PullSupplierAccountNumberValues;
                }
                if ($("#PullSupplierAccountNumberCollapse").text().trim() != '')
                    $("#PullSupplierAccountNumberCollapse").show();
                else
                    $("#PullSupplierAccountNumberCollapse").hide();


                if ($("#PullSupplierAccountNumberCollapse").find('span').length <= 2) {
                    $("#PullSupplierAccountNumberCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#PullSupplierAccountNumberCollapse").scrollTop(0).height(100);
                }
                if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }
            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });

    }

    ///////// Pull Supplier Account No End //////////

    if ($("#PullActionType").length > 0) {
        $("#PullActionType").empty();
        $("#PullActionType").multiselect('destroy');
        $("#PullActionType").multiselectfilter('destroy');

        $("#PullActionType").append();
        $("#PullActionType").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    noneSelectedText: ActionType, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ActionType + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#PullActionTypeCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#PullActionTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#PullActionTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#PullActionTypeCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                if (ui.checked) {
                    if ($("#PullActionTypeCollapse").text().indexOf(ui.text) == -1) {
                        $("#PullActionTypeCollapse").append("<span>" + ui.text + "</span>");
                    }
                }
                else {
                    if (ui.checked == undefined) {
                        $("#PullActionTypeCollapse").html('');
                    }
                    else if (!ui.checked) {
                        var text = $("#PullActionTypeCollapse").html();
                        text = text.replace("<span>" + ui.text + "</span>", '');
                        $("#PullActionTypeCollapse").html(text);
                    }
                    else
                        $("#PullActionTypeCollapse").html('');
                }
                PullActionTypeNarroSearchValue = $.map($(this).multiselect("getChecked"), function (input) {
                    return input.value;

                })
                _NarrowSearchSave.objSearch.PullActionType = PullActionTypeNarroSearchValue;
                if ($("#PullActionTypeCollapse").text().trim() != '')
                    $("#PullActionTypeCollapse").show();
                else
                    $("#PullActionTypeCollapse").hide();


                if ($("#PullActionTypeCollapse").find('span').length <= 2) {
                    $("#PullActionTypeCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#PullActionTypeCollapse").scrollTop(0).height(100);
                }
                if (!isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }

            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });

    }


    if ($("#PullConsignment").length > 0) {
        $("#PullConsignment").empty();
        $("#PullConsignment").multiselect('destroy');
        $("#PullConsignment").multiselectfilter('destroy');

        $("#PullConsignment").append();
        $("#PullConsignment").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    noneSelectedText: sConsignment, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return sConsignment + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#PullConsignmentCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#PullConsignmentCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#PullConsignmentCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#PullConsignmentCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                if (ui.checked) {
                    if ($("#PullConsignmentCollapse").text().indexOf(ui.text) == -1) {
                        $("#PullConsignmentCollapse").append("<span>" + ui.text + "</span>");
                    }
                }
                else {
                    if (ui.checked == undefined) {
                        $("#PullConsignmentCollapse").html('');
                    }
                    else if (!ui.checked) {
                        var text = $("#PullConsignmentCollapse").html();
                        text = text.replace("<span>" + ui.text + "</span>", '');
                        $("#PullConsignmentCollapse").html(text);
                    }
                    else
                        $("#PullConsignmentCollapse").html('');
                }
                PullConsignmentNarroSearchValue = $.map($(this).multiselect("getChecked"), function (input) {
                    return input.value;

                })
                _NarrowSearchSave.objSearch.PullConsignment = PullConsignmentNarroSearchValue;

                if ($("#PullConsignmentCollapse").text().trim() != '')
                    $("#PullConsignmentCollapse").show();
                else
                    $("#PullConsignmentCollapse").hide();


                if ($("#PullConsignmentCollapse").find('span').length <= 2) {
                    $("#PullConsignmentCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#PullConsignmentCollapse").scrollTop(0).height(100);
                }
                if (!isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }

            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
    }


    if ($("#ItemTrackingType").length > 0) {
        $("#ItemTrackingType").empty();
        $("#ItemTrackingType").multiselect('destroy');
        $("#ItemTrackingType").multiselectfilter('destroy');

        $("#ItemTrackingType").append();
        $("#ItemTrackingType").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    noneSelectedText: ItemTrackingType, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ItemTrackingType + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#ItemTrackingTypeCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#ItemTrackingTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#ItemTrackingTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#ItemTrackingTypeCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                if (ui.checked) {
                    if ($("#ItemTrackingTypeCollapse").text().indexOf(ui.text) == -1) {
                        $("#ItemTrackingTypeCollapse").append("<span>" + ui.text + "</span>");
                    }
                }
                else {
                    if (ui.checked == undefined) {
                        $("#ItemTrackingTypeCollapse").html('');
                    }
                    else if (!ui.checked) {
                        var text = $("#ItemTrackingTypeCollapse").html();
                        text = text.replace("<span>" + ui.text + "</span>", '');
                        $("#ItemTrackingTypeCollapse").html(text);
                    }
                    else
                        $("#ItemTrackingTypeCollapse").html('');
                }
                ItemTrackingTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                    return input.value;
                })
                _NarrowSearchSave.objSearch.ItemTrackingType = ItemTrackingTypeNarroValues;
                if ($("#ItemTrackingTypeCollapse").text().trim() != '')
                    $("#ItemTrackingTypeCollapse").show();
                else
                    $("#ItemTrackingTypeCollapse").hide();


                if ($("#ItemTrackingTypeCollapse").find('span').length <= 2) {
                    $("#ItemTrackingTypeCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#ItemTrackingTypeCollapse").scrollTop(0).height(100);
                }
                if (!isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }

            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
    }
    if ($("#StockStatus").length > 0) {
        $("#StockStatus").empty();
        $("#StockStatus").multiselect('destroy');
        $("#StockStatus").multiselectfilter('destroy');

        $("#StockStatus").append();
        $("#StockStatus").multiselect
            (
                {
                    checkAllText: Check,
                    uncheckAllText: UnCheck,
                    noneSelectedText: StockStatus, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return StockStatus + ' ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#StockStatusCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#StockStatusCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#StockStatusCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#StockStatusCollapse").show();
                    }
                }
            )
            .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
            .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                if (ui.checked) {
                    if ($("#StockStatusCollapse").text().indexOf(ui.text) == -1) {
                        $("#StockStatusCollapse").append("<span>" + ui.text + "</span>");
                    }
                }
                else {
                    if (ui.checked == undefined) {
                        $("#StockStatusCollapse").html('');
                    }
                    else if (!ui.checked) {
                        var text = $("#StockStatusCollapse").html();
                        text = text.replace("<span>" + ui.text + "</span>", '');
                        $("#StockStatusCollapse").html(text);
                    }
                    else
                        $("#StockStatusCollapse").html('');
                }
                StockStatusTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                    return input.value;
                })
                _NarrowSearchSave.objSearch.StockStatus = StockStatusTypeNarroValues;
                if ($("#StockStatusCollapse").text().trim() != '')
                    $("#StockStatusCollapse").show();
                else
                    $("#StockStatusCollapse").hide();


                if ($("#StockStatusCollapse").find('span').length <= 2) {
                    $("#StockStatusCollapse").scrollTop(0).height(50);
                }
                else {
                    $("#StockStatusCollapse").scrollTop(0).height(100);
                }
                if (!isFromNarrowSearchClear) {
                    clearGlobalIfNotInFocus();
                    DoNarrowSearch();
                }

            }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
    }

    setTimeout(function () { FillNarrowSearches(_TableName, _IsArchived, _IsDeleted); }, 5000);
}

/////// /////// /////// GetPullNarrowSearchData/////// /////// /////// /////// ///////

/////// /////// /////// GetCompanyMasterNarrowSearchData/////// /////// /////// /////// ///////
function GetCompanyMasterNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'EnterpriseName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ddlCompanyEnterprise").empty();
            $("#ddlCompanyEnterprise").multiselect('destroy');
            $("#ddlCompanyEnterprise").multiselectfilter('destroy');

            $("#ddlCompanyEnterprise").append(s);
            $("#ddlCompanyEnterprise").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: EnterpriseRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return EnterpriseRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlCompanyEnterpriseCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlCompanyEnterpriseCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlCompanyEnterpriseCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlCompanyEnterpriseCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ddlCompanyEnterpriseCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlCompanyEnterpriseCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ddlCompanyEnterpriseCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var escapedText = $("<div>").text(ui.text).html();
                            var text = $("#ddlCompanyEnterpriseCollapse").html();
                            text = text.replace("<span>" + escapedText + "</span>", '');
                            $("#ddlCompanyEnterpriseCollapse").html(text);
                        }
                        else
                            $("#ddlCompanyEnterpriseCollapse").html('');
                    }
                    EnterpriseNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ddlCompanyEnterpriseCollapse").text().trim() != '')
                        $("#ddlCompanyEnterpriseCollapse").show();
                    else
                        $("#ddlCompanyEnterpriseCollapse").hide();


                    if ($("#ddlCompanyEnterpriseCollapse").find('span').length <= 2) {
                        $("#ddlCompanyEnterpriseCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlCompanyEnterpriseCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
        },
        error: function (response) {
            // through errror message
        }
    });

}
/////// /////// /////// GetCompanyMasterNarrowSearchData/////// /////// /////// /////// ///////

/////// /////// /////// GetRoomMasterNarrowSearchData/////// /////// /////// /////// ///////
function GetRoomMasterNarrowSearchData_Old(_TableName, _IsArchived, _IsDeleted) {
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'EnterpriseName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ddlCompanyEnterprise").empty();
            $("#ddlCompanyEnterprise").multiselect('destroy');
            $("#ddlCompanyEnterprise").multiselectfilter('destroy');

            $("#ddlCompanyEnterprise").append(s);
            $("#ddlCompanyEnterprise").multiselect
                (
                    {
                        noneSelectedText: EnterpriseRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return EnterpriseRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlCompanyEnterpriseCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlCompanyEnterpriseCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlCompanyEnterpriseCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlCompanyEnterpriseCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ddlCompanyEnterpriseCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlCompanyEnterpriseCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ddlCompanyEnterpriseCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var escapedText = $("<div>").text(ui.text).html();
                            var text = $("#ddlCompanyEnterpriseCollapse").html();
                            text = text.replace("<span>" + escapedText + "</span>", '');
                            $("#ddlCompanyEnterpriseCollapse").html(text);


                        }
                        else
                            $("#ddlCompanyEnterpriseCollapse").html('');
                    }
                    EnterpriseNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ddlCompanyEnterpriseCollapse").text().trim() != '')
                        $("#ddlCompanyEnterpriseCollapse").show();
                    else
                        $("#ddlCompanyEnterpriseCollapse").hide();


                    if ($("#ddlCompanyEnterpriseCollapse").find('span').length <= 2) {
                        $("#ddlCompanyEnterpriseCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlCompanyEnterpriseCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                    GetRoomMasterNarrowSearchDataForCompany(_TableName, _IsArchived, _IsDeleted);

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    GetRoomMasterNarrowSearchDataForCompany(_TableName, _IsArchived, _IsDeleted);

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'InvoiceBranch', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ddlInvoiceBranch").empty();
            $("#ddlInvoiceBranch").multiselect('destroy');
            $("#ddlInvoiceBranch").multiselectfilter('destroy');

            $("#ddlInvoiceBranch").append(s);
            $("#ddlInvoiceBranch").multiselect
                (
                    {
                        noneSelectedText: InvoiceBranchRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return InvoiceBranchRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlInvoiceBranchCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlInvoiceBranchCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlInvoiceBranchCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlInvoiceBranchCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {

                    if (ui.checked) {
                        if ($("#ddlInvoiceBranchCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlInvoiceBranchCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ddlInvoiceBranchCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlInvoiceBranchCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlInvoiceBranchCollapse").html(text);
                        }
                        else
                            $("#ddlInvoiceBranchCollapse").html('');
                    }
                    InvoiceBranchNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ddlInvoiceBranchCollapse").text().trim() != '')
                        $("#ddlInvoiceBranchCollapse").show();
                    else
                        $("#ddlInvoiceBranchCollapse").hide();


                    if ($("#ddlInvoiceBranchCollapse").find('span').length <= 2) {
                        $("#ddlInvoiceBranchCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlInvoiceBranchCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'BillingRoomType', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, val) {
                var str = ValData.toString().split('[###]');
                //if (str[1] == "1") {
                //    s += '<option value="' + str[1] + '"> ' + BillingRoomType_AssetOnlyRES + '  (' + val + ')' + '</option>';
                //}
                //else if (str[1] == "2") {
                //    s += '<option value="' + str[1] + '"> ' + BillingRoomType_eVMIRES + ' (' + val + ')' + '</option>';
                //}
                //else if (str[1] == "3") {
                //    s += '<option value="' + str[1] + '"> ' + BillingRoomType_ManageRES + ' (' + val + ')' + '</option>';
                //}
                //else if (str[1] == "4") {
                //    s += '<option value="' + str[1] + '"> ' + BillingRoomType_ReplenishRES + ' (' + val + ')' + '</option>';
                //}
                //else if (str[1] == "5") {
                //    s += '<option value="' + str[1] + '"> ' + BillingRoomType_RFIDRES + '  (' + val + ')' + '</option>';
                //}
                //else if (str[1] == "6") {
                //    s += '<option value="' + str[1] + '"> ' + BillingRoomType_ToolandAssetOnlyRES + ' (' + val + ')' + '</option>';
                //}
                //else if (str[1] == "7") {
                //    s += '<option value="' + str[1] + '"> ' + BillingRoomType_ToolOnlyRES + ' (' + val + ')' + '</option>';
                //}
                //else if (str[1] == "8") {
                //    s += '<option value="' + str[1] + '"> ' + BillingRoomType_TruckRES + ' (' + val + ')' + '</option>';
                //}
                //else if (str[1] == "9") {
                //    s += '<option value="' + str[1] + '"> ' + BillingRoomType_OptimizeRES + ' (' + val + ')' + '</option>';
                //}
                //else {
                s += '<option value="' + str[1] + '"> ' + str[2] + ' (' + val + ')' + '</option>';
                //}
            });

            //Destroy widgets before reapplying the filter
            $("#ddlBillingRoomType").empty();
            $("#ddlBillingRoomType").multiselect('destroy');
            $("#ddlBillingRoomType").multiselectfilter('destroy');

            $("#ddlBillingRoomType").append(s);
            $("#ddlBillingRoomType")[0].selectedIndex = -1;
            $("#ddlBillingRoomType").multiselect("refresh");
            $("#ddlBillingRoomType").multiselectfilter("refresh");
            $("#ddlBillingRoomType").multiselect
                (
                    {
                        noneSelectedText: BillingRoomTypeRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return BillingRoomTypeRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlBillingRoomTypeCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlBillingRoomTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlBillingRoomTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlBillingRoomTypeCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {


                    if (ui.checked) {
                        if ($("#ddlBillingRoomTypeCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlBillingRoomTypeCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ddlBillingRoomTypeCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlBillingRoomTypeCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlBillingRoomTypeCollapse").html(text);
                        }
                        else
                            $("#ddlBillingRoomTypeCollapse").html('');
                    }
                    BillingRoomTypeTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ddlBillingRoomTypeCollapse").text().trim() != '')
                        $("#ddlBillingRoomTypeCollapse").show();
                    else
                        $("#ddlBillingRoomTypeCollapse").hide();


                    if ($("#ddlBillingRoomTypeCollapse").find('span').length <= 2) {
                        $("#ddlBillingRoomTypeCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlBillingRoomTypeCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}
function GetRoomMasterNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {
    $.ajax({
        url: '/Master/GetNarrowDDData_Room',
        traditional: true,
        data: {
            TableName: 'Room',
            TextFieldNames: ['EnterpriseName', 'CompanyName', 'InvoiceBranch', 'BillingRoomType', 'CreatedBy', 'LastUpdatedBy'],//
            IsArchived: _IsArchived,
            IsDeleted: _IsDeleted
        },
        success: function (response) {
            const allData = response.DDData;
            // Loop through each field (UserType, EnterpriseName, etc.)
            for (const key in allData) {
                const data = allData[key];
                let s = '';
                const totalCount = Object.keys(data).length;
                var counter = 0;
                $.each(data, function (i, val) {
                    const ArrData = i.toString().split('[###]');
                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')</option>';
                    counter++;
                    if (counter == parseInt(loadNarrowSearchDataCount)) {
                        return false;
                    }
                });

                //Destroy widgets before reapplying the filter
                if (key == "EnterpriseName") {
                    $("#ddlCompanyEnterprise").empty();
                    $("#ddlCompanyEnterprise").multiselect('destroy');
                    $("#ddlCompanyEnterprise").multiselectfilter('destroy');

                    $("#ddlCompanyEnterprise").append(s);
                    $("#ddlCompanyEnterprise").multiselect
                        (
                            {
                                noneSelectedText: EnterpriseRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return EnterpriseRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#ddlCompanyEnterpriseCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#ddlCompanyEnterpriseCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#ddlCompanyEnterpriseCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#ddlCompanyEnterpriseCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#ddlCompanyEnterprise option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".allddlCompanyEnterprise").hide();
                                    $(".moreddlCompanyEnterprise").hide();
                                }
                                var s = '';
                                const CompanyEnterprise = allData[key];
                                var entcounter = 0;
                                $.each(CompanyEnterprise, function (ValData, ValCount) {
                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#ddlCompanyEnterprise").empty();
                                $("select#ddlCompanyEnterprise").append(s);
                                $("select#ddlCompanyEnterprise").multiselect("refresh");
                                $("select#ddlCompanyEnterprise").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#ddlCompanyEnterprise option').length;
                                if (parseInt(totalCount) <= parseInt(currentNewDataCount)) {
                                $(".allddlCompanyEnterprise").hide();
                                $(".moreddlCompanyEnterprise").hide();
                                }
                            }
                            if (ui.checked) {
                                if ($("#ddlCompanyEnterpriseCollapse").text().indexOf(ui.text) == -1) {
                                    $("#ddlCompanyEnterpriseCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#ddlCompanyEnterpriseCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var escapedText = $("<div>").text(ui.text).html();
                                    var text = $("#ddlCompanyEnterpriseCollapse").html();
                                    text = text.replace("<span>" + escapedText + "</span>", '');
                                    $("#ddlCompanyEnterpriseCollapse").html(text);


                                }
                                else
                                    $("#ddlCompanyEnterpriseCollapse").html('');
                            }
                            EnterpriseNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            if ($("#ddlCompanyEnterpriseCollapse").text().trim() != '')
                                $("#ddlCompanyEnterpriseCollapse").show();
                            else
                                $("#ddlCompanyEnterpriseCollapse").hide();


                            if ($("#ddlCompanyEnterpriseCollapse").find('span').length <= 2) {
                                $("#ddlCompanyEnterpriseCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#ddlCompanyEnterpriseCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }

                            GetRoomMasterNarrowSearchDataForCompany(_TableName, _IsArchived, _IsDeleted);

                        }).multiselectfilter();
                    var currentDataCount = $('select#ddlCompanyEnterprise option').length;
                    if (parseInt(totalCount) <= parseInt(currentDataCount)) {
                        $(".allddlCompanyEnterprise").hide();
                        $(".moreddlCompanyEnterprise").hide();
                    }

                }
                else if (key == "CompanyName") {
                    if (typeof ($("#ddlCompanySearch").multiselect("getChecked").length) != undefined && $("#ddlCompanySearch").multiselect("getChecked").length > 0) {
                        $("#ddlCompanySearch").multiselect("uncheckAll");
                        $("#ddlCompanySearchCollapse").html('');
                    }
                    $("#ddlCompanySearch").empty();
                    $("#ddlCompanySearch").multiselect('destroy');
                    $("#ddlCompanySearch").multiselectfilter('destroy');
                    //$("#ddlCompanySearch").unbind("multiselectclick multiselectcheckall multiselectuncheckall");
                    $("#ddlCompanySearch").append(s);
                    $("#ddlCompanySearch").multiselect
                        (
                            {
                                noneSelectedText: CompanyRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return CompanyRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#ddlCompanySearchCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#ddlCompanySearchCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#ddlCompanySearchCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#ddlCompanySearchCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall", function (event, ui) {
                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#ddlCompanySearch option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".allddlCompanySearch").hide();
                                    $(".moreddlCompanySearch").hide();
                                }

                                var s = '';
                                const Roomcompany = allData[key];
                                var entcounter = 0;
                                $.each(Roomcompany, function (ValData, ValCount) {

                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#ddlCompanySearch").empty();
                                $("select#ddlCompanySearch").append(s);
                                $("select#ddlCompanySearch").multiselect("refresh");
                                $("select#ddlCompanySearch").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#ddlCompanySearch option').length;
                                if (parseInt(totalCount) <= parseInt(currentNewDataCount)) {
                                    $(".allddlCompanySearch").hide();
                                    $(".moreddlCompanySearch").hide();
                                }
                            }

                            if (ui.checked) {
                                if ($("#ddlCompanySearchCollapse").text().indexOf(ui.text) == -1) {
                                    $("#ddlCompanySearchCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#ddlCompanySearchCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#ddlCompanySearchCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#ddlCompanySearchCollapse").html(text);
                                }
                                else
                                    $("#ddlCompanySearchCollapse").html('');
                            }
                            RoleCompanyNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            if ($("#ddlCompanySearchCollapse").text().trim() != '')
                                $("#ddlCompanySearchCollapse").show();
                            else
                                $("#ddlCompanySearchCollapse").hide();


                            if ($("#ddlCompanySearchCollapse").find('span').length <= 2) {
                                $("#ddlCompanySearchCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#ddlCompanySearchCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }

                        }).multiselectfilter();

                    var currentDataCount = $('select#ddlCompanySearch option').length;
                    if (parseInt(totalCount) <= parseInt(currentDataCount)) {
                        $(".allddlCompanySearch").hide();
                        $(".moreddlCompanySearch").hide();
                    }
                }
                else if (key == "InvoiceBranch") {
                    $("#ddlInvoiceBranch").empty();
                    $("#ddlInvoiceBranch").multiselect('destroy');
                    $("#ddlInvoiceBranch").multiselectfilter('destroy');

                    $("#ddlInvoiceBranch").append(s);
                    $("#ddlInvoiceBranch").multiselect
                        (
                            {
                                noneSelectedText: InvoiceBranchRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return InvoiceBranchRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#ddlInvoiceBranchCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#ddlInvoiceBranchCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#ddlInvoiceBranchCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#ddlInvoiceBranchCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall", function (event, ui) {
                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#ddlInvoiceBranch option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".allddlInvoiceBranch").hide();
                                    $(".moreddlInvoiceBranch").hide();
                                }

                                var s = '';
                                const InvoiceBranch = allData[key];
                                var entcounter = 0;
                                $.each(InvoiceBranch, function (ValData, ValCount) {

                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#ddlInvoiceBranch").empty();
                                $("select#ddlInvoiceBranch").append(s);
                                $("select#ddlInvoiceBranch").multiselect("refresh");
                                $("select#ddlInvoiceBranch").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#ddlInvoiceBranch option').length;
                                if (parseInt(totalCount) <= parseInt(currentNewDataCount)) {
                                    $(".allddlInvoiceBranch").hide();
                                    $(".moreddlInvoiceBranch").hide();
                                }
                            }

                            if (ui.checked) {
                                if ($("#ddlInvoiceBranchCollapse").text().indexOf(ui.text) == -1) {
                                    $("#ddlInvoiceBranchCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#ddlInvoiceBranchCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#ddlInvoiceBranchCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#ddlInvoiceBranchCollapse").html(text);
                                }
                                else
                                    $("#ddlInvoiceBranchCollapse").html('');
                            }
                            InvoiceBranchNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            if ($("#ddlInvoiceBranchCollapse").text().trim() != '')
                                $("#ddlInvoiceBranchCollapse").show();
                            else
                                $("#ddlInvoiceBranchCollapse").hide();


                            if ($("#ddlInvoiceBranchCollapse").find('span').length <= 2) {
                                $("#ddlInvoiceBranchCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#ddlInvoiceBranchCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }

                        }).multiselectfilter();
                    var currentDataCount = $('select#ddlInvoiceBranch option').length;
                    if (parseInt(totalCount) <= parseInt(currentDataCount)) {
                        $(".allddlInvoiceBranch").hide();
                        $(".moreddlInvoiceBranch").hide();
                    }
                }
                else if (key == "BillingRoomType") {
                    $("#ddlBillingRoomType").empty();
                    $("#ddlBillingRoomType").multiselect('destroy');
                    $("#ddlBillingRoomType").multiselectfilter('destroy');

                    $("#ddlBillingRoomType").append(s);
                    $("#ddlBillingRoomType")[0].selectedIndex = -1;
                    $("#ddlBillingRoomType").multiselect("refresh");
                    $("#ddlBillingRoomType").multiselectfilter("refresh");
                    $("#ddlBillingRoomType").multiselect
                        (
                            {
                                noneSelectedText: BillingRoomTypeRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return BillingRoomTypeRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#ddlBillingRoomTypeCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#ddlBillingRoomTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#ddlBillingRoomTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#ddlBillingRoomTypeCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall  multiselectloadmore multiselectloadall", function (event, ui) {
                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#ddlBillingRoomType option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".allddlBillingRoomType").hide();
                                    $(".moreddlBillingRoomType").hide();
                                }

                                var s = '';
                                const BillingRoomType = allData[key];
                                var entcounter = 0;
                                $.each(BillingRoomType, function (ValData, ValCount) {

                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#ddlBillingRoomType").empty();
                                $("select#ddlBillingRoomType").append(s);
                                $("select#ddlBillingRoomType").multiselect("refresh");
                                $("select#ddlBillingRoomType").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#ddlBillingRoomType option').length;
                                if (parseInt(totalCount) <= parseInt(currentNewDataCount)) {
                                    $(".allddlBillingRoomType").hide();
                                    $(".moreddlBillingRoomType").hide();
                                }
                            }


                            if (ui.checked) {
                                if ($("#ddlBillingRoomTypeCollapse").text().indexOf(ui.text) == -1) {
                                    $("#ddlBillingRoomTypeCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#ddlBillingRoomTypeCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#ddlBillingRoomTypeCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#ddlBillingRoomTypeCollapse").html(text);
                                }
                                else
                                    $("#ddlBillingRoomTypeCollapse").html('');
                            }
                            BillingRoomTypeTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            if ($("#ddlBillingRoomTypeCollapse").text().trim() != '')
                                $("#ddlBillingRoomTypeCollapse").show();
                            else
                                $("#ddlBillingRoomTypeCollapse").hide();


                            if ($("#ddlBillingRoomTypeCollapse").find('span').length <= 2) {
                                $("#ddlBillingRoomTypeCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#ddlBillingRoomTypeCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }

                        }).multiselectfilter();
                    var currentDataCount = $('select#ddlBillingRoomType option').length;
                    if (parseInt(totalCount) <= parseInt(currentDataCount)) {
                        $(".allddlBillingRoomType").hide();
                        $(".moreddlBillingRoomType").hide();
                    }
                }
                else if (key == "CreatedBy") {

                    $("#UserCreated").empty();
                    $("#UserCreated").multiselect('destroy');
                    $("#UserCreated").multiselectfilter('destroy');
                    $("#UserCreated").append(s);
                    SetCommonCreatedByNarrowValues(totalCount, key, allData)
                }
                else if (key == "LastUpdatedBy") {

                    $("#UserUpdated").empty();
                    $("#UserUpdated").multiselect('destroy');
                    $("#UserUpdated").multiselectfilter('destroy');
                    $("#UserUpdated").append(s);
                    SetCommonUpdatedByNarrowValues(totalCount, key, allData)
                }
                
            }
        },
        error: function (err) {
            // handle error
        }
    });
}
function GetRoomMasterNarrowSearchDataForCompany(_TableName, _IsArchived, _IsDeleted) {

    var _EnterpriseIds = '';
    _EnterpriseIds += EnterpriseNarroValues

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'CompanyName', IsArchived: _IsArchived, IsDeleted: _IsDeleted, EnterpriseIds: _EnterpriseIds },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            if (typeof ($("#ddlCompanySearch").multiselect("getChecked").length) != undefined && $("#ddlCompanySearch").multiselect("getChecked").length > 0) {
                $("#ddlCompanySearch").multiselect("uncheckAll");
                $("#ddlCompanySearchCollapse").html('');
            }
            $("#ddlCompanySearch").empty();
            $("#ddlCompanySearch").multiselect('destroy');
            $("#ddlCompanySearch").multiselectfilter('destroy');
            //$("#ddlCompanySearch").unbind("multiselectclick multiselectcheckall multiselectuncheckall");
            $("#ddlCompanySearch").append(s);
            $("#ddlCompanySearch").multiselect
                (
                    {
                        noneSelectedText: CompanyRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return CompanyRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlCompanySearchCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlCompanySearchCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlCompanySearchCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlCompanySearchCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {

                    if (ui.checked) {
                        if ($("#ddlCompanySearchCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlCompanySearchCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ddlCompanySearchCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlCompanySearchCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlCompanySearchCollapse").html(text);
                        }
                        else
                            $("#ddlCompanySearchCollapse").html('');
                    }
                    RoleCompanyNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ddlCompanySearchCollapse").text().trim() != '')
                        $("#ddlCompanySearchCollapse").show();
                    else
                        $("#ddlCompanySearchCollapse").hide();


                    if ($("#ddlCompanySearchCollapse").find('span').length <= 2) {
                        $("#ddlCompanySearchCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlCompanySearchCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

}

/////// /////// /////// GetRoomMasterNarrowSearchData/////// /////// /////// /////// ///////

/////// /////// /////// GetMatStagNarrowSearchData/////// /////// /////// /////// ///////
function GetMatStagNarrowSearchData(_TableName, _IsArchived, _IsDeleted, resStagingLocation) {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'BinName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#MatStagLocations").empty();
            $("#MatStagLocations").multiselect('destroy');
            $("#MatStagLocations").multiselectfilter('destroy');

            $("#MatStagLocations").append(s);
            $("#MatStagLocations").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: resStagingLocation, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return resStagingLocation + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#MatStagLocationsCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#MatStagLocationsCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#MatStagLocationsCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#MatStagLocationsCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#MatStagLocationsCollapse").text().indexOf(ui.text) == -1) {
                            $("#MatStagLocationsCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#MatStagLocationsCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#MatStagLocationsCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#MatStagLocationsCollapse").html(text);
                        }
                        else
                            $("#MatStagLocationsCollapse").html('');
                    }
                    MatStagLocationsNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#MatStagLocationsCollapse").text().trim() != '')
                        $("#MatStagLocationsCollapse").show();
                    else
                        $("#MatStagLocationsCollapse").hide();


                    if ($("#MatStagLocationsCollapse").find('span').length <= 2) {
                        $("#MatStagLocationsCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#MatStagLocationsCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
        },
        error: function (response) {
            // through errror message
        }
    });
}
/////// /////// /////// GetMatStagNarrowSearchData/////// /////// /////// /////// ///////


/////// /////// /////// GetMatStagNarrowSearchData/////// /////// /////// /////// ///////
function GetCartNarrowSearchData(_TableName, _IsArchived, _IsDeleted, ReplanishTypeForNarrowSearch) {

    //    $("#CartRT").empty();
    //    $("#CartRT").multiselect('destroy');
    //    $("#CartRT").multiselectfilter('destroy');

    //    $("#CartRT").append(s);

    var _ReplanishType = '';
    var ArrFregments = location.hash.split('#');
    var i = 0;
    for (i = 0; i < ArrFregments.length; i++) {
        if (ArrFregments[i].toUpperCase() == 'LISTORDERS') {
            window.location.hash = '#listOrders';
            _ReplanishType = 'LISTORDERS';
            break;
        }
        else if (ArrFregments[i].toUpperCase() == 'LISTTRANSFERS') {
            window.location.hash = '#listTransfers';
            _ReplanishType = 'LISTTRANSFERS';
            break;
        }
        else if (ArrFregments[i].toUpperCase() == 'LISTSUGGESTEDRETURN') {
            window.location.hash = '#listSuggestedReturn';
            _ReplanishType = 'LISTSUGGESTEDRETURN';
            break;
        }
    }

    $.ajax({
        'url': '/Replenish/GetNarrowCartDDData',
        data: { TextFieldName: 'Category', IsArchived: _IsArchived, IsDeleted: _IsDeleted, ReplenishType: ReplanishTypeForNarrowSearch },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });
            $("#PullCategory").empty();
            $("#PullCategory").multiselect('destroy');
            $("#PullCategory").multiselectfilter('destroy');

            $("#PullCategory").append(s);
            $("#PullCategory").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: Category, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Category + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullCategoryCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullCategoryCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullCategoryCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullCategoryCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullCategoryCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullCategoryCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullCategoryCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullCategoryCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullCategoryCollapse").html(text);
                        }
                        else
                            $("#PullCategoryCollapse").html('');
                    }
                    PullCategoryNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#PullCategoryCollapse").text().trim() != '')
                        $("#PullCategoryCollapse").show();
                    else
                        $("#PullCategoryCollapse").hide();


                    if ($("#PullCategoryCollapse").find('span').length <= 2) {
                        $("#PullCategoryCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullCategoryCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Replenish/GetNarrowCartDDData',
        data: { TableName: _TableName, TextFieldName: 'ReplenishType', IsArchived: _IsArchived, IsDeleted: _IsDeleted, ReplenishType: ReplanishTypeForNarrowSearch },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                if ((_ReplanishType.toUpperCase() == 'LISTORDERS' && ArrData[1].toUpperCase() == 'PURCHASE')
                    || (_ReplanishType.toUpperCase() == 'LISTTRANSFERS' && ArrData[1].toUpperCase() == 'TRANSFER')
                    || (_ReplanishType.toUpperCase() == 'LISTSUGGESTEDRETURN' && ArrData[1].toUpperCase() == 'SUGGESTEDRETURN')) {
                    s += '<option value="' + ArrData[1] + '" selected="selected">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    CartRTNarroValues = ArrData[1];
                    $("#CartRTCollapse").html('');
                    $("#CartRTCollapse").append("<span>" + ArrData[0] + ' (' + ValCount + ')' + "</span>");
                }
                else {
                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                }
            });

            //Destroy widgets before reapplying the filter
            $("#CartRT").empty();
            $("#CartRT").multiselect('destroy');
            $("#CartRT").multiselectfilter('destroy');
            $("#CartRT").html(s);
            $("#CartRT").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: ReplenishType, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return ReplenishType + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#CartRTCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#CartRTCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#CartRTCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#CartRTCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#CartRTCollapse").text().indexOf(ui.text) == -1) {
                            $("#CartRTCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#CartRTCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#CartRTCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#CartRTCollapse").html(text);
                        }
                        else
                            $("#CartRTCollapse").html('');
                    }
                    CartRTNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#CartRTCollapse").text().trim() != '')
                        $("#CartRTCollapse").show();
                    else
                        $("#CartRTCollapse").hide();


                    if ($("#CartRTCollapse").find('span').length <= 2) {
                        $("#CartRTCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#CartRTCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
        }
    });



    $.ajax({
        'url': '/Replenish/GetNarrowCartDDData',
        data: { TableName: _TableName, TextFieldName: 'SupplierName', IsArchived: _IsArchived, IsDeleted: _IsDeleted, ReplenishType: ReplanishTypeForNarrowSearch },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#CartSupplier").empty();
            $("#CartSupplier").multiselect('destroy');
            $("#CartSupplier").multiselectfilter('destroy');

            $("#CartSupplier").append(s);
            $("#CartSupplier").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: Supplier, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Supplier + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#CartSupplierCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#CartSupplierCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#CartSupplierCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#CartSupplierCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#CartSupplierCollapse").text().indexOf(ui.text) == -1) {
                            $("#CartSupplierCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#CartSupplierCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#CartSupplierCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#CartSupplierCollapse").html(text);
                        }
                        else
                            $("#CartSupplierCollapse").html('');
                    }
                    CartSupplierNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#CartSupplierCollapse").text().trim() != '')
                        $("#CartSupplierCollapse").show();
                    else
                        $("#CartSupplierCollapse").hide();


                    if ($("#CartSupplierCollapse").find('span').length <= 2) {
                        $("#CartSupplierCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#CartSupplierCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Replenish/GetNarrowCartDDData',
        data: { TableName: _TableName, TextFieldName: 'ItemLocation', IsArchived: _IsArchived, IsDeleted: _IsDeleted, ReplenishType: ReplanishTypeForNarrowSearch },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ItemLocation").empty();
            $("#ItemLocation").multiselect('destroy');
            $("#ItemLocation").multiselectfilter('destroy');

            $("#ItemLocation").append(s);
            $("#ItemLocation").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: ItemLocation, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return ItemLocation + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ItemLocationCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ItemLocationCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ItemLocationCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ItemLocationCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ItemLocationCollapse").text().indexOf(ui.text) == -1) {
                            $("#ItemLocationCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ItemLocationCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ItemLocationCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ItemLocationCollapse").html(text);
                        }
                        else
                            $("#ItemLocationCollapse").html('');
                    }
                    ItemLocationNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ItemLocationCollapse").text().trim() != '')
                        $("#ItemLocationCollapse").show();
                    else
                        $("#ItemLocationCollapse").hide();


                    if ($("#ItemLocationCollapse").find('span').length <= 2) {
                        $("#ItemLocationCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ItemLocationCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
        },
        error: function (response) {
            // through errror message
        }
    });
    if ($("#StockStatus.stockstatus").length > 0) {
        $.ajax({
            //'url': '/Master/GetNarrowDDData',
            'url': '/Replenish/GetNarrowCartDDData',
            data: { TableName: _TableName, TextFieldName: 'StockStatus', IsArchived: _IsArchived, IsDeleted: _IsDeleted, ReplenishType: ReplanishTypeForNarrowSearch },
            success: function (response) {
                var s = '';
                //$("#StockStatusCollapse").html('');
                $.each(response.DDData, function (ValData, ValCount) {
                    var ArrData = ValData.toString().split('[###]');
                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                });

                //Destroy widgets before reapplying the filter
                $("#StockStatus.stockstatus").empty();
                $("#StockStatus.stockstatus").multiselect('destroy');
                $("#StockStatus.stockstatus").multiselectfilter('destroy');

                $("#StockStatus.stockstatus").append(s);
                //$("#StockStatus")[0].selectedIndex = -1;
                $("#StockStatus.stockstatus").multiselect("refresh");
                $("#StockStatus.stockstatus").multiselectfilter("refresh");
                $("#StockStatus.stockstatus").multiselect
                    (
                        {
                            checkAllText: Check,
                            uncheckAllText: UnCheck,
                            noneSelectedText: StockStatus, selectedList: 5,
                            selectedText: function (numChecked, numTotal, checkedItems) {
                                return StockStatus + ' ' + numChecked + ' ' + selected;
                            }
                        },
                        {
                            checkAll: function (ui) {
                                $("#StockStatusCollapse").html('');
                                for (var i = 0; i <= ui.target.length - 1; i++) {
                                    if ($("#StockStatusCollapse").text().indexOf(ui.target[i].text) == -1) {
                                        $("#StockStatusCollapse").append("<span>" + ui.target[i].text + "</span>");
                                    }
                                }
                                $("#StockStatusCollapse").show();
                            }
                        }
                    )
                    .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                    .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                        if (ui.checked) {
                            //var uiLastest = ui;
                            //$("#StockStatus").multiselect("uncheckAll");
                            //$("#StockStatusCollapse").html('');

                            //ui = uiLastest;
                            //$("ul.ui-multiselect-checkboxes li").each(function () {
                            //  if ($(this).find("input[type=checkbox]").val() == $.trim(ui.value)) {
                            //    $(this).find("input[type=checkbox]").attr("checked", "checked");
                            // }
                            //});
                            //StockStatusTypeNarroValues = ui.value;

                            if ($("#StockStatusCollapse").text().indexOf(ui.text) == -1) {
                                $("#StockStatusCollapse").append("<span>" + ui.text + "</span>");
                            }
                        }
                        else {
                            StockStatusTypeNarroValues = '';
                            if (ui.checked == undefined) {
                                $("#StockStatusCollapse").html('');
                            }
                            else if (!ui.checked) {
                                var text = $("#StockStatusCollapse").html();
                                text = text.replace("<span>" + ui.text + "</span>", '');
                                $("#StockStatusCollapse").html(text);
                            }
                            else
                                $("#StockStatusCollapse").html('');
                        }
                        StockStatusTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                            return input.value;
                        })

                        if ($("#StockStatusCollapse").text().trim() != '')
                            $("#StockStatusCollapse").show();
                        else
                            $("#StockStatusCollapse").hide();


                        if ($("#StockStatusCollapse").find('span').length <= 2) {
                            $("#StockStatusCollapse").scrollTop(0).height(50);
                        }
                        else {
                            $("#StockStatusCollapse").scrollTop(0).height(100);
                        }
                        if (!isFromNarrowSearchClear) {
                            clearGlobalIfNotInFocus();
                            DoNarrowSearch();
                        }

                    }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
            },
            error: function (response) {
                // through errror message
            }
        });


        $.ajax({
            'url': '/Replenish/GetNarrowCartDDData',
            data: { TableName: _TableName, TextFieldName: 'CreatedBy', IsArchived: _IsArchived, IsDeleted: _IsDeleted, ReplenishType: ReplanishTypeForNarrowSearch },
            success: function (response) {
                var s = '';
                if (response.DDData != null) {
                    $.each(response.DDData, function (i, val) {
                        var ArrData = i.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                    });
                }

                //Destroy widgets before reapplying the filter
                $("#UserCreated").empty();
                $("#UserCreated").append(s);
                $("#UserCreated").multiselect("refresh");
            },
            error: function (response) {
                // through errror message            
            }
        });

        $.ajax({
            'url': '/Replenish/GetNarrowCartDDData',
            data: { TableName: _TableName, TextFieldName: 'LastUpdatedBy', IsArchived: _IsArchived, IsDeleted: _IsDeleted, ReplenishType: ReplanishTypeForNarrowSearch },
            success: function (response) {
                var s = '';
                if (response.DDData != null) {
                    $.each(response.DDData, function (i, val) {
                        var ArrData = i.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                    });
                }

                //Destroy widgets before reapplying the filter
                $("#UserUpdated").empty();
                $("#UserUpdated").append(s);
                $("#UserUpdated").multiselect("refresh");
            },
            error: function (response) {
                // through errror message
            }
        });

        /////////////// UDF Start /////////////////

        var UDFObject;
        $("select[name='udflist_CartListItem']").each(function (index) {
            var UDFUniqueID = this.getAttribute('UID');
            $.ajax({
                'url': '/Replenish/GetNarrowCartUDFDDData',
                data: { UDFName: this.id, UDFUniqueID: UDFUniqueID, IsArchived: false, IsDeleted: false, ReplenishType: ReplanishTypeForNarrowSearch },
                success: function (response) {
                    var s = '';
                    if (response.DDData != null) {
                        $.each(response.DDData, function (i, val) {
                            var ArrData = i.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                        });
                    }
                    var UDFColumnNameTemp = response.UDFColName.toString().replace("_dd_CartListItem", "");
                    //$('#' + response.UDFColName).append(s);
                    //$('#' + response.UDFColName).multiselect

                    //Destroy widgets before reapplying the filter
                    $('[id="' + response.UDFColName + '"]').empty();
                    $('[id="' + response.UDFColName + '"]').multiselect('destroy');
                    $('[id="' + response.UDFColName + '"]').multiselectfilter('destroy');

                    $('[id="' + response.UDFColName + '"]').append(s);
                    $('[id="' + response.UDFColName + '"]').multiselect
                        (
                            {
                                checkAllText: Check,
                                uncheckAllText: UnCheck,
                                noneSelectedText: UDFColumnNameTemp, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return UDFColumnNameTemp + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    var CollapseObject = $('#' + UDFUniqueID + 'Collapse_CartListItem')
                                    $(CollapseObject).html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($(CollapseObject).text().indexOf(ui.target[i].text) == -1) {
                                            $(CollapseObject).append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $(CollapseObject).show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                            var CollapseObject = $('#' + UDFUniqueID + 'Collapse_CartListItem')

                            if (ui.checked) {
                                if ($(CollapseObject).text().indexOf(ui.text) == -1) {

                                    $(CollapseObject).append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $(CollapseObject).html('');
                                }
                                else if (!ui.checked) {
                                    var text = $(CollapseObject).html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $(CollapseObject).html(text);
                                }
                                else
                                    $(CollapseObject).html('');
                            }

                            if (UDFUniqueID == "ITEMUDF1") {
                                ItemUDF1 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            else if (UDFUniqueID == "ITEMUDF2") {
                                ItemUDF2 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            else if (UDFUniqueID == "ITEMUDF3") {
                                ItemUDF3 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            else if (UDFUniqueID == "ITEMUDF4") {
                                ItemUDF4 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            else if (UDFUniqueID == "ITEMUDF5") {
                                ItemUDF5 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            else if (UDFUniqueID == "ITEMUDF6") {
                                ItemUDF6 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            else if (UDFUniqueID == "ITEMUDF7") {
                                ItemUDF7 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            else if (UDFUniqueID == "ITEMUDF8") {
                                ItemUDF8 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            else if (UDFUniqueID == "ITEMUDF9") {
                                ItemUDF9 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            else if (UDFUniqueID == "ITEMUDF10") {
                                ItemUDF10 = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                })
                            }
                            if ($(CollapseObject).text().trim() != '')
                                $(CollapseObject).show();
                            else
                                $(CollapseObject).hide();


                            if ($(CollapseObject).find('span').length <= 2) {
                                $(CollapseObject).scrollTop(0).height(50);
                            }
                            else {
                                $(CollapseObject).scrollTop(0).height(100);
                            }
                            if (!isFromNarrowSearchClear) {
                                clearGlobalIMIfNotInFocus();
                                DoNarrowSearch();
                            }

                        }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
                },
                error: function (response) {

                    // through errror message
                }
            });
        });

        /////////////// UDF End ///////////////////

    }
}
/////// /////// /////// GetMatStagNarrowSearchData/////// /////// /////// /////// ///////


function GetICountNarrowSearchData(_TableName, _IsArchived, _IsDeleted, resstrcountname, countstatusresourcename) {
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'CountType', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ICountType").empty();
            $("#ICountType").multiselect('destroy');
            $("#ICountType").multiselectfilter('destroy');
            $("#ICountType").html(s);
            $("#ICountType").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: resstrcountname, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return resstrcountname +" "+ numChecked + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ICountTypeCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ICountTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ICountTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ICountTypeCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ICountTypeCollapse").text().indexOf(ui.text) == -1) {
                            $("#ICountTypeCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ICountTypeCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ICountTypeCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ICountTypeCollapse").html(text);
                        }
                        else
                            $("#ICountTypeCollapse").html('');
                    }
                    ICountTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.ICountType = ICountTypeNarroValues;

                    if ($("#ICountTypeCollapse").text().trim() != '')
                        $("#ICountTypeCollapse").show();
                    else
                        $("#ICountTypeCollapse").hide();


                    if ($("#ICountTypeCollapse").find('span').length <= 2) {
                        $("#ICountTypeCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ICountTypeCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
            _NarrowSearchSave.setControlValue("ICountType");
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'CountStatus', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ICountStatus").empty();
            $("#ICountStatus").multiselect('destroy');
            $("#ICountStatus").multiselectfilter('destroy');
            $("#ICountStatus").html(s);

            $("#ICountStatus").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: countstatusresourcename, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return countstatusresourcename + " " + numChecked + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ICountStatusCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ICountStatusCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ICountStatusCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ICountStatusCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ICountStatusCollapse").text().indexOf(ui.text) == -1) {
                            $("#ICountStatusCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ICountStatusCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ICountStatusCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ICountStatusCollapse").html(text);
                        }
                        else
                            $("#ICountStatusCollapse").html('');
                    }
                    ICountStatusNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.ICountStatus = ICountStatusNarroValues;

                    if ($("#ICountStatusCollapse").text().trim() != '')
                        $("#ICountStatusCollapse").show();
                    else
                        $("#ICountStatusCollapse").hide();


                    if ($("#ICountStatusCollapse").find('span').length <= 2) {
                        $("#ICountStatusCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ICountStatusCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
            _NarrowSearchSave.setControlValue("ICountStatus");
        }
    });
}
/////// /////// /////// GetNotificationNarrowSearchData/////// /////// /////// /////// ///////


function GetNotificationNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'NotificationType', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ntfcNotificationType").empty();
            $("#ntfcNotificationType").multiselect('destroy');
            $("#ntfcNotificationType").multiselectfilter('destroy');
            $("#ntfcNotificationType").html(s);
            $("#ntfcNotificationType").multiselect
                (
                    {
                        noneSelectedText: 'Notification type', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Notification type' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ntfcNotificationTypeCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ntfcNotificationTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ntfcNotificationTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ntfcNotificationTypeCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ntfcNotificationTypeCollapse").text().indexOf(ui.text) == -1) {
                            $("#ntfcNotificationTypeCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ntfcNotificationTypeCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ntfcNotificationTypeCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ntfcNotificationTypeCollapse").html(text);
                        }
                        else
                            $("#ntfcNotificationTypeCollapse").html('');
                    }
                    ntfcNotificationTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ntfcNotificationTypeCollapse").text().trim() != '')
                        $("#ntfcNotificationTypeCollapse").show();
                    else
                        $("#ntfcNotificationTypeCollapse").hide();


                    if ($("#ntfcNotificationTypeCollapse").find('span').length <= 2) {
                        $("#ntfcNotificationTypeCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ntfcNotificationTypeCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Schedule', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ntfcSchedule").empty();
            $("#ntfcSchedule").multiselect('destroy');
            $("#ntfcSchedule").multiselectfilter('destroy');
            $("#ntfcSchedule").html(s);
            $("#ntfcSchedule").multiselect
                (
                    {
                        noneSelectedText: 'Schedules', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Schedule ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ntfcScheduleCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ntfcScheduleCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ntfcScheduleCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ntfcScheduleCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ntfcScheduleCollapse").text().indexOf(ui.text) == -1) {
                            $("#ntfcScheduleCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ntfcScheduleCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ntfcScheduleCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ntfcScheduleCollapse").html(text);
                        }
                        else
                            $("#ntfcScheduleCollapse").html('');
                    }
                    ntfcScheduleNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ntfcScheduleCollapse").text().trim() != '')
                        $("#ntfcScheduleCollapse").show();
                    else
                        $("#ntfcScheduleCollapse").hide();


                    if ($("#ntfcScheduleCollapse").find('span').length <= 2) {
                        $("#ntfcScheduleCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ntfcScheduleCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        }
    });



    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Report', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ntfcReports").empty();
            $("#ntfcReports").multiselect('destroy');
            $("#ntfcReports").multiselectfilter('destroy');
            $("#ntfcReports").html(s);
            $("#ntfcReports").multiselect
                (
                    {
                        noneSelectedText: 'Reports', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Reports ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ntfcReportsCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ntfcReportsCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ntfcReportsCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ntfcReportsCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ntfcReportsCollapse").text().indexOf(ui.text) == -1) {
                            $("#ntfcReportsCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ntfcReportsCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ntfcReportsCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ntfcReportsCollapse").html(text);
                        }
                        else
                            $("#ntfcReportsCollapse").html('');
                    }
                    ntfcReportsNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ntfcReportsCollapse").text().trim() != '')
                        $("#ntfcReportsCollapse").show();
                    else
                        $("#ntfcReportsCollapse").hide();


                    if ($("#ntfcReportsCollapse").find('span').length <= 2) {
                        $("#ntfcReportsCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ntfcReportsCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        }
    });


    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'EmailTemplate', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ntfcEmailTemlate").empty();
            $("#ntfcEmailTemlate").multiselect('destroy');
            $("#ntfcEmailTemlate").multiselectfilter('destroy');
            $("#ntfcEmailTemlate").html(s);
            $("#ntfcEmailTemlate").multiselect
                (
                    {
                        noneSelectedText: 'Email Templates', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Email Templates ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ntfcEmailTemlateCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ntfcEmailTemlateCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ntfcEmailTemlateCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ntfcEmailTemlateCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ntfcEmailTemlateCollapse").text().indexOf(ui.text) == -1) {
                            $("#ntfcEmailTemlateCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ntfcEmailTemlateCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ntfcEmailTemlateCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ntfcEmailTemlateCollapse").html(text);
                        }
                        else
                            $("#ntfcEmailTemlateCollapse").html('');
                    }
                    ntfcEmailTemlateNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ntfcEmailTemlateCollapse").text().trim() != '')
                        $("#ntfcEmailTemlateCollapse").show();
                    else
                        $("#ntfcEmailTemlateCollapse").hide();


                    if ($("#ntfcEmailTemlateCollapse").find('span').length <= 2) {
                        $("#ntfcEmailTemlateCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ntfcEmailTemlateCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        }
    });

}
$(document).ready(function () {
    //$(document).on('focus', ':input', function () {
    $(document).off('focus').on('focus', ':text', function () {
        //this code is to prevent suggestion/autofill in inputs which are not inside form tag. it is generic solution for all input (WI-4382).
        if ($(this).attr('type') == "password") {
            $(this).attr('autocomplete', 'new-password');
        }
        else {
            //$(this).attr('autocomplete', new Date().getTime());
            $(this).attr('autocomplete', 'off');
        }
    });

    //$(document).on('focus', 'form input', function () {
    //    //this code is to prevent suggestion/autofill in inputs which are inside form tag. it is generic solution for all input (WI-4382).
    //    if ($(this).attr('type') == "password") {
    //        $(this).attr('autocomplete', 'new-password');
    //    }
    //    else {
    //        $(this).attr('autocomplete', 'off');
    //    }

    //});

    //SEARCH
    $('#NarroSearchGo').click(function () {
        DoNarrowSearch();
    });

    $('#DateCFrom,#DateCTo').change(function () {

        //var format = RoomDateJSFormat;
        //if ($("#hdDateFormat") != undefined && $("#hdDateFormat").val() != "")
        //    format = $("#hdDateFormat").val();
        //else
        //    format = "m/d/yy";

        var DateCToValid = Date.isValid($('#DateCTo').val(), RoomDateJSFormat); //isDate($('#DateCTo').val());
        var DateCFromValid = Date.isValid($('#DateCFrom').val(), RoomDateJSFormat);

        try {
            $.datepicker.parseDate(RoomDateJSFormat, $('#DateCTo').val());
            DateCToValid = true;
        } catch (e) {
            DateCToValid = false;
        }

        try {
            $.datepicker.parseDate(RoomDateJSFormat, $('#DateCFrom').val());
            DateCFromValid = true;
        } catch (e) {
            DateCFromValid = false;
        }


        if (DateCFromValid && DateCToValid) {


            //$("#global_filter").val('');
            if (!isFromNarrowSearchClear) {
                DoNarrowSearch();
            }
        }
        else {
            if (!DateCFromValid)
                $('#DateCFrom').val('');
            if (!DateCToValid)
                $('#DateCTo').val('');
        }
    });

    $('#DateUFrom,#DateUTo').change(function () {

        var format = '';
        if ($("#hdDateFormat") != undefined && $("#hdDateFormat").val() != "")
            format = $("#hdDateFormat").val();
        else
            format = "m/d/yy";

        if (format.indexOf("yy") >= 0) {
            format = format.replace("yy", "yyyy");
        }
        else if (format.indexOf("y") >= 0) {
            format = format.replace("y", "yy");
        }

        var DateUFromValid = Date.isValid($('#DateUFrom').val(), RoomDateJSFormat);
        var DateUToValid = Date.isValid($('#DateUTo').val(), RoomDateJSFormat);

        try {
            $.datepicker.parseDate(RoomDateJSFormat, $('#DateUFrom').val());
            DateUFromValid = true;
        } catch (e) {
            DateUFromValid = false;
        }

        try {
            $.datepicker.parseDate(RoomDateJSFormat, $('#DateUTo').val());
            DateUToValid = true;
        } catch (e) {
            DateUToValid = false;
        }

        if (DateUFromValid && DateUToValid) {
            // $("#global_filter").val('');


            if (!isFromNarrowSearchClear) {
                DoNarrowSearch();
            }
        }
        else {
            if (!DateUFromValid)
                $('#DateUFrom').val('');
            if (!DateUToValid)
                $('#DateUTo').val('');

        }
    });

    //CLEAR NARROW SEARCH
    $('#NarroSearchClear').click(function () {

        //        $('#DateCFrom').val('');
        //        $('#DateCTo').val('');
        //        $('#DateUFrom').val('');
        //        $('#DateUTo').val('');
        //        $("#UserCreated").multiselect("uncheckAll");
        //        $("#UserCreatedCollapse").html('');
        //        $("#UserUpdated").multiselect("uncheckAll");
        //        $("select[name='udflist']").each(function (index) {
        //            $(this).multiselect("uncheckAll");
        //        });

        //        // clear pull narrow search extra items 
        //        if ($("#PullSupplier") != undefined) {
        //            $("#PullSupplier").multiselect("uncheckAll");
        //            $("#PullSupplierCollapse").html('');
        //            $("#Manufacturer").multiselect("uncheckAll");
        //            $("#ManufacturerCollapse").html('');
        //            $("#PullCategory").multiselect("uncheckAll");
        //            $("#PullCategoryCollapse").html('');

        //            $("#OrderStatus").multiselect("uncheckAll");
        //            $("#OrderStatusCollapse").html('');
        //            //$("#OrderRequiredDate").multiselect("uncheckAll");
        //            $("#OrderSupplier").multiselect("uncheckAll");
        //            $("#OrderSupplierCollapse").html('');

        //            if ($('#PullCost') != undefined) {
        //                $('#PullCost').val('0_-1');
        //            }

        //            if ($('#StockStatus') != undefined) {
        //                $('#StockStatus').val('0');
        //            }

        //            $("#ItemType").multiselect("uncheckAll");
        //            $("#ItemTypeCollapse").html('');

        //        }
        //        if ($("#ToolsCategory") != undefined) {
        //            $("#ToolsCategory").multiselect("uncheckAll");
        //            $("#ToolsCategoryCollapse").html('');
        //            $("#ToolsWorkOrder").multiselect("uncheckAll");
        //            $("#ToolsWorkOrderCollapse").html('');
        //            $("#ToolsMaintenance").multiselect("uncheckAll");
        //            $("#ToolsMaintenanceCollapse").html('');
        //            $("#ToolsLocation").multiselect("uncheckAll");
        //            $("#ToolsLocationCollapse").html('');
        //            if ($('#ToolsCost') != undefined) {
        //                $('#ToolsCost').val('0_-1');
        //            }
        //        }

        //        if ($("#ReqCustomer") != undefined) {
        //            $("#ReqCustomer").multiselect("uncheckAll");
        //            $("#ReqCustomerCollapse").html('');
        //        }

        _NarrowSearchSave.objSearch.reset();

        if (gblActionName.toLowerCase() === "kitlist" || gblActionName.toLowerCase() === "requisitionlist") {
            if (gblActionName.toLowerCase() === "requisitionlist") {
                IsRefreshGrid = true;
                //IsNarrowSearchRefreshRequired = true;
                RequisitionNarrowFilterString = '';
            }

            $.ajax({
                url: "/Master/GetMainFilterSessionValue",
                type: "Get",
                dataType: "json",
                "async": false,
                success: function (response) {
                    if (response.value == "true") {
                        ClickFromMenu(false);
                        if (gblActionName.toLowerCase() === "requisitionlist") {
                            window.location = "/Consume/RequisitionList";
                        }
                        else if (gblActionName.toLowerCase() === "kitlist") {
                            window.location = "/Kit/KitList";
                        }
                        return;
                    }
                },
                error: function (xhr) {
                }
            });
        }

        if (gblActionName.toLowerCase() === "quotelist")
        {
            IsRefreshGrid = true;
            IsNarrowSearchRefreshRequired = true;
            QuoteNarrowFilterString = '';
        }

        isFromNarrowSearchClear = true;
        if ($('#DateCFrom').val() != '') $('#DateCFrom').val('');
        if ($('#DateCTo').val() != '') $('#DateCTo').val('');
        if ($('#DateUFrom').val() != '') $('#DateUFrom').val('');
        if ($('#DateUTo').val() != '') $('#DateUTo').val('');

        var tmpIsClearGlobalFilter;

        if (gblActionName.toLowerCase() != "toollist") {
            if ($('#global_filter').val() != '') $('#global_filter').val('');
        }
        else {
            tmpIsClearGlobalFilter = IsClearGlobalFilter;
            if (IsClearGlobalFilter != false)
            {
                if ($('#global_filter').val() != '') $('#global_filter').val('');
            }
            else
            {
                //RequisitionCurrentTab = "ToolList";
                IsClearGlobalFilter = "";
            }
        }

        if (typeof ($("#UserType.UseListNarrowSearch").multiselect("getChecked").length) != undefined && $("#UserType.UseListNarrowSearch").multiselect("getChecked").length > 0) {
            $("#UserType.UseListNarrowSearch").multiselect("uncheckAll");
            $("#UserTypeCollapse").html('');
        }
        if (typeof ($("#UserRole").multiselect("getChecked").length) != undefined && $("#UserRole").multiselect("getChecked").length > 0) {
            $("#UserRole").multiselect("uncheckAll");
            $("#UserRoleCollapse").html('');
        }


        if (gblActionName.toLowerCase() === "userlist" && typeof ($("#UserCompany").multiselect("getChecked").length) != undefined && $("#UserCompany").multiselect("getChecked").length > 0) {
            $("#UserCompany").multiselect("uncheckAll");
            $("#UserCompanyCollapse").html('');
        }
        if (typeof ($("#UserEnterprise").multiselect("getChecked").length) != undefined && $("#UserEnterprise").multiselect("getChecked").length > 0) {
            $("#UserEnterprise").multiselect("uncheckAll");
            $("#UserEnterpriseCollapse").html('');
        }
        if (gblActionName.toLowerCase() === "userlist" && typeof ($("#UserRoom").multiselect("getChecked").length) != undefined && $("#UserRoom").multiselect("getChecked").length > 0) {
            $("#UserRoom").multiselect("uncheckAll");
            $("#UserRoomCollapse").html('');
        }
        if (gblActionName.toLowerCase() === "rolelist" && typeof ($("#RoleRoom").multiselect("getChecked").length) != undefined && $("#RoleRoom").multiselect("getChecked").length > 0) {
            $("#RoleRoom").multiselect("uncheckAll");
            $("#RoleRoomCollapse").html('');
        }
        if (gblActionName.toLowerCase() === "rolelist" && typeof ($("#RoleCompany").multiselect("getChecked").length) != undefined && $("#RoleCompany").multiselect("getChecked").length > 0) {
            $("#RoleCompany").multiselect("uncheckAll");
            $("#RoleCompanyCollapse").html('');
        }
        if (typeof ($("#RoleEnterprise").multiselect("getChecked").length) != undefined && $("#RoleEnterprise").multiselect("getChecked").length > 0) {
            $("#RoleEnterprise").multiselect("uncheckAll");
            $("#RoleEnterpriseCollapse").html('');
        }
        if (typeof ($("#UserCreated").multiselect("getChecked").length) != undefined && $("#UserCreated").multiselect("getChecked").length > 0) {
            $("#UserCreated").multiselect("uncheckAll");
            $("#UserCreatedCollapse").html('');
        }
        if (typeof ($("#ICountStatus").multiselect("getChecked").length) != undefined && $("#ICountStatus").multiselect("getChecked").length > 0) {
            $("#ICountStatus").multiselect("uncheckAll");
            $("#ICountStatusCollapse").html('');
        }
        if (typeof ($("#ICountType").multiselect("getChecked").length) != undefined && $("#ICountType").multiselect("getChecked").length > 0) {
            $("#ICountType").multiselect("uncheckAll");
            $("#ICountTypeCollapse").html('');
        }
        //UserUpdated
        if (typeof ($("#UserUpdated").multiselect("getChecked").length) != undefined && $("#UserUpdated").multiselect("getChecked").length > 0) {
            $("#UserUpdated").multiselect("uncheckAll");
            $("#UserUpdatedCollapse").html('');
        }

        $("select[name='udflist']").each(function (index) {
            var elememtID = this.getAttribute('id');
            if (typeof ($("#" + elememtID).multiselect("getChecked").length) != undefined && $("#" + elememtID).multiselect("getChecked").length > 0) {
                var UDFUniqueID = this.getAttribute('UID');
                $(this).multiselect("uncheckAll");
                $('#' + UDFUniqueID + 'Collapse').html('');
            }
        });

        if ($("select[name=udflist]").length > 0) {
            $("select[name=udflist]").multiselect("uncheckAll");
        }

        //PullSupplier
        if (typeof ($("#PullSupplier").multiselect("getChecked").length) != undefined && $("#PullSupplier").multiselect("getChecked").length > 0) {
            $("#PullSupplier").multiselect("uncheckAll");
            $("#PullSupplierCollapse").html('');
        }

        //Manufacturer
        if (typeof ($("#Manufacturer").multiselect("getChecked").length) != undefined && $("#Manufacturer").multiselect("getChecked").length > 0) {
            $("#Manufacturer").multiselect("uncheckAll");
            $("#ManufacturerCollapse").html('');
        }

        //ItemLocation
        if (typeof ($("#ItemLocation").multiselect("getChecked").length) != undefined && $("#ItemLocation").multiselect("getChecked").length > 0) {
            $("#ItemLocation").multiselect("uncheckAll");
            $("#ItemLocationCollapse").html('');
        }

        //PullCategory
        if (typeof ($("#PullCategory").multiselect("getChecked").length) != undefined && $("#PullCategory").multiselect("getChecked").length > 0) {
            $("#PullCategory").multiselect("uncheckAll");
            $("#PullCategoryCollapse").html('');
        }

        //OrderStatus
        if (typeof ($("#OrderStatus").multiselect("getChecked").length) != undefined && $("#OrderStatus").multiselect("getChecked").length > 0) {
            $("#OrderStatus").multiselect("uncheckAll");
            $("#OrderStatusCollapse").html('');
        }

        //OrderSupplier
        if (typeof ($("#OrderSupplier").multiselect("getChecked").length) != undefined && $("#OrderSupplier").multiselect("getChecked").length > 0) {
            $("#OrderSupplier").multiselect("uncheckAll");
            $("#OrderSupplierCollapse").html('');
        }

        //OrderSupplier
        if (typeof ($("#OrderSupplier").multiselect("getChecked").length) != undefined && $("#OrderSupplier").multiselect("getChecked").length > 0) {
            $("#OrderSupplier").multiselect("uncheckAll");
            $("#OrderSupplierCollapse").html('');
        }

        //ItemType
        if (typeof ($("#ItemTypeNarroDDL").multiselect("getChecked").length) != undefined && $("#ItemTypeNarroDDL").multiselect("getChecked").length > 0) {
            $("#ItemTypeNarroDDL").multiselect("uncheckAll");
            $("#ItemTypeCollapse").html('');
        }

        //InventoryClassification
        if (typeof ($("#InventoryClassificationDDL").multiselect("getChecked").length) != undefined && $("#InventoryClassificationDDL").multiselect("getChecked").length > 0) {
            $("#InventoryClassificationDDL").multiselect("uncheckAll");
            $("#InventoryClassification").html('');
        }

        //ToolsCategory
        if (typeof ($("#ToolsCategory").multiselect("getChecked").length) != undefined && $("#ToolsCategory").multiselect("getChecked").length > 0) {
            $("#ToolsCategory").multiselect("uncheckAll");
            $("#ToolsCategoryCollapse").html('');
        }

        //AssetsCategory
        if (typeof ($("#AssetsCategory").multiselect("getChecked").length) != undefined && $("#AssetsCategory").multiselect("getChecked").length > 0) {
            $("#AssetsCategory").multiselect("uncheckAll");
            $("#AssetsCategoryCollapse").html('');
        }

        //ToolsWorkOrder
        if (typeof ($("#ToolsWorkOrder").multiselect("getChecked").length) != undefined && $("#ToolsWorkOrder").multiselect("getChecked").length > 0) {
            $("#ToolsWorkOrder").multiselect("uncheckAll");
            $("#ToolsWorkOrderCollapse").html('');
        }

        //ToolsMaintenance
        if (typeof ($("#ToolsMaintenance").multiselect("getChecked").length) != undefined && $("#ToolsMaintenance").multiselect("getChecked").length > 0) {
            $("#ToolsMaintenance").multiselect("uncheckAll");
            $("#ToolsMaintenanceCollapse").html('');
        }

        //ToolsLocation
        if (typeof ($("#ToolsLocation").multiselect("getChecked").length) != undefined && $("#ToolsLocation").multiselect("getChecked").length > 0) {
            $("#ToolsLocation").multiselect("uncheckAll");
            $("#ToolsLocationCollapse").html('');
        }

        //ReqRequiredDate
        if (gblActionName.toLowerCase() === "requisitionlist") {
            if (typeof ($("#OrderRequiredDate").multiselect("getChecked").length) != undefined && $("#OrderRequiredDate").multiselect("getChecked").length > 0) {
                $("#OrderRequiredDate").multiselect("uncheckAll");
                $("#OrderRequiredDateCollapse").html('');
                OrderRequiredDateNarroValues = "";
            }
        }

        //ReqCustomer
        if (typeof ($("#ReqCustomer").multiselect("getChecked").length) != undefined && $("#ReqCustomer").multiselect("getChecked").length > 0) {
            $("#ReqCustomer").multiselect("uncheckAll");
            $("#ReqCustomerCollapse").html('');
            OrderSupplierNarroValues = "";
        }
        else if (typeof ($("#ReqCustomerCollapse")) != undefined) {
            $("#ReqCustomerCollapse").html('');
            $("#ReqCustomerCollapse").hide();
            OrderSupplierNarroValues = "";
        }

        //Requisition Status
        if (typeof ($("#ddlRequisitionStatus").multiselect("getChecked").length) != undefined && $("#ddlRequisitionStatus").multiselect("getChecked").length > 0) {
            $("#ddlRequisitionStatus").multiselect("uncheckAll");
            $("#ddlRequisitionStatusCollapse").html('');
            ddlRequisitionStatusNarroValues = "";
        }
        else if (typeof ($("#ddlRequisitionStatusCollapse")) != undefined) {
            $("#ddlRequisitionStatusCollapse").html('');
            $("#ddlRequisitionStatusCollapse").hide();
            ddlRequisitionStatusNarroValues = "";
        }

        //Requisition Supplier
        if (typeof ($("#RequisitionSupplier").multiselect("getChecked").length) != undefined && $("#RequisitionSupplier").multiselect("getChecked").length > 0) {
            $("#RequisitionSupplier").multiselect("uncheckAll");
            $("#RequisitionSupplierCollapse").html('');
            RequistionSupplierValues = "";
        }
        else if (typeof ($("#RequisitionSupplierCollapse")) != undefined) {
            $("#RequisitionSupplierCollapse").html('');
            $("#RequisitionSupplierCollapse").hide();
            RequistionSupplierValues = "";
        }

        //ReqWorkOrder
        if (typeof ($("#ReqWorkOrder").multiselect("getChecked").length) != undefined && $("#ReqWorkOrder").multiselect("getChecked").length > 0) {
            $("#ReqWorkOrder").multiselect("uncheckAll");
            $("#ReqWorkOrderCollapse").html('');
            WorkOrderNarroValues = "";
        }
        else if (typeof ($("#ReqWorkOrderCollapse")) != undefined) {
            $("#ReqWorkOrderCollapse").html('');
            $("#ReqWorkOrderCollapse").hide();
            WorkOrderNarroValues = "";
        }

        //WOCustomer
        if (typeof ($("#WOCustomer").multiselect("getChecked").length) != undefined && $("#WOCustomer").multiselect("getChecked").length > 0) {
            $("#WOCustomer").multiselect("uncheckAll");
            $("#WOCustomerCollapse").html('');
        }
        if (typeof ($("#WOTechnician").multiselect("getChecked").length) != undefined && $("#WOTechnician").multiselect("getChecked").length > 0) {
            $("#WOTechnician").multiselect("uncheckAll");
            $("#WOTechnicianCollapse").html('');
        }
        if (typeof ($("#WOAsset").multiselect("getChecked").length) != undefined && $("#WOAsset").multiselect("getChecked").length > 0) {
            $("#WOAsset").multiselect("uncheckAll");
            $("#WOAssetCollapse").html('');
        }
        if (typeof ($("#WOTool").multiselect("getChecked").length) != undefined && $("#WOTool").multiselect("getChecked").length > 0) {
            $("#WOTool").multiselect("uncheckAll");
            $("#WOToolCollapse").html('');
        }
        if (typeof ($("#WOType").multiselect("getChecked").length) != undefined && $("#WOType").multiselect("getChecked").length > 0) {
            $("#WOType").multiselect("uncheckAll");
            $("#WOTypeCollapse").html('');
        }
        if (typeof ($("#WOStatus").multiselect("getChecked").length) != undefined && $("#WOStatus").multiselect("getChecked").length > 0) {
            $("#WOStatus").multiselect("uncheckAll");
            $("#WOStatusCollapse").html('');
        }

        // cart replenish type
        if (typeof ($("#CartRT").multiselect("getChecked").length) != undefined && $("#CartRT").multiselect("getChecked").length > 0) {
            $("#CartRT").multiselect("uncheckAll");
            $("#CartRTCollapse").html('');
        }
        // cart supplier
        if (typeof ($("#CartSupplier").multiselect("getChecked").length) != undefined && $("#CartSupplier").multiselect("getChecked").length > 0) {
            $("#CartSupplier").multiselect("uncheckAll");
            $("#CartSupplierCollapse").html('');
        }
        // Role Master User Type
        if (typeof ($("#RoleUserType").multiselect("getChecked").length) != undefined && $("#RoleUserType").multiselect("getChecked").length > 0) {
            $("#RoleUserType").multiselect("uncheckAll");
            $("#RoleUserTypeCollapse").html('');
        }
        //Staging Bin
        if (typeof ($("#MatStagLocations").multiselect("getChecked").length) != undefined && $("#MatStagLocations").multiselect("getChecked").length > 0) {
            $("#MatStagLocations").multiselect("uncheckAll");
            $("#MatStagLocationsCollapse").html('');
        }
        //Staging Bin
        if (typeof ($("#ddlOrderNumber").multiselect("getChecked").length) != undefined && $("#ddlOrderNumber").multiselect("getChecked").length > 0) {
            $("#ddlOrderNumber").multiselect("uncheckAll");
            $("#ddlOrderNumberCollapse").html('');
        }

        if (typeof ($("#ntfcSchedule").multiselect("getChecked").length) != undefined && $("#ntfcSchedule").multiselect("getChecked").length > 0) {
            $("#ntfcSchedule").multiselect("uncheckAll");
            $("#ntfcScheduleCollapse").html('');
        }
        if (typeof ($("#ntfcReports").multiselect("getChecked").length) != undefined && $("#ntfcReports").multiselect("getChecked").length > 0) {
            $("#ntfcReports").multiselect("uncheckAll");
            $("#ntfcReportsCollapse").html('');
        }
        if (typeof ($("#ntfcEmailTemlate").multiselect("getChecked").length) != undefined && $("#ntfcEmailTemlate").multiselect("getChecked").length > 0) {
            $("#ntfcEmailTemlate").multiselect("uncheckAll");
            $("#ntfcEmailTemlateCollapse").html('');
        }
        if (typeof ($("#ntfcNotificationType").multiselect("getChecked").length) != undefined && $("#ntfcNotificationType").multiselect("getChecked").length > 0) {
            $("#ntfcNotificationType").multiselect("uncheckAll");
            $("#ntfcNotificationTypeCollapse").html('');
        }
        if (typeof ($("#ddlModule").multiselect("getChecked").length) != undefined && $("#ddlModule").multiselect("getChecked").length > 0) {
            $("#ddlModule").multiselect("uncheckAll");
            $("#ddlModuleSearchCollapse").html('');
        }
        if (typeof ($("#ddlItems").multiselect("getChecked").length) != undefined && $("#ddlItems").multiselect("getChecked").length > 0) {
            $("#ddlItems").multiselect("uncheckAll");
            $("#ddlItemsSearchCollapse").html('');
        }
        if (typeof ($("#ddlBinItemCategory").multiselect("getChecked").length) != undefined && $("#ddlBinItemCategory").multiselect("getChecked").length > 0) {
            $("#ddlBinItemCategory").multiselect("uncheckAll");
            $("#ddlBinItemCategorySearchCollapse").html('');
        }
        if (typeof ($("#ddlSupplier").multiselect("getChecked").length) != undefined && $("#ddlSupplier").multiselect("getChecked").length > 0) {
            $("#ddlSupplier").multiselect("uncheckAll");
            $("#ddlSupplierSearchCollapse").html('');
        }
        //PullCost
        if ($('#PullCost') != undefined) {
            $('#PullCost').val('0_-1');
            CostNarroSearchValue = '';
        }
        if ($('#isBilling') != undefined) {
            $('#isBilling').val('');
            IsBillingNarroSearchValue = '';
        }
        if ($('#isEDISent') != undefined) {
            $('#isEDISent').val('');
            IsEDISentNarroSearchValue = '';
        }
        if ($('#ddlRoomStatus') != undefined) {
            $('#ddlRoomStatus').prop('selectedIndex', 0);
            RoomStatusValue = ''
        }
        if ($('#ddlPullPOStatus') != undefined) {
            $('#ddlPullPOStatus').prop('selectedIndex', 0);
            PullPOtatusValue = ''
        }
        if ($('#ddlCompanyStatus') != undefined) {
            $('#ddlCompanyStatus').prop('selectedIndex', 0);
            CompanyStatusValue = ''
        }

        //StockStatus
        if ($('#StockStatus') != undefined) {

            $('#StockStatus').val('0');
        }

        //AssetToolSchedulerList
        if ($('#NSSchedulerItem') != undefined) {

            $('#NSSchedulerItem').val('0');
        }

        if ($('#NSSchedulerType') != undefined) {

            $('#NSSchedulerType').val('0');
        }

        //AverageUsage
        if ($('#AverageUsage') != undefined) {
            $('#AverageUsage').val('0');
            AverageCostNarroSearchValue = '';
        }

        //Turns
        if ($('#Turns') != undefined) {
            $('#Turns').val('0');
            TurnsNarroSearchValue = '';
        }

        //IS Active
        if (typeof ($("#Ctab.ItemBinMasterViewList").find("#nssortable").find("#IsActive.selectBox").length) != undefined && $("#Ctab.ItemBinMasterViewList").find("#nssortable").find("#IsActive.selectBox").length > 0 ) {
            $("#Ctab.ItemBinMasterViewList").find("#nssortable").find("#IsActive.selectBox").val('');
            ItemActive = '';
        }

        if (typeof ($("#PullActionType").multiselect("getChecked").length) != undefined && $("#PullActionType").multiselect("getChecked").length > 0) {
            $("#PullActionType").multiselect("uncheckAll");
            $("#PullActionTypeCollapse").html('');
        }

        //ToolsCost
        if ($('#ToolsCost') != undefined) {
            $('#ToolsCost').val('0_-1');
            ToolCostValue = '';
        }

        //Company Enterprise
        if (typeof ($("#ddlCompanyEnterprise").multiselect("getChecked").length) != undefined && $("#ddlCompanyEnterprise").multiselect("getChecked").length > 0) {
            $("#ddlCompanyEnterprise").multiselect("uncheckAll");
            $("#ddlCompanyEnterpriseCollapse").html('');
        }

        //Billing Room Type
        if (typeof ($("#ddlBillingRoomType").multiselect("getChecked").length) != undefined && $("#ddlBillingRoomType").multiselect("getChecked").length > 0) {
            $("#ddlBillingRoomType").multiselect("uncheckAll");
            $("#ddlBillingRoomTypeCollapse").html('');
        }

        //Invoice Branch
        if (typeof ($("#ddlInvoiceBranch").multiselect("getChecked").length) != undefined && $("#ddlInvoiceBranch").multiselect("getChecked").length > 0) {
            $("#ddlInvoiceBranch").multiselect("uncheckAll");
            $("#ddlInvoiceBranchCollapse").html('');
        }

        //Company
        if (typeof ($("#ddlCompanySearch").multiselect("getChecked").length) != undefined && $("#ddlCompanySearch").multiselect("getChecked").length > 0) {
            $("#ddlCompanySearch").multiselect("uncheckAll");
            $("#ddlCompanySearchCollapse").html('');
        }
        //project spend
        if (typeof ($("#PullProjectSpend").multiselect("getChecked").length) != undefined && $("#PullProjectSpend").multiselect("getChecked").length > 0) {
            $("#PullProjectSpend").multiselect("uncheckAll");
            $("#PullProjectSpendCollapse").html('');
        }
        //PullWorkOrder
        if (typeof ($("#PullWorkOrder").multiselect("getChecked").length) != undefined && $("#PullWorkOrder").multiselect("getChecked").length > 0) {
            $("#PullWorkOrder").multiselect("uncheckAll");
            $("#PullWorkOrderCollapse").html('');
        }
        //PullRequistion
        if (typeof ($("#PullRequistion").multiselect("getChecked").length) != undefined && $("#PullRequistion").multiselect("getChecked").length > 0) {
            $("#PullRequistion").multiselect("uncheckAll");
            $("#PullRequistionCollapse").html('');
        }
        if (typeof ($("#PullOrderNumber").multiselect("getChecked").length) != undefined && $("#PullOrderNumber").multiselect("getChecked").length > 0) {
            $("#PullOrderNumber").multiselect("uncheckAll");
            $("#PullOrderNumberCollapse").html('');
        }

        if (typeof ($("#PullSupplierAccountNumber").multiselect("getChecked").length) != undefined && $("#PullSupplierAccountNumber").multiselect("getChecked").length > 0) {
            $("#PullSupplierAccountNumber").multiselect("uncheckAll");
            $("#PullSupplierAccountNumberCollapse").html('');
        }

        if ($("select[name=udflist_Tool]").length > 0) {
            $("select[name=udflist_Tool]").multiselect("uncheckAll");
        }

        /*
        if (typeof ($("#UDF1_dd_Tool").multiselect("getChecked").length) != undefined && $("select[name=udflist_Tool]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_Tool]").multiselect("uncheckAll");
        $("#UDF1Collapse_Tool").html('');
        }
        if (typeof ($("#UDF2_dd_Tool").multiselect("getChecked").length) != undefined && $("select[name=udflist_Tool]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_Tool]").multiselect("uncheckAll");
        $("#UDF1Collapse_Tool").html('');
        }
        if (typeof ($("#UDF3_dd_Tool").multiselect("getChecked").length) != undefined && $("select[name=udflist_Tool]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_Tool]").multiselect("uncheckAll");
        $("#UDF1Collapse_Tool").html('');
        }
        if (typeof ($("#UDF4_dd_Tool").multiselect("getChecked").length) != undefined && $("select[name=udflist_Tool]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_Tool]").multiselect("uncheckAll");
        $("#UDF1Collapse_Tool").html('');
        }
        if (typeof ($("#UDF5_dd_Tool").multiselect("getChecked").length) != undefined && $("select[name=udflist_Tool]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_Tool]").multiselect("uncheckAll");
        $("#UDF1Collapse_Tool").html('');
        }*/


        if ($("select[name=udflist_tech]").length > 0) {
            $("select[name=udflist_tech]").multiselect("uncheckAll");
        }

        /*
        if (typeof ($("#UDF1_dd_tech").multiselect("getChecked").length) != undefined && $("select[name=udflist_tech]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_tech]").multiselect("uncheckAll");
        $("#UDF1Collapse_tech").html('');
        }
        if (typeof ($("#UDF2_dd_tech").multiselect("getChecked").length) != undefined && $("select[name=udflist_tech]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_tech]").multiselect("uncheckAll");
        $("#UDF2Collapse_tech").html('');
        }
        if (typeof ($("#UDF3_dd_tech").multiselect("getChecked").length) != undefined && $("select[name=udflist_tech]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_tech]").multiselect("uncheckAll");
        $("#UDF3Collapse_tech").html('');
        }
        if (typeof ($("#UDF4_dd_tech").multiselect("getChecked").length) != undefined && $("select[name=udflist_tech]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_tech]").multiselect("uncheckAll");
        $("#UDF4Collapse_tech").html('');
        }
        if (typeof ($("#UDF5_dd_tech").multiselect("getChecked").length) != undefined && $("select[name=udflist_tech]").multiselect("getChecked").length > 0) {
        $("select[name=udflist_tech]").multiselect("uncheckAll");
        $("#UDF5Collapse_tech").html('');
        }*/



        if (typeof ($("#ToolCheckout").multiselect("getChecked").length) != undefined && $("#ToolCheckout").multiselect("getChecked").length > 0) {
            $("#ToolCheckout").multiselect("uncheckAll");
            $("#ToolCheckoutCollapse").html('');
            ToolCheckoutValue = '';
        }

        if (typeof ($("#ToolsTechnician").multiselect("getChecked").length) != undefined && $("#ToolsTechnician").multiselect("getChecked").length > 0) {
            $("#ToolsTechnician").multiselect("uncheckAll");
            $("#ToolsTechnicianCollapse").html('');
            ToolTechnicianValue = '';
        }
        if (typeof ($("#ItemTrackingType").multiselect("getChecked").length) != undefined && $("#ItemTrackingType").multiselect("getChecked").length > 0) {
            $("#ItemTrackingType").multiselect("uncheckAll");
            $("#ItemTrackingTypeCollapse").html('');
            ItemTrackingTypeNarroValues = '';
        }
        if (typeof ($("#StockStatus").multiselect("getChecked").length) != undefined && $("#StockStatus").multiselect("getChecked").length > 0) {
            $("#StockStatus").multiselect("uncheckAll");
            $("#StockStatusCollapse").html('');
            StockStatusTypeNarroValues = '';
        }
        //for (var i = 1; i < 6; i++) {
        //    if (typeof ($("#UDF" + i + "_Item1_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF" + i + "_Item1_dd_CartListItem").multiselect("getChecked").length > 0) {
        //        $("#UDF" + i + "_Item1_dd_CartListItem").multiselect("uncheckAll");
        //        $("#ITEMUDF" + i + "Collapse_CartListItem").html('');
        //    }
        //}
        //$("select[id*='dd_CartListItem']").each(function () {           
        //    if (typeof ($("select[id*='dd_CartListItem']").multiselect("getChecked").length) != undefined && $("select[id*='dd_CartListItem']").multiselect("getChecked").length > 0) {
        //        $("select[id*='dd_CartListItem']").multiselect("uncheckAll");
        //        $("#ITEMUDF" + i + "Collapse_CartListItem").html('');
        //    }
        //});

        if (typeof ($("#UDF1_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF1_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF1_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF1Collapse_CartListItem").html('');
        }
        if (typeof ($("#UDF2_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF2_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF2_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF2Collapse_CartListItem").html('');
        }
        if (typeof ($("#UDF3_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF3_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF3_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF3Collapse_CartListItem").html('');
        }
        if (typeof ($("#UDF4_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF4_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF4_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF4Collapse_CartListItem").html('');
        }
        if (typeof ($("#UDF5_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF5_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF5_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF5Collapse_CartListItem").html('');
        }
        if (typeof ($("#UDF6_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF6_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF6_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF6Collapse_CartListItem").html('');
        }
        if (typeof ($("#UDF7_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF7_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF7_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF7Collapse_CartListItem").html('');
        }
        if (typeof ($("#UDF8_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF8_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF8_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF8Collapse_CartListItem").html('');
        }
        if (typeof ($("#UDF9_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF9_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF9_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF9Collapse_CartListItem").html('');
        }
        if (typeof ($("#UDF10_dd_CartListItem").multiselect("getChecked").length) != undefined && $("#UDF10_dd_CartListItem").multiselect("getChecked").length > 0) {
            $("#UDF10_dd_CartListItem").multiselect("uncheckAll");
            $("#ITEMUDF10Collapse_CartListItem").html('');
        }

        if (typeof ($("#StockStatus").multiselect("getChecked").length) != undefined && $("#StockStatus").multiselect("getChecked").length > 0) {
            $("#StockStatus").multiselect("uncheckAll");
            $("#StockStatusCollapse").html('');
            StockStatusTypeNarroValues = '';
        }
        if (typeof ($("#WOSupplier").multiselect("getChecked").length) != undefined && $("#WOSupplier").multiselect("getChecked").length > 0) {
            $("#WOSupplier").multiselect("uncheckAll");
            $("#WOSupplierCollapse").html('');
            StockStatusTypeNarroValues = '';
        }
        //ToolsLocation
        if (typeof ($("#ToolCheckout").multiselect("getChecked").length) != undefined && $("#ToolCheckout").multiselect("getChecked").length > 0) {
            $("#ToolCheckout").multiselect("uncheckAll");
            $("#ToolCheckoutCollapse").html('');
        }

        if (typeof ($("#ddlRequisitionStatus").multiselect("getChecked").length) != undefined && $("#ddlRequisitionStatus").multiselect("getChecked").length > 0) {
            $("#ddlRequisitionStatus").multiselect("uncheckAll");
            $("#ddlRequisitionStatusCollapse").html('');
            ddlRequisitionStatusNarroValues = '';
        }
        else if (typeof ($("#ddlRequisitionStatusCollapse")) != undefined) {
            $("#ddlRequisitionStatusCollapse").html('');
            ddlRequisitionStatusNarroValues = '';
            $("#ddlRequisitionStatusCollapse").hide();
        }


        //PullConsignment
        if (typeof ($("#PullConsignment").multiselect("getChecked").length) != undefined && $("#PullConsignment").multiselect("getChecked").length > 0) {
            $("#PullConsignment").multiselect("uncheckAll");
            $("#PullConsignmentCollapse").html('');
        }

        ////////////////////////////////////////////

        if ($('#ReportDetailType') != undefined) {
            $('#ReportDetailType').val('');
        }

        if (typeof ($("#QuoteStatus").multiselect("getChecked").length) != undefined && $("#QuoteStatus").multiselect("getChecked").length > 0) {
            $("#QuoteStatus").multiselect("uncheckAll");
            $("#QuoteStatusCollapse").html('');
            QuoteStatusNarroValues = '';
        }
        else if (typeof ($("#QuoteStatusCollapse")) != undefined) {
            $("#QuoteStatusCollapse").html('');
            QuoteStatusNarroValues = '';
            $("#QuoteStatusCollapse").hide();
        }

        if (typeof ($("#QuoteSupplier").multiselect("getChecked").length) != undefined && $("#QuoteSupplier").multiselect("getChecked").length > 0) {
            $("#QuoteSupplier").multiselect("uncheckAll");
            $("#QuoteSupplierCollapse").html('');
            QuoteSupplierNarrowValues = '';
        }
        else if (typeof ($("#QuoteSupplierCollapse")) != undefined) {
            $("#QuoteSupplierCollapse").html('');
            QuoteSupplierNarrowValues = '';
            $("#QuoteSupplierCollapse").hide();
        }

        $('#myDataTable tbody tr').removeClass('row_selected');
        if ($("#hdnPageName").val() !== undefined && $("#hdnPageName").val() == "ItemMaster") {
            ClearItemSelectedIds();
        }
        ShowHidHistoryTab();
        ShowHideOrderTab();
        ShowHideChangeLog();
        ShowHideSchedulerTab();
        ShowHideCartCreateButton();
        ShowHideCartDeleteButton();
        if (typeof (ShowHideUnCloseButton) !== 'undefined') {
            ShowHideUnCloseButton();
        }
        if (typeof (ShowHideCopyButton) !== 'undefined') {
            ShowHideCopyButton();
        }

        if (gblActionName.toLowerCase() === "receivelist") {
            ShowHideButtons();
        }
        if (gblActionName.toLowerCase() === "transferlist") {
            ShowHideTransferTab();
        }
        if (gblActionName.toLowerCase() === "quotetoorders") {
            RemovenonQuoteItems();
        }
        if (gblActionName.toLowerCase() == 'cartitemlist') {
            RemovenonOrderableItems();
        }

        isFromNarrowSearchClear = false;
        $('input[type="search"]').val('').trigger('keyup');
        if (RequisitionCurrentTab == '') {
            var tmpSearchString = '';

            if (gblActionName.toLowerCase() == "toollist")
            {
                if (tmpIsClearGlobalFilter == false)
                {
                    tmpSearchString = $('#global_filter').val();
                }
            }
            NarrowSearchInGrid(tmpSearchString);
        }
        else
            DoNarrowSearch();
    });

    var format = RoomDateJSFormat;
    if ($("#hdDateFormat") != undefined && $("#hdDateFormat").val() != "")
        format = $("#hdDateFormat").val();
    else
        format = "m/d/yy";
    if (format.indexOf("yy") >= 0) {
        format = format.replace("yy", "yyyy");
    }
    else if (format.indexOf("y") >= 0) {
        format = format.replace("y", "yy");
    }

    //CREATE DATE PICKER
    $('#DateCFrom').blur(function () {
    }).datepicker({
        dateFormat: RoomDateJSFormat, changeMonth: true,
        changeYear: true, date: true
    });
    $('#DateCTo').blur(function () {
    }).datepicker({
        dateFormat: RoomDateJSFormat, changeMonth: true,
        changeYear: true, date: true
    });
    $('#DateUFrom').blur(function () {
    }).datepicker({
        dateFormat: RoomDateJSFormat, changeMonth: true,
        changeYear: true, date: true
    });
    $('#DateUTo').blur(function () {
    }).datepicker({
        dateFormat: RoomDateJSFormat, changeMonth: true,
        changeYear: true, date: true
    });

    $('#ancDateCFrom').click(function () {
        $('#DateCFrom').focus();
    });
    $('#ancDateCTo').click(function () {
        $('#DateCTo').focus();
    });
    $('#ancDateUFrom').click(function () {
        $('#DateUFrom').focus();
    });
    $('#ancDateUTo').click(function () {
        $('#DateUTo').focus();
    });

    $('#DateCreatedClear').click(function () {
        if ($('#DateCFrom').val() != '' || $('#DateCTo').val() != '') {
            $('#DateCFrom').val('');
            $('#DateCTo').val('');


            //NarrowSearchInGrid('');
            if (!isFromNarrowSearchClear) {
                DoNarrowSearch();
            }
        }
    });
    $('#DateUpdatedClear').click(function () {
        if ($('#DateUFrom').val() != '' || $('#DateUTo').val() != '') {
            $('#DateUFrom').val('');
            $('#DateUTo').val('');

            //NarrowSearchInGrid('');
            if (!isFromNarrowSearchClear) {
                DoNarrowSearch();
            }

        }
    });

    $('#IsDeletedRecords').live('click', function () {
        if (gblActionName.toLowerCase() === 'transferlist' || gblActionName.toLowerCase() === 'orderlist' || gblActionName.toLowerCase() === 'returnorderlist' || gblActionName.toLowerCase() === 'quicklist' || gblActionName.toLowerCase() === 'templateconfigurationlist' || gblActionName.toLowerCase() === 'requisitionlist' )
            return;

        //NarrowSearchInGrid('');
        _Common.selectedGridOperation = _Common.gridOperations.IncludeDeleted;

        if (gblActionName.toLowerCase() === 'requisitionlist') {
            clearReqNarrowSearchSelection();
            CallNarrowfunctions();
            CallReqNarrowFunctions();
            if (RequisitionCurrentTab == '') {
                if (window.location.hash.toLowerCase() == "#unsubmitted") {
                    RequisitionCurrentTab = 'Unsubmitted';
                    ddlRequisitionStatusNarroValues = "Unsubmitted";
                }
                else if (window.location.hash.toLowerCase() == "#submitted") {
                    RequisitionCurrentTab = 'Submitted';
                    ddlRequisitionStatusNarroValues = "Submitted";
                }
                else if (window.location.hash.toLowerCase() == "#approved") {
                    RequisitionCurrentTab = 'Approved';
                    ddlRequisitionStatusNarroValues = "Approved";
                }
                else if (window.location.hash.toLowerCase() == "#closed") {
                    RequisitionCurrentTab = 'Closed';
                    ddlRequisitionStatusNarroValues = "Closed";
                }
                //else {
                //    RequisitionCurrentTab = "All";
                //}
            }
        }

        if (gblActionName.toLowerCase() === 'quotelist') {
            clearQuoteMasterNarrowSearchSelection();
            CallNarrowfunctions();
            CallQuoteMasterNarrowFunctions();
            if (RequisitionCurrentTab == '') {
                if (window.location.hash.toLowerCase() == "#unsubmitted") {
                    RequisitionCurrentTab = 'Unsubmitted';
                    QuoteStatusNarroValues = "Unsubmitted";
                }
                else if (window.location.hash.toLowerCase() == "#submitted") {
                    RequisitionCurrentTab = 'Submitted';
                    QuoteStatusNarroValues = "Submitted";
                }
                else if (window.location.hash.toLowerCase() == "#approved") {
                    RequisitionCurrentTab = 'Approved';
                    QuoteStatusNarroValues = "Approved";
                }
                else if (window.location.hash.toLowerCase() == "#closed") {
                    RequisitionCurrentTab = 'Closed';
                    QuoteStatusNarroValues = "Closed";
                }
                //else {
                //    RequisitionCurrentTab = "All";
                //}
            }
        }

        var tabNameForWOT = $('#CtabWrittenOffTool #hdnTabName');
        if (typeof (tabNameForWOT) != "undefined" && tabNameForWOT.val() != null && tabNameForWOT.val() != "" && tabNameForWOT.val() == "WrittenOffToolList" && $("#tabWrittenOffTool").hasClass("selected")) {
            if ($('#CtabWrittenOffTool').find('#IsDeletedRecords').is(':checked')) {
                $('#CtabWrittenOffTool').find('#deleteWrittenOffTool,#UnwrittenOffTools').css('display', 'none');
            }
            else {
                $('#CtabWrittenOffTool').find('#deleteWrittenOffTool,#UnwrittenOffTools').css('display', '');
            }
            DoNarrowSearchWOT();
            GetWrittenOffToolListNarrowSearchData('WrittenOffToolList', $('#CtabWrittenOffTool #IsArchivedRecords').is(':checked'), $('#CtabWrittenOffTool #IsDeletedRecords').is(':checked'));
            return;
        }
        else
        {
            DoNarrowSearch();
        }


        //if ($('#hdnPageName').val() == 'TransferMaster' || $('#hdnPageName').val() == 'OrderMaster') {
        //To implement undelete functionality in order page
        if ($('#hdnPageName').val() == 'TransferMaster') {
            return;
        }
        if (typeof (PageName) == "undefined") {
            PageName = $("input#hdnPageName").val();
        }
        var IsDeletedSel = $('#IsDeletedRecords').is(':checked');
        if (IsDeletedSel == true) {
            $(".print").attr("style", "display:none");
        }
        else {
            $(".print").attr("style", "display:block");
        }


        if (PageName.toLowerCase() == 'toolsmaintenancedetails') {
            if (IsDeletedSel == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        if (gblActionName.toLowerCase() == "schedulemapping") {
            var _IsArchived = false;
            var _IsDeleted = false;

            if (typeof ($('#IsArchivedRecords')) != undefined)
                _IsArchived = $('#IsArchivedRecords').is(':checked');

            if (typeof ($('#IsDeletedRecords')) != undefined)
                _IsDeleted = $('#IsDeletedRecords').is(':checked');
            GetScheduleNarrowSearches('ToolScheduleMapping', _IsArchived, _IsDeleted);
        }
        else {

            if (gblActionName.toLowerCase() != "pullpomasterlist" && typeof (CallNarrowfunctions) != "undefined") {
                CallNarrowfunctions('IsDeletedRecords_Click');
            }
            if (gblActionName.toLowerCase() == "requisitionlist") {
                CallReqNarrowFunctions();
            }
            if (gblActionName.toLowerCase() == "quotelist")
            {
                CallQuoteMasterNarrowFunctions();
            }
        }

        if (PageName == 'MaterialStaging') {
            RefressFilterMS("MaterialStaging", resStagingLocation);
        }


        var IsDeleted = $('#IsDeletedRecords').is(':checked');
        if (IsDeleted && PageName == "Room") {
            $("#divDeletedRoomPrint").show();
        }
        else if (PageName == "Room") {
            $("#divDeletedRoomPrint").hide();
        }


        if (PageName == 'ItemMaster' || PageName == 'PullMaster' || PageName == 'MaterialStaging' || PageName == 'ToolScheduleMapping') {
            $("#tab6").hide();
            $("#tab23").hide();
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName.toLowerCase() == 'userlist' || gblActionName.toLowerCase() == 'projectlist' || gblActionName.toLowerCase() == 'companylist' || gblActionName.toLowerCase() == 'enterpriselist' || gblActionName.toLowerCase() == 'permissiontemplateslist') {
            if (IsDeleted == false) {
                $('#deleteRows').attr("style", "display:");
                $('#undeleteRows').attr("style", "display:none");
            }
            else {
                $('#deleteRows').attr("style", "display:none");
                $('#undeleteRows').attr("style", "display:");
            }
        }

        if (gblActionName.toLowerCase() === 'cartitemlist') {
            //change WI-8295
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }

            //hide change log wi-1247
            $("#tab6").hide();
            $("#tab23").hide();
        }
        else if (gblActionName.toLowerCase() === 'kittoollist') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName.toLowerCase() === 'categorylist') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName.toLowerCase() === 'glaccountlist') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName.toLowerCase() === 'unitlist') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName.toLowerCase() === 'manufacturerlist') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'BarcodeMasterList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'CustomerMasterList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'ManufacturerList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'ShipViaList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'TechnicianList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'ToolCategoryList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'LocationList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'UnitList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'VenderMasterList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'CatalogReportList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName === 'WorkOrderList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
                $('#actionCloseWorkOrder').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
                $('#actionCloseWorkOrder').attr("style", "display:none");
            }
        }
        else if (PageName == 'InventoryCountList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
                $('#actionCloseItems').attr("style", "display:visible"); // hide close count button while undelete records
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
                $('#actionCloseItems').attr("style", "display:none"); //unhide close button while delete records
            }
        }
        else if (PageName.toLowerCase() == 'labelprinting') {
            if (IsDeleted == true) {
                $('#actionCopyItems').attr("style", "display:none");
            }
        }
        else if (PageName == 'PullPoMasterList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName.toLowerCase() === 'requisitionlist') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName.toLowerCase() === 'quotelist') {
            if (IsDeleted == false) {
                $('#undeleteRows').attr("style", "display:none");
                $('#deleteRows').attr("style", "display:visible");
                $('#actionCloseQuote').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows').attr("style", "display:none");
                $('#actionCloseQuote').attr("style", "display:none");
            }
        }
        else if (PageName == 'AssetToolSchedulerList') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName.toLowerCase() == 'binlist') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }
        else if (gblActionName.toLowerCase() == 'costuomlist') {
            if (IsDeleted == false) {
                $('#undeleteRows,#aUnArchiveRows').attr("style", "display:none");
                $('#deleteRows,#aArchiveRows').attr("style", "display:visible");
            }
            else {
                $('#undeleteRows').attr("style", "display:visible");
                $('#deleteRows,#aArchiveRows,#aUnArchiveRows').attr("style", "display:none");
            }
        }


        if (PageName == "PullMaster" || PageName == 'ItemMaster' || PageName == 'Room') {
            RefreshNarrowSearchCommonly();
        }
    });

    $('#IsArchivedRecords').live('click', function () {
        if (gblActionName.toLowerCase() === 'requisitionlist') {
            return;
        }
        var IsArchiveSelected = $('#IsArchivedRecords').is(':checked');
        if (IsArchiveSelected) {
            $('#aArchiveRows,#deleteRows,#undeleteRows').attr("style", "display:none");
            $('#aUnArchiveRows').attr("style", "display:visible");
            $(".print").attr("style", "display:none");
            //AllowDeletePopup = false;
        }
        else {
            $('#aArchiveRows,#deleteRows').attr("style", "display:visible");
            $('#aUnArchiveRows,#undeleteRows').attr("style", "display:none");
            $(".print").attr("style", "display:block");
            //AllowDeletePopup = true;
        }
        //NarrowSearchInGrid('');
        if (gblActionName.toLowerCase() === 'transferlist' || gblActionName.toLowerCase() === 'orderlist' || gblActionName.toLowerCase() === 'returnorderlist' || gblActionName.toLowerCase() === 'quicklist' || gblActionName.toLowerCase() === 'templateconfigurationlist')
            return;
        _Common.selectedGridOperation = _Common.gridOperations.IncludeArchived;
        var tabNameForWOT = $('#CtabWrittenOffTool #hdnTabName');
        if (typeof (tabNameForWOT) != "undefined" && tabNameForWOT.val() != null && tabNameForWOT.val() != "" && tabNameForWOT.val() == "WrittenOffToolList" && $("#tabWrittenOffTool").hasClass("selected")) {
            if ($('#CtabWrittenOffTool').find('#IsArchivedRecords').is(':checked')) {
                $('#CtabWrittenOffTool').find('#deleteWrittenOffTool,#UnwrittenOffTools').css('display', 'none');
            }
            else {
                $('#CtabWrittenOffTool').find('#deleteWrittenOffTool,#UnwrittenOffTools').css('display', '');
            }
            DoNarrowSearchWOT();
            GetWrittenOffToolListNarrowSearchData('WrittenOffToolList', $('#CtabWrittenOffTool #IsArchivedRecords').is(':checked'), $('#CtabWrittenOffTool #IsDeletedRecords').is(':checked'));
            return;
        }
        else {
            DoNarrowSearch();
        }

        if (typeof (CallNarrowfunctions) != "undefined") {
            CallNarrowfunctions('IsArchivedRecords_Click');
        }
        if (gblActionName.toLowerCase() == "requisitionlist") {
            clearReqNarrowSearchSelection();
            CallNarrowfunctions();
            CallReqNarrowFunctions();
        }
        if (gblActionName.toLowerCase() == "quotelist") {
            clearQuoteMasterNarrowSearchSelection();
            CallNarrowfunctions();
            CallQuoteMasterNarrowFunctions();
        }
        if (PageName == 'MaterialStaging') {
            RefressFilterMS("MaterialStaging", resStagingLocation);
        }
        else if (PageName == 'InventoryCountList') {
            if (IsArchiveSelected) {
                $('#actionCloseItems').attr("style", "display:none"); //hide close button 
            }
            else {
                $('#actionCloseItems').attr("style", "display:visible"); // show close count button 
            }
        }

        if (PageName == "PullMaster" || PageName == 'ItemMaster')
        {
            RefreshNarrowSearchCommonly();
        }

        if (gblActionName.toLowerCase() == "roomlist") {
            $("#divDeletedRoomPrint").attr("style", "display:none");
            $(".print").attr("style", "display:none");
        }
    });

    $("#SDGlobalReprotBuilder").datepicker({
        dateFormat: $("#hdDateFormat").val(),
        //dateFormat: "m/d/yy",
        onSelect: function (selected) {
            $("#EDGlobalReprotBuilder").datepicker("option", "minDate", selected)
        }
    });
    $("#EDGlobalReprotBuilder").datepicker({
        dateFormat: $("#hdDateFormat").val(),
        //dateFormat: "m/d/yy",
        onSelect: function (selected) {
            $("#SDGlobalReprotBuilder").datepicker("option", "maxDate", selected)
        }
    });

});

function DoNarrowSearchInner() {
    //alert("In DoNarrowSearchInner()");

    var narrowSearchFields = '';
    var narrowSearchValues = '';
    var narrowSearchItem = '';

    eraseCookieforshift("selectstartindex");
    eraseCookieforshift("selectendindex");
    eraseCookieforshift("finalselectedarray");


    if (ToolCheckOutUDF1 != undefined && ToolCheckOutUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += ToolCheckOutUDF1 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF2 != undefined && ToolCheckOutUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += ToolCheckOutUDF2 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF3 != undefined && ToolCheckOutUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += ToolCheckOutUDF3 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF4 != undefined && ToolCheckOutUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += ToolCheckOutUDF4 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF5 != undefined && ToolCheckOutUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += ToolCheckOutUDF5 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += "@";
    }


    if (ToolTechnicianValue != undefined && ToolTechnicianValue.length > 0) {
        narrowSearchFields += "ToolTechnician" + ",";
        narrowSearchValues += ToolTechnicianValue + "@";
    }
    else {
        narrowSearchFields += "ToolTechnician" + ",";
        narrowSearchValues += "@";
    }

    if (ToolTechUDF1 != undefined && ToolTechUDF1.length > 0) {
        narrowSearchFields += "ToolTechUDF1" + ",";
        narrowSearchValues += ToolTechUDF1 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF1" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    if (ToolTechUDF2 != undefined && ToolTechUDF2.length > 0) {
        narrowSearchFields += "ToolTechUDF2" + ",";
        narrowSearchValues += ToolTechUDF2 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF2" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (ToolTechUDF3 != undefined && ToolTechUDF3.length > 0) {
        narrowSearchFields += "ToolTechUDF3" + ",";
        narrowSearchValues += ToolTechUDF3 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF3" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (ToolTechUDF4 != undefined && ToolTechUDF4.length > 0) {
        narrowSearchFields += "ToolTechUDF4" + ",";
        narrowSearchValues += ToolTechUDF4 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF4" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (ToolTechUDF5 != undefined && ToolTechUDF5.length > 0) {
        narrowSearchFields += "ToolTechUDF5" + ",";
        narrowSearchValues += ToolTechUDF5 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF5" + ",";
        narrowSearchValues += "@";
    }


    var searchtext = '';
    var tmpGlobalFilter = $("#global_filter");
    if (tmpGlobalFilter !== undefined && tmpGlobalFilter != null && tmpGlobalFilter.val() != undefined && tmpGlobalFilter.val() != null && tmpGlobalFilter.val() != '')
        searchtext = $("#global_filter").val().replace(/'/g, "''").replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
    narrowSearch = narrowSearchFields + "[###]" + narrowSearchValues + "[###]" + searchtext;

    //alert(narrowSearch);
    return narrowSearch;
}

function DoNarrowSearchInnerForHistory() {
    //alert("In DoNarrowSearchInner()");

    var narrowSearchFields = '';
    var narrowSearchValues = '';
    var narrowSearchItem = '';

    eraseCookieforshift("selectstartindex");
    eraseCookieforshift("selectendindex");
    eraseCookieforshift("finalselectedarray");


    if (ToolCheckOutUDF1 != undefined && ToolCheckOutUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += ToolCheckOutUDF1 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF2 != undefined && ToolCheckOutUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += ToolCheckOutUDF2 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF3 != undefined && ToolCheckOutUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += ToolCheckOutUDF3 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF4 != undefined && ToolCheckOutUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += ToolCheckOutUDF4 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF5 != undefined && ToolCheckOutUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += ToolCheckOutUDF5 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += "@";
    }


    if (ToolHistoryTechnicianValue != undefined && ToolHistoryTechnicianValue.length > 0) {
        narrowSearchFields += "ToolTechnician" + ",";
        narrowSearchValues += ToolHistoryTechnicianValue + "@";
    }
    else {
        narrowSearchFields += "ToolTechnician" + ",";
        narrowSearchValues += "@";
    }

    if (ToolTechUDF1 != undefined && ToolTechUDF1.length > 0) {
        narrowSearchFields += "ToolTechUDF1" + ",";
        narrowSearchValues += ToolTechUDF1 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF1" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    if (ToolTechUDF2 != undefined && ToolTechUDF2.length > 0) {
        narrowSearchFields += "ToolTechUDF2" + ",";
        narrowSearchValues += ToolTechUDF2 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF2" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (ToolTechUDF3 != undefined && ToolTechUDF3.length > 0) {
        narrowSearchFields += "ToolTechUDF3" + ",";
        narrowSearchValues += ToolTechUDF3 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF3" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (ToolTechUDF4 != undefined && ToolTechUDF4.length > 0) {
        narrowSearchFields += "ToolTechUDF4" + ",";
        narrowSearchValues += ToolTechUDF4 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF4" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (ToolTechUDF5 != undefined && ToolTechUDF5.length > 0) {
        narrowSearchFields += "ToolTechUDF5" + ",";
        narrowSearchValues += ToolTechUDF5 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF5" + ",";
        narrowSearchValues += "@";
    }


    var searchtext = '';
    var tmpGlobalFilter = $("#global_filter");
    if (tmpGlobalFilter !== undefined && tmpGlobalFilter != null && tmpGlobalFilter.val() != undefined && tmpGlobalFilter.val() != null && tmpGlobalFilter.val() != '')
        searchtext = $("#global_filter").val().replace(/'/g, "''").replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
    narrowSearch = narrowSearchFields + "[###]" + narrowSearchValues + "[###]" + searchtext;

    //alert(narrowSearch);
    return narrowSearch;
}

function DoNarrowSearch() {
    var narrowSearchFields = '';
    var narrowSearchValues = '';
    var narrowSearchItem = '';

    eraseCookieforshift("selectstartindex");
    eraseCookieforshift("selectendindex");
    eraseCookieforshift("finalselectedarray");


    if (UserCreatedNarroValues != undefined && UserCreatedNarroValues.length > 0) {
        //narrowSearchItem += "[###]CreatedBy#" + UserCreatedNarroValues;
        narrowSearchFields += "CreatedBy" + ",";
        narrowSearchValues += UserCreatedNarroValues + "@";
    }
    else if (ScheduleCreatedByNarroValues != undefined && ScheduleCreatedByNarroValues.length > 0) {
        narrowSearchFields += "CreatedBy" + ",";
        narrowSearchValues += ScheduleCreatedByNarroValues + "@";
    }
    else {
        narrowSearchFields += "CreatedBy" + ",";
        narrowSearchValues += "@";
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUpdatedNarroValues != undefined && UserUpdatedNarroValues.length > 0) {
        //narrowSearchItem += "[###]UpdatedBy#" + UserUpdatedNarroValues;
        narrowSearchFields += "UpdatedBy" + ",";
        narrowSearchValues += UserUpdatedNarroValues + "@";
    }
    else if (ScheduleUpdatedByNarroValues != undefined && ScheduleUpdatedByNarroValues.length > 0) {
        narrowSearchFields += "UpdatedBy" + ",";
        narrowSearchValues += ScheduleUpdatedByNarroValues + "@";
    }
    else {
        narrowSearchFields += "UpdatedBy" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (($('#DateCFrom').val() != '' && $('#DateCTo').val() != '') || ($('#ReceiveDateCFrom').val() != '' && $('#ReceiveDateCTo').val() != '')) {
        //narrowSearchItem += "[###]DateCreatedFrom#" + GetDateInYYYYMMDDFormat($('#DateCFrom').val()) + "#DateCreatedTo#" + GetDateInYYYYMMDDFormat($('#DateCTo').val());        
        narrowSearchFields += "DateCreatedFrom" + ",";

        if (typeof $('#DateCTo').val() != "undefined" && typeof $('#DateCFrom').val() != "undefined" && $('#DateCFrom').val() != '' && $('#DateCTo').val() != '')
            narrowSearchValues += ($('#DateCFrom').val()) + "," + ($('#DateCTo').val()) + "@";
        else if (typeof $('#ReceiveDateCFrom').val() != "undefined" && typeof $('#ReceiveDateCTo').val() != "undefined" && $('#ReceiveDateCFrom').val() != '' && $('#ReceiveDateCTo').val() != '')
            narrowSearchValues += ($('#ReceiveDateCFrom').val()) + "," + ($('#ReceiveDateCTo').val()) + "@";
        else if (typeof $('#ScheduleDateCFrom').val() != "undefined" && typeof $('#ScheduleDateCTo').val() != "undefined" && $('#ScheduleDateCFrom').val() != '' && $('#ScheduleDateCTo').val() != '')
            narrowSearchValues += ($('#ScheduleDateCFrom').val()) + "," + ($('#ScheduleDateCTo').val()) + "@";
        else
            narrowSearchValues += "@";
    }
    else {
        narrowSearchFields += "DateCreatedFrom" + ",";
        narrowSearchValues += "@";
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////
    if (($('#DateUFrom').val() != '' && $('#DateUTo').val() != '') || ($('#ReceiveDateUFrom').val() != '' && $('#ReceiveDateUTo').val() != '')) {
        //narrowSearchItem += "[###]DateUpdatedFrom#" + GetDateInYYYYMMDDFormat($('#DateUFrom').val()) + "#DateUpdatedTo#" + GetDateInYYYYMMDDFormat($('#DateUTo').val());
        narrowSearchFields += "DateUpdatedFrom" + ",";
        if (typeof $('#DateUFrom').val() != "undefined" && typeof $('#DateUTo').val() != "undefined" && $('#DateUTo').val() != '' && $('#DateUFrom').val() != '')
            narrowSearchValues += ($('#DateUFrom').val()) + "," + ($('#DateUTo').val()) + "@";
        else if (typeof $('#ReceiveDateUFrom').val() != "undefined" && typeof $('#ReceiveDateUTo').val() != "undefined" && $('#ReceiveDateUTo').val() != '' && $('#ReceiveDateUFrom').val() != '')
            narrowSearchValues += ($('#ReceiveDateUFrom').val()) + "," + ($('#ReceiveDateUTo').val()) + "@";
        else if (typeof $('#ScheduleDateUFrom').val() != "undefined" && typeof $('#ScheduleDateUTo').val() != "undefined" && $('#ScheduleDateUTo').val() != '' && $('#ScheduleDateUFrom').val() != '')
            narrowSearchValues += ($('#ScheduleDateUFrom').val()) + "," + ($('#ScheduleDateUTo').val()) + "@";
        else
            narrowSearchValues += "@";
    }
    else {
        narrowSearchFields += "DateUpdatedFrom" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF1NarrowValues != undefined && UserUDF1NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "UDF1" + ",";
        narrowSearchValues += UserUDF1NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF1" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF2NarrowValues != undefined && UserUDF2NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF2#" + UserUDF2NarrowValues;
        narrowSearchFields += "UDF2" + ",";
        narrowSearchValues += UserUDF2NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF2" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF3NarrowValues != undefined && UserUDF3NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF3#" + UserUDF3NarrowValues;
        narrowSearchFields += "UDF3" + ",";
        narrowSearchValues += UserUDF3NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF3" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF4NarrowValues != undefined && UserUDF4NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF4#" + UserUDF4NarrowValues;
        narrowSearchFields += "UDF4" + ",";
        narrowSearchValues += UserUDF4NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF4" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF5NarrowValues != undefined && UserUDF5NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF5#" + UserUDF5NarrowValues;
        narrowSearchFields += "UDF5" + ",";
        narrowSearchValues += UserUDF5NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF5" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullSupplierNarroValues != undefined && PullSupplierNarroValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += PullSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    if (ManufacturerNarroValues != undefined && ManufacturerNarroValues.length > 0) {
        narrowSearchFields += "ManufacturerID" + ",";
        narrowSearchValues += ManufacturerNarroValues + "@";
    }
    else {
        narrowSearchFields += "ManufacturerID" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    if (PullCategoryNarroValues != undefined && PullCategoryNarroValues.length > 0) {
        narrowSearchFields += "CategoryID" + ",";
        narrowSearchValues += PullCategoryNarroValues + "@";
    }
    else {
        narrowSearchFields += "CategoryID" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (OrderSupplierNarroValues != undefined && OrderSupplierNarroValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += OrderSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (OrderStatusNarroValues != undefined && OrderStatusNarroValues.length > 0) {
        narrowSearchFields += "OrderStatus" + ",";
        narrowSearchValues += OrderStatusNarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderStatus" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (OrderRequiredDateNarroValues != undefined && OrderRequiredDateNarroValues.length > 0) {
        narrowSearchFields += "OrderRequiredDate" + ",";
        narrowSearchValues += OrderRequiredDateNarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderRequiredDate" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////15//////////////////////////////////////////////////////////

    if (CostNarroSearchValue != undefined && CostNarroSearchValue.length > 0) {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += CostNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////16//////////////////////////////////////////////////////////

    if (spendPerSpendLimit != undefined && spendPerSpendLimit.length > 0) {
        narrowSearchFields += "spendPerSpendLimit" + ",";
        narrowSearchValues += spendPerSpendLimit + "@";
    }
    else {
        narrowSearchFields += "spendPerSpendLimit" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////17//////////////////////////////////////////////////////////

    if (TotalSpendLimit != undefined && TotalSpendLimit.length > 0) {
        narrowSearchFields += "TotalSpendLimit" + ",";
        narrowSearchValues += TotalSpendLimit + "@";
    }
    else {
        narrowSearchFields += "TotalSpendLimit" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////18//////////////////////////////////////////////////////////

    if (TotalSpendRemaining != undefined && TotalSpendRemaining.length > 0) {
        narrowSearchFields += "TotalSpendRemaining" + ",";
        narrowSearchValues += TotalSpendRemaining + "@";
    }
    else {
        narrowSearchFields += "TotalSpendRemaining" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////19//////////////////////////////////////////////////////////

    if (TotalItemSpendLimit != undefined && TotalItemSpendLimit.length > 0) {
        narrowSearchFields += "TotalItemSpendLimit" + ",";
        narrowSearchValues += TotalItemSpendLimit + "@";
    }
    else {
        narrowSearchFields += "TotalItemSpendLimit" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////20//////////////////////////////////////////////////////////

    if (MatStagLocationsNarroValues != undefined && MatStagLocationsNarroValues.length > 0) {
        narrowSearchFields += "BinName" + ",";
        narrowSearchValues += MatStagLocationsNarroValues + "@";
    }
    else {
        narrowSearchFields += "BinName" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////21//////////////////////////////////////////////////////////

    if (SSNarroSearchValue != undefined && SSNarroSearchValue.length > 0) {
        narrowSearchFields += "SS" + ",";
        narrowSearchValues += SSNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "SS" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////22//////////////////////////////////////////////////////////

    if (ItemTypeNarroSearchValue != undefined && ItemTypeNarroSearchValue.length > 0) {
        narrowSearchFields += "ItemType" + ",";
        narrowSearchValues += ItemTypeNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "ItemType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////23//////////////////////////////////////////////////////////

    if (CartSupplierNarroValues != undefined && CartSupplierNarroValues.length > 0) {
        narrowSearchFields += "SupplierName" + ",";
        narrowSearchValues += CartSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "SupplierName" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////24//////////////////////////////////////////////////////////

    if (CartRTNarroValues != undefined && CartRTNarroValues.length > 0) {
        narrowSearchFields += "ReplenishType" + ",";
        narrowSearchValues += CartRTNarroValues + "@";
    }
    else {
        narrowSearchFields += "ReplenishType" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////25//////////////////////////////////////////////////////////
    if (RequisitionCurrentTab != undefined && RequisitionCurrentTab.length > 0) {

        narrowSearchFields += "RequisitionStatus" + ",";
        narrowSearchValues += RequisitionCurrentTab + "@";
    }
    else {

        narrowSearchFields += "RequisitionStatus" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////26//////////////////////////////////////////////////////////
    if (OrderNumberNarroValues != undefined && OrderNumberNarroValues.length > 0) {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += OrderNumberNarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////27//////////////////////////////////////////////////////////
    if (LocationValue != undefined && LocationValue.length > 0) {
        narrowSearchFields += "LocationID" + ",";
        narrowSearchValues += LocationValue + "@";
    }
    else {
        narrowSearchFields += "LocationID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////28//////////////////////////////////////////////////////////
    if (WorkOrderValue != undefined && WorkOrderValue.length > 0) {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += WorkOrderValue + "@";
    }
    else {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////29//////////////////////////////////////////////////////////
    if (ToolCategoryValue != undefined && ToolCategoryValue.length > 0) {
        narrowSearchFields += "ToolCategoryID" + ",";
        narrowSearchValues += ToolCategoryValue + "@";
    }
    else {
        narrowSearchFields += "ToolCategoryID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////30//////////////////////////////////////////////////////////
    if (ToolMaintanceValue != undefined && ToolMaintanceValue.length > 0) {
        narrowSearchFields += "ToolMaintanenceID" + ",";
        narrowSearchValues += ToolMaintanceValue + "@";
    }
    else {
        narrowSearchFields += "ToolMaintanenceID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////31//////////////////////////////////////////////////////////
    if (ToolCostValue != undefined && ToolCostValue.length > 0) {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += ToolCostValue + "@";
    }
    else {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////32//////////////////////////////////////////////////////////
    if (WOAssetValues != undefined && WOAssetValues.length > 0) {
        narrowSearchFields += "AssetID" + ",";
        narrowSearchValues += WOAssetValues + "@";
    }
    else {
        narrowSearchFields += "AssetID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////33//////////////////////////////////////////////////////////
    if (WOCustomerValues != undefined && WOCustomerValues.length > 0) {
        narrowSearchFields += "CustomerID" + ",";
        narrowSearchValues += WOCustomerValues + "@";
    }
    else {
        narrowSearchFields += "CustomerID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////34//////////////////////////////////////////////////////////
    if (WOTechnicianValues != undefined && WOTechnicianValues.length > 0) {
        narrowSearchFields += "TechnicianID" + ",";
        narrowSearchValues += WOTechnicianValues + "@";
    }
    else {
        narrowSearchFields += "TechnicianID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////35//////////////////////////////////////////////////////////
    if (WOToolValues != undefined && WOToolValues.length > 0) {
        narrowSearchFields += "ToolID" + ",";
        narrowSearchValues += WOToolValues + "@";
    }
    else {
        narrowSearchFields += "ToolID" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////36//////////////////////////////////////////////////////////
    if (RoleUserTypeNarroValues != undefined && RoleUserTypeNarroValues.length > 0) {
        narrowSearchFields += "UserType" + ",";
        narrowSearchValues += RoleUserTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////37//////////////////////////////////////////////////////////
    if (ICountTypeNarroValues != undefined && ICountTypeNarroValues.length > 0) {
        narrowSearchFields += "CountType" + ",";
        narrowSearchValues += ICountTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "CountType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ICountStatusNarroValues != undefined && ICountStatusNarroValues.length > 0) {
        narrowSearchFields += "CountStatus" + ",";
        narrowSearchValues += ICountStatusNarroValues + "@";
    }
    else {
        narrowSearchFields += "CountStatus" + ",";
        narrowSearchValues += "@";
    }
    //narrowSearch = 'STARTWITH#' + narrowSearchItem;


    //////////////////////////////////////39//////////////////////////////////////////////////////////
    if (UserTypeNarroValues != undefined && UserTypeNarroValues.length > 0) {
        narrowSearchFields += "UserType" + ",";
        narrowSearchValues += UserTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////40//////////////////////////////////////////////////////////
    if (UserRoomNarroValues != undefined && UserRoomNarroValues.length > 0) {
        narrowSearchFields += "UserRoom" + ",";
        narrowSearchValues += UserRoomNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserRoom" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////41//////////////////////////////////////////////////////////
    if (UserRoleNarroValues != undefined && UserRoleNarroValues.length > 0) {
        narrowSearchFields += "UserRole" + ",";
        narrowSearchValues += UserRoleNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserRole" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////42//////////////////////////////////////////////////////////
    if (UserCompanyNarroValues != undefined && UserCompanyNarroValues.length > 0) {
        narrowSearchFields += "UserCompany" + ",";
        narrowSearchValues += UserCompanyNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserCompany" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////43//////////////////////////////////////////////////////////
    if (RoleRoomNarroValues != undefined && RoleRoomNarroValues.length > 0) {
        narrowSearchFields += "RoleRoom" + ",";
        narrowSearchValues += RoleRoomNarroValues + "@";
    }
    else {
        narrowSearchFields += "RoleRoom" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////44//////////////////////////////////////////////////////////
    if (RoleCompanyNarroValues != undefined && RoleCompanyNarroValues.length > 0) {
        narrowSearchFields += "RoleCompany" + ",";
        narrowSearchValues += RoleCompanyNarroValues + "@";
    }
    else {
        narrowSearchFields += "RoleCompany" + ",";
        narrowSearchValues += "@";
    }

    ///////////////////////////////////45/////////////////////////////////////////////////////////////
    if (SchedulerItemSearchValue != undefined && SchedulerItemSearchValue.length > 0) {
        narrowSearchFields += "SchedulerItem" + ",";
        narrowSearchValues += SchedulerItemSearchValue + "@";
    }
    else {
        narrowSearchFields += "SchedulerItem" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////46//////////////////////////////////////////////////////////////
    if (SchedulerTypeSearchValue != undefined && SchedulerTypeSearchValue.length > 0) {
        narrowSearchFields += "SchedulerType" + ",";
        narrowSearchValues += SchedulerTypeSearchValue + "@";
    }
    else {
        narrowSearchFields += "SchedulerType" + ",";
        narrowSearchValues += "@";
    }
    if (WorkOrderNarroValues != undefined && WorkOrderNarroValues.length > 0) {

        narrowSearchFields += "WorkOrderName" + ",";
        narrowSearchValues += WorkOrderNarroValues + "@";
    }
    else {
        narrowSearchFields += "WorkOrderName" + ",";
        narrowSearchValues += "@";
    }
    if (AverageCostNarroSearchValue != undefined && AverageCostNarroSearchValue.length > 0) {

        narrowSearchFields += "AverageCost" + ",";
        narrowSearchValues += AverageCostNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "AverageCost" + ",";
        narrowSearchValues += "@";
    }
    if (TurnsNarroSearchValue != undefined && TurnsNarroSearchValue.length > 0) {

        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += TurnsNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += "@";
    }

    if (PullActionTypeNarroSearchValue != undefined && PullActionTypeNarroSearchValue.length > 0) {

        narrowSearchFields += "ActionType" + ",";
        narrowSearchValues += PullActionTypeNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "ActionType" + ",";
        narrowSearchValues += "@";
    }


    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ntfcEmailTemlateNarroValues != undefined && ntfcEmailTemlateNarroValues.length > 0) {
        narrowSearchFields += "EmailTemplate" + ",";
        narrowSearchValues += ntfcEmailTemlateNarroValues + "@";
    }
    else {
        narrowSearchFields += "EmailTemplate" + ",";
        narrowSearchValues += "@";
    }


    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ntfcReportsNarroValues != undefined && ntfcReportsNarroValues.length > 0) {
        narrowSearchFields += "Reports" + ",";
        narrowSearchValues += ntfcReportsNarroValues + "@";
    }
    else {
        narrowSearchFields += "Reports" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ntfcScheduleNarroValues != undefined && ntfcScheduleNarroValues.length > 0) {
        narrowSearchFields += "Schedules" + ",";
        narrowSearchValues += ntfcScheduleNarroValues + "@";
    }
    else {
        narrowSearchFields += "Schedules" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ntfcNotificationTypeNarroValues != undefined && ntfcNotificationTypeNarroValues.length > 0) {
        narrowSearchFields += "NotificationTypes" + ",";
        narrowSearchValues += ntfcNotificationTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "NotificationTypes" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    if (ItemLocationNarroValues != undefined && ItemLocationNarroValues.length > 0) {
        narrowSearchFields += "ItemLocations" + ",";
        narrowSearchValues += ItemLocationNarroValues + "@";
    }
    else {
        narrowSearchFields += "ItemLocations" + ",";
        narrowSearchValues += "@";
    }

    if (EnterpriseNarroValues != undefined && EnterpriseNarroValues.length > 0) {
        narrowSearchFields += "EnterpriseName" + ",";
        narrowSearchValues += EnterpriseNarroValues + "@";
    }
    else {
        narrowSearchFields += "EnterpriseName" + ",";
        narrowSearchValues += "@";
    }

    if (RoleCompanyNarroValues != undefined && RoleCompanyNarroValues.length > 0) {
        narrowSearchFields += "CompanyName" + ",";
        narrowSearchValues += RoleCompanyNarroValues + "@";
    }
    else {
        narrowSearchFields += "EnterpriseName" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullProjectSpendNarroValues != undefined && PullProjectSpendNarroValues.length > 0) {
        narrowSearchFields += "ProjectSpendID" + ",";
        narrowSearchValues += PullProjectSpendNarroValues + "@";
    }
    else {

        narrowSearchFields += "ProjectSpendID" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullWorkOrderValues != undefined && PullWorkOrderValues.length > 0) {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += PullWorkOrderValues + "@";
    }
    else {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullRequistionarroValues != undefined && PullRequistionarroValues.length > 0) {
        narrowSearchFields += "RequistionID" + ",";
        narrowSearchValues += PullRequistionarroValues + "@";
    }
    else {
        narrowSearchFields += "RequistionID" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (IsBillingNarroSearchValue != undefined && IsBillingNarroSearchValue.length > 0) {
        narrowSearchFields += "Billing" + ",";
        narrowSearchValues += IsBillingNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Billing" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (IsEDISentNarroSearchValue != undefined && IsEDISentNarroSearchValue.length > 0) {
        narrowSearchFields += "IsEDISent" + ",";
        narrowSearchValues += IsEDISentNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "IsEDISent" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (AvgUsageNarroSearchValue != undefined && AvgUsageNarroSearchValue.length > 0) {
        narrowSearchFields += "AverageUsage" + ",";
        narrowSearchValues += AvgUsageNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "AverageUsage" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (TurnsNarroSearchValue != undefined && TurnsNarroSearchValue.length > 0) {
        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += TurnsNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF1 != undefined && ItemUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF1" + ",";
        narrowSearchValues += ItemUDF1 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF1" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF2 != undefined && ItemUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF2" + ",";
        narrowSearchValues += ItemUDF2 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF2" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF3 != undefined && ItemUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF3" + ",";
        narrowSearchValues += ItemUDF3 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF3" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF4 != undefined && ItemUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF4" + ",";
        narrowSearchValues += ItemUDF4 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF4" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF5 != undefined && ItemUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF5" + ",";
        narrowSearchValues += ItemUDF5 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF5" + ",";
        narrowSearchValues += "@";
    }
    if (RoomStatusValue != undefined && RoomStatusValue.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "RoomStatusValue" + ",";
        narrowSearchValues += RoomStatusValue + "@";
    }
    else {
        narrowSearchFields += "RoomStatusValue" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF1 != undefined && ToolCheckOutUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += ToolCheckOutUDF1 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF2 != undefined && ToolCheckOutUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += ToolCheckOutUDF2 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF3 != undefined && ToolCheckOutUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += ToolCheckOutUDF3 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF4 != undefined && ToolCheckOutUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += ToolCheckOutUDF4 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF5 != undefined && ToolCheckOutUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += ToolCheckOutUDF5 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += "@";
    }

    if (ToolCheckoutValue != undefined && ToolCheckoutValue.length > 0) {
        narrowSearchFields += "Maintense" + ",";
        narrowSearchValues += ToolCheckoutValue + "@";
    }
    else {
        narrowSearchFields += "Maintense" + ",";
        narrowSearchValues += "@";
    }
    if (ToolTechnicianValue != undefined && ToolTechnicianValue.length > 0) {
        narrowSearchFields += "ToolTechnician" + ",";
        narrowSearchValues += ToolTechnicianValue + "@";
    }
    else {
        narrowSearchFields += "ToolTechnician" + ",";
        narrowSearchValues += "@";
    }
    if (PullOrderNumbernarroValues != undefined && PullOrderNumbernarroValues.length > 0) {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += PullOrderNumbernarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += "@";
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserEnterpriseNarroValues != undefined && UserEnterpriseNarroValues.length > 0) {
        narrowSearchFields += "UserEnterprise" + ",";
        narrowSearchValues += UserEnterpriseNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserEnterprise" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////80///////////////////////////////////////////////////////
    if (MoveTypeNarroValues != undefined && MoveTypeNarroValues.length > 0) {
        narrowSearchFields += "MoveType" + ",";
        narrowSearchValues += MoveTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "MoveType" + ",";
        narrowSearchValues += "@";
    }
    if (MouleTypeNarroValues != undefined && MouleTypeNarroValues.length > 0) {
        narrowSearchFields += "ModuleType" + ",";
        narrowSearchValues += MouleTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "ModuleType" + ",";
        narrowSearchValues += "@";
    }
    if (ItemsNarroValues != undefined && ItemsNarroValues.length > 0) {
        narrowSearchFields += "Items" + ",";
        narrowSearchValues += ItemsNarroValues + "@";
    }
    else {
        narrowSearchFields += "Items" + ",";
        narrowSearchValues += "@";
    }
    if (UserSupplierNarroValues != undefined && UserSupplierNarroValues.length > 0) {
        narrowSearchFields += "Supplier" + ",";
        narrowSearchValues += UserSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "Supplier" + ",";
        narrowSearchValues += "@";
    }
    if (CateogryNarroValues != undefined && CateogryNarroValues.length > 0) {
        narrowSearchFields += "Category" + ",";
        narrowSearchValues += CateogryNarroValues + "@";
    }
    else {
        narrowSearchFields += "Category" + ",";
        narrowSearchValues += "@";
    }
    if (PullPOStatusValue != undefined && PullPOStatusValue.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "PullPOStatusValue" + ",";
        narrowSearchValues += PullPOStatusValue + "@";
    }
    else {
        narrowSearchFields += "PullPOStatusValue" + ",";
        narrowSearchValues += "@";
    }

    if (CompanyStatusValue != undefined && CompanyStatusValue.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "CompanyStatusValue" + ",";
        narrowSearchValues += CompanyStatusValue + "@";
    }
    else {
        narrowSearchFields += "CompanyStatusValue" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////
    if (InventoryClassificationNarroSearchValue != undefined && InventoryClassificationNarroSearchValue.length > 0) {
        narrowSearchFields += "InventoryClassification" + ",";
        narrowSearchValues += InventoryClassificationNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "InventoryClassification" + ",";
        narrowSearchValues += "@";
    }
    //ItemLocations
    if (ItemTrackingTypeNarroValues != undefined && ItemTrackingTypeNarroValues.length > 0) {
        narrowSearchFields += "ItemTrackingType" + ",";
        narrowSearchValues += ItemTrackingTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "ItemTrackingType" + ",";
        narrowSearchValues += "@";
    }
    //narrowSearch = 'STARTWITH#' + narrowSearchItem;
    //if (narrowSearchValues.replace(/@/g, '') == '')
    //    NarrowSearchInGrid('');
    //else {
    if (StockStatusTypeNarroValues != undefined && StockStatusTypeNarroValues.length > 0) {
        narrowSearchFields += "StockStatus" + ",";
        narrowSearchValues += StockStatusTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "StockStatus" + ",";
        narrowSearchValues += "@";
    }
    if (WOSupplierValues != undefined && WOSupplierValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += WOSupplierValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }
    if (RequistionSupplierValues != undefined && RequistionSupplierValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += RequistionSupplierValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }



    if (UserUDF6NarrowValues != undefined && UserUDF6NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "UDF6" + ",";
        narrowSearchValues += UserUDF6NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF6" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF7NarrowValues != undefined && UserUDF7NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF2#" + UserUDF2NarrowValues;
        narrowSearchFields += "UDF7" + ",";
        narrowSearchValues += UserUDF7NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF7" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF8NarrowValues != undefined && UserUDF8NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF3#" + UserUDF3NarrowValues;
        narrowSearchFields += "UDF8" + ",";
        narrowSearchValues += UserUDF8NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF8" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF9NarrowValues != undefined && UserUDF9NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF4#" + UserUDF4NarrowValues;
        narrowSearchFields += "UDF9" + ",";
        narrowSearchValues += UserUDF9NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF9" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF10NarrowValues != undefined && UserUDF10NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF5#" + UserUDF5NarrowValues;
        narrowSearchFields += "UDF10" + ",";
        narrowSearchValues += UserUDF10NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF10" + ",";
        narrowSearchValues += "@";
    }
    if (ItemActive != undefined && ItemActive.length > 0) {
        narrowSearchFields += "IsActive" + ",";
        narrowSearchValues += ItemActive + "@";
    }
    else {
        narrowSearchFields += "IsActive" + ",";
        narrowSearchValues += "@";
    }
    if (RoleEnterpriseNarroValues != undefined && RoleEnterpriseNarroValues.length > 0) {
        narrowSearchFields += "RoleEnterprise" + ",";
        narrowSearchValues += RoleEnterpriseNarroValues + "@";
    }
    else {
        narrowSearchFields += "RoleEnterprise" + ",";
        narrowSearchValues += "@";
    }
    if (ItemNumberItemBinNarroValues != undefined && ItemNumberItemBinNarroValues.length > 0) {
        narrowSearchFields += "ItemNumber" + ",";
        narrowSearchValues += ItemNumberItemBinNarroValues + "@";
    }
    else {
        narrowSearchFields += "ItemNumber" + ",";
        narrowSearchValues += "@";
    }
    if (BinListItemBinNarroValues != undefined && BinListItemBinNarroValues.length > 0) {
        narrowSearchFields += "BinNumber" + ",";
        narrowSearchValues += BinListItemBinNarroValues + "@";
    }
    else {
        narrowSearchFields += "BinNumber" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////27//////////////////////////////////////////////////////////
    if (MaintenanceValue != undefined && MaintenanceValue.length > 0) {
        narrowSearchFields += "MaintenanceValue" + ",";
        narrowSearchValues += MaintenanceValue + "@";
    }
    else {
        narrowSearchFields += "MaintenanceValue" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////////////////////////////////////////////////////////////
    if (BillingRoomTypeTypeNarroValues != undefined && BillingRoomTypeTypeNarroValues.length > 0) {
        narrowSearchFields += "BillingRoomType" + ",";
        narrowSearchValues += BillingRoomTypeTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "BillingRoomType" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////////////////////////////////////////////////////////////
    if (InvoiceBranchNarroValues != undefined && InvoiceBranchNarroValues.length > 0) {
        narrowSearchFields += "InvoiceBranch" + ",";
        narrowSearchValues += InvoiceBranchNarroValues + "@";
    }
    else {
        narrowSearchFields += "InvoiceBranch" + ",";
        narrowSearchValues += "@";
    }

    ////////////////////////////////////////104 [Requisition Status Narrow Search]////////////////////////////////////////////////
    if (ddlRequisitionStatusNarroValues != undefined && ddlRequisitionStatusNarroValues.length > 0) {

        narrowSearchFields += "RequisitionStatusNS" + ",";
        narrowSearchValues += ddlRequisitionStatusNarroValues + "@";
    }
    else {

        narrowSearchFields += "RequisitionStatusNS" + ",";
        narrowSearchValues += "@";
    }

    ////////////////////////////////////////105 [Pull Consignment Narrow Search]////////////////////////////////////////////////
    if (PullConsignmentNarroSearchValue != undefined && PullConsignmentNarroSearchValue.length > 0) {

        narrowSearchFields += "Consignment" + ",";
        narrowSearchValues += PullConsignmentNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Consignment" + ",";
        narrowSearchValues += "@";
    }

    ////////////////////////////////////////106 [Asset Category Narrow Search]////////////////////////////////////////////////
    if (AssetCategoryValue != undefined && AssetCategoryValue.length > 0) {
        narrowSearchFields += "AssetCategoryID" + ",";
        narrowSearchValues += AssetCategoryValue + "@";
    }
    else {
        narrowSearchFields += "AssetCategoryID" + ",";
        narrowSearchValues += "@";
    }

    ////////////////////////////////////////107 [work order WOType Option in Narrowsearch]////////////////////////////////////////////////
    if (WOTypeValues != undefined && WOTypeValues.length > 0) {
        narrowSearchFields += "WOType" + ",";
        narrowSearchValues += WOTypeValues + "@";
    }
    else {
        narrowSearchFields += "WOType" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////108 [Report Type option in Narrowsearch]///////////////////////////////////////////////////////
    if (ReportTypeNarroSearchValue != undefined && ReportTypeNarroSearchValue.length > 0) {
        narrowSearchFields += "ReportType" + ",";
        narrowSearchValues += ReportTypeNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "ReportType" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////109////////////////////////////////////////////////////

    if (ItemUDF6 != undefined && ItemUDF6.length > 0) {
        narrowSearchFields += "ItemUDF6" + ",";
        narrowSearchValues += ItemUDF6 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF6" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////110////////////////////////////////////////////////////

    if (ItemUDF7 != undefined && ItemUDF7.length > 0) {
        narrowSearchFields += "ItemUDF7" + ",";
        narrowSearchValues += ItemUDF7 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF7" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////111////////////////////////////////////////////////////

    if (ItemUDF8 != undefined && ItemUDF8.length > 0) {
        narrowSearchFields += "ItemUDF8" + ",";
        narrowSearchValues += ItemUDF8 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF8" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////112////////////////////////////////////////////////////

    if (ItemUDF9 != undefined && ItemUDF9.length > 0) {
        narrowSearchFields += "ItemUDF9" + ",";
        narrowSearchValues += ItemUDF9 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF9" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////113////////////////////////////////////////////////////

    if (ItemUDF10 != undefined && ItemUDF10.length > 0) {
        narrowSearchFields += "ItemUDF10" + ",";
        narrowSearchValues += ItemUDF10 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF10" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////114////////////////////////////////////////////////////

    if (ToolTechUDF1 != undefined && ToolTechUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF1" + ",";
        narrowSearchValues += ToolTechUDF1 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF1" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////115////////////////////////////////////////////////////

    if (ToolTechUDF2 != undefined && ToolTechUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF2" + ",";
        narrowSearchValues += ToolTechUDF2 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF2" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////116////////////////////////////////////////////////////

    if (ToolTechUDF3 != undefined && ToolTechUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF3" + ",";
        narrowSearchValues += ToolTechUDF3 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF3" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////117////////////////////////////////////////////////////

    if (ToolTechUDF4 != undefined && ToolTechUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF4" + ",";
        narrowSearchValues += ToolTechUDF4 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF4" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////118////////////////////////////////////////////////////

    if (ToolTechUDF5 != undefined && ToolTechUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF5" + ",";
        narrowSearchValues += ToolTechUDF5 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF5" + ",";
        narrowSearchValues += "@";
    }

    if (PullSupplierAccountNumberValues != undefined && PullSupplierAccountNumberValues.length > 0) {
        narrowSearchFields += "SupplierAccountNumber" + ",";
        narrowSearchValues += PullSupplierAccountNumberValues + "@";
    }
    else {
        narrowSearchFields += "SupplierAccountNumber" + ",";
        narrowSearchValues += "@";
    }

    // Schedule Mapping Start
    if (ScheduleForNarroValues != undefined && ScheduleForNarroValues.length > 0) {
        narrowSearchFields += "ScheduleFor" + ",";
        narrowSearchValues += ScheduleForNarroValues + "@";
    }
    else {
        narrowSearchFields += "ScheduleFor" + ",";
        narrowSearchValues += "@";
    }

    if (ScheduleItemNarroValues != undefined && ScheduleItemNarroValues.length > 0) {
        narrowSearchFields += "ScheduleItem" + ",";
        narrowSearchValues += ScheduleItemNarroValues + "@";
    }
    else {
        narrowSearchFields += "ScheduleItem" + ",";
        narrowSearchValues += "@";
    }

    if (ScheduleTypeNarroValues != undefined && ScheduleTypeNarroValues.length > 0) {
        narrowSearchFields += "ScheduleType" + ",";
        narrowSearchValues += ScheduleTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "ScheduleType" + ",";
        narrowSearchValues += "@";
    }

    if (SchedulerNameNarroValues != undefined && SchedulerNameNarroValues.length > 0) {
        narrowSearchFields += "SchedulerName" + ",";
        narrowSearchValues += SchedulerNameNarroValues + "@";
    }
    else {
        narrowSearchFields += "SchedulerName" + ",";
        narrowSearchValues += "@";
    }

    if (ToolAssetNameNarroValues != undefined && ToolAssetNameNarroValues.length > 0) {
        narrowSearchFields += "ToolAssetName" + ",";
        narrowSearchValues += ToolAssetNameNarroValues + "@";
    }
    else {
        narrowSearchFields += "ToolAssetName" + ",";
        narrowSearchValues += "@";
    }

    ////////////////////////////////////////[Quote Status Narrow Search]////////////////////////////////////////////////
    if (QuoteStatusNarroValues != undefined && QuoteStatusNarroValues.length > 0) {

        narrowSearchFields += "QuoteStatus" + ",";
        narrowSearchValues += QuoteStatusNarroValues + "@";
    }
    else {

        narrowSearchFields += "QuoteStatus" + ",";
        narrowSearchValues += "@";
    }

    if (QuoteSupplierNarrowValues != undefined && QuoteSupplierNarrowValues.length > 0) {

        narrowSearchFields += "QuoteSupplier" + ",";
        narrowSearchValues += QuoteSupplierNarrowValues + "@";
    }
    else {

        narrowSearchFields += "QuoteSupplier" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////// [work order status Option in Narrowsearch]////////////////////////////////////////////////
    if (typeof (WOStatusValues) != "undefined" && WOStatusValues != null && WOStatusValues.length > 0) {
        narrowSearchFields += "WOStatus" + ",";
        narrowSearchValues += WOStatusValues + "@";
    }
    else {
        narrowSearchFields += "WOStatus" + ",";
        narrowSearchValues += "@";
    }

    var searchtext = '';
    var tmpGlobalFilter = $("#global_filter");
    if (tmpGlobalFilter !== undefined && tmpGlobalFilter != null && tmpGlobalFilter.val() != undefined && tmpGlobalFilter.val() != null && tmpGlobalFilter.val() != '')
        searchtext = $("#global_filter").val().replace(/'/g, "''").replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
    narrowSearch = narrowSearchFields + "[###]" + narrowSearchValues + "[###]" + searchtext;

    if (narrowSearch.length > 10)
        NarrowSearchInGrid(narrowSearch);
    else if (UserCreatedNarroValues == undefined || UserCreatedNarroValues.length == 0 ||
        UserUpdatedNarroValues == undefined || UserUpdatedNarroValues.length == 0)
        NarrowSearchInGrid(narrowSearch);
    // }

}

function DoNarrowSearchTM() {

    var narrowSearchFields = '';
    var narrowSearchValues = '';
    var narrowSearchItem = '';

    eraseCookieforshift("selectstartindex");
    eraseCookieforshift("selectendindex");
    eraseCookieforshift("finalselectedarray");


    if (UserCreatedNarroValues != undefined && UserCreatedNarroValues.length > 0) {
        //narrowSearchItem += "[###]CreatedBy#" + UserCreatedNarroValues;
        narrowSearchFields += "CreatedBy" + ",";
        narrowSearchValues += UserCreatedNarroValues + "@";
    }
    else {
        narrowSearchFields += "CreatedBy" + ",";
        narrowSearchValues += "@";
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUpdatedNarroValues != undefined && UserUpdatedNarroValues.length > 0) {
        //narrowSearchItem += "[###]UpdatedBy#" + UserUpdatedNarroValues;
        narrowSearchFields += "UpdatedBy" + ",";
        narrowSearchValues += UserUpdatedNarroValues + "@";
    }
    else {
        narrowSearchFields += "UpdatedBy" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (($('#DateCFrom').val() != '' && $('#DateCTo').val() != '') || ($('#ReceiveDateCFrom').val() != '' && $('#ReceiveDateCTo').val() != '') || ($('#DateCFromIM').val() != '' && $('#DateCToIM').val() != '')) {
        //narrowSearchItem += "[###]DateCreatedFrom#" + GetDateInYYYYMMDDFormat($('#DateCFrom').val()) + "#DateCreatedTo#" + GetDateInYYYYMMDDFormat($('#DateCTo').val());        
        narrowSearchFields += "DateCreatedFrom" + ",";

        if (typeof $('#DateCTo').val() != "undefined" && typeof $('#DateCFrom').val() != "undefined" && $('#DateCFrom').val() != '' && $('#DateCTo').val() != '')
            narrowSearchValues += ($('#DateCFrom').val()) + "," + ($('#DateCTo').val()) + "@";
        else if (typeof $('#ReceiveDateCFrom').val() != "undefined" && typeof $('#ReceiveDateCTo').val() != "undefined" && $('#ReceiveDateCFrom').val() != '' && $('#ReceiveDateCTo').val() != '')
            narrowSearchValues += ($('#ReceiveDateCFrom').val()) + "," + ($('#ReceiveDateCTo').val()) + "@";
        else if (typeof $('#DateCFromIM').val() != "undefined" && typeof $('#DateCToIM').val() != "undefined" && $('#DateCFromIM').val() != '' && $('#DateCToIM').val() != '')
        {
            narrowSearchValues += ($('#DateCFromIM').val()) + "," + ($('#DateCToIM').val()) + "@";
        }
        else
            narrowSearchValues += "@";
    }
    else {
        narrowSearchFields += "DateCreatedFrom" + ",";
        narrowSearchValues += "@";
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    if (($('#DateUFrom').val() != '' && $('#DateUTo').val() != '') || ($('#ReceiveDateUFrom').val() != '' && $('#ReceiveDateUTo').val() != '') || ($('#DateUFromIM').val() != '' && $('#DateUToIM').val() != '')) {
        //narrowSearchItem += "[###]DateUpdatedFrom#" + GetDateInYYYYMMDDFormat($('#DateUFrom').val()) + "#DateUpdatedTo#" + GetDateInYYYYMMDDFormat($('#DateUTo').val());
        narrowSearchFields += "DateUpdatedFrom" + ",";
        if (typeof $('#DateUFrom').val() != "undefined" && typeof $('#DateUTo').val() != "undefined" && $('#DateUTo').val() != '' && $('#DateUFrom').val() != '')
            narrowSearchValues += ($('#DateUFrom').val()) + "," + ($('#DateUTo').val()) + "@";
        else if (typeof $('#ReceiveDateUFrom').val() != "undefined" && typeof $('#ReceiveDateUTo').val() != "undefined" && $('#ReceiveDateUTo').val() != '' && $('#ReceiveDateUFrom').val() != '')
            narrowSearchValues += ($('#ReceiveDateUFrom').val()) + "," + ($('#ReceiveDateUTo').val()) + "@";
        else if (typeof $('#DateUFromIM').val() != "undefined" && typeof $('#DateUToIM').val() != "undefined" && $('#DateUFromIM').val() != '' && $('#DateUToIM').val() != '') {
            narrowSearchValues += ($('#DateUFromIM').val()) + "," + ($('#DateUToIM').val()) + "@";
        }
        else
            narrowSearchValues += "@";
    }
    else {
        narrowSearchFields += "DateUpdatedFrom" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF1NarrowValues != undefined && UserUDF1NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "UDF1" + ",";
        narrowSearchValues += UserUDF1NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF1" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF2NarrowValues != undefined && UserUDF2NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF2#" + UserUDF2NarrowValues;
        narrowSearchFields += "UDF2" + ",";
        narrowSearchValues += UserUDF2NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF2" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF3NarrowValues != undefined && UserUDF3NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF3#" + UserUDF3NarrowValues;
        narrowSearchFields += "UDF3" + ",";
        narrowSearchValues += UserUDF3NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF3" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF4NarrowValues != undefined && UserUDF4NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF4#" + UserUDF4NarrowValues;
        narrowSearchFields += "UDF4" + ",";
        narrowSearchValues += UserUDF4NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF4" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF5NarrowValues != undefined && UserUDF5NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF5#" + UserUDF5NarrowValues;
        narrowSearchFields += "UDF5" + ",";
        narrowSearchValues += UserUDF5NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF5" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullSupplierNarroValues != undefined && PullSupplierNarroValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += PullSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    if (ManufacturerNarroValues != undefined && ManufacturerNarroValues.length > 0) {
        narrowSearchFields += "ManufacturerID" + ",";
        narrowSearchValues += ManufacturerNarroValues + "@";
    }
    else {
        narrowSearchFields += "ManufacturerID" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    if (PullCategoryNarroValues != undefined && PullCategoryNarroValues.length > 0) {
        narrowSearchFields += "CategoryID" + ",";
        narrowSearchValues += PullCategoryNarroValues + "@";
    }
    else {
        narrowSearchFields += "CategoryID" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (OrderSupplierNarroValues != undefined && OrderSupplierNarroValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += OrderSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (OrderStatusNarroValues != undefined && OrderStatusNarroValues.length > 0) {
        narrowSearchFields += "OrderStatus" + ",";
        narrowSearchValues += OrderStatusNarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderStatus" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (OrderRequiredDateNarroValues != undefined && OrderRequiredDateNarroValues.length > 0) {
        narrowSearchFields += "OrderRequiredDate" + ",";
        narrowSearchValues += OrderRequiredDateNarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderRequiredDate" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////15//////////////////////////////////////////////////////////

    if (CostNarroSearchValue != undefined && CostNarroSearchValue.length > 0) {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += CostNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////16//////////////////////////////////////////////////////////

    if (spendPerSpendLimit != undefined && spendPerSpendLimit.length > 0) {
        narrowSearchFields += "spendPerSpendLimit" + ",";
        narrowSearchValues += spendPerSpendLimit + "@";
    }
    else {
        narrowSearchFields += "spendPerSpendLimit" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////17//////////////////////////////////////////////////////////

    if (TotalSpendLimit != undefined && TotalSpendLimit.length > 0) {
        narrowSearchFields += "TotalSpendLimit" + ",";
        narrowSearchValues += TotalSpendLimit + "@";
    }
    else {
        narrowSearchFields += "TotalSpendLimit" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////18//////////////////////////////////////////////////////////

    if (TotalSpendRemaining != undefined && TotalSpendRemaining.length > 0) {
        narrowSearchFields += "TotalSpendRemaining" + ",";
        narrowSearchValues += TotalSpendRemaining + "@";
    }
    else {
        narrowSearchFields += "TotalSpendRemaining" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////19//////////////////////////////////////////////////////////

    if (TotalItemSpendLimit != undefined && TotalItemSpendLimit.length > 0) {
        narrowSearchFields += "TotalItemSpendLimit" + ",";
        narrowSearchValues += TotalItemSpendLimit + "@";
    }
    else {
        narrowSearchFields += "TotalItemSpendLimit" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////20//////////////////////////////////////////////////////////

    if (MatStagLocationsNarroValues != undefined && MatStagLocationsNarroValues.length > 0) {
        narrowSearchFields += "BinName" + ",";
        narrowSearchValues += MatStagLocationsNarroValues + "@";
    }
    else {
        narrowSearchFields += "BinName" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////21//////////////////////////////////////////////////////////

    if (SSNarroSearchValue != undefined && SSNarroSearchValue.length > 0) {
        narrowSearchFields += "SS" + ",";
        narrowSearchValues += SSNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "SS" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////22//////////////////////////////////////////////////////////

    if (ItemTypeNarroSearchValue != undefined && ItemTypeNarroSearchValue.length > 0) {
        narrowSearchFields += "ItemType" + ",";
        narrowSearchValues += ItemTypeNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "ItemType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////23//////////////////////////////////////////////////////////

    if (CartSupplierNarroValues != undefined && CartSupplierNarroValues.length > 0) {
        narrowSearchFields += "SupplierName" + ",";
        narrowSearchValues += CartSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "SupplierName" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////24//////////////////////////////////////////////////////////

    if (CartRTNarroValues != undefined && CartRTNarroValues.length > 0) {
        narrowSearchFields += "ReplenishType" + ",";
        narrowSearchValues += CartRTNarroValues + "@";
    }
    else {
        narrowSearchFields += "ReplenishType" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////25//////////////////////////////////////////////////////////
    if (RequisitionCurrentTab != undefined && RequisitionCurrentTab.length > 0) {

        narrowSearchFields += "RequisitionStatus" + ",";
        narrowSearchValues += RequisitionCurrentTab + "@";
    }
    else {

        narrowSearchFields += "RequisitionStatus" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////26//////////////////////////////////////////////////////////
    if (OrderNumberNarroValues != undefined && OrderNumberNarroValues.length > 0) {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += OrderNumberNarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////27//////////////////////////////////////////////////////////
    if (LocationValue != undefined && LocationValue.length > 0) {
        narrowSearchFields += "LocationID" + ",";
        narrowSearchValues += LocationValue + "@";
    }
    else {
        narrowSearchFields += "LocationID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////28//////////////////////////////////////////////////////////
    if (WorkOrderValue != undefined && WorkOrderValue.length > 0) {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += WorkOrderValue + "@";
    }
    else {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////29//////////////////////////////////////////////////////////
    if (ToolCategoryValue != undefined && ToolCategoryValue.length > 0) {
        narrowSearchFields += "ToolCategoryID" + ",";
        narrowSearchValues += ToolCategoryValue + "@";
    }
    else {
        narrowSearchFields += "ToolCategoryID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////30//////////////////////////////////////////////////////////
    if (ToolMaintanceValue != undefined && ToolMaintanceValue.length > 0) {
        narrowSearchFields += "ToolMaintanenceID" + ",";
        narrowSearchValues += ToolMaintanceValue + "@";
    }
    else {
        narrowSearchFields += "ToolMaintanenceID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////31//////////////////////////////////////////////////////////
    if (ToolCostValue != undefined && ToolCostValue.length > 0) {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += ToolCostValue + "@";
    }
    else {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////32//////////////////////////////////////////////////////////
    if (WOAssetValues != undefined && WOAssetValues.length > 0) {
        narrowSearchFields += "AssetID" + ",";
        narrowSearchValues += WOAssetValues + "@";
    }
    else {
        narrowSearchFields += "AssetID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////33//////////////////////////////////////////////////////////
    if (WOCustomerValues != undefined && WOCustomerValues.length > 0) {
        narrowSearchFields += "CustomerID" + ",";
        narrowSearchValues += WOCustomerValues + "@";
    }
    else {
        narrowSearchFields += "CustomerID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////34//////////////////////////////////////////////////////////
    if (WOTechnicianValues != undefined && WOTechnicianValues.length > 0) {
        narrowSearchFields += "TechnicianID" + ",";
        narrowSearchValues += WOTechnicianValues + "@";
    }
    else {
        narrowSearchFields += "TechnicianID" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////35//////////////////////////////////////////////////////////
    if (WOToolValues != undefined && WOToolValues.length > 0) {
        narrowSearchFields += "ToolID" + ",";
        narrowSearchValues += WOToolValues + "@";
    }
    else {
        narrowSearchFields += "ToolID" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////36//////////////////////////////////////////////////////////
    if (RoleUserTypeNarroValues != undefined && RoleUserTypeNarroValues.length > 0) {
        narrowSearchFields += "UserType" + ",";
        narrowSearchValues += RoleUserTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////37//////////////////////////////////////////////////////////
    if (ICountTypeNarroValues != undefined && ICountTypeNarroValues.length > 0) {
        narrowSearchFields += "CountType" + ",";
        narrowSearchValues += ICountTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "CountType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ICountStatusNarroValues != undefined && ICountStatusNarroValues.length > 0) {
        narrowSearchFields += "CountStatus" + ",";
        narrowSearchValues += ICountStatusNarroValues + "@";
    }
    else {
        narrowSearchFields += "CountStatus" + ",";
        narrowSearchValues += "@";
    }
    //narrowSearch = 'STARTWITH#' + narrowSearchItem;


    //////////////////////////////////////39//////////////////////////////////////////////////////////
    if (UserTypeNarroValues != undefined && UserTypeNarroValues.length > 0) {
        narrowSearchFields += "UserType" + ",";
        narrowSearchValues += UserTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////40//////////////////////////////////////////////////////////
    if (UserRoomNarroValues != undefined && UserRoomNarroValues.length > 0) {
        narrowSearchFields += "UserRoom" + ",";
        narrowSearchValues += UserRoomNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserRoom" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////41//////////////////////////////////////////////////////////
    if (UserRoleNarroValues != undefined && UserRoleNarroValues.length > 0) {
        narrowSearchFields += "UserRole" + ",";
        narrowSearchValues += UserRoleNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserRole" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////42//////////////////////////////////////////////////////////
    if (UserCompanyNarroValues != undefined && UserCompanyNarroValues.length > 0) {
        narrowSearchFields += "UserCompany" + ",";
        narrowSearchValues += UserCompanyNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserCompany" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////43//////////////////////////////////////////////////////////
    if (RoleRoomNarroValues != undefined && RoleRoomNarroValues.length > 0) {
        narrowSearchFields += "RoleRoom" + ",";
        narrowSearchValues += RoleRoomNarroValues + "@";
    }
    else {
        narrowSearchFields += "RoleRoom" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////44//////////////////////////////////////////////////////////
    if (RoleCompanyNarroValues != undefined && RoleCompanyNarroValues.length > 0) {
        narrowSearchFields += "RoleCompany" + ",";
        narrowSearchValues += RoleCompanyNarroValues + "@";
    }
    else {
        narrowSearchFields += "RoleCompany" + ",";
        narrowSearchValues += "@";
    }

    ///////////////////////////////////45/////////////////////////////////////////////////////////////
    if (SchedulerItemSearchValue != undefined && SchedulerItemSearchValue.length > 0) {
        narrowSearchFields += "SchedulerItem" + ",";
        narrowSearchValues += SchedulerItemSearchValue + "@";
    }
    else {
        narrowSearchFields += "SchedulerItem" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////46//////////////////////////////////////////////////////////////
    if (SchedulerTypeSearchValue != undefined && SchedulerTypeSearchValue.length > 0) {
        narrowSearchFields += "SchedulerType" + ",";
        narrowSearchValues += SchedulerTypeSearchValue + "@";
    }
    else {
        narrowSearchFields += "SchedulerType" + ",";
        narrowSearchValues += "@";
    }
    if (WorkOrderNarroValues != undefined && WorkOrderNarroValues.length > 0) {

        narrowSearchFields += "WorkOrderName" + ",";
        narrowSearchValues += WorkOrderNarroValues + "@";
    }
    else {
        narrowSearchFields += "WorkOrderName" + ",";
        narrowSearchValues += "@";
    }
    if (AverageCostNarroSearchValue != undefined && AverageCostNarroSearchValue.length > 0) {

        narrowSearchFields += "AverageCost" + ",";
        narrowSearchValues += AverageCostNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "AverageCost" + ",";
        narrowSearchValues += "@";
    }
    if (TurnsNarroSearchValue != undefined && TurnsNarroSearchValue.length > 0) {

        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += TurnsNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += "@";
    }

    if (PullActionTypeNarroSearchValue != undefined && PullActionTypeNarroSearchValue.length > 0) {

        narrowSearchFields += "ActionType" + ",";
        narrowSearchValues += PullActionTypeNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "ActionType" + ",";
        narrowSearchValues += "@";
    }


    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ntfcEmailTemlateNarroValues != undefined && ntfcEmailTemlateNarroValues.length > 0) {
        narrowSearchFields += "EmailTemplate" + ",";
        narrowSearchValues += ntfcEmailTemlateNarroValues + "@";
    }
    else {
        narrowSearchFields += "EmailTemplate" + ",";
        narrowSearchValues += "@";
    }


    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ntfcReportsNarroValues != undefined && ntfcReportsNarroValues.length > 0) {
        narrowSearchFields += "Reports" + ",";
        narrowSearchValues += ntfcReportsNarroValues + "@";
    }
    else {
        narrowSearchFields += "Reports" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ntfcScheduleNarroValues != undefined && ntfcScheduleNarroValues.length > 0) {
        narrowSearchFields += "Schedules" + ",";
        narrowSearchValues += ntfcScheduleNarroValues + "@";
    }
    else {
        narrowSearchFields += "Schedules" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////38//////////////////////////////////////////////////////////
    if (ntfcNotificationTypeNarroValues != undefined && ntfcNotificationTypeNarroValues.length > 0) {
        narrowSearchFields += "NotificationTypes" + ",";
        narrowSearchValues += ntfcNotificationTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "NotificationTypes" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    if (ItemLocationNarroValues != undefined && ItemLocationNarroValues.length > 0) {
        narrowSearchFields += "ItemLocations" + ",";
        narrowSearchValues += ItemLocationNarroValues + "@";
    }
    else {
        narrowSearchFields += "ItemLocations" + ",";
        narrowSearchValues += "@";
    }

    if (EnterpriseNarroValues != undefined && EnterpriseNarroValues.length > 0) {
        narrowSearchFields += "EnterpriseName" + ",";
        narrowSearchValues += EnterpriseNarroValues + "@";
    }
    else {
        narrowSearchFields += "EnterpriseName" + ",";
        narrowSearchValues += "@";
    }

    if (RoleCompanyNarroValues != undefined && RoleCompanyNarroValues.length > 0) {
        narrowSearchFields += "CompanyName" + ",";
        narrowSearchValues += RoleCompanyNarroValues + "@";
    }
    else {
        narrowSearchFields += "EnterpriseName" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullProjectSpendNarroValues != undefined && PullProjectSpendNarroValues.length > 0) {
        narrowSearchFields += "ProjectSpendID" + ",";
        narrowSearchValues += PullProjectSpendNarroValues + "@";
    }
    else {

        narrowSearchFields += "ProjectSpendID" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullWorkOrderValues != undefined && PullWorkOrderValues.length > 0) {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += PullWorkOrderValues + "@";
    }
    else {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullRequistionarroValues != undefined && PullRequistionarroValues.length > 0) {
        narrowSearchFields += "RequistionID" + ",";
        narrowSearchValues += PullRequistionarroValues + "@";
    }
    else {
        narrowSearchFields += "RequistionID" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (IsBillingNarroSearchValue != undefined && IsBillingNarroSearchValue.length > 0) {
        narrowSearchFields += "Billing" + ",";
        narrowSearchValues += IsBillingNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Billing" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (IsEDISentNarroSearchValue != undefined && IsEDISentNarroSearchValue.length > 0) {
        narrowSearchFields += "IsEDISent" + ",";
        narrowSearchValues += IsEDISentNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "IsEDISent" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (AvgUsageNarroSearchValue != undefined && AvgUsageNarroSearchValue.length > 0) {
        narrowSearchFields += "AverageUsage" + ",";
        narrowSearchValues += AvgUsageNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "AverageUsage" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (TurnsNarroSearchValue != undefined && TurnsNarroSearchValue.length > 0) {
        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += TurnsNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF1 != undefined && ItemUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF1" + ",";
        narrowSearchValues += ItemUDF1 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF1" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF2 != undefined && ItemUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF2" + ",";
        narrowSearchValues += ItemUDF2 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF2" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF3 != undefined && ItemUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF3" + ",";
        narrowSearchValues += ItemUDF3 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF3" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF4 != undefined && ItemUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF4" + ",";
        narrowSearchValues += ItemUDF4 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF4" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF5 != undefined && ItemUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF5" + ",";
        narrowSearchValues += ItemUDF5 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF5" + ",";
        narrowSearchValues += "@";
    }
    if (RoomStatusValue != undefined && RoomStatusValue.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "RoomStatusValue" + ",";
        narrowSearchValues += RoomStatusValue + "@";
    }
    else {
        narrowSearchFields += "RoomStatusValue" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF1 != undefined && ToolCheckOutUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += ToolCheckOutUDF1 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF2 != undefined && ToolCheckOutUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += ToolCheckOutUDF2 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF3 != undefined && ToolCheckOutUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += ToolCheckOutUDF3 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF4 != undefined && ToolCheckOutUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += ToolCheckOutUDF4 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF5 != undefined && ToolCheckOutUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += ToolCheckOutUDF5 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += "@";
    }

    if (ToolCheckoutValue != undefined && ToolCheckoutValue.length > 0) {
        narrowSearchFields += "Maintense" + ",";
        narrowSearchValues += ToolCheckoutValue + "@";
    }
    else {
        narrowSearchFields += "Maintense" + ",";
        narrowSearchValues += "@";
    }
    if (ToolTechnicianValue != undefined && ToolTechnicianValue.length > 0) {
        narrowSearchFields += "ToolTechnician" + ",";
        narrowSearchValues += ToolTechnicianValue + "@";
    }
    else {
        narrowSearchFields += "ToolTechnician" + ",";
        narrowSearchValues += "@";
    }
    if (PullOrderNumbernarroValues != undefined && PullOrderNumbernarroValues.length > 0) {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += PullOrderNumbernarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += "@";
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserEnterpriseNarroValues != undefined && UserEnterpriseNarroValues.length > 0) {
        narrowSearchFields += "UserEnterprise" + ",";
        narrowSearchValues += UserEnterpriseNarroValues + "@";
    }
    else {
        narrowSearchFields += "UserEnterprise" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////80///////////////////////////////////////////////////////
    if (MoveTypeNarroValues != undefined && MoveTypeNarroValues.length > 0) {
        narrowSearchFields += "MoveType" + ",";
        narrowSearchValues += MoveTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "MoveType" + ",";
        narrowSearchValues += "@";
    }
    if (MouleTypeNarroValues != undefined && MouleTypeNarroValues.length > 0) {
        narrowSearchFields += "ModuleType" + ",";
        narrowSearchValues += MouleTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "ModuleType" + ",";
        narrowSearchValues += "@";
    }
    if (ItemsNarroValues != undefined && ItemsNarroValues.length > 0) {
        narrowSearchFields += "Items" + ",";
        narrowSearchValues += ItemsNarroValues + "@";
    }
    else {
        narrowSearchFields += "Items" + ",";
        narrowSearchValues += "@";
    }
    if (UserSupplierNarroValues != undefined && UserSupplierNarroValues.length > 0) {
        narrowSearchFields += "Supplier" + ",";
        narrowSearchValues += UserSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "Supplier" + ",";
        narrowSearchValues += "@";
    }
    if (CateogryNarroValues != undefined && CateogryNarroValues.length > 0) {
        narrowSearchFields += "Category" + ",";
        narrowSearchValues += CateogryNarroValues + "@";
    }
    else {
        narrowSearchFields += "Category" + ",";
        narrowSearchValues += "@";
    }
    if (PullPOStatusValue != undefined && PullPOStatusValue.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "PullPOStatusValue" + ",";
        narrowSearchValues += PullPOStatusValue + "@";
    }
    else {
        narrowSearchFields += "PullPOStatusValue" + ",";
        narrowSearchValues += "@";
    }

    if (CompanyStatusValue != undefined && CompanyStatusValue.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "CompanyStatusValue" + ",";
        narrowSearchValues += CompanyStatusValue + "@";
    }
    else {
        narrowSearchFields += "CompanyStatusValue" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////
    if (InventoryClassificationNarroSearchValue != undefined && InventoryClassificationNarroSearchValue.length > 0) {
        narrowSearchFields += "InventoryClassification" + ",";
        narrowSearchValues += InventoryClassificationNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "InventoryClassification" + ",";
        narrowSearchValues += "@";
    }
    //ItemLocations
    if (ItemTrackingTypeNarroValues != undefined && ItemTrackingTypeNarroValues.length > 0) {
        narrowSearchFields += "ItemTrackingType" + ",";
        narrowSearchValues += ItemTrackingTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "ItemTrackingType" + ",";
        narrowSearchValues += "@";
    }
    //narrowSearch = 'STARTWITH#' + narrowSearchItem;
    //if (narrowSearchValues.replace(/@/g, '') == '')
    //    NarrowSearchInGrid('');
    //else {
    if (StockStatusTypeNarroValues != undefined && StockStatusTypeNarroValues.length > 0) {
        narrowSearchFields += "StockStatus" + ",";
        narrowSearchValues += StockStatusTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "StockStatus" + ",";
        narrowSearchValues += "@";
    }
    if (WOSupplierValues != undefined && WOSupplierValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += WOSupplierValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }
    if (RequistionSupplierValues != undefined && RequistionSupplierValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += RequistionSupplierValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }



    if (UserUDF6NarrowValues != undefined && UserUDF6NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "UDF6" + ",";
        narrowSearchValues += UserUDF6NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF6" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF7NarrowValues != undefined && UserUDF7NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF2#" + UserUDF2NarrowValues;
        narrowSearchFields += "UDF7" + ",";
        narrowSearchValues += UserUDF7NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF7" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF8NarrowValues != undefined && UserUDF8NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF3#" + UserUDF3NarrowValues;
        narrowSearchFields += "UDF8" + ",";
        narrowSearchValues += UserUDF8NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF8" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF9NarrowValues != undefined && UserUDF9NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF4#" + UserUDF4NarrowValues;
        narrowSearchFields += "UDF9" + ",";
        narrowSearchValues += UserUDF9NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF9" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF10NarrowValues != undefined && UserUDF10NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF5#" + UserUDF5NarrowValues;
        narrowSearchFields += "UDF10" + ",";
        narrowSearchValues += UserUDF10NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF10" + ",";
        narrowSearchValues += "@";
    }
    if (ItemActive != undefined && ItemActive.length > 0) {
        narrowSearchFields += "IsActive" + ",";
        narrowSearchValues += ItemActive + "@";
    }
    else {
        narrowSearchFields += "IsActive" + ",";
        narrowSearchValues += "@";
    }
    if (RoleEnterpriseNarroValues != undefined && RoleEnterpriseNarroValues.length > 0) {
        narrowSearchFields += "RoleEnterprise" + ",";
        narrowSearchValues += RoleEnterpriseNarroValues + "@";
    }
    else {
        narrowSearchFields += "RoleEnterprise" + ",";
        narrowSearchValues += "@";
    }
    if (ItemNumberItemBinNarroValues != undefined && ItemNumberItemBinNarroValues.length > 0) {
        narrowSearchFields += "ItemNumber" + ",";
        narrowSearchValues += ItemNumberItemBinNarroValues + "@";
    }
    else {
        narrowSearchFields += "ItemNumber" + ",";
        narrowSearchValues += "@";
    }
    if (BinListItemBinNarroValues != undefined && BinListItemBinNarroValues.length > 0) {
        narrowSearchFields += "BinNumber" + ",";
        narrowSearchValues += BinListItemBinNarroValues + "@";
    }
    else {
        narrowSearchFields += "BinNumber" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////27//////////////////////////////////////////////////////////
    if (MaintenanceValue != undefined && MaintenanceValue.length > 0) {
        narrowSearchFields += "MaintenanceValue" + ",";
        narrowSearchValues += MaintenanceValue + "@";
    }
    else {
        narrowSearchFields += "MaintenanceValue" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////////////////////////////////////////////////////////////
    if (BillingRoomTypeTypeNarroValues != undefined && BillingRoomTypeTypeNarroValues.length > 0) {
        narrowSearchFields += "BillingRoomType" + ",";
        narrowSearchValues += BillingRoomTypeTypeNarroValues + "@";
    }
    else {
        narrowSearchFields += "BillingRoomType" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////////////////////////////////////////////////////////////
    if (InvoiceBranchNarroValues != undefined && InvoiceBranchNarroValues.length > 0) {
        narrowSearchFields += "InvoiceBranch" + ",";
        narrowSearchValues += InvoiceBranchNarroValues + "@";
    }
    else {
        narrowSearchFields += "InvoiceBranch" + ",";
        narrowSearchValues += "@";
    }


    ////////////////////////////////////////104 [Requisition Status Narrow Search]////////////////////////////////////////////////
    if (ddlRequisitionStatusNarroValues != undefined && ddlRequisitionStatusNarroValues.length > 0) {

        narrowSearchFields += "RequisitionStatusNS" + ",";
        narrowSearchValues += ddlRequisitionStatusNarroValues + "@";
    }
    else {

        narrowSearchFields += "RequisitionStatusNS" + ",";
        narrowSearchValues += "@";
    }

    ////////////////////////////////////////105 [Pull Consignment Narrow Search]////////////////////////////////////////////////

    if (PullConsignmentNarroSearchValue != undefined && PullConsignmentNarroSearchValue.length > 0) {

        narrowSearchFields += "Consignment" + ",";
        narrowSearchValues += PullConsignmentNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Consignment" + ",";
        narrowSearchValues += "@";
    }


    //////////////////////////////////////106 [Asset Category Narrow Search] //////////////////////////////////////////////////////////
    if (AssetCategoryValue != undefined && AssetCategoryValue.length > 0) {
        narrowSearchFields += "AssetCategoryID" + ",";
        narrowSearchValues += AssetCategoryValue + "@";
    }
    else {
        narrowSearchFields += "AssetCategoryID" + ",";
        narrowSearchValues += "@";
    }





    ////////////////////////////////////////107 [work order WOType Option in Narrowsearch]////////////////////////////////////////////////
    if (WOTypeValues != undefined && WOTypeValues.length > 0) {
        narrowSearchFields += "WOType" + ",";
        narrowSearchValues += WOTypeValues + "@";
    }
    else {
        narrowSearchFields += "WOType" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////108 [Report Type option in Narrowsearch]///////////////////////////////////////////////////////
    if (ReportTypeNarroSearchValue != undefined && ReportTypeNarroSearchValue.length > 0) {
        narrowSearchFields += "ReportType" + ",";
        narrowSearchValues += ReportTypeNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "ReportType" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////109////////////////////////////////////////////////////

    if (ItemUDF6 != undefined && ItemUDF6.length > 0) {
        narrowSearchFields += "ItemUDF6" + ",";
        narrowSearchValues += ItemUDF6 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF6" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////110////////////////////////////////////////////////////

    if (ItemUDF7 != undefined && ItemUDF7.length > 0) {
        narrowSearchFields += "ItemUDF7" + ",";
        narrowSearchValues += ItemUDF7 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF7" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////111////////////////////////////////////////////////////

    if (ItemUDF8 != undefined && ItemUDF8.length > 0) {
        narrowSearchFields += "ItemUDF8" + ",";
        narrowSearchValues += ItemUDF8 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF8" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////112////////////////////////////////////////////////////

    if (ItemUDF9 != undefined && ItemUDF9.length > 0) {
        narrowSearchFields += "ItemUDF9" + ",";
        narrowSearchValues += ItemUDF9 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF9" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////113////////////////////////////////////////////////////

    if (ItemUDF10 != undefined && ItemUDF10.length > 0) {
        narrowSearchFields += "ItemUDF10" + ",";
        narrowSearchValues += ItemUDF10 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF10" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////114////////////////////////////////////////////////////

    if (ToolTechUDF1 != undefined && ToolTechUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF1" + ",";
        narrowSearchValues += ToolTechUDF1 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF1" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////115////////////////////////////////////////////////////

    if (ToolTechUDF2 != undefined && ToolTechUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF2" + ",";
        narrowSearchValues += ToolTechUDF2 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF2" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////116////////////////////////////////////////////////////

    if (ToolTechUDF3 != undefined && ToolTechUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF3" + ",";
        narrowSearchValues += ToolTechUDF3 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF3" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////117////////////////////////////////////////////////////

    if (ToolTechUDF4 != undefined && ToolTechUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF4" + ",";
        narrowSearchValues += ToolTechUDF4 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF4" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////118////////////////////////////////////////////////////

    if (ToolTechUDF5 != undefined && ToolTechUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolTechUDF5" + ",";
        narrowSearchValues += ToolTechUDF5 + "@";
    }
    else {
        narrowSearchFields += "ToolTechUDF5" + ",";
        narrowSearchValues += "@";
    }

    ////////////////////////////////////////[Quote Status Narrow Search]////////////////////////////////////////////////
    if (QuoteStatusNarroValues != undefined && QuoteStatusNarroValues.length > 0) {

        narrowSearchFields += "QuoteStatus" + ",";
        narrowSearchValues += QuoteStatusNarroValues + "@";
    }
    else {

        narrowSearchFields += "QuoteStatus" + ",";
        narrowSearchValues += "@";
    }

    if (QuoteSupplierNarrowValues != undefined && QuoteSupplierNarrowValues.length > 0) {

        narrowSearchFields += "QuoteSupplier" + ",";
        narrowSearchValues += QuoteSupplierNarrowValues + "@";
    }
    else {

        narrowSearchFields += "QuoteSupplier" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////// [work order status Option in Narrowsearch]////////////////////////////////////////////////
    if (typeof (WOStatusValues) != "undefined" && WOStatusValues != null && WOStatusValues.length > 0) {
        narrowSearchFields += "WOStatus" + ",";
        narrowSearchValues += WOStatusValues + "@";
    }
    else {
        narrowSearchFields += "WOStatus" + ",";
        narrowSearchValues += "@";
    }

    var searchtext = '';
    if ($("#ItemModel_filter").length > 0 && $("#ItemModel_filter").val() != '')
        searchtext = $("#ItemModel_filter").val().replace(/'/g, "''").replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
    narrowSearch = narrowSearchFields + "[###]" + narrowSearchValues + "[###]" + searchtext;

    if (narrowSearch.length > 10)
        NarrowSearchInGridTM(narrowSearch);
    else if (UserCreatedNarroValues == undefined || UserCreatedNarroValues.length == 0 ||
        UserUpdatedNarroValues == undefined || UserUpdatedNarroValues.length == 0)
        NarrowSearchInGridTM(narrowSearch);
    // }

}
function UDFfillOptions(_UDFID, _drpID, _UDFColumnName, _Editable) {
    if (_UDFID > 0) {

        var _EnterPriseId = $("#hdnEnterpriseId").val();

        $.ajax({
            'url': '/UDF/GetUDFOptionsByUDF',
            data: { UDFID: _UDFID, EnterpriseID: _EnterPriseId },
            cache: false,
            success: function (response) {
                $("#" + _drpID).empty();
                var s = '';
                s += '<option value="0"></option>';
                $.each(response.DDData, function (i, val) {
                    s += '<option value="' + val.ID + '">' + val.UDFOption + '</option>';
                });
                $("#" + _drpID).append(s);

                var txtvalue = $("#" + _UDFColumnName).val();

                if (txtvalue != null && txtvalue.trim() != '') {
                    $('#' + _drpID + " option").each(function () {
                        if ($(this).text() == txtvalue) {
                            $(this).attr('selected', 'selected');
                        }
                    });
                }
                // $('#' + _drpID + ' option:[value=' + txtvalue + ']').attr("selected", "selected");
                $("#" + _drpID).trigger('change');
                UDFtoggleControls(_drpID, _UDFColumnName, _UDFID, _Editable);

            },
            error: function () {
            }
        });
    }
}
function UDFappendScript(_UDFID, _drpID, _UDFColumnName, _Editable) {

    var script = '';
    script += '<script>';
    script += '$(document).ready(function () {';
    script += '$(document).on("change","#' + _drpID + '",function (){';
    script += '   UDFtoggleControls("' + _drpID + '","' + _UDFColumnName + '",' + _UDFID + ', ' + _Editable + ')';
    script += '});';
    script += '});';
    script += '<\/\script>';
    return script;
}
function UDFtoggleControls(_drpID, _UDFColumnName, _UDFID, _Editable) {

    $('#' + _UDFColumnName).val($('#' + _drpID + ' option:selected').text());

    var ID = $('#' + _drpID).val();

    if (ID > 0) {
        $("#newButton_" + _UDFID).html(lblUpdate);
        $("#delButton_" + _UDFID).css({ "display": "" });
    }
    else {
        $("#newButton_" + _UDFID).html(lblAddNew);
        $("#delButton_" + _UDFID).css({ "display": "none" });
    }

    $("#newOption_" + _UDFID).val($("#" + _drpID + " option:selected").text());
    $("#newButton_" + _UDFID).removeAttr("onclick", "");
    $("#newButton_" + _UDFID).attr("onclick", "UDFcallUpdate(" + ID + ", " + _UDFID + ", '" + _UDFColumnName + "'," + _Editable + ")");
    $("#delButton_" + _UDFID).removeAttr("onclick", "");
    $("#delButton_" + _UDFID).attr("onclick", "UDFcallDelete(" + ID + ", " + _UDFID + ", '" + _UDFColumnName + "'," + _Editable + ")");
}

function UDFcallUpdate(_ID, _UDFID, _UDFColumnName, _Editable) {
    var _UDFOption = $("#newOption_" + _UDFID).val();
    var actionURL;
    var params;

    //Edit Mode - UDF
    if (_UDFID > 0) {
        if (_UDFOption.trim().length > 0) {

            if (_ID > 0) {
                //Edit Mode - UDFOption
                actionURL = '/UDF/EditUDFOption';
                params = { ID: _ID, UDFID: _UDFID, UDFOption: _UDFOption }
            }
            else {
                //Add Mode  - UDFOption
                actionURL = '/UDF/InsertUDFOption';
                params = { ID: _ID, UDFID: _UDFID, UDFOption: _UDFOption }
            }

            $.ajax({
                'url': actionURL,
                data: params,
                success: function (response) {
                    if (response.Response == "duplicate") {
                        $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
                        ShowNotificationMessage(MsgUDFOptionTryAnother).replace("{0}", _UDFOption); //'Option ' + _UDFOption + ' already exist! Try with Another!');
                        //showNotificationDialog();
                    }
                    else {

                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                        ShowNotificationMessage(MsgUDFOptionSaved);
                        //showNotificationDialog();

                        //Refresh the droddown here 
                        $('#' + _UDFColumnName).val(_UDFOption);
                        UDFfillOptions(_UDFID, 'drp_' + _UDFID, _UDFColumnName, _Editable);
                    }
                }
            });
        }
        else {
            ShowNotificationMessage(MsgUDFOptionCanNotBlank);
        }
    }
    else {
        //Add Mode - UDF
        ShowNotificationMessage(MsgUDFSaveFirst);
    }
}

function UDFcallDelete(_ID, UDFID, _UDFColumnName, _Editable) {
    if (_ID > 0) {
        //Delete Mode
        actionURL = '/UDF/DeleteUDFOption';
        params = { ID: _ID }
        $.ajax({
            'url': actionURL,
            data: params,
            success: function (response) {
                UDFfillOptions(UDFID, 'drp_' + UDFID, _UDFColumnName, _Editable);
            }
        });
    }
}

function UDFfillEditableOptions(_UDFID, _UDFColumnName) {

    if (_UDFID > 0) {

        var _EnterPriseId = $("#hdnEnterpriseId").val();
        $('.show-all-options').unbind("click");
        $('.show-all-options').click(function () {
            var currentObj = $(this);
            //setTimeout(function () {
            $(currentObj).siblings(".udf-editable-dropdownbox").autocomplete("search", "");
            $(currentObj).siblings('.udf-editable-dropdownbox').trigger("focus");

        });
        $("#" + _UDFColumnName).autocomplete({
            source: function (request, response) {

                $.ajax({
                    url: '/UDF/GetUDFEditableOptionsByUDF',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: {
                        maxRows: 1000,
                        name_startsWith: request.term,
                        UDFID: _UDFID,
                        EnterpriseID: _EnterPriseId
                    },
                    cache: false,
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.UDFOption,
                                value: item.UDFOption,
                                selval: item.ID
                            }
                        }));
                    }
                });
            },
            autoFocus: false,
            minLength: 0,
            select: function (event, ui) {
                //$("#" + _UDFColumnName).val(ui.item.selval);
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");

                $(this).autocomplete('widget').css('z-index', 10005);
            },
            close: function () {
                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            }
        });

    }
}

function ItemLocationfillEditableOptions(_UDFID, _ItemLocation, PerentID, GUID, gridName, callFrom, pguid, stagingBinId) {

    if (_UDFID > 0) {

        //  var _EnterPriseId = $("#hdnEnterpriseId").val();

        $("table#" + gridName + " tbody tr ").each(function () {
            var Guid = $(this).find("#" + _ItemLocation).next("input#hdnItemGuid").val();
            var currentTextBox = $(this).find("#" + _ItemLocation);
            var tr = $(this);
            var qtyRequired = false;
            var onlyHvQty = false;
            var isForRequisition = false;
            $(this).find("#" + _ItemLocation).autocomplete({
                source: function (request, response) {

                    var stgingBinIdForRequisition = null
                    //var stagingName = ''
                    var hdnIsLoadMoreLocations = $(tr).find("#hdnIsLoadMoreLocations").val();
                    if (callFrom == "RQ") {
                        qtyRequired = true;
                        onlyHvQty = true;
                        isForRequisition = true;
                        stgingBinIdForRequisition = stagingBinId;
                        //stagingName = $("#txtStagingName").val();
                    }

                    var RequestUrl = '/Master/GetBinsOfItemByOrderId';
                    if (callFrom == 'TRF') {
                        RequestUrl = '/Transfer/GetBinsOfItemByTransferId';
                    }

                    $.ajax({
                        url: RequestUrl,
                        data: { 'StagingName': '', 'NameStartWith': request.term, 'ItemGUID': Guid, 'QtyRequired': qtyRequired, 'OnlyHaveQty': onlyHvQty, 'OrderId': PerentID, 'IsLoadMoreLocations': hdnIsLoadMoreLocations, 'isForRequisition': isForRequisition, 'stagingBinId': stgingBinIdForRequisition },
                        async: false,
                        cache: false,
                        dataType: "json",
                        success: function (locations) {
                            response($.map(locations, function (item) {

                                var locationIds = $(currentTextBox).parents("td").find("input#hdnselectedIDs").val();

                                if (locationIds != '') {
                                    if (locationIds.indexOf(item.ID) == -1) {
                                        if (callFrom == "ORD") {
                                            return {
                                                label: item.Key,
                                                value: item.Key,
                                                selval: item.ID,
                                                oinfo: item.OtherInfo2
                                            }
                                        }
                                        else if (callFrom == "RQ") {
                                            return {
                                                label: item.Key,
                                                value: item.Value,
                                                selval: item.ID
                                            }
                                        }
                                        else {
                                            return {
                                                label: item.Key,
                                                value: item.Key,
                                                selval: item.ID
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (callFrom == "ORD") {
                                        return {
                                            label: item.Key,
                                            value: item.Key,
                                            selval: item.ID,
                                            oinfo: item.OtherInfo2
                                        }
                                    }
                                    else if (callFrom == "RQ") {
                                        return {
                                            label: item.Key,
                                            value: item.Value,
                                            selval: item.ID
                                        }
                                    }
                                    else {
                                        return {
                                            label: item.Key,
                                            value: item.Key,
                                            selval: item.ID
                                        }
                                    }
                                }
                            }));
                        }
                    });
                },
                autoFocus: false,
                minLength: 0,
                select: function (event, ui) {

                    if (ui.item.value == MoreLocation) {
                        $(this).val("");
                        $(tr).find("#hdnIsLoadMoreLocations").val("true");
                        $(this).trigger("focus");
                        $(this).autocomplete("search", " ");
                        return false;
                    }
                    else {
                        $(this).parents("td").find("input#hdnLocationId").val(ui.item.selval);
                        if (callFrom == "ORD") {
                            if (parseFloat(ui.item.oinfo) > 0) {
                                $(this).parents('tr').find('#txtQty').val(ui.item.oinfo);
                                $(this).parents('tr').find('#spnReOrderQty').text(ui.item.oinfo);
                            }
                            else {
                                var dfQty = $(this).parents('td').find('#hdnDRQ').val();
                                $(this).parents('tr').find('#txtQty').val(dfQty);
                                $(this).parents('tr').find('#spnReOrderQty').text(dfQty);
                            }
                        }
                    }
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    $('ul.ui-autocomplete').css('overflow-y', 'auto');
                    $('ul.ui-autocomplete').css('max-height', '300px');
                    $(this).autocomplete('widget').css('z-index', 9999);
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                }
            });
        });

    }
}

function ToolLocationfillEditableOptions(_UDFID, _ItemLocation, PerentID, GUID, gridName, callFrom) {

    if (_UDFID > 0) {

        //  var _EnterPriseId = $("#hdnEnterpriseId").val();

        $("table#" + gridName + " tbody tr ").each(function () {
            var Guid = $(this).find("#" + _ItemLocation).next("input#hdnToolGuid").val();
            var currentTextBox = $(this).find("#" + _ItemLocation);
            var tr = $(this);
            var qtyRequired = false;
            var onlyHvQty = false;
            var isForRequisition = false;

            $(this).find("#" + _ItemLocation).autocomplete({
                source: function (request, response) {
                    var hdnIsLoadMoreLocations = $(tr).find("#hdnIsLoadMoreLocations").val();
                    if (callFrom == "RQ") {
                        qtyRequired = true;
                        onlyHvQty = true;
                        isForRequisition = true;
                    }

                    var RequestUrl = '/Master/GetLocationsOfToolByOrderId';
                    if (callFrom == 'ToolAssetORD') {
                        RequestUrl = '/Master/GetLocationsOfToolByOrderId';
                    }

                    $.ajax({
                        url: RequestUrl,
                        data: { 'NameStartWith': request.term, 'ToolGUID': Guid, 'QtyRequired': qtyRequired, 'OnlyHaveQty': onlyHvQty, 'OrderId': PerentID, 'IsLoadMoreLocations': hdnIsLoadMoreLocations, 'isForRequisition': isForRequisition },
                        async: false,
                        cache: false,
                        dataType: "json",
                        success: function (locations) {
                            response($.map(locations, function (item) {

                                var locationIds = $(currentTextBox).parents("td").find("input#hdnselectedIDs").val();

                                if (locationIds != '') {
                                    if (locationIds.indexOf(item.ID) == -1) {
                                        return {
                                            label: item.Key,
                                            value: item.Key,
                                            selval: item.Key
                                        }
                                    }
                                }
                                else {
                                    return {
                                        label: item.Key,
                                        value: item.Key,
                                        selval: item.Key
                                    }
                                }
                            }));
                        }
                    });
                },
                autoFocus: false,
                minLength: 0,
                select: function (event, ui) {
                    if (ui.item.value == MoreLocation) {
                        $(this).val("");
                        $(tr).find("#hdnIsLoadMoreLocations").val("true");
                        $(this).trigger("focus");
                        $(this).autocomplete("search", " ");
                        return false;
                    }
                    else {
                        $(this).parents("td").find("input#hdnLocationId").val(ui.item.selval);

                    }
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    $('ul.ui-autocomplete').css('overflow-y', 'auto');
                    $('ul.ui-autocomplete').css('max-height', '300px');
                    $(this).autocomplete('widget').css('z-index', 9999);
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                }
            });
        });

    }
}
var ItemLotSerialList = null;
var objSelectedLotSerial = null;
var ArrLocations = null;
function ItemLotSerialfillEditableOptions(_ItemLotSerial, ItemGuid, gridName, CustomerOwnedQtyId, ExpiryDateId) {

    $("table#" + gridName + " tbody tr ").each(function () {
        var Guid = ItemGuid;
        var currentTextBox = $(this).find("#" + _ItemLotSerial);
        var tr = $(this);

        $(this).find("#" + _ItemLotSerial).focus(function () {
            var ItemSourceBin = $(this).closest("tr").find("[id^='ddlItemSourceBins_']").val();
            if (ItemSourceBin != null && ItemSourceBin != undefined && ItemSourceBin.trim() != '') {
                $.ajax({
                    url: '/Master/GetItemLocationDetailForAutoComplete',
                    //data: { 'ItemGUID': Guid, 'BinId': BinId },
                    data: { 'ItemGUID': Guid, 'ItemSourceBin': ItemSourceBin },
                    async: false,
                    cache: false,
                    dataType: "json",
                    success: function (LotSerials) {
                        ArrLocations = LotSerials;
                    },
                    error: function () {
                        ArrLocations = null;
                    }
                });
            }
            else {
                ArrLocations = null;
            }
        });

        $(this).find("#" + _ItemLotSerial).autocomplete({
            source: function (request, response) {
                if (ArrLocations != null) {
                    ItemLotSerialList = jQuery.grep(ArrLocations, function (a) {
                        return $.trim(a.LotSerialNumber).toUpperCase().indexOf(request.term.toUpperCase()) >= 0;
                    });
                    response($.map(ItemLotSerialList, function (item) {
                        return {
                            label: $.trim(item.LotSerialNumber),
                            value: $.trim(item.LotSerialNumber),
                            selval: $.trim(item.LotSerialNumber)
                        }
                    }));
                }
                else {
                    return null;
                }

                ////var BinId = $('#' + _ItemLotSerial).closest("tr").find("#hdnLocationId").val();
                //var ItemSourceBin = $('#' + _ItemLotSerial).closest("tr").find("[id^='ddlItemSourceBins_']").val();
                //if (ItemSourceBin != null && ItemSourceBin != undefined && ItemSourceBin.trim() != '') {

                //    $.ajax({
                //        url: '/Master/GetItemLocationDetailForAutoComplete',
                //        //data: { 'ItemGUID': Guid, 'BinId': BinId },
                //        data: { 'ItemGUID': Guid, 'ItemSourceBin': ItemSourceBin },
                //        async: false,
                //        cache: false,
                //        dataType: "json",
                //        success: function (LotSerials) {
                //            ItemLotSerialList = LotSerials;
                //            response($.map(LotSerials, function (item) {
                //                return {
                //                    label: item.LotSerialNumber,
                //                    value: item.LotSerialNumber,
                //                    selval: item.LotSerialNumber
                //                }
                //            }));
                //        }
                //    });
                //}
                //else {
                //    return null;
                //}
            },
            autoFocus: false,
            minLength: 0,
            select: function (event, ui) {

                if ((CustomerOwnedQtyId != null && CustomerOwnedQtyId != undefined && CustomerOwnedQtyId.trim() != '')
                    || (ExpiryDateId != null && ExpiryDateId != undefined && ExpiryDateId.trim() != '')) {

                    if (ItemLotSerialList != null && ItemLotSerialList != undefined && ItemLotSerialList.length > 0) {

                        objSelectedLotSerial = null;
                        for (var i = 0; i < ItemLotSerialList.length; i++) {
                            if ($.trim(ItemLotSerialList[i].LotSerialNumber) == $.trim(ui.item.value)) {
                                objSelectedLotSerial = ItemLotSerialList[i];
                                break;
                            }
                        }

                        if (objSelectedLotSerial != null && objSelectedLotSerial != undefined) {
                            if (CustomerOwnedQtyId != null && CustomerOwnedQtyId != undefined && CustomerOwnedQtyId.trim() != ''
                                && objSelectedLotSerial.AvailableQuantity != null && objSelectedLotSerial.AvailableQuantity != undefined)
                                $('#' + CustomerOwnedQtyId).val(objSelectedLotSerial.AvailableQuantity);

                            if (ExpiryDateId != null && ExpiryDateId != undefined && ExpiryDateId.trim() != ''
                                && objSelectedLotSerial.ExpirationDate != null && objSelectedLotSerial.ExpirationDate != undefined)
                                $('#' + ExpiryDateId).datepicker('setDate', new Date(parseInt(objSelectedLotSerial.ExpirationDate.replace('/Date(', '').replace(')/', ''))));
                        }
                    }

                }
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                $('ul.ui-autocomplete').css('overflow-y', 'auto');
                $('ul.ui-autocomplete').css('max-height', '300px');
                $(this).autocomplete('widget').css('z-index', 9999);
            },
            close: function () {
                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                if (objSelectedLotSerial != null) {
                    $(this).val(objSelectedLotSerial.LotSerialNumberWithoutDate);
                }
                objSelectedLotSerial = null;
            }
        });
    });

}

var GetColumnIndex = function (ColumnName) {
    if (typeof (objColumns) != "undefined") {
        return objColumns[ColumnName];
    }
};

var GetColumnIndexForDashBoard = function (ColumnName, objDashboardColumns) {
    if (typeof (objDashboardColumns) != "undefined") {
        return objDashboardColumns[ColumnName];
    }
};

function UpdateColumnOrder(_ListName) {

    var oTableReorder = null;

    if ((typeof oTable) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTable) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTable;


    $.ajax({
        "url": '/Master/LoadGridState',
        data: { ListName: _ListName },
        cache: false,
        "dataType": "json",
        "success": function (json) {

            if (json.jsonData != '') {
                o = JSON.parse(json.jsonData);
                oTableReorder.fnSettings().oLoadedState = $.extend(true, {}, o);
                //update the order of columns
                var _Order = SortableArray($('#ColumnSortable')); // $('#ColumnSortable').sortable("toArray");

                var __Order = _Order.toString().split(",");

                for (var i = 0; i < __Order.length; i++) {
                    __Order[i] = parseInt(__Order[i], 10);
                }

                oTableReorder.fnSettings().oLoadedState.ColReorder = __Order;

                //update the visibility of columns
                var _abVisCols = [];

                for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                    //var checked = $("#" + i + "_").is(":checked");
                    var checked = $('#ColumnSortable').find('input.checkBox[id="' + i + '_"]').is(":checked");
                    _abVisCols.push(checked);
                }

                oTableReorder.fnSettings().oLoadedState.abVisCols = _abVisCols;

                //update the state to the database
                $.ajax({
                    "url": '/Master/SaveGridState',
                    "type": "POST",
                    //data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: 'ToolList' },
                    data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: _ListName },
                    "dataType": "json",
                    cache: false,
                    "success": function (json) {

                        o = json;

                        //refresh the page
                        window.location.reload(true);
                    }
                });


            }
        }
    });


}

function UpdateColumnOrderInnerGrid(_ListName) {

    var oTableReorder = null;

    if ((typeof oTableGlobalTABLE) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTableGlobalTABLE) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTableGlobalTABLE;


    $.ajax({
        "url": '/Master/LoadGridState',
        data: { ListName: _ListName },
        cache: false,
        "dataType": "json",
        "success": function (json) {

            if (json.jsonData != '') {
                o = JSON.parse(json.jsonData);
                oTableReorder.fnSettings().oLoadedState = $.extend(true, {}, o);
                //update the order of columns
                var _Order = SortableArray($('#ColumnSortableInnerGrid')); // $('#ColumnSortable').sortable("toArray");

                var __Order = _Order.toString().split(",");

                for (var i = 0; i < __Order.length; i++) {
                    __Order[i] = parseInt(__Order[i], 10);
                }

                oTableReorder.fnSettings().oLoadedState.ColReorder = __Order;

                //update the visibility of columns
                var _abVisCols = [];

                for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                    //var checked = $("#" + i + "_").is(":checked");
                    var checked = $('#ColumnSortableInnerGrid').find('input.checkBox[id="' + i + '_"]').is(":checked");
                    _abVisCols.push(checked);
                }

                oTableReorder.fnSettings().oLoadedState.abVisCols = _abVisCols;

                //update the state to the database
                $.ajax({
                    "url": '/Master/SaveGridState',
                    "type": "POST",
                    //data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: 'ToolList' },
                    data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: _ListName },
                    "dataType": "json",
                    cache: false,
                    "success": function (json) {
                        o = json;
                        //refresh the page
                        //window.location.reload(true);

                        $("#ColumnSortableModalInnerGrid").dialog("close");
                        InnerGridReloadAfterReorder();
                    }
                });
            }
        }
    });
}

function UpdateColumnOrderChildGrid(_ListName) {

    var oTableReorder = null;

    if ((typeof oTableGlobalTABLE) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTableGlobalTABLE) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTableGlobalTABLE;


    $.ajax({
        "url": '/Master/LoadGridState',
        data: { ListName: _ListName },
        cache: false,
        "dataType": "json",
        "success": function (json) {
            if (json.jsonData != '') {
                o = JSON.parse(json.jsonData);
                oTableReorder.fnSettings().oLoadedState = $.extend(true, {}, o);
                //update the order of columns
                var _Order = SortableArray($('#ColumnSortableChildGrid')); // $('#ColumnSortable').sortable("toArray");

                var __Order = _Order.toString().split(",");

                for (var i = 0; i < __Order.length; i++) {
                    __Order[i] = parseInt(__Order[i], 10);
                }

                oTableReorder.fnSettings().oLoadedState.ColReorder = __Order;

                //update the visibility of columns
                var _abVisCols = [];

                for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                    //var checked = $("#" + i + "_").is(":checked");
                    var checked = $('#ColumnSortableChildGrid').find('input.checkBox[id="' + i + '_"]').is(":checked");
                    _abVisCols.push(checked);
                }

                oTableReorder.fnSettings().oLoadedState.abVisCols = _abVisCols;

                //update the state to the database
                $.ajax({
                    "url": '/Master/SaveGridState',
                    "type": "POST",
                    data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: _ListName },
                    "dataType": "json",
                    cache: false,
                    "success": function (json) {
                        o = json;
                        //refresh the page
                        //window.location.reload(true);

                        $("#ColumnSortableModalChildGrid").dialog("close");
                        ChildGridReloadAfterReorder();
                    }
                });
            }
        }
    });
}

function UpdateDashboardColumnOrder() {
    $('#DivLoading').show()
    var oTableReorder = null;

    if ((typeof oTable) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTable) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTable;

    dashboardReorder = true;
    $.ajax({
        "url": '/Master/LoadGridState',
        data: { ListName: oTableReorderColumnSetupFor },
        cache: false,
        "dataType": "json",
        "success": function (json) {
            if (json.jsonData != '') {
                o = JSON.parse(json.jsonData);
                oTableReorder.fnSettings().oLoadedState = $.extend(true, {}, o);
                //update the order of columns
                var _Order = SortableArray($('#ColumnSortable')); // $('#ColumnSortable').sortable("toArray");

                var __Order = _Order.toString().split(",");

                for (var i = 0; i < __Order.length; i++) {
                    __Order[i] = parseInt(__Order[i], 10);
                }

                oTableReorder.fnSettings().oLoadedState.ColReorder = __Order;

                //update the visibility of columns
                var _abVisCols = [];

                for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                    //var checked = $("#" + i + "_").is(":checked");
                    var checked = $('#ColumnSortable').find('input.checkBox[id="' + i + '_"]').is(":checked");
                    _abVisCols.push(checked);
                }

                oTableReorder.fnSettings().oLoadedState.abVisCols = _abVisCols;

                //update the state to the database
                $.ajax({
                    "url": '/Master/SaveGridState',
                    "type": "POST",
                    //data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: 'ToolList' },
                    data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: oTableReorderColumnSetupFor },
                    "dataType": "json",
                    cache: false,
                    "success": function (json) {
                        var LoadActionURL = '';
                        var LoadGraphClassName = '';
                        if (oTableReorderId == 'myInventoryDataTable') {
                            LoadActionURL = "/Master/InventoryDb";
                            LoadGraphClassName = 'clsLoadGraph';
                        }
                        else if (oTableReorderId == 'myOrderDataTable') {
                            LoadActionURL = "/Master/ReplenishDb";
                            LoadGraphClassName = 'clsLoadGraph';
                        }
                        else if (oTableReorderId == 'myReceiveDataTable') {
                            LoadActionURL = "/Master/ReplenishDb";
                            LoadGraphClassName = 'clsLoadGraph';
                        }
                        else if (oTableReorderId == 'myTransferDataTable') {
                            LoadActionURL = "/Master/ReplenishDb";
                            LoadGraphClassName = 'clsLoadTGraph';
                        }
                        else if (oTableReorderId == 'myRequisitionDataTable') {
                            LoadActionURL = "/Master/ConsumeDb";
                            LoadGraphClassName = 'clsLoadGraph';
                        }
                        else if (oTableReorderId == 'myProjectDataTable') {
                            LoadActionURL = "/Master/ConsumeDb";
                            LoadGraphClassName = 'clsLoadPGraph';
                        }
                        else if (oTableReorderId == 'myAssetsMaintenanceDataTable') {
                            LoadActionURL = "/Master/AssetsDb";
                            LoadGraphClassName = 'clsLoadAGraph';
                        }
                        else if (oTableReorderId == 'myToolsMaintenanceDataTable') {
                            LoadActionURL = "/Master/AssetsDb";
                            LoadGraphClassName = 'clsLoadTGraph';
                        }
                        else if (oTableReorderId == 'myCountDataTable') {
                            LoadActionURL = "/Master/CountDb";
                            LoadGraphClassName = 'clsLoadGraph';
                        }
                        else if (oTableReorderId == 'myCartDataTable') {
                            LoadActionURL = "/Master/CartDb";
                            LoadGraphClassName = 'clsLoadGraph';
                        }

                        if (LoadActionURL != '') {
                            $("#ColumnSortableModal").dialog("close");
                            o = json;
                            var hdnCloseOpenValueHtml = $('li[id="' + DashboardLiId + '"]').find('#hdnCloseOpenValue')[0].outerHTML;
                            $('li[id="' + DashboardLiId + '"]').empty();
                            $('li[id="' + DashboardLiId + '"]').load(LoadActionURL, function () {
                                $('li[id="' + DashboardLiId + '"]').prepend(hdnCloseOpenValueHtml);
                                $('#DivLoading').show();
                                ActivateDashboardBlockTab(0, LoadGraphClassName);
                            });
                        }
                    },
                    "error": function (response) {
                        $('#DivLoading').hide();
                    }
                });
            }
        },
        "error": function (response) {
            $('#DivLoading').hide();
        }
    });

}

function UpdateMinMaxColumnOrder(oTableReorderId, oTableReorderColumnSetupFor) {
    $('#DivLoading').show()
    var oTableReorder = null;

    if ((typeof oTableMinMaxTuning) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTableMinMaxTuning) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTableMinMaxTuning;


    $.ajax({
        "url": '/Master/LoadGridState',
        data: { ListName: oTableReorderColumnSetupFor },
        cache: false,
        "dataType": "json",
        "success": function (json) {
            if (json.jsonData != '') {
                o = JSON.parse(json.jsonData);
                oTableReorder.fnSettings().oLoadedState = $.extend(true, {}, o);
                //update the order of columns
                var _Order = SortableArray($('#ColumnSortable')); // $('#ColumnSortable').sortable("toArray");

                var __Order = _Order.toString().split(",");

                for (var i = 0; i < __Order.length; i++) {
                    __Order[i] = parseInt(__Order[i], 10);
                }

                oTableReorder.fnSettings().oLoadedState.ColReorder = __Order;

                //update the visibility of columns
                var _abVisCols = [];

                for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                    //var checked = $("#" + i + "_").is(":checked");
                    var checked = $('#ColumnSortable').find('input.checkBox[id="' + i + '_"]').is(":checked");
                    _abVisCols.push(checked);
                }

                oTableReorder.fnSettings().oLoadedState.abVisCols = _abVisCols;

                //update the state to the database
                $.ajax({
                    "url": '/Master/SaveGridState',
                    "type": "POST",
                    //data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: 'ToolList' },
                    data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: oTableReorderColumnSetupFor },
                    "dataType": "json",
                    cache: false,
                    "success": function (json) {
                        o = json;
                        //refresh the page
                        window.location.reload(true);
                    },
                    "error": function (response) {
                        $('#DivLoading').hide();
                    }
                });
            }
        },
        "error": function (response) {
            $('#DivLoading').hide();
        }
    });

}

function UpdateTurnsColumnOrder(oTableReorderId, oTableReorderColumnSetupFor) {
    $('#DivLoading').show()
    var oTableReorder = null;

    if ((typeof oTableTurnsAnalysis) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTableTurnsAnalysis) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTableTurnsAnalysis;


    $.ajax({
        "url": '/Master/LoadGridState',
        data: { ListName: oTableReorderColumnSetupFor },
        cache: false,
        "dataType": "json",
        "success": function (json) {
            if (json.jsonData != '') {
                o = JSON.parse(json.jsonData);
                oTableReorder.fnSettings().oLoadedState = $.extend(true, {}, o);
                //update the order of columns
                var _Order = SortableArray($('#TurnsColumnSortable')); // $('#ColumnSortable').sortable("toArray");

                var __Order = _Order.toString().split(",");

                for (var i = 0; i < __Order.length; i++) {
                    __Order[i] = parseInt(__Order[i], 10);
                }

                oTableReorder.fnSettings().oLoadedState.ColReorder = __Order;

                //update the visibility of columns
                var _abVisCols = [];

                for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {
                    //var checked = $("#" + i + "_").is(":checked");
                    var checked = $('#TurnsColumnSortable').find('input.checkBox[id="' + i + '_"]').is(":checked");
                    _abVisCols.push(checked);
                }

                oTableReorder.fnSettings().oLoadedState.abVisCols = _abVisCols;

                //update the state to the database
                $.ajax({
                    "url": '/Master/SaveGridState',
                    "type": "POST",
                    //data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: 'ToolList' },
                    data: { Data: JSON.stringify(oTableReorder.fnSettings().oLoadedState), ListName: oTableReorderColumnSetupFor },
                    "dataType": "json",
                    cache: false,
                    "success": function (json) {
                        o = json;
                        //refresh the page
                        window.location.reload(true);
                    },
                    "error": function (response) {
                        $('#DivLoading').hide();
                    }
                });
            }
        },
        "error": function (response) {
            $('#DivLoading').hide();
        }
    });

}


function ActivateDashboardBlockTab(Index, LoadGraphClassName) {
    if (DashboardActiveTabs.length <= 0) {
        setTimeout(function () {
            $('li#' + DashboardLiId + ' .' + LoadGraphClassName)[0].click();
            $('#DivLoading').hide();
        }, 1500);
    }
    else if (Index == 0) {
        $('#' + DashboardActiveTabs[Index]).click();
        ActivateDashboardBlockTab(Index + 1, LoadGraphClassName)
    }
    else if (Index < DashboardActiveTabs.length) {
        setTimeout(function () {
            $('#' + DashboardActiveTabs[Index]).click();
            ActivateDashboardBlockTab(Index + 1, LoadGraphClassName)
        }, 1500);
    }
    else {
        setTimeout(function () {
            $('li#' + DashboardLiId + ' .' + LoadGraphClassName)[0].click();
            $('#DivLoading').hide();
        }, 1500);
    }
}

function GenerateColumnSortable() {

    if (gblActionName.toLowerCase() == 'workorderlist' && typeof (objDummyColums) != 'undefined' && typeof (objDummyColums) != undefined) {
        objColumns = objDummyColums;
    }

    if (typeof (GetMasterGridColumns) != "undefined" && typeof (GetMasterGridColumns) == "function") {
        GetMasterGridColumns();
    }

    var tempDuplicateColumns = new Array();
    var processedColumnIndex = new Array();
    //clear the old elements     
    var blankNUmber = 0;
    $('#ColumnSortable li').each(function (index) {
        $(this).remove();
    });
    var div = document.createElement('div');
    div.id = "CheckAll";
    //li.className = 'ui-state-default';
    //    li.innerHTML = oColumn.sTitle.trim();
    div.innerHTML = "<input type='hidden' value ='ColumnSortable' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >" + ResCheckALL + "</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >" + ResUnCheckALL + "</a>" +
        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />" + ResShowAllHidden;
    $('div.sortableContainer').find("div#CheckAll").remove();
    $('div.sortableContainer').prepend(div);
    //get current columns order and generate li sortable accordingly

    var oTableReorder = null;

    if ((typeof oTable) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTable) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTable;

    var datatableColumns = oTableReorder.fnSettings().aoColumns;

    for (i = 0, iLen = datatableColumns.length; i < iLen; i++) {
        var oColumn = datatableColumns[i];
        var style = '';
        var LiStyle = 'display:block';
        var LiClassName = 'ui-state-default'
        if (oColumn.sClass.indexOf('NotHide') >= 0) {
            //style = ' style="display:none" ';
            style = ' disabled="disabled" ';
            //LiStyle = 'display:none';
            LiClassName = LiClassName + ' HiddenLi';
        }

        var colindxbyname = '';
        if (oColumn.sTitle.trim() != '')
        {
            var isDuplicateHeader = false;

            if (gridDuplicateColumnCount != null && gridDuplicateColumnCount != undefined && gridDuplicateColumnCount > 0)
            {
                for (duplcnt = 1; duplcnt <= gridDuplicateColumnCount; duplcnt++)
                {
                    var columnNameStr = oColumn.sTitle.trim() + "_" + duplcnt;
                    var isDuplicateColumnProcessed = jQuery.inArray(columnNameStr, tempDuplicateColumns);

                    if (isDuplicateColumnProcessed < 0)
                    {
                        var isKeyFound = jQuery.inArray(columnNameStr, duplicateColumnArray);

                        if (isKeyFound != undefined && isKeyFound != null && !isNaN(isKeyFound) && isKeyFound >= 0)
                        {
                            var tmpColumnIndex = GetColumnIndex(oColumn.sTitle.trim());

                            if (jQuery.inArray(tmpColumnIndex, processedColumnIndex) < 0) {
                                isDuplicateHeader = true;
                                colindxbyname = tmpColumnIndex;
                            }
                            else
                            {
                                isDuplicateHeader = true;
                                colindxbyname = GetColumnIndex(columnNameStr);
                                tempDuplicateColumns.push(columnNameStr);
                            }

                        }
                    }
                }

                if (!isDuplicateHeader)
                {
                    colindxbyname = GetColumnIndex(oColumn.sTitle.trim());
                }
            }
            else
            {
                colindxbyname = GetColumnIndex(oColumn.sTitle.trim());
            }
        }
        else {
            colindxbyname = GetColumnIndex('blankFieldName' + blankNUmber);
        }

        processedColumnIndex.push(colindxbyname);

        if (gblColumnsToHideinPopUp == 'True') {

            var li = document.createElement('li');
            li.id = colindxbyname;
            li.className = LiClassName;
            li.innerHTML = oColumn.sTitle.trim();
            li.style = LiStyle;
            if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            else {

                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox"  class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim(); //WI -7874 - changes 
                }
                else {

                    li.innerHTML = '<input type="checkbox"  class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim(); //WI-7874- changes 
                    blankNUmber++;
                }
            }
            $('#ColumnSortable').append(li);
        }
        else {

            if (jQuery.inArray(colindxbyname, ColumnsToHideinPopUp) < 0) {

                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                li.style = LiStyle;
                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    }
                }

                else {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    }
                }

                $('#ColumnSortable').append(li);
            }
            else {
                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                }
                $(li).hide();
                $('#ColumnSortable').append(li);
            }
        }

    }

}

function GenerateColumnSortableForInnerGrid(IsColumnAndTableRebindRequired) {

    if (IsColumnAndTableRebindRequired !== undefined && IsColumnAndTableRebindRequired != null && IsColumnAndTableRebindRequired == true)
    {
        InnerGridColumnAndTableRebinding();
    }

    if (gblActionName.toLowerCase() == 'workorderlist' && typeof (objDummyColums) != 'undefined' && typeof (objDummyColums) != undefined) {
        objColumns = objDummyColums;
    }


    //clear the old elements     
    var blankNUmber = 0;
    $('#ColumnSortableInnerGrid li').each(function (index) {
        $(this).remove();
    });
    var div = document.createElement('div');
    div.id = "CheckAll";
    //li.className = 'ui-state-default';
    //    li.innerHTML = oColumn.sTitle.trim();
    div.innerHTML = "<input type='hidden' value ='ColumnSortableInnerGrid' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
    $('div.sortableContainer').find("div#CheckAll").remove();
    $('div.sortableContainer').prepend(div);
    //get current columns order and generate li sortable accordingly

    var oTableReorder = null;

    if ((typeof oTableGlobalTABLE) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTableGlobalTABLE) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTableGlobalTABLE;

    for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {

        var oColumn = oTableReorder.fnSettings().aoColumns[i];
        var style = '';
        var LiStyle = 'display:block';
        var LiClassName = 'ui-state-default'
        if (oColumn.sClass.indexOf('NotHide') >= 0) {
            //style = ' style="display:none" ';
            style = ' disabled="disabled" ';
            //LiStyle = 'display:none';
            LiClassName = LiClassName + ' HiddenLi';
        }

        var colindxbyname = '';
        if (oColumn.sTitle.trim() != '') {
            colindxbyname = GetColumnIndex(oColumn.sTitle.trim());
        }
        else {
            colindxbyname = GetColumnIndex('blankFieldName' + blankNUmber);
        }


        if (gblColumnsToHideinPopUp == 'True') {

            var li = document.createElement('li');
            li.id = colindxbyname;
            li.className = LiClassName;
            li.innerHTML = oColumn.sTitle.trim();
            li.style = LiStyle;
            if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            else {

                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
                else {

                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            $('#ColumnSortableInnerGrid').append(li);
        }
        else {

            if (jQuery.inArray(colindxbyname, ColumnsToHideinPopUp) < 0) {

                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                li.style = LiStyle;
                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                    }
                }

                else {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                    }
                }

                $('#ColumnSortableInnerGrid').append(li);
            }
            else {
                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                }
                $(li).hide();
                $('#ColumnSortableInnerGrid').append(li);
            }
        }

    }

}

function GenerateColumnSortableForChildGrid(IsColumnAndTableRebindRequired) {

    if (IsColumnAndTableRebindRequired !== undefined && IsColumnAndTableRebindRequired != null && IsColumnAndTableRebindRequired == true) {
        ChildGridColumnAndTableRebinding();
    }
    if (gblActionName.toLowerCase() == 'workorderlist' && typeof (objDummyColums) != 'undefined' && typeof (objDummyColums) != undefined) {
        objColumns = objDummyColums;
    }

    //clear the old elements     
    var blankNUmber = 0;
    $('#ColumnSortableChildGrid li').each(function (index) {
        $(this).remove();
    });
    var div = document.createElement('div');
    div.id = "CheckAll";
    //li.className = 'ui-state-default';
    //    li.innerHTML = oColumn.sTitle.trim();
    div.innerHTML = "<input type='hidden' value ='ColumnSortableChildGrid' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
    $('div.sortableContainer').find("div#CheckAll").remove();
    $('div.sortableContainer').prepend(div);
    //get current columns order and generate li sortable accordingly

    var oTableReorder = null;

    if ((typeof oTableGlobalTABLE) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTableGlobalTABLE) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTableGlobalTABLE;

    for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {

        var oColumn = oTableReorder.fnSettings().aoColumns[i];
        var style = '';
        var LiStyle = 'display:block';
        var LiClassName = 'ui-state-default'
        if (oColumn.sClass.indexOf('NotHide') >= 0) {
            //style = ' style="display:none" ';
            style = ' disabled="disabled" ';
            //LiStyle = 'display:none';
            LiClassName = LiClassName + ' HiddenLi';
        }

        var colindxbyname = '';
        if (oColumn.sTitle.trim() != '') {
            colindxbyname = GetColumnIndex(oColumn.sTitle.trim());
        }
        else {
            colindxbyname = GetColumnIndex('blankFieldName' + blankNUmber);
        }


        if (gblColumnsToHideinPopUp == 'True') {

            var li = document.createElement('li');
            li.id = colindxbyname;
            li.className = LiClassName;
            li.innerHTML = oColumn.sTitle.trim();
            li.style = LiStyle;
            if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            else {

                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
                else {

                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            $('#ColumnSortableChildGrid').append(li);
        }
        else {

            if (jQuery.inArray(colindxbyname, ColumnsToHideinPopUp) < 0) {

                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                li.style = LiStyle;
                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                    }
                }

                else {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                    }
                }

                $('#ColumnSortableChildGrid').append(li);
            }
            else {
                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetColumnIndex(oColumn.sTitle.trim()) + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetColumnIndex('blankFieldName' + blankNUmber) + '_" />' + oColumn.sTitle.trim();
                }
                $(li).hide();
                $('#ColumnSortableChildGrid').append(li);
            }
        }
    }
}

function BindReorderInnerGridPopUpAndEvents(IsColumnAndTableRebindRequired)
{
    $("#ColumnSortableModalInnerGrid").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        //title: "ReOrder Columns",
        title: strReorderColumnPopupHeader,
        draggable: true,
        resizable: true,
        open: function () {
            GenerateColumnSortableForInnerGrid(IsColumnAndTableRebindRequired);
            $("#ColumnSortableInnerGrid").sortable({ axis: "y", containment: "parent" });
        },
        close: function () {

        }
    });

    $("#ColumnOrderSetupInnerGrid_Context").off("click");
    $(document).on("click", "a#ColumnOrderSetupInnerGrid_Context", function () {
        $("#ColumnSortableModalInnerGrid").dialog("open");
        return false;
    });
    $("a#ColumnOrderSetupInnerGrid").off("click");
    $(document).on("click", "a#ColumnOrderSetupInnerGrid", function () {
        $("#ColumnSortableModalInnerGrid").dialog("open");
    });
}

function BindReorderChildGridPopUpAndEvents(IsColumnAndTableRebindRequired)
{
    $("#ColumnSortableModalChildGrid").dialog({
        autoOpen: false,
        modal: true,
        width: 500,
        //title: "ReOrder Columns",
        title: strReorderColumnPopupHeader,
        draggable: true,
        resizable: true,
        open: function () {
            GenerateColumnSortableForChildGrid(IsColumnAndTableRebindRequired);
            $("#ColumnSortableChildGrid").sortable({ axis: "y", containment: "parent" });
        },
        close: function () {

        }
    });

    $("#ColumnOrderSetupChildGrid_Context").off("click");
    $(document).on("click", "a#ColumnOrderSetupChildGrid_Context", function () {
        $("#ColumnSortableModalChildGrid").dialog("open");
        return false;
    });
    $("a#ColumnOrderSetupChildGrid").off("click");
    $(document).on("click", "a#ColumnOrderSetupChildGrid", function () {
        $("#ColumnSortableModalChildGrid").dialog("open");
    });
}
function GenerateColumnSortableForMinMaxDashboard() {

    var blankNUmber = 0;
    $("#MinMaxColumnSortableModal").find('#ColumnSortable li').each(function (index) {
        $(this).remove();
    });
    var div = document.createElement('div');
    div.id = "CheckAll";
    div.innerHTML = "<input type='hidden' value ='ColumnSortable' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
    $('div.sortableContainer').find("div#CheckAll").remove();
    $('div.sortableContainer').prepend(div);
    //get current columns order and generate li sortable accordingly

    var oTableReorder = null;

    if ((typeof oTableMinMaxTuning) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTableMinMaxTuning) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTableMinMaxTuning;

    for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {

        var oColumn = oTableReorder.fnSettings().aoColumns[i];
        var style = '';
        var LiStyle = 'display:block';
        var LiClassName = 'ui-state-default'
        if (oColumn.sClass.indexOf('NotHide') >= 0) {
            style = ' disabled="disabled" ';
            LiClassName = LiClassName + ' HiddenLi';
        }
        var colindxbyname = '';
        if (oColumn.sTitle.trim() != '') {
            colindxbyname = GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardMinMaxColumns);
        }
        else {
            colindxbyname = GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardMinMaxColumns);
        }
        if (gblColumnsToHideinPopUp == 'True') {
            var li = document.createElement('li');
            li.id = colindxbyname;
            li.className = LiClassName;
            li.innerHTML = oColumn.sTitle.trim();
            li.style = LiStyle;
            if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            else {
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                }
                else {

                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            $("#MinMaxColumnSortableModal").find('#ColumnSortable').append(li);
        }
        else {

            if (jQuery.inArray(colindxbyname, ColumnsToHideinPopUp) < 0) {
                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                li.style = LiStyle;
                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                    }
                }
                else {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                    }
                }
                $("#MinMaxColumnSortableModal").find('#ColumnSortable').append(li);
            }
            else {
                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardMinMaxColumns) + '_" />' + oColumn.sTitle.trim();
                }
                $(li).hide();
                $("#MinMaxColumnSortableModal").find('#ColumnSortable').append(li);
            }
        }
    }
}

function GenerateColumnSortableForTurnsDashboard() {
    var blankNUmber = 0;
    $("#TurnsColumnSortableModal").find('#TurnsColumnSortable li').each(function (index) {
        $(this).remove();
    });
    var div = document.createElement('div');
    div.id = "CheckAll";
    div.innerHTML = "<input type='hidden' value ='TurnsColumnSortable' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";
    $('div.sortableContainer').find("div#CheckAll").remove();
    $('div.sortableContainer').prepend(div);
    //get current columns order and generate li sortable accordingly

    var oTableReorder = null;

    if ((typeof oTableTurnsAnalysis) === 'undefined' && (typeof oTableReorderId) === 'undefined')
        return false;

    if ((typeof oTableTurnsAnalysis) === 'undefined' && oTableReorderId != null && oTableReorderId != undefined)
        oTableReorder = $('#' + oTableReorderId).dataTable();
    else
        oTableReorder = oTableTurnsAnalysis;

    for (i = 0, iLen = oTableReorder.fnSettings().aoColumns.length; i < iLen; i++) {

        var oColumn = oTableReorder.fnSettings().aoColumns[i];
        var style = '';
        var LiStyle = 'display:block';
        var LiClassName = 'ui-state-default'
        if (oColumn.sClass.indexOf('NotHide') >= 0) {
            style = ' disabled="disabled" ';
            LiClassName = LiClassName + ' HiddenLi';
        }
        var colindxbyname = '';
        if (oColumn.sTitle.trim() != '') {
            colindxbyname = GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardTurnsColumns);
        }
        else {
            colindxbyname = GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardTurnsColumns);
        }
        if (gblColumnsToHideinPopUp == 'True') {
            var li = document.createElement('li');
            li.id = colindxbyname;
            li.className = LiClassName;
            li.innerHTML = oColumn.sTitle.trim();
            li.style = LiStyle;
            if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            else {
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                }
                else {

                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            $("#TurnsColumnSortableModal").find('#TurnsColumnSortable').append(li);
        }
        else {

            if (jQuery.inArray(colindxbyname, ColumnsToHideinPopUp) < 0) {
                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                li.style = LiStyle;
                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                    }
                }
                else {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                    }
                }
                $("#TurnsColumnSortableModal").find('#TurnsColumnSortable').append(li);
            }
            else {
                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetColumnIndexForDashBoard(oColumn.sTitle.trim(), objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + GetColumnIndexForDashBoard('blankFieldName' + blankNUmber, objDashboardTurnsColumns) + '_" />' + oColumn.sTitle.trim();
                }
                $(li).hide();
                $("#TurnsColumnSortableModal").find('#TurnsColumnSortable').append(li);
            }
        }
    }
}

$("#myDataTable").live('contextmenu', function (e) {

    if ($("body").hasClass('DTTT_Print')) {
        e.preventDefault();
        return false;
    }

    //if ($('#tab5')[0].className == "verticalText selected") {
    var x = e.pageX - this.offsetLeft;
    var y = e.pageY - this.offsetTop;
    $('#divContextMenu').css({ 'top': e.pageY, 'left': e.pageX }).fadeIn('slow');
    e.preventDefault();
    // }
});





function TabItemClickedbyContext(action, frmName) {
    $('#tab1').click();
    $('#divContextMenu').fadeOut('slow');
}



function DoNarrowSearchIM() {
    var narrowSearchFields = '';
    var narrowSearchValues = '';
    var narrowSearchItem = '';

    if (UserCreatedNarroValues != undefined && UserCreatedNarroValues.length > 0) {
        //narrowSearchItem += "[###]CreatedBy#" + UserCreatedNarroValues;
        narrowSearchFields += "CreatedBy" + ",";
        narrowSearchValues += UserCreatedNarroValues + "@";
    }
    else {
        narrowSearchFields += "CreatedBy" + ",";
        narrowSearchValues += "@";
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUpdatedNarroValues != undefined && UserUpdatedNarroValues.length > 0) {
        //narrowSearchItem += "[###]UpdatedBy#" + UserUpdatedNarroValues;
        narrowSearchFields += "UpdatedBy" + ",";
        narrowSearchValues += UserUpdatedNarroValues + "@";
    }
    else {
        narrowSearchFields += "UpdatedBy" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if ($('#DateCFromIM').val() != '' && $('#DateCToIM').val() != '') {
        //narrowSearchItem += "[###]DateCreatedFrom#" + GetDateInYYYYMMDDFormat($('#DateCFrom').val()) + "#DateCreatedTo#" + GetDateInYYYYMMDDFormat($('#DateCTo').val());        
        narrowSearchFields += "DateCreatedFrom" + ",";
        if ($('#DateCFromIM').val() != undefined && $('#DateCToIM').val() != undefined) {
            narrowSearchValues += ($('#DateCFromIM').val()) + "," + ($('#DateCToIM').val()) + "@";
        }
        else {
            narrowSearchValues += "@";
        }
    }
    else {
        narrowSearchFields += "DateCreatedFrom" + ",";
        narrowSearchValues += "@";
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////
    if ($('#DateUFromIM').val() != '' && $('#DateUToIM').val() != '') {
        //narrowSearchItem += "[###]DateUpdatedFrom#" + GetDateInYYYYMMDDFormat($('#DateUFrom').val()) + "#DateUpdatedTo#" + GetDateInYYYYMMDDFormat($('#DateUTo').val());
        narrowSearchFields += "DateUpdatedFrom" + ",";
        if ($('#DateUFromIM').val() != undefined && $('#DateUToIM').val() != undefined) {
            narrowSearchValues += ($('#DateUFromIM').val()) + "," + ($('#DateUToIM').val()) + "@";
        }
        else {
            narrowSearchValues += "@";
        }
    }
    else {
        narrowSearchFields += "DateUpdatedFrom" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF1NarrowValues != undefined && UserUDF1NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "UDF1" + ",";
        narrowSearchValues += UserUDF1NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF1" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF2NarrowValues != undefined && UserUDF2NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF2#" + UserUDF2NarrowValues;
        narrowSearchFields += "UDF2" + ",";
        narrowSearchValues += UserUDF2NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF2" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF3NarrowValues != undefined && UserUDF3NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF3#" + UserUDF3NarrowValues;
        narrowSearchFields += "UDF3" + ",";
        narrowSearchValues += UserUDF3NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF3" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF4NarrowValues != undefined && UserUDF4NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF4#" + UserUDF4NarrowValues;
        narrowSearchFields += "UDF4" + ",";
        narrowSearchValues += UserUDF4NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF4" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF5NarrowValues != undefined && UserUDF5NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF5#" + UserUDF5NarrowValues;
        narrowSearchFields += "UDF5" + ",";
        narrowSearchValues += UserUDF5NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF5" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullSupplierNarroValues != undefined && PullSupplierNarroValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += PullSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    if (ManufacturerNarroValues != undefined && ManufacturerNarroValues.length > 0) {
        narrowSearchFields += "ManufacturerID" + ",";
        narrowSearchValues += ManufacturerNarroValues + "@";
    }
    else {
        narrowSearchFields += "ManufacturerID" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    if (PullCategoryNarroValues != undefined && PullCategoryNarroValues.length > 0) {
        narrowSearchFields += "CategoryID" + ",";
        narrowSearchValues += PullCategoryNarroValues + "@";
    }
    else {
        narrowSearchFields += "CategoryID" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (OrderSupplierNarroValues != undefined && OrderSupplierNarroValues.length > 0) {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += OrderSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "SupplierID" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (OrderStatusNarroValues != undefined && OrderStatusNarroValues.length > 0) {
        narrowSearchFields += "OrderStatus" + ",";
        narrowSearchValues += OrderStatusNarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderStatus" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (OrderRequiredDateNarroValues != undefined && OrderRequiredDateNarroValues.length > 0) {
        narrowSearchFields += "OrderRequiredDate" + ",";
        narrowSearchValues += OrderRequiredDateNarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderRequiredDate" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////15//////////////////////////////////////////////////////////

    if (CostNarroSearchValue != undefined && CostNarroSearchValue.length > 0) {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += CostNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Cost" + ",";
        narrowSearchValues += "@";
    }


    //////////////////////////////////////16//////////////////////////////////////////////////////////

    if (spendPerSpendLimit != undefined && spendPerSpendLimit.length > 0) {
        narrowSearchFields += "spendPerSpendLimit" + ",";
        narrowSearchValues += spendPerSpendLimit + "@";
    }
    else {
        narrowSearchFields += "spendPerSpendLimit" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////17//////////////////////////////////////////////////////////

    if (TotalSpendLimit != undefined && TotalSpendLimit.length > 0) {
        narrowSearchFields += "TotalSpendLimit" + ",";
        narrowSearchValues += TotalSpendLimit + "@";
    }
    else {
        narrowSearchFields += "TotalSpendLimit" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////18//////////////////////////////////////////////////////////

    if (TotalSpendRemaining != undefined && TotalSpendRemaining.length > 0) {
        narrowSearchFields += "TotalSpendRemaining" + ",";
        narrowSearchValues += TotalSpendRemaining + "@";
    }
    else {
        narrowSearchFields += "TotalSpendRemaining" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////19//////////////////////////////////////////////////////////

    if (TotalItemSpendLimit != undefined && TotalItemSpendLimit.length > 0) {
        narrowSearchFields += "TotalItemSpendLimit" + ",";
        narrowSearchValues += TotalItemSpendLimit + "@";
    }
    else {
        narrowSearchFields += "TotalItemSpendLimit" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////20//////////////////////////////////////////////////////////

    if (MatStagLocationsNarroValues != undefined && MatStagLocationsNarroValues.length > 0) {
        narrowSearchFields += "BinName" + ",";
        narrowSearchValues += MatStagLocationsNarroValues + "@";
    }
    else {
        narrowSearchFields += "BinName" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////21//////////////////////////////////////////////////////////

    if (SSNarroSearchValue != undefined && SSNarroSearchValue.length > 0) {
        narrowSearchFields += "SS" + ",";
        narrowSearchValues += SSNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "SS" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////22//////////////////////////////////////////////////////////

    if (ItemTypeNarroSearchValue != undefined && ItemTypeNarroSearchValue.length > 0) {
        narrowSearchFields += "ItemType" + ",";
        narrowSearchValues += ItemTypeNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "ItemType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////23//////////////////////////////////////////////////////////

    if (CartSupplierNarroValues != undefined && CartSupplierNarroValues.length > 0) {
        narrowSearchFields += "SupplierName" + ",";
        narrowSearchValues += CartSupplierNarroValues + "@";
    }
    else {
        narrowSearchFields += "SupplierName" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////24//////////////////////////////////////////////////////////

    if (CartRTNarroValues != undefined && CartRTNarroValues.length > 0) {
        narrowSearchFields += "ReplenishType" + ",";
        narrowSearchValues += CartRTNarroValues + "@";
    }
    else {
        narrowSearchFields += "ReplenishType" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////25//////////////////////////////////////////////////////////

    if (ICLNarroValues != undefined && ICLNarroValues.length > 0) {
        narrowSearchFields += "BinId" + ",";
        narrowSearchValues += ICLNarroValues + "@";
    }
    else {
        narrowSearchFields += "BinId" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////26//////////////////////////////////////////////////////////

    if (StageLocationHeaderNarroValues != undefined && StageLocationHeaderNarroValues.length > 0) {
        narrowSearchFields += "MSID" + ",";
        narrowSearchValues += StageLocationHeaderNarroValues + "@";
        IsStagingLocationOnly = true;
    }
    else {
        narrowSearchFields += "MSID" + ",";
        narrowSearchValues += "@";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    if (ItemLocationNarroValues != undefined && ItemLocationNarroValues.length > 0) {
        narrowSearchFields += "ItemLocations" + ",";
        narrowSearchValues += ItemLocationNarroValues + "@";
    }
    else {
        narrowSearchFields += "ItemLocations" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullProjectSpendNarroValues != undefined && PullProjectSpendNarroValues.length > 0) {
        narrowSearchFields += "ProjectSpendID" + ",";
        narrowSearchValues += PullProjectSpendNarroValues + "@";
    }
    else {

        narrowSearchFields += "ProjectSpendID" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullWorkOrderValues != undefined && PullWorkOrderValues.length > 0) {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += PullWorkOrderValues + "@";
    }
    else {
        narrowSearchFields += "WorkOrderID" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (PullRequistionarroValues != undefined && PullRequistionarroValues.length > 0) {
        narrowSearchFields += "RequistionID" + ",";
        narrowSearchValues += PullRequistionarroValues + "@";
    }
    else {
        narrowSearchFields += "RequistionID" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (AvgUsageNarroSearchValue != undefined && AvgUsageNarroSearchValue.length > 0) {
        narrowSearchFields += "AverageUsage" + ",";
        narrowSearchValues += AvgUsageNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "AverageUsage" + ",";
        narrowSearchValues += "@";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    if (TurnsNarroSearchValue != undefined && TurnsNarroSearchValue.length > 0) {
        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += TurnsNarroSearchValue + "@";
    }
    else {
        narrowSearchFields += "Turns" + ",";
        narrowSearchValues += "@";
    }


    if (ItemUDF1 != undefined && ItemUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF1" + ",";
        narrowSearchValues += ItemUDF1 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF1" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF2 != undefined && ItemUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF2" + ",";
        narrowSearchValues += ItemUDF2 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF2" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF3 != undefined && ItemUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF3" + ",";
        narrowSearchValues += ItemUDF3 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF3" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF4 != undefined && ItemUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF4" + ",";
        narrowSearchValues += ItemUDF4 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF4" + ",";
        narrowSearchValues += "@";
    }
    if (ItemUDF5 != undefined && ItemUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ItemUDF5" + ",";
        narrowSearchValues += ItemUDF5 + "@";
    }
    else {
        narrowSearchFields += "ItemUDF5" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF1 != undefined && ToolCheckOutUDF1.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += ToolCheckOutUDF1 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF1" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF2 != undefined && ToolCheckOutUDF2.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += ToolCheckOutUDF2 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF2" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF3 != undefined && ToolCheckOutUDF3.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += ToolCheckOutUDF3 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF3" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF4 != undefined && ToolCheckOutUDF4.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += ToolCheckOutUDF4 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF4" + ",";
        narrowSearchValues += "@";
    }
    if (ToolCheckOutUDF5 != undefined && ToolCheckOutUDF5.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += ToolCheckOutUDF5 + "@";
    }
    else {
        narrowSearchFields += "ToolCheckOutUDF5" + ",";
        narrowSearchValues += "@";
    }

    //////////////////////////////////////43//////////////////////////////////////////////////////////
    if (StageLocationNarroValues != undefined && StageLocationNarroValues.length > 0) {
        narrowSearchFields += "MSID" + ",";
        narrowSearchValues += StageLocationNarroValues + "@";
        IsStagingLocationOnly = true;
    }
    else {
        narrowSearchFields += "MSID" + ",";
        narrowSearchValues += "@";
    }
    if (PullOrderNumbernarroValues != undefined && PullOrderNumbernarroValues.length > 0) {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += PullOrderNumbernarroValues + "@";
    }
    else {
        narrowSearchFields += "OrderNumber" + ",";
        narrowSearchValues += "@";
    }
    if (UserUDF6NarrowValues != undefined && UserUDF6NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF1#" + UserUDF1NarrowValues;
        narrowSearchFields += "UDF6" + ",";
        narrowSearchValues += UserUDF6NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF6" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF7NarrowValues != undefined && UserUDF7NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF2#" + UserUDF2NarrowValues;
        narrowSearchFields += "UDF7" + ",";
        narrowSearchValues += UserUDF7NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF7" + ",";
        narrowSearchValues += "@";
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF8NarrowValues != undefined && UserUDF8NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF3#" + UserUDF3NarrowValues;
        narrowSearchFields += "UDF8" + ",";
        narrowSearchValues += UserUDF8NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF8" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF9NarrowValues != undefined && UserUDF9NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF4#" + UserUDF4NarrowValues;
        narrowSearchFields += "UDF9" + ",";
        narrowSearchValues += UserUDF9NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF9" + ",";
        narrowSearchValues += "@";
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    if (UserUDF10NarrowValues != undefined && UserUDF10NarrowValues.length > 0) {
        //narrowSearchItem += "[###]UDF5#" + UserUDF5NarrowValues;
        narrowSearchFields += "UDF10" + ",";
        narrowSearchValues += UserUDF10NarrowValues + "@";
    }
    else {
        narrowSearchFields += "UDF10" + ",";
        narrowSearchValues += "@";
    }

    if (ItemActive != undefined && ItemActive.length > 0) {
        narrowSearchFields += "IsActive" + ",";
        narrowSearchValues += ItemActive + "@";
    }
    else {
        narrowSearchFields += "IsActive" + ",";
        narrowSearchValues += "@";
    }
    if (BinNarroValuesIM != undefined && BinNarroValuesIM.length > 0) {
        narrowSearchFields += "Bin" + ",";
        narrowSearchValues += BinNarroValuesIM + "@";
    }
    else {
        narrowSearchFields += "Bin" + ",";
        narrowSearchValues += "@";
    }
    //narrowSearch = 'STARTWITH#' + narrowSearchItem;
    //if (narrowSearchValues.replace(/@/g, '') == '')
    //    NarrowSearchInGridIM('');
    //else
    {
        var searchtext = '';
        var receiveNewSearchBox = $("#searchInAllItems");
        if ($("#ItemModel_filter").length > 0) {
            searchtext = $("#ItemModel_filter").val().replace(/'/g, "''");
        }
        else if ($("#Cart_ItemModel_filter").length > 0) {
            searchtext = $("#Cart_ItemModel_filter").val().replace(/'/g, "''").replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
        }
        else if (typeof (receiveNewSearchBox) !== "undefined" && receiveNewSearchBox != null && typeof (receiveNewSearchBox.val()) != "undefined" && receiveNewSearchBox.val() != null && receiveNewSearchBox.val() != '')
        {
            searchtext = $("#searchInAllItems").val().replace(/'/g, "''").replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
        }

        narrowSearch = narrowSearchFields + "[###]" + narrowSearchValues + "[###]" + searchtext;
        //alert(narrowSearch);
        if (narrowSearch.length > 10)
            NarrowSearchInGridIM(narrowSearch);
        else if (UserCreatedNarroValues == undefined || UserCreatedNarroValues.length == 0 ||
            UserUpdatedNarroValues == undefined || UserUpdatedNarroValues.length == 0)
            NarrowSearchInGridIM(narrowSearch);
    }

}

function NarrowSearchInGridIM(searchstr) {
    FilterStringGlobalUse = searchstr;

    $('#ItemModeDataTable').dataTable().fnFilter(searchstr, null, null, null)
}






(function ($) {


    $.fn.priceFormat = function (options) {

        var defaults =
        {
            prefix: 'US$ ',
            suffix: '',
            centsSeparator: '.',
            thousandsSeparator: ',',
            limit: false,
            centsLimit: 2,
            clearPrefix: false,
            clearSufix: false,
            allowNegative: true,
            insertPlusSign: false
        };

        var options = $.extend(defaults, options);

        return this.each(function () {

            // pre defined options
            var obj = $(this);
            var is_number = /[0-9]/;

            // load the pluggings settings
            var prefix = options.prefix;
            var suffix = options.suffix;
            var centsSeparator = options.centsSeparator;
            var thousandsSeparator = options.thousandsSeparator;
            var limit = options.limit;
            var centsLimit = options.centsLimit;
            var clearPrefix = options.clearPrefix;
            var clearSuffix = options.clearSuffix;
            var allowNegative = options.allowNegative;
            var insertPlusSign = options.insertPlusSign;

            // If insertPlusSign is on, it automatic turns on allowNegative, to work with Signs
            if (insertPlusSign) allowNegative = true;

            // skip everything that isn't a number
            // and also skip the left zeroes
            function to_numbers(str) {
                var formatted = '';
                for (var i = 0; i < (str.length) ; i++) {
                    char_ = str.charAt(i);
                    if (formatted.length == 0 && char_ == 0) char_ = false;

                    if (char_ && char_.match(is_number)) {
                        if (limit) {
                            if (formatted.length < limit) formatted = formatted + char_;
                        }
                        else {
                            formatted = formatted + char_;
                        }
                    }
                }

                return formatted;
            }

            // format to fill with zeros to complete cents chars
            function fill_with_zeroes(str) {
                while (str.length < (centsLimit + 1)) str = '0' + str;
                return str;
            }

            // format as price
            function price_format(str) {
                // formatting settings
                var formatted = fill_with_zeroes(to_numbers(str));
                var thousandsFormatted = '';
                var thousandsCount = 0;

                // Checking CentsLimit
                if (centsLimit == 0) {
                    centsSeparator = "";
                    centsVal = "";
                }

                // split integer from cents
                var centsVal = formatted.substr(formatted.length - centsLimit, centsLimit);
                var integerVal = formatted.substr(0, formatted.length - centsLimit);

                // apply cents pontuation
                formatted = (centsLimit == 0) ? integerVal : integerVal + centsSeparator + centsVal;

                // apply thousands pontuation
                if (thousandsSeparator || $.trim(thousandsSeparator) != "") {
                    for (var j = integerVal.length; j > 0; j--) {
                        char_ = integerVal.substr(j - 1, 1);
                        thousandsCount++;
                        if (thousandsCount % 3 == 0) char_ = thousandsSeparator + char_;
                        thousandsFormatted = char_ + thousandsFormatted;
                    }

                    //
                    if (thousandsFormatted.substr(0, 1) == thousandsSeparator) thousandsFormatted = thousandsFormatted.substring(1, thousandsFormatted.length);
                    formatted = (centsLimit == 0) ? thousandsFormatted : thousandsFormatted + centsSeparator + centsVal;
                }

                // if the string contains a dash, it is negative - add it to the begining (except for zero)
                if (allowNegative && (integerVal != 0 || centsVal != 0)) {
                    if (str.indexOf('-') != -1 && str.indexOf('+') < str.indexOf('-')) {
                        formatted = '-' + formatted;
                    }
                    else {
                        if (!insertPlusSign)
                            formatted = '' + formatted;
                        else
                            formatted = '+' + formatted;
                    }
                }

                // apply the prefix
                if (prefix) formatted = prefix + formatted;

                // apply the suffix
                if (suffix) formatted = formatted + suffix;

                return formatted;
            }

            // filter what user type (only numbers and functional keys)
            function key_check(e) {
                var code = (e.keyCode ? e.keyCode : e.which);
                var typed = String.fromCharCode(code);
                var functional = false;
                var str = obj.val();
                var newValue = price_format(str + typed);

                // allow key numbers, 0 to 9
                if ((code >= 48 && code <= 57) || (code >= 96 && code <= 105)) functional = true;

                // check Backspace, Tab, Enter, Delete, and left/right arrows
                if (code == 8) functional = true;
                if (code == 9) functional = true;
                if (code == 13) functional = true;
                if (code == 46) functional = true;
                if (code == 37) functional = true;
                if (code == 39) functional = true;
                // Minus Sign, Plus Sign
                if (allowNegative && (code == 189 || code == 109)) functional = true;
                if (insertPlusSign && (code == 187 || code == 107)) functional = true;

                if (!functional) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (str != newValue) obj.val(newValue);
                }

            }

            // inster formatted price as a value of an input field
            function price_it() {
                var str = obj.val();
                var price = price_format(str);
                if (str != price) obj.val(price);
            }

            // Add prefix on focus
            function add_prefix() {
                var val = obj.val();
                obj.val(prefix + val);
            }

            function add_suffix() {
                var val = obj.val();
                obj.val(val + suffix);
            }

            // Clear prefix on blur if is set to true
            function clear_prefix() {
                if ($.trim(prefix) != '' && clearPrefix) {
                    var array = obj.val().split(prefix);
                    obj.val(array[1]);
                }
            }

            // Clear suffix on blur if is set to true
            function clear_suffix() {
                if ($.trim(suffix) != '' && clearSuffix) {
                    var array = obj.val().split(suffix);
                    obj.val(array[0]);
                }
            }

            // bind the actions
            $(this).bind('keydown.price_format', key_check);
            $(this).bind('keyup.price_format', price_it);
            $(this).bind('focusout.price_format', price_it);

            // Clear Prefix and Add Prefix
            if (clearPrefix) {
                $(this).bind('focusout.price_format', function () {
                    clear_prefix();
                });

                $(this).bind('focusin.price_format', function () {
                    add_prefix();
                });
            }

            // Clear Suffix and Add Suffix
            if (clearSuffix) {
                $(this).bind('focusout.price_format', function () {
                    clear_suffix();
                });

                $(this).bind('focusin.price_format', function () {
                    add_suffix();
                });
            }

            // If value has content
            if ($(this).val().length > 0) {
                price_it();
                clear_prefix();
                clear_suffix();
            }

        });

    };


    $.fn.unpriceFormat = function () {
        return $(this).unbind(".price_format");
    };


    $.fn.unmask = function () {

        var field = $(this).val();
        var result = "";

        for (var f in field) {
            if (!isNaN(field[f]) || field[f] == "-") result += field[f];
        }

        return result;
    };



})(jQuery);


function GetBoolInFormat(obj, val) {
    return val == null ? '' : (val == true ? 'Yes' : 'No');
}





function GetRequisitionNarrowSearchData(_TableName, _IsArchived, _IsDeleted, _RequisitionCurrentTab) {
    /////////   ////////////
    $.ajax({
        'url': '/Master/GetRequisitionRequiredDate',
        data: { TableName: 'OrderRequiredDate', TextFieldName: 'OrderRequiredDateText' },
        success: function (response) {
            var s = '';
            var gridsearch = oTable.dataTableSettings[0].oLoadedState.oSearch.sSearch;
            var arrofvalues = GetValuefromsstring(gridsearch);
            $.each(response.DDData, function (i, val) {
                s += '<option value="' + val.ID + '">' + val.Text + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#OrderRequiredDate").empty();
            $("#OrderRequiredDate").multiselect('destroy');
            $("#OrderRequiredDate").multiselectfilter('destroy');

            $("#OrderRequiredDate").append(s);

            $("#OrderRequiredDate").multiselect
                (
                    {
                        noneSelectedText: 'Required Date', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Required Date ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#OrderRequiredDateCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#OrderRequiredDateCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#OrderRequiredDateCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#OrderRequiredDateCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#OrderRequiredDateCollapse").text().indexOf(ui.text) == -1) {
                            $("#OrderRequiredDateCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#OrderRequiredDateCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#OrderRequiredDateCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#OrderRequiredDateCollapse").html(text);
                        }
                        else
                            $("#OrderRequiredDateCollapse").html('');
                    }
                    OrderRequiredDateNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.OrderRequiredDate = OrderRequiredDateNarroValues;

                    if ($("#OrderRequiredDateCollapse").text().trim() != '')
                        $("#OrderRequiredDateCollapse").show();
                    else
                        $("#OrderRequiredDateCollapse").hide();


                    if ($("#OrderRequiredDateCollapse").find('span').length <= 2) {
                        $("#OrderRequiredDateCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#OrderRequiredDateCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("OrderRequiredDate");
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Supplier', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#RequisitionSupplier").empty();
            $("#RequisitionSupplier").multiselect('destroy');
            $("#RequisitionSupplier").multiselectfilter('destroy');

            $("#RequisitionSupplier").append(s);
            $("#RequisitionSupplier").multiselect
                (
                    {
                        noneSelectedText: Supplier, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Supplier + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#RequisitionSupplierCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#RequisitionSupplierCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#RequisitionSupplierCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#RequisitionSupplierCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#RequisitionSupplierCollapse").text().indexOf(ui.text) == -1) {
                            $("#RequisitionSupplierCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#RequisitionSupplierCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#RequisitionSupplierCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#RequisitionSupplierCollapse").html(text);
                        }
                        else
                            $("#RequisitionSupplierCollapse").html('');
                    }
                    RequistionSupplierValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.RequisitionSupplier = RequistionSupplierValues;

                    if ($("#RequisitionSupplierCollapse").text().trim() != '')
                        $("#RequisitionSupplierCollapse").show();
                    else
                        $("#RequisitionSupplierCollapse").hide();


                    if ($("#RequisitionSupplierCollapse").find('span').length <= 2) {
                        $("#RequisitionSupplierCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#RequisitionSupplierCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("RequisitionSupplier");
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'WorkOrder', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ReqWorkOrder").empty();
            $("#ReqWorkOrder").multiselect('destroy');
            $("#ReqWorkOrder").multiselectfilter('destroy');

            $("#ReqWorkOrder").append(s);
            $("#ReqWorkOrder").multiselect
                (
                    {
                        noneSelectedText: 'WorkOrder', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'WorkOrder ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ReqWorkOrderCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ReqWorkOrderCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ReqWorkOrderCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ReqWorkOrderCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ReqWorkOrderCollapse").text().indexOf(ui.text) == -1) {
                            $("#ReqWorkOrderCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ReqWorkOrderCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ReqWorkOrderCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ReqWorkOrderCollapse").html(text);
                        }
                        else
                            $("#ReqWorkOrderCollapse").html('');
                    }
                    WorkOrderNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.ReqWorkOrder = WorkOrderNarroValues;
                    if ($("#ReqWorkOrderCollapse").text().trim() != '')
                        $("#ReqWorkOrderCollapse").show();
                    else
                        $("#ReqWorkOrderCollapse").hide();


                    if ($("#ReqWorkOrderCollapse").find('span').length <= 2) {
                        $("#ReqWorkOrderCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ReqWorkOrderCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("ReqWorkOrder");
        },
        error: function (response) {
            // through errror message
        }
    });



    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Customer', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ReqCustomer").empty();
            $("#ReqCustomer").multiselect('destroy');
            $("#ReqCustomer").multiselectfilter('destroy');

            $("#ReqCustomer").append(s);
            $("#ReqCustomer").multiselect
                (
                    {
                        noneSelectedText: 'Customer', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Customer ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ReqCustomerCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ReqCustomerCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ReqCustomerCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ReqCustomerCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ReqCustomerCollapse").text().indexOf(ui.text) == -1) {
                            $("#ReqCustomerCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ReqCustomerCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ReqCustomerCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ReqCustomerCollapse").html(text);
                        }
                        else
                            $("#ReqCustomerCollapse").html('');
                    }
                    OrderSupplierNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.ReqCustomer = OrderSupplierNarroValues;
                    if ($("#ReqCustomerCollapse").text().trim() != '')
                        $("#ReqCustomerCollapse").show();
                    else
                        $("#ReqCustomerCollapse").hide();


                    if ($("#ReqCustomerCollapse").find('span').length <= 2) {
                        $("#ReqCustomerCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ReqCustomerCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("ReqCustomer");
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'RequisitionStatus', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, val) {
                var str = ValData.toString().split('[###]');
                if (str[1] == "Unsubmitted")
                    s += '<option value="Unsubmitted">Unsubmitted (' + val + ')</option>';
                if (str[1] == "Submitted")
                    s += '<option value="Submitted">Submitted (' + val + ')</option>';
                if (str[1] == "Approved")
                    s += '<option value="Approved">Approved (' + val + ')</option>';
                if (str[1] == "Closed")
                    s += '<option value="Closed">Closed (' + val + ')</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ddlRequisitionStatus").empty();
            $("#ddlRequisitionStatus").multiselect('destroy');
            $("#ddlRequisitionStatus").multiselectfilter('destroy');

            $("#ddlRequisitionStatus").append(s);
            $("#ddlRequisitionStatus")[0].selectedIndex = -1;
            $("#ddlRequisitionStatus").multiselect("refresh");
            $("#ddlRequisitionStatus").multiselectfilter("refresh");
            $("#ddlRequisitionStatus").multiselect
                (
                    {
                        noneSelectedText: RequisitionStatusRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return RequisitionStatusRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlRequisitionStatusCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlRequisitionStatusCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlRequisitionStatusCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlRequisitionStatusCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {


                    if (ui.checked) {
                        if ($("#ddlRequisitionStatusCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlRequisitionStatusCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ddlRequisitionStatusCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlRequisitionStatusCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlRequisitionStatusCollapse").html(text);
                        }
                        else
                            $("#ddlRequisitionStatusCollapse").html('');
                    }
                    ddlRequisitionStatusNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })
                    _NarrowSearchSave.objSearch.ddlRequisitionStatus = ddlRequisitionStatusNarroValues;
                    if ($("#ddlRequisitionStatusCollapse").text().trim() != '')
                        $("#ddlRequisitionStatusCollapse").show();
                    else
                        $("#ddlRequisitionStatusCollapse").hide();


                    if ($("#ddlRequisitionStatusCollapse").find('span').length <= 2) {
                        $("#ddlRequisitionStatusCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlRequisitionStatusCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("ddlRequisitionStatus");
        },
        error: function (response) {
            // through errror message
        }
    });

}

function GetWONarrowSearchData(_TableName, _IsArchived, _IsDeleted) {
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'WOType', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: null },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#WOType").empty();
            $("#WOType").multiselect('destroy');
            $("#WOType").multiselectfilter('destroy');
            $("#WOType").append(s);
            var narrowsearchtext = "Work Order Type";
            if (typeof WorkOrderType != 'undefined') {
                narrowsearchtext = WorkOrderType;
            }
            $("#WOType").multiselect
                (
                    {
                        noneSelectedText: narrowsearchtext, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return narrowsearchtext +' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#WOTypeCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#WOTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#WOTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#WOTypeCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#WOTypeCollapse").text().indexOf(ui.text) == -1) {
                            $("#WOTypeCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#WOTypeCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#WOTypeCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#WOTypeCollapse").html(text);
                        }
                        else
                            $("#WOTypeCollapse").html('');
                    }
                    WOTypeValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#WOTypeCollapse").text().trim() != '')
                        $("#WOTypeCollapse").show();
                    else
                        $("#WOTypeCollapse").hide();


                    if ($("#WOTypeCollapse").find('span').length <= 2) {
                        $("#WOTypeCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#WOTypeCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Customer', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: null },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#WOCustomer").empty();
            $("#WOCustomer").multiselect('destroy');
            $("#WOCustomer").multiselectfilter('destroy');
            var narrowsearchtext = "Customer";
            if (typeof CustomerNS != 'undefined') {
                narrowsearchtext = CustomerNS;
            }
            $("#WOCustomer").append(s);
            $("#WOCustomer").multiselect
                (
                    {
                        noneSelectedText: narrowsearchtext, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return narrowsearchtext + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#WOCustomerCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#WOCustomerCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#WOCustomerCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#WOCustomerCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#WOCustomerCollapse").text().indexOf(ui.text) == -1) {
                            $("#WOCustomerCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#WOCustomerCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#WOCustomerCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#WOCustomerCollapse").html(text);
                        }
                        else
                            $("#WOCustomerCollapse").html('');
                    }
                    WOCustomerValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#WOCustomerCollapse").text().trim() != '')
                        $("#WOCustomerCollapse").show();
                    else
                        $("#WOCustomerCollapse").hide();


                    if ($("#WOCustomerCollapse").find('span').length <= 2) {
                        $("#WOCustomerCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#WOCustomerCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Technician', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: null },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#WOTechnician").empty();
            $("#WOTechnician").multiselect('destroy');
            $("#WOTechnician").multiselectfilter('destroy');
            var narrowsearchtext = "Technician";
            if (typeof TechnicianList != 'undefined') {
                narrowsearchtext = TechnicianList;
            }
            $("#WOTechnician").append(s);
            $("#WOTechnician").multiselect
                (
                    {
                        noneSelectedText: narrowsearchtext, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return narrowsearchtext +' '+ numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#WOTechnicianCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#WOTechnicianCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#WOTechnicianCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#WOTechnicianCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#WOTechnicianCollapse").text().indexOf(ui.text) == -1) {
                            $("#WOTechnicianCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#WOTechnicianCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#WOTechnicianCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#WOTechnicianCollapse").html(text);
                        }
                        else
                            $("#WOTechnicianCollapse").html('');
                    }
                    WOTechnicianValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#WOTechnicianCollapse").text().trim() != '')
                        $("#WOTechnicianCollapse").show();
                    else
                        $("#WOTechnicianCollapse").hide();


                    if ($("#WOTechnicianCollapse").find('span').length <= 2) {
                        $("#WOTechnicianCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#WOTechnicianCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Supplier', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: null },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#WOSupplier").empty();
            $("#WOSupplier").multiselect('destroy');
            $("#WOSupplier").multiselectfilter('destroy');
            var narrowsearchtext = "Supplier";
            if (typeof Supplier != 'undefined') {
                narrowsearchtext = Supplier;
            }
            $("#WOSupplier").append(s);
            $("#WOSupplier").multiselect
                (
                    {
                        noneSelectedText: narrowsearchtext, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return narrowsearchtext +' '+ numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#WOSupplierCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#WOSupplierCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#WOSupplierCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#WOSupplierCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#WOSupplierCollapse").text().indexOf(ui.text) == -1) {
                            $("#WOSupplierCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#WOSupplierCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#WOSupplierCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#WOSupplierCollapse").html(text);
                        }
                        else
                            $("#WOSupplierCollapse").html('');
                    }
                    WOSupplierValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#WOSupplierCollapse").text().trim() != '')
                        $("#WOSupplierCollapse").show();
                    else
                        $("#WOSupplierCollapse").hide();


                    if ($("#WOSupplierCollapse").find('span').length <= 2) {
                        $("#WOSupplierCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#WOSupplierCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Asset', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: null },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#WOAsset").empty();
            $("#WOAsset").multiselect('destroy');
            $("#WOAsset").multiselectfilter('destroy');
            var narrowsearchtext = "Asset";
            if (typeof AssetNS != 'undefined') {
                narrowsearchtext = AssetNS;
            }
            $("#WOAsset").append(s);
            $("#WOAsset").multiselect
                (
                    {
                        noneSelectedText: narrowsearchtext, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return narrowsearchtext +' '+ numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#WOAssetCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#WOAssetCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#WOAssetCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#WOAssetCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#WOAssetCollapse").text().indexOf(ui.text) == -1) {
                            $("#WOAssetCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#WOAssetCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#WOAssetCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#WOAssetCollapse").html(text);
                        }
                        else
                            $("#WOAssetCollapse").html('');
                    }
                    WOAssetValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#WOAssetCollapse").text().trim() != '')
                        $("#WOAssetCollapse").show();
                    else
                        $("#WOAssetCollapse").hide();


                    if ($("#WOAssetCollapse").find('span').length <= 2) {
                        $("#WOAssetCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#WOAssetCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Tool', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: null },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#WOTool").empty();
            $("#WOTool").multiselect('destroy');
            $("#WOTool").multiselectfilter('destroy');
            var narrowsearchtext = "Tool";
            if (typeof ToolNS != 'undefined') {
                narrowsearchtext = ToolNS;
            }
            $("#WOTool").append(s);
            $("#WOTool").multiselect
                (
                    {
                        noneSelectedText: narrowsearchtext , selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return narrowsearchtext+' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#WOToolCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#WOToolCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#WOToolCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#WOToolCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#WOToolCollapse").text().indexOf(ui.text) == -1) {
                            $("#WOToolCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#WOToolCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#WOToolCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#WOToolCollapse").html(text);
                        }
                        else
                            $("#WOToolCollapse").html('');
                    }
                    WOToolValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#WOToolCollapse").text().trim() != '')
                        $("#WOToolCollapse").show();
                    else
                        $("#WOToolCollapse").hide();


                    if ($("#WOToolCollapse").find('span').length <= 2) {
                        $("#WOToolCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#WOToolCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'WOStatus', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: null },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            $("#WOStatus").empty();
            $("#WOStatus").multiselect('destroy');
            $("#WOStatus").multiselectfilter('destroy');
            $("#WOStatus").append(s);
            var narrowsearchtext = "Work Order Status";
            if (typeof WOStatusNS != "undefined") {
                narrowsearchtext = WOStatusNS;
            }
            $("#WOStatus").multiselect
                (
                    {
                        noneSelectedText: narrowsearchtext, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return narrowsearchtext + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#WOStatusCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#WOStatusCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#WOStatusCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#WOStatusCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#WOStatusCollapse").text().indexOf(ui.text) == -1) {
                            $("#WOStatusCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#WOStatusCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#WOStatusCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#WOStatusCollapse").html(text);
                        }
                        else
                            $("#WOStatusCollapse").html('');
                    }
                    WOStatusValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#WOStatusCollapse").text().trim() != '')
                        $("#WOStatusCollapse").show();
                    else
                        $("#WOStatusCollapse").hide();


                    if ($("#WOStatusCollapse").find('span').length <= 2) {
                        $("#WOStatusCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#WOStatusCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

}

function GetOrderNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {
    //    $.ajax({ 'url': '/Master/GetDDData',
    //        data: { TableName: 'SupplierMaster', TextFieldName: 'SupplierName' },
    //        success: function (response) {
    //            var s = '';
    //            $.each(response.DDData, function (i, val) {
    //                s += '<option value="' + val.ID + '">' + val.Text + '</option>';
    //            });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'SupplierName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#OrderSupplier").empty();
            $("#OrderSupplier").multiselect('destroy');
            $("#OrderSupplier").multiselectfilter('destroy');

            $("#OrderSupplier").append(s);
            $("#OrderSupplier").multiselect
                (
                    {
                        noneSelectedText: 'Supplier', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Supplier ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#OrderSupplierCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#OrderSupplierCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#OrderSupplierCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#OrderSupplierCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#OrderSupplierCollapse").text().indexOf(ui.text) == -1) {
                            $("#OrderSupplierCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#OrderSupplierCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#OrderSupplierCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#OrderSupplierCollapse").html(text);
                        }
                        else
                            $("#OrderSupplierCollapse").html('');
                    }
                    OrderSupplierNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#OrderSupplierCollapse").text().trim() != '')
                        $("#OrderSupplierCollapse").show();
                    else
                        $("#OrderSupplierCollapse").hide();


                    if ($("#OrderSupplierCollapse").find('span').length <= 2) {
                        $("#OrderSupplierCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#OrderSupplierCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    /////////////////////
    //    $.ajax({ 'url': '/Master/GetOrderStatus',
    //        data: { TableName: 'OrderStatus', TextFieldName: 'OrderStatusText' },
    //        success: function (response) {
    //            var s = '';
    //            $.each(response.DDData, function (i, val) {
    //                s += '<option value="' + val.ID + '">' + val.Text + '</option>';
    //            });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'OrderStatus', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#OrderStatus").empty();
            $("#OrderStatus").multiselect('destroy');
            $("#OrderStatus").multiselectfilter('destroy');

            $("#OrderStatus").append(s);
            $("#OrderStatus").multiselect
                (
                    {
                        noneSelectedText: 'Status', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Status ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#OrderStatusCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#OrderStatusCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#OrderStatusCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#OrderStatusCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#OrderStatusCollapse").text().indexOf(ui.text) == -1) {
                            $("#OrderStatusCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#OrderStatusCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#OrderStatusCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#OrderStatusCollapse").html(text);
                        }
                        else
                            $("#OrderStatusCollapse").html('');
                    }
                    OrderStatusNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#OrderStatusCollapse").text().trim() != '')
                        $("#OrderStatusCollapse").show();
                    else
                        $("#OrderStatusCollapse").hide();


                    if ($("#OrderStatusCollapse").find('span').length <= 2) {
                        $("#OrderStatusCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#OrderStatusCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });


    /////////////////////
    $.ajax({
        'url': '/Master/GetOrderRequiredDate',
        data: { TableName: 'OrderRequiredDate', TextFieldName: 'OrderRequiredDateText' },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (i, val) {
                s += '<option value="' + val.ID + '">' + val.Text + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#OrderRequiredDate").empty();
            $("#OrderRequiredDate").multiselect('destroy');
            $("#OrderRequiredDate").multiselectfilter('destroy');

            $("#OrderRequiredDate").append(s);
            $("#OrderRequiredDate").multiselect
                (
                    {
                        noneSelectedText: 'Required Date', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Required Date ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            //                        $("#OrderStatusCollapse").html('');
                            //                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            //                            if ($("#OrderStatusCollapse").text().indexOf(ui.target[i].text) == -1) {
                            //                                $("#OrderStatusCollapse").append("<span>" + ui.target[i].text + "</span>");
                            //                            }
                            //                        }
                            //                        $("#OrderStatusCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    //                if (ui.checked) {
                    //                    if ($("#OrderStatusCollapse").text().indexOf(ui.text) == -1) {
                    //                        $("#OrderStatusCollapse").append("<span>" + ui.text + "</span>");
                    //                    }
                    //                }
                    //                else {
                    //                    if (ui.checked == undefined) {
                    //                        $("#OrderStatusCollapse").html('');
                    //                    }
                    //                    else if (!ui.checked) {
                    //                        var text = $("#OrderStatusCollapse").html();
                    //                        text = text.replace("<span>" + ui.text + "</span>", '');
                    //                        $("#OrderStatusCollapse").html(text);
                    //                    }
                    //                    else
                    //                        $("#OrderStatusCollapse").html('');
                    //                }
                    OrderRequiredDateNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    //                if ($("#OrderStatusCollapse").text().trim() != '')
                    //                    $("#OrderStatusCollapse").show();
                    //                else
                    //                    $("#OrderStatusCollapse").hide();


                    //                if ($("#OrderStatusCollapse").find('span').length <= 2) {
                    //                    $("#OrderStatusCollapse").scrollTop(0).height(50);
                    //                }
                    //                else {
                    //                    $("#OrderStatusCollapse").scrollTop(0).height(100);
                    //                }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}


function GetReceiveNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'OrderNumber', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[0] + '">' + ArrData[0] + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#ddlOrderNumber").empty();
            $("#ddlOrderNumber").multiselect('destroy');
            $("#ddlOrderNumber").multiselectfilter('destroy');

            $("#ddlOrderNumber").append(s);
            $("#ddlOrderNumber").multiselect
                (
                    {
                        noneSelectedText: 'Order Number', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'Order Number ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlOrderNumberCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlOrderNumberCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlOrderNumberCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlOrderNumberCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {

                        if ($("#ddlOrderNumberCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlOrderNumberCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {

                        if (ui.checked == undefined) {
                            $("#ddlOrderNumberCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlOrderNumberCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlOrderNumberCollapse").html(text);
                        }
                        else
                            $("#ddlOrderNumberCollapse").html('');
                    }
                    OrderNumberNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#ddlOrderNumberCollapse").text().trim() != '')
                        $("#ddlOrderNumberCollapse").show();
                    else
                        $("#ddlOrderNumberCollapse").hide();


                    if ($("#ddlOrderNumberCollapse").find('span').length <= 2) {
                        $("#ddlOrderNumberCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlOrderNumberCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}
////
function GetKitMasterNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'WIPKitsReadyforBuild', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#ddlWIPKit").empty();
            $("#ddlWIPKit").multiselect('destroy');
            $("#ddlWIPKit").multiselectfilter('destroy');

            $("#ddlWIPKit").append(s);
            $("#ddlWIPKit").multiselect
                (
                    {
                        noneSelectedText: 'WIPKitsReadyforBuild', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'WIPKitsReadyforBuild' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlWIPKitCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlWIPKitCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlWIPKitCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlWIPKitCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {

                        if ($("#ddlWIPKitCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlWIPKitCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {

                        if (ui.checked == undefined) {
                            $("#ddlWIPKitCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlWIPKitCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlWIPKitCollapse").html(text);
                        }
                        else
                            $("#ddlWIPKitCollapse").html('');
                    }
                    OrderNumberNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#ddlWIPKitCollapse").text().trim() != '')
                        $("#ddlWIPKitCollapse").show();
                    else
                        $("#ddlWIPKitCollapse").hide();


                    if ($("#ddlWIPKitCollapse").find('span').length <= 2) {
                        $("#ddlWIPKitCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlWIPKitCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}
////

function GetQuoteMasterNarrowSearchData(_TableName, _IsArchived, _IsDeleted, _RequisitionCurrentTab) {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'QuoteStatus', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#QuoteStatus").empty();
            $("#QuoteStatus").multiselect('destroy');
            $("#QuoteStatus").multiselectfilter('destroy');

            $("#QuoteStatus").append(s);
            $("#QuoteStatus").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: QuoteStatus, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return QuoteStatus + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#QuoteStatusCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#QuoteStatusCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#QuoteStatusCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#QuoteStatusCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#QuoteStatusCollapse").text().indexOf(ui.text) == -1) {
                            $("#QuoteStatusCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#QuoteStatusCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#QuoteStatusCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#QuoteStatusCollapse").html(text);
                        }
                        else
                            $("#QuoteStatusCollapse").html('');
                    }
                    QuoteStatusNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#QuoteStatusCollapse").text().trim() != '')
                        $("#QuoteStatusCollapse").show();
                    else
                        $("#QuoteStatusCollapse").hide();


                    if ($("#QuoteStatusCollapse").find('span').length <= 2) {
                        $("#QuoteStatusCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#QuoteStatusCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Supplier', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#QuoteSupplier").empty();
            $("#QuoteSupplier").multiselect('destroy');
            $("#QuoteSupplier").multiselectfilter('destroy');

            $("#QuoteSupplier").append(s);
            $("#QuoteSupplier").multiselect
                (
                    {
                        checkAllText: Check,
                        uncheckAllText: UnCheck,
                        noneSelectedText: Supplier, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Supplier + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#QuoteSupplierCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#QuoteSupplierCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#QuoteSupplierCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#QuoteSupplierCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#QuoteSupplierCollapse").text().indexOf(ui.text) == -1) {
                            $("#QuoteSupplierCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#QuoteSupplierCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#QuoteSupplierCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#QuoteSupplierCollapse").html(text);
                        }
                        else
                            $("#QuoteSupplierCollapse").html('');
                    }
                    QuoteSupplierNarrowValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#QuoteSupplierCollapse").text().trim() != '')
                        $("#QuoteSupplierCollapse").show();
                    else
                        $("#QuoteSupplierCollapse").hide();


                    if ($("#QuoteSupplierCollapse").find('span').length <= 2) {
                        $("#QuoteSupplierCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#QuoteSupplierCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
        },
        error: function (response) {
            // through errror message
        }
    });

}

function OnlyNumeric(e, obj) {
    var code = (e.keyCode ? e.keyCode : e.which);
    if (code == 13 || code == 86) {
        return false;
    }
    else if (code > 95 && code < 106) {
    }
    else if (code > 31 && (code < 48 || code > 57)) {
        return false;
    }
}



function changeFontSize(val) {
    $('.userContent').css('font-size', '' + val + '%')
    if (oTable != null && oTable != undefined)
        oTable.fnAdjustColumnSizing();
}
$(document).ready(function () {
    // Reinitialize your dropdown or any other dynamic elements here
    $('#StockStatus').multiselect('rebuild');
});

$(document).ready(function () {

    $('#ChangeViewToLarge').live('click', function () {
        changeFontSize(120);
    });

    $('#ChangeViewToMedium').live('click', function () {
        changeFontSize(100);
    });

    $('#ChangeViewToSmall').live('click', function () {
        changeFontSize(90);
    });



    var Array = [];
    var arryignore = getIngnoreList();

    var timeoutsc112;
    $(document).ajaxStart(function (event, xhr, settings) {
        Array.push("1");



        // alert(AjaxStarted);
        //  $('#DivLoading').show();
    });
    $(document).ajaxSend(function (event, request, settings) {
        if (typeof (settings) != "undefined") {
            if (settings.url != undefined) {
                var requestURL = settings.url.toString().toLowerCase();
                if (requestURL.indexOf("loginsessionalive") < 0 && requestURL.indexOf("saveuserlistinsession") < 0 && requestURL.indexOf("userloginwithdetail") < 0 && requestURL.indexOf("getreplinshredcount") < 0 && requestURL.indexOf("getconsumeredcount") < 0) {
                    clearTimeout(timeoutsc112);
                    timeoutsc112 = setTimeout(function () {
                        //moment({ year: 2010, month: 3, day: 5, hour: 15, minute: 10, second: 3, millisecond: 123 });
                        $.cookie('lastajaxcallstarttime', moment.utc().format("YYYY-MM-DD HH:mm:ss Z"), { path: '/', SameSite:'Strict' });
                    }, 1000);
                }
            }
        }
    });

    $(document).ajaxComplete(function (event, xhr, settings) {


        //if (xhr.responseText.indexOf("iTotalRecords") > 0)
        //{
        //    $("div.tabContener").each(function () {
        //        var CurrentDiv = $(this);
        //        if($(this).css("display") != "none")
        //        {
        //            if($(CurrentDiv).find("a#actionDeSelectAll").css("display") != "none")
        //            {
        //                $(CurrentDiv).find("tbody tr").addClass("row_selected");
        //                $(CurrentDiv).find("tbody tr").not('.odd,.even').removeClass("row_selected");
        //                $(CurrentDiv).find("tbody tr").parents("tr").not('.odd,.even').removeClass("row_selected");
        //            }
        //            else
        //            {
        //                $(CurrentDiv).find("tbody tr").removeClass("row_selected");
        //            }
        //        }
        //    });
        //}
        if (Array.length == 0) {
            $('#DivLoading').hide();
        }
        else {
            Array.pop();
        }

        var xhrstringified = JSON.stringify(xhr);
        if (xhrstringified.length < 200) {
            if (xhrstringified.indexOf("eturnssessiontimeoutoccur") > 0) {

                location.href = "/Master/UserLogin"
            }
            if (xhrstringified.indexOf("accessdenied_forthisrequest_user") > 0) {
                location.href = "/Account/AccessDeniedPage"
            }
        }

        if (settings.url.toLocaleLowerCase().indexOf('loginsessionalive') > 0) {
            return;
        }

        if (window.location.href.toLowerCase().indexOf("import") < 0) {
            //$("input[type=text]").click(function () {
            $("input[type=text]:not(.udf-editable-autocomplete-dropdownbox)").off('click').on('click', function (e) {
                $(this).select();
                return false;
            });

            //$("input[type=number]").click(function () {
            $("input[type=number]").off('click').on('click',function (e) {
                $(this).select();
                return false;
            });
        }
        if (IsNarrowSearchRefreshRequired && gblActionName.toLowerCase() !== "quicklist") {
            IsNarrowSearchRefreshRequired = false;
            if (typeof RefreshNarrowSearchCommonly == 'function') {
                RefreshNarrowSearchCommonly();
            }

        }
        //        if ($("#Created") != undefined && $("#Created").length > 0 && $("#Updated") != undefined && $("#Updated").length > 0 && $("#Updated").val() != $("#Created").val()) {
        //            $(".infoBlock:first ul li:nth-child(2)").find('span:first').html(GetDateInFullFormatCustomized($("#Created")[0].value));
        //            $(".infoBlock:first ul li:nth-child(4)").find('span:first').html(GetDateInFullFormatCustomized($("#Updated")[0].value));
        //        }
        //        else if ($("#Created") != undefined && $("#Created").length > 0 && $("#LastUpdated") != undefined && $("#LastUpdated").length > 0) {

        //            if ($("#hiddenID").val() != "0") {
        //                $(".infoBlock:first ul li:nth-child(2)").find('span:first').html(GetDateInFullFormatCustomized($("#Created")[0].value));
        //                $(".infoBlock:first ul li:nth-child(4)").find('span:first').html(GetDateInFullFormatCustomized($("#LastUpdated")[0].value));
        //            }
        //        }
        //        else if ($(".infoBlock:first ul li:nth-child(2)").find('span:first').length > 0 && $(".infoBlock:first ul li:nth-child(4)").find('span:first').length > 0) {

        //            if ($("#hiddenID").val() != "0") {
        //                $(".infoBlock:first ul li:nth-child(2)").find('span:first').html(GetDateInFullFormatCustomized($(".infoBlock:first ul li:nth-child(2)").find('span:first').text()));
        //                $(".infoBlock:first ul li:nth-child(4)").find('span:first').html(GetDateInFullFormatCustomized($(".infoBlock:first ul li:nth-child(4)").find('span:first').text()));
        //            }
        //        }

        if (gblActionName.toLowerCase() == 'requisitionlist' && $("#txtRequiredDate") != undefined && $("#txtRequiredDate").length > 0) {
            $("#txtRequiredDate").val(GetDateInFullFormatCustomizedOnlyDate($("#txtRequiredDate").val()));
            if ($(".myDatePicker").length > 0) {
                $(".myDatePicker").each(function () {
                    $(this).val(GetDateInFullFormatCustomizedOnlyDate($(this).val()));
                });
            }
        }
        if (gblActionName.toLowerCase() == 'orderlist' && $("#txtRequiredDate") != undefined && $("#txtRequiredDate").length > 0) {
            //  $("#txtRequiredDate").val(GetDateInFullFormatCustomizedOnlyDate($("#txtRequiredDate").val()));
            if ($(".myDatePicker").length > 0) {
                $(".myDatePicker").each(function () {
                    $(this).val(GetDateInFullFormatCustomizedOnlyDate($(this).val()));
                });
            }
        }
        if (gblActionName.toLowerCase() == 'transferlist' && $("#txtRequiredDate") != undefined && $("#txtRequiredDate").length > 0) {
            //$("#txtRequiredDate").val(GetDateInFullFormatCustomizedOnlyDate($("#txtRequiredDate").val()));
            //if ($(".myDatePicker").length > 0) {
            //    $(".myDatePicker").each(function () {
            //        $(this).val(GetDateInFullFormatCustomizedOnlyDate($(this).val()));
            //    });
            //}
        }
    });

    $("input:checkbox[GridFilter]").off('click');
    $("input:checkbox[GridFilter]").on('click', function () {
        // in the handler, 'this' refers to the box clicked on
        var $box = $(this);
        if ($box.is(":checked")) {
            // the name of the box is retrieved using the .attr() method
            // as it is assumed and expected to be immutable
            var group = "input:checkbox[name='" + $box.attr("name") + "']";
            // the checked state of the group/box on the other hand will change
            // and the current value is retrieved using .prop() method
            $(group).prop("checked", false);
            $box.prop("checked", true);
        } else {
            $box.prop("checked", false);
        }
    });
});





function ShowHideOrderTab() {
    var $tab12 = $(".tab12");

    if ($tab12.length <= 0) {
        return false;
    }

    if (HasOrderTab == true) {
        var anSelectedRows = fnGetSelected(oTable);
        if (anSelectedRows.length == 1)
            $tab12.show();
        else
            $tab12.hide();
    }
    else {
        $tab12.hide();
    }
}

function ShowHideReturnOrderTab() {
    var $tab11 = $(".tab11");
    if ($tab11 != null && $tab11 != undefined && (gblActionName.toLowerCase() === "returnorderlist" || gblActionName.toLowerCase() === "orderlist" || gblActionName.toLowerCase() === "inventorycountlist")) {
        $tab11.hide();
        setCurrentRow();
    }

}


function ShowHideSchedulerTab() {

    var $tabSchedule = $("#tabSchedule"),
        $tabBuildBreak = $("#tabBuildBreak"),
        $tabOdometer = $("#tabOdometer"),
        $tabMaintenance = $("#tabMaintenance"),
        $tabScheduleList = $("#tabScheduleList"),
        $tabOdometerList = $("#tabOdometerList");

    if ($tabSchedule.length <= 0 &&
        $tabBuildBreak.length <= 0 &&
        $tabOdometer.length <= 0 &&
        $tabMaintenance.length <= 0 &&
        $tabScheduleList.length <= 0 &&
        $tabOdometerList.length <= 0
    ) {
        return false;
    }

    if (HasScheduleTab == true) {
        var anSelectedRows = fnGetSelected(oTable);
        if (anSelectedRows.length == 1) {
            $tabSchedule.show();
            $tabBuildBreak.show();
            $tabOdometer.show();
            $tabMaintenance.show();
            $tabScheduleList.show();
            $tabOdometerList.show();
        }
        else {
            $tabSchedule.hide();
            $tabBuildBreak.hide();
            $tabOdometer.hide();
            $tabMaintenance.hide();
            $tabScheduleList.hide();
            $tabOdometerList.hide();
        }
    }
    else {
        $tabSchedule.hide();
        $tabBuildBreak.hide();
        $tabOdometer.hide();
        $tabMaintenance.hide();
        $tabScheduleList.hide();
        $tabOdometerList.hide();
    }
}
function isDate(txtDate) {

    var currVal = GetDateInYYYYMMDDFormat(txtDate);
    if (currVal == '')
        return false;

    //Declare Regex  
    //var rxDatePattern = /^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$/;
    var rxDatePattern = /^(\d{4})(\/|-)(\d{1,2})(\/|-)(\d{1,2})$/;
    var dtArray = currVal.match(rxDatePattern); // is format OK?

    if (dtArray == null)
        return false;

    //Checks for mm/dd/yyyy format.
    dtMonth = dtArray[3];
    dtDay = dtArray[5];
    dtYear = dtArray[1];

    if (dtMonth < 1 || dtMonth > 12)
        return false;
    else if (dtDay < 1 || dtDay > 31)
        return false;
    else if ((dtMonth == 4 || dtMonth == 6 || dtMonth == 9 || dtMonth == 11) && dtDay == 31)
        return false;
    else if (dtMonth == 2) {
        var isleap = (dtYear % 4 == 0 && (dtYear % 100 != 0 || dtYear % 400 == 0));
        if (dtDay > 29 || (dtDay == 29 && !isleap))
            return false;
    }
    return true;
}

function clearNarrowSearchFilter() {

    eraseCookieforshift("selectstartindex");
    eraseCookieforshift("selectendindex");
    eraseCookieforshift("finalselectedarray");


    if (typeof ($("#ICountStatus").multiselect("getChecked").length) != undefined && $("#ICountStatus").multiselect("getChecked").length > 0) {
        $("#ICountStatus").multiselect("uncheckAll");
        $("#ICountStatusCollapse").html('');
    }
    if (typeof ($("#ICountType").multiselect("getChecked").length) != undefined && $("#ICountType").multiselect("getChecked").length > 0) {
        $("#ICountType").multiselect("uncheckAll");
        $("#ICountTypeCollapse").html('');
    }
    if (typeof ($("#UserCreated").multiselect("getChecked").length) != undefined && $("#UserCreated").multiselect("getChecked").length > 0) {
        $("#UserCreated").multiselect("uncheckAll");
        $("#UserCreatedCollapse").html('');
    }
    if (typeof ($("#MatStagLocations").multiselect("getChecked").length) != undefined && $("#MatStagLocations").multiselect("getChecked").length > 0) {
        $("#MatStagLocations").multiselect("uncheckAll");
        $("#MatStagLocationsCollapse").html('');
    }
    if (typeof ($("#UserUpdated").multiselect("getChecked").length) != undefined && $("#UserUpdated").multiselect("getChecked").length > 0) {
        $("#UserUpdated").multiselect("uncheckAll");
        $("#UserUpdatedCollapse").html('');
    }

    $("select[name='udflist']").each(function (index) {
        if (typeof ($(this).multiselect("getChecked").length) != undefined && $(this).multiselect("getChecked").length > 0) {
            var UDFUniqueID = this.getAttribute('UID');
            $(this).multiselect("uncheckAll");
            $('#' + UDFUniqueID + 'Collapse').html('');
        }
    });

    //if (typeof ($("#UserRoom").multiselect("getChecked").length) != undefined && $("#UserRoom").multiselect("getChecked").length > 0) {
    //    $("#UserRoom").multiselect("uncheckAll");
    //    $("#UserRoomCollapse").html('');
    //}
    if (typeof ($("#UserEnterprise").multiselect("getChecked").length) != undefined && $("#UserEnterprise").multiselect("getChecked").length > 0) {
        $("#UserEnterprise").multiselect("uncheckAll");
        $("#UserEnterpriseCollapse").html('');
    }
    //if (typeof ($("#UserCompany").multiselect("getChecked").length) != undefined && $("#UserCompany").multiselect("getChecked").length > 0) {
    //    $("#UserCompany").multiselect("uncheckAll");
    //    $("#UserCompanyCollapse").html('');
    //}
    //if (typeof ($("#RoleRoom").multiselect("getChecked").length) != undefined && $("#RoleRoom").multiselect("getChecked").length > 0) {
    //    $("#RoleRoom").multiselect("uncheckAll");
    //    $("#RoleRoomCollapse").html('');
    //}
    //if (typeof ($("#RoleCompany").multiselect("getChecked").length) != undefined && $("#RoleCompany").multiselect("getChecked").length > 0) {
    //    $("#RoleCompany").multiselect("uncheckAll");
    //    $("#RoleCompanyCollapse").html('');
    //}

    if (typeof ($("#RoleEnterprise").multiselect("getChecked").length) != undefined && $("#RoleEnterprise").multiselect("getChecked").length > 0) {
        $("#RoleEnterprise").multiselect("uncheckAll");
        $("#RoleEnterpriseCollapse").html('');
    }

    if (typeof ($("#UserType").multiselect("getChecked").length) != undefined && $("#UserType").multiselect("getChecked").length > 0) {
        $("#UserType").multiselect("uncheckAll");
        $("#UserTypeCollapse").html('');
    }
    if (typeof ($("#UserRole").multiselect("getChecked").length) != undefined && $("#UserRole").multiselect("getChecked").length > 0) {
        $("#UserRole").multiselect("uncheckAll");
        $("#UserRoleCollapse").html('');
    }


    // Role Master User Type
    if (typeof ($("#RoleUserType").multiselect("getChecked").length) != undefined && $("#RoleUserType").multiselect("getChecked").length > 0) {
        $("#RoleUserType").multiselect("uncheckAll");
        $("#RoleUserTypeCollapse").html('');
    }
    if (typeof ($("#PullSupplier").multiselect("getChecked").length) != undefined && $("#PullSupplier").multiselect("getChecked").length > 0) {
        $("#PullSupplier").multiselect("uncheckAll");
        $("#PullSupplierCollapse").html('');
    }

    if (typeof ($("#Manufacturer").multiselect("getChecked").length) != undefined && $("#Manufacturer").multiselect("getChecked").length > 0) {
        $("#Manufacturer").multiselect("uncheckAll");
        $("#ManufacturerCollapse").html('');
    }

    if (typeof ($("#ItemLocation").multiselect("getChecked").length) != undefined && $("#ItemLocation").multiselect("getChecked").length > 0) {
        $("#ItemLocation").multiselect("uncheckAll");
        $("#ItemLocationCollapse").html('');
    }

    if (typeof ($("#PullCategory").multiselect("getChecked").length) != undefined && $("#PullCategory").multiselect("getChecked").length > 0) {
        $("#PullCategory").multiselect("uncheckAll");
        $("#PullCategoryCollapse").html('');
    }

    if (typeof ($("#OrderStatus").multiselect("getChecked").length) != undefined && $("#OrderStatus").multiselect("getChecked").length > 0) {
        $("#OrderStatus").multiselect("uncheckAll");
        $("#OrderStatusCollapse").html('');
    }

    if (typeof ($("#OrderRequiredDate").multiselect("getChecked").length) != undefined && $("#OrderRequiredDate").multiselect("getChecked").length > 0) {
        $("#OrderRequiredDate").multiselect("uncheckAll");
    }

    if (typeof ($("#OrderSupplier").multiselect("getChecked").length) != undefined && $("#OrderSupplier").multiselect("getChecked").length > 0) {
        $("#OrderSupplier").multiselect("uncheckAll");
        $("#OrderSupplierCollapse").html('');
    }

    if (typeof ($("#ReqCustomer").multiselect("getChecked").length) != undefined && $("#ReqCustomer").multiselect("getChecked").length > 0) {
        $("#ReqCustomer").multiselect("uncheckAll");
        $("#ReqCustomerCollapse").html('');
    }

    if (typeof ($("#ReqWorkOrder").multiselect("getChecked").length) != undefined && $("#ReqWorkOrder").multiselect("getChecked").length > 0) {
        $("#ReqWorkOrder").multiselect("uncheckAll");
        $("#ReqWorkOrderCollapse").html('');
    }

    //Requisition Status
    if (typeof ($("#ddlRequisitionStatus").multiselect("getChecked").length) != undefined && $("#ddlRequisitionStatus").multiselect("getChecked").length > 0) {
        $("#ddlRequisitionStatus").multiselect("uncheckAll");
        $("#ddlRequisitionStatusCollapse").html('');
    }


    if (typeof ($("#WOCustomer").multiselect("getChecked").length) != undefined && $("#WOCustomer").multiselect("getChecked").length > 0) {
        $("#WOCustomer").multiselect("uncheckAll");
        $("#WOCustomerCollapse").html('');
    }
    if (typeof ($("#WOTechnician").multiselect("getChecked").length) != undefined && $("#WOTechnician").multiselect("getChecked").length > 0) {
        $("#WOTechnician").multiselect("uncheckAll");
        $("#WOTechnicianCollapse").html('');
    }
    if (typeof ($("#WOAsset").multiselect("getChecked").length) != undefined && $("#WOAsset").multiselect("getChecked").length > 0) {
        $("#WOAsset").multiselect("uncheckAll");
        $("#WOAssetCollapse").html('');
    }
    if (typeof ($("#WOTool").multiselect("getChecked").length) != undefined && $("#WOTool").multiselect("getChecked").length > 0) {
        $("#WOTool").multiselect("uncheckAll");
        $("#WOToolCollapse").html('');
    }
    if (typeof ($("#WOType").multiselect("getChecked").length) != undefined && $("#WOType").multiselect("getChecked").length > 0) {
        $("#WOType").multiselect("uncheckAll");
        $("#WOTypeCollapse").html('');
    }
    if (typeof ($("#WOStatus").multiselect("getChecked").length) != "undefined" && $("#WOStatus").multiselect("getChecked").length > 0) {
        $("#WOStatus").multiselect("uncheckAll");
        $("#WOStatusCollapse").html('');
    }

    //Company Enterprise
    if (typeof ($("#ddlCompanyEnterprise").multiselect("getChecked").length) != undefined && $("#ddlCompanyEnterprise").multiselect("getChecked").length > 0) {
        $("#ddlCompanyEnterprise").multiselect("uncheckAll");
        $("#ddlCompanyEnterpriseCollapse").html('');
    }

    //Billing Room Type
    if (typeof ($("#ddlBillingRoomType").multiselect("getChecked").length) != undefined && $("#ddlBillingRoomType").multiselect("getChecked").length > 0) {
        $("#ddlBillingRoomType").multiselect("uncheckAll");
        $("#ddlBillingRoomTypeCollapse").html('');
    }

    //Invoice Branch
    if (typeof ($("#ddlInvoiceBranch").multiselect("getChecked").length) != undefined && $("#ddlInvoiceBranch").multiselect("getChecked").length > 0) {
        $("#ddlInvoiceBranch").multiselect("uncheckAll");
        $("#ddlInvoiceBranchCollapse").html('');
    }

    if (typeof ($("#ddlCompanySearch").multiselect("getChecked").length) != undefined && $("#ddlCompanySearch").multiselect("getChecked").length > 0) {
        $("#ddlCompanySearch").multiselect("uncheckAll");
        $("#ddlCompanySearchCollapse").html('');
    }
    if (typeof ($("#ddlModule").multiselect("getChecked").length) != undefined && $("#ddlModule").multiselect("getChecked").length > 0) {
        $("#ddlModule").multiselect("uncheckAll");
        $("#ddlModuleSearchCollapse").html('');
    }

    if (typeof ($("#ddlBinItemCategory").multiselect("getChecked").length) != undefined && $("#ddlBinItemCategory").multiselect("getChecked").length > 0) {
        $("#ddlBinItemCategory").multiselect("uncheckAll");
        $("#ddlBinItemCategorySearchCollapse").html('');
    }
    if (typeof ($("#ddlSupplier").multiselect("getChecked").length) != undefined && $("#ddlSupplier").multiselect("getChecked").length > 0) {
        $("#ddlSupplier").multiselect("uncheckAll");
        $("#ddlSupplierSearchCollapse").html('');
    }

    if ($('#DateCFrom').val() != '') $('#DateCFrom').val('');
    if ($('#DateCTo').val() != '') $('#DateCTo').val('');
    if ($('#DateUFrom').val() != '') $('#DateUFrom').val('');
    if ($('#DateUTo').val() != '') $('#DateUTo').val('');

    if ($('#PullCost') != undefined) {
        $('#PullCost').val('0_-1');
        CostNarroSearchValue = '';
    }

    if ($('#ddlRoomStatus') != undefined) {
        $('#ddlRoomStatus').prop('selectedIndex', 0);
        RoomStatusValue = '';
    }
    if ($('#StockStatus') != undefined) {

        $('#StockStatus').val('0');
    }

    if (typeof ($("#ItemTypeNarroDDL").multiselect("getChecked").length) != undefined && $("#ItemTypeNarroDDL").multiselect("getChecked").length > 0) {
        $("#ItemTypeNarroDDL").multiselect("uncheckAll");
        $("#ItemTypeCollapse").html('');
    }

    if (typeof ($("#InventoryClassificationDDL").multiselect("getChecked").length) != undefined && $("#InventoryClassificationDDL").multiselect("getChecked").length > 0) {
        $("#InventoryClassificationDDL").multiselect("uncheckAll");
        $("#InventoryClassification").html('');
    }

    if (typeof ($("#ToolsTechnician").multiselect("getChecked").length) != undefined && $("#ToolsTechnician").multiselect("getChecked").length > 0) {
        $("#ToolsTechnician").multiselect("uncheckAll");
        $("#ToolsTechnicianCollapse").html('');
    }
    if ($('#ddlPullPOStatus') != undefined) {
        $('#ddlPullPOStatus').prop('selectedIndex', 0);
        PullPOStatusValue = '';
    }

    if ($('#ddlCompanyStatus') != undefined) {
        $('#ddlCompanyStatus').prop('selectedIndex', 0);
        CompanyStatusValue = '';
    }
    if (typeof ($("#ItemTrackingType").multiselect("getChecked").length) != undefined && $("#ItemTrackingType").multiselect("getChecked").length > 0) {
        $("#ItemTrackingType").multiselect("uncheckAll");
        $("#ItemTrackingTypeCollapse").html('');
    }
    if (typeof ($("#StockStatus").multiselect("getChecked").length) != undefined && $("#StockStatus").multiselect("getChecked").length > 0) {
        $("#StockStatus").multiselect("uncheckAll");
        $("#StockStatusCollapse").html('');
    }

    if (typeof ($("#QuoteStatus").multiselect("getChecked").length) != undefined && $("#QuoteStatus").multiselect("getChecked").length > 0) {
        $("#QuoteStatus").multiselect("uncheckAll");
        $("#QuoteStatusCollapse").html('');
    }

    if (typeof ($("#QuoteSupplier").multiselect("getChecked").length) != undefined && $("#QuoteSupplier").multiselect("getChecked").length > 0) {
        $("#QuoteSupplier").multiselect("uncheckAll");
        $("#QuoteSupplierCollapse").html('');
    }
}



function getCookie(name) {
    var arg = name + "=";
    var alen = arg.length;
    var clen = document.cookie.length;
    var i = 0;
    while (i < clen) {
        var j = i + alen;
        if (document.cookie.substring(i, j) == arg) {
            return getCookieVal(j);
        }
        i = document.cookie.indexOf(" ", i) + 1;
        if (i == 0) break;
    }
    return null;
}

function getCookieVal(offset) {
    var endstr = document.cookie.indexOf(";", offset);
    if (endstr == -1) { endstr = document.cookie.length; }
    return unescape(document.cookie.substring(offset, endstr));
}

function setCookie(name, value, days) {
    if (typeof days != "undefined") { //if set persistent cookie
        var expireDate = new Date();
        expireDate.setDate(expireDate.getDate() + days);
        document.cookie = name + "=" + value + "; path=/; expires=" + expireDate.toGMTString() + "; SameSite=Strict;";
    }
    else //else if this is a session only cookie
        document.cookie = name + "=" + value + "; path=/ ;SameSite=Strict;";
}




function rememberUDFValues(pageName, recordID) {
    var objUDFCookies = {};
    if (parseInt(recordID) == 0) {
        $("input[name='rememberlist']").each(function (index) {
            var UDFUniqueID = this.getAttribute('UID');
            var UDFType = this.getAttribute('UTYPE');
            var ID = this.getAttribute('id').toString().replace("rem_", "");
            if ($(this).is(":checked")) {
                if (UDFType == 'input') {
                    objUDFCookies[UDFUniqueID] = $('input[data-udfid="' + ID + '"]').val();//objUDFCookies[UDFUniqueID] = $('#' + UDFUniqueID).val() + "";
                }
                else if (UDFType == "select") {
                    objUDFCookies[UDFUniqueID] = $('#drp_' + ID + ' option:selected').text() + "" + "";
                }
                else {
                    objUDFCookies[UDFUniqueID] = $('input[data-udfid="' + ID + '"]').val();

                }

            }
            else {
                objUDFCookies[UDFUniqueID] = "";
            }
        });
        setCookie(pageName + '_UDFCookie', JSON.stringify(objUDFCookies), 30);
    }
}

function checkRememberUDFValues(pageName, recordID) {
    var objUDFCookies = {};
    if (parseInt(recordID) == 0) {
        objUDFCookies = JSON.parse(getCookie(pageName + '_UDFCookie'));
        $("input[name='rememberlist']").each(function (index) {
            var UDFUniqueID = this.getAttribute('UID');
            var UDFType = this.getAttribute('UTYPE');
            var ID = this.getAttribute('id').toString().replace("rem_", "");
            if (objUDFCookies != null) {
                var UDFCookieValue = objUDFCookies[UDFUniqueID];
                if (UDFCookieValue != null && UDFCookieValue != '') {
                    if (UDFType == 'input') {
                        $('input[data-udfid="' + ID + '"]').val(UDFCookieValue);//$('#' + UDFUniqueID).val(UDFCookieValue);
                    }
                    else {
                        $('#' + UDFUniqueID).val(UDFCookieValue);
                        $('[data-udfid="' + ID + '"]').val(UDFCookieValue); //$('#' + UDFUniqueID).val(UDFCookieValue);
                        //$('#drp_' + ID + ' option:eq(' + UDFCookieValue + ')').attr("selected", "selected");
                        if ($('#drp_' + ID + ' option').length > 0) {
                            $('#drp_' + ID + ' option').each(function () {
                                if ($(this).text() == UDFCookieValue) {
                                    $(this).attr('selected', 'selected');
                                }
                            });
                        }
                        else
                        {
                            $('#drp_' + ID + ' option:contains("' + UDFCookieValue + '")').attr("selected", "selected");
                        }
                    }
                    $(this).attr("checked", "checked");
                }
                else {
                    $(this).removeAttr("checked");
                }
            }
            else {
                $(this).removeAttr("checked");
            }
        });
    }
    else {
        $("input[name='rememberlist']").each(function (index) {
            $(this).attr("style", "display:none");
        });
        $("#UDFPreserveInfo").hide();
    }
}

function setDefaultUDFValues(pageName, recordID) {
    $.ajax({
        'url': '/UDF/GetUDFDataPageWiseJSON',
        data: { PageName: pageName },
        success: function (response) {
            //first set the data from UDF
            $.each(response.Response, function (i, obj) {
                //var ID = obj.UDFColumnName.toString().replace("UDF", "");
                var ID = obj.ID;
                if (obj.UDFControlType == 'Textbox')
                    $('#' + obj.UDFColumnName).val(obj.UDFDefaultValue);
                else {
                    $('#' + obj.UDFColumnName).val(obj.UDFDefaultValue);
                    $('#drp_' + ID + ' option:contains("' + obj.UDFDefaultValue + '")').attr("selected", "selected");
                }
            });
            //override the values from cookies
            checkRememberUDFValues(pageName, recordID);
        }
    });
}

function ShowHideRequisitionTab(TabID) {
    if (HasRequisitionTab) {
        LoadListData(TabID);
    }
}
function clearGlobalIfNotInFocus() {

    if ($(document.activeElement).attr('id') != 'global_filter') {
        //$("#global_filter").val('');
    }
}
function CallShowHideData() {
    var showChar = 100;
    var ellipsestext = "...";
    var moretext = "more";
    var lesstext = "less";
    $('.more').each(function () {
        var content = $(this).html();
        if (content.length > showChar) {
            var c = content.substr(0, showChar);
            var h = content.substr(showChar - 1, content.length - showChar);
            var html = c + '<span class="moreellipses">' + ellipsestext + '&nbsp;</span><span class="morecontent"><span>' + h + '</span>&nbsp;&nbsp;<a href="" class="morelink" tabindex="-1">' + moretext + '</a></span>';
            $(this).html(html);
        }
    });
    $(".morelink").click(function () {
        if ($(this).hasClass("less")) {
            $(this).removeClass("less");
            $(this).html(moretext);
            $(this).prev().find("span").css("display", "none");
        } else {
            $(this).addClass("less");
            $(this).html(lesstext);
            $(this).prev().find("span").css("display", "inline");
        }
        $(this).parent().prev().toggle();
        $(this).prev().toggle();
        return false;
    });
}
function GetNarrowHTMLForUserType() {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: 'UserMaster', TextFieldName: 'UserType', IsArchived: false, IsDeleted: false },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#UserType").empty();
            $("#UserType").multiselect('destroy');
            $("#UserType").multiselectfilter('destroy');

            $("#UserType").append(s);
            $("#UserType").multiselect
                (
                    {
                        noneSelectedText: UserTypeRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return UserTypeRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#UserTypeCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#UserTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#UserTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#UserTypeCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#UserTypeCollapse").text().indexOf(ui.text) == -1) {
                            $("#UserTypeCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#UserTypeCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#UserTypeCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#UserTypeCollapse").html(text);
                        }
                        else
                            $("#UserTypeCollapse").html('');
                    }

                    UserTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#UserTypeCollapse").text().trim() != '')
                        $("#UserTypeCollapse").show();
                    else
                        $("#UserTypeCollapse").hide();


                    if ($("#UserTypeCollapse").find('span').length <= 2) {
                        $("#UserTypeCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#UserTypeCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}
function GetNarroHTMLForItemType() {

    $("#ItemTypeNarroDDL").empty();
    $("#ItemTypeNarroDDL").multiselect('destroy');
    $("#ItemTypeNarroDDL").multiselectfilter('destroy');

    $("#ItemTypeNarroDDL").append();
    $("#ItemTypeNarroDDL").multiselect
        (
            {
                checkAllText: Check,
                uncheckAllText: UnCheck,
                noneSelectedText: ItemTypeNarrowSearch, selectedList: 5,
                selectedText: function (numChecked, numTotal, checkedItems) {
                    return ItemTypeNarrowSearch + ' ' + numChecked + ' ' + selected;
                }
            },
            {
                checkAll: function (ui) {
                    $("#ItemTypeCollapse").html('');
                    for (var i = 0; i <= ui.target.length - 1; i++) {
                        if ($("#ItemTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                            $("#ItemTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                        }
                    }
                    $("#ItemTypeCollapse").show();
                }
            }
        )
        .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
            if (ui.checked) {
                if ($("#ItemTypeCollapse").text().indexOf(ui.text) == -1) {
                    $("#ItemTypeCollapse").append("<span>" + ui.text + "</span>");
                }
            }
            else {
                if (ui.checked == undefined) {
                    $("#ItemTypeCollapse").html('');
                }
                else if (!ui.checked) {
                    var text = $("#ItemTypeCollapse").html();
                    text = text.replace("<span>" + ui.text + "</span>", '');
                    $("#ItemTypeCollapse").html(text);
                }
                else
                    $("#ItemTypeCollapse").html('');
            }

            ItemTypeNarroSearchValue = $.map($(this).multiselect("getChecked"), function (input) {
                return input.value;
            })

            _NarrowSearchSave.objSearch.ItemTypeNarroDDL = ItemTypeNarroSearchValue;

            if ($("#ItemTypeCollapse").text().trim() != '')
                $("#ItemTypeCollapse").show();
            else
                $("#ItemTypeCollapse").hide();


            if ($("#ItemTypeCollapse").find('span').length <= 2) {
                $("#ItemTypeCollapse").scrollTop(0).height(50);
            }
            else {
                $("#ItemTypeCollapse").scrollTop(0).height(100);
            }
            if (!isFromNarrowSearchClear) {
                clearGlobalIfNotInFocus();
                DoNarrowSearch();
            }
        }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });


    //$.ajax({
    //    'url': '/Master/GetNarrowDDData',
    //    data: { TableName: 'ItemMaster', TextFieldName: 'ItemType', IsArchived: false, IsDeleted: false },
    //    success: function (response) {
    //        var s = '';
    //        $("#ItemTypeCollapse").html('');
    //        if (response.DDData != null) {
    //            $.each(response.DDData, function (i, val) {
    //                if (i == "1")
    //                    s += '<option value="' + i + '"> Item (' + val + ')' + '</option>';
    //                if (i == "2" && gblActionName.toLowerCase() != "itemmasterlist")
    //                    s += '<option value="' + i + '"> Quick List (' + val + ')' + '</option>';
    //                if (i == "3")
    //                    s += '<option value="' + i + '"> Kit (' + val + ')' + '</option>';
    //                if (i == "4")
    //                    s += '<option value="' + i + '"> Labor (' + val + ')' + '</option>';
    //            });
    //        }
    //        //Destroy widgets before reapplying the filter

    //    },
    //    error: function (response) {
    //        // through errror message
    //    }
    //});

}

function GetNarroHTMLForInventoryClassification() {

    $("#InventoryClassificationDDL").empty();
    $("#InventoryClassificationDDL").multiselect('destroy');
    $("#InventoryClassificationDDL").multiselectfilter('destroy');

    $("#InventoryClassificationDDL").append();
    $("#InventoryClassificationDDL").multiselect
        (
            {
                checkAllText: Check,
                uncheckAllText: UnCheck,
                noneSelectedText: InventoryClassificationNarrowSearch, selectedList: 5,
                selectedText: function (numChecked, numTotal, checkedItems) {
                    return InventoryClassificationNarrowSearch + ' ' + numChecked + ' ' + selected;
                }
            },
            {
                checkAll: function (ui) {
                    $("#InventoryClassification").html('');
                    for (var i = 0; i <= ui.target.length - 1; i++) {
                        if ($("#InventoryClassification").text().indexOf(ui.target[i].text) == -1) {
                            $("#InventoryClassification").append("<span>" + ui.target[i].text + "</span>");
                        }
                    }
                    $("#InventoryClassification").show();
                }
            }
        )
        .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
            if (ui.checked) {
                if ($("#InventoryClassification").text().indexOf(ui.text) == -1) {
                    $("#InventoryClassification").append("<span>" + ui.text + "</span>");
                }
            }
            else {
                if (ui.checked == undefined) {
                    $("#InventoryClassification").html('');
                }
                else if (!ui.checked) {
                    var text = $("#InventoryClassification").html();
                    text = text.replace("<span>" + ui.text + "</span>", '');
                    $("#InventoryClassification").html(text);
                }
                else
                    $("#InventoryClassification").html('');
            }
            InventoryClassificationNarroSearchValue = $.map($(this).multiselect("getChecked"), function (input) {
                return input.value;
            })

            _NarrowSearchSave.objSearch.InventoryClassificationDDL = InventoryClassificationNarroSearchValue;

            if ($("#InventoryClassification").text().trim() != '')
                $("#InventoryClassification").show();
            else
                $("#InventoryClassification").hide();


            if ($("#InventoryClassification").find('span').length <= 2) {
                $("#InventoryClassification").scrollTop(0).height(50);
            }
            else {
                $("#InventoryClassification").scrollTop(0).height(100);
            }
            if (!isFromNarrowSearchClear) {
                clearGlobalIfNotInFocus();
                DoNarrowSearch();
            }
        }).multiselectfilter({ label: Filter, placeholder: Enterkeywords });
}

function GetNarroHTMLForItemType1() {
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: 'ItemMaster', TextFieldName: 'ItemType', IsArchived: false, IsDeleted: false },
        success: function (response) {
            var s = '';
            $("#ItemTypeCollapse").html('');
            if (response.DDData != null) {
                $.each(response.DDData, function (i, val) {
                    if (i == "1")
                        s += '<option value="' + i + '"> Item (' + val + ')' + '</option>';
                    if (i == "2" && gblActionName.toLowerCase() != "itemmasterlist" && gblActionName.toLowerCase() != "itemmasterpictureview")
                        s += '<option value="' + i + '"> Quick List (' + val + ')' + '</option>';
                    if (i == "3")
                        s += '<option value="' + i + '"> Kit (' + val + ')' + '</option>';
                    if (i == "4")
                        s += '<option value="' + i + '"> Labor (' + val + ')' + '</option>';
                });
            }
            //Destroy widgets before reapplying the filter
            $("#ItemTypeNarroDDL").empty();
            $("#ItemTypeNarroDDL").multiselect('destroy');
            $("#ItemTypeNarroDDL").multiselectfilter('destroy');

            $("#ItemTypeNarroDDL").append(s);
            _NarrowSearchSave.setControlValue("ItemTypeNarroDDL");
            $("#ItemTypeNarroDDL").multiselect
                (
                    {
                        noneSelectedText: ItemTypeNarrowSearch, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return ItemTypeNarrowSearch + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ItemTypeCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ItemTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ItemTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ItemTypeCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ItemTypeCollapse").text().indexOf(ui.text) == -1) {
                            $("#ItemTypeCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ItemTypeCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ItemTypeCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ItemTypeCollapse").html(text);
                        }
                        else
                            $("#ItemTypeCollapse").html('');
                    }
                    ItemTypeNarroSearchValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#ItemTypeCollapse").text().trim() != '')
                        $("#ItemTypeCollapse").show();
                    else
                        $("#ItemTypeCollapse").hide();


                    if ($("#ItemTypeCollapse").find('span').length <= 2) {
                        $("#ItemTypeCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ItemTypeCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

}


function GetNarroHTMLForBOMItemType() {


    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: 'BOMItemMaster', TextFieldName: 'ItemType', IsArchived: false, IsDeleted: false },
        success: function (response) {
            var s = '';

            if (response.DDData != null) {
                $.each(response.DDData, function (i, val) {
                    var ArrData = i.toString().split('[###]');
                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                });
            }

            //Destroy widgets before reapplying the filter
            $("#ItemTypeNarroDDL").empty();
            $("#ItemTypeNarroDDL").multiselect('destroy');
            $("#ItemTypeNarroDDL").multiselectfilter('destroy');

            $("#ItemTypeNarroDDL").append(s);
            _NarrowSearchSave.setControlValue("ItemTypeNarroDDL");
            $("#ItemTypeNarroDDL").multiselect
                (
                    {
                        noneSelectedText: ItemTypeNarrowSearch, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return ItemTypeNarrowSearch + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ItemTypeCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ItemTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ItemTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ItemTypeCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ItemTypeCollapse").text().indexOf(ui.text) == -1) {
                            $("#ItemTypeCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ItemTypeCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ItemTypeCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ItemTypeCollapse").html(text);
                        }
                        else
                            $("#ItemTypeCollapse").html('');
                    }
                    ItemTypeNarroSearchValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#ItemTypeCollapse").text().trim() != '')
                        $("#ItemTypeCollapse").show();
                    else
                        $("#ItemTypeCollapse").hide();


                    if ($("#ItemTypeCollapse").find('span').length <= 2) {
                        $("#ItemTypeCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ItemTypeCollapse").scrollTop(0).height(100);
                    }

                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: 'BOMItemMaster', TextFieldName: 'SupplierName', IsArchived: false, IsDeleted: false },
        success: function (response) {
            var s = '';

            if (response.DDData != null) {
                $.each(response.DDData, function (i, val) {
                    var ArrData = i.toString().split('[###]');
                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                });
            }

            //Destroy widgets before reapplying the filter
            $("#PullSupplier").empty();
            $("#PullSupplier").multiselect('destroy');
            $("#PullSupplier").multiselectfilter('destroy');

            $("#PullSupplier").append(s);
            $("#PullSupplier").multiselect
                (
                    {
                        noneSelectedText: Supplier, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Supplier + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullSupplierCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullSupplierCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullSupplierCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullSupplierCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullSupplierCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullSupplierCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullSupplierCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullSupplierCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullSupplierCollapse").html(text);
                        }
                        else
                            $("#PullSupplierCollapse").html('');
                    }
                    PullSupplierNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#PullSupplierCollapse").text().trim() != '')
                        $("#PullSupplierCollapse").show();
                    else
                        $("#PullSupplierCollapse").hide();


                    if ($("#PullSupplierCollapse").find('span').length <= 2) {
                        $("#PullSupplierCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullSupplierCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: 'BOMItemMaster', TextFieldName: 'Manufacturer', IsArchived: false, IsDeleted: false },
        success: function (response) {
            var s = '';

            if (response.DDData != null) {
                $.each(response.DDData, function (i, val) {
                    var ArrData = i.toString().split('[###]');
                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                });
            }

            //Destroy widgets before reapplying the filter
            $("#Manufacturer").empty();
            $("#Manufacturer").multiselect('destroy');
            $("#Manufacturer").multiselectfilter('destroy');

            $("#Manufacturer").append(s);
            $("#Manufacturer").multiselect
                (
                    {
                        noneSelectedText: Manufacturer, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Manufacturer + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ManufacturerCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ManufacturerCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ManufacturerCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ManufacturerCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ManufacturerCollapse").text().indexOf(ui.text) == -1) {
                            $("#ManufacturerCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ManufacturerCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ManufacturerCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ManufacturerCollapse").html(text);
                        }
                        else
                            $("#ManufacturerCollapse").html('');
                    }
                    ManufacturerNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#ManufacturerCollapse").text().trim() != '')
                        $("#ManufacturerCollapse").show();
                    else
                        $("#ManufacturerCollapse").hide();


                    if ($("#ManufacturerCollapse").find('span').length <= 2) {
                        $("#ManufacturerCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ManufacturerCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: 'BOMItemMaster', TextFieldName: 'Category', IsArchived: false, IsDeleted: false },
        success: function (response) {
            var s = '';

            if (response.DDData != null) {
                $.each(response.DDData, function (i, val) {
                    var ArrData = i.toString().split('[###]');
                    s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                });
            }

            //Destroy widgets before reapplying the filter
            $("#PullCategory").empty();
            $("#PullCategory").multiselect('destroy');
            $("#PullCategory").multiselectfilter('destroy');

            $("#PullCategory").append(s);
            $("#PullCategory").multiselect
                (
                    {
                        noneSelectedText: Category, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Category + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#PullCategoryCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#PullCategoryCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#PullCategoryCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#PullCategoryCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#PullCategoryCollapse").text().indexOf(ui.text) == -1) {
                            $("#PullCategoryCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#PullCategoryCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#PullCategoryCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#PullCategoryCollapse").html(text);
                        }
                        else
                            $("#PullCategoryCollapse").html('');
                    }
                    PullCategoryNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#PullCategoryCollapse").text().trim() != '')
                        $("#PullCategoryCollapse").show();
                    else
                        $("#PullCategoryCollapse").hide();


                    if ($("#PullCategoryCollapse").find('span').length <= 2) {
                        $("#PullCategoryCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#PullCategoryCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}

function onlyNumeric(event) {
    var charCode = (event.which) ? event.which : event.keyCode

    if (charCode > 31 && (charCode < 48 || charCode > 57 || charCode == 86))
        return false;

    return true;

}

function HideOtherTabs() {

    // For General 
    if (HasInsertPermission) {
        $('#tab1').find("#spnTabName").html(NewNameRes);
    }
    else if (HasOnlyViewPermission) {
        $('#tab1').find("#spnTabName").html(ViewNameRes);
    }
    TabEnableDisable("#tab1", true);
    $('#tab6').hide();
    if (HasInsertPermission == "False") {
        $('#tab1').hide();
    }
    $("#tabTM").hide();
    $("#tabTS").hide();

    // For Scheduler/Maintance Asset/Tool
    $("#tabSchedule").hide();
    $("#tabBuildBreak").hide();
    $("#tabScheduleList").hide();
    $("#tabOdometer").hide();
    $("#tabMaintenance").hide();

    // For Order 
    $("#tab11").hide();

}


function GetItemMasterBinNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'ItemNumber', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ItemNumber").empty();
            $("#ItemNumber").multiselect('destroy');
            $("#ItemNumber").multiselectfilter('destroy');

            $("#ItemNumber").append(s);
            $("#ItemNumber").multiselect
                (
                    {
                        noneSelectedText: ItemNumberNarrowSearch, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return ItemNumberNarrowSearch + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ItemNumberCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ItemNumberCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ItemNumberCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ItemNumberCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ItemNumberCollapse").text().indexOf(ui.text) == -1) {
                            $("#ItemNumberCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ItemNumberCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ItemNumberCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ItemNumberCollapse").html(text);
                        }
                        else
                            $("#ItemNumberCollapse").html('');
                    }
                    ItemNumberItemBinNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ItemNumberCollapse").text().trim() != '')
                        $("#ItemNumberCollapse").show();
                    else
                        $("#ItemNumberCollapse").hide();


                    if ($("#ItemNumberCollapse").find('span').length <= 2) {
                        $("#ItemNumberCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ItemNumberCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'BinNumber', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#BinList").empty();
            $("#BinList").multiselect('destroy');
            $("#BinList").multiselectfilter('destroy');

            $("#BinList").append(s);
            $("#BinList").multiselect
                (
                    {
                        noneSelectedText: BinNumberNarrowSearch, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return BinNumberNarrowSearch + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#BinListCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#BinListCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#BinListCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#BinListCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#BinListCollapse").text().indexOf(ui.text) == -1) {
                            $("#BinListCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#BinListCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#BinListCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#BinListCollapse").html(text);
                        }
                        else
                            $("#BinListCollapse").html('');
                    }
                    BinListItemBinNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })


                    if ($("#BinListCollapse").text().trim() != '')
                        $("#BinListCollapse").show();
                    else
                        $("#BinListCollapse").hide();


                    if ($("#BinListCollapse").find('span').length <= 2) {
                        $("#BinListCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#BinListCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}

function GetUserMasterNarrowSearchData_Old(_TableName, _IsArchived, _IsDeleted) {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'UserType', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#UserType").empty();
            $("#UserType").multiselect('destroy');
            $("#UserType").multiselectfilter('destroy');

            $("#UserType").append(s);
            $("#UserType").multiselect
                (
                    {
                        noneSelectedText: UserTypeRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return UserTypeRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#UserTypeCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#UserTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#UserTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#UserTypeCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#UserTypeCollapse").text().indexOf(ui.text) == -1) {
                            $("#UserTypeCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#UserTypeCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#UserTypeCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#UserTypeCollapse").html(text);
                        }
                        else
                            $("#UserTypeCollapse").html('');
                    }
                    UserTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#UserTypeCollapse").text().trim() != '')
                        $("#UserTypeCollapse").show();
                    else
                        $("#UserTypeCollapse").hide();


                    if ($("#UserTypeCollapse").find('span').length <= 2) {
                        $("#UserTypeCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#UserTypeCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'EnterpriseName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter

            $("#UserEnterprise").multiselect("uncheckAll");
            $("#UserEnterpriseCollapse").html('');
            $("#UserEnterpriseCollapse").hide();

            UserEnterpriseNarroValues = '';

            $("#UserEnterprise").empty();
            $("#UserEnterprise").multiselect('destroy');
            $("#UserEnterprise").multiselectfilter('destroy');

            $("#UserEnterprise").append(s);
            $("#UserEnterprise").multiselect
                (
                    {
                        noneSelectedText: EnterpriseRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return EnterpriseRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#UserEnterpriseCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#UserEnterpriseCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#UserEnterpriseCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#UserEnterpriseCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#UserEnterpriseCollapse").text().indexOf(ui.text) == -1) {
                            $("#UserEnterpriseCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#UserEnterpriseCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#UserEnterpriseCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#UserEnterpriseCollapse").html(text);
                        }
                        else
                            $("#UserEnterpriseCollapse").html('');
                    }
                    UserEnterpriseNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    BindCompanyByEnterprise(_TableName, _IsArchived, _IsDeleted, UserEnterpriseNarroValues);
                    BindRoomNameByEnterprise(_TableName, _IsArchived, _IsDeleted, UserEnterpriseNarroValues, '');

                    if ($("#UserEnterpriseCollapse").text().trim() != '')
                        $("#UserEnterpriseCollapse").show();
                    else
                        $("#UserEnterpriseCollapse").hide();


                    if ($("#UserEnterpriseCollapse").find('span').length <= 2) {
                        $("#UserEnterpriseCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#UserEnterpriseCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'CompanyName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter

            //$("#UserCompany").multiselect("uncheckAll"); // It fires uncheckAll event at other place
            $("#UserCompanyCollapse").html('');
            $("#UserCompanyCollapse").hide();
            UserCompanyNarroValues = '';

            $("#UserCompany").empty();
            $("#UserCompany").multiselect('destroy');
            $("#UserCompany").multiselectfilter('destroy');

            $("#UserCompany").append(s);
            $("#UserCompany").multiselect
                (
                    {
                        noneSelectedText: CompanyRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return CompanyRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#UserCompanyCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#UserCompanyCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#UserCompanyCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#UserCompanyCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#UserCompanyCollapse").text().indexOf(ui.text) == -1) {
                            $("#UserCompanyCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#UserCompanyCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#UserCompanyCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#UserCompanyCollapse").html(text);
                        }
                        else
                            $("#UserCompanyCollapse").html('');
                    }
                    UserCompanyNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    BindRoomNameByEnterprise(_TableName, _IsArchived, _IsDeleted, UserEnterpriseNarroValues, UserCompanyNarroValues);

                    if ($("#UserCompanyCollapse").text().trim() != '')
                        $("#UserCompanyCollapse").show();
                    else
                        $("#UserCompanyCollapse").hide();


                    if ($("#UserCompanyCollapse").find('span').length <= 2) {
                        $("#UserCompanyCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#UserCompanyCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'RoomName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter

            //$("#UserRoom").multiselect("uncheckAll"); // It fires uncheckAll event at other place
            $("#UserRoomCollapse").html('');
            $("#UserRoomCollapse").hide();
            UserRoomNarroValues = '';

            $("#UserRoom").empty();
            $("#UserRoom").multiselect('destroy');
            $("#UserRoom").multiselectfilter('destroy');

            $("#UserRoom").append(s);
            $("#UserRoom").multiselect
                (
                    {
                        noneSelectedText: RoomRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return RoomRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#UserRoomCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#UserRoomCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#UserRoomCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#UserRoomCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#UserRoomCollapse").text().indexOf(ui.text) == -1) {
                            $("#UserRoomCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#UserRoomCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#UserRoomCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#UserRoomCollapse").html(text);
                        }
                        else
                            $("#UserRoomCollapse").html('');
                    }
                    UserRoomNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#UserRoomCollapse").text().trim() != '')
                        $("#UserRoomCollapse").show();
                    else
                        $("#UserRoomCollapse").hide();


                    if ($("#UserRoomCollapse").find('span').length <= 2) {
                        $("#UserRoomCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#UserRoomCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        //alert("Event1");
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'RoleName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#UserRole").empty();
            $("#UserRole").multiselect('destroy');
            $("#UserRole").multiselectfilter('destroy');

            $("#UserRole").append(s);
            $("#UserRole").multiselect
                (
                    {
                        noneSelectedText: RoleRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return RoleRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#UserRoleCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#UserRoleCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#UserRoleCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#UserRoleCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#UserRoleCollapse").text().indexOf(ui.text) == -1) {
                            $("#UserRoleCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#UserRoleCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#UserRoleCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#UserRoleCollapse").html(text);
                        }
                        else
                            $("#UserRoleCollapse").html('');
                    }
                    UserRoleNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#UserRoleCollapse").text().trim() != '')
                        $("#UserRoleCollapse").show();
                    else
                        $("#UserRoleCollapse").hide();


                    if ($("#UserRoleCollapse").find('span').length <= 2) {
                        $("#UserRoleCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#UserRoleCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

}


function GetUserMasterNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {
    $.ajax({
        url: '/Master/GetNarrowDDData_User',
        traditional: true, // important for passing array
        data: {
            TableName: 'UserMaster',
            TextFieldNames: ['UserType', 'EnterpriseName', 'CompanyName', 'RoomName', 'RoleName', 'CreatedBy', 'LastUpdatedBy'],//
            IsArchived: _IsArchived,
            IsDeleted: _IsDeleted
        },
        success: function (response) {
            const allData = response.DDData;
            // Loop through each field (UserType, EnterpriseName, etc.)
            for (const key in allData) {
                const data = allData[key];
                let s = '';
                if (key != 'UserType') {
                    var counter = 0;
                    $.each(data, function (i, val) {
                        const ArrData = i.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')</option>';
                        counter++;
                        if (counter == parseInt(loadNarrowSearchDataCount)) {
                            return false;
                        }
                    });

                } else {

                    $.each(data, function (i, val) {
                        const ArrData = i.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')</option>';
                    });
                }
                //Destroy widgets before reapplying the filter
                if (key == "UserType") {
                    $("#UserType").empty();
                    $("#UserType").multiselect('destroy');
                    $("#UserType").multiselectfilter('destroy');

                    $("#UserType").append(s);
                    $("#UserType").multiselect
                        (
                            {
                                noneSelectedText: UserTypeRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return UserTypeRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#UserTypeCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#UserTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#UserTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#UserTypeCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                            if (ui.checked) {
                                if ($("#UserTypeCollapse").text().indexOf(ui.text) == -1) {
                                    $("#UserTypeCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#UserTypeCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#UserTypeCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#UserTypeCollapse").html(text);
                                }
                                else
                                    $("#UserTypeCollapse").html('');
                            }
                            UserTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            if ($("#UserTypeCollapse").text().trim() != '')
                                $("#UserTypeCollapse").show();
                            else
                                $("#UserTypeCollapse").hide();


                            if ($("#UserTypeCollapse").find('span').length <= 2) {
                                $("#UserTypeCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#UserTypeCollapse").scrollTop(0).height(100);
                            }
                            if (!isFromNarrowSearchClear) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();
                }
                else if (key == "EnterpriseName") {
                    $("#UserEnterprise").multiselect("uncheckAll");
                    $("#UserEnterpriseCollapse").html('');
                    $("#UserEnterpriseCollapse").hide();

                    UserEnterpriseNarroValues = '';

                    $("#UserEnterprise").empty();
                    $("#UserEnterprise").multiselect('destroy');
                    $("#UserEnterprise").multiselectfilter('destroy');

                    $("#UserEnterprise").append(s);
                    $("#UserEnterprise").multiselect
                        (
                            {
                                noneSelectedText: EnterpriseRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return EnterpriseRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#UserEnterpriseCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#UserEnterpriseCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#UserEnterpriseCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#UserEnterpriseCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                            
                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#UserEnterprise option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".alluserenterprise").hide();
                                    $(".moreuserenterprise").hide();
                                }
                                var s = '';
                                const Userenterprise = allData[key];
                                var entcounter = 0;
                                $.each(Userenterprise, function (ValData, ValCount) {
                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#UserEnterprise").empty();
                                $("select#UserEnterprise").append(s);
                                $("select#UserEnterprise").multiselect("refresh");
                                $("select#UserEnterprise").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#UserEnterprise option').length;
                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".alluserenterprise").hide();
                                    $(".moreuserenterprise").hide();
                                }
                               

                            }

                            if (ui.checked) {
                                if ($("#UserEnterpriseCollapse").text().indexOf(ui.text) == -1) {
                                    $("#UserEnterpriseCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#UserEnterpriseCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#UserEnterpriseCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#UserEnterpriseCollapse").html(text);
                                }
                                else
                                    $("#UserEnterpriseCollapse").html('');
                            }
                            UserEnterpriseNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            BindCompanyByEnterprise(_TableName, _IsArchived, _IsDeleted, UserEnterpriseNarroValues);
                            BindRoomNameByEnterprise(_TableName, _IsArchived, _IsDeleted, UserEnterpriseNarroValues, '');

                            if ($("#UserEnterpriseCollapse").text().trim() != '')
                                $("#UserEnterpriseCollapse").show();
                            else
                                $("#UserEnterpriseCollapse").hide();


                            if ($("#UserEnterpriseCollapse").find('span').length <= 2) {
                                $("#UserEnterpriseCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#UserEnterpriseCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();

                    var currentDataCount = $('select#UserEnterprise option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".alluserenterprise").hide();
                        $(".moreuserenterprise").hide();
                    }
                }
                else if (key == "CompanyName") {
                    $("#UserCompanyCollapse").html('');
                    $("#UserCompanyCollapse").hide();
                    UserCompanyNarroValues = '';

                    $("#UserCompany").empty();
                    $("#UserCompany").multiselect('destroy');
                    $("#UserCompany").multiselectfilter('destroy');

                    $("#UserCompany").append(s);
                    $("#UserCompany").multiselect
                        (
                            {
                                noneSelectedText: CompanyRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return CompanyRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#UserCompanyCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#UserCompanyCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#UserCompanyCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#UserCompanyCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {

                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#UserCompany option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".allusercompany").hide();
                                    $(".moreusercompany").hide();
                                }

                                var s = '';
                                const Usercompany = allData[key];
                                var entcounter = 0;
                                $.each(Usercompany, function (ValData, ValCount) {

                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#UserCompany").empty();
                                $("select#UserCompany").append(s);
                                $("select#UserCompany").multiselect("refresh");
                                $("select#UserCompany").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#UserCompany option').length;
                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".allusercompany").hide();
                                    $(".moreusercompany").hide();
                                }
                            }

                            if (ui.checked) {
                                if ($("#UserCompanyCollapse").text().indexOf(ui.text) == -1) {
                                    $("#UserCompanyCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#UserCompanyCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#UserCompanyCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#UserCompanyCollapse").html(text);
                                }
                                else
                                    $("#UserCompanyCollapse").html('');
                            }
                            UserCompanyNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            BindRoomNameByEnterprise(_TableName, _IsArchived, _IsDeleted, UserEnterpriseNarroValues, UserCompanyNarroValues);

                            if ($("#UserCompanyCollapse").text().trim() != '')
                                $("#UserCompanyCollapse").show();
                            else
                                $("#UserCompanyCollapse").hide();


                            if ($("#UserCompanyCollapse").find('span').length <= 2) {
                                $("#UserCompanyCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#UserCompanyCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();

                    var currentDataCount = $('select#UserCompany option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allusercompany").hide();
                        $(".moreusercompany").hide();
                    }
                }
                else if (key == "RoomName") {
                    $("#UserRoomCollapse").html('');
                    $("#UserRoomCollapse").hide();
                    UserRoomNarroValues = '';

                    $("#UserRoom").empty();
                    $("#UserRoom").multiselect('destroy');
                    $("#UserRoom").multiselectfilter('destroy');

                    $("#UserRoom").append(s);
                    $("#UserRoom").multiselect
                        (
                            {
                                noneSelectedText: RoomRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return RoomRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#UserRoomCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#UserRoomCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#UserRoomCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#UserRoomCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {

                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#UserRoom option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".alluserroom").hide();
                                    $(".moreuserroom").hide();
                                }

                                var s = '';
                                const Userrooms = allData[key];
                                var entcounter = 0;
                                $.each(Userrooms, function (ValData, ValCount) {
                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#UserRoom").empty();
                                $("select#UserRoom").append(s);
                                $("select#UserRoom").multiselect("refresh");
                                $("select#UserRoom").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#UserRoom option').length;
                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".alluserroom").hide();
                                    $(".moreuserroom").hide();
                                }
                            }

                            if (ui.checked) {
                                if ($("#UserRoomCollapse").text().indexOf(ui.text) == -1) {
                                    $("#UserRoomCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#UserRoomCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#UserRoomCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#UserRoomCollapse").html(text);
                                }
                                else
                                    $("#UserRoomCollapse").html('');
                            }
                            UserRoomNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            if ($("#UserRoomCollapse").text().trim() != '')
                                $("#UserRoomCollapse").show();
                            else
                                $("#UserRoomCollapse").hide();


                            if ($("#UserRoomCollapse").find('span').length <= 2) {
                                $("#UserRoomCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#UserRoomCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                //alert("Event1");
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();

                    var currentDataCount = $('select#UserRoom option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".alluserroom").hide();
                        $(".moreuserroom").hide();
                    }
                }
                else if (key == "RoleName") {
                    $("#UserRole").empty();
                    $("#UserRole").multiselect('destroy');
                    $("#UserRole").multiselectfilter('destroy');

                    $("#UserRole").append(s);
                    $("#UserRole").multiselect
                        (
                            {
                                noneSelectedText: RoleRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return RoleRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#UserRoleCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#UserRoleCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#UserRoleCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#UserRoleCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {

                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#UserRole option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".alluserrole").hide();
                                    $(".moreuserrole").hide();
                                }

                                var s = '';
                                const Userrooms = allData[key];
                                var entcounter = 0;
                                $.each(Userrooms, function (ValData, ValCount) {
                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#UserRole").empty();
                                $("select#UserRole").append(s);
                                $("select#UserRole").multiselect("refresh");
                                $("select#UserRole").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#UserRole option').length;
                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".alluserrole").hide();
                                    $(".moreuserrole").hide();
                                }
                            }

                            if (ui.checked) {
                                if ($("#UserRoleCollapse").text().indexOf(ui.text) == -1) {
                                    $("#UserRoleCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#UserRoleCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#UserRoleCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#UserRoleCollapse").html(text);
                                }
                                else
                                    $("#UserRoleCollapse").html('');
                            }
                            UserRoleNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            if ($("#UserRoleCollapse").text().trim() != '')
                                $("#UserRoleCollapse").show();
                            else
                                $("#UserRoleCollapse").hide();


                            if ($("#UserRoleCollapse").find('span').length <= 2) {
                                $("#UserRoleCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#UserRoleCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();

                    var currentDataCount = $('select#UserRole option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".alluserrole").hide();
                        $(".moreuserrole").hide();
                    }
                }
                else if (key == "CreatedBy") {
                  
                    $("#UserCreated").empty();
                    $("#UserCreated").multiselect('destroy');
                    $("#UserCreated").multiselectfilter('destroy');
                    $("#UserCreated").append(s);
                    $("#UserCreated").multiselect
                        (
                            {
                                noneSelectedText: UserCreatedRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return UserCreatedRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#UserCreatedCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#UserCreatedCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#UserCreatedCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#UserCreatedCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#UserCreated option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".alluserlistusercreated").hide();
                                    $(".moreuserlistusercreated").hide();
                                }

                                var s = '';
                                const Usercreatedby = allData[key];
                                var entcounter = 0;
                                $.each(Usercreatedby, function (ValData, ValCount) {
                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#UserCreated").empty();
                                $("select#UserCreated").append(s);
                                $("select#UserCreated").multiselect("refresh");
                                $("select#UserCreated").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#UserCreated option').length;
                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".alluserlistusercreated").hide();
                                    $(".moreuserlistusercreated").hide();
                                }
                            }

                            if (ui.checked) {
                                if ($("#UserCreatedCollapse").text().indexOf(ui.text) == -1) {
                                    $("#UserCreatedCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#UserCreatedCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#UserCreatedCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#UserCreatedCollapse").html(text);
                                }
                                else
                                    $("#UserCreatedCollapse").html('');
                            }
                            UserCreatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                                return input.value;
                            })

                            if ($("#UserCreatedCollapse").text().trim() != '')
                                $("#UserCreatedCollapse").show();
                            else
                                $("#UserCreatedCollapse").hide();


                            if ($("#UserCreatedCollapse").find('span').length <= 2) {
                                $("#UserCreatedCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#UserCreatedCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();

                    var currentDataCount = $('select#UserCreated option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".alluserlistusercreated").hide();
                        $(".moreuserlistusercreated").hide();
                    }
                  
                }
                else if (key == "LastUpdatedBy") {
                   
                    $("#UserUpdated").empty();
                    $("#UserUpdated").multiselect('destroy');
                    $("#UserUpdated").multiselectfilter('destroy');
                    $("#UserUpdated").append(s);
                    $("#UserUpdated").multiselect
                        (
                            {
                                noneSelectedText: UserUpdatedRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return UserUpdatedRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#UserUpdatedCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#UserUpdatedCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#UserUpdatedCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#UserUpdatedCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#UserUpdated option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".alluserlistuserupdated").hide();
                                    $(".moreuserlistuserupdated").hide();
                                }

                                var s = '';
                                const Userupdatedby = allData[key];
                                var entcounter = 0;
                                $.each(Userupdatedby, function (ValData, ValCount) {
                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#UserUpdated").empty();
                                $("select#UserUpdated").append(s);
                                $("select#UserUpdated").multiselect("refresh");
                                $("select#UserUpdated").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#UserUpdated option').length;
                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".alluserlistuserupdated").hide();
                                    $(".moreuserlistuserupdated").hide();
                                }
                            }

                            if (ui.checked) {
                                if ($("#UserUpdatedCollapse").text().indexOf(ui.text) == -1) {
                                    $("#UserUpdatedCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#UserUpdatedCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#UserUpdatedCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#UserUpdatedCollapse").html(text);
                                }
                                else
                                    $("#UserUpdatedCollapse").html('');
                            }
                            UserUpdatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                                return input.value;
                            })

                            if ($("#UserUpdatedCollapse").text().trim() != '')
                                $("#UserUpdatedCollapse").show();
                            else
                                $("#UserUpdatedCollapse").hide();


                            if ($("#UserUpdatedCollapse").find('span').length <= 2) {
                                $("#UserUpdatedCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#UserUpdatedCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();

                    var currentDataCount = $('select#UserUpdated option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".alluserlistuserupdated").hide();
                        $(".moreuserlistuserupdated").hide();
                    }
                }
            }
        },
        error: function (err) {
            // handle error
        }
    });
}

function BindCompanyByEnterprise(_TableName, _IsArchived, _IsDeleted, UserEnterpriseIds) {
    var isbindCompanyNarrowSearchForUser = false;
    $.ajax({
        'url': '/Master/GetNarrowDDData?EnterpriseIds=' + UserEnterpriseIds,
        data: { TableName: _TableName, TextFieldName: 'CompanyName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter

            //$("#UserCompany").multiselect("uncheckAll"); // It fires uncheckAll event at other place
            $("#UserCompanyCollapse").html('');
            $("#UserCompanyCollapse").hide();
            UserCompanyNarroValues = '';

            $("#UserCompany").empty();
            $("#UserCompany").multiselect('destroy');
            $("#UserCompany").multiselectfilter('destroy');
            $('#UserCompany').unbind("multiselectclick multiselectcheckall multiselectuncheckall");
            $("#UserCompany").append(s);
            $("#UserCompany").multiselect
                (
                    {
                        noneSelectedText: CompanyRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return CompanyRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#UserCompanyCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#UserCompanyCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#UserCompanyCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#UserCompanyCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#UserCompanyCollapse").text().indexOf(ui.text) == -1) {
                            $("#UserCompanyCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#UserCompanyCollapse").html('');
                        }
                        else if (!ui.checked) {
                            UserCompanyNarroValues = '';
                            isbindCompanyNarrowSearchForUser = true;
                            var text = $("#UserCompanyCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#UserCompanyCollapse").html(text);
                        }
                        else
                            $("#UserCompanyCollapse").html('');
                    }
                    UserCompanyNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        isbindCompanyNarrowSearchForUser = true;
                        return input.value;
                    })

                    BindRoomNameByEnterprise(_TableName, _IsArchived, _IsDeleted, UserEnterpriseNarroValues, UserCompanyNarroValues);

                    if ($("#UserCompanyCollapse").text().trim() != '')
                        $("#UserCompanyCollapse").show();
                    else
                        $("#UserCompanyCollapse").hide();


                    if ($("#UserCompanyCollapse").find('span').length <= 2) {
                        $("#UserCompanyCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#UserCompanyCollapse").scrollTop(0).height(100);
                    }
                    if (isbindCompanyNarrowSearchForUser == true && !isFromNarrowSearchClear) {//if (isbindCompanyNarrowSearchForUser == true && UserEnterpriseIds != '') {
                        // UserEnterpriseIds != '' will be false if no enterprise is selected and select company so below narrow search will not work
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

}

function BindRoomNameByEnterprise(_TableName, _IsArchived, _IsDeleted, UserEnterpriseIds, UserCompanyIds) {

    var isbindRoomNarrowSearchForUser = false;
    $.ajax({
        'url': '/Master/GetNarrowDDData?EnterpriseIds=' + UserEnterpriseIds + '&CompanyIds=' + UserCompanyIds,
        data: { TableName: _TableName, TextFieldName: 'RoomName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter

            //$("#UserRoom").multiselect("uncheckAll"); // It fires uncheckAll event at other place
            $("#UserRoomCollapse").html('');
            $("#UserRoomCollapse").hide();
            UserRoomNarroValues = '';

            $("#UserRoom").empty();
            $("#UserRoom").multiselect('destroy');
            $("#UserRoom").multiselectfilter('destroy');
            $('#UserRoom').unbind("multiselectclick multiselectcheckall multiselectuncheckall");
            $("#UserRoom").append(s);
            $("#UserRoom").multiselect
                (
                    {
                        noneSelectedText: RoomRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return RoomRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#UserRoomCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#UserRoomCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#UserRoomCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#UserRoomCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#UserRoomCollapse").text().indexOf(ui.text) == -1) {
                            $("#UserRoomCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#UserRoomCollapse").html('');
                        }
                        else if (!ui.checked) {
                            UserRoomNarroValues = '';
                            isbindRoomNarrowSearchForUser = true;
                            var text = $("#UserRoomCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#UserRoomCollapse").html(text);
                        }
                        else
                            $("#UserRoomCollapse").html('');
                    }
                    UserRoomNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        isbindRoomNarrowSearchForUser = true;
                        return input.value;
                    })

                    if ($("#UserRoomCollapse").text().trim() != '')
                        $("#UserRoomCollapse").show();
                    else
                        $("#UserRoomCollapse").hide();


                    if ($("#UserRoomCollapse").find('span').length <= 2) {
                        $("#UserRoomCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#UserRoomCollapse").scrollTop(0).height(100);
                    }

                    if (isbindRoomNarrowSearchForUser == true && !isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

}

function BindCompanyByEnterpriseForRole(_TableName, _IsArchived, _IsDeleted, RoleEnterpriseIds) {

    var isbindCompanyNarrowSearch = false;
    $.ajax({
        'url': '/Master/GetNarrowDDData?EnterpriseIds=' + RoleEnterpriseIds,
        data: { TableName: _TableName, TextFieldName: 'CompanyName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#RoleCompany").multiselect("uncheckAll");
            $("#RoleCompanyCollapse").html('');
            $("#RoleCompanyCollapse").hide();
            RoleCompanyNarroValues = '';

            $("#RoleCompany").empty();
            $("#RoleCompany").multiselect('destroy');
            $("#RoleCompany").multiselectfilter('destroy');
            $('#RoleCompany').unbind("multiselectclick multiselectcheckall multiselectuncheckall");
            $("#RoleCompany").append(s);
            $("#RoleCompany").multiselect
                (
                    {
                        noneSelectedText: CompanyRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return CompanyRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#RoleCompanyCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#RoleCompanyCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#RoleCompanyCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#RoleCompanyCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#RoleCompanyCollapse").text().indexOf(ui.text) == -1) {
                            $("#RoleCompanyCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#RoleCompanyCollapse").html('');
                        }
                        else if (!ui.checked) {
                            RoleCompanyNarroValues = '';
                            isbindCompanyNarrowSearch = true;
                            var text = $("#RoleCompanyCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#RoleCompanyCollapse").html(text);
                        }
                        else
                            $("#RoleCompanyCollapse").html('');
                    }
                    RoleCompanyNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        isbindCompanyNarrowSearch = true;
                        return input.value;
                    });

                    BindRoomNameByEnterpriseForRole(_TableName, _IsArchived, _IsDeleted, RoleEnterpriseNarroValues, RoleCompanyNarroValues);

                    if ($("#RoleCompanyCollapse").text().trim() != '')
                        $("#RoleCompanyCollapse").show();
                    else
                        $("#RoleCompanyCollapse").hide();


                    if ($("#RoleCompanyCollapse").find('span').length <= 2) {
                        $("#RoleCompanyCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#RoleCompanyCollapse").scrollTop(0).height(100);
                    }
                    //if (isbindCompanyNarrowSearch == true && RoleEnterpriseIds != '' && !isFromNarrowSearchClear) {
                    if (isbindCompanyNarrowSearch == true && !isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

}

function BindRoomNameByEnterpriseForRole(_TableName, _IsArchived, _IsDeleted, RoleEnterpriseIds, RoleCompanyIds) {

    var isbindRoomNarrowSearch = false;
    $.ajax({
        'url': '/Master/GetNarrowDDData?EnterpriseIds=' + RoleEnterpriseIds + '&CompanyIds=' + RoleCompanyIds,
        data: { TableName: _TableName, TextFieldName: 'RoomName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter

            $("#RoleRoom").multiselect("uncheckAll");
            $("#RoleRoomCollapse").html('');
            $("#RoleRoomCollapse").hide();
            RoleRoomNarroValues = '';

            $("#RoleRoom").empty();
            $("#RoleRoom").multiselect('destroy');
            $("#RoleRoom").multiselectfilter('destroy');
            $('#RoleRoom').unbind("multiselectclick multiselectcheckall multiselectuncheckall");
            $("#RoleRoom").append(s);
            $("#RoleRoom").multiselect
                (
                    {
                        noneSelectedText: RoomRes, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return RoomRes + ' ' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#RoleRoomCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#RoleRoomCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#RoleRoomCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#RoleRoomCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#RoleRoomCollapse").text().indexOf(ui.text) == -1) {
                            $("#RoleRoomCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#RoleRoomCollapse").html('');
                        }
                        else if (!ui.checked) {
                            RoleRoomNarroValues = '';
                            isbindRoomNarrowSearch = true;
                            var text = $("#RoleRoomCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#RoleRoomCollapse").html(text);
                        }
                        else
                            $("#RoleRoomCollapse").html('');
                    }
                    RoleRoomNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        isbindRoomNarrowSearch = true;
                        return input.value;
                    })

                    RoleRoomNarroText = '';
                    $.map($(this).multiselect("getChecked"), function (input) {
                        RoleRoomNarroText += "<span>" + input.title + "</span>";
                    })

                    if (RoleRoomNarroValues.length == 0) {
                        $("#RoleRoomCollapse").html('');
                    }
                    else if (RoleRoomNarroText.length > 0) {
                        $("#RoleRoomCollapse").html(RoleRoomNarroText);
                    }

                    if ($("#RoleRoomCollapse").text().trim() != '')
                        $("#RoleRoomCollapse").show();
                    else
                        $("#RoleRoomCollapse").hide();


                    if ($("#UserRoomCollapse").find('span').length <= 2) {
                        $("#UserRoomCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#RoleRoomCollapse").scrollTop(0).height(100);
                    }

                    if (isbindRoomNarrowSearch == true && !isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });

}

function GetBarcodeMasterNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {

    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'ModuleType', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ddlModule").empty();
            $("#ddlModule").multiselect('destroy');
            $("#ddlModule").multiselectfilter('destroy');

            $("#ddlModule").append(s);
            $("#ddlModule").multiselect
                (
                    {
                        noneSelectedText: ModuleType, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {

                            var seletedmodule = '';
                            $("select#ddlModule option:selected").each(function () {
                                seletedmodule = seletedmodule + "," + $(this).val();
                            });
                            BindItems(_TableName, _IsArchived, _IsDeleted, seletedmodule);
                            return ModuleType + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlModuleSearchCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlModuleSearchCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlModuleSearchCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlModuleSearchCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ddlModuleSearchCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlModuleSearchCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ddlModuleSearchCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlModuleSearchCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlModuleSearchCollapse").html(text);
                        }
                        else
                            $("#ddlModuleSearchCollapse").html('');
                    }
                    MouleTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ddlModuleSearchCollapse").text().trim() != '')
                        $("#ddlModuleSearchCollapse").show();
                    else
                        $("#ddlModuleSearchCollapse").hide();


                    if ($("#ddlModuleSearchCollapse").find('span').length <= 2) {
                        $("#ddlModuleSearchCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlModuleSearchCollapse").scrollTop(0).height(100);
                    }

                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'Items', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ddlItems").empty();
            $("#ddlItems").multiselect('destroy');
            $("#ddlItems").multiselectfilter('destroy');

            $("#ddlItems").append(s);
            $("#ddlItems").multiselect
                (
                    {
                        noneSelectedText: Items, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Items + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlItemsSearchCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlItemsSearchCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlItemsSearchCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlItemsSearchCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ddlItemsSearchCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlItemsSearchCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ddlItemsSearchCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlItemsSearchCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlItemsSearchCollapse").html(text);
                        }
                        else
                            $("#ddlItemsSearchCollapse").html('');
                    }
                    ItemsNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ddlItemsSearchCollapse").text().trim() != '')
                        $("#ddlItemsSearchCollapse").show();
                    else
                        $("#ddlItemsSearchCollapse").hide();


                    if ($("#ddlItemsSearchCollapse").find('span').length <= 2) {
                        $("#ddlItemsSearchCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlItemsSearchCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}
function BindItems(_TableName, _IsArchived, _IsDeleted, ModuleGuid) {
    $.ajax({
        'url': '/Master/GetModuleWiseItems',
        data: { TableName: _TableName, TextFieldName: 'Items', IsArchived: _IsArchived, IsDeleted: _IsDeleted, ModuleGuid: ModuleGuid },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ddlItems").empty();
            $("#ddlItems").multiselect('destroy');
            $("#ddlItems").multiselectfilter('destroy');

            $("#ddlItems").append(s);
            $("#ddlItems").multiselect
                (
                    {
                        noneSelectedText: Items, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return Items + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlItemsSearchCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlItemsSearchCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlItemsSearchCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlItemsSearchCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ddlItemsSearchCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlItemsSearchCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ddlItemsSearchCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlItemsSearchCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlItemsSearchCollapse").html(text);
                        }
                        else
                            $("#ddlItemsSearchCollapse").html('');
                    }
                    ItemsNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                        return input.value;
                    })

                    if ($("#ddlItemsSearchCollapse").text().trim() != '')
                        $("#ddlItemsSearchCollapse").show();
                    else
                        $("#ddlItemsSearchCollapse").hide();


                    if ($("#ddlItemsSearchCollapse").find('span').length <= 2) {
                        $("#ddlItemsSearchCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlItemsSearchCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}

function GetRoleMasterNarrowSearchData(_TableName, _IsArchived, _IsDeleted) {    
    $.ajax({
        url: '/Master/GetNarrowDDData_RoleMaster',
        traditional: true,
        data: {
            TextFieldNames: ['UserType', 'EnterpriseName', 'CompanyName', 'RoomName', 'CreatedBy', 'LastUpdatedBy']
        },
        success: function (response) {
            const allData = response.DDData;
            for (const key in allData) {
                const data = allData[key];
                var s = '';
                const totalCount = Object.keys(data).length;
                if (key != 'UserType') {
                    var counter = 0;
                    $.each(data, function (i, val) {
                        const ArrData = i.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')</option>';
                        counter++;
                        if (counter == parseInt(loadNarrowSearchDataCount)) {
                            return false;
                        }
                    });

                } else {

                    $.each(data, function (i, val) {
                        const ArrData = i.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')</option>';
                    });
                }

                if (key == 'UserType') {
                    //Destroy widgets before reapplying the filter
                    $("#RoleUserType").empty();
                    $("#RoleUserType").multiselect('destroy');
                    $("#RoleUserType").multiselectfilter('destroy');

                    $("#RoleUserType").append(s);
                    $("#RoleUserType").multiselect
                        (
                            {
                                noneSelectedText: RoleTypeRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return RoleTypeRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#RoleUserTypeCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#RoleUserTypeCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#RoleUserTypeCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#RoleUserTypeCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                            if (ui.checked) {
                                if ($("#RoleUserTypeCollapse").text().indexOf(ui.text) == -1) {
                                    $("#RoleUserTypeCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#RoleUserTypeCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#RoleUserTypeCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#RoleUserTypeCollapse").html(text);
                                }
                                else
                                    $("#RoleUserTypeCollapse").html('');
                            }
                            RoleUserTypeNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })

                            if ($("#RoleUserTypeCollapse").text().trim() != '')
                                $("#RoleUserTypeCollapse").show();
                            else
                                $("#RoleUserTypeCollapse").hide();


                            if ($("#RoleUserTypeCollapse").find('span').length <= 2) {
                                $("#RoleUserTypeCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#RoleUserTypeCollapse").scrollTop(0).height(100);
                            }
                            if (!isFromNarrowSearchClear) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();
                }
                else if (key == 'EnterpriseName') {
                    $("#RoleEnterprise").empty();
                    $("#RoleEnterprise").multiselect('destroy');
                    $("#RoleEnterprise").multiselectfilter('destroy');
                    //RoleEnterpriseNarroValues = "";
                    $("#RoleEnterprise").append(s);
                    $("#RoleEnterprise").multiselect
                        (
                            {
                                noneSelectedText: EnterpriseRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return EnterpriseRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#RoleEnterpriseCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#RoleEnterpriseCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#RoleEnterpriseCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#RoleEnterpriseCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {

                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#RoleEnterprise option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".allroleenterprise").hide();
                                    $(".moreroleenterprise").hide();
                                }
                                var s = '';
                                const RoleEnterprise = allData[key];
                                var entcounter = 0;
                                $.each(RoleEnterprise, function (ValData, ValCount) {
                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#RoleEnterprise").empty();
                                $("select#RoleEnterprise").append(s);
                                $("select#RoleEnterprise").multiselect("refresh");
                                $("select#RoleEnterprise").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#RoleEnterprise option').length;
                                if (parseInt(totalCount) <= parseInt(currentNewDataCount)) {
                                    $(".allroleenterprise").hide();
                                    $(".moreroleenterprise").hide();
                                }
                            }
                            if (ui.checked) {
                                if ($("#RoleEnterpriseCollapse").text().indexOf(ui.text) == -1) {
                                    $("#RoleEnterpriseCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#RoleEnterpriseCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#RoleEnterpriseCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#RoleEnterpriseCollapse").html(text);
                                }
                                else
                                    $("#RoleEnterpriseCollapse").html('');
                            }
                            RoleEnterpriseNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })
                            BindCompanyByEnterpriseForRole(_TableName, _IsArchived, _IsDeleted, RoleEnterpriseNarroValues);
                            BindRoomNameByEnterpriseForRole(_TableName, _IsArchived, _IsDeleted, RoleEnterpriseNarroValues, '');

                            if ($("#RoleEnterpriseCollapse").text().trim() != '')
                                $("#RoleEnterpriseCollapse").show();
                            else
                                $("#RoleEnterpriseCollapse").hide();


                            if ($("#RoleEnterpriseCollapse").find('span').length <= 2) {
                                $("#RoleEnterpriseCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#RoleEnterpriseCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();
                    var currentDataCount = $('select#RoleEnterprise option').length;
                    if (parseInt(totalCount) <= parseInt(currentDataCount)) {
                        $(".allroleenterprise").hide();
                        $(".moreroleenterprise").hide();
                    }
                }
                else if (key == 'CompanyName') {
                    $("#RoleCompany").empty();
                    $("#RoleCompany").multiselect('destroy');
                    $("#RoleCompany").multiselectfilter('destroy');

                    $("#RoleCompany").append(s);
                    $("#RoleCompany").multiselect
                        (
                            {
                                noneSelectedText: CompanyRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return CompanyRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#RoleCompanyCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#RoleCompanyCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#RoleCompanyCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#RoleCompanyCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {

                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#RoleCompany option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".allrolecompany").hide();
                                    $(".morerolecompany").hide();
                                }

                                var s = '';
                                const RoleCompany = allData[key];
                                var entcounter = 0;
                                $.each(RoleCompany, function (ValData, ValCount) {

                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#RoleCompany").empty();
                                $("select#RoleCompany").append(s);
                                $("select#RoleCompany").multiselect("refresh");
                                $("select#RoleCompany").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#RoleCompany option').length;
                                if (parseInt(totalCount) <= parseInt(currentNewDataCount)) {
                                    $(".allrolecompany").hide();
                                    $(".morerolecompany").hide();
                                }
                            }
                            if (ui.checked) {
                                if ($("#RoleCompanyCollapse").text().indexOf(ui.text) == -1) {
                                    $("#RoleCompanyCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#RoleCompanyCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#RoleCompanyCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#RoleCompanyCollapse").html(text);
                                }
                                else
                                    $("#RoleCompanyCollapse").html('');
                            }
                            RoleCompanyNarroValues = $.map($(this).multiselect("getChecked"), function (input) {

                                return input.value;
                            })
                            BindRoomNameByEnterpriseForRole(_TableName, _IsArchived, _IsDeleted, RoleEnterpriseNarroValues, RoleCompanyNarroValues);

                            if ($("#RoleCompanyCollapse").text().trim() != '')
                                $("#RoleCompanyCollapse").show();
                            else
                                $("#RoleCompanyCollapse").hide();


                            if ($("#RoleCompanyCollapse").find('span').length <= 2) {
                                $("#RoleCompanyCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#RoleCompanyCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();

                    var currentDataCount = $('select#RoleCompany option').length;
                    if (parseInt(totalCount) <= parseInt(currentDataCount)) {
                        $(".allrolecompany").hide();
                        $(".morerolecompany").hide();
                    }
                }
                else if (key == 'RoomName') {
                    $("#RoleRoom").empty();
                    $("#RoleRoom").multiselect('destroy');
                    $("#RoleRoom").multiselectfilter('destroy');

                    $("#RoleRoom").append(s);
                    $("#RoleRoom").multiselect
                        (
                            {
                                noneSelectedText: RoomRes, selectedList: 5,
                                selectedText: function (numChecked, numTotal, checkedItems) {
                                    return RoomRes + ' ' + numChecked + ' ' + selected;
                                }
                            },
                            {
                                checkAll: function (ui) {
                                    $("#RoleRoomCollapse").html('');
                                    for (var i = 0; i <= ui.target.length - 1; i++) {
                                        if ($("#RoleRoomCollapse").text().indexOf(ui.target[i].text) == -1) {
                                            $("#RoleRoomCollapse").append("<span>" + ui.target[i].text + "</span>");
                                        }
                                    }
                                    $("#RoleRoomCollapse").show();
                                }
                            }
                        )
                        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {

                            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                                var currentDataCount = $('select#RoleRoom option').length;
                                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                                    return input.value;
                                });

                                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                                if (event.type == 'multiselectloadall') {
                                    _loaddataCount = -1;
                                    $(".allroleroom").hide();
                                    $(".moreroleroom").hide();
                                }

                                var s = '';
                                const RoleRooms = allData[key];
                                var entcounter = 0;
                                $.each(RoleRooms, function (ValData, ValCount) {
                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    entcounter++;
                                    if (entcounter == _loaddataCount) {
                                        return false;
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("select#RoleRoom").empty();
                                $("select#RoleRoom").append(s);
                                $("select#RoleRoom").multiselect("refresh");
                                $("select#RoleRoom").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#RoleRoom option').length;
                                if (parseInt(totalCount) <= parseInt(currentNewDataCount)) {
                                    $(".allroleroom").hide();
                                    $(".moreroleroom").hide();
                                }
                            }
                            if (ui.checked) {
                                if ($("#RoleRoomCollapse").text().indexOf(ui.text) == -1) {
                                    $("#RoleRoomCollapse").append("<span>" + ui.text + "</span>");
                                }
                            }
                            else {
                                if (ui.checked == undefined) {
                                    $("#RoleRoomCollapse").html('');
                                }
                                else if (!ui.checked) {
                                    var text = $("#RoleRoomCollapse").html();
                                    text = text.replace("<span>" + ui.text + "</span>", '');
                                    $("#RoleRoomCollapse").html(text);
                                }
                                else
                                    $("#RoleRoomCollapse").html('');
                            }
                            RoleRoomNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                                return input.value;
                            })

                            RoleRoomNarroText = '';
                            $.map($(this).multiselect("getChecked"), function (input) {
                                RoleRoomNarroText += "<span>" + input.title + "</span>";
                            })

                            if (RoleRoomNarroValues.length == 0) {
                                $("#RoleRoomCollapse").html('');
                            }
                            else if (RoleRoomNarroText.length > 0) {
                                $("#RoleRoomCollapse").html(RoleRoomNarroText);
                            }

                            if ($("#RoleRoomCollapse").text().trim() != '')
                                $("#RoleRoomCollapse").show();
                            else
                                $("#RoleRoomCollapse").hide();


                            if ($("#RoleRoomCollapse").find('span').length <= 2) {
                                $("#RoleRoomCollapse").scrollTop(0).height(50);
                            }
                            else {
                                $("#RoleRoomCollapse").scrollTop(0).height(100);
                            }
                            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                                clearGlobalIfNotInFocus();
                                DoNarrowSearch();
                            }
                        }).multiselectfilter();

                    var currentDataCount = $('select#RoleRoom option').length;
                    if (parseInt(totalCount) <= parseInt(currentDataCount)) {
                        $(".allroleroom").hide();
                        $(".moreroleroom").hide();
                    }
                }
                else if (key == "CreatedBy") {
                    $("#UserCreated").empty();
                    $("#UserCreated").multiselect('destroy');
                    $("#UserCreated").multiselectfilter('destroy');
                    $("#UserCreated").append(s);
                    SetCommonCreatedByNarrowValues(totalCount, key, allData);
                }
                else if (key == "LastUpdatedBy") {
                    $("#UserUpdated").empty();
                    $("#UserUpdated").multiselect('destroy');
                    $("#UserUpdated").multiselectfilter('destroy');
                    $("#UserUpdated").append(s);
                    SetCommonUpdatedByNarrowValues(totalCount, key, allData);
                }
            }
        },
        error: function (response) {
            // handle error
        }
    });
}
function SetCommonCreatedByNarrowValues(totalCount, key, allData){
   
    $("#UserCreated").multiselect
        (
            {
                noneSelectedText: UserCreatedRes, selectedList: 5,
                selectedText: function (numChecked, numTotal, checkedItems) {
                    return UserCreatedRes + ' ' + numChecked + ' ' + selected;
                }
            },
            {
                checkAll: function (ui) {
                    $("#UserCreatedCollapse").html('');
                    for (var i = 0; i <= ui.target.length - 1; i++) {
                        if ($("#UserCreatedCollapse").text().indexOf(ui.target[i].text) == -1) {
                            $("#UserCreatedCollapse").append("<span>" + ui.target[i].text + "</span>");
                        }
                    }
                    $("#UserCreatedCollapse").show();
                }
            }
        )
        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                var currentDataCount = $('select#UserCreated option').length;
                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                    return input.value;
                });

                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                if (event.type == 'multiselectloadall') {
                    _loaddataCount = -1;
                    $(".alluserlistusercreated").hide();
                    $(".moreuserlistusercreated").hide();
                }

                var s = '';
                const Usercreatedby = allData[key];
                var entcounter = 0;
                $.each(Usercreatedby, function (ValData, ValCount) {
                    var ArrData = ValData.toString().split('[###]');
                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    }
                    else {
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    }
                    entcounter++;
                    if (entcounter == _loaddataCount) {
                        return false;
                    }
                });

                //Destroy widgets before reapplying the filter
                $("select#UserCreated").empty();
                $("select#UserCreated").append(s);
                $("select#UserCreated").multiselect("refresh");
                $("select#UserCreated").multiselectfilter("refresh");

                var currentNewDataCount = $('select#UserCreated option').length;
                if (parseInt(totalCount) <= parseInt(currentNewDataCount)) {
                    $(".alluserlistusercreated").hide();
                    $(".moreuserlistusercreated").hide();
                }
            }

            if (ui.checked) {
                if ($("#UserCreatedCollapse").text().indexOf(ui.text) == -1) {
                    $("#UserCreatedCollapse").append("<span>" + ui.text + "</span>");
                }
            }
            else {
                if (ui.checked == undefined) {
                    $("#UserCreatedCollapse").html('');
                }
                else if (!ui.checked) {
                    var text = $("#UserCreatedCollapse").html();
                    text = text.replace("<span>" + ui.text + "</span>", '');
                    $("#UserCreatedCollapse").html(text);
                }
                else
                    $("#UserCreatedCollapse").html('');
            }
            UserCreatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                return input.value;
            })

            if ($("#UserCreatedCollapse").text().trim() != '')
                $("#UserCreatedCollapse").show();
            else
                $("#UserCreatedCollapse").hide();


            if ($("#UserCreatedCollapse").find('span').length <= 2) {
                $("#UserCreatedCollapse").scrollTop(0).height(50);
            }
            else {
                $("#UserCreatedCollapse").scrollTop(0).height(100);
            }
            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                clearGlobalIfNotInFocus();
                DoNarrowSearch();
            }
        }).multiselectfilter();

    var currentDataCount = $('select#UserCreated option').length;
    if (parseInt(totalCount) <= parseInt(currentDataCount)) {
        $(".alluserlistusercreated").hide();
        $(".moreuserlistusercreated").hide();
    }
}
function SetCommonUpdatedByNarrowValues(totalCount, key, allData) {
    
    $("#UserUpdated").multiselect
        (
            {
                noneSelectedText: UserUpdatedRes, selectedList: 5,
                selectedText: function (numChecked, numTotal, checkedItems) {
                    return UserUpdatedRes + ' ' + numChecked + ' ' + selected;
                }
            },
            {
                checkAll: function (ui) {
                    $("#UserUpdatedCollapse").html('');
                    for (var i = 0; i <= ui.target.length - 1; i++) {
                        if ($("#UserUpdatedCollapse").text().indexOf(ui.target[i].text) == -1) {
                            $("#UserUpdatedCollapse").append("<span>" + ui.target[i].text + "</span>");
                        }
                    }
                    $("#UserUpdatedCollapse").show();
                }
            }
        )
        .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
        .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
            if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                var currentDataCount = $('select#UserUpdated option').length;
                var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                    return input.value;
                });

                var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                if (event.type == 'multiselectloadall') {
                    _loaddataCount = -1;
                    $(".alluserlistuserupdated").hide();
                    $(".moreuserlistuserupdated").hide();
                }

                var s = '';
                const Usercreatedby = allData[key];
                var entcounter = 0;
                $.each(Usercreatedby, function (ValData, ValCount) {
                    var ArrData = ValData.toString().split('[###]');
                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    }
                    else {
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    }
                    entcounter++;
                    if (entcounter == _loaddataCount) {
                        return false;
                    }
                });

                //Destroy widgets before reapplying the filter
                $("select#UserUpdated").empty();
                $("select#UserUpdated").append(s);
                $("select#UserUpdated").multiselect("refresh");
                $("select#UserUpdated").multiselectfilter("refresh");

                var currentNewDataCount = $('select#UserUpdated option').length;
                if (parseInt(totalCount) <= parseInt(currentNewDataCount)) {
                    $(".alluserlistuserupdated").hide();
                    $(".moreuserlistuserupdated").hide();
                }
            }

            if (ui.checked) {
                if ($("#UserUpdatedCollapse").text().indexOf(ui.text) == -1) {
                    $("#UserUpdatedCollapse").append("<span>" + ui.text + "</span>");
                }
            }
            else {
                if (ui.checked == undefined) {
                    $("#UserUpdatedCollapse").html('');
                }
                else if (!ui.checked) {
                    var text = $("#UserUpdatedCollapse").html();
                    text = text.replace("<span>" + ui.text + "</span>", '');
                    $("#UserUpdatedCollapse").html(text);
                }
                else
                    $("#UserUpdatedCollapse").html('');
            }
            UserUpdatedNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                return input.value;
            })

            if ($("#UserUpdatedCollapse").text().trim() != '')
                $("#UserUpdatedCollapse").show();
            else
                $("#UserUpdatedCollapse").hide();


            if ($("#UserUpdatedCollapse").find('span').length <= 2) {
                $("#UserUpdatedCollapse").scrollTop(0).height(50);
            }
            else {
                $("#UserUpdatedCollapse").scrollTop(0).height(100);
            }
            if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && (!isFromNarrowSearchClear)) {
                clearGlobalIfNotInFocus();
                DoNarrowSearch();
            }
        }).multiselectfilter();

    var currentDataCount = $('select#UserUpdated option').length;
    if (parseInt(totalCount) <= parseInt(currentDataCount)) {
        $(".alluserlistuserupdated").hide();
        $(".moreuserlistuserupdated").hide();
    }
}

function SetFixWidthForGrid(RefDataTable) {
    var MaxLength = 0;
    var nNodesRefDataTable = RefDataTable.fnGetNodes();
    for (var i = 0; i < nNodesRefDataTable.length; i++) {
        var tempSelectControls = nNodesRefDataTable[i].getElementsByTagName('select');
        for (var j = 0; j <= tempSelectControls.length - 1; j++) {
            var tempWidth = $(tempSelectControls[j]).width();
            if (tempWidth > MaxLength)
                MaxLength = tempWidth;
        }
    }
    if (MaxLength > 0) {
        if (MaxLength > 175)
            MaxLength = 335;
        for (var i = 0; i < nNodesRefDataTable.length; i++) {
            var tempSelectControls = nNodesRefDataTable[i].getElementsByTagName('select');
            for (var j = 0; j <= tempSelectControls.length - 1; j++) {
                $(nNodesRefDataTable[i]).width(MaxLength);
                $(tempSelectControls[j]).width(MaxLength);
            }
        }
        if (IsColumnResizeFistTimeForControls) {
            $(RefDataTable).dataTable().fnAdjustColumnSizing();
            IsColumnResizeFistTimeForControls = false;
        }
    }
}
function ChangeImgSRC(CG, GridImage, ChartImage) {
    if (CG == 'Grid') {
        $("#" + GridImage).attr("src", "/content/images/list-view.png");
        $("#" + ChartImage).attr("src", "/content/images/chart-view.png");
    }
    else {
        $("#" + GridImage).attr("src", "/content/images/list-view-inactive.png");
        $("#" + ChartImage).attr("src", "/content/images/chart-view-active.png");
    }
}

function compareHistoryRows(oChangeLogTable) {
    try {
        if (oChangeLogTable != undefined) {
            $('#DivLoading').show();
            var nodes = oChangeLogTable.fnGetNodes();
            var nodeLength = nodes.length;
            if (parseInt(nodeLength) > 0) {
                var i;
                for (i = nodeLength - 1; i > 0; i--) {
                    var j;
                    var cellLength = nodes[i].cells.length;
                    for (j = 0; j <= cellLength - 1; j++) {
                        var current = getNodeText(nodes[i].cells[j]);  //innerHTML
                        var next = getNodeText(nodes[i - 1].cells[j]); //innerHTML
                        if (current != next) {
                            $(nodes[i - 1].cells[j]).css({ "background-color": "#fff34d" });
                        }
                    }
                }
            }
            $('#DivLoading').hide();
        }
    }
    catch (e) {
        $('#DivLoading').hide();
    }
}
function getNodeText(elem) {
    if ((elem.textContent) && (typeof (elem.textContent) != "undefined")) {
        return elem.textContent;
    }
    else if ((elem.innerText) && (typeof (elem.innerText) != "undefined")) {
        return elem.innerText;
    } else {
        return elem.innerHTML;
    }
}

function showNotificationDialog() {
    $('div#target').css("z-index", 100000);
    $('div#target').fadeToggle();
    $("div#target").delay(DelayTime).fadeOut(FadeOutTime);
}

// added below line by Niraj , 
// for getting column name in sorting, last parameter added
function SetColumnSortingValues(OTableColumnObjects) {
    var stringSort = "";
    $($(OTableColumnObjects).get().reverse()).each(function () {
        if (this[3] != undefined) {
            if (stringSort.indexOf(this[3]) < 0) {
                stringSort += this[3] + "  " + this[1] + " ,"
            }
        }
    });
    if (stringSort != "") {
        stringSort = stringSort.substring(0, stringSort.length - 2);
        stringSort = stringSort.substring(0, stringSort.lastIndexOf(" "));
    }

    return stringSort;
}

function isNumber(evt) {
    evt = (evt) ? evt : window.event;
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
        return false;
    }
    return true;
}

function OpenBarcodeLabels(obj, moduleID) {

    $.ajax({
        url: '/LabelPrinting/CheckLabelsBeforeGenerate',
        data: { 'ModuleID': moduleID },
        dataType: 'json',
        type: "POST",
        cache: false,
        async: false,
        success: function (json) {
            if (json.Status) {
                ShowModelForBarcodePint(obj, moduleID);
            }
            else {
                ShowNotificationMessage(json.Message);
                return false;
            }
        },
        error: function (xhr) {
            ShowNotificationMessage(MsgErrorInProcess);
            return false;
        }
    });
    return false;
}

//$('#aBarcodeLabels').click(function () {
function ShowModelForBarcodePint(obj, moduleID) {

    if (moduleID > 0) {
        var hrf = $(obj).attr('href');
        var arrCols = new Array();
        var objCols = $('#myDataTable').dataTable().fnSettings().aoColumns;
        for (var i = 0; i <= objCols.length - 1; i++) {
            arrCols.push(objCols[i].mDataProp);
        }

        var sortValue = "";
        for (var i = 0; i <= $('#myDataTable').dataTable().fnSettings().aaSorting.length - 1; i++) {
            if (sortValue.length > 0)
                sortValue += ", "
            if (arrCols[$('#myDataTable').dataTable().fnSettings().aaSorting[i][0]] !== undefined && arrCols[$('#myDataTable').dataTable().fnSettings().aaSorting[i][0]] != undefined && arrCols[$('#myDataTable').dataTable().fnSettings().aaSorting[i][0]] != null)
                sortValue += arrCols[$('#myDataTable').dataTable().fnSettings().aaSorting[i][0]] + ' ' + $('#myDataTable').dataTable().fnSettings().aaSorting[i][1];
        }

        if ($.trim(sortValue).length <= 0) {
            sortValue = "ID Desc";
        }

        var anSelected = fnGetSelected($('#myDataTable').dataTable());


        var stringIDs = "";
        var stringROTDIds = "";
        var IsItemBinBarcode = false;
        if (anSelected.length > 0) {
            for (var i = 0; i < anSelected.length; i++) {

                var rowPosition = $('#myDataTable').dataTable().fnGetPosition(anSelected[i]);
                if (rowPosition == null) {
                    break;
                }
                var aData = $('#myDataTable').dataTable().fnGetData(rowPosition);

                if (moduleID == 6) {
                    var ordDetailID = $(anSelected[i]).find('#spnOrderDetailID').text();
                    stringIDs = stringIDs + ordDetailID + ",";
                } else if (moduleID == 2) {
                    stringIDs = (SelectedItemList != undefined ? SelectedItemList : "");
                }
                else {
                    stringIDs = stringIDs + aData.ID + ",";
                }

                if (moduleID == 2 && $(anSelected[i]).find('#BinID') !== undefined && $(anSelected[i]).find('#BinID').val() != null &&
                    $(anSelected[i]).find('#hdnListPageName') !== undefined && $(anSelected[i]).find('#hdnListPageName').val() == 'ItemBinMasterList') {
                    IsItemBinBarcode = true;

                    if (stringROTDIds.length > 0)
                        stringROTDIds = stringROTDIds + ',';

                    var ItemID = aData.ID;
                    var BinId = $(anSelected[i]).find('#BinID').val();
                    stringROTDIds = stringROTDIds + ItemID + '#' + BinId;
                }
            }
        } else if (moduleID == 2) {
            stringIDs = (SelectedItemList != undefined ? SelectedItemList : "");
        }

        if (moduleID == 6 && $('table[id*=ReceivedItemDetail_]').dataTable().length > 0) {
            $('table[id*=ReceivedItemDetail_]').each(function (i) {
                var anROTDSelected = fnGetSelected($(this).dataTable());
                if (anROTDSelected.length > 0) {
                    for (var i = 0; i < anROTDSelected.length; i++) {
                        var ROTDId = $(anROTDSelected[i]).find('#hdnID').val();
                        stringROTDIds = stringROTDIds + ROTDId + ",";
                    }
                }
            });
        }

        //if (stringIDs.length <= 0) {
        //    stringIDs = '0';
        //}

        if (stringIDs.length > 0 || (moduleID == 6 && stringROTDIds.length > 0)) {
            var paraCallFrom = "ItemsBarcode";
            if (moduleID == 2 && IsItemBinBarcode && stringROTDIds.length > 0) {
                var paraCallFrom = "ItemsBinsBarcode";
            }
            $('#divLabelPrintPopup').data({ "IDs": stringIDs, "ModuleID": moduleID, "SortFields": sortValue, "ROTDIds": stringROTDIds, "CallFrom": paraCallFrom }).dialog('open').on('dialogclose', function (event) {
                $("form").off(".areYouSure");
                $(window).off('beforeunload');
            });;
            return false;
        }
        else {
            ShowNotificationMessage(MsgSelectRowCommon);
            return false;
        }
    }
}





function FormatedCostQtyValues(objValue, objType) {

    // objType = 1 = Cost 2 = Qty 3 = As it is
    if (objType == 1) {
        return parseFloat(objValue).toFixed(parseInt($('#hdCurrencyDecimalDigits').val(), 10));
    }
    else if (objType == 4) {
        return parseFloat(objValue).toFixed(parseInt($('#hdTurnUsageLimit').val(), 10));
    }
    else if (objType == 5) {

        var s = '', temp,
            num = parseFloat(objValue).toFixed(parseInt($('#hdWeightPerPieceLimit').val(), 10)).toString().split('.'), n = num[0];
        while (n.length > 3) {
            temp = n.substring(n.length - 3);
            s = ',' + temp + s;
            n = n.slice(0, -3);
        }
        if (n) s = n + s;
        if (num[1]) s += '.' + num[1];
        return s;

        //  return objValue.toFixed(parseInt($('#hdCostcentsLimit').val(), 10)).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
    else if (objType == 2) {
        //alert(parseFloat(objValue).toFixed(parseInt($('#hdNumberDecimalDigits').val(), 10)));
        //return parseFloat(objValue).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10));  //.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parseFloat(objValue).toFixed(parseInt($('#hdNumberDecimalDigits').val(), 10));
    }
    else
        return objValue;
}

//var lastChecked;


//$("#myDataTable").on("tap click", "tbody tr", function (e) {

//    if (!$.isReady) {
//        // return if document dom not loaded
//        return false;
//    }

//        if (e.target.type == "checkbox" || e.target.type == "select" || e.target.type == "radio" || e.target.type == "button") {
//            e.stopPropagation();
//        } else {
//            if (IsDeleteItemPictureViewRecord)
//                $(this).parent().parent().parent().parent().parent().toggleClass('row_selected');
//            else {

//                if (!lastChecked) {
//                    lastChecked = this;
//                }



//                if (e.shiftKey) {
//                    var start = $('#myDataTable tbody tr').index(this);
//                    var end = $('#myDataTable tbody tr').index(lastChecked);

//                    for (i = Math.min(start, end); i <= Math.max(start, end); i++) {
//                        if (!$('#myDataTable tbody tr').eq(i).hasClass('row_selected')) {
//                            $('#myDataTable tbody tr').eq(i).addClass("row_selected");
//                        }
//                    }
//                    if (window.getSelection) {
//                        if (window.getSelection().empty) {  // Chrome
//                            window.getSelection().empty();
//                        } else if (window.getSelection().removeAllRanges) {  // Firefox
//                            window.getSelection().removeAllRanges();
//                        }
//                    } else if (document.selection) {  // IE?
//                        document.selection.empty();
//                    }
//                } else if ((e.metaKey || e.ctrlKey)) {
//                    $(this).toggleClass('row_selected');
//                } else {
//                    $(this).toggleClass('row_selected');
//                }

//                lastChecked = this;
//            }



//            return false;
//        }

//});



function ExportDataForDashboardByTableName(TableName, ModuleName, Exporttype, ExportDashboardFromReportFile) {

    var oTableReorder = null;
    oTableReorder = $('#' + TableName).dataTable();

    var anSelected = fnGetSelected(oTableReorder);
    var stringIDs = "";
    var ReqCount = 0;

    //Get Current Sorting info of table.
    var aa_SortingInfo = oTableReorder.fnSettings().aaSorting;
    var objCols = oTableReorder.fnSettings().aoColumns;

    var arrCols = new Array();
    for (var i = 0; i <= objCols.length - 1; i++) {
        arrCols.push(objCols[i].mDataProp);
    }

    var sortValue = "";

    if (aa_SortingInfo.length != 0) {

        for (var k = 0; k <= aa_SortingInfo.length - 1; k++) {
            if (sortValue.length > 0)
                sortValue += ", "
            sortValue += arrCols[aa_SortingInfo[k][0]] + ' ' + aa_SortingInfo[k][1];
        }
    }

    //Get Current Sorting info of table.

    var shiftselectedarray = readCookieforshift("finalselectedarray");
    if (shiftselectedarray != null) {
        stringIDs = shiftselectedarray;
    }
    if (stringIDs == "") {
        for (var i = 0; i <= anSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anSelected[i]).find('#hdnExportId').val() + ",";
        }
    }

    if (stringIDs.length > 0) {
        $('#DivLoading').show();

        if (ExportDashboardFromReportFile == true) {
            $.ajax({
                "url": '/ReportBuilder/ReportExecutionDataByType',
                "data": { ModuleName: ModuleName, Ids: stringIDs, 'ReportType': Exporttype },
                "dataType": "json",
                "type": "POST",
                "success": function (response) {
                    $('#DivLoading').hide();
                    if (response.Status) {
                        var url = window.location.protocol + '//' + window.location.host + response.ReportFileURL;
                        window.open(url, "_blank");
                    }
                    else {
                        $('#DivLoading').hide();
                        ShowNotificationMessage(response.Message);
                    }
                },
                "error": function (response) {
                    $('#DivLoading').hide();
                    ShowNotificationMessage(MsgErrorInProcess);
                    //window.open(response.ReportPDFFilePath, "_blank");

                }
            });
        }
        else {
            $.ajax({
                "url": '/Export/ExportModuleInfo',
                "data": { ExportModuleName: ModuleName, Ids: stringIDs, Type: Exporttype, SortNameString: sortValue, 'Isdeleted': null, 'TableName': '' },
                "dataType": "json",
                "type": "POST",
                "success": function (response) {
                    $('#DivLoading').hide();
                    window.open("../../Downloads/" + response, "_self");
                },
                "error": function (response) {
                    $('#DivLoading').hide();
                    window.open("../../Downloads/" + response, "_self");
                }
            });
        }

    }
    else {
        //alert(MsgSelectRecordExport);
        ShowNotificationMessage(MsgSelectRecordExport);
    }
}


function ExportDataForDashboardItemByTableName(TableName, ModuleName, Exporttype, ExportDashboardFromReportFile) {

    var vCriteria = '';
    if ($("#hdninventorystatus").length > 0) {
        vCriteria = $("#hdninventorystatus").val();
        if (vCriteria == "Minimum") {
            ModuleName = "DashboardItemMinimumList";
        }
        else if (vCriteria == "Maximum") {
            ModuleName = "DashboardItemMaximumList";
        }
        else if (vCriteria == "Critical") {
            ModuleName = "DashboardItemCriticalList";
        }
        else if (vCriteria == "Stock Out") {
            ModuleName = "DashboardItemStockOutList";
        }
    }
    var oTableReorder = null;
    oTableReorder = $('#' + TableName).dataTable();

    var anSelected = fnGetSelected(oTableReorder);
    var stringIDs = "";
    var ReqCount = 0;

    //Get Current Sorting info of table.
    var aa_SortingInfo = oTableReorder.fnSettings().aaSorting;
    var objCols = oTableReorder.fnSettings().aoColumns;

    var arrCols = new Array();
    for (var i = 0; i <= objCols.length - 1; i++) {
        arrCols.push(objCols[i].mDataProp);
    }

    var sortValue = "";

    if (aa_SortingInfo.length != 0) {

        for (var k = 0; k <= aa_SortingInfo.length - 1; k++) {
            if (sortValue.length > 0)
                sortValue += ", "
            sortValue += arrCols[aa_SortingInfo[k][0]] + ' ' + aa_SortingInfo[k][1];
        }
    }

    //Get Current Sorting info of table.

    var shiftselectedarray = readCookieforshift("finalselectedarray");
    if (shiftselectedarray != null) {
        stringIDs = shiftselectedarray;
    }
    if (stringIDs == "") {
        for (var i = 0; i <= anSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anSelected[i]).find('#hdnExportId').val() + ",";
        }
    }

    if (stringIDs.length > 0) {
        $('#DivLoading').show();
        $.ajax({
            "url": '/Export/ExportModuleInfo',
            "data": { ExportModuleName: ModuleName, Ids: stringIDs, Type: Exporttype, SortNameString: sortValue, 'Isdeleted': null, 'TableName': '' },
            "dataType": "json",
            "type": "POST",
            "success": function (response) {
                $('#DivLoading').hide();
                window.open("../../Downloads/" + response, "_self");
            },
            "error": function (response) {
                $('#DivLoading').hide();
                window.open("../../Downloads/" + response, "_self");
            }
        });
    }
    else {
        //alert(MsgSelectRecordExport);        
        ShowNotificationMessage(MsgSelectRecordExport);
    }
}

function ExportDataForDashboardMinMaxTune(TableName, ModuleName, Exporttype, ExportDashboardFromReportFile) {


    var oTableReorder = null;
    oTableReorder = $('#' + TableName).dataTable();

    var anSelected = fnGetSelected(oTableReorder);
    var stringIDs = "";
    var ReqCount = 0;

    //Get Current Sorting info of table.
    var aa_SortingInfo = oTableReorder.fnSettings().aaSorting;
    var objCols = oTableReorder.fnSettings().aoColumns;

    var arrCols = new Array();
    for (var i = 0; i <= objCols.length - 1; i++) {
        arrCols.push(objCols[i].mDataProp);
    }

    var sortValue = "";

    if (aa_SortingInfo.length != 0) {

        for (var k = 0; k <= aa_SortingInfo.length - 1; k++) {
            if (sortValue.length > 0)
                sortValue += ", "
            sortValue += arrCols[aa_SortingInfo[k][0]] + ' ' + aa_SortingInfo[k][1];
        }
    }

    //Get Current Sorting info of table.

    var shiftselectedarray = readCookieforshift("finalselectedarray");
    if (shiftselectedarray != null) {
        stringIDs = shiftselectedarray;
    }
    if (stringIDs == "") {
        for (var i = 0; i <= anSelected.length - 1; i++) {
            if ($(anSelected[i]).find('#hdnBinID') !== undefined && $(anSelected[i]).find('#hdnBinID') != null && $(anSelected[i]).find('#hdnBinID').length > 0) {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnItemGuid').val() + "~" + $(anSelected[i]).find('#hdnBinID').val() + ",";
            }
            else {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnItemGuid').val() + ",";
            }
        }
    }

    if (stringIDs.length > 0) {
        $('#DivLoading').show();
        $.ajax({
            "url": '/Export/ExportModuleInfo',
            "data": { ExportModuleName: ModuleName, Ids: stringIDs, Type: Exporttype, SortNameString: sortValue, 'Isdeleted': null, 'TableName': '' },
            "dataType": "json",
            "type": "POST",
            "success": function (response) {
                $('#DivLoading').hide();
                window.open("../../Downloads/" + response, "_self");
            },
            "error": function (response) {
                $('#DivLoading').hide();
                window.open("../../Downloads/" + response, "_self");
            }
        });
    }
    else {
        //alert(MsgSelectRecordExport);
        ShowNotificationMessage(MsgSelectRecordExport);
    }
}


function ReportExecutionDataInFile(ModuleName, FileType) {

    $('#DivLoading').show();
    var anSelected = (ModuleName != undefined && ModuleName != null && ModuleName != "" && ModuleName == "WrittenOffTools")
        ? fnGetSelected(writtenOffToolTable)
        : fnGetSelected(oTable);

    if (anSelected.length == 0
        && ModuleName != undefined && ModuleName != null && ModuleName != ""
        && (ModuleName == "Tools"
            || ModuleName == "Tools Checked Out")) {

        anSelected = fnGetSelected(oTHLTable);
    }

    var stringIDs = "";
    var ReqCount = 0;

    var shiftselectedarray = readCookieforshift("finalselectedarray");
    if (shiftselectedarray != null) {
        stringIDs = shiftselectedarray;
    }

    if (stringIDs == "") {
        for (var i = 0; i <= anSelected.length - 1; i++) {
            if (gblActionName.toLowerCase() === "workorderlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#WorkOrderGUID')[0].value + ",";
            } else if (gblActionName.toLowerCase() == "orderlist" || gblActionName.toLowerCase() == "returnorderlist") {
                //                var IsDeleteable = $(anSelected[i]).find('#spnIsableToDelete').text();
                //                if (IsDeleteable == 'true') {
                //                    var orderID = $(anSelected[i]).find('#spnOrderMasterID').text();
                //                    stringIDs = stringIDs + orderID + ",";
                //                    ReqCount = ReqCount + 1;
                //                }
                var orderID = $(anSelected[i]).find('#spnOrderMasterID').text();
                stringIDs = stringIDs + orderID + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() == "itemmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "itembinmasterview") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "itemmasterpictureview") {
                var tmpGuid = $(anSelected[i]).find("input#ItemGUID").val();
                if (typeof (tmpGuid) != "undefined" && tmpGuid != null && tmpGuid.length > 0) {
                    stringIDs = stringIDs + tmpGuid + ",";
                }
                else { break; } //When select 10 rows value of anSelected.length is 60.this is due to table structure that we have for itempictureview. So, to prevent unnecessary looping break statement is used.
            }
            else if (gblActionName.toLowerCase() == "receivelist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnOrderDetailGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "pullmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "kitmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "requisitionlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#RequisitionGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "projectlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ProjectGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "projectlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ProjectGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "inventorycountlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "cartitemlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist" && ModuleName == "WrittenOffTools") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnWOTTooGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist" || gblActionName.toLowerCase() == 'kittoollist') {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist" || ModuleName == 'Tools Checked Out') {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "kitlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnKitMasterGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "transferlist") {
                var rawData = oTable.fnGetData(anSelected[i]);
                if (rawData != null && typeof (rawData) != "undefined" && rawData.GUID != null && typeof (rawData.GUID) != "undefined"
                    && rawData.GUID.length > 0) {
                    stringIDs += rawData.GUID + ",";
                }
                //stringIDs = stringIDs + $(anSelected[i]).find('#spnTransferMasterGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "assetlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "maintenance") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnToolsMaintenanceGuid')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "quotelist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnQuoteGUID')[0].innerHTML + ",";
            }
        }
    }


    if (stringIDs.length > 0) {

        var params = { ModuleName: ModuleName, Ids: stringIDs, ReportType: FileType };

        if (ModuleName == "Tools Checked Out") {
            //var tec = ToolTechnicianValue;
            //var technicianGuids = "";
            //var lstTechnicianGuids = $('#ToolsTechnician').val();

            if (ToolTechnicianValue !== undefined && ToolTechnicianValue != null && ToolTechnicianValue != "") {
                technicianGuids = ToolTechnicianValue.join();
                params = { ModuleName: ModuleName, Ids: stringIDs, ReportType: FileType, TechnicianGuids: technicianGuids };
            }
        }

        if (ModuleName == "WorkOrder") {
            ModuleName = "Work Order";
        }
        else if (ModuleName == "KitMasterList") {
            ModuleName = "Kit";
        }
        else if (ModuleName == "TransferMasterList") {
            ModuleName = "Transfer";
        }

        $.ajax({
            url: '/ReportBuilder/ReportExecutionDataByType',
            //"data": { ModuleName: ModuleName, Ids: stringIDs, 'ReportType': FileType },
            //data: JSON.stringify(params),
            //dataType: "json",
            type: "POST",
            data: JSON.stringify(params),
            contentType: 'application/json',
            dataType: 'json',
            "success": function (response) {
                $('#DivLoading').hide();
                if (response.Status) {
                    var url = window.location.protocol + '//' + window.location.host + response.ReportFileURL;
                    window.open(url, "viewReportTab");
                }
                else {
                    $('#DivLoading').hide();
                    ShowNotificationMessage(response.Message);
                }
            },
            "error": function (response) {
                $('#DivLoading').hide();
                ShowNotificationMessage(MsgErrorInProcess);
                //window.open(response.ReportPDFFilePath, "_blank");

            }
        });

    }
    else {
        $('#DivLoading').hide();
        ShowNotificationMessage(MsgRecordToPrint);
    }
}

function ExportData(ModuleName, Exporttype) {
    var anSelected = fnGetSelected(oTable);
    var stringIDs = "";
    var stringBinIDs = "";
    var ReqCount = 0;

    //Get Current Sorting info of table.
    var aa_SortingInfo = oTable.fnSettings().aaSorting;
    var objCols = oTable.fnSettings().aoColumns;

    var arrCols = new Array();
    for (var i = 0; i <= objCols.length - 1; i++) {
        arrCols.push(objCols[i].mDataProp);
    }

    var sortValue = "";
    if (aa_SortingInfo.length != 0) {
        for (var k = 0; k <= aa_SortingInfo.length - 1; k++) {
            if (sortValue.length > 0)
                sortValue += ", "
            sortValue += arrCols[aa_SortingInfo[k][0]] + ' ' + aa_SortingInfo[k][1];
        }
    }
    //Get Current Sorting info of table.

    var shiftselectedarray = readCookieforshift("finalselectedarray");
    if (shiftselectedarray != null) {
        stringIDs = shiftselectedarray;
    }

    if (stringIDs == "") {

        for (var i = 0; i <= anSelected.length - 1; i++) {

            if (gblActionName.toLowerCase() === "quicklist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#QuickListGUID')[0].value + ",";
            } else if (gblActionName.toLowerCase() === "workorderlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#WorkOrderGUID')[0].value + ",";
            } else if (gblActionName.toLowerCase() === "toollist" || gblActionName.toLowerCase() == 'kittoollist') {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnToolPKID').text() + ",";
            } else if (gblActionName.toLowerCase() == 'requisitionlist') {
                var SpanReqStatus = $(anSelected[i]).find('#spnRequisitionStatus').text();
                if (SpanReqStatus == "Unsubmitted" || SpanReqStatus == "Submitted") {
                    //stringIDs = stringIDs + anSelected[i].id + ",";
                    stringIDs = stringIDs + $(anSelected[i]).find('#RequisitionGUID')[0].value + ",";
                    ReqCount = ReqCount + 1;
                }
            } else if (gblActionName.toLowerCase() == "orderlist") {
                //var IsDeleteable = $(anSelected[i]).find('#spnIsableToDelete').text();
                //if (IsDeleteable == 'true') {
                var orderID = $(anSelected[i]).find('#spnOrderMasterID').text();
                stringIDs = stringIDs + orderID + ",";
                ReqCount = ReqCount + 1;
                //}
            } else if (gblActionName.toLowerCase() == "transferlist") {
                var rawData = oTable.fnGetData(anSelected[i]);
                if (rawData != null && typeof (rawData) != "undefined" && rawData.IsAbleToDelete && rawData.GUID != null && typeof (rawData.GUID) != "undefined"
                    && rawData.GUID.length > 0) {
                    stringIDs += rawData.GUID + ",";
                    ReqCount = ReqCount + 1;
                }
            } else if (gblActionName.toLowerCase() == "materialstaginglist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID').val() + ",";
                ReqCount = ReqCount + 1;
            } else if (gblActionName.toLowerCase() == "cartitemlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID').val() + ",";
                ReqCount = ReqCount + 1;
            } else if (gblActionName.toLowerCase() == "rolelist") {
                stringIDs = stringIDs + $(anSelected[i]).find("input[name='hdnConcatedId']").val() + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() === "enterpriseqllist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGuid')[0].value + ",";
            }
            else if (deleteURL.toLowerCase() == "/inventory/deletematerialstagingrecords") {
                stringIDs = stringIDs + $(anSelected[i]).find("input[type='hidden'][name='hdnUniqueID']").val() +
                    ",";
            } else if (deleteURL.toLowerCase() == "/pull/deletepullmasterrecords") {
                var aPos = oTable.fnGetPosition($(anSelected[i])[0]);
                var aData = oTable.fnGetData(aPos);
                if (!(!isNaN(parseFloat(aData.ConsignedQuantity)) && parseFloat(aData.ConsignedQuantity) > 0 &&
                    aData.Billing == 'Yes')) {
                    stringIDs = stringIDs + $(anSelected[i]).find('#spnPullMasterID').text() + ",";
                    ReqCount = ReqCount + 1;
                }
            } else if (deleteURL.toLowerCase() == "/inventory/deleterecords") {
                if (gblActionName.toLowerCase() == "itemmasterpictureview") {
                    var tmpGuid = $(anSelected[i]).find("input#ItemGUID").val();
                    if (typeof (tmpGuid) != "undefined" && tmpGuid != null && tmpGuid.length > 0) {
                        stringIDs = stringIDs + tmpGuid + ",";
                    }
                    else { break; } //When select 10 rows value of anSelected.length is 60.this is due to table structure that we have for itempictureview. So, to prevent unnecessary looping break statement is used.
                }
                else {
                    stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
                    if (gblActionName.toLowerCase() == 'itembinmasterview') {
                        stringBinIDs = stringBinIDs + $(anSelected[i]).find('#BinID')[0].value + ",";
                    }
                }
            } else if (deleteURL.toLowerCase() == "/bom/deleterecords") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            } else if (gblActionName.toLowerCase() == "inventoryclassificationlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#RangeStartvalue').text() + ",";
            } else if (gblActionName.toLowerCase() === "kitlist") {

                stringIDs = stringIDs + $(anSelected[i]).find('#spnKitMasterGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "workorder") {
                stringIDs = stringIDs + $(anSelected[i]).find('#WorkOrderGUID').val() + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() === "itemmasterbinlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#BinGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() === "inventorycountlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() === "requisitionmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#RequisitionGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() === "maintenance") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() === "sftplist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnID')[0].value + ",";
            }
            //else if (gblActionName.toLowerCase() === "roomlist") {
            //    stringIDs = stringIDs + $(anSelected[i]).find('#hdnguid')[0].value + ",";
            //}
            else {
                stringIDs = stringIDs + anSelected[i].id + ",";
            }

        }
        if (gblActionName.toLowerCase() === "notifications" && ModuleName.toLowerCase() === "notificationmasterlistchangelog") {
            stringIDs = stringIDs + oTable.fnSettings().aoData[0]._aData.ID + ",";
        }
    }

    if (stringIDs.length > 0) {
        $.ajax({
            "url": '/Export/ExportModuleInfo',
            "data": { ExportModuleName: ModuleName, Ids: stringIDs, Type: Exporttype, SortNameString: sortValue, 'Isdeleted': null, 'TableName': '', 'BinIds': stringBinIDs },
            "dataType": "json",
            "type": "POST",
            "success": function (response) {
                if (response.rStatus == "Fail") {

                    ShowNotificationMessage(response.rMessage);
                }
                else
                    window.open("../../Downloads/" + response, "_self");

            },
            "error": function (response) {

                window.open("../../Downloads/" + response, "_self");

            }
        });
    }
    else {
        ShowNotificationMessage(MsgSelectRecordExport);
    }
}
function ExportUDFData(ModuleName, Exporttype, IsDeleted, TableName) {

    $.ajax({
        "url": '/Export/ExportModuleInfo',
        "data": { ExportModuleName: ModuleName, Ids: '', Type: Exporttype, SortNameString: '', 'IsDeleted': IsDeleted, 'TableName': TableName },
        "dataType": "json",
        "type": "POST",
        "success": function (response) {
            window.open("../../Downloads/" + response, "_self");
        },
        "error": function (response) {
            window.open("../../Downloads/" + response, "_self");
        }
    });

}
function ExportAllData(ModuleName, Exporttype, _CallFromPage) {

    $.ajax({
        "url": '/Export/ExportModuleInfo',
        "data": { ExportModuleName: ModuleName, Ids: '', Type: Exporttype, SortNameString: '', 'Isdeleted': null, 'TableName': '', CallFromPage: _CallFromPage },
        "dataType": "json",
        "type": "POST",
        "success": function (response) {

            window.open("../../Downloads/" + response, "_self");
            $('#btnAllRecordDownload').removeAttr("disabled");
            $('#DivLoading').hide();

        },
        "error": function (response) {

            window.open("../../Downloads/" + response, "_self");
            $('#btnAllRecordDownload').removeAttr("disabled");
            $('#DivLoading').hide();

        }
    });

}
function SendReportInMail(ModuleName) {
    $("body").addClass('DTTT_Print');

    var PageName = ModuleName;
    $("#divSendReportInEmailPopUp").dialog({
        autoOpen: true,
        modal: true,
        position: { my: "center", at: "top+1050", of: window },
        width: 1000,
        height: 500,
        title: SendReportInEmail,
        draggable: true,
        resizable: false,
        open: function () {
            $("#SendReportInEmailID").sortable({ axis: "y", containment: "parent" });

        },
        close: function () {

            $("body").removeClass('DTTT_Print');
            $($("#divSendReportInEmailPopUp").find($("#sendEmailTo"))).val("");
            $($("#divSendReportInEmailPopUp").find($("#sendEmailCC"))).val("");
            $($("#divSendReportInEmailPopUp").find($("#sendEmailSubject"))).val("");
            $("#chkPdf").prop("checked", true);
            $("#chkExcel").prop("checked", false);
            $($("#divSendReportInEmailPopUp").find($("#sendEmailBody"))).val("");
        },
        buttons: [{
            text: BtnSendEmail,
            click: function () {
                if ($("#sendEmailTo").val().trim() == "") {
                    ShowNotificationMessage(ReqToEmailAddress);
                    return false;
                }
                else {
                    var toManyAddress = $("#sendEmailTo").val().split(",");
                    var res = true;
                    for (var i = 0; i < toManyAddress.length; i++) {
                        if (toManyAddress[i] != '') {
                            if (!isValidEmailAddress(toManyAddress[i])) {
                                ShowNotificationMessage(ReqValidToEmailAddress);
                                return false;
                            }
                        }
                    }
                }
                if ($("#sendEmailCC").val().trim() != "") {
                    var toManyAddress = $("#sendEmailCC").val().split(",");
                    var res = true;
                    for (var i = 0; i < toManyAddress.length; i++) {
                        if (toManyAddress[i] != '') {
                            if (!isValidEmailAddress(toManyAddress[i])) {
                                ShowNotificationMessage(MsgEnterValidCCEmail);
                                return false;
                            }
                        }
                    }
                }
                if ($("#sendEmailSubject").val().trim() == "") {
                    ShowNotificationMessage(ReqSubject);
                    return false;
                }
                if ($("#sendEmailBody").val().trim() == "") {
                    ShowNotificationMessage(ReqBody);
                    return false;
                }
                var PDfUrl = "";
                var ExcelUrl = "";
                if ($('#chkExcel').attr('checked') && $('#chkPdf').attr('checked')) {
                    PDfUrl = ReportExecutionDataInMail(PageName, 'PDF');
                    ExcelUrl = ReportExecutionDataInMail(PageName, 'Excel');
                    SendReportMail(PDfUrl, ExcelUrl, $('#sendEmailTo').val(), $('#sendEmailCC').val(), $('#sendEmailSubject').val(), $('#sendEmailBody').val())
                }
                else if ($('#chkExcel').attr('checked')) {
                    ExcelUrl = ReportExecutionDataInMail(PageName, 'Excel');
                    SendReportMail("", ExcelUrl, $('#sendEmailTo').val(), $('#sendEmailCC').val(), $('#sendEmailSubject').val(), $('#sendEmailBody').val())
                }
                else {
                    PDfUrl = ReportExecutionDataInMail(PageName, 'PDF');
                    SendReportMail(PDfUrl, "", $('#sendEmailTo').val(), $('#sendEmailCC').val(), $('#sendEmailSubject').val(), $('#sendEmailBody').val())
                }
                $(':input', '#divSendReportInEmailPopUp')
                    .not(':button, :submit, :reset, :hidden')
                    .val('')
                    .removeAttr('checked')
                    .removeAttr('selected');

                $("body").removeClass('DTTT_Print');
                $("#divSendReportInEmailPopUp").dialog("close");
            },
        },
        {
            text: BtnCancel,
            click: function () {
                $("body").removeClass('DTTT_Print');
                $(':input', '#divSendReportInEmailPopUp')
                    .not(':button, :submit, :reset, :hidden')
                    .val('')
                    .removeAttr('checked')
                    .removeAttr('selected');
                //$("#divSendReportInEmailPopUp").dialog("close");
                //$('#btnSendReports').off('click');
                //$('#btnCancleEmail').off('click');
                $(this).dialog("close");
            },
        }],

        //buttons: {
        //    BtnSendEmail : function () {
        //        if ($("#sendEmailTo").val().trim() == "") {
        //            ShowNotificationMessage(ReqToEmailAddress);
        //            return false;
        //        }
        //        else {
        //            var toManyAddress = $("#sendEmailTo").val().split(",");
        //            var res = true;
        //            for (var i = 0; i < toManyAddress.length; i++) {
        //                if (toManyAddress[i] != '') {
        //                    if (!isValidEmailAddress(toManyAddress[i])) {
        //                        ShowNotificationMessage(ReqValidToEmailAddress);
        //                        return false;
        //                    }
        //                }
        //            }
        //        }
        //        if ($("#sendEmailCC").val().trim() != "") {
        //            var toManyAddress = $("#sendEmailCC").val().split(",");
        //            var res = true;
        //            for (var i = 0; i < toManyAddress.length; i++) {
        //                if (toManyAddress[i] != '') {
        //                    if (!isValidEmailAddress(toManyAddress[i])) {
        //                        ShowNotificationMessage(MsgEnterValidCCEmail);
        //                        return false;
        //                    }
        //                }
        //            }
        //        }
        //        if ($("#sendEmailSubject").val().trim() == "") {
        //            ShowNotificationMessage(ReqSubject);
        //            return false;
        //        }
        //        if ($("#sendEmailBody").val().trim() == "") {
        //            ShowNotificationMessage(ReqBody);
        //            return false;
        //        }
        //        var PDfUrl = "";
        //        var ExcelUrl = "";
        //        if ($('#chkExcel').attr('checked') && $('#chkPdf').attr('checked')) {
        //            PDfUrl = ReportExecutionDataInMail(PageName, 'PDF');
        //            ExcelUrl = ReportExecutionDataInMail(PageName, 'Excel');
        //            SendReportMail(PDfUrl, ExcelUrl, $('#sendEmailTo').val(), $('#sendEmailCC').val(), $('#sendEmailSubject').val(), $('#sendEmailBody').val())
        //        }
        //        else if ($('#chkExcel').attr('checked')) {
        //            ExcelUrl = ReportExecutionDataInMail(PageName, 'Excel');
        //            SendReportMail("", ExcelUrl, $('#sendEmailTo').val(), $('#sendEmailCC').val(), $('#sendEmailSubject').val(), $('#sendEmailBody').val())
        //        }
        //        else {
        //            PDfUrl = ReportExecutionDataInMail(PageName, 'PDF');
        //            SendReportMail(PDfUrl, "", $('#sendEmailTo').val(), $('#sendEmailCC').val(), $('#sendEmailSubject').val(), $('#sendEmailBody').val())
        //        }
        //        $(':input', '#divSendReportInEmailPopUp')
        //            .not(':button, :submit, :reset, :hidden')
        //            .val('')
        //            .removeAttr('checked')
        //            .removeAttr('selected');

        //        $("body").removeClass('DTTT_Print');
        //        $("#divSendReportInEmailPopUp").dialog("close");
        //    },
        //    BtnCancel: function () {
        //        $("body").removeClass('DTTT_Print');
        //        $(':input', '#divSendReportInEmailPopUp')
        //            .not(':button, :submit, :reset, :hidden')
        //            .val('')
        //            .removeAttr('checked')
        //            .removeAttr('selected');
        //        //$("#divSendReportInEmailPopUp").dialog("close");
        //        //$('#btnSendReports').off('click');
        //        //$('#btnCancleEmail').off('click');
        //        $(this).dialog("close");
        //    }
        //}
    });
    $("#sendEmailBody").val('');
    $("#chkPdf").prop("checked", true);
    $('#btnSendReports').click(function () {
        if ($("#sendEmailTo").val().trim() == "") {
            ShowNotificationMessage(ReqToEmailAddress);
            return false;
        }
        else {
            var toManyAddress = $("#sendEmailTo").val().split(",");
            var res = true;
            for (var i = 0; i < toManyAddress.length; i++) {
                if (toManyAddress[i] != '') {
                    if (!isValidEmailAddress(toManyAddress[i])) {
                        ShowNotificationMessage(ReqToEmailAddress);
                        return false;
                    }
                }
            }
        }
        if ($("#sendEmailCC").val().trim() != "") {
            var toManyAddress = $("#sendEmailCC").val().split(",");
            var res = true;
            for (var i = 0; i < toManyAddress.length; i++) {
                if (toManyAddress[i] != '') {
                    if (!isValidEmailAddress(toManyAddress[i])) {
                        ShowNotificationMessage(MsgEnterValidCCEmail);
                        return false;
                    }
                }
            }
        }
        if ($("#sendEmailSubject").val().trim() == "") {
            ShowNotificationMessage(ReqSubject);
            return false;
        }
        if ($("#sendEmailBody").val().trim() == "") {
            ShowNotificationMessage(ReqBody);
            return false;
        }
        var PDfUrl = "";
        var ExcelUrl = "";
        if ($('#chkExcel').attr('checked') && $('#chkPdf').attr('checked'))
        {
            PDfUrl= ReportExecutionDataInMail(PageName, 'PDF');
            ExcelUrl= ReportExecutionDataInMail(PageName, 'Excel');
            SendReportMail(PDfUrl, ExcelUrl, $('#sendEmailTo').val(), $('#sendEmailCC').val(), $('#sendEmailSubject').val(), $('#sendEmailBody').val())
        }
        else if ($('#chkExcel').attr('checked'))
        {
            ExcelUrl=  ReportExecutionDataInMail(PageName, 'Excel');
            SendReportMail("", ExcelUrl, $('#sendEmailTo').val(), $('#sendEmailCC').val(), $('#sendEmailSubject').val(), $('#sendEmailBody').val())
        }
        else {
            PDfUrl= ReportExecutionDataInMail(PageName, 'PDF');
            SendReportMail(PDfUrl, "", $('#sendEmailTo').val(), $('#sendEmailCC').val(), $('#sendEmailSubject').val(), $('#sendEmailBody').val())
        }
        $(':input', '#divSendReportInEmailPopUp')
            .not(':button, :submit, :reset, :hidden')
            .val('')
            .removeAttr('checked')
            .removeAttr('selected');

        $('#btnSendReports').off('click');
        $('#btnCancleEmail').off('click');
        $("#divSendReportInEmailPopUp").dialog("close");
    });
    $('#btnCancleEmail').click(function () {
        $(':input', '#divSendReportInEmailPopUp')
            .not(':button, :submit, :reset, :hidden')
            .val('')
            .removeAttr('checked')
            .removeAttr('selected');
        $("#divSendReportInEmailPopUp").dialog("close");
        $('#btnSendReports').off('click');
        $('#btnCancleEmail').off('click');
    });

}
function isValidEmailAddress(emailAddress) {
    var regex = /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    if (!regex.test(emailAddress)) {
        return false;
    } else {
        return true;
    }
};
function ReportExecutionDataInMail(ModuleName, FileType) {
    var FilePath = "";
    $('#DivLoading').show();
    var anSelected = (ModuleName != undefined && ModuleName != null && ModuleName != "" && ModuleName == "WrittenOffTools")
        ? fnGetSelected(writtenOffToolTable)
        : fnGetSelected(oTable);
    if (anSelected.length == 0
        && ModuleName != undefined && ModuleName != null && ModuleName != "" &&
        (ModuleName == "Tools"
            || ModuleName == "Tools Checked Out" )) {

        if (ModuleName == "Tools" || ModuleName == "Tools Checked Out") {
            anSelected = fnGetSelected(oTable);
        }
        else {
            anSelected = fnGetSelected(oTHLTable);
        }

    }

    var stringIDs = "";
    var ReqCount = 0;

    var shiftselectedarray = readCookieforshift("finalselectedarray");
    if (shiftselectedarray != null) {
        stringIDs = shiftselectedarray;
    }

    if (stringIDs == "") {
        for (var i = 0; i <= anSelected.length - 1; i++) {
            if (gblActionName.toLowerCase() === "workorderlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#WorkOrderGUID')[0].value + ",";
            } else if (gblActionName.toLowerCase() == "orderlist" || gblActionName.toLowerCase() == "returnorderlist") {

                var orderID = $(anSelected[i]).find('#spnOrderMasterID').text();
                stringIDs = stringIDs + orderID + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() == "itemmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "itembinmasterview") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "itemmasterpictureview") {
                var tmpGuid = $(anSelected[i]).find("input#ItemGUID").val();
                if (typeof (tmpGuid) != "undefined" && tmpGuid != null && tmpGuid.length > 0) {
                    stringIDs = stringIDs + tmpGuid + ",";
                }
                else { break; } //When select 10 rows value of anSelected.length is 60.this is due to table structure that we have for itempictureview. So, to prevent unnecessary looping break statement is used.
            }
            else if (gblActionName.toLowerCase() == "receivelist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnOrderDetailGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "pullmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "kitmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "requisitionlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#RequisitionGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "projectlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ProjectGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "projectlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ProjectGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "inventorycountlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "cartitemlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist" && ModuleName == "WrittenOffTools") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnWOTTooGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist" || gblActionName.toLowerCase() == 'kittoollist') {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist" || ModuleName == 'Tools Checked Out') {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "kitlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnKitMasterGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "transferlist") {
                var rawData = oTable.fnGetData(anSelected[i]);
                if (rawData != null && typeof (rawData) != "undefined" && rawData.GUID != null && typeof (rawData.GUID) != "undefined"
                    && rawData.GUID.length > 0) {
                    stringIDs += rawData.GUID + ",";
                }
                //stringIDs = stringIDs + $(anSelected[i]).find('#spnTransferMasterGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "assetlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "maintenance") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnToolsMaintenanceGuid')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "quotelist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnQuoteGUID')[0].innerHTML + ",";
            }
        }
    }


    if (stringIDs.length > 0) {

        var params = { ModuleName: ModuleName, Ids: stringIDs, ReportType: FileType };

        if (ModuleName == "Tools Checked Out") {

            if (ToolTechnicianValue !== undefined && ToolTechnicianValue != null && ToolTechnicianValue != "") {
                technicianGuids = ToolTechnicianValue.join();
                params = { ModuleName: ModuleName, Ids: stringIDs, ReportType: FileType, TechnicianGuids: technicianGuids };
            }
        }

        if (ModuleName == "WorkOrder") {
            ModuleName = "Work Order";
        }
        else if (ModuleName == "KitMasterList") {
            ModuleName = "Kit";
        }
        else if (ModuleName == "TransferMasterList") {
            ModuleName = "Transfer";
        }

        $.ajax({
            url: '/ReportBuilder/ReportExecutionDataByType',
            type: "POST",
            data: JSON.stringify(params),
            contentType: 'application/json',
            dataType: 'json',
            async: false,
            "success": function (response) {
                if (response.Status) {
                    FilePath= response.ReportFileURL;
                }
                else {
                    $('#DivLoading').hide();
                    ShowNotificationMessage(response.Message);
                }
            },
            "error": function (response) {
                $('#DivLoading').hide();
                ShowNotificationMessage(MsgErrorInProcess);
                //window.open(response.ReportPDFFilePath, "_blank");

            }
        });

    }
    else {
        $('#DivLoading').hide();
        ShowNotificationMessage(MsgRecordToPrint);
    }
    return FilePath;
}
function SendReportMail(PdfUrl,ExcelUrl, SendTo, SendCC, EmailSubject, EmailBody)
{
    var params = { FilePath: PdfUrl, MailBody: EmailBody, MailCC: SendCC, MailSubject: EmailSubject, MailTo: SendTo, Excelfilepath: ExcelUrl };
    $.ajax({
        url: '/ReportBuilder/SendReportExecutionData',
        type: 'POST',
        data: JSON.stringify(params),
        contentType: 'application/json',
        dataType: 'json',
        async: false,
        success: function (data) {
            $('#DivLoading').hide();
            if (data) {
                //$("#divSendReportInEmailPopUp").dialog("close");
            }
        },
        complete: function () {
            //$("#divSendReportInEmailPopUp").dialog("close");
        }
    });
}
function createCookieforshift(name, value, days) {
    var expires;
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
    } else {
        expires = "";
    }
    document.cookie = escape(name) + "=" + escape(value) + expires + "; path=/ ;SameSite=Strict;";
}
function readCookieforshift(name) {
    var nameEQ = escape(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') {
            c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) === 0) {
            return unescape(c.substring(nameEQ.length, c.length));
        }
    }
    return null;
}
function eraseCookieforshift(name) {
    createCookieforshift(name, "", -1);
}
function GetOnlyIdsForPassPagesForshift(PageName, IsSupportPage) {
    var sSource = "";
    var StartiDisplayLength = oTable.fnSettings()._iDisplayStart;
    var EndDisplayLength = oTable.fnSettings()._iDisplayLength;

    ///////////////////////////////// Call to get Ids /////////////////////////// START
    oTable.fnSettings().oFeatures.bStateSave = false;
    oTable.fnSettings()._iDisplayStart = 0;
    oTable.fnSettings()._iDisplayLength = 9999999;

    var aoData = oTable._fnAjaxParameters();
    var arrCols = new Array();
    var objCols = oTable.fnSettings().aoColumns;
    for (var i = 0; i <= objCols.length - 1; i++) {
        arrCols.push(objCols[i].mDataProp);
    }
    for (var j = 0; j <= aoData.length - 1; j++) {
        if (aoData[j].name == "sColumns") {
            aoData[j].value = arrCols.join("|");
            break;
        }
    }
    if (oTable.fnSettings().aaSorting.length != 0)
        aoData.push({ "name": "SortingField", "value": oTable.fnSettings().aaSorting[0][3] });
    else
        aoData.push({ "name": "SortingField", "value": "0" });

    aoData.push({ "name": "IsArchived", "value": $('#IsArchivedRecords').is(':checked') });
    aoData.push({ "name": "IsDeleted", "value": $('#IsDeletedRecords').is(':checked') });

    $.ajax({
        "dataType": 'json',
        "type": "POST",
        "url": sSource,
        cache: false,
        "async": false,
        "data": aoData,
        "headers": { "__RequestVerificationToken": $("input[name='__RequestVerificationToken'][type='hidden']").val() },
        "success": function (json) {
            var start = readCookieforshift("selectstartindex");
            var end = readCookieforshift("selectendindex");
            var array = "";
            if (json.aaData != '') {

                while (start != end) {
                    for (var i = 0; i <= json.aaData.length - 1; i++) {
                        if (json.aaData[i].ID == start) {
                            //array = array + json.aaData[i].ID + ",";
                            (array == "") ? array = json.aaData[i].ID : array = array + "," + json.aaData[i].ID;
                            start = json.aaData[i + 1].ID;
                            break;
                        }
                    }
                }
                //array = array + end;
                (array == "") ? array = end : array = array + "," + end;

                createCookieforshift("finalselectedarray", array, 1);
            }
        },
        error: function (response) {
            //return o;
        }
    });
    ///////////////////////////////// Call to get Ids /////////////////////////// END

    ///////////////////////////////// Set Original settings /////////////////////////// START
    oTable.fnSettings().oFeatures.bStateSave = true;
    oTable.fnSettings()._iDisplayStart = StartiDisplayLength;
    oTable.fnSettings()._iDisplayLength = EndDisplayLength;
    ///////////////////////////////// Set Original settings /////////////////////////// END
}
function OpenMoveMaterialPopupByItemGuid(objData) {
    $('#DivLoading').show();
    $("#divMoveMaterialPopup").empty();
    $.ajax({
        url: 'OpenPopupForMoveMaterial',
        type: 'POST',
        data: JSON.stringify(objData),
        dataType: 'text',
        contentType: 'application/json',
        success: function (result) {
            $("#divMoveMaterialPopup").html(result);
            $('#DivLoading').hide();
        },
        error: function (xhr) {
            $('#DivLoading').hide();
        }
    });
}
function OpenMoveMaterialPopupByItemGuidForLotSerial(objData) {
    $('#DivLoading').show();
    $("#divMoveMaterialPopup").empty();
    $.ajax({
        url: 'OpenPopupForMoveMaterialLotSerial',
        type: 'POST',
        data: JSON.stringify(objData),
        dataType: 'text',
        contentType: 'application/json',
        success: function (result) {
            $("#divMoveMaterialPopup").html(result);
            $('#DivLoading').hide();
        },
        error: function (xhr) {
            $('#DivLoading').hide();
        }
    });
}


function OpenMoveMaterialPopupByToolGuid(objData) {
    $('#DivLoading').show();
    $("#divMoveMaterialPopup").empty();
    $.ajax({
        url: 'OpenPopupForToolMoveMaterial',
        type: 'POST',
        data: JSON.stringify(objData),
        dataType: 'text',
        contentType: 'application/json',
        success: function (result) {
            $("#divMoveMaterialPopup").html(result);
            $('#DivLoading').hide();
        },
        error: function (xhr) {
            $('#DivLoading').hide();
        }
    });
}
function OpenMoveMaterialPopupByToolGuidForLotSerial(objData) {
    $('#DivLoading').show();
    $("#divMoveMaterialPopup").empty();
    $.ajax({
        url: 'OpenPopupForToolMoveMaterialLotSerial',
        type: 'POST',
        data: JSON.stringify(objData),
        dataType: 'text',
        contentType: 'application/json',
        success: function (result) {
            $("#divMoveMaterialPopup").html(result);
            $('#DivLoading').hide();
        },
        error: function (xhr) {
            $('#DivLoading').hide();
        }
    });
}

if (typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, '');
    }
}


function ShowLocalReports(objKeyValue, Id) {
    var obj = { paras: objKeyValue, Id: Id.toString() }
    var objlen = JSON.stringify(obj)
    //alert(objlen.length);
    $.ajax({
        url: '/Master/SetReportParaDictionary',
        type: 'Post',
        data: JSON.stringify(obj),
        //data :objlen.toString(),
        dataType: 'json',
        contentType: 'application/json',
        success: function (result) {
            window.open(result.ReportURL, "viewReportTab");
            return;
        },
        error: function (xhr) {
            console.log(xhr);
        }
    });
}

function SaveLocalReportPDF(objKeyValue, RptID) {
    var obj = { paras: objKeyValue, ReportID: RptID }
    var obj1 = { ReportID: RptID }

    $.ajax({
        url: '/Master/SetPDFReportParaDictionary',
        type: 'Post',
        data: JSON.stringify(obj),
        dataType: 'json',
        contentType: 'application/json',
        success: function (result) {

            if (result.message == "ok") {

                $.ajax({
                    url: '/ReportBuilder/GeneratePDF',
                    type: 'Post',
                    data: JSON.stringify(obj1),
                    dataType: 'json',
                    contentType: 'application/json',
                    success: function (result) {

                    },
                    error: function (result) {
                    }
                });
            }

        },
        error: function (result) {
        }
    });
}




function GetGridHeaderColumnsObject(dataTableName, ReOrderTitle, ListName, ExecuteFunctionStringAfterReOrder) {
    BarcodeSearch_CurrentDataTableName = dataTableName;
    var blankNameFlag = 0;
    var tmpColumnsArray = new Array();
    var duplicatecount = 1;

    var str = '{';
    $('#' + dataTableName + ' thead tr:first th').each(function (i) {
        var hdr = $.trim($(this).text());

        if (i > 0)
            str += ',';
        if (hdr == '') {
            str += '"' + 'blankFieldName' + blankNameFlag + '" : ' + i;
            blankNameFlag++;
        }
        else {
            if ($.inArray(hdr, tmpColumnsArray) > -1)
            {
                hdr = hdr + "_" + duplicatecount;
                duplicateColumnArray.push(hdr);
                duplicatecount++;
            }
            str += '"' + hdr + '" : ' + i;
            tmpColumnsArray.push(hdr);
        }

    });
    str += '}';
    gridDuplicateColumnCount = duplicatecount - 1;

    // var columns_last = oTableKitLineItems.settings().aoColumns();
    //alert($.parseJSON(columns_last))
    var columns = $.parseJSON(str);
    $('#divReorderPopup').find('#hdnReOrderDataTableName').val(dataTableName);

    if (ReOrderTitle !== undefined)
        $('#divReorderPopup').find('#hdnReOrderTitle').val(ReOrderTitle);

    if (ListName !== undefined)
        $('#divReorderPopup').find('#hdnReOrderListName').val(ListName);

    if (ExecuteFunctionStringAfterReOrder !== undefined)
        $('#divReorderPopup').find('#hdnReOrderExecuteFunctionString').val(ExecuteFunctionStringAfterReOrder);


    return columns;
}

function GetIMGridHeaderColumnsObject(dataTableName) {
    var blankNameFlag = 0;
    var str = '{';

    $('#' + dataTableName + ' thead tr:first th').each(function (i) {
        if (i > 0)
            str += ',';
        if ($.trim($(this).text()) == '') {
            str += '"' + 'blankFieldName' + blankNameFlag + '" : ' + i;
            blankNameFlag++;
        }
        else {
            str += '"' + $.trim($(this).text()) + '" : ' + i;
        }
    });
    str += '}';
    var columns = $.parseJSON(str);
    return columns;

}

function GenerateAndShowGridColumnList(dataTableName) {

    var dtTable = $('#' + dataTableName).dataTable();

    //var li = document.createElement('li');
    //li.innerHTML = "<input type='hidden' value ='ulColumnReOrder' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>";

    //$('#divReorderPopup').append(li);
    var div = document.createElement('div');
    div.id = "CheckAll";
    //li.className = 'ui-state-default';
    //    li.innerHTML = oColumn.sTitle.trim();
    div.innerHTML = "<input type='hidden' value ='ulColumnReOrder' id='hiddenDivName' /><a href='javascript:;' onclick='CheckAll(this);'  id='CheckAll' >CheckAll</a>&nbsp;<a href='javascript:;' onclick='UnCheckAll(this);' id='UnCheckAll' >UnCheckAll</a>" +
        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked' />Show All Hidden";

    $('div.sortableContainer').find("div#CheckAll").remove();
    $('div.sortableContainer').prepend(div);
    for (i = 0, iLen = dtTable.fnSettings().aoColumns.length; i < iLen; i++) {
        var oColumn = dtTable.fnSettings().aoColumns[i];
        var style = '';
        var LiStyle = 'display:block';
        var LiClassName = 'ui-state-default'
        if (oColumn.sClass.indexOf('NotHide') >= 0) {
            //style = ' style="display:none" ';
            style = ' disabled="disabled" ';
            //LiStyle = 'display:none';
            LiClassName = LiClassName + ' HiddenLi';
        }

        var li = document.createElement('li');
        if (dataTableName == 'ItemModeDataTable' && gblActionName.toLowerCase() == "receivelist")
            li.id = objColumnsNewReceive[oColumn.sTitle.trim()];
        else if (dataTableName == 'ItemModeDataTable' && (gblActionName.toLowerCase() == "workorderlist" || gblActionName.toLowerCase() == "maintenance"))
            li.id = objColumnsMI[oColumn.sTitle.trim()];
        else
            li.id = objColumns[oColumn.sTitle.trim()];

        var Class = '';
        if (oColumn.sClass.indexOf('NotMovable') >= 0) {
            //		if (dataTableName.toLowerCase() == "itemmodedatatable" && i == "0"  )
            //        {
            Class = "unsortable";
        }
        li.className = Class + ' ' + LiClassName;
        li.innerHTML = oColumn.sTitle.trim();
        li.style = LiStyle;
        if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
            if (dataTableName == 'ItemModeDataTable' && gblActionName.toLowerCase() == "receivelist")
                li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + objColumnsNewReceive[oColumn.sTitle.trim()] + '_" />' + oColumn.sTitle.trim();
            else if (dataTableName == 'ItemModeDataTable' && (gblActionName.toLowerCase() == "workorderlist" || gblActionName.toLowerCase() == "maintenance"))
                li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + objColumnsMI[oColumn.sTitle.trim()] + '_" />' + oColumn.sTitle.trim();
            else
                li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + objColumns[oColumn.sTitle.trim()] + '_" />' + oColumn.sTitle.trim();
        }
        else {
            if (dataTableName == 'ItemModeDataTable' && gblActionName.toLowerCase() == "receivelist")
                li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + objColumnsNewReceive[oColumn.sTitle.trim()] + '_" />' + oColumn.sTitle.trim();
            else if (dataTableName == 'ItemModeDataTable' && (gblActionName.toLowerCase() == "workorderlist" || gblActionName.toLowerCase() == "maintenance"))
                li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + objColumnsMI[oColumn.sTitle.trim()] + '_" />' + oColumn.sTitle.trim();
            else
                li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + objColumns[oColumn.sTitle.trim()] + '_" />' + oColumn.sTitle.trim();
        }
        $('#divReorderPopup').find('#ulColumnReOrder').append(li);
    }
}
function SortableArray(ulColumnsOrder) {
    var sortableArray = '';
    $(ulColumnsOrder).children("li").each(function () {
        if (sortableArray != '') {
            sortableArray = sortableArray + "," + $(this).attr("id");
        }
        else {
            sortableArray = $(this).attr("id");
        }
    });
    return sortableArray;
}
$('#btnSaveGridColumnOrder').live('click', function () {

    var dataTableName = $('#divReorderPopup').find('#hdnReOrderDataTableName').val();
    var dataTableObject = $('#' + dataTableName).dataTable();
    var listName = $('#divReorderPopup').find('#hdnReOrderListName').val();
    var _Order = SortableArray($('#divReorderPopup').find('#ulColumnReOrder')); //$('#divReorderPopup').find('#ulColumnReOrder').sortable("toArray");
    var executeFuncString = $('#divReorderPopup').find('#hdnReOrderExecuteFunctionString').val();
    var __Order = _Order.toString().split(",");

    for (var i = 0; i < __Order.length; i++) {
        __Order[i] = parseFloat(__Order[i]);
    }

    if (dataTableObject.fnSettings().oLoadedState == null || dataTableName == '') {

        //$('#divReorderPopup').dialog('close');
        //return;
        $.ajax({
            "url": '/Master/LoadGridState',
            "type": "POST",
            data: { ListName: listName },
            "async": false,
            cache: false,
            "dataType": "json",
            "success": function (json) {
                if (json.jsonData != '') {
                    o = JSON.parse(json.jsonData);
                    dataTableObject.fnSettings().oLoadedState = $.extend(true, {}, o);
                }
            }
        });
    }

    dataTableObject.fnSettings().oLoadedState.ColReorder = __Order;

    var _abVisCols = [];
    for (i = 0, iLen = dataTableObject.fnSettings().aoColumns.length; i < iLen; i++) {
        // var checked = $("#" + i + "_").is(":checked");
        var checked = $('#ulColumnReOrder').find('input.checkBox[id="' + i + '_"]').is(":checked");
        _abVisCols.push(checked);
    }
    //alert(dataTableObject.fnSettings().oLoadedState.iLength);
    //var pageSize = $('div#' + dataTableName + '_length').find('select :first').val();

    dataTableObject.fnSettings().oLoadedState.abVisCols = _abVisCols;
    var pageSize = $('div#' + dataTableName + '_length').find('select[name="' + dataTableName + '_length"]').val()
    if (!isNaN(pageSize) && parseInt(pageSize) > 0)
        dataTableObject.fnSettings().oLoadedState.iLength = pageSize;

    //alert(listName);
    //alert(JSON.stringify(dataTableObject.fnSettings().oLoadedState));
    $.ajax({
        "type": "POST",
        "url": '/Master/SaveGridState',
        "data": { Data: JSON.stringify(dataTableObject.fnSettings().oLoadedState), ListName: listName },
        "dataType": "json",
        "cache": false,
        "async": false,
        "success": function (json1) {
            o = json1;

            var newString = (json1);
            if (listName == "NewPullItemMaster") {

                var o;
                $.ajax({
                    "url": '/Master/LoadGridState',
                    "type": "POST",
                    data: { ListName: 'NewConsumePullItemMaster' },
                    "async": false,
                    cache: false,
                    "dataType": "json",
                    "success": function (json2) {


                        //if (json2 != '' &&  json2.length != 0  && json2 != undefined && json2 != null) {
                        if (json2 != '' && json2.length != 0 && json2 != undefined && json2 != null
                            && json2.jsonData != '' && json2.jsonData.length != 0 && json2.jsonData != undefined && json2.jsonData != null) {
                            var ObjColumnData = JSON.parse(json2.jsonData);

                            if (parseFloat(NoofUDFCount) >= 1)
                                ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index];
                            if (parseFloat(NoofUDFCount) >= 2)
                                ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index];
                            if (parseFloat(NoofUDFCount) >= 3)
                                ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index];
                            if (parseFloat(NoofUDFCount) >= 4)
                                ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index];
                            if (parseFloat(NoofUDFCount) >= 5)
                                ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index];

                            $.ajax({
                                "url": '/Master/SaveGridState',
                                "type": "POST",
                                //data: { Data: RequistionString.jsonData, ListName: 'RequisitionDetails' },
                                data: { Data: JSON.stringify(ObjColumnData), ListName: 'NewConsumePullItemMaster' },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                "success": function (json) {
                                    o = json;
                                    var o;
                                    $.ajax({
                                        "url": '/Master/LoadGridState',
                                        "type": "POST",
                                        data: { ListName: 'RequisitionDetails' },
                                        "async": false,
                                        cache: false,
                                        "dataType": "json",
                                        "success": function (json2) {


                                            //if (json2 != '' &&  json2.length != 0  && json2 != undefined && json2 != null) {
                                            if (json2 != '' && json2.length != 0 && json2 != undefined && json2 != null
                                                && json2.jsonData != '' && json2.jsonData.length != 0 && json2.jsonData != undefined && json2.jsonData != null) {
                                                var ObjColumnData = JSON.parse(json2.jsonData);

                                                if (parseFloat(NoofUDFCount) >= 1)
                                                    ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index];
                                                if (parseFloat(NoofUDFCount) >= 2)
                                                    ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index];
                                                if (parseFloat(NoofUDFCount) >= 3)
                                                    ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index];
                                                if (parseFloat(NoofUDFCount) >= 4)
                                                    ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index];
                                                if (parseFloat(NoofUDFCount) >= 5)
                                                    ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index];

                                                //var RequistionString = (json2);
                                                //if (parseFloat(NoofUDFCount) >= 1)
                                                //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index];
                                                //if (parseFloat(NoofUDFCount) >= 2)
                                                //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index];
                                                //if (parseFloat(NoofUDFCount) >= 3)
                                                //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index];
                                                //if (parseFloat(NoofUDFCount) >= 4)
                                                //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index];
                                                //if (parseFloat(NoofUDFCount) >= 5)
                                                //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index];
                                                //
                                                //var Visiblity = JSON.parse(RequistionString.jsonData).abVisCols.toString().split(',');
                                                //if (parseFloat(NoofUDFCount) >= 1)
                                                //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) -parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index] == true ?"true":"false";
                                                //if (parseFloat(NoofUDFCount) >= 2)
                                                //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index] == true ? "true" : "false";
                                                //if (parseFloat(NoofUDFCount) >= 3)
                                                //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index] == true ? "true" : "false";
                                                //if (parseFloat(NoofUDFCount) >= 4)
                                                //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index] == true ? "true" : "false";
                                                //if (parseFloat(NoofUDFCount) >= 5)
                                                //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index] == true ? "true" : "false";
                                                //JSON.parse(RequistionString.jsonData).abVisCols = Visiblity;

                                                //if (json.jsonData != '')
                                                //    o = JSON.parse(json.jsonData);
                                                $.ajax({
                                                    "url": '/Master/SaveGridState',
                                                    "type": "POST",
                                                    //data: { Data: RequistionString.jsonData, ListName: 'RequisitionDetails' },
                                                    data: {
                                                        Data: JSON.stringify(ObjColumnData), ListName: 'RequisitionDetails'
                                                    },
                                                    "async": false,
                                                    cache: false,
                                                    "dataType": "json",
                                                    "success": function (json) {
                                                        o = json;
                                                        var o;
                                                        $.ajax({
                                                            "url": '/Master/LoadGridState',
                                                            "type": "POST",
                                                            data: {
                                                                ListName: 'ItemMasterModelList_RQ'
                                                            },
                                                            "async": false,
                                                            cache: false,
                                                            "dataType": "json",
                                                            "success": function (json2) {

                                                                if (json2 != '' && json2.length != 0 && json2 != undefined && json2 != null
                                                                    && json2.jsonData != '' && json2.jsonData.length != 0 && json2.jsonData != undefined && json2.jsonData != null
                                                                ) {

                                                                    var ObjColumnData_IRQ = JSON.parse(json2.jsonData);
                                                                    if (parseFloat(NoofUDFCount) >= 1)
                                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index];
                                                                    if (parseFloat(NoofUDFCount) >= 2)
                                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index];
                                                                    if (parseFloat(NoofUDFCount) >= 3)
                                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index];
                                                                    if (parseFloat(NoofUDFCount) >= 4)
                                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index];
                                                                    if (parseFloat(NoofUDFCount) >= 5)
                                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index];
                                                                    $.ajax({
                                                                        "url": '/Master/SaveGridState',
                                                                        "type": "POST",
                                                                        //data: { Data: RequistionString.jsonData, ListName: 'RequisitionDetails' },
                                                                        data: {
                                                                            Data: JSON.stringify(ObjColumnData_IRQ), ListName: 'ItemMasterModelList_RQ'
                                                                        },
                                                                        "async": false,
                                                                        cache: false,
                                                                        "dataType": "json",
                                                                        "success": function (json) {
                                                                            $('#divReorderPopup').dialog('close');

                                                                            if (executeFuncString.length > 0)
                                                                                eval(executeFuncString);
                                                                        }
                                                                    });
                                                                }
                                                                else {
                                                                    $('#divReorderPopup').dialog('close');

                                                                    if (executeFuncString.length > 0)
                                                                        eval(executeFuncString);
                                                                }
                                                            }

                                                        });
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    "url": '/Master/LoadGridState',
                                                    "type": "POST",
                                                    data: {
                                                        ListName: 'ItemMasterModelList_RQ'
                                                    },
                                                    "async": false,
                                                    cache: false,
                                                    "dataType": "json",
                                                    "success": function (json2) {

                                                        if (json2 != '' && json2.length != 0 && json2 != undefined && json2 != null
                                                            && json2.jsonData != '' && json2.jsonData.length != 0 && json2.jsonData != undefined && json2.jsonData != null
                                                        ) {
                                                            var ObjColumnData_IRQ = JSON.parse(json2.jsonData);
                                                            if (parseFloat(NoofUDFCount) >= 1)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index];
                                                            if (parseFloat(NoofUDFCount) >= 2)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index];
                                                            if (parseFloat(NoofUDFCount) >= 3)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index];
                                                            if (parseFloat(NoofUDFCount) >= 4)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index];
                                                            if (parseFloat(NoofUDFCount) >= 5)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index];
                                                            $.ajax({
                                                                "url": '/Master/SaveGridState',
                                                                "type": "POST",
                                                                //data: { Data: RequistionString.jsonData, ListName: 'RequisitionDetails' },
                                                                data: {
                                                                    Data: JSON.stringify(ObjColumnData_IRQ), ListName: 'ItemMasterModelList_RQ'
                                                                },
                                                                "async": false,
                                                                cache: false,
                                                                "dataType": "json",
                                                                "success": function (json) {

                                                                    $('#divReorderPopup').dialog('close');

                                                                    if (executeFuncString.length > 0)
                                                                        eval(executeFuncString);
                                                                }
                                                            });
                                                        }
                                                        else {
                                                            $('#divReorderPopup').dialog('close');

                                                            if (executeFuncString.length > 0)
                                                                eval(executeFuncString);
                                                        }
                                                    }

                                                });
                                                $('#divReorderPopup').dialog('close');

                                                if (executeFuncString.length > 0)
                                                    eval(executeFuncString);
                                            }
                                        }
                                    });
                                }
                            });
                        }
                        else {
                            var o;
                            $.ajax({
                                "url": '/Master/LoadGridState',
                                "type": "POST",
                                data: {
                                    ListName: 'RequisitionDetails'
                                },
                                "async": false,
                                cache: false,
                                "dataType": "json",
                                "success": function (json2) {

                                    //if (json2 != '' &&  json2.length != 0  && json2 != undefined && json2 != null) {
                                    if (json2 != '' && json2.length != 0 && json2 != undefined && json2 != null
                                        && json2.jsonData != '' && json2.jsonData.length != 0 && json2.jsonData != undefined && json2.jsonData != null) {
                                        var ObjColumnData = JSON.parse(json2.jsonData);
                                        if (parseFloat(NoofUDFCount) >= 1)
                                            ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index];
                                        if (parseFloat(NoofUDFCount) >= 2)
                                            ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index];
                                        if (parseFloat(NoofUDFCount) >= 3)
                                            ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index];
                                        if (parseFloat(NoofUDFCount) >= 4)
                                            ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index];
                                        if (parseFloat(NoofUDFCount) >= 5)
                                            ObjColumnData.abVisCols[parseFloat(ObjColumnData.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index];

                                        //var RequistionString = (json2);
                                        //if (parseFloat(NoofUDFCount) >= 1)
                                        //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index];
                                        //if (parseFloat(NoofUDFCount) >= 2)
                                        //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index];
                                        //if (parseFloat(NoofUDFCount) >= 3)
                                        //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index];
                                        //if (parseFloat(NoofUDFCount) >= 4)
                                        //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index];
                                        //if (parseFloat(NoofUDFCount) >= 5)
                                        //    JSON.parse(RequistionString.jsonData).abVisCols[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index];
                                        //
                                        //var Visiblity = JSON.parse(RequistionString.jsonData).abVisCols.toString().split(',');
                                        //if (parseFloat(NoofUDFCount) >= 1)
                                        //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) -parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index] == true ?"true":"false";
                                        //if (parseFloat(NoofUDFCount) >= 2)
                                        //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index] == true ? "true" : "false";
                                        //if (parseFloat(NoofUDFCount) >= 3)
                                        //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index] == true ? "true" : "false";
                                        //if (parseFloat(NoofUDFCount) >= 4)
                                        //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index] == true ? "true" : "false";
                                        //if (parseFloat(NoofUDFCount) >= 5)
                                        //    Visiblity[parseFloat(JSON.parse(RequistionString.jsonData).abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(1)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index] == true ? "true" : "false";
                                        //JSON.parse(RequistionString.jsonData).abVisCols = Visiblity;

                                        //if (json.jsonData != '')
                                        //    o = JSON.parse(json.jsonData);
                                        $.ajax({
                                            "url": '/Master/SaveGridState',
                                            "type": "POST",
                                            //data: { Data: RequistionString.jsonData, ListName: 'RequisitionDetails' },
                                            data: {
                                                Data: JSON.stringify(ObjColumnData), ListName: 'RequisitionDetails'
                                            },
                                            "async": false,
                                            cache: false,
                                            "dataType": "json",
                                            "success": function (json) {
                                                o = json;
                                                var o;
                                                $.ajax({
                                                    "url": '/Master/LoadGridState',
                                                    "type": "POST",
                                                    data: {
                                                        ListName: 'ItemMasterModelList_RQ'
                                                    },
                                                    "async": false,
                                                    cache: false,
                                                    "dataType": "json",
                                                    "success": function (json2) {
                                                        if (json2 != '' && json2.length != 0 && json2 != undefined && json2 != null
                                                            && json2.jsonData != '' && json2.jsonData.length != 0 && json2.jsonData != undefined && json2.jsonData != null
                                                        ) {
                                                            var ObjColumnData_IRQ = JSON.parse(json2.jsonData);
                                                            if (parseFloat(NoofUDFCount) >= 1)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index];
                                                            if (parseFloat(NoofUDFCount) >= 2)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index];
                                                            if (parseFloat(NoofUDFCount) >= 3)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index];
                                                            if (parseFloat(NoofUDFCount) >= 4)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index];
                                                            if (parseFloat(NoofUDFCount) >= 5)
                                                                ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index];
                                                            $.ajax({
                                                                "url": '/Master/SaveGridState',
                                                                "type": "POST",
                                                                //data: { Data: RequistionString.jsonData, ListName: 'RequisitionDetails' },
                                                                data: {
                                                                    Data: JSON.stringify(ObjColumnData_IRQ), ListName: 'ItemMasterModelList_RQ'
                                                                },
                                                                "async": false,
                                                                cache: false,
                                                                "dataType": "json",
                                                                "success": function (json) {
                                                                    $('#divReorderPopup').dialog('close');

                                                                    if (executeFuncString.length > 0)
                                                                        eval(executeFuncString);
                                                                }
                                                            });
                                                        }
                                                        else {
                                                            $('#divReorderPopup').dialog('close');

                                                            if (executeFuncString.length > 0)
                                                                eval(executeFuncString);
                                                        }
                                                    }

                                                });
                                            }
                                        });
                                    }
                                    else {
                                        $.ajax({
                                            "url": '/Master/LoadGridState',
                                            "type": "POST",
                                            data: {
                                                ListName: 'ItemMasterModelList_RQ'
                                            },
                                            "async": false,
                                            cache: false,
                                            "dataType": "json",
                                            "success": function (json2) {
                                                if (json2 != '' && json2.length != 0 && json2 != undefined && json2 != null
                                                    && json2.jsonData != '' && json2.jsonData.length != 0 && json2.jsonData != undefined && json2.jsonData != null
                                                ) {
                                                    var ObjColumnData_IRQ = JSON.parse(json2.jsonData);
                                                    if (parseFloat(NoofUDFCount) >= 1)
                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(1)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF1Index];
                                                    if (parseFloat(NoofUDFCount) >= 2)
                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(2)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF2Index];
                                                    if (parseFloat(NoofUDFCount) >= 3)
                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(3)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF3Index];
                                                    if (parseFloat(NoofUDFCount) >= 4)
                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(4)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF4Index];
                                                    if (parseFloat(NoofUDFCount) >= 5)
                                                        ObjColumnData_IRQ.abVisCols[parseFloat(ObjColumnData_IRQ.abVisCols.length) - parseFloat(parseFloat(NoofUDFCount) - parseFloat(5)) - parseFloat(3)] = JSON.parse(newString.JSONDATA).abVisCols[UDF5Index];
                                                    $.ajax({
                                                        "url": '/Master/SaveGridState',
                                                        "type": "POST",
                                                        //data: { Data: RequistionString.jsonData, ListName: 'RequisitionDetails' },
                                                        data: {
                                                            Data: JSON.stringify(ObjColumnData_IRQ), ListName: 'ItemMasterModelList_RQ'
                                                        },
                                                        "async": false,
                                                        cache: false,
                                                        "dataType": "json",
                                                        "success": function (json) {
                                                            $('#divReorderPopup').dialog('close');

                                                            if (executeFuncString.length > 0)
                                                                eval(executeFuncString);
                                                        }
                                                    });
                                                }
                                                else {
                                                    $('#divReorderPopup').dialog('close');

                                                    if (executeFuncString.length > 0)
                                                        eval(executeFuncString);
                                                }
                                            }

                                        });
                                        $('#divReorderPopup').dialog('close');

                                        if (executeFuncString.length > 0)
                                            eval(executeFuncString);
                                    }
                                }
                            });

                        }
                    }
                });

            }
            else {
                $('#divReorderPopup').dialog('close');

                if (executeFuncString.length > 0)
                    eval(executeFuncString);
            }
        }
    });


});

function ReportExecutionData(ModuleName) {
    var tableObject = (ModuleName != undefined && ModuleName != null && ModuleName != "" && ModuleName == "WrittenOffTools")
        ? writtenOffToolTable
        : oTable

    var anSelected = fnGetSelected(tableObject);
    var stringIDs = "";
    var stringBinIDs = "";
    var ReqCount = 0;
    var currentlySortedField = tableObject.fnSettings().aaSorting.toString();
    var sortingOn = '';
    var shiftselectedarray = readCookieforshift("finalselectedarray");
    if (shiftselectedarray != null) {
        stringIDs = shiftselectedarray;
    }

    if (stringIDs == "") {
        for (var i = 0; i <= anSelected.length - 1; i++) {

            if (gblActionName.toLowerCase() === "workorderlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#WorkOrderGUID')[0].value + ",";
            } else if (gblActionName.toLowerCase() == "orderlist" || gblActionName.toLowerCase() == "returnorderlist") {
                var orderID = $(anSelected[i]).find('#spnOrderMasterID').text();
                stringIDs = stringIDs + orderID + ",";
                ReqCount = ReqCount + 1;
            }
            else if (gblActionName.toLowerCase() == "itemmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "itembinmasterview") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
                if (ModuleName == 'ItemsBinList') {
                    stringBinIDs = stringBinIDs + $(anSelected[i]).find('#BinID')[0].value + ",";
                }
            }
            else if (gblActionName.toLowerCase() == "itemmasterpictureview") {
                var tmpGuid = $(anSelected[i]).find("input#ItemGUID").val();
                if (typeof (tmpGuid) != "undefined" && tmpGuid != null && tmpGuid.length > 0) {
                    stringIDs = stringIDs + tmpGuid + ",";
                }
                else { break; } //When select 10 rows value of anSelected.length is 60.this is due to table structure that we have for itempictureview. So, to prevent unnecessary looping break statement is used.
            }
            else if (gblActionName.toLowerCase() == "companylist") {

                stringIDs = stringIDs + $(anSelected[i]).find("input#hdnguid").val() + ",";
            }
            else if (gblActionName.toLowerCase() == "enterpriselist") {

                stringIDs = stringIDs + $(anSelected[i]).find("input#hdnGUID").val() + ",";
            }
            else if ($.trim(gblActionName.toLowerCase()) == "roomlist") {

                stringIDs = stringIDs + $(anSelected[i]).find('#hdnguid')[0].value + ",";
                var sortArray = currentlySortedField.split(",");
                sortingOn = $("input#Sortfield").val();
                if ($.trim(sortingOn) == '') {
                    sortingOn = sortArray[3] + ' ' + sortArray[1];
                }
                if (sortingOn == 'undefined undefined') {
                    sortingOn = '';
                }
            }
            else if (gblActionName.toLowerCase() == "receivelist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnOrderDetailGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "pullmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "kitmasterlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ItemGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "requisitionlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#RequisitionGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "projectlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ProjectGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "projectlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#ProjectGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "inventorycountlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "cartitemlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist" && ModuleName == "WrittenOffTools") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnWOTTooGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "toollist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "kitlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#spnKitMasterGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "transferlist") {
                var rawData = oTable.fnGetData(anSelected[i]);
                if (rawData != null && typeof (rawData) != "undefined" && rawData.GUID != null && typeof (rawData.GUID) != "undefined"
                    && rawData.GUID.length > 0)
                {
                    stringIDs += rawData.GUID + ",";
                }
                //stringIDs = stringIDs + $(anSelected[i]).find('#spnTransferMasterGUID').text() + ",";
            }
            else if (gblActionName.toLowerCase() == "userlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGuid').val() + ",";
            }
            else if (gblActionName.toLowerCase() == "supplierlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGuid').val() + ",";
            }
            else if (gblActionName.toLowerCase() == "assetlist") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnGUID')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "maintenance") {
                stringIDs = stringIDs + $(anSelected[i]).find('#hdnToolsMaintenanceGuid')[0].value + ",";
            }
            else if (gblActionName.toLowerCase() == "quotelist") {

                stringIDs = stringIDs + $(anSelected[i]).find('#spnQuoteGUID')[0].innerHTML + ",";
            }
        }
    }

    if (stringIDs.length > 0 && stringBinIDs.length > 0 && ModuleName == 'ItemsBinList') {
        stringIDs = stringIDs + '#' + stringBinIDs;
    }

    if (stringIDs.length > 0) {
        $.ajax({
            "url": '/ReportBuilder/ReportExecutionData',
            "data": { ModuleName: ModuleName, Ids: stringIDs, sortingOn: sortingOn },
            "dataType": "json",
            "type": "POST",
            "success": function (response) {

                window.open(response.ReqURL, "viewReportGrid");

            },
            "error": function (response) {

                window.open(response.ReqURL, "_blank");

            }
        });
    }
    else {
        ShowNotificationMessage(MsgRecordToPrint);
    }
}





function ReportExecutionSingleRecord(ModuleName, GUId) {
    var stringIDs = GUId;


    if (stringIDs.length > 0) {
        $.ajax({
            "url": '/ReportBuilder/ReportExecutionData',
            "data": { ModuleName: ModuleName, Ids: stringIDs },
            "dataType": "json",
            "type": "POST",
            "success": function (response) {

                window.open(response.ReqURL, "viewReportGrid");

            },
            "error": function (response) {

                window.open(response.ReqURL, "_blank");

            }
        });
    }
    else {
        ShowNotificationMessage(MsgRecordToPrint);
    }
}
function ReportExecutionSingleRecordByModuleID(ModuleID, GUId) {

    var stringIDs = GUId;

    if (stringIDs.length > 0) {

        $.ajax({
            "url": '/ReportBuilder/ReportExecutionDataByModuleID',
            "data": { ModuleID: ModuleID, Ids: stringIDs },
            "dataType": "json",
            "type": "POST",
            "success": function (response) {

                window.open(response.ReqURL, "_blank");

            },
            "error": function (response) {

                window.open(response.ReqURL, "_blank");

            }
        });
    }
    else {
        ShowNotificationMessage(MsgRecordToPrint);
    }
}
function SetnarrowSeachSelection(oSettings) {
    if (typeof PageName != 'undefined' && typeof oSettings != 'undefined') {
        var searchstr = oSettings.oLoadedState.oSearch.sSearch;
        //        alert("From Init complete" + searchstr);
        if (PageName != "" && searchstr != undefined) {
            var localpagename = PageName.toLowerCase();
            switch (localpagename) {
                case "requisitionmaster":
                    break;
            }
        }

    }
}
function GetValuefromsstring(gridsearch) {
    //alert(gridsearch);
    //    alert("From narrow complete" + gridsearch);
}
function setTimezoneCookie() {

    var timezone_cookie = "timezoneoffset";

    // if the timezone cookie not exists create one.
    if (!$.cookie(timezone_cookie)) {

        // check if the browser supports cookie
        var test_cookie = 'test cookie';
        $.cookie(test_cookie, true);

        // browser supports cookie
        if ($.cookie(test_cookie)) {

            // delete the test cookie
            $.cookie(test_cookie, null);

            // create a new cookie 
            $.cookie(timezone_cookie, (new Date().getTimezoneOffset()), { SameSite: 'Strict' });

            // re-load the page

            //            location.reload();
        }
    }
    // if the current timezone and the one stored in cookie are different
    // then store the new timezone in the cookie and refresh the page.
    else {

        var storedOffset = parseInt($.cookie(timezone_cookie));
        var currentOffset = new Date().getTimezoneOffset();

        // user may have changed the timezone
        if (storedOffset !== currentOffset) {
            $.cookie(timezone_cookie, (new Date().getTimezoneOffset()), { SameSite: 'Strict' });
            //            location.reload();
        }
    }

}

// check max length valdation in text area. 
function textCounter(field, field2, maxlimit) {
    var countfield = document.getElementById(field2);
    if (field.value.length > maxlimit) {
        field.value = field.value.substring(0, maxlimit);
        return false;
    } else {
        countfield.innerHTML = maxlimit - field.value.length;
    }
}

function RemoveLeadingTrailingSpace(parentobjid) {

    $("#" + parentobjid).find("input[type='text'],input[type='textarea']").each(function (indx, inpt) {
        if ($(inpt).prop("tagName").toLowerCase() == "input") {
            $(inpt).val($.trim($(inpt).val()));
        }
        else if ($(inpt).prop("tagName").toLowerCase() == "textarea") {
            $(inpt).text($.trim($(inpt).val()));
        }

    });
}

function FillLocations(dropdownobj, binNumber) {
    var selval = $(dropdownobj).val();

    if (!$(dropdownobj).hasClass("populated")) {
        $(dropdownobj).html("");
        var stroptions = "";
        var stroptions = "<option value=''></option>";

        $.ajax({
            "url": '/Master/GetAllLocationOfRoom',
            "type": "POST",
            "data": { BinNumber: binNumber },
            "async": false,
            "cache": false,
            "dataType": "json",
            "success": function (response) {
                $(response).each(function (indx, obj) {
                    if (selval == obj.BinNumber) {
                        stroptions = stroptions + "<option selected='selected' value='" + obj.BinNumber + "'>" + obj.BinNumber + "</option>";
                    }
                    else {
                        stroptions = stroptions + "<option value='" + obj.BinNumber + "'>" + obj.BinNumber + "</option>";
                    }

                });
                $(dropdownobj).html(stroptions);
                $(dropdownobj).addClass("populated");
            },
            "error": function (response) {
            }
        });
    }
}

function FillLocationsForTool(dropdownobj, binNumber) {
    var selval = $(dropdownobj).val();

    if (!$(dropdownobj).hasClass("populated")) {
        $(dropdownobj).html("");
        var stroptions = "";
        var stroptions = "<option value=''></option>";

        $.ajax({
            "url": '/Master/GetAllLocationOfRoomForTool',
            "type": "POST",
            "data": { BinNumber: binNumber },
            "async": false,
            "cache": false,
            "dataType": "json",
            "success": function (response) {
                $(response).each(function (indx, obj) {
                    if (selval == obj.Location) {
                        stroptions = stroptions + "<option selected='selected' value='" + obj.Location + "'>" + obj.Location + "</option>";
                    }
                    else {
                        stroptions = stroptions + "<option value='" + obj.Location + "'>" + obj.Location + "</option>";
                    }

                });
                $(dropdownobj).html(stroptions);
                $(dropdownobj).addClass("populated");
            },
            "error": function (response) {
            }
        });
    }
}
function HideColumnUsingClassName(DataTableName) {
    var obj = $.grep($('#' + DataTableName + '').dataTable().fnSettings().aoColumns, function (a) {
        if (a.sClass.indexOf("isCost") >= 0) {
            return a;
        }
    });

    for (var i = 0; i < obj.length; i++) {
        ColumnsToHideinPopUp.push(obj[i]._ColReorder_iOrigCol);
        $('#' + DataTableName + '').dataTable().fnSetColumnVis(obj[i]._ColReorder_iOrigCol, false);
    }
}

function SetAutoCompleteForCurrentRoomLocations(txtField, ajaxURL, BinNumber) {

    $(txtField).autocomplete("destroy");

    $(txtField).autocomplete({
        source: function (request, response) {
            $.ajax({
                url: ajaxURL,
                type: 'GET',
                data: { 'BinNumber': (this.term == null || this.term == undefined || this.term.trim() == '') ? ' ' : this.term },
                contentType: 'application/json',
                dataType: 'json',
                success: function (data) {
                    response($.map(data, function (Items) {
                        return {
                            label: Items.BinNumber,
                            value: Items.BinNumber
                        }
                    }));
                },
                error: function (err) {
                }
            });
        },
        autoFocus: false,
        minLength: 0,
        select: function (event, ui) {
            //if (ui.item.value == "More Locations") {
            //    $(tr).find("#hdnIsLoadMoreLocations").val("true");
            //    $(this).trigger("focus");
            //    $(this).autocomplete("search", " ");
            //    return false;
            //}
            //else {
            //    $(this).val(ui.item.value);
            //    $(this).parents("td").find("input#hdnLocationId").val(ui.item.selval);
            //}
        },
        open: function () {
            $(txtField).removeClass("ui-corner-all").addClass("ui-corner-top");
            $('ul.ui-autocomplete').css('overflow-y', 'auto');
            $('ul.ui-autocomplete').css('max-height', '300px');
            $('ul.ui-autocomplete').css('z-index', '99999');
        },
        close: function () {
            $(txtField).removeClass("ui-corner-top").addClass("ui-corner-all");
        },
        change: function (event, ui) {
        }
    }).bind("focus", function () {
        $(txtField).autocomplete("search", " ");
        //$(objTxtselector).autocomplete("search", $(objTxtselector).val());
    });
    $(txtField).on('focus');
}

function SetAutoCompleteOpenOnFocus(objTxtselector, reqUrl, ReqData, nameKey) {
    $('#DivLoading').show();
    //var valuesArray = [
    //{ label: 'New York', value: 1 },
    //{ label: 'Warsaw', value: 2 },
    //{ label: 'Moscow', value: 3 },
    //{ label: 'London', value: 4 }
    //];
    $(objTxtselector).autocomplete("instance");
    var valuesArray = new Array();
    $.ajax({
        url: reqUrl,
        contentType: 'application/json',
        dataType: 'json',
        data: { 'BinNumber': nameKey },
        success: function (data) {

            $(data).each(function (indx, obj) {
                valuesArray.push({ label: obj.BinNumber, value: obj.BinNumber })
            });
            //$(objTxtselector).autocomplete("destroy");

            if (!$(objTxtselector).hasClass("ui-autocomplete-input")) {


                $(objTxtselector).autocomplete({
                    minLength: 0,
                    autoFocus: false,
                    source: valuesArray,
                    focus: function (event, ui) {

                    },
                    select: function (event, ui) {
                        $(objTxtselector).trigger("change");
                        $(objTxtselector).autocomplete("destroy");
                    },
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        $('ul.ui-autocomplete').css('overflow-y', 'auto');
                        $('ul.ui-autocomplete').css('max-height', '300px');
                    },
                    close: function (event, ui) {
                    },
                    change: function (event, ui) {
                        $(objTxtselector).autocomplete("destroy");
                    },
                    create: function (event, ui) {
                    },
                    response: function (event, ui) {
                    },
                    search: function (event, ui) {
                    }
                });
                //    .bind("focus", function () {
                //    $(objTxtselector).autocomplete("search");
                //});
                if (typeof (progresss) != "undefined") {
                    progresss = "completed";
                }
                $(objTxtselector).autocomplete("search", "");
                $('#DivLoading').hide();
            }
        },
        error: function (err) {
            $('#DivLoading').hide();
        }
    });


}

function SetAutoCompleteOpenOnFocusLocation(objTxtselector, reqUrl, ReqData, nameKey) {
    $('#DivLoading').show();
    //var valuesArray = [
    //{ label: 'New York', value: 1 },
    //{ label: 'Warsaw', value: 2 },
    //{ label: 'Moscow', value: 3 },
    //{ label: 'London', value: 4 }
    //];
    $(objTxtselector).autocomplete("instance");
    var valuesArray = new Array();
    $.ajax({
        url: reqUrl,
        contentType: 'application/json',
        dataType: 'json',
        data: { 'BinNumber': nameKey },
        success: function (data) {

            $(data).each(function (indx, obj) {
                valuesArray.push({ label: obj.Location, value: obj.Location })
            });
            //$(objTxtselector).autocomplete("destroy");

            if (!$(objTxtselector).hasClass("ui-autocomplete-input")) {


                $(objTxtselector).autocomplete({
                    minLength: 0,
                    autoFocus: false,
                    source: valuesArray,
                    focus: function (event, ui) {

                    },
                    select: function (event, ui) {
                        $(objTxtselector).trigger("change");
                        $(objTxtselector).autocomplete("destroy");
                    },
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        $('ul.ui-autocomplete').css('overflow-y', 'auto');
                        $('ul.ui-autocomplete').css('max-height', '300px');
                    },
                    close: function (event, ui) {
                    },
                    change: function (event, ui) {
                        $(objTxtselector).autocomplete("destroy");
                    },
                    create: function (event, ui) {
                    },
                    response: function (event, ui) {
                    },
                    search: function (event, ui) {
                    }
                });
                //    .bind("focus", function () {
                //    $(objTxtselector).autocomplete("search");
                //});
                if (typeof (progresss) != "undefined") {
                    progresss = "completed";
                }
                $(objTxtselector).autocomplete("search", "");
                $('#DivLoading').hide();
            }
        },
        error: function (err) {
            $('#DivLoading').hide();
        }
    });


}

$('#btnYesDeleteReport').live('click', function (e) {
    ReportID = $('#hndReportID').val();
    if ($('#ConfirmReportDeleteModel').length > 0) {
        closeModal();
    }
    if (ReportID !== undefined && ReportID !== null && parseInt(ReportID) > 0) {
        $('#DivLoading').show();
        $.ajax({
            url: '/ReportBuilder/GetScheduleNamebyReportID',
            type: 'Post',
            async: false,
            data: { 'ReportID': ReportID },
            dataType: 'json',
            success: function (result) {
                if (result.Status) {
                    if (result.ScheduleName != "") {
                        var scr = confirm(result.Message + " " + result.ScheduleName);
                        if (scr == true) {
                            DeleteConfirmReport(ReportID);
                        } else {
                            $('#DivLoading').hide();
                        }
                    }
                    else {
                        DeleteConfirmReport(ReportID);
                    }
                }
                else {
                    $('#DivLoading').hide();
                }
            },
            error: function (xhr) {
                $('#DivLoading').hide();
            }
        });
    }
    //// DeleteConfirmReport($('#hndReportID').val());
});

function DeleteConfirmReport(ReportID) {
    if ($('#ConfirmReportDeleteModel').length > 0) {
        closeModal();
    }
    if (ReportID !== undefined && ReportID !== null && parseInt(ReportID) > 0) {
        $('#DivLoading').show();
        $.ajax({
            url: '/ReportBuilder/DeleteReportByID',
            type: 'Post',
            async: false,
            data: { 'ReportID': ReportID },
            dataType: 'json',
            success: function (result) {
                if (result.Status) {
                    window.location = window.location;
                }
                else {
                    $('#DivLoading').hide();
                }
                $('#hndReportID').val('');
            },
            error: function (xhr) {
                $('#DivLoading').hide();
                $('#hndReportID').val('');
            }
        });

    }

}


var hexDigits = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");
function rgb2hex(rgb) {
    var rgb = rgb.replace(/^(rgb|rgba)\(/, '').replace(/\)$/, '').replace(/\s/g, '').split(',');
    return "#" + hex(rgb[0]) + hex(rgb[1]) + hex(rgb[2]);
}
function hex(x) {
    return isNaN(x) ? "00" : hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];
}

var ClickFrom = '';
function UnCloseOrderCancel() {
    ClickFrom = '';
    $.modal.impl.close();
}

var QuoteClickFrom = '';
function UnCloseQuoteCancel() {
    QuoteClickFrom = '';
    $.modal.impl.close();
}


//$('#bntEditOrderLineItemsFromList').live('click', function (e) {
//    ClickFrom = '';
//    var anSelectedRows = fnGetSelected(oTable);
//    if (anSelectedRows.length <= 0) {
//        alert('please select closed orders');
//        return false;
//    }
//    $('#divUnCloseOrderLineItemEdit').modal();
//    $('.simplemodal-close').css('display', 'none');
//});

function UnCloseOrderReceiptEdit() {
    CallAjaxForUnCloseOrder('EditReceipt');
}

function UnCloseOrderLineItemEdit() {
    CallAjaxForUnCloseOrder('EditLineItems');
}

function CallAjaxForUnCloseOrder(editType) {
    var arrOrderGuid = new Array();
    var OrderId = 0;
    var isOrder = true;
    if (gblActionName.toLowerCase() == 'orderlist' && gblControllerName.toLowerCase() == 'order')
        isOrder = true;
    else if (gblActionName.toLowerCase() == 'receivelist' && gblControllerName.toLowerCase() == 'receive')
        isOrder = false;

    if (ClickFrom === 'CreateOrder') {
        var OrderId = $('#hiddenID').val();
        arrOrderGuid.push($('#GUID').val());
    }
    else {
        var anSelectedRows = fnGetSelected(oTable);
        if (anSelectedRows.length > 0) {
            for (var i = 0; i < anSelectedRows.length; i++) {
                var ostatus = $(anSelectedRows[i]).find('#spnOrderStatus').text();
                var isDeleted = 'No';
                var isArchived = 'No';
                var OrderGUID = '';
                if (isOrder) {
                    OrderGUID = $(anSelectedRows[i]).find('#spnOrderGUID').text();
                    isDeleted = $(anSelectedRows[i]).find('#spnIsDeleted').text();
                    isArchived = $(anSelectedRows[i]).find('#spnIsArchived').text();
                }
                else
                    OrderGUID = $(anSelectedRows[i]).find('#spnOrderGUIID').text();

                if ((parseInt(ostatus) === 8) && isDeleted != 'Yes' && isArchived != 'Yes') {
                    arrOrderGuid.push(OrderGUID);
                }
            }
        }
    }

    if (arrOrderGuid != null && arrOrderGuid.length > 0) {
        $('#DivLoading').show();
        $.ajax({
            url: "/Order/NewUnCloseOrderToEdit",
            type: 'Post',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({ 'OrederGuid': arrOrderGuid, 'EditType': editType }),
            success: function (response) {
                $("#spanGlobalMessage").html(response.Message);
                if (response.Status == "ok") {
                    $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    if (ClickFrom === 'CreateOrder') {
                        if (editType == 'EditLineItems')
                            ShowEditTab("OrderEdit/" + OrderId, "frmOrder");
                        else if (editType == 'EditReceipt') {
                            BlankSession();
                            $('#tab1').hide();
                            $('#tab11').show();
                            $('#tab11').click();
                            $.get("OrderEdit/" + OrderId, function (data) { $('#CtabNew').html(data); });
                        }
                    }
                    else if (oTable !== undefined && oTable != null)
                        oTable.fnDraw();
                }
                else {
                    $("#spanGlobalMessage").removeClass('WarningIcon succesIcon').addClass('errorIcon');
                }

                UnCloseOrderCancel();
                $('#DivLoading').hide();
                showNotificationDialog();
                ClickFrom = '';
            },
            error: function (response) {
                UnCloseOrderCancel();
                $("#spanGlobalMessage").html(MsgErrorInProcess);
                $("#spanGlobalMessage").removeClass('WarningIcon succesIcon').addClass('errorIcon');
                $('#DivLoading').hide();
                showNotificationDialog();
                ClickFrom = '';
            }
        });
    }
    else {
        UnCloseOrderCancel();
        ClickFrom = '';
        ShowNotificationMessage(MsgSelectClosedOrdersOnly);

    }
}

function hexc(colorval) {
    if (colorval !== undefined && colorval != null) {
        var parts = colorval.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
        if (parts !== undefined && parts != null) {
            delete (parts[0]);
            for (var i = 1; i <= 3; ++i) {
                parts[i] = parseInt(parts[i]).toString(16);
                if (parts[i].length == 1) parts[i] = '0' + parts[i];
            }
            color = '#' + parts.join('');
            return color;
        }
    }
}

function UDFfillEditableOptionsForGrid() {
    var _EnterPriseId = $("#hdnEnterpriseId").val();

    $('.udf-editable-autocomplete-dropdownbox').each(function () {

        var _UDFID = $(this).prev().val();
        $ShowAllOptions = $('.show-all-options');
        $ShowAllOptions.unbind("click");
        $ShowAllOptions.click(function () {
            var currentObj = $(this);
            //setTimeout(function () {
            var ddl2 = $(currentObj).siblings(".udf-editable-dropdownbox");

            //ddl2.autocomplete("search", " ");
            //ddl2.trigger("focus");
            _AutoCompleteWrapper.searchHide(ddl2);

            ////setTimeout(function () {
            ////$('ul.ui-autocomplete').css('overflow-y', 'auto');
            ////$('ul.ui-autocomplete').css('max-height', '300px');
            ////$('ul.ui-autocomplete').css('z-index', '99999');
            ////}, 100);



            ////setTimeout(function(){

            ////},1000);

        });

        var ddl = $(this);

        _AutoCompleteWrapper.init(ddl, '/UDF/GetUDFEditableOptionsByUDF'
            , function (request) {
                return {
                    maxRows: 1000,
                    name_startsWith: request.term,
                    UDFID: _UDFID,
                    EnterpriseID: _EnterPriseId
                };
            }
            , function (data) {
                return $.map(data, function (item) {
                    return {
                        label: item.UDFOption,
                        value: item.UDFOption,
                        selval: item.ID
                    };
                });
            }
            , function (curVal, selectedItem) {
                //$("#" + _UDFColumnName).val(ui.item.selval);                
            }
            ,
            null
        );

        //ddl.autocomplete({
        //    source: function (request, response) {
        //        $.ajax({
        //            url: '/UDF/GetUDFEditableOptionsByUDF',
        //            contentType: 'application/json',
        //            dataType: 'json',
        //            data: {
        //                maxRows: 1000,
        //                name_startsWith: request.term,
        //                UDFID: _UDFID,
        //                EnterpriseID: _EnterPriseId
        //            },
        //            cache: false,
        //            success: function (data) {
        //                response($.map(data, function (item) {
        //                    return {
        //                        label: item.UDFOption,
        //                        value: item.UDFOption,
        //                        selval: item.ID
        //                    };
        //                }));
        //            }
        //        });
        //    },
        //    autoFocus: false,
        //    minLength: 0,
        //    select: function (event, ui) {
        //        //$("#" + _UDFColumnName).val(ui.item.selval);
        //    },
        //    open: function () {
        //        ddl.removeClass("ui-corner-all").addClass("ui-corner-top");

        //        ddl.autocomplete('widget').css('z-index', '99999 !important');
        //    },
        //    close: function () {
        //        ddl.removeClass("ui-corner-top").addClass("ui-corner-all");
        //    }
        //});

    });

    //$(document).on('click', 'a.show-all-options', function () {
    //    $(this).siblings(".udf-editable-dropdownbox").autocomplete("search", "");
    //    $(this).siblings('.udf-editable-dropdownbox').trigger("focus");
    //});


}

function UDFfillEditableOptionsForGridCombineQL() {
    var _EnterPriseId = $("#hdnEnterpriseId").val();

    $('.udf-editable-autocomplete-dropdownbox').each(function () {

        var _UDFID = $(this).prev().val();
        var _UDFValue = $(this).val();
        var _QuickListItemGUID = $(this).parent().find('[id^="hdnAutoCompleteQLGuid"]').val();
        if (typeof (_QuickListItemGUID) == undefined || typeof (_QuickListItemGUID) == 'undefined') {
            _QuickListItemGUID = '00000000-0000-0000-0000-000000000000';
        }

        $(this).autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/UDF/GetUDFEditableOptionsByUDFCombineQL',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: {
                        maxRows: 1000,
                        name_startsWith: request.term.trim(),
                        UDFID: _UDFID,
                        EnterpriseID: _EnterPriseId,
                        SelectedValue: _UDFValue,
                        QuickListItemGUID: _QuickListItemGUID
                    },
                    cache: false,
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.UDFOption,
                                value: item.UDFOption,
                                selval: item.ID
                            }
                        }));
                    }
                });
            },
            autoFocus: false,
            minLength: 0,
            select: function (event, ui) {
                //$("#" + _UDFColumnName).val(ui.item.selval);

                var tmppgname = $("#hdnPageName").val();
                if (typeof (tmppgname) != "undefined" && tmppgname != null && tmppgname == "RequisitionMaster") {
                    var parenttr = $(this).parent().parent().parent();
                    if (typeof (parenttr) != "undefined" && parenttr != null) {
                        $(parenttr).addClass("RowChanged");
                    }
                }
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");

                $(this).autocomplete('widget').css('z-index', '99999 !important');
            },
            close: function () {
                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            }
        });

    });

    //$(document).on('click', 'a.show-all-options', function () {
    //    $(this).siblings(".udf-editable-dropdownbox").autocomplete("search", "");
    //    $(this).siblings('.udf-editable-dropdownbox').trigger("focus");
    //});
    $('.show-all-options').unbind("click");
    $('.show-all-options').click(function () {
        var currentObj = $(this);
        //setTimeout(function () {

        $(currentObj).siblings(".udf-editable-dropdownbox").autocomplete("search", " ");
        //$(currentObj).siblings('.udf-editable-dropdownbox').trigger("focus");
        //setTimeout(function () {
        //$('ul.ui-autocomplete').css('overflow-y', 'auto');
        //$('ul.ui-autocomplete').css('max-height', '300px');
        //$('ul.ui-autocomplete').css('z-index', '99999');
        //}, 100);



        //setTimeout(function(){

        //},1000);

    });

}


function UDFfillEditableOptionsForGridTrnsAndOrd() {
    var _EnterPriseId = $("#hdnEnterpriseId").val();

    $('.udf-editable-autocomplete-dropdownbox').each(function () {

        var _UDFID = $(this).prev().val();
        var _UDFValue = $(this).val();



        $(this).autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/UDF/GetUDFEditableOptionsByUDFTrnsAndOrd',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: {
                        maxRows: 1000,
                        name_startsWith: request.term.trim(),
                        UDFID: _UDFID,
                        EnterpriseID: _EnterPriseId,
                        SelectedValue: _UDFValue
                    },
                    cache: false,
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.UDFOption,
                                value: item.UDFOption,
                                selval: item.ID
                            }
                        }));
                    }
                });
            },
            autoFocus: false,
            minLength: 0,
            select: function (event, ui) {
                //$("#" + _UDFColumnName).val(ui.item.selval);
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");

                $(this).autocomplete('widget').css('z-index', '99999 !important');
            },
            close: function () {
                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            }
        });

    });

    //$(document).on('click', 'a.show-all-options', function () {
    //    $(this).siblings(".udf-editable-dropdownbox").autocomplete("search", "");
    //    $(this).siblings('.udf-editable-dropdownbox').trigger("focus");
    //});
    $('.show-all-options').unbind("click");
    $('.show-all-options').click(function () {
        var currentObj = $(this);
        //setTimeout(function () {

        $(currentObj).siblings(".udf-editable-dropdownbox").autocomplete("search", " ");
        //$(currentObj).siblings('.udf-editable-dropdownbox').trigger("focus");
        //setTimeout(function () {
        //$('ul.ui-autocomplete').css('overflow-y', 'auto');
        //$('ul.ui-autocomplete').css('max-height', '300px');
        //$('ul.ui-autocomplete').css('z-index', '99999');
        //}, 100);



        //setTimeout(function(){

        //},1000);

    });

}


function UDFInsertNewForGrid(RowObject) {
    if ($("#chkUsePullCommonUDF").is(":checked")) {
        $("#tblPullCommonUDF").find('.udf-editable-autocomplete-dropdownbox').each(function () {

            var _UDFID = $(this).prev().val();
            var _UDFOption = $(this).val();

            if (_UDFID > 0) {
                var actionURL;
                var params;
                actionURL = '/UDF/InsertUDFOption';
                params = { UDFID: _UDFID, UDFOption: _UDFOption }

                $.ajax({
                    'url': actionURL,
                    data: params,
                    success: function (response) {
                    }
                });
            }

        });
    }
    else {
        $(RowObject).find('.udf-editable-autocomplete-dropdownbox').each(function () {

            var _UDFID = $(this).prev().val();
            var _UDFOption = $(this).val();

            if (_UDFID > 0) {
                var actionURL;
                var params;
                actionURL = '/UDF/InsertUDFOption';
                params = { UDFID: _UDFID, UDFOption: _UDFOption }

                $.ajax({
                    'url': actionURL,
                    data: params,
                    success: function (response) {
                    }
                });
            }

        });
    }
}


//function SetAutoCompleteOpenOnFocus(objTxtselector, reqUrl, ReqData, nameKey) {

//    $(objTxtselector).autocomplete({
//        source: function (request, response) {
//            $('#DivLoading').show();

//            $.ajax({
//                url: reqUrl,
//                //type: "POST",
//                contentType: 'application/json',
//                dataType: 'json',
//                data: { 'BinNumber': request.term },
//                success: function (data) {
//                    response(
//                    $.map(data, function (Items) {
//                        return {
//                            label: Items.BinNumber,
//                            value: Items.BinNumber
//                        }
//                    }));
//                    $('#DivLoading').hide();
//                },
//                error: function (err) {
//                    $('#DivLoading').hide();
//                }
//            });
//        },
//        autoFocus: false,
//        minLength: 0,
//        select: function (event, ui) {
//        },
//        open: function () {
//            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
//            $('ul.ui-autocomplete').css('overflow-y', 'auto');
//            $('ul.ui-autocomplete').css('max-height', '300px');
//        },
//        close: function () {
//        },
//        change: function (event, ui) {

//        }
//    }).bind("focus", function () {
//        $(objTxtselector).autocomplete("search");
//        //$(objTxtselector).autocomplete("search", $(objTxtselector).val());
//    });
//}

function SaveSortable() {
    var _Listname = $("input#hdnListName").val(); //WorkOrderDetails
    //must set objColumns variable to get sequence in popup
    if (_Listname != undefined) {
        $.ajax({
            "url": '/Master/LoadGridState',
            data: { ListName: _Listname },
            cache: false,
            "dataType": "json",
            "success": function (json) {
                if (json.jsonData != '') {
                    o = JSON.parse(json.jsonData);
                    if (_Listname == 'PullDetailsList' && typeof (oTableGlobalTABLE) != 'undefined') {
                        oTableGlobalTABLE.fnSettings().oLoadedState = $.extend(true, {}, o);

                        //update the order of columns
                        var _Order = SortableButtonArray($('.ColVis_collection:last')); // $('#ColumnSortable').sortable("toArray");

                        var __Order = _Order.toString().split(",");

                        for (var i = 0; i < __Order.length; i++) {
                            __Order[i] = parseInt(__Order[i], 10);
                        }

                        oTableGlobalTABLE.fnSettings().oLoadedState.ColReorder = __Order;

                        //update the visibility of columns
                        var _abVisCols = [];

                        for (i = 0, iLen = oTableGlobalTABLE.fnSettings().aoColumns.length; i < iLen; i++) {
                            var checked = $('.ColVis_collection:last').find("#" + i + "_").is(":checked");
                            _abVisCols.push(checked);
                        }
                        oTableGlobalTABLE.fnSettings().oLoadedState.abVisCols = _abVisCols;


                        //update the state to the database
                        $.ajax({
                            "url": '/Master/SaveGridState',
                            "type": "POST",
                            data: { Data: JSON.stringify(oTableGlobalTABLE.fnSettings().oLoadedState), ListName: _Listname },
                            "dataType": "json",
                            cache: false,
                            "success": function (json) {
                                o = json;
                                //oTableGlobalTABLE.fnDraw();
                                var Guid = DTName.replace("WOItemsTable", '');

                                $('#WOLineItems').html('');
                                $('#WOLineItems').load('/WorkOrder/LoadWOItems', { WorkOrderGUID: Guid }, function () {
                                    $('#DivLoading').hide();
                                });
                            }
                        });
                    }
                    else if (typeof (oTableProjectItems) != 'undefined') {

                        oTableProjectItems.fnSettings().oLoadedState = $.extend(true, {}, o);

                        //update the order of columns
                        var _Order = SortableButtonArray($('.ColVis_collection:last')); // $('#ColumnSortable').sortable("toArray");

                        var __Order = _Order.toString().split(",");

                        for (var i = 0; i < __Order.length; i++) {
                            __Order[i] = parseInt(__Order[i], 10);
                        }

                        oTableProjectItems.fnSettings().oLoadedState.ColReorder = __Order;

                        //update the visibility of columns
                        var _abVisCols = [];

                        for (i = 0, iLen = oTableProjectItems.fnSettings().aoColumns.length; i < iLen; i++) {
                            var checked = $('.ColVis_collection:last').find("#" + i + "_").is(":checked");
                            _abVisCols.push(checked);
                        }
                        oTableProjectItems.fnSettings().oLoadedState.abVisCols = _abVisCols;

                        //update the state to the database
                        $.ajax({
                            "url": '/Master/SaveGridState',
                            "type": "POST",
                            //data: { Data: JSON.stringify(oTable.fnSettings().oLoadedState), ListName: 'ToolList' },
                            data: { Data: JSON.stringify(oTableProjectItems.fnSettings().oLoadedState), ListName: _Listname },
                            "dataType": "json",
                            cache: false,
                            "success": function (json) {
                                o = json;
                                if (_Listname == 'WorkOrderDetails') {
                                    var Guid = DTName.replace("WOItemsTable", '');

                                    $('#WOLineItems').html('');
                                    $('#WOLineItems').load('/WorkOrder/LoadWOItems', { WorkOrderGUID: Guid }, function () {
                                        $('#DivLoading').hide();
                                    });
                                }
                                else if (_Listname == 'RequisitionDetails') {
                                    var ID = $('input#hdnReqId').val();

                                    $('#RequisitionLineItems').html('');
                                    $('#RequisitionLineItems').load('/Consume/LoadRequisitionItems', { RequisitionID: ID }, function () {
                                        $('#DivLoading').hide();
                                    });
                                }

                                //refresh the page
                                //  window.location.reload(true);
                            }
                        });

                    }
                    else if (typeof (oTableKitLineItems) != 'undefined') {

                        oTableKitLineItems.fnSettings().oLoadedState = $.extend(true, {}, o);

                        //update the order of columns
                        var _Order = SortableButtonArray($('.ColVis_collection:last')); // $('#ColumnSortable').sortable("toArray");

                        var __Order = _Order.toString().split(",");

                        for (var i = 0; i < __Order.length; i++) {
                            __Order[i] = parseInt(__Order[i], 10);
                        }

                        oTableKitLineItems.fnSettings().oLoadedState.ColReorder = __Order;

                        //update the visibility of columns
                        var _abVisCols = [];

                        for (i = 0, iLen = oTableKitLineItems.fnSettings().aoColumns.length; i < iLen; i++) {
                            var checked = $('.ColVis_collection:last').find("#" + i + "_").is(":checked");
                            _abVisCols.push(checked);
                        }
                        oTableKitLineItems.fnSettings().oLoadedState.abVisCols = _abVisCols;


                        //update the state to the database
                        $.ajax({
                            "url": '/Master/SaveGridState',
                            "type": "POST",
                            data: { Data: JSON.stringify(oTableKitLineItems.fnSettings().oLoadedState), ListName: _Listname },
                            "dataType": "json",
                            cache: false,
                            "success": function (json) {
                                o = json;
                                if (_Listname == 'KitLineItemList') {
                                    var Guid = $("body").find("input#hiddenGUID").val();
                                    $('#divKitLineItems').html('');
                                    $('#divKitLineItems').load('/Kit/LoadKitLineItemsByKitMasterDTO', { 'KitGUID': Guid }, function () {
                                        $('#DivLoading').hide();
                                    });
                                }
                            }
                        });

                    }
                    else if (typeof (oTableOrderLineItems) != 'undefined') {

                        oTableOrderLineItems.fnSettings().oLoadedState = $.extend(true, {}, o);

                        //update the order of columns
                        var _Order = SortableButtonArray($('.ColVis_collection:last')); // $('#ColumnSortable').sortable("toArray");

                        var __Order = _Order.toString().split(",");

                        for (var i = 0; i < __Order.length; i++) {
                            __Order[i] = parseInt(__Order[i], 10);
                        }

                        oTableOrderLineItems.fnSettings().oLoadedState.ColReorder = __Order;

                        //update the visibility of columns
                        var _abVisCols = [];

                        for (i = 0, iLen = oTableOrderLineItems.fnSettings().aoColumns.length; i < iLen; i++) {
                            var checked = $('.ColVis_collection:last').find("#" + i + "_").is(":checked");
                            _abVisCols.push(checked);
                        }
                        oTableOrderLineItems.fnSettings().oLoadedState.abVisCols = _abVisCols;
                        //update the state to the database
                        $.ajax({
                            "url": '/Master/SaveGridState',
                            "type": "POST",
                            data: { Data: JSON.stringify(oTableOrderLineItems.fnSettings().oLoadedState), ListName: _Listname },
                            "dataType": "json",
                            cache: false,
                            "success": function (json) {
                                o = json;
                                if (_Listname == 'OrderLineItemList') {
                                    //var Guid = $("body").find("input#hiddenGUID").val();
                                    $('#divOrderLineItems').html('');
                                    $('#divOrderLineItems').load(URL_Listget, { 'orderID': OrderID }, function () {
                                        $('#DivLoading').hide();
                                    });
                                }
                            }
                        });

                    }
                    else if (typeof (oTableGlobalTABLE) != 'undefined') {
                        oTableGlobalTABLE.fnSettings().oLoadedState = $.extend(true, {}, o);
                        //update the order of columns
                        var _Order = SortableButtonArray($('.ColVis_collection:last')); // $('#ColumnSortable').sortable("toArray");
                        var __Order = _Order.toString().split(",");
                        for (var i = 0; i < __Order.length; i++) {
                            __Order[i] = parseInt(__Order[i], 10);
                        }

                        oTableGlobalTABLE.fnSettings().oLoadedState.ColReorder = __Order;

                        //update the visibility of columns
                        var _abVisCols = [];

                        for (i = 0, iLen = oTableGlobalTABLE.fnSettings().aoColumns.length; i < iLen; i++) {
                            var checked = $('.ColVis_collection:last').find("#" + i + "_").is(":checked");
                            _abVisCols.push(checked);
                        }
                        oTableGlobalTABLE.fnSettings().oLoadedState.abVisCols = _abVisCols;


                        //update the state to the database
                        $.ajax({
                            "url": '/Master/SaveGridState',
                            "type": "POST",
                            data: { Data: JSON.stringify(oTableGlobalTABLE.fnSettings().oLoadedState), ListName: _Listname },
                            "dataType": "json",
                            cache: false,
                            "success": function (json) {
                                o = json;

                                if (_Listname == 'CheckinCheckOutList') {
                                    var Guid = $("body").find("input#hdnGuid").val();
                                    //$('#divKitLineItems').html('');
                                    //$('#divKitLineItems').load('~/Assets/CheckInCheckOutData', { 'ToolGUID': Guid }, function () {
                                    //    $('#DivLoading').hide();
                                    //});
                                    $("body").find("table#myDataTable tbody tr").each(function () {
                                        var tr = $(this);
                                        /// alert($(tr).attr("class"));
                                        if ($(tr).attr("class") != "odd" && $(tr).attr("class") != "even") {
                                            //alert($(tr).prev("tr").attr("class"));
                                            if (typeof ($(tr).prev("tr")) != undefined && typeof ($(tr)) != undefined) {
                                                Guid = $(tr).prev("tr").find("span#spnToolID").html();
                                                $(tr).find("td").html('');
                                                if (Guid != null) {
                                                    $(tr).find("td").load('/Assets/CheckInCheckOutData', { 'ToolGUID': Guid }, function () {
                                                        $('#DivLoading').hide();
                                                    });
                                                }
                                            }
                                        }
                                    });
                                    //oTableGlobalTABLE.fnDraw();
                                    //window.location.reload();
                                }
                                if (_Listname == 'ItemBinWiseSummaryList') {
                                    var Guid = $("body").find("input#hdnGuid").val();
                                    var id = $("body").find("input#hdnid").val();

                                    $("body").find("table#myDataTable tbody tr").each(function () {
                                        var tr = $(this);


                                        if ($(tr).attr("class") != "odd" && $(tr).attr("class") != "even" && $(tr).find("div.innerGrid").length > 0) {

                                            if (typeof ($(tr).prev("tr")) != undefined && typeof ($(tr)) != undefined) {
                                                Guid = $(tr).find("input#hdnGuid").val();
                                                id = $(tr).find("input#hdnid").val();
                                                //Guid = $(tr).prev("tr").find("span#spnToolID").html();
                                                $(tr).find("td").html('');
                                                if (Guid != null) {
                                                    $(tr).find("td").load('/Inventory/ItemBinWiseSummary', { 'ItemID': id, 'ItemGUID': Guid }, function () {
                                                        $('#DivLoading').hide();
                                                    });
                                                }
                                            }
                                        }
                                    });
                                    //oTableGlobalTABLE.fnDraw();
                                    //window.location.reload();
                                }

                                if (_Listname == 'ToolBinWiseSummaryList') {
                                    var Guid = $("body").find("input#hdnGuid").val();
                                    var id = $("body").find("input#hdnToolID").val();

                                    $("body").find("table#myDataTable tbody tr").each(function () {
                                        var tr = $(this);


                                        if ($(tr).attr("class") != "odd" && $(tr).attr("class") != "even" && $(tr).find("div.innerGrid").length > 0) {
                                            if (typeof ($(tr).prev("tr")) != undefined && typeof ($(tr)) != undefined) {
                                                Guid = $(tr).find("input#hdnGuid").val();
                                                id = $(tr).find("input#hdnToolID").val();
                                                $(tr).find("td").html('');
                                                if (Guid != null) {
                                                    $(tr).find("td").load('/Tool/GetLocationsMainGrid', { 'ToolID': id, 'ToolGUID': Guid }, function () {
                                                        $('#DivLoading').hide();
                                                    });
                                                }
                                            }
                                        }
                                    });
                                    //oTableGlobalTABLE.fnDraw();
                                    //window.location.reload();
                                }

                            }
                        });

                    }
                }
            }
        });
    }
}
function SortableButtonArray(ulColumnsOrder) {
    var sortableArray = '';

    $(ulColumnsOrder).children("button").each(function () {
        if (isNaN($(this).attr("id"))) {
            if (sortableArray != '') {
                sortableArray = sortableArray + "," + '0';
            }
            else {
                sortableArray = '0';
            }
        }
        else {
            if (sortableArray != '') {
                sortableArray = sortableArray + "," + $(this).attr("id");
            }
            else {
                sortableArray = $(this).attr("id");
            }
        }
    });
    return sortableArray;
}
function FillNarrowSearches(_TableName, _IsArchived, _IsDeleted) {
    switch (_TableName) {
        case "ItemMaster":
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: 'ItemMaster', TextFieldName: 'ItemType', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';

                    $("#ItemTypeCollapse").html('');
                    if (response.DDData != null) {
                        $.each(response.DDData, function (ValData, ValCount) {
                            var ArrData = ValData.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                        });
                    }
                    //if (response.dddata != null) {
                    //    $.each(response.dddata, function (i, val) {
                    //        if (i == "1")
                    //            s += '<option value="' + i + '"> item (' + val + ')' + '</option>';
                    //        if (i == "2" && gblactionname.tolowercase() != "itemmasterlist" && gblactionname.tolowercase() != "itemmasterpictureview")
                    //            s += '<option value="' + i + '"> quick list (' + val + ')' + '</option>';
                    //        if (i == "3")
                    //            s += '<option value="' + i + '"> kit (' + val + ')' + '</option>';
                    //        if (i == "4")
                    //            s += '<option value="' + i + '"> labor (' + val + ')' + '</option>';
                    //    });
                    //}
                    //Destroy widgets before reapplying the filter

                    $("#ItemTypeNarroDDL").empty();
                    $("#ItemTypeNarroDDL").append(s);

                    $("#ItemTypeNarroDDL").multiselect("refresh");
                    $("#ItemTypeNarroDDL").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("ItemTypeNarroDDL");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("ItemTypeNarroDDL");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: 'ItemMaster', TextFieldName: 'ItemTrackingType', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $("#ItemTrackingTypeCollapse").html('');

                    var s = '';
                    if (response.DDData != null) {
                        $.each(response.DDData, function (ValData, ValCount) {
                            var ArrData = ValData.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                        });

                    }

                    //if (response.DDData != null) {

                    //    $.each(response.DDData, function (ValData, val) {
                    //        var str = ValData.split('###');

                    //        if (str[1] == "1")
                    //            s += '<option value="' + str[1] + '"> No Tracking (' + val + ')' + '</option>';
                    //        if (str[1] == "2")
                    //            s += '<option value="' + str[1] + '"> ' + str[0] + ' (' + val + ')' + '</option>';
                    //        if (str[1] == "3")
                    //            s += '<option value="' + str[1] + '"> ' + str[0] + ' (' + val + ')' + '</option>';
                    //        if (str[1] == "4")
                    //            s += '<option value="' + str[1] + '"> ' + str[0] + ' (' + val + ')' + '</option>';
                    //    });
                    //}
                    //Destroy widgets before reapplying the filter

                    $("#ItemTrackingType").empty();
                    $("#ItemTrackingType").append(s);
                    $("#ItemTrackingType").multiselect("refresh");
                    $("#ItemTrackingType").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("ItemTrackingType");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("ItemTrackingType");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'SupplierName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullSupplier").empty();
                    $("#PullSupplier").append(s);
                    $("#PullSupplier").multiselect("refresh");
                    $("#PullSupplier").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullSupplier");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullSupplier");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Manufacturer', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });
                    $("#Manufacturer").empty();
                    $("#Manufacturer").append(s);
                    $("#Manufacturer").multiselect("refresh");
                    $("#Manufacturer").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("Manufacturer");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("Manufacturer");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'ItemLocation', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#ItemLocation").empty();
                    $("#ItemLocation").append(s);
                    $("#ItemLocation").multiselect("refresh");
                    $("#ItemLocation").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("ItemLocation");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("ItemLocation");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Category', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullCategory").empty();
                    $("#PullCategory").append(s);
                    $("#PullCategory").multiselect("refresh");
                    $("#PullCategory").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullCategory");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullCategory");
                }
            });
            setTimeout(function () {
                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": '/Inventory/ClearSession',
                    "success": function (retdata) {

                    }
                })

            }, 10000);
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: 'ItemMaster', TextFieldName: 'InventoryClassification', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    //$("#ItemTypeCollapse").html('');
                    if (response.DDData != null) {
                        $.each(response.DDData, function (ValData, ValCount) {
                            var ArrData = ValData.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                        });
                    }

                    $("#InventoryClassificationDDL").empty();
                    $("#InventoryClassificationDDL").append(s);
                    $("#InventoryClassificationDDL").multiselect("refresh");
                    $("#InventoryClassificationDDL").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("InventoryClassificationDDL");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("InventoryClassificationDDL");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: 'ItemMaster', TextFieldName: 'StockStatus', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    //$("#StockStatusCollapse").html('');
                    if (response.DDData != null) {
                        $.each(response.DDData, function (ValData, ValCount) {
                            var ArrData = ValData.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                        });
                    }

                    //$("#ItemTypeCollapse").html('');
                    //if (response.DDData != null) {
                    //    $.each(response.DDData, function (ValData, val) {

                    //        var str = ValData.split('###');
                    //        //if (str[1] == "0")
                    //        //    s += '<option value="' + str[1] + '"> </option>';
                    //        if (str[1] == "1")
                    //            s += '<option value="' + str[1] + '"> ' + str[0] + '  (' + val + ')' + '</option>';
                    //        if (str[1] == "2")
                    //            s += '<option value="' + str[1] + '"> ' + str[0] + ' (' + val + ')' + '</option>';
                    //        if (str[1] == "3")
                    //            s += '<option value="' + str[1] + '"> ' + str[0] + ' (' + val + ')' + '</option>';
                    //        if (str[1] == "4")
                    //            s += '<option value="' + str[1] + '"> ' + str[0] + ' (' + val + ')' + '</option>';
                    //    });
                    //}
                    ////Destroy widgets before reapplying the filter
                    $("#StockStatus").empty();
                    $("#StockStatus").append(s);
                    //$("#StockStatus")[0].selectedIndex = -1;
                    $("#StockStatus").multiselect("refresh");
                    $("#StockStatus").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("StockStatus");
                    if (StockStatusTypeNarroValues != null && StockStatusTypeNarroValues != undefined) {
                        for (var i = 0; i < StockStatusTypeNarroValues.length; i++) {
                            //$("#ui-multiselect-StockStatus-option-" + StockStatusTypeNarroValues[i]).attr("checked", "checked").attr("selected", 1).attr("aria-selected", "true");
                            $("#StockStatus").multiselect(
                                {
                                    selectedText: function (i, numTotal, checkedItems) {
                                        return StockStatus + ' ' + i + ' ' + selected;
                                    }
                                });
                            //$("#StockStatus option[value='" + StockStatusTypeNarroValues[i] + "']").attr("checked", "checked").attr("selected", 1);
                        }
                    }
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("StockStatus");
                }
            });
            break;
        case "ItemBinMaster":
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'ItemType', IsArchived: false, IsDeleted: false },
                success: function (response) {
                    var s = '';

                    $("#ItemTypeCollapse").html('');
                    if (response.DDData != null) {
                        $.each(response.DDData, function (ValData, ValCount) {
                            var ArrData = ValData.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                        });
                    }

                    $("#ItemTypeNarroDDL").empty();
                    $("#ItemTypeNarroDDL").append(s);
                    $("#ItemTypeNarroDDL").multiselect("refresh");
                    $("#ItemTypeNarroDDL").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("ItemTypeNarroDDL");
                },
                error: function (response) {
                    _NarrowSearchSave.setControlValue("ItemTypeNarroDDL");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'ItemTrackingType', IsArchived: false, IsDeleted: false },
                success: function (response) {
                    var s = '';
                    $("#ItemTrackingTypeCollapse").html('');

                    var s = '';
                    if (response.DDData != null) {
                        $.each(response.DDData, function (ValData, ValCount) {
                            var ArrData = ValData.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                        });

                    }


                    $("#ItemTrackingType").empty();
                    $("#ItemTrackingType").append(s);
                    $("#ItemTrackingType").multiselect("refresh");
                    $("#ItemTrackingType").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("ItemTrackingType");

                },
                error: function (response) {
                    _NarrowSearchSave.setControlValue("ItemTrackingType");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'SupplierName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullSupplier").empty();
                    $("#PullSupplier").append(s);
                    $("#PullSupplier").multiselect("refresh");
                    $("#PullSupplier").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullSupplier");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullSupplier");
                }
            });


            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Manufacturer', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });
                    $("#Manufacturer").empty();
                    $("#Manufacturer").append(s);
                    $("#Manufacturer").multiselect("refresh");
                    $("#Manufacturer").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("Manufacturer");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("Manufacturer");
                }
            });

            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'ItemLocation', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#ItemLocation").empty();
                    $("#ItemLocation").append(s);
                    $("#ItemLocation").multiselect("refresh");
                    $("#ItemLocation").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("ItemLocation");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("ItemLocation");
                }
            });

            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Category', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullCategory").empty();
                    $("#PullCategory").append(s);
                    $("#PullCategory").multiselect("refresh");
                    $("#PullCategory").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullCategory");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullCategory");
                }
            });

            setTimeout(function () {
                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": '/Inventory/ClearSession',
                    "success": function (retdata) {

                    }
                })

            }, 10000);

            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'InventoryClassification', IsArchived: false, IsDeleted: false },
                success: function (response) {
                    var s = '';
                    $("#ItemTypeCollapse").html('');
                    if (response.DDData != null) {
                        $.each(response.DDData, function (ValData, ValCount) {
                            var ArrData = ValData.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                        });
                    }

                    $("#InventoryClassificationDDL").empty();
                    $("#InventoryClassificationDDL").append(s);
                    $("#InventoryClassificationDDL").multiselect("refresh");
                    $("#InventoryClassificationDDL").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("InventoryClassificationDDL");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("InventoryClassificationDDL");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'StockStatus', IsArchived: false, IsDeleted: false },
                success: function (response) {
                    var s = '';
                    $("#StockStatusCollapse").html('');
                    if (response.DDData != null) {
                        $.each(response.DDData, function (ValData, ValCount) {
                            var ArrData = ValData.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                        });
                    }

                    ////Destroy widgets before reapplying the filter
                    $("#StockStatus").empty();
                    $("#StockStatus").append(s);
                    //$("#StockStatus")[0].selectedIndex = -1;
                    $("#StockStatus").multiselect("refresh");
                    $("#StockStatus").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("StockStatus");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("StockStatus");
                }
            });
            break;
        case "PullMaster":
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Category', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullCategory").empty();
                    $("#PullCategory").append(s);
                    $("#PullCategory").multiselect("refresh");
                    $("#PullCategory").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullCategory");

                    var currentDataCount = $('select#PullCategory option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allpullcat").hide();
                        $(".morepullcat").hide();
                    }

                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullCategory");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'SupplierName', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullSupplier").empty();
                    $("#PullSupplier").append(s);
                    $("#PullSupplier").multiselect("refresh");
                    $("#PullSupplier").multiselectfilter("refresh");

                    _NarrowSearchSave.setControlValue("PullSupplier");

                    var currentDataCount = $('select#PullSupplier option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allpullsupp").hide();
                        $(".morepullsupp").hide();
                    }
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullSupplier");
                }
            });


            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Manufacturer', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });
                    $("#Manufacturer").empty();
                    $("#Manufacturer").append(s);
                    $("#Manufacturer").multiselect("refresh");
                    $("#Manufacturer").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("Manufacturer");

                    var currentDataCount = $('select#Manufacturer option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allpullman").hide();
                        $(".morepullman").hide();
                    }
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("Manufacturer");
                }
            });

            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'ProjectSpend', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullProjectSpend").empty();
                    $("#PullProjectSpend").append(s);
                    $("#PullProjectSpend").multiselect("refresh");
                    $("#PullProjectSpend").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullProjectSpend");

                    var currentDataCount = $('select#PullProjectSpend option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allpullpsm").hide();
                        $(".morepullpsm").hide();
                    }
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullProjectSpend");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'WorkOrder', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullWorkOrder").empty();
                    $("#PullWorkOrder").append(s);
                    $("#PullWorkOrder").multiselect("refresh");
                    $("#PullWorkOrder").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullWorkOrder");
                    var currentDataCount = $('select#PullWorkOrder option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allpullwo").hide();
                        $(".morepullwo").hide();
                    }
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullWorkOrder");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Requisition', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullRequistion").empty();
                    $("#PullRequistion").append(s);
                    $("#PullRequistion").multiselect("refresh");
                    $("#PullRequistion").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullRequistion");
                    var currentDataCount = $('select#PullRequistion option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allpullreq").hide();
                        $(".morepullreq").hide();
                    }
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullRequistion");
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'OrderNumber', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullOrderNumber").empty();
                    $("#PullOrderNumber").append(s);
                    $("#PullOrderNumber").multiselect("refresh");
                    $("#PullOrderNumber").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullOrderNumber");

                    var currentDataCount = $('select#PullOrderNumber option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allpullordnm").hide();
                        $(".morepullordnm").hide();
                    }
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullOrderNumber");
                }
            });

            ///// Pull Supplier Account Number Start /////            
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'SupplierAccountNumber', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullSupplierAccountNumber").empty();
                    $("#PullSupplierAccountNumber").append(s);
                    $("#PullSupplierAccountNumber").multiselect("refresh");
                    $("#PullSupplierAccountNumber").multiselectfilter("refresh");
                    _NarrowSearchSave.setControlValue("PullSupplierAccountNumber");
                    var currentDataCount = $('select#PullSupplierAccountNumber option').length;
                    if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                        $(".allpullsupplieraccountnm").hide();
                        $(".morepullsupplieraccountnm").hide();
                    }
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullSupplierAccountNumber");
                }
            });


            ////  Pull Supplier Account Number End /////


            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'ActionType', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[0] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullActionType").empty();
                    $("#PullActionType").append(s);
                    $("#PullActionType").multiselect("refresh");
                    $("#PullActionType").multiselectfilter("refresh");

                    _NarrowSearchSave.setControlValue("PullActionType");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullActionType");
                }
            });
            //alert('hi 1');
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Consignment', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, val) {
                        var str = ValData.split('[###]');

                        if (str[1] == "0")
                            s += '<option value="' + str[1] + '">' + str[0] + '</option>';
                        if (str[1] == "1")
                            s += '<option value="' + str[1] + '">' + str[0] + '</option>';
                    });


                    //Destroy widgets before reapplying the filter
                    $("#PullConsignment").empty();
                    $("#PullConsignment").append(s);
                    $("#PullConsignment").multiselect("refresh");
                    $("#PullConsignment").multiselectfilter("refresh");

                    _NarrowSearchSave.setControlValue("PullConsignment");
                },
                error: function (response) {
                    // through errror message
                    _NarrowSearchSave.setControlValue("PullConsignment");
                }
            });
            setTimeout(function () {
                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": '/Pull/ClearPullSession',
                    "success": function (retdata) {

                    }
                })

            }, 10000);
            break;

        case "BOMItemMaster":
            //$.ajax({
            //    'url': '/Master/GetNarrowDDData',
            //    data: { TableName: 'BOMItemMaster', TextFieldName: 'ItemType', IsArchived: false, IsDeleted: false },
            //    success: function (response) {
            //        var s = '';

            //        $("#ItemTypeCollapse").html('');
            //        if (response.DDData != null) {
            //            $.each(response.DDData, function (i, val) {
            //                if (i == "1")
            //                    s += '<option value="' + i + '"> Item (' + val + ')' + '</option>';
            //                if (i == "2" && gblActionName.toLowerCase() != "itemmasterlist" && gblActionName.toLowerCase() != "itemmasterpictureview")
            //                    s += '<option value="' + i + '"> Quick List (' + val + ')' + '</option>';
            //                if (i == "3")
            //                    s += '<option value="' + i + '"> Kit (' + val + ')' + '</option>';
            //                if (i == "4")
            //                    s += '<option value="' + i + '"> Labor (' + val + ')' + '</option>';
            //            });
            //        }
            //        //Destroy widgets before reapplying the filter

            //        $("#ItemTypeNarroDDL").empty();
            //        $("#ItemTypeNarroDDL").append(s);
            //        $("#ItemTypeNarroDDL").multiselect("refresh");
            //        $("#ItemTypeNarroDDL").multiselectfilter("refresh");
            //    },
            //    error: function (response) {
            //        // through errror message
            //    }
            //});



            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Manufacturer', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });
                    $("#Manufacturer").empty();
                    $("#Manufacturer").append(s);
                    $("#Manufacturer").multiselect("refresh");
                    $("#Manufacturer").multiselectfilter("refresh");
                },
                error: function (response) {
                    // through errror message
                }
            });
            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'ItemLocation', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#ItemLocation").empty();
                    $("#ItemLocation").append(s);
                    $("#ItemLocation").multiselect("refresh");
                    $("#ItemLocation").multiselectfilter("refresh");
                },
                error: function (response) {
                    // through errror message
                }
            });

            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: _TableName, TextFieldName: 'Category', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
                success: function (response) {
                    var s = '';
                    $.each(response.DDData, function (ValData, ValCount) {
                        var ArrData = ValData.toString().split('[###]');
                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                    });

                    //Destroy widgets before reapplying the filter
                    $("#PullCategory").empty();
                    $("#PullCategory").append(s);
                    $("#PullCategory").multiselect("refresh");
                    $("#PullCategory").multiselectfilter("refresh");
                },
                error: function (response) {
                    // through errror message
                }
            });



            $.ajax({
                'url': '/Master/GetNarrowDDData',
                data: { TableName: 'BOMItemMaster', TextFieldName: 'InventoryClassification', IsArchived: false, IsDeleted: false },
                success: function (response) {
                    var s = '';
                    $("#ItemTypeCollapse").html('');
                    if (response.DDData != null) {
                        $.each(response.DDData, function (ValData, ValCount) {
                            var ArrData = ValData.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                        });
                    }

                    $("#InventoryClassificationDDL").empty();
                    $("#InventoryClassificationDDL").append(s);
                    $("#InventoryClassificationDDL").multiselect("refresh");
                    $("#InventoryClassificationDDL").multiselectfilter("refresh");
                },
                error: function (response) {
                    // through errror message
                }
            });

            break;
    }


}

function FillCommonNarrowSearch(tableName, companyID, roomID, _IsArchived, _IsDeleted, _RequisitionCurrentTab) {
    if (tableName != "CartItemList" && tableName != "UserMaster" && tableName != "RoleMaster" && tableName != "Room") {
        $.ajax({
            'url': '/Master/GetNarrowDDData',
            data: { TableName: tableName, TextFieldName: 'CreatedBy', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
            success: function (response) {
                var s = '';
                if (response.DDData != null) {

                    if (tableName == "ProjectList" || tableName == "CartItem" || tableName == "CartItemList" || tableName == "ItemMaster" || tableName == "MaterialStaging" || tableName == "EnterpriseMaster" || tableName == "CompanyMaster" || tableName == "InventoryCountList" || tableName == "AssetToolSchedulerList" || tableName == "WorkOrder" || tableName == "BinMaster" || tableName == "PullMaster" || tableName == "NotificationMasterList" || tableName == "FTPMasterList"
                        || tableName == "ReportMasterList" || tableName == "ItemMasterBinList" || tableName == "RequisitionMaster" || tableName == "PermissionTemplateList" || tableName == "ToolMaster" || tableName == "MoveMaterial" || tableName == "BarcodeMaster" || tableName == "PullPoMasterList" || tableName == "AssetMaster" || tableName == "KitToolMaster" || tableName == "KitToolMasterNew" || tableName == "ToolMasterNew"
                        || tableName == "BOMItemMaster"
                        || tableName == "CustomerMaster"
                        || tableName == "AssetCategoryMaster" || tableName == "EnterpriseQLMaster" || tableName == "ToolCategoryMaster" || tableName == "CostUOMMaster" || tableName == "BomCostUOMMaster" || tableName == "GLAccountMaster" || tableName == "BomGLAccountMaster"
                        || tableName == "InventoryClassificationMaster" || tableName == "BomInventoryClassificationMaster" || tableName == "ManufacturerMaster" || tableName == "WrittenOffCategory" || tableName == "BomManufacturerMaster" || tableName == "ShipViaMaster" || tableName == "SupplierMaster" || tableName == "BomSupplierMaster"
                        || tableName == "CategoryMaster" || tableName == "BomCategoryMaster"
                        || tableName == "KitMaster"
                        || tableName == "VenderMaster"
                        || tableName == "UnitMaster"
                        || tableName == "LocationMaster"
                        || tableName == "TechnicianMaster"
                        || tableName == "BomUnitMaster" || tableName == "ItemBinMaster" || tableName == "QuoteMaster") {
                        $.each(response.DDData, function (i, val) {
                            var ArrData = i.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                        });
                    }
                    else {
                        $.each(response.DDData, function (key, val) {
                            s += '<option value="' + key + '">' + key + ' (' + val + ')' + '</option>';
                        });
                    }
                }

                //Destroy widgets before reapplying the filter
                $("#UserCreated").empty();
                $("#UserCreated").append(s);
                $("#UserCreated").multiselect("refresh");
                _NarrowSearchSave.setControlValue("UserCreated");
            },
            error: function (response) {
                // through errror message            
            }
        });

        $.ajax({
            'url': '/Master/GetNarrowDDData',
            data: { TableName: tableName, TextFieldName: 'LastUpdatedBy', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _RequisitionCurrentTab },
            success: function (response) {
                var s = '';
                if (response.DDData != null) {
                    if (tableName == "CartItem" || tableName == "CartItemList" || tableName == "ItemMaster" || tableName == "MaterialStaging" || tableName == "EnterpriseMaster" || tableName == "CompanyMaster" || tableName == "InventoryCountList" || tableName == "AssetToolSchedulerList" || tableName == "WorkOrder" || tableName == "BinMaster" || tableName == "PullMaster" || tableName == "NotificationMasterList" || tableName == "FTPMasterList"
                        || tableName == "ReportMasterList" || tableName == "ItemMasterBinList" || tableName == "RequisitionMaster" || tableName == "PermissionTemplateList" || tableName == "ToolMaster" || tableName == "KitToolMaster" || tableName == "MoveMaterial" || tableName == "BarcodeMaster" || tableName == "PullPoMasterList" || tableName == "AssetMaster" || tableName == "ProjectList" || tableName == "KitToolMasterNew" || tableName == "ToolMasterNew"
                        || tableName == "BOMItemMaster"
                        || tableName == "CustomerMaster"
                        || tableName == "AssetCategoryMaster" || tableName == "EnterpriseQLMaster" || tableName == "ToolCategoryMaster" || tableName == "CostUOMMaster" || tableName == "BomCostUOMMaster" || tableName == "GLAccountMaster" || tableName == "BomGLAccountMaster"
                        || tableName == "InventoryClassificationMaster" || tableName == "BomInventoryClassificationMaster" || tableName == "ManufacturerMaster" || tableName == "WrittenOffCategory" || tableName == "BomManufacturerMaster" || tableName == "ShipViaMaster" || tableName == "SupplierMaster" || tableName == "BomSupplierMaster"
                        || tableName == "CategoryMaster" || tableName == "BomCategoryMaster"
                        || tableName == "KitMaster"
                        || tableName == "VenderMaster"
                        || tableName == "UnitMaster"
                        || tableName == "LocationMaster"
                        || tableName == "TechnicianMaster"
                        || tableName == "BomUnitMaster" || tableName == "ItemBinMaster" || tableName == "QuoteMaster" ) {
                        $.each(response.DDData, function (i, val) {
                            var ArrData = i.toString().split('[###]');
                            s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + val + ')' + '</option>';
                        });
                    }
                    else {
                        $.each(response.DDData, function (i, val) {
                            s += '<option value="' + i + '">' + i + ' (' + val + ')' + '</option>';
                        });
                    }

                }

                //Destroy widgets before reapplying the filter
                $("#UserUpdated").empty();
                $("#UserUpdated").append(s);
                $("#UserUpdated").multiselect("refresh");
                _NarrowSearchSave.setControlValue("UserUpdated");
            },
            error: function (response) {
                // through errror message
            }
        });
    }

}
function CheckAll(currentAnchor) {
    var CurrentDiv = $(currentAnchor).prev("input#hiddenDivName").val();

    $("body").find('ul#' + CurrentDiv + ' li').each(function () {
        if ($.trim($(this).attr("class")) == "ui-state-default") {
            if ($(this).find("input").attr("disabled") != "disabled") {
                $(this).find("input").attr("checked", "checked");
            }
        }
    });
}
function UnCheckAll(currentAnchor) {
    var CurrentDiv = $(currentAnchor).prev().prev("input#hiddenDivName").val();

    $("body").find('ul#' + CurrentDiv + ' li').each(function () {

        if ($.trim($(this).attr("class")) == "ui-state-default") {

            if ($(this).find("input").attr("disabled") != "disabled") {

                $(this).find("input").removeAttr("checked", "checked");
            }
        }
    });
}



var GetColumnIndex1 = function (ColumnName) {
    if (typeof (objColumnsMI) != "undefined" && objColumnsMI != null) {
        return objColumnsMI[ColumnName];
    }
    else if (typeof (objColumns) != "undefined" && objColumns != null) {
        return objColumns[ColumnName];
    }
};

var GetDetailGridColumnIndex = function (ColumnName) {
    return objDetailGridColumns[ColumnName];
};


function GetGridChildGridColumnsObject(dataTableName) {
    var blankNameFlag = 0;

    var str = '{';
    $('#' + dataTableName + ' thead tr:first th').each(function (i) {
        if (i > 0)
            str += ',';
        if ($.trim($(this).text()) == '') {
            str += '"' + 'blankFieldName' + blankNameFlag + '" : ' + i;
            blankNameFlag++;
        }
        else {
            str += '"' + $.trim($(this).text()) + '" : ' + i;
        }
    });
    str += '}';


    var columns = $.parseJSON(str);
    return columns;

}

function GetGridCountLineItemChildGridColumnsObject(dataTableName) {
    //BarcodeSearch_CurrentDataTableName = dataTableName;
    var blankNameFlag = 0;
    var tmpColumnsArray = new Array();
    var duplicatecount = 1;

    var str = '{';
    $('#' + dataTableName + ' thead tr:first th').each(function (i) {
        var hdr = $.trim($(this).text());

        if (i > 0)
            str += ',';
        if (hdr == '') {
            str += '"' + 'blankFieldName' + blankNameFlag + '" : ' + i;
            blankNameFlag++;
        }
        else {
            if ($.inArray(hdr, tmpColumnsArray) > -1) {
                hdr = hdr + "_" + duplicatecount;
                duplicateColumnArray.push(hdr);
                duplicatecount++;
            }
            str += '"' + hdr + '" : ' + i;
            tmpColumnsArray.push(hdr);
        }

    });
    str += '}';
    gridDuplicateColumnCountForCountLineItems = duplicatecount - 1;
    var columns = $.parseJSON(str);
    return columns;
}
var GetDetailGridColumnOrderIndex = function (ColumnName, ColumnObjectName) {
    //alert(eval("objDetailGridColumns")[ColumnName]);
    return eval(ColumnObjectName)[ColumnName];
};

function GenerateDetailGridColumns(DTName, ListName, ColumnObjName) {
    $('#ulDGColumnReOrder li').each(function (index) {
        $(this).remove();
    });
    for (i = 0, iLen = $('#' + DTName).dataTable().fnSettings().aoColumns.length; i < iLen; i++) {
        var oColumn = $('#' + DTName).dataTable().fnSettings().aoColumns[i];
        var style = '';
        var LiStyle = 'display:block';
        var LiClassName = 'ui-state-default'

        //if (oColumn.sClass.indexOf('NotHide') >= 0) {
        //if ($(oColumn.nTh).hasClass('NotHide')) {
        if (oColumn.sClass.indexOf('NotHide') >= 0 || (oColumn.nTh != null && oColumn.nTh.className.indexOf('NotHide') >= 0)) {
            //style = ' style="display:none" ';
            style = ' disabled="disabled" ';
            //LiStyle = 'display:none';
            LiClassName = LiClassName + ' HiddenLi';
        }

        var li = document.createElement('li');

        li.id = GetDetailGridColumnOrderIndex(oColumn.sTitle.trim(), ColumnObjName);
        li.className = LiClassName;
        li.innerHTML = oColumn.sTitle.trim();
        li.style = LiStyle;
        if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
            if (oColumn.sTitle.trim() != '') {
                li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetDetailGridColumnOrderIndex(oColumn.sTitle.trim(), ColumnObjName) + '_" />' + oColumn.sTitle.trim();
            }
            else {
                li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + GetDetailGridColumnOrderIndex('blankFieldName' + ColumnObjName) + '_" />' + oColumn.sTitle.trim();
                blankNUmber++;
            }
        }
        else {
            if (oColumn.bVisible) {
                if (li.id == 1) {
                    li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetDetailGridColumnOrderIndex(oColumn.sTitle.trim(), ColumnObjName) + '_" />' + oColumn.sTitle.trim();
                } else {
                    li.innerHTML = '<input type="checkbox" class="checkBox" checked="checked" id="' + GetDetailGridColumnOrderIndex(oColumn.sTitle.trim(), ColumnObjName) + '_" />' + oColumn.sTitle.trim();
                }
            }
            else
                li.innerHTML = '<input type="checkbox" class="checkBox" id="' + GetDetailGridColumnOrderIndex(oColumn.sTitle.trim(), ColumnObjName) + '_" />' + oColumn.sTitle.trim();
        }

        $('#ulDGColumnReOrder').append(li);
    }
    if ($('#ulDGColumnReOrder').find('#DTName').length > 0) {
        $('#ulDGColumnReOrder').find('#DTName').remove();
    }
    if ($('#ulDGColumnReOrder').find('#ListName').length > 0) {
        $('#ulDGColumnReOrder').find('#ListName').remove();
    }

    var strHidn = '<input type="hidden" id="DTName" value=' + DTName + '  /><input type="hidden" id="ListName" value=' + ListName + '  />';
    $('#ulDGColumnReOrder').append(strHidn);
    var div = document.createElement('div');
    div.id = "CheckAll";
    //li.className = 'ui-state-default';
    //    li.innerHTML = oColumn.sTitle.trim();
    div.innerHTML = "<a href='javascript:;' onclick='CheckAllDetailGrid(this);'  id='CheckAll' >" + ResCheckALL + "</a>&nbsp;<a href='javascript:;' onclick='UnCheckAllDetailGrid(this);' id='UnCheckAll' >" + ResUnCheckALL + "</a>" +
        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked'/>" + ResShowAllHidden;
    $('div.divdetailsortableContainer').find("div#CheckAll").remove();
    $('div.divdetailsortableContainer').prepend(div);
}

function GenerateDetailGridCountLineColumns(DTName, ListName, ColumnObjName) {
    var tempDuplicateColumns = new Array();
    var processedColumnIndex = new Array();
    //clear the old elements     
    var blankNUmber = 0;
    $('#ulDGColumnReOrder li').each(function (index) {
        $(this).remove();
    });

    var strHidn = '<input type="hidden" id="DTName" value=' + DTName + '  /><input type="hidden" id="ListName" value=' + ListName + '  />';
    $('#ulDGColumnReOrder').append(strHidn);

    var div = document.createElement('div');
    div.id = "CheckAll";

    div.innerHTML = "<a href='javascript:;' onclick='CheckAllDetailGrid(this);'  id='CheckAll' >" + ResCheckALL + "</a>&nbsp;<a href='javascript:;' onclick='UnCheckAllDetailGrid(this);' id='UnCheckAll' >" + ResUnCheckALL + "</a>" +
        "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='ShowAllHidden(this);' id='ShowAllHidden' checked='checked'/>" + ResShowAllHidden;
    $('div.divdetailsortableContainer').find("div#CheckAll").remove();
    $('div.divdetailsortableContainer').prepend(div);
    //get current columns order and generate li sortable accordingly


    var datatableColumns = $('#' + DTName).dataTable().fnSettings().aoColumns;

    for (i = 0, iLen = datatableColumns.length; i < iLen; i++) {
        var oColumn = datatableColumns[i];
        var style = '';
        var LiStyle = 'display:block';
        var LiClassName = 'ui-state-default'
        if (oColumn.sClass.indexOf('NotHide') >= 0) {
            style = ' disabled="disabled" ';
            LiClassName = LiClassName + ' HiddenLi';
        }

        var colindxbyname = '';
        if (oColumn.sTitle.trim() != '') {
            var isDuplicateHeader = false;

            if (gridDuplicateColumnCountForCountLineItems != null && gridDuplicateColumnCountForCountLineItems != undefined && gridDuplicateColumnCountForCountLineItems > 0) {
                for (duplcnt = 1; duplcnt <= gridDuplicateColumnCountForCountLineItems; duplcnt++) {
                    var columnNameStr = oColumn.sTitle.trim() + "_" + duplcnt;
                    var isDuplicateColumnProcessed = jQuery.inArray(columnNameStr, tempDuplicateColumns);

                    if (isDuplicateColumnProcessed < 0) {
                        var isKeyFound = jQuery.inArray(columnNameStr, duplicateColumnArray);

                        if (isKeyFound != undefined && isKeyFound != null && !isNaN(isKeyFound) && isKeyFound >= 0) {
                            var tmpColumnIndex = GetDetailGridColumnOrderIndex(oColumn.sTitle.trim(), ColumnObjName);

                            if (jQuery.inArray(tmpColumnIndex, processedColumnIndex) < 0) {
                                isDuplicateHeader = true;
                                colindxbyname = tmpColumnIndex;
                            }
                            else {
                                isDuplicateHeader = true;
                                colindxbyname = GetDetailGridColumnOrderIndex(columnNameStr, ColumnObjName);
                                tempDuplicateColumns.push(columnNameStr);
                            }

                        }
                    }
                }

                if (!isDuplicateHeader) {
                    colindxbyname = GetDetailGridColumnOrderIndex(oColumn.sTitle.trim(), ColumnObjName);
                }
            }
            else {
                colindxbyname = GetDetailGridColumnOrderIndex(oColumn.sTitle.trim(), ColumnObjName);
            }
        }
        else {
            colindxbyname = GetDetailGridColumnOrderIndex('blankFieldName' + blankNUmber, ColumnObjName);
        }

        processedColumnIndex.push(colindxbyname);

        if (gblColumnsToHideinPopUp == 'True') {

            var li = document.createElement('li');
            li.id = colindxbyname;
            li.className = LiClassName;
            li.innerHTML = oColumn.sTitle.trim();
            li.style = LiStyle;
            if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            else {

                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                }
                else {

                    li.innerHTML = '<input type="checkbox" class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    blankNUmber++;
                }
            }
            $('#ulDGColumnReOrder').append(li);
        }
        else {

            if (jQuery.inArray(colindxbyname, ColumnsToHideinPopUp) < 0) {

                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                li.style = LiStyle;
                if (oColumn.bVisible || oColumn.sClass.indexOf('NotHide') >= 0) {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" checked="checked" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    }
                }

                else {
                    if (oColumn.sTitle.trim() != '') {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    }
                    else {
                        li.innerHTML = '<input type="checkbox" ' + style + ' class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                    }
                }

                $('#ulDGColumnReOrder').append(li);
            }
            else {
                var li = document.createElement('li');
                li.id = colindxbyname;
                li.className = LiClassName;
                li.innerHTML = oColumn.sTitle.trim();
                if (oColumn.sTitle.trim() != '') {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                }
                else {
                    li.innerHTML = '<input type="checkbox" disabled="disabled" class="checkBox" id="' + colindxbyname + '_" />' + oColumn.sTitle.trim();
                }
                $(li).hide();
                $('#ulDGColumnReOrder').append(li);
            }
        }
    }
}



//$('#divDetailGridReorderPopup').off('click', 'input#btnSaveDetailGridColumnOrder');
//$('#divDetailGridReorderPopup').on('click', 'input#btnSaveDetailGridColumnOrder', function () {
$(document).off('click', 'input#btnSaveDetailGridColumnOrder');
$(document).on('click', 'input#btnSaveDetailGridColumnOrder', function () {
    var DTName = $('#divDetailGridReorderPopup').find('#DTName').val();
    var _ListName = $('#divDetailGridReorderPopup').find('#ListName').val();
    UpdateDetailGridColumnOrder(DTName, _ListName);
});

function UpdateDetailGridColumnOrder(DTName, _ListName) {
    var _Order = SortableArray($('#ulDGColumnReOrder')); //$('#ulDGColumnReOrder').sortable("toArray");
    var __Order = _Order.toString().split(",");
    for (var i = 0; i < __Order.length; i++) {
        __Order[i] = parseInt(__Order[i], 10);
    }

    if ($('#' + DTName).dataTable().fnSettings().oLoadedState === null) {
        //$("#divDetailGridReorderPopup").dialog("close");
        //return;
        $.ajax({
            "url": '/Master/LoadGridState',
            data: { ListName: _ListName },
            "dataType": "json",
            cache: false,
            "async": false,
            "success": function (json) {
                o = JSON.parse(json.jsonData);
                $('#' + DTName).dataTable().fnSettings().oLoadedState = $.extend(true, {}, o);
                //FillDetailGridDiv();
            }
        });
    }
    $('#' + DTName).dataTable().fnSettings().oLoadedState.ColReorder = __Order;

    var _abVisCols = [];

    for (i = 0, iLen = $('#' + DTName).dataTable().fnSettings().aoColumns.length; i < iLen; i++) {
        //var checked = $("#" + i + "_").is(":checked");
        var checked = $('#ulDGColumnReOrder').find('input.checkBox[id="' + i + '_"]').is(":checked");
        _abVisCols.push(checked);
    }
    $('#' + DTName).dataTable().fnSettings().oLoadedState.abVisCols = _abVisCols;
    var pageSize = $('div#' + DTName + '_length').find('select[name="' + DTName + '_length"]').val()
    if (!isNaN(pageSize) && parseInt(pageSize) > 0)
        $('#' + DTName).dataTable().fnSettings().oLoadedState.iLength = pageSize;

    $.ajax({
        "url": '/Master/SaveGridState',
        data: { Data: JSON.stringify($('#' + DTName).dataTable().fnSettings().oLoadedState), ListName: _ListName },
        "dataType": "json",
        cache: false,
        "async": false,
        "success": function (json) {
            o = json;
            if (_ListName == "WorkOrderDetails") {
                FillWODetailGridDiv();
            }
            else {
                FillDetailGridDiv();
            }
        }
    });
}
function CheckAllDetailGrid(currentAnchor) {
    var CurrentDiv = $(currentAnchor).prev("input#hiddenDivName").val();

    $("div#divDetailGridReorderPopup").find('ul#ulDGColumnReOrder li').each(function () {
        if ($.trim($(this).attr("class")) == "ui-state-default") {
            if ($(this).find("input").attr("disabled") != "disabled") {
                $(this).find("input").attr("checked", "checked");
            }
        }
    });
}
function UnCheckAllDetailGrid(currentAnchor) {
    var CurrentDiv = $(currentAnchor).prev().prev("input#hiddenDivName").val();

    $("div#divDetailGridReorderPopup").find('ul#ulDGColumnReOrder li').each(function () {

        if ($.trim($(this).attr("class")) == "ui-state-default") {

            if ($(this).find("input").attr("disabled") != "disabled") {

                $(this).find("input").removeAttr("checked", "checked");
            }
        }
    });
}

function ShowAllHidden(currentChk) {
    if ($(currentChk).is(":checked") == true) {
        $('.HiddenLi').show();
    }
    else {
        $('.HiddenLi').hide();
    }
}
function ClearVariables() {
    UserCreatedNarroValues = '';
    UserUpdatedNarroValues = '';
    $('#DateCFromIM').val('');
    $('#DateUFromIM').val('');
    UserUDF1NarrowValues = '';
    UserUDF2NarrowValues = '';
    UserUDF3NarrowValues = '';
    UserUDF4NarrowValues = '';
    UserUDF5NarrowValues = '';
    UserUDF6NarrowValues = '';
    UserUDF7NarrowValues = '';
    UserUDF8NarrowValues = '';
    UserUDF9NarrowValues = '';
    UserUDF10NarrowValues = '';
    PullSupplierNarroValues = '';
    BinNarroValuesIM = '';
    ManufacturerNarroValues = '';
    PullCategoryNarroValues = '';
    OrderSupplierNarroValues = '';
    OrderStatusNarroValues = '';
    OrderRequiredDateNarroValues = '';
    CostNarroSearchValue = '';
    spendPerSpendLimit = '';
    TotalSpendLimit = '';
    TotalSpendRemaining = '';
    TotalItemSpendLimit = '';
    MatStagLocationsNarroValues = '';
    SSNarroSearchValue = '';
    ItemTypeNarroSearchValue = '';
    CartSupplierNarroValues = '';
    CartRTNarroValues = '';
    ICLNarroValues = '';
    StageLocationHeaderNarroValues = '';
    ItemLocationNarroValues = '';
    PullProjectSpendNarroValues = '';
    PullWorkOrderValues = '';
    PullRequistionarroValues = '';
    AvgUsageNarroSearchValue = '';
    TurnsNarroSearchValue = '';
    ItemUDF1 = '';
    ItemUDF2 = '';
    ItemUDF3 = '';
    ItemUDF4 = '';
    ItemUDF5 = '';
    ToolCheckOutUDF1 = '';
    ToolCheckOutUDF2 = '';
    ToolCheckOutUDF3 = '';
    ToolCheckOutUDF4 = '';
    ToolCheckOutUDF5 = '';
    ToolTechUDF1 = '';
    ToolTechUDF2 = '';
    ToolTechUDF3 = '';
    ToolTechUDF4 = '';
    ToolTechUDF5 = '';
    StageLocationNarroValues = '';
    PullOrderNumbernarroValues = '';
    PullSupplierAccountNumberValues = '';
    ItemActive = '';
}

function SearchOnEnterPressAfterTwoCharacters(e) {
    if (SearchPattern == 2 || SearchPattern == "2") {
        FilterDataFromGlobalFilter();
    } else {
        if (($("#global_filter").val().length <= 0) || e.which == 13 && $("#global_filter").val().length >= 2) {
            FilterDataFromGlobalFilter();
        }
        else if ($("#global_filter").val().length > 0) {
            _Common.highlightTextInTable('global_filter', 'myDataTable');
        }
    }

}

function fnFilterGlobal() {
    //set filter only if more than 2 characters are pressed
    var txtFilerId = 'global_filter';
    var filterVal = _Common.getGlobalFilterVal(false, txtFilerId);
    var filterValTrimmed = _Common.getGlobalFilterVal(true, txtFilerId);
    _Common.trimStartGlobalFilter(txtFilerId);
    //if (typeof $("#global_filter") != 'undefined' && ($("#global_filter").val().length > 2 || $("#global_filter").val().length == 0)) {
    if (filterValTrimmed.length > 2 || filterVal.length === 0) {
        FilterDataFromGlobalFilter();
    }
    else {
        _Common.highlightTextInTable(txtFilerId,'myDataTable');
        //$('#myDataTable').removeHighlight();
        //$('#myDataTable').highlight($("#global_filter").val());
    }

    HideOtherTabs();
}
function fnFilterGlobalOnEnter(KeyCode) {
    var txtFilerId = 'global_filter';
    var filterVal = _Common.getGlobalFilterVal(false, txtFilerId);
    var filterValTrimmed = _Common.getGlobalFilterVal(true, txtFilerId);
    _Common.trimStartGlobalFilter(txtFilerId);
    //if (typeof $("#global_filter") != 'undefined' && (KeyCode == 13 || $("#global_filter").val().length == 0)) {
    if ((filterValTrimmed.length > 0 && KeyCode === 13) || filterVal.length === 0) {
        GoForSearch = false;
        FilterDataFromGlobalFilter();
    }
    else {
        _Common.highlightTextInTable(txtFilerId,'myDataTable');
        //$('#myDataTable').removeHighlight();
        //$('#myDataTable').highlight($("#global_filter").val());
    }

    HideOtherTabs();
}

function FilterDataFromGlobalFilter() {
    //  clearNarrowSearchFilter();

    var searchtext = $("#global_filter").val().replace(/'/g, "''");

    // Need to add below code for Requisition Tab Filter 
    if (RequisitionTabFilter != '') {
        if (RequisitionTabFilter.indexOf("[####]") >= 0)
            searchtext = searchtext + RequisitionTabFilter;
        else
            searchtext = searchtext + "[####]" + RequisitionTabFilter;
    }
    /////////////////////////////////////////////////////

    if (window.location.href.indexOf("QuickList") > 0 && !isFromNarrowSearchClear) {
        DoQLNarrowSearch();
    }
    else if (window.location.href.indexOf("PollList") > 0 && !isFromNarrowSearchClear) {
        DoPollNarrowSearch();
    }
    else if (window.location.href.indexOf("ItemWeightPerPieceRequest") > 0 && !isFromNarrowSearchClear) {
        DoItemWeightNarrowSearch();
    }
    else if (window.location.href.indexOf("ResetRequestList") > 0 && !isFromNarrowSearchClear) {
        DoResetRequestNarrowSearch();
    }
    else if (window.location.href.indexOf("ShelfList") > 0 && !isFromNarrowSearchClear) {
        DoShelfRequestNarrowSearch();
    }
    else if (window.location.href.indexOf("ReceiveList") > 0 && !isFromNarrowSearchClear) {
        DoNarrowSearchSC();
    }
    else if (window.location.href.indexOf("ScheduleMapping") > 0 && !isFromNarrowSearchClear) {
        DoNarrowSearchSC();
    }
    else if (!isFromNarrowSearchClear){
        DoNarrowSearch();
    }
    //$('#myDataTable').dataTable().fnFilter(
    //                searchtext,
    //                null,
    //                null,
    //                null
    //            );
    $('.tab5').hide();
    //TODO: for Barcode
    //$("#global_filter").select();
}


function BindMultiSelect(Id, OptionData, SelectedData, SelectionText) {
    $("#" + Id).multiselect().unbind();
    $("#" + Id).empty();
    $("#" + Id).multiselect('destroy');
    $("#" + Id).multiselectfilter('destroy');
    $("#" + Id).append(OptionData);
    document.getElementById(Id).selectedIndex = -1;
    $("#" + Id).multiselect(
        {
            noneSelectedText: SelectionText, selectedList: null,
            selectedText: function (numChecked, numTotal, checkedItems) {
                return numChecked + ' ' + SelectionText + ' ' + selected;
            }
        },
        {
            checkAll: function (ui) {
            }
        }
    )
    var ArrSelected = (SelectedData).split(',');
    for (i = 0; i < ArrSelected.length; i++) {
        $("#" + Id).multiselect("widget").find(":checkbox[value='" + ArrSelected[i] + "']").click();
    }
}

function DestroyMultiSelect(Id) {
    $("#" + Id).multiselect().unbind();
    $("#" + Id).empty();
    $("#" + Id).multiselect('destroy');
    $("#" + Id).multiselectfilter('destroy');
}

function GetMultiselectSelectedValue(Id) {
    var SelectedValue = '';
    if ($("select[id='" + Id + "']").css('display') == 'none') {
        var arrSelectedValue = $("#" + Id).multiselect("getChecked").map(function () { return this.value }).get();
        var SelectedValue = arrSelectedValue.join(",");
    }
    return SelectedValue;
}


//-------------------------Grid State Management-------------------------
//

function GridInputControl() {
    this.ControlId = '';
    this.ControlType = '';
    this.RowUniqueId = '';
    this.Value = '';
}

function GridStateManager() {
    this.GridId = '';
    this.PageIndex = 0;
    this.MappUsingControlId = true;
    this.UniqueControlId = '';
    this.ArrGridInputControls = [];
}

var ObjGridStateManager = new GridStateManager();

function ClearGridStateChange() {
    ObjGridStateManager = new GridStateManager();
}

function SaveGridStateChangeState(GridId, UniqueControlId, MappUsingControlId) {

    ObjGridStateManager.GridId = GridId;
    ObjGridStateManager.MappUsingControlId = MappUsingControlId;
    ObjGridStateManager.UniqueControlId = UniqueControlId;

    if (ObjGridStateManager.ArrGridInputControls == null || ObjGridStateManager.ArrGridInputControls == undefined)
        ObjGridStateManager.ArrGridInputControls = [];

    $('#' + GridId + ' td input[type="text"]').each(function () {

        $(this).on('input', function (e) {
        });

        //$(this).change(function () {
        //    var _Id = $(this)[0].id;
        //    var RowUniqueId = '';
        //    if (ObjGridStateManager.MappUsingControlId == true) {
        //        ObjGridStateManager.ArrGridInputControls = $.grep(ObjGridStateManager.ArrGridInputControls, function (el) {
        //            return el.ControlId == _Id;
        //        }, true);
        //    }
        //    else {
        //        var UniqueControl = $(this).closest('tr').find('[id*="' + ObjGridStateManager.UniqueControlId + '"]')[0];
        //        if (UniqueControl.nodeName.toUpperCase() == "SPAN") {
        //            RowUniqueId = UniqueControl.innerText;
        //        }
        //        else {
        //            RowUniqueId = UniqueControl.value;
        //        }

        //        ObjGridStateManager.ArrGridInputControls = $.grep(ObjGridStateManager.ArrGridInputControls, function (el) {
        //            return (el.ControlId.indexOf(_Id) >= 0 && el.RowUniqueId == RowUniqueId);
        //        }, true);
        //    }

        //    var objGridInputControl = new GridInputControl();
        //    objGridInputControl.ControlId = _Id;
        //    objGridInputControl.ControlType = 'text';
        //    objGridInputControl.RowUniqueId = RowUniqueId;
        //    objGridInputControl.Value = $(this)[0].value;
        //    ObjGridStateManager.ArrGridInputControls.push(objGridInputControl);
        //});
    });
}

function LoadGridSavedState(GridId) {
    if (ObjGridStateManager != null && ObjGridStateManager != undefined
        && ObjGridStateManager.ArrGridInputControls != null && ObjGridStateManager.ArrGridInputControls != undefined && ObjGridStateManager.ArrGridInputControls.length > 0
        && ObjGridStateManager.GridId == GridId) {
        if (ObjGridStateManager.MappUsingControlId == true) {
            $('#' + GridId + ' td input[type="text"]').each(function () {
                var _Id = $(this)[0].id;
                ObjGridInputControls = $.grep(ObjGridStateManager.ArrGridInputControls, function (el) {
                    return el.ControlId == _Id;
                });
                if (ObjGridInputControls != null && ObjGridInputControls != undefined && ObjGridInputControls.length > 0)
                    $(this)[0].value = ObjGridInputControls[0].Value;
            });
        }
        else {
            $('#' + GridId + ' td input[type="text"]').each(function () {
                var _Id = $(this)[0].id;
                var RowUniqueId = '';
                var UniqueControl = $(this).closest('tr').find('[id*="' + ObjGridStateManager.UniqueControlId + '"]')[0];
                if (UniqueControl.nodeName.toUpperCase() == "SPAN") {
                    RowUniqueId = UniqueControl.innerText;
                }
                else {
                    RowUniqueId = UniqueControl.value;
                }

                ObjGridInputControls = $.grep(ObjGridStateManager.ArrGridInputControls, function (el) {
                    return (el.ControlId.indexOf(_Id) >= 0 && el.RowUniqueId == RowUniqueId);
                });

                if (ObjGridInputControls != null && ObjGridInputControls != undefined && ObjGridInputControls.length > 0)
                    $(this)[0].value = ObjGridInputControls[0].Value;
            });
        }
    }
}

var DataTable_lastChecked;
var DataTable_starttrvalue = "";
function DataTableTRClickToSelect(tr, e) {

    //if (gblActionName === "ReceiveList") {
    //            return;
    //        }
    //else if (gblActionName == "ItemMasterList") {
    //    return;
    //}
    //else

    if ($(e.target).hasClass("control") == true || e.target.nodeName.toLowerCase() == "img" || e.target.type == "checkbox" || e.target.type == "radio" || e.target.type == "text" || e.target.type == "button" || $(e.target).is('a') == true) {
        e.stopPropagation();
    } else {

        if (IsDeleteItemPictureViewRecord)
            $(tr).parent().parent().parent().parent().parent().toggleClass('row_selected');
        else {
            //$(tr).toggleClass('row_selected');
            if (!DataTable_lastChecked) {
                DataTable_lastChecked = tr;
            }

            if (e.shiftKey) {
                var start = $('#myDataTable tbody tr').index(tr);
                var end = $('#myDataTable tbody tr').index(DataTable_lastChecked);


                var stringval1 = readCookieforshift("selectstartindex");
                if (stringval1 != null) {
                    var endindex = $(tr).closest('tr').attr('id');
                    createCookieforshift("selectendindex", endindex, 1);
                    if ($("#hdnPageName").val() !== undefined) {
                        var pagename = '';
                        pagename = $("#hdnPageName").val();
                        GetOnlyIdsForPassPagesForshift(pagename, true);
                    }
                }

                for (i = Math.min(start, end) ; i <= Math.max(start, end) ; i++) {
                    if (!$('#myDataTable tbody tr').eq(i).hasClass('row_selected')) {
                        $('#myDataTable tbody tr').eq(i).addClass("row_selected");
                    }
                }
                if (window.getSelection) {
                    if (window.getSelection().empty) {  // Chrome
                        window.getSelection().empty();
                    } else if (window.getSelection().removeAllRanges) {  // Firefox
                        window.getSelection().removeAllRanges();
                    }
                } else if (document.selection) {  // IE?
                    document.selection.empty();
                }
            } else if ((e.metaKey || e.ctrlKey)) {
                $(tr).toggleClass('row_selected');
            } else {
                $(tr).toggleClass('row_selected');


                if ($(tr).hasClass('row_selected')) {
                    (DataTable_starttrvalue == "") ? DataTable_starttrvalue = $(tr).closest('tr').attr('id') : DataTable_starttrvalue = DataTable_starttrvalue + "," + $(tr).closest('tr').attr('id');
                    //                        var pageindex = "";
                    //                        $('#myDataTable_paginate span a').each(function () {
                    //                            if ($(tr).hasClass('ui-state-disabled')) {
                    //                                pageindex = $(tr).text();
                    //                            }
                    //                        });
                    // (pageindex == "") ? DataTable_starttrvalue = DataTable_starttrvalue : DataTable_starttrvalue = DataTable_starttrvalue + ":" + pageindex;
                    createCookieforshift("selectstartindex", DataTable_starttrvalue, 1);
                } else {

                    var stringval = readCookieforshift("selectstartindex");
                    if (stringval != "undefined") {
                        if (stringval != null) {
                            var tmp = stringval.split(',');
                            var index = tmp.indexOf($(tr).closest('tr').attr('id'));
                            if (index !== -1) {
                                tmp.splice(index, 1);
                                stringval = tmp.join(',');
                                //eraseCookieforshift("selectstartindex");
                                //                                var pageindex1 = "";
                                //                                $('#myDataTable_paginate span a').each(function () {
                                //                                    if ($(tr).hasClass('ui-state-disabled')) {
                                //                                        pageindex1 = $(tr).text();
                                //                                    }
                                //                                });
                                //(pageindex1 == "") ? stringval = stringval : stringval = stringval + ":" + pageindex1;
                                createCookieforshift("selectstartindex", stringval, 1);
                            }
                        }
                    }

                }
            }

            DataTable_lastChecked = tr;
        }


        //ShowHidHistoryTab();
        //ShowHideOrderTab();
        //ShowHideChangeLog();
        //ShowHideSchedulerTab();
        //ShowHideCartCreateButton();
        //ShowHideCartDeleteButton();
        //if (typeof (ShowHideUnCloseButton) !== 'undefined') {
        //    ShowHideUnCloseButton();
        //}
        //if (typeof (ShowHideCopyButton) !== 'undefined') {
        //    ShowHideCopyButton();
        //}

        //if (gblActionName === "ReceiveList") {
        //    ShowHideButtons();
        //}
        //if (gblActionName === "TransferList") {
        //    ShowHideTransferTab();
        //}
        return false;
    }
}

function isNumberKey(evt) {
    var keyCode = [evt.keyCode || evt.which];
    if (keyCode == 8 || keyCode == 13 || keyCode == 9)
        return true;
    if (keyCode > 57 || keyCode < 48)
        return false;
    else
        return true;
}

function PrintChangeLog(columnsetupfor, IsOnlychangedColumns) {
    //alert(SelectedHistoryRecordID);
    var lowername = columnsetupfor.toLowerCase();
    var objkeyVal = new Array();
    objkeyVal.push({ 'key': 'RecordID', 'value': SelectedHistoryRecordID });
    objkeyVal.push({ 'key': 'ReportFor', 'value': lowername });
    objkeyVal.push({ 'key': 'OnlyChangedColumns', 'value': IsOnlychangedColumns });

    ShowLocalReports(objkeyVal, lowername);

    //var URLToOpen = location.protocol + "//" + location.host + "/Reports/NewReportViewer.aspx?Id=" + SelectedHistoryRecordID + "&ReportFor=" + lowername;
    //switch (lowername) {
    //    case "shipviachangelog":
    //        mywindow = window.open(URLToOpen, "_blank");
    //        break;
    //}

}

function GetSelectedRecordsIds() {

    var stringIDs = '';
    if (gblActionName.toLowerCase() == 'projectlist') {
        var anQLSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anQLSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anQLSelected[i]).find('#ProjectGUID').val() + ",";
        }
    }
    if (gblActionName.toLowerCase() == "materialstaginglist") {
        var anQLSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anQLSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anQLSelected[i]).find('#hdnUniqueID').val() + ",";
        }
    }
    else if (gblActionName.toLowerCase() == "quicklist") {
        var anQLSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anQLSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anQLSelected[i]).find('#QuickListGUID').text() + ",";
        }
    }
    else if (gblActionName.toLowerCase() == "pullpomasterlist") {
        var anQLSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anQLSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anQLSelected[i]).find('#hdnID').text() + ",";
        }
    }
    else if ($("#hdnModuleName") !== undefined && $("#hdnModuleName").val().toLowerCase() == "workorder") {
        var anQLSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anQLSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anQLSelected[i]).find('#WorkOrderGUID').val() + ",";
        }
    }
    else if ($("#hdnModuleName") !== undefined && $("#hdnModuleName").val().toLowerCase() == "requisition") {

        var anSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anSelected[i]).find('#RequisitionGUID').val() + ",";
        }
    }
    else if ($("#hdnModuleName") !== undefined && $("#hdnModuleName").val().toLowerCase() == "order")
    {
        var anSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anSelected[i]).find('#spnOrderGUID').text() + ",";
        }
    }
    else if ($("#hdnModuleName") !== undefined && $("#hdnModuleName").val().toLowerCase() == "count") {
        var anSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anSelected[i]).find('#hdnUniqueID').val() + ",";
        }
    }
    else if ($("#hdnModuleName") !== undefined && $("#hdnModuleName").val().toLowerCase() == "transfer") {
        var anQLSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anQLSelected.length - 1; i++) {
            stringIDs = stringIDs + $(anQLSelected[i]).find('#spnTransferMasterGUID').text() + ",";
        }
    }
    else {
        var anSelected = fnGetSelected(oTable);
        for (var i = 0; i <= anSelected.length - 1; i++) {
            if ($("#hdnModuleName") !== undefined && $("#hdnModuleName").val().toLowerCase() == "pull") {
                var aPos = oTable.fnGetPosition($(anSelected[i])[0]);
                var aData = oTable.fnGetData(aPos);
                //if (!(!isNaN(parseFloat(aData.ConsignedQuantity)) && parseFloat(aData.ConsignedQuantity) > 0 && aData.Billing == 'Yes')) {
                stringIDs = stringIDs + aData.ID + ",";
                //}
            }
            else {
                stringIDs = stringIDs + anSelected[i].id + ",";
            }
        }
    }

    var obj = { SelectedIDs: stringIDs, ModuleName: $("#hdnModuleName").val() }
    return obj;
}

$(document).on('click', '#aArchiveRows', function () {
    var obj = GetSelectedRecordsIds();
    if (!(obj != null && obj.SelectedIDs.length > 0)) {
        $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
        ShowNotificationMessage(MsgSelectRecordForArchieve);
        //showNotificationDialog();
    }
    else {
        $('#divArchiveConfirmModel').modal();
    }
});

$(document).on('click', '#aUnArchiveRows', function () {

    var obj = GetSelectedRecordsIds();
    if (!(obj != null && obj.SelectedIDs.length > 0)) {
        $("#spanGlobalMessage").removeClass('errorIcon succesIcon').addClass('WarningIcon');
        ShowNotificationMessage(MsgSelectRecordForUnArchieve);
        //showNotificationDialog();
    }
    else {
        $('#divUnArchiveConfirmModel').modal();
    }

});

$(document).on('click', "#btnArchiveConfirmYes", function () {
    var obj = GetSelectedRecordsIds();
    if (obj != null && obj.SelectedIDs.length > 0) {
        $('#DivLoading').show();
        var params = { Guids: obj.SelectedIDs, ModuleName: obj.ModuleName };
        $.ajax({
            url: "/DataArchival/ArchiveRecords",
            type: "POST",
            //data: { Guids: obj.SelectedIDs, ModuleName: obj.ModuleName },
            data: JSON.stringify(params),
            contentType: 'application/json',
            dataType: 'json',
            //timeout: 0,
            success: function (response) {
                if (response.Status) {
                    oTable.fnStandingRedraw();
                }
                $('#DivLoading').hide();
                $.modal.impl.close();
                showNotificationDialog();
                $("#spanGlobalMessage").html(response.Message); //$("#spanGlobalMessage").text("Archived successfully");
                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon succesIcon').addClass(response.NotificationClass);

                if (gblActionName.toLowerCase() === "orderlist") {
                    IsRetainNarrow = true;
                    //_NarrowSearchSave.saveNarrowSearch('NarroSearchSaveOrderMaster', 'OrderMaster');
                    var tmpOrderCreated = CreatedBySelectedValues;
                    var tmpOrderUpdated = UpdatedBySelectedValues;
                    var tmpOrderSupplier = SupplierBySelectedValues;
                    var tmpOrderStatus = StatusBySelectedValues;
                    var tmpOrderRequiredDate = RequiredDateSelectedValues;
                    var tmpOrderShippingVendor = WorkOrderSelectedValues;
                    var tmpChangeOrderSelectedValues = ChangeOrderSelectedValues;
                    var tmpOrderUDF1 = OrderUDF1NarrowValues;
                    var tmpOrderUDF2 = OrderUDF2NarrowValues;
                    var tmpOrderUDF3 = OrderUDF3NarrowValues;
                    var tmpOrderUDF4 = OrderUDF4NarrowValues;
                    var tmpOrderUDF5 = OrderUDF5NarrowValues;

                    var tmpOrderDateCFrom = $("#OrdDateCFrom").val();//getTxtDateVal('OrdDateCFrom');
                    var tmpOrderDateCTo = $("#OrdDateCTo").val();//getTxtDateVal('OrdDateCTo');
                    var tmpOrderDateUFrom = $("#OrdDateUFrom").val();//getTxtDateVal('OrdDateUFrom');
                    var tmpOrderDateUTo = $("#OrdDateUTo").val(); //getTxtDateVal('OrdDateUTo');

                    fillOrderNarrowSearchDiv();
                    SetReplenishRedCount();

                    setTimeout(function () {
                        var optionSeperator = ")" + GuidSeparator;
                        for (var i = 0; i < tmpOrderSupplier.length; i++) {
                            $("#OrderSupplier").multiselect("widget").find(":checkbox[value='" + tmpOrderSupplier[i] + "']").attr("checked", "checked");
                            $("#OrderSupplier option[value='" + tmpOrderSupplier[i] + "']").attr("selected", 1);
                            $("#OrderSupplier").multiselect("refresh");
                        }

                        var tmpOrderSupplierCollapseText = $("#OrderSupplier option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderSupplierCollapse = false;

                        for (var i = 0; i < tmpOrderSupplierCollapseText.length; i++) {
                            if (tmpOrderSupplierCollapseText[i] != null && tmpOrderSupplierCollapseText[i] != "" && tmpOrderSupplierCollapseText[i].length > 0) {
                                isShowOrderSupplierCollapse = true;
                                $("#OrderSupplierCollapse").append("<span>" + tmpOrderSupplierCollapseText[i] + "</span>");
                            }
                        }

                        if (isShowOrderSupplierCollapse) {
                            $("#OrderSupplierCollapse").show();
                        }

                        $("#OrderSupplier").multiselect("refresh");
                        SupplierBySelectedValues = tmpOrderSupplier;

                        for (var i = 0; i < tmpOrderStatus.length; i++) {
                            $("#OrderStatus").multiselect("widget").find(":checkbox[value='" + tmpOrderStatus[i] + "']").attr("checked", "checked");
                            $("#OrderStatus option[value='" + tmpOrderStatus[i] + "']").attr("selected", 1);
                            $("#OrderStatus").multiselect("refresh");
                        }

                        var tmpOrderStatusCollapseText = $("#OrderStatus option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderStatusCollapse = false;
                        for (var i = 0; i < tmpOrderStatusCollapseText.length; i++) {
                            if (tmpOrderStatusCollapseText[i] != null && tmpOrderStatusCollapseText[i] != "" && tmpOrderStatusCollapseText[i].length > 0) {
                                isShowOrderStatusCollapse = true;
                                $("#OrderStatusCollapse").append("<span>" + tmpOrderStatusCollapseText[i] + "</span>");
                            }
                        }

                        if (isShowOrderStatusCollapse) {
                            $("#OrderStatusCollapse").show();
                        }

                        $("#OrderStatus").multiselect("refresh");
                        StatusBySelectedValues = tmpOrderStatus;

                        for (var i = 0; i < tmpOrderRequiredDate.length; i++) {
                            $("#OrderRequiredDate").multiselect("widget").find(":checkbox[value='" + tmpOrderRequiredDate[i] + "']").attr("checked", "checked");
                            $("#OrderRequiredDate option[value='" + tmpOrderRequiredDate[i] + "']").attr("selected", 1);
                            $("#OrderRequiredDate").multiselect("refresh");
                        }

                        var tmpOrderRequiredDateCollapseText = $("#OrderRequiredDate option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderRequiredDateCollapse = false;
                        for (var i = 0; i < tmpOrderRequiredDateCollapseText.length; i++) {
                            if (tmpOrderRequiredDateCollapseText[i] != null && tmpOrderRequiredDateCollapseText[i] != "" && tmpOrderRequiredDateCollapseText[i].length > 0) {
                                isShowOrderRequiredDateCollapse = true;
                                $("#OrderRequiredDateCollapse").append("<span>" + tmpOrderRequiredDateCollapseText[i] + "</span>"); //
                            }
                        }

                        if (isShowOrderRequiredDateCollapse) {
                            $("#OrderRequiredDateCollapse").show();
                        }

                        $("#OrderRequiredDate").multiselect("refresh");
                        RequiredDateSelectedValues = tmpOrderRequiredDate;

                        for (var i = 0; i < tmpOrderShippingVendor.length; i++) {
                            $("#OrderShippingVendor").multiselect("widget").find(":checkbox[value='" + tmpOrderShippingVendor[i] + "']").attr("checked", "checked");
                            $("#OrderShippingVendor option[value='" + tmpOrderShippingVendor[i] + "']").attr("selected", 1);
                            $("#OrderShippingVendor").multiselect("refresh");
                        }

                        var tmpOrderShippingVendorCollapseText = $("#OrderShippingVendor option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderShippingVendorCollapse = false;

                        for (var i = 0; i < tmpOrderShippingVendorCollapseText.length; i++) {
                            if (tmpOrderShippingVendorCollapseText[i] != null && tmpOrderShippingVendorCollapseText[i] != "" && tmpOrderShippingVendorCollapseText[i].length > 0) {
                                isShowOrderShippingVendorCollapse = true;
                                $("#OrderShippingVendorCollapse").append("<span>" + tmpOrderShippingVendorCollapseText[i] + "</span>"); //
                            }
                        }

                        if (isShowOrderShippingVendorCollapse) {
                            $("#OrderShippingVendorCollapse").show();
                        }

                        $("#OrderShippingVendor").multiselect("refresh");
                        WorkOrderSelectedValues = tmpOrderShippingVendor;

                        for (var i = 0; i < tmpOrderCreated.length; i++) {
                            $("#OrderCreatedBy").multiselect("widget").find(":checkbox[value='" + tmpOrderCreated[i] + "']").attr("checked", "checked");
                            $("#OrderCreatedBy option[value='" + tmpOrderCreated[i] + "']").attr("selected", 1);
                            $("#OrderCreatedBy").multiselect("refresh");
                        }

                        var tmpOrderCreatedByCollapseText = $("#OrderCreatedBy option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderCreatedByCollapse = false;

                        for (var i = 0; i < tmpOrderCreatedByCollapseText.length; i++) {
                            if (tmpOrderCreatedByCollapseText[i] != null && tmpOrderCreatedByCollapseText[i] != "" && tmpOrderCreatedByCollapseText[i].length > 0) {
                                isShowOrderCreatedByCollapse = true;
                                $("#OrderCreatedByCollapse").append("<span>" + tmpOrderCreatedByCollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderCreatedByCollapse) {
                            $("#OrderCreatedByCollapse").show();
                        }

                        $("#OrderCreatedBy").multiselect("refresh");
                        CreatedBySelectedValues = tmpOrderCreated;

                        for (var i = 0; i < tmpOrderUpdated.length; i++) {
                            $("#OrderUpdatedBy").multiselect("widget").find(":checkbox[value='" + tmpOrderUpdated[i] + "']").attr("checked", "checked");
                            $("#OrderUpdatedBy option[value='" + tmpOrderUpdated[i] + "']").attr("selected", 1);
                            $("#OrderUpdatedBy").multiselect("refresh");
                        }

                        var tmpOrderUpdatedByCollapseText = $("#OrderUpdatedBy option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUpdatedByCollapse = false;
                        for (var i = 0; i < tmpOrderUpdatedByCollapseText.length; i++) {
                            if (tmpOrderUpdatedByCollapseText[i] != null && tmpOrderUpdatedByCollapseText[i] != "" && tmpOrderUpdatedByCollapseText[i].length > 0) {
                                isShowOrderUpdatedByCollapse = true;
                                $("#OrderUpdatedByCollapse").append("<span>" + tmpOrderUpdatedByCollapseText[i] + "</span>"); //
                            }
                        }

                        if (isShowOrderUpdatedByCollapse) {
                            $("#OrderUpdatedByCollapse").show();
                        }

                        $("#OrderUpdatedBy").multiselect("refresh");
                        UpdatedBySelectedValues = tmpOrderUpdated;

                        for (var i = 0; i < tmpChangeOrderSelectedValues.length; i++) {
                            $("#ChangeOrder").multiselect("widget").find(":checkbox[value='" + tmpChangeOrderSelectedValues[i] + "']").attr("checked", "checked");
                            $("#ChangeOrder option[value='" + tmpChangeOrderSelectedValues[i] + "']").attr("selected", 1);
                            $("#ChangeOrder").multiselect("refresh");
                        }

                        var tmpChangeOrderCollapseText = $("#ChangeOrder option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowChangeOrderCollapse = false;
                        for (var i = 0; i < tmpChangeOrderCollapseText.length; i++) {
                            if (tmpChangeOrderCollapseText[i] != null && tmpChangeOrderCollapseText[i] != "" && tmpChangeOrderCollapseText[i].length > 0) {
                                isShowChangeOrderCollapse = true;
                                $("#ChangeOrderCollapse").append("<span>" + tmpChangeOrderCollapseText[i] + "</span>"); //
                            }
                        }

                        if (isShowChangeOrderCollapse) {
                            $("#ChangeOrderCollapse").show();
                        }

                        $("#ChangeOrder").multiselect("refresh");
                        ChangeOrderSelectedValues = tmpChangeOrderSelectedValues;

                        for (var i = 0; i < tmpOrderUDF1.length; i++) {
                            $("#OrderUDF1").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF1[i] + "']").attr("checked", "checked");
                            $("#OrderUDF1 option[value='" + tmpOrderUDF1[i] + "']").attr("selected", 1);
                            $("#OrderUDF1").multiselect("refresh");
                        }

                        var tmpOrderUDF1CollapseText = $("#OrderUDF1 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF1Collapse = false;
                        for (var i = 0; i < tmpOrderUDF1CollapseText.length; i++) {
                            if (tmpOrderUDF1CollapseText[i] != null && tmpOrderUDF1CollapseText[i] != "" && tmpOrderUDF1CollapseText[i].length > 0) {
                                isShowOrderUDF1Collapse = true;
                                $("#OrderUDF1Collapse").append("<span>" + tmpOrderUDF1CollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderUDF1Collapse) {
                            $("#OrderUDF1Collapse").show();
                        }

                        $("#OrderUDF1").multiselect("refresh");
                        OrderUDF1NarrowValues = tmpOrderUDF1;

                        for (var i = 0; i < tmpOrderUDF2.length; i++) {
                            $("#OrderUDF2").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF2[i] + "']").attr("checked", "checked");
                            $("#OrderUDF2 option[value='" + tmpOrderUDF2[i] + "']").attr("selected", 1);
                            $("#OrderUDF2").multiselect("refresh");
                        }

                        var tmpOrderUDF2CollapseText = $("#OrderUDF2 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF2Collapse = false;
                        for (var i = 0; i < tmpOrderUDF2CollapseText.length; i++) {
                            if (tmpOrderUDF2CollapseText[i] != null && tmpOrderUDF2CollapseText[i] != "" && tmpOrderUDF2CollapseText[i].length > 0) {
                                isShowOrderUDF2Collapse = true;
                                $("#OrderUDF2Collapse").append("<span>" + tmpOrderUDF2CollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderUDF2Collapse) {
                            $("#OrderUDF2Collapse").show();
                        }

                        $("#OrderUDF2").multiselect("refresh");
                        OrderUDF2NarrowValues = tmpOrderUDF2;

                        for (var i = 0; i < tmpOrderUDF3.length; i++) {
                            $("#OrderUDF3").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF3[i] + "']").attr("checked", "checked");
                            $("#OrderUDF3 option[value='" + tmpOrderUDF3[i] + "']").attr("selected", 1);
                            $("#OrderUDF3").multiselect("refresh");
                        }

                        var tmpOrderUDF3CollapseText = $("#OrderUDF3 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF3Collapse = false;
                        for (var i = 0; i < tmpOrderUDF3CollapseText.length; i++) {
                            if (tmpOrderUDF3CollapseText[i] != null && tmpOrderUDF3CollapseText[i] != "" && tmpOrderUDF3CollapseText[i].length > 0) {
                                isShowOrderUDF3Collapse = true;
                                $("#OrderUDF3Collapse").append("<span>" + tmpOrderUDF3CollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderUDF3Collapse) {
                            $("#OrderUDF3Collapse").show();
                        }

                        $("#OrderUDF3").multiselect("refresh");
                        OrderUDF3NarrowValues = tmpOrderUDF3;

                        for (var i = 0; i < tmpOrderUDF4.length; i++) {
                            $("#OrderUDF4").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF4[i] + "']").attr("checked", "checked");
                            $("#OrderUDF4 option[value='" + tmpOrderUDF4[i] + "']").attr("selected", 1);
                            $("#OrderUDF4").multiselect("refresh");
                        }

                        var tmpOrderUDF4CollapseText = $("#OrderUDF4 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF4Collapse = false;
                        for (var i = 0; i < tmpOrderUDF4CollapseText.length; i++) {
                            if (tmpOrderUDF4CollapseText[i] != null && tmpOrderUDF4CollapseText[i] != "" && tmpOrderUDF4CollapseText[i].length > 0) {
                                isShowOrderUDF4Collapse = true;
                                $("#OrderUDF4Collapse").append("<span>" + tmpOrderUDF4CollapseText[i] + "</span>"); //v
                            }

                        }

                        if (isShowOrderUDF4Collapse) {
                            $("#OrderUDF4Collapse").show();
                        }

                        $("#OrderUDF4").multiselect("refresh");
                        OrderUDF4NarrowValues = tmpOrderUDF4;

                        for (var i = 0; i < tmpOrderUDF5.length; i++) {
                            $("#OrderUDF5").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF5[i] + "']").attr("checked", "checked");
                            $("#OrderUDF5 option[value='" + tmpOrderUDF5[i] + "']").attr("selected", 1);
                            $("#OrderUDF5").multiselect("refresh");
                        }

                        var tmpOrderUDF5CollapseText = $("#OrderUDF5 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF5Collapse = false;
                        for (var i = 0; i < tmpOrderUDF5CollapseText.length; i++) {
                            if (tmpOrderUDF5CollapseText[i] != null && tmpOrderUDF5CollapseText[i] != "" && tmpOrderUDF5CollapseText[i].length > 0) {
                                isShowOrderUDF5Collapse = true;
                                $("#OrderUDF5Collapse").append("<span>" + tmpOrderUDF5CollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderUDF5Collapse) {
                            $("#OrderUDF5Collapse").show();
                        }

                        $("#OrderUDF5").multiselect("refresh");
                        OrderUDF5NarrowValues = tmpOrderUDF5;
                        $("#OrdDateCFrom").val(tmpOrderDateCFrom);
                        $("#OrdDateCTo").val(tmpOrderDateCTo);
                        $("#OrdDateUFrom").val(tmpOrderDateUFrom);
                        $("#OrdDateUTo").val(tmpOrderDateUTo);
                    }, 5000);

                }

            },
            error: function (xhr) {
                showNotificationDialog();
                $("#spanGlobalMessage").html(MsgFailToArchieve);
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                $('#DivLoading').hide();
                $.modal.impl.close();
                //alert('Error');
            }
        });
    }

});


$(document).on('click', "#btnUnArchiveConfirmYes", function () {
    var obj = GetSelectedRecordsIds();

    if (obj != null && obj.SelectedIDs.length > 0) {

        var params = { Guids: obj.SelectedIDs, ModuleName: obj.ModuleName };
        $('#DivLoading').show();

        $.ajax({
            url: "/DataArchival/UnArchiveRecords",
            type: "POST",
            data: JSON.stringify(params),
            contentType: 'application/json',
            dataType: 'json',
            success: function (response) {
                if (response.Status) {
                    oTable.fnStandingRedraw();
                }
                $('#DivLoading').hide();
                $.modal.impl.close();
                showNotificationDialog();
                $("#spanGlobalMessage").html(response.Message);
                $("#spanGlobalMessage").removeClass('errorIcon WarningIcon succesIcon').addClass(response.NotificationClass);

                if (gblActionName.toLowerCase() === "orderlist") {
                    IsRetainNarrow = true;
                    //_NarrowSearchSave.saveNarrowSearch('NarroSearchSaveOrderMaster', 'OrderMaster');
                    var tmpOrderCreated = CreatedBySelectedValues;
                    var tmpOrderUpdated = UpdatedBySelectedValues;
                    var tmpOrderSupplier = SupplierBySelectedValues;
                    var tmpOrderStatus = StatusBySelectedValues;
                    var tmpOrderRequiredDate = RequiredDateSelectedValues;
                    var tmpOrderShippingVendor = WorkOrderSelectedValues;
                    var tmpChangeOrderSelectedValues = ChangeOrderSelectedValues;
                    var tmpOrderUDF1 = OrderUDF1NarrowValues;
                    var tmpOrderUDF2 = OrderUDF2NarrowValues;
                    var tmpOrderUDF3 = OrderUDF3NarrowValues;
                    var tmpOrderUDF4 = OrderUDF4NarrowValues;
                    var tmpOrderUDF5 = OrderUDF5NarrowValues;

                    var tmpOrderDateCFrom = $("#OrdDateCFrom").val();//getTxtDateVal('OrdDateCFrom');
                    var tmpOrderDateCTo = $("#OrdDateCTo").val();//getTxtDateVal('OrdDateCTo');
                    var tmpOrderDateUFrom = $("#OrdDateUFrom").val();//getTxtDateVal('OrdDateUFrom');
                    var tmpOrderDateUTo = $("#OrdDateUTo").val(); //getTxtDateVal('OrdDateUTo');

                    fillOrderNarrowSearchDiv();
                    SetReplenishRedCount();

                    setTimeout(function () {
                        var optionSeperator = ")" + GuidSeparator;
                        for (var i = 0; i < tmpOrderSupplier.length; i++) {
                            $("#OrderSupplier").multiselect("widget").find(":checkbox[value='" + tmpOrderSupplier[i] + "']").attr("checked", "checked");
                            $("#OrderSupplier option[value='" + tmpOrderSupplier[i] + "']").attr("selected", 1);
                            $("#OrderSupplier").multiselect("refresh");
                        }

                        var tmpOrderSupplierCollapseText = $("#OrderSupplier option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderSupplierCollapse = false;

                        for (var i = 0; i < tmpOrderSupplierCollapseText.length; i++) {
                            if (tmpOrderSupplierCollapseText[i] != null && tmpOrderSupplierCollapseText[i] != "" && tmpOrderSupplierCollapseText[i].length > 0) {
                                isShowOrderSupplierCollapse = true;
                                $("#OrderSupplierCollapse").append("<span>" + tmpOrderSupplierCollapseText[i] + "</span>");
                            }
                        }

                        if (isShowOrderSupplierCollapse) {
                            $("#OrderSupplierCollapse").show();
                        }

                        $("#OrderSupplier").multiselect("refresh");
                        SupplierBySelectedValues = tmpOrderSupplier;

                        for (var i = 0; i < tmpOrderStatus.length; i++) {
                            $("#OrderStatus").multiselect("widget").find(":checkbox[value='" + tmpOrderStatus[i] + "']").attr("checked", "checked");
                            $("#OrderStatus option[value='" + tmpOrderStatus[i] + "']").attr("selected", 1);
                            $("#OrderStatus").multiselect("refresh");
                        }

                        var tmpOrderStatusCollapseText = $("#OrderStatus option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderStatusCollapse = false;
                        for (var i = 0; i < tmpOrderStatusCollapseText.length; i++) {
                            if (tmpOrderStatusCollapseText[i] != null && tmpOrderStatusCollapseText[i] != "" && tmpOrderStatusCollapseText[i].length > 0) {
                                isShowOrderStatusCollapse = true;
                                $("#OrderStatusCollapse").append("<span>" + tmpOrderStatusCollapseText[i] + "</span>");
                            }
                        }

                        if (isShowOrderStatusCollapse) {
                            $("#OrderStatusCollapse").show();
                        }

                        $("#OrderStatus").multiselect("refresh");
                        StatusBySelectedValues = tmpOrderStatus;

                        for (var i = 0; i < tmpOrderRequiredDate.length; i++) {
                            $("#OrderRequiredDate").multiselect("widget").find(":checkbox[value='" + tmpOrderRequiredDate[i] + "']").attr("checked", "checked");
                            $("#OrderRequiredDate option[value='" + tmpOrderRequiredDate[i] + "']").attr("selected", 1);
                            $("#OrderRequiredDate").multiselect("refresh");
                        }

                        var tmpOrderRequiredDateCollapseText = $("#OrderRequiredDate option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderRequiredDateCollapse = false;
                        for (var i = 0; i < tmpOrderRequiredDateCollapseText.length; i++) {
                            if (tmpOrderRequiredDateCollapseText[i] != null && tmpOrderRequiredDateCollapseText[i] != "" && tmpOrderRequiredDateCollapseText[i].length > 0) {
                                isShowOrderRequiredDateCollapse = true;
                                $("#OrderRequiredDateCollapse").append("<span>" + tmpOrderRequiredDateCollapseText[i] + "</span>"); //
                            }
                        }

                        if (isShowOrderRequiredDateCollapse) {
                            $("#OrderRequiredDateCollapse").show();
                        }

                        $("#OrderRequiredDate").multiselect("refresh");
                        RequiredDateSelectedValues = tmpOrderRequiredDate;

                        for (var i = 0; i < tmpOrderShippingVendor.length; i++) {
                            $("#OrderShippingVendor").multiselect("widget").find(":checkbox[value='" + tmpOrderShippingVendor[i] + "']").attr("checked", "checked");
                            $("#OrderShippingVendor option[value='" + tmpOrderShippingVendor[i] + "']").attr("selected", 1);
                            $("#OrderShippingVendor").multiselect("refresh");
                        }

                        var tmpOrderShippingVendorCollapseText = $("#OrderShippingVendor option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderShippingVendorCollapse = false;

                        for (var i = 0; i < tmpOrderShippingVendorCollapseText.length; i++) {
                            if (tmpOrderShippingVendorCollapseText[i] != null && tmpOrderShippingVendorCollapseText[i] != "" && tmpOrderShippingVendorCollapseText[i].length > 0) {
                                isShowOrderShippingVendorCollapse = true;
                                $("#OrderShippingVendorCollapse").append("<span>" + tmpOrderShippingVendorCollapseText[i] + "</span>"); //
                            }
                        }

                        if (isShowOrderShippingVendorCollapse) {
                            $("#OrderShippingVendorCollapse").show();
                        }

                        $("#OrderShippingVendor").multiselect("refresh");
                        WorkOrderSelectedValues = tmpOrderShippingVendor;

                        for (var i = 0; i < tmpOrderCreated.length; i++) {
                            $("#OrderCreatedBy").multiselect("widget").find(":checkbox[value='" + tmpOrderCreated[i] + "']").attr("checked", "checked");
                            $("#OrderCreatedBy option[value='" + tmpOrderCreated[i] + "']").attr("selected", 1);
                            $("#OrderCreatedBy").multiselect("refresh");
                        }

                        var tmpOrderCreatedByCollapseText = $("#OrderCreatedBy option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderCreatedByCollapse = false;

                        for (var i = 0; i < tmpOrderCreatedByCollapseText.length; i++) {
                            if (tmpOrderCreatedByCollapseText[i] != null && tmpOrderCreatedByCollapseText[i] != "" && tmpOrderCreatedByCollapseText[i].length > 0) {
                                isShowOrderCreatedByCollapse = true;
                                $("#OrderCreatedByCollapse").append("<span>" + tmpOrderCreatedByCollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderCreatedByCollapse) {
                            $("#OrderCreatedByCollapse").show();
                        }

                        $("#OrderCreatedBy").multiselect("refresh");
                        CreatedBySelectedValues = tmpOrderCreated;

                        for (var i = 0; i < tmpOrderUpdated.length; i++) {
                            $("#OrderUpdatedBy").multiselect("widget").find(":checkbox[value='" + tmpOrderUpdated[i] + "']").attr("checked", "checked");
                            $("#OrderUpdatedBy option[value='" + tmpOrderUpdated[i] + "']").attr("selected", 1);
                            $("#OrderUpdatedBy").multiselect("refresh");
                        }

                        var tmpOrderUpdatedByCollapseText = $("#OrderUpdatedBy option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUpdatedByCollapse = false;
                        for (var i = 0; i < tmpOrderUpdatedByCollapseText.length; i++) {
                            if (tmpOrderUpdatedByCollapseText[i] != null && tmpOrderUpdatedByCollapseText[i] != "" && tmpOrderUpdatedByCollapseText[i].length > 0) {
                                isShowOrderUpdatedByCollapse = true;
                                $("#OrderUpdatedByCollapse").append("<span>" + tmpOrderUpdatedByCollapseText[i] + "</span>"); //
                            }
                        }

                        if (isShowOrderUpdatedByCollapse) {
                            $("#OrderUpdatedByCollapse").show();
                        }

                        $("#OrderUpdatedBy").multiselect("refresh");
                        UpdatedBySelectedValues = tmpOrderUpdated;

                        for (var i = 0; i < tmpChangeOrderSelectedValues.length; i++) {
                            $("#ChangeOrder").multiselect("widget").find(":checkbox[value='" + tmpChangeOrderSelectedValues[i] + "']").attr("checked", "checked");
                            $("#ChangeOrder option[value='" + tmpChangeOrderSelectedValues[i] + "']").attr("selected", 1);
                            $("#ChangeOrder").multiselect("refresh");
                        }

                        var tmpChangeOrderCollapseText = $("#ChangeOrder option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowChangeOrderCollapse = false;
                        for (var i = 0; i < tmpChangeOrderCollapseText.length; i++) {
                            if (tmpChangeOrderCollapseText[i] != null && tmpChangeOrderCollapseText[i] != "" && tmpChangeOrderCollapseText[i].length > 0) {
                                isShowChangeOrderCollapse = true;
                                $("#ChangeOrderCollapse").append("<span>" + tmpChangeOrderCollapseText[i] + "</span>"); //
                            }
                        }

                        if (isShowChangeOrderCollapse) {
                            $("#ChangeOrderCollapse").show();
                        }

                        $("#ChangeOrder").multiselect("refresh");
                        ChangeOrderSelectedValues = tmpChangeOrderSelectedValues;

                        for (var i = 0; i < tmpOrderUDF1.length; i++) {
                            $("#OrderUDF1").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF1[i] + "']").attr("checked", "checked");
                            $("#OrderUDF1 option[value='" + tmpOrderUDF1[i] + "']").attr("selected", 1);
                            $("#OrderUDF1").multiselect("refresh");
                        }

                        var tmpOrderUDF1CollapseText = $("#OrderUDF1 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF1Collapse = false;
                        for (var i = 0; i < tmpOrderUDF1CollapseText.length; i++) {
                            if (tmpOrderUDF1CollapseText[i] != null && tmpOrderUDF1CollapseText[i] != "" && tmpOrderUDF1CollapseText[i].length > 0) {
                                isShowOrderUDF1Collapse = true;
                                $("#OrderUDF1Collapse").append("<span>" + tmpOrderUDF1CollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderUDF1Collapse) {
                            $("#OrderUDF1Collapse").show();
                        }

                        $("#OrderUDF1").multiselect("refresh");
                        OrderUDF1NarrowValues = tmpOrderUDF1;

                        for (var i = 0; i < tmpOrderUDF2.length; i++) {
                            $("#OrderUDF2").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF2[i] + "']").attr("checked", "checked");
                            $("#OrderUDF2 option[value='" + tmpOrderUDF2[i] + "']").attr("selected", 1);
                            $("#OrderUDF2").multiselect("refresh");
                        }

                        var tmpOrderUDF2CollapseText = $("#OrderUDF2 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF2Collapse = false;
                        for (var i = 0; i < tmpOrderUDF2CollapseText.length; i++) {
                            if (tmpOrderUDF2CollapseText[i] != null && tmpOrderUDF2CollapseText[i] != "" && tmpOrderUDF2CollapseText[i].length > 0) {
                                isShowOrderUDF2Collapse = true;
                                $("#OrderUDF2Collapse").append("<span>" + tmpOrderUDF2CollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderUDF2Collapse) {
                            $("#OrderUDF2Collapse").show();
                        }

                        $("#OrderUDF2").multiselect("refresh");
                        OrderUDF2NarrowValues = tmpOrderUDF2;

                        for (var i = 0; i < tmpOrderUDF3.length; i++) {
                            $("#OrderUDF3").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF3[i] + "']").attr("checked", "checked");
                            $("#OrderUDF3 option[value='" + tmpOrderUDF3[i] + "']").attr("selected", 1);
                            $("#OrderUDF3").multiselect("refresh");
                        }

                        var tmpOrderUDF3CollapseText = $("#OrderUDF3 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF3Collapse = false;
                        for (var i = 0; i < tmpOrderUDF3CollapseText.length; i++) {
                            if (tmpOrderUDF3CollapseText[i] != null && tmpOrderUDF3CollapseText[i] != "" && tmpOrderUDF3CollapseText[i].length > 0) {
                                isShowOrderUDF3Collapse = true;
                                $("#OrderUDF3Collapse").append("<span>" + tmpOrderUDF3CollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderUDF3Collapse) {
                            $("#OrderUDF3Collapse").show();
                        }

                        $("#OrderUDF3").multiselect("refresh");
                        OrderUDF3NarrowValues = tmpOrderUDF3;

                        for (var i = 0; i < tmpOrderUDF4.length; i++) {
                            $("#OrderUDF4").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF4[i] + "']").attr("checked", "checked");
                            $("#OrderUDF4 option[value='" + tmpOrderUDF4[i] + "']").attr("selected", 1);
                            $("#OrderUDF4").multiselect("refresh");
                        }

                        var tmpOrderUDF4CollapseText = $("#OrderUDF4 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF4Collapse = false;
                        for (var i = 0; i < tmpOrderUDF4CollapseText.length; i++) {
                            if (tmpOrderUDF4CollapseText[i] != null && tmpOrderUDF4CollapseText[i] != "" && tmpOrderUDF4CollapseText[i].length > 0) {
                                isShowOrderUDF4Collapse = true;
                                $("#OrderUDF4Collapse").append("<span>" + tmpOrderUDF4CollapseText[i] + "</span>"); //v
                            }

                        }

                        if (isShowOrderUDF4Collapse) {
                            $("#OrderUDF4Collapse").show();
                        }

                        $("#OrderUDF4").multiselect("refresh");
                        OrderUDF4NarrowValues = tmpOrderUDF4;

                        for (var i = 0; i < tmpOrderUDF5.length; i++) {
                            $("#OrderUDF5").multiselect("widget").find(":checkbox[value='" + tmpOrderUDF5[i] + "']").attr("checked", "checked");
                            $("#OrderUDF5 option[value='" + tmpOrderUDF5[i] + "']").attr("selected", 1);
                            $("#OrderUDF5").multiselect("refresh");
                        }

                        var tmpOrderUDF5CollapseText = $("#OrderUDF5 option:selected").text().replaceAll(")", optionSeperator).split(GuidSeparator);
                        var isShowOrderUDF5Collapse = false;
                        for (var i = 0; i < tmpOrderUDF5CollapseText.length; i++) {
                            if (tmpOrderUDF5CollapseText[i] != null && tmpOrderUDF5CollapseText[i] != "" && tmpOrderUDF5CollapseText[i].length > 0) {
                                isShowOrderUDF5Collapse = true;
                                $("#OrderUDF5Collapse").append("<span>" + tmpOrderUDF5CollapseText[i] + "</span>"); //
                            }

                        }

                        if (isShowOrderUDF5Collapse) {
                            $("#OrderUDF5Collapse").show();
                        }

                        $("#OrderUDF5").multiselect("refresh");
                        OrderUDF5NarrowValues = tmpOrderUDF5;
                        $("#OrdDateCFrom").val(tmpOrderDateCFrom);
                        $("#OrdDateCTo").val(tmpOrderDateCTo);
                        $("#OrdDateUFrom").val(tmpOrderDateUFrom);
                        $("#OrdDateUTo").val(tmpOrderDateUTo);
                    }, 5000);

                }
            },
            error: function (xhr) {
                showNotificationDialog();
                $("#spanGlobalMessage").html(MsgFailToUnArchieve);
                $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');
                $('#DivLoading').hide();
                $.modal.impl.close();
            }
        });
    }
});

function getIngnoreList() {
    var arr = new Array();
    arr.push("loginsessionalive");
    arr.push("saveuserlistinsession");
    arr.push("userloginwithdetail");
    arr.push("getreplinshredcount");
    arr.push("getconsumeredcount");
    return arr;
}

function NotAllowedSpecialCharacters(obj) {
    var inputValue = obj.value;
    for (i = 0; i < specialKeys.length; i++) {
        var regex = new RegExp("\\" + String.fromCharCode(specialKeys[i]), 'g');
        inputValue = inputValue.replace(regex, '');
    }
    $(obj).val(inputValue);
}

function RestrictedSpecialCharacters(obj) {
    var inputValue = $(obj).val();
    for (i = 0; i < specialKeys.length; i++) {
        var regex = new RegExp("\\" + String.fromCharCode(specialKeys[i]), 'g');
        inputValue = inputValue.replace(regex, '');
    }
    $(obj).val(inputValue);
}


function GetToolsNarrowSearchDataNew(_IsArchived, _IsDeleted, TableName, _TabName) {
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: TableName, TextFieldName: 'ToolCategory', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName },
        success: function (response) {
            var selectedToolCategoryValue = ToolCategoryValue;
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });
            //Destroy widgets before reapplying the filter
            $("#ToolsCategoryNewCollapse").html('');
            $("#ToolsCategoryNew").empty();
            $("#ToolsCategoryNew").multiselect('destroy');
            $("#ToolsCategoryNew").multiselectfilter('destroy');

            $("#ToolsCategoryNew").append(s);
            var wasToolCategorySelected = (typeof (selectedToolCategoryValue) != undefined && selectedToolCategoryValue !== undefined && selectedToolCategoryValue != null && selectedToolCategoryValue != '' && selectedToolCategoryValue.length > 0)
                ? true : false;

            if (typeof (wasToolCategorySelected) != undefined && wasToolCategorySelected !== undefined && wasToolCategorySelected == true) {
                for (var i = 0; i < selectedToolCategoryValue.length; i++) {
                    $("#ToolsCategoryNew").multiselect("widget").find(":checkbox[value='" + selectedToolCategoryValue[i] + "']").attr("checked", "checked");
                    $("#ToolsCategoryNew option[value='" + selectedToolCategoryValue[i] + "']").attr("selected", 1);
                    var text = $("#ToolsCategoryNew option[value='" + selectedToolCategoryValue[i] + "']").text()
                    if ($("#ToolsCategoryNewCollapse").text().indexOf(text) == -1) {
                        $("#ToolsCategoryNewCollapse").append("<span>" + text + "</span>");
                    }
                }
                $("#ToolsCategoryNew").multiselect('reload');
            }
            var currentDataCount = $('select#ToolsCategoryNew option').length;
            if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                $(".alltoolscategorynew").hide();
                $(".moretoolscategorynew").hide();
            }
            $("#ToolsCategoryNew").multiselect(
                {
                    noneSelectedText: ToolsCategory, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ToolsCategory + ': ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#ToolsCategoryNewCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#ToolsCategoryNewCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#ToolsCategoryNewCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#ToolsCategoryNewCollapse").show();
                    }
                }
            )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                    if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                        var currentDataCount = $('select#ToolsCategoryNew option').length;
                        var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        });

                        var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                        if (event.type == 'multiselectloadall') {
                            _loaddataCount = -1;
                            $(".alltoolscategorynew").hide();
                            $(".moretoolscategorynew").hide();
                        }
                        $.ajax({
                            'url': '/Master/GetNarrowDDData',
                            data: { TableName: TableName, TextFieldName: 'ToolCategory', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName, LoadDataCount: _loaddataCount },
                            success: function (response) {
                                var s = '';
                                $.each(response.DDData, function (ValData, ValCount) {

                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("#ToolsCategoryNew").empty();
                                $("#ToolsCategoryNew").append(s);
                                $("#ToolsCategoryNew").multiselect("refresh");
                                $("#ToolsCategoryNew").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#ToolsCategoryNew option').length;

                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".alltoolscategorynew").hide();
                                    $(".moretoolscategorynew").hide();
                                }
                            },
                            error: function (response) {
                                // through errror message
                            }
                        });

                    }
                    else {
                        if (ui.checked) {
                            if ($("#ToolsCategoryNewCollapse").text().indexOf(ui.text) == -1) {
                                $("#ToolsCategoryNewCollapse").append("<span>" + ui.text + "</span>");
                            }
                        }
                        else {
                            if (ui.checked == undefined) {
                                $("#ToolsCategoryNewCollapse").html('');
                            }
                            else if (!ui.checked) {
                                var text = $("#ToolsCategoryNewCollapse").html();
                                text = text.replace("<span>" + ui.text + "</span>", '');
                                $("#ToolsCategoryNewCollapse").html(text);
                            }
                            else
                                $("#ToolsCategoryNewCollapse").html('');
                        }
                    }
                    ToolCategoryValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.ToolsCategoryNew = ToolCategoryValue;

                    if ($("#ToolsCategoryNewCollapse").text().trim() != '')
                        $("#ToolsCategoryNewCollapse").show();
                    else
                        $("#ToolsCategoryNewCollapse").hide();


                    if ($("#ToolsCategoryNewCollapse").find('span').length <= 2) {
                        $("#ToolsCategoryNewCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ToolsCategoryNewCollapse").scrollTop(0).height(100);
                    }
                    if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();

                        DoNarrowSearch();
                    }
                }).multiselectfilter();

            _NarrowSearchSave.setControlValue("ToolsCategoryNew");

        },
        error: function (response) {
            // through errror message
        }
    });

    $("#ToolsTechnicianNew").empty();
    $("#ToolsTechnicianNew").multiselect('destroy');
    $("#ToolsTechnicianNew").multiselectfilter('destroy');

    $("#ToolsTechnicianNew").multiselect(
        {
            noneSelectedText: TechnicianList, selectedList: 5,
            selectedText: function (numChecked, numTotal, checkedItems) {
                return TechnicianList + ': ' + numChecked + ' ' + selected;
            }
        },
        {
            checkAll: function (ui) {
                $("#ToolsTechnicianNewCollapse").html('');
                for (var i = 0; i <= ui.target.length - 1; i++) {
                    if ($("#ToolsTechnicianNewCollapse").text().indexOf(ui.target[i].text) == -1) {
                        $("#ToolsTechnicianNewCollapse").append("<span>" + ui.target[i].text + "</span>");
                    }
                }
                $("#ToolsTechnicianNewCollapse").show();
            }
        },
        {
            beforeopen: function () {
                if ($("#ToolsTechnicianNew option").length == 0) {
                    $.ajax({
                        'url': '/Master/GetNarrowDDData',
                        data: { TableName: TableName, TextFieldName: 'ToolsTechnician', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName },
                        success: function (response) {
                            var selectedToolTechnician = ToolTechnicianValue;
                            var s = '';
                            $.each(response.DDData, function (ValData, ValCount) {
                                var ArrData = ValData.toString().split('[###]');
                                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                            });
                            $("#ToolsTechnicianNewCollapse").html('');
                            $("#ToolsTechnicianNew").empty();
                            $("#ToolsTechnicianNew").append(s);
                            var wasTechnicianSelected = (typeof (selectedToolTechnician) != undefined && selectedToolTechnician !== undefined && selectedToolTechnician != null && selectedToolTechnician != '' && selectedToolTechnician.length > 0)
                                ? true : false;

                            if (typeof (wasTechnicianSelected) != undefined && wasTechnicianSelected !== undefined && wasTechnicianSelected == true) {
                                for (var i = 0; i < selectedToolTechnician.length; i++) {
                                    $("#ToolsTechnicianNew").multiselect("widget").find(":checkbox[value='" + selectedToolTechnician[i] + "']").attr("checked", "checked");
                                    $("#ToolsTechnicianNew option[value='" + selectedToolTechnician[i] + "']").attr("selected", 1);

                                    var text = $("#ToolsTechnicianNew option[value='" + selectedToolTechnician[i] + "']").text()
                                    if ($("#ToolsTechnicianNewCollapse").text().indexOf(text) == -1) {
                                        $("#ToolsTechnicianNewCollapse").append("<span>" + text + "</span>");
                                    }
                                }
                                //$("select").multiselect('reload');
                                $("#ToolsTechnicianNew").multiselect('reload');
                                //$("#ToolsTechnician").multiselect("refresh");                    
                            }
                            $("#ToolsTechnicianNew").multiselect("refresh");
                            $("#ToolsTechnicianNew").multiselectfilter("refresh");
                        },
                        error: function (response) {
                            // through errror message
                        }
                    });
                }
            }
        }
    )
        .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
            if (ui.checked) {
                if ($("#ToolsTechnicianNewCollapse").text().indexOf(ui.text) == -1) {
                    $("#ToolsTechnicianNewCollapse").append("<span>" + ui.text + "</span>");
                }
            }
            else {
                if (ui.checked == undefined) {
                    $("#ToolsTechnicianNewCollapse").html('');
                }
                else if (!ui.checked) {
                    var text = $("#ToolsTechnicianNewCollapse").html();
                    text = text.replace("<span>" + ui.text + "</span>", '');
                    $("#ToolsTechnicianNewCollapse").html(text);
                }
                else
                    $("#ToolsTechnicianNewCollapse").html('');
            }
            ToolTechnicianValue = $.map($(this).multiselect("getChecked"), function (input) {
                return input.value;
            })
            _NarrowSearchSave.objSearch.ToolsTechnicianNew = ToolTechnicianValue;

            if ($("#ToolsTechnicianNewCollapse").text().trim() != '')
                $("#ToolsTechnicianNewCollapse").show();
            else
                $("#ToolsTechnicianNewCollapse").hide();


            if ($("#ToolsTechnicianNewCollapse").find('span').length <= 2) {
                $("#ToolsTechnicianNewCollapse").scrollTop(0).height(50);
            }
            else {
                $("#ToolsTechnicianNewCollapse").scrollTop(0).height(100);
            }

            if (!isFromNarrowSearchClear) {
                clearGlobalIfNotInFocus();
                DoNarrowSearch();
            }

            if (ToolTechnicianValue.length == 1) {
                $("input#btnToolCheckInAllBottom").show();
            }
            else {
                $("input#btnToolCheckInAllBottom").hide();
            }
        }).multiselectfilter();

    _NarrowSearchSave.setControlValue("ToolsTechnicianNew");

    if (TableName == "TechnicianMaster") {
        $.ajax({
            'url': '/Master/GetDDData',
            data: { TableName: 'TechnicianMaster', TextFieldName: 'Technician' },
            success: function (response) {
                var selectedTechnicianValue = TechicianValue;

                var s = '';
                $.each(response.DDData, function (i, val) {
                    s += '<option value="' + val.ID + '">' + val.Text + '</option>';
                });
                $("#ToolsTechnician").append(s);
                var wasTechnicianSelected = (typeof (selectedTechnicianValue) != undefined && selectedTechnicianValue !== undefined && selectedTechnicianValue != null && selectedTechnicianValue != '' && selectedTechnicianValue.length > 0)
                    ? true : false;

                if (typeof (wasTechnicianSelected) != undefined && wasTechnicianSelected !== undefined && wasTechnicianSelected == true) {
                    for (var i = 0; i < selectedTechnicianValue.length; i++) {
                        $("#ToolsTechnician").multiselect("widget").find(":checkbox[value='" + selectedTechnicianValue[i] + "']").attr("checked", "checked");
                        $("#ToolsTechnician option[value='" + selectedTechnicianValue[i] + "']").attr("selected", 1);
                    }
                    $("#ToolsTechnician").multiselect('reload');
                }
                $("#ToolsTechnician").multiselect(
                    {
                        noneSelectedText: TechnicianList, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return TechnicianList + numChecked + ' ' + selected;
                        }
                    }
                )
                    .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                    .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                        TechicianValue = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        })
                    });
            },
            error: function (response) {
                // through errror message
            }
        });

        $.ajax({
            'url': '/Master/GetDDData',
            data: { TableName: 'TechnicianMaster', TextFieldName: 'Technician' },
            success: function (response) {
                var selectedTechnicianValue = TechicianValue;
                var s = '';
                $.each(response.DDData, function (i, val) {
                    s += '<option value="' + val.ID + '">' + val.Text + '</option>';
                });
                $("#ToolsTechnicianNew").append(s);
                var wasTechnicianSelected = (typeof (selectedTechnicianValue) != undefined && selectedTechnicianValue !== undefined && selectedTechnicianValue != null && selectedTechnicianValue != '' && selectedTechnicianValue.length > 0)
                    ? true : false;

                if (typeof (wasTechnicianSelected) != undefined && wasTechnicianSelected !== undefined && wasTechnicianSelected == true) {
                    for (var i = 0; i < selectedTechnicianValue.length; i++) {
                        $("#ToolsTechnicianNew").multiselect("widget").find(":checkbox[value='" + selectedTechnicianValue[i] + "']").attr("checked", "checked");
                        $("#ToolsTechnicianNew option[value='" + selectedTechnicianValue[i] + "']").attr("selected", 1);
                    }
                    $("#ToolsTechnicianNew").multiselect('reload');
                }
                $("#ToolsTechnicianNew").multiselect(
                    {
                        noneSelectedText: TechnicianList, selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return TechnicianList + numChecked + ' ' + selected;
                        }
                    }
                )
                    .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                    .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                        TechicianValue = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        })
                    });
            },
            error: function (response) {
                // through errror message
            }
        });
    }

    $.ajax({
        'url': '/Master/GetDDData',
        data: { TableName: 'WorkOrder', TextFieldName: 'WOName' },
        success: function (response) {
            var selectedWorkorderValue = WorkOrderValue;

            var s = '';
            $.each(response.DDData, function (i, val) {
                s += '<option value="' + val.ID + '">' + val.Text + '</option>';
            });
            $("#ToolsWorkOrder").append(s);
            var wasWorkorderSelected = (typeof (selectedWorkorderValue) != undefined && selectedWorkorderValue !== undefined && selectedWorkorderValue != null && selectedWorkorderValue != '' && selectedWorkorderValue.length > 0)
                ? true : false;

            if (typeof (wasWorkorderSelected) != undefined && wasWorkorderSelected !== undefined && wasWorkorderSelected == true) {
                for (var i = 0; i < selectedWorkorderValue.length; i++) {
                    $("#ToolsWorkOrder").multiselect("widget").find(":checkbox[value='" + selectedWorkorderValue[i] + "']").attr("checked", "checked");
                    $("#ToolsWorkOrder option[value='" + selectedWorkorderValue[i] + "']").attr("selected", 1);
                }
                $("#ToolsWorkOrder").multiselect('reload');
            }
            $("#ToolsWorkOrder").multiselect(
                {
                    noneSelectedText: 'Work Order', selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return 'Work Order: ' + numChecked + ' ' + selected;
                    }
                }
            )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    WorkOrderValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })
                });
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: TableName, TextFieldName: 'Location', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName},
        success: function (response) {
            var selectedLocationValue = LocationValue;

            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ToolsLocationNewCollapse").html('');
            $("#ToolsLocationNew").empty();
            $("#ToolsLocationNew").multiselect('destroy');
            $("#ToolsLocationNew").multiselectfilter('destroy');

            $("#ToolsLocationNew").append(s);
            var wasLocationSelected = (typeof (selectedLocationValue) != undefined && selectedLocationValue !== undefined && selectedLocationValue != null && selectedLocationValue != '' && selectedLocationValue.length > 0)
                ? true : false;

            if (typeof (wasLocationSelected) != undefined && wasLocationSelected !== undefined && wasLocationSelected == true) {
                for (var i = 0; i < selectedLocationValue.length; i++) {
                    $("#ToolsLocationNew").multiselect("widget").find(":checkbox[value='" + selectedLocationValue[i] + "']").attr("checked", "checked");
                    $("#ToolsLocationNew option[value='" + selectedLocationValue[i] + "']").attr("selected", 1);

                    var text = $("#ToolsLocationNew option[value='" + selectedLocationValue[i] + "']").text()
                    if ($("#ToolsLocationNewCollapse").text().indexOf(text) == -1) {
                        $("#ToolsLocationNewCollapse").append("<span>" + text + "</span>");
                    }
                }
                $("#ToolsLocationNew").multiselect('reload');
            }
            var currentDataCount = $('select#ToolsLocationNew option').length;
            if (parseInt(currentDataCount) < parseInt(loadNarrowSearchDataCount)) {
                $(".alltoolslocationnew").hide();
                $(".moretoolslocationnew").hide();
            }
            $("#ToolsLocationNew").multiselect(
                {
                    noneSelectedText: ToolsLocation, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ToolsLocation + ': ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#ToolsLocationNewCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#ToolsLocationNewCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#ToolsLocationNewCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#ToolsLocationNewCollapse").show();
                    }
                }
            )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall multiselectloadmore multiselectloadall", function (event, ui) {
                    if (event.type == 'multiselectloadmore' || event.type == 'multiselectloadall') {
                        var currentDataCount = $('select#ToolsLocationNew option').length;
                        var _selectedSP = $.map($(this).multiselect("getChecked"), function (input) {
                            return input.value;
                        });

                        var _loaddataCount = parseInt(currentDataCount) + parseInt(loadNarrowSearchDataCount);
                        if (event.type == 'multiselectloadall') {
                            _loaddataCount = -1;
                            $(".alltoolslocationnew").hide();
                            $(".moretoolslocationnew").hide();
                        }
                        $.ajax({
                            'url': '/Master/GetNarrowDDData',
                            data: { TableName: TableName, TextFieldName: 'Location', IsArchived: _IsArchived, IsDeleted: _IsDeleted, RequisitionCurrentTab: _TabName, LoadDataCount: _loaddataCount },
                            success: function (response) {
                                var s = '';
                                $.each(response.DDData, function (ValData, ValCount) {

                                    var ArrData = ValData.toString().split('[###]');
                                    if ($.inArray(ArrData[1], _selectedSP) > -1) {
                                        s += '<option selected="selected" value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                    else {
                                        s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
                                    }
                                });

                                //Destroy widgets before reapplying the filter
                                $("#ToolsLocationNew").empty();
                                $("#ToolsLocationNew").append(s);
                                $("#ToolsLocationNew").multiselect("refresh");
                                $("#ToolsLocationNew").multiselectfilter("refresh");

                                var currentNewDataCount = $('select#ToolsLocationNew option').length;

                                if (parseInt(currentDataCount) >= parseInt(currentNewDataCount)) {
                                    $(".alltoolslocationnew").hide();
                                    $(".moretoolslocationnew").hide();
                                }
                            },
                            error: function (response) {
                                // through errror message
                            }
                        });

                    }
                    else {
                        if (ui.checked) {
                            if ($("#ToolsLocationNewCollapse").text().indexOf(ui.text) == -1) {
                                $("#ToolsLocationNewCollapse").append("<span>" + ui.text + "</span>");
                            }
                        }
                        else {
                            if (ui.checked == undefined) {
                                $("#ToolsLocationNewCollapse").html('');
                            }
                            else if (!ui.checked) {
                                var text = $("#ToolsLocationNewCollapse").html();
                                text = text.replace("<span>" + ui.text + "</span>", '');
                                $("#ToolsLocationNewCollapse").html(text);
                            }
                            else
                                $("#ToolsLocationNewCollapse").html('');
                        }
                    }
                    LocationValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.ToolsLocationNew = LocationValue;

                    if ($("#ToolsLocationNewCollapse").text().trim() != '')
                        $("#ToolsLocationNewCollapse").show();
                    else
                        $("#ToolsLocationNewCollapse").hide();


                    if ($("#ToolsLocationNewCollapse").find('span').length <= 2) {
                        $("#ToolsLocationNewCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ToolsLocationNewCollapse").scrollTop(0).height(100);
                    }
                    if (event.type != 'multiselectloadmore' && event.type != 'multiselectloadall' && !isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("ToolsLocationNew");
        },
        error: function (response) {
            // through errror message
        }
    });
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: TableName, TextFieldName: 'ToolMaintenance', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var selectedMaintenanceValue = MaintenanceValue;
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('###');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + ' (' + ValCount + ')' + '</option>';
            });

            //Destroy widgets before reapplying the filter
            $("#ToolCheckoutNewCollapse").html('');
            $("#ToolCheckoutNew").empty();
            $("#ToolCheckoutNew").multiselect('destroy');
            $("#ToolCheckoutNew").multiselectfilter('destroy');

            $("#ToolCheckoutNew").append(s);
            var wasToolCheckoutSelected = (typeof (selectedMaintenanceValue) != undefined && selectedMaintenanceValue !== undefined && selectedMaintenanceValue != null && selectedMaintenanceValue != '' && selectedMaintenanceValue.length > 0)
                ? true : false;

            if (typeof (wasToolCheckoutSelected) != undefined && wasToolCheckoutSelected !== undefined && wasToolCheckoutSelected == true) {
                for (var i = 0; i < selectedMaintenanceValue.length; i++) {
                    $("#ToolCheckoutNew").multiselect("widget").find(":checkbox[value='" + selectedMaintenanceValue[i] + "']").attr("checked", "checked");
                    $("#ToolCheckoutNew option[value='" + selectedMaintenanceValue[i] + "']").attr("selected", 1);
                    var text = $("#ToolCheckoutNew option[value='" + selectedMaintenanceValue[i] + "']").text()
                    if ($("#ToolCheckoutNewCollapse").text().indexOf(text) == -1) {
                        $("#ToolCheckoutNewCollapse").append("<span>" + text + "</span>");
                    }
                }
                $("#ToolCheckoutNew").multiselect('reload');
            }
            $("#ToolCheckoutNew").multiselect(
                {
                    noneSelectedText: ToolsMaintenance, selectedList: 5,
                    selectedText: function (numChecked, numTotal, checkedItems) {
                        return ToolsMaintenance + ': ' + numChecked + ' ' + selected;
                    }
                },
                {
                    checkAll: function (ui) {
                        $("#ToolCheckoutNewCollapse").html('');
                        for (var i = 0; i <= ui.target.length - 1; i++) {
                            if ($("#ToolCheckoutNewCollapse").text().indexOf(ui.target[i].text) == -1) {
                                $("#ToolCheckoutNewCollapse").append("<span>" + ui.target[i].text + "</span>");
                            }
                        }
                        $("#ToolCheckoutNewCollapse").show();
                    }
                }
            )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {
                        if ($("#ToolCheckoutNewCollapse").text().indexOf(ui.text) == -1) {
                            $("#ToolCheckoutNewCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {
                        if (ui.checked == undefined) {
                            $("#ToolCheckoutNewCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ToolCheckoutNewCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ToolCheckoutNewCollapse").html(text);
                        }
                        else
                            $("#ToolCheckoutNewCollapse").html('');
                    }
                    MaintenanceValue = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    _NarrowSearchSave.objSearch.ToolCheckoutNew = MaintenanceValue;

                    if ($("#ToolCheckoutNewCollapse").text().trim() != '')
                        $("#ToolCheckoutNewCollapse").show();
                    else
                        $("#ToolCheckoutNewCollapse").hide();


                    if ($("#ToolCheckoutNewCollapse").find('span').length <= 2) {
                        $("#ToolCheckoutNewCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ToolCheckoutNewCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }

                }).multiselectfilter();
            _NarrowSearchSave.setControlValue("ToolCheckoutNew");
        },
        error: function (response) {
            // through errror message
        }
    });
    $("#ToolsMaintenance").multiselect(
        {
            noneSelectedText: 'Tool Maintenance', selectedList: 5,
            selectedText: function (numChecked, numTotal, checkedItems) {
                return 'Tool Maintenance: ' + numChecked + ' ' + selected;
            }
        }
    ).unbind("multiselectclick multiselectcheckall multiselectuncheckall")
        .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
            ToolMaintanceValue = $.map($(this).multiselect("getChecked"), function (input) {
                return input.value;
            })
        });
}

$(document).on('click', "#btnShowReport", function () {

    var _CatalogID = $('#divCatalogReportPopup').find('#hdnCatalogReportID').val();
    var _ItemIDs = $('#divCatalogReportPopup').find('#hdnSelectedItemIDs').val();
    var _CallFrom = $('#divCatalogReportPopup').find('#hdncallFrom').val();
    var _GroupName = $('#divCatalogReportPopup').find('#ddlGroupName').val();
    var _Sort = $('#divCatalogReportPopup').find('#ddlSort').val();
    var _SortAscDesc = $('#divCatalogReportPopup').find('#ddlSortAscDesc').val();
    var _IncludeInactiveItems = $('#divCatalogReportPopup').find('#chkIncludeInactiveItems').is(":checked");

    $.ajax({
        url: "/CatalogReport/SetGenerateCatalogReportData",
        dataType: 'json',
        data: { 'CatalogID': _CatalogID, 'ItemIDs': _ItemIDs, 'CallFrom': _CallFrom, 'GroupName': _GroupName, 'Sort': _Sort, 'SortAscDesc': _SortAscDesc, 'IncludeInactiveItems': _IncludeInactiveItems },
        success: function (result) {
            if (result.Status) {
                window.open('/CatalogReport/GenerateCatalogReportNew', '_blank');
            }
        }
    });
});

$(document).on('click', "#btnPrintLable", function () {
    var _hdnIDs = $('#divLabelPrintPopup').find('#hdnIDs').val();
    var _hdnModuleID = $('#divLabelPrintPopup').find('#hdnModuleID').val();
    var _hdnSortField = $('#divLabelPrintPopup').find('#hdnSortField').val();
    var _hdnROTDIds = $('#divLabelPrintPopup').find('#hdnROTDIds').val();
    var _hdnROTDSortField = $('#divLabelPrintPopup').find('#hdnROTDSortField').val();
    var _hdnCallFrom = $('#divLabelPrintPopup').find('#hdnCallFrom').val();
    var _txtNoOfLableCopy = $('#divLabelPrintPopup').find('#txtNoOfLableCopy').val();
    var _txtNoUsedLable = $('#divLabelPrintPopup').find('#txtNoUsedLable').val();

    $.ajax({
        url: "/LabelPrinting/SetGenerateLabelsPDFData",
        dataType: 'json',
        "type": 'POST',
        "async": false,
        "cache": false,
        data: { 'IDs': _hdnIDs, 'ModuleID': _hdnModuleID, 'SortField': _hdnSortField, 'ROTDIds': _hdnROTDIds, 'ROTDSortField': _hdnROTDSortField,
            'CallFrom': _hdnCallFrom, 'NoOfLableCopy': _txtNoOfLableCopy, 'NoUsedLable': _txtNoUsedLable, 'ActionName': gblActionName
        },
        success: function (result) {
            if (result.Status) {
                window.open('/LabelPrinting/GenerateLabelsPDFNew', '_blank');
            }
        }
    });

});

function GetKitMasterNarrowSearchDataNew(_TableName, _IsArchived, _IsDeleted) {
    $.ajax({
        'url': '/Master/GetNarrowDDData',
        data: { TableName: _TableName, TextFieldName: 'WIPKitsReadyforBuild', IsArchived: _IsArchived, IsDeleted: _IsDeleted },
        success: function (response) {
            var s = '';
            $.each(response.DDData, function (ValData, ValCount) {
                var ArrData = ValData.toString().split('[###]');
                s += '<option value="' + ArrData[1] + '">' + ArrData[0] + '</option>';
            });


            //Destroy widgets before reapplying the filter
            $("#ddlWIPKit").empty();
            $("#ddlWIPKit").multiselect('destroy');
            $("#ddlWIPKit").multiselectfilter('destroy');

            $("#ddlWIPKit").append(s);
            $("#ddlWIPKit").multiselect
                (
                    {
                        noneSelectedText: 'WIPKitsReadyforBuild', selectedList: 5,
                        selectedText: function (numChecked, numTotal, checkedItems) {
                            return 'WIPKitsReadyforBuild' + numChecked + ' ' + selected;
                        }
                    },
                    {
                        checkAll: function (ui) {
                            $("#ddlWIPKitCollapse").html('');
                            for (var i = 0; i <= ui.target.length - 1; i++) {
                                if ($("#ddlWIPKitCollapse").text().indexOf(ui.target[i].text) == -1) {
                                    $("#ddlWIPKitCollapse").append("<span>" + ui.target[i].text + "</span>");
                                }
                            }
                            $("#ddlWIPKitCollapse").show();
                        }
                    }
                )
                .unbind("multiselectclick multiselectcheckall multiselectuncheckall")
                .bind("multiselectclick multiselectcheckall multiselectuncheckall", function (event, ui) {
                    if (ui.checked) {

                        if ($("#ddlWIPKitCollapse").text().indexOf(ui.text) == -1) {
                            $("#ddlWIPKitCollapse").append("<span>" + ui.text + "</span>");
                        }
                    }
                    else {

                        if (ui.checked == undefined) {
                            $("#ddlWIPKitCollapse").html('');
                        }
                        else if (!ui.checked) {
                            var text = $("#ddlWIPKitCollapse").html();
                            text = text.replace("<span>" + ui.text + "</span>", '');
                            $("#ddlWIPKitCollapse").html(text);
                        }
                        else
                            $("#ddlWIPKitCollapse").html('');
                    }
                    OrderNumberNarroValues = $.map($(this).multiselect("getChecked"), function (input) {
                        return input.value;
                    })

                    if ($("#ddlWIPKitCollapse").text().trim() != '')
                        $("#ddlWIPKitCollapse").show();
                    else
                        $("#ddlWIPKitCollapse").hide();


                    if ($("#ddlWIPKitCollapse").find('span').length <= 2) {
                        $("#ddlWIPKitCollapse").scrollTop(0).height(50);
                    }
                    else {
                        $("#ddlWIPKitCollapse").scrollTop(0).height(100);
                    }
                    if (!isFromNarrowSearchClear) {
                        clearGlobalIfNotInFocus();
                        DoNarrowSearch();
                    }
                }).multiselectfilter();
        },
        error: function (response) {
            // through errror message
        }
    });
}

//var _AjaxUtil = (function ($) {
//    var self = {};

//    self.getText = function (url, data, fnSuccess, fnError, async, cache) {

//        if (typeof cache === 'undefined' || cache == null) {
//            cache = true;
//        }

//        if (typeof async === 'undefined' || async == null) {
//            async = true;
//        }

//        var jqXHR = $.ajax({
//            "url": url,
//            "type": 'GET',
//            "data": data,
//            "async": async,
//            "cache": cache,
//            "dataType": "text",
//            "success": function (json) {
//                if (fnSuccess != null && typeof fnSuccess === 'function') {
//                    fnSuccess(json);
//                }
//            },
//            error: function (response) {
//                if (fnError != null && typeof fnError === 'function') {
//                    fnError(response);
//                }
//            }
//        });

//        return jqXHR;
//    }

//    self.getJson = function (url, data, fnSuccess, fnError, async, cache) {

//        if (typeof cache === 'undefined' || cache == null) {
//            cache = true;
//        }

//        if (typeof async === 'undefined' || async == null) {
//            async = true;
//        }

//        var jqXHR = $.ajax({
//            "url": url,
//            "type": 'GET',
//            "data": data,
//            "async": async,
//            "cache": cache,
//            "dataType": "json",
//            "success": function (json) {
//                if (fnSuccess != null && typeof fnSuccess === 'function') {
//                    fnSuccess(json);
//                }
//            },
//            error: function (response) {
//                if (fnError != null && typeof fnError === 'function') {
//                    fnError(response);
//                }
//            }
//        });

//        return jqXHR;
//    }

//    self.postJson = function (url, data, fnSuccess, fnError, async, cache, fnBeforeSend, fnComplete, headers) {

//        if (typeof cache === 'undefined' || cache == null) {
//            cache = true;
//        }

//        if (typeof async === 'undefined' || async == null) {
//            async = true;
//        }

//        var jqXHR = $.ajax({
//            "url": url,
//            "type": "POST",
//            data: data,
//            "async": async,
//            cache: cache,
//            "dataType": "json",
//            headers: headers,
//            beforeSend: fnBeforeSend,
//            //beforeSend: function () {
//            //    if (fnBeforeSend != null && typeof fnBeforeSend === 'function') {
//            //        fnBeforeSend(json);
//            //    }
//            //},
//            "success": function (json) {
//                if (fnSuccess != null && typeof fnSuccess === 'function') {
//                    fnSuccess(json);
//                }
//            },
//            "error": function (response) {
//                if (fnError != null && typeof fnError === 'function') {
//                    fnError(response);
//                }
//            },
//            complete: function (xhr, status) {
//                // A function to be called when the request finishes (after success and error callbacks are executed)
//                if (fnComplete != null && typeof fnComplete === 'function') {
//                    fnComplete(xhr, status);
//                }
//            }
//        });

//        return jqXHR;
//    }

//    self.postText = function (url, data, fnSuccess, fnError, async, cache, isJsonPara) {

//        if (typeof cache === 'undefined' || cache == null) {
//            cache = true;
//        }

//        if (typeof async === 'undefined' || async == null) {
//            async = true;
//        }

//        var contentType = "application/json";

//        if (isJsonPara == false) {
//            contentType = "application/x-www-form-urlencoded; charset=UTF-8";
//        }

//        var jqXHR = $.ajax({
//            "url": url,
//            "type": "POST",
//            data: data,
//            "async": async,
//            cache: cache,
//            "dataType": "text", // dataType is what you're expecting back from the server
//            "contentType": contentType, // contentType is the type of data you're sending
//            "success": function (json) {
//                if (fnSuccess != null && typeof fnSuccess === 'function') {
//                    fnSuccess(json);
//                }
//            },
//            "error": function (response) {
//                if (fnError != null && typeof fnError === 'function') {
//                    fnError(response);
//                }
//            }
//        });
//        return jqXHR;
//    }

//    return self;
//})(jQuery);


var _Common = (function ($) {
    var self = {};

    self.Grid_IsNotFireRawCallBack = true;

    self.gridOperations = {
        None: 'None',
        Refresh: 'Refresh', IncludeDeleted: 'IncludeDeleted'
        , IncludeArchived: 'IncludeArchived', AutoRefresh: 'AutoRefresh'
        , Search: 'Search', PageSizeChange: 'PageSizeChange', Sorting: 'Sorting'
        , PageChange: 'PageChange', ColumnResize: 'ColumnResize', Redraw: 'Redraw'
    };

    self.selectedGridOperation = self.gridOperations.None;

    self.Grid_IsNotFireRawCallBackUrl = function (ajaxUrl) {
        var b = false;
        var url = location.href;
        if (url.indexOf('/Assets/ToolList') > 0) {
            b = ajaxUrl === "/Assets/ToolListAjax" || ajaxUrl === "/Assets/CheckInCheckOutListAjax";
        }
        else if (url.indexOf("/Receive/ReceiveList") > 0) {
            b = ajaxUrl === "/Receive/ReceiveListAjax";
        }
        else if (url.indexOf("/Pull/PullMasterList") > 0) {
            b = ajaxUrl === "/Pull/PullMasterListAjax" || ajaxUrl === "/Pull/PullDetailsListAjax";
        }
        else if (url.indexOf("/WorkOrder/WorkOrderList") > 0) {
            b = ajaxUrl === "/WorkOrder/WOMasterListAjax" || ajaxUrl === "/WorkOrder/PullMasterListByWOAjax";
        }
        else if (url.indexOf("/Pull/NewPull") > 0) {
            b = ajaxUrl === "/Pull/GetItemsModelMethod/";
        }

        return b;
    }

    self.showHideLoader = function (isShow) {
        return _utils.showHideLoader(isShow);
        //if (isShow) {
        //    $('#DivLoading').show();
        //}
        //else {
        //    $('#DivLoading').hide();
        //}
    }

    self.getGlobalFilterVal = function (isTrimStart, txtFilterId) {
        //var $global_filter = $("#global_filter");
        var $global_filter = $("#" + txtFilterId);
        var filterVal = '';
        if ($global_filter.length === 0) {
            return '';
        }

        filterVal = $global_filter.val();

        if (isTrimStart) {
            filterVal = filterVal.trimStart();
        }

        return filterVal;
    };

    self.trimStartGlobalFilter = function (txtFilterId) {
        //var $global_filter = $("#global_filter");
        var $global_filter = $("#" + txtFilterId);
        if ($global_filter.length) {
            var filterVal = $global_filter.val().trimStart();
            $global_filter.val(filterVal);
        }
    };

    self.highlightTextInTable = function (txtFilterId, myDataTableId) {
        //var $myDataTable = $('#myDataTable');
        var $myDataTable = $('#' + myDataTableId);
        var filterVal = self.getGlobalFilterVal(true, txtFilterId);
        $myDataTable.removeHighlight();
        if (filterVal.length > 0) {
            $myDataTable.highlight(filterVal);
        }
    };

    self.isFunction = function (fnFunction) {
        return _utils.isFunction(fnFunction);
        //return $.isFunction(fnFunction);
    };


    self.isIncrementalSearch = function () {
        return SearchPattern == 2 || SearchPattern == "2";
    };

    self.setGloblaSearch = function (txtFilerId, myDataTableId, fnIncrementSearch, fnEnterSearch) {


        var timeouttc;
        var timeouttcEnter = null;
        var isIncreamentSearch = self.isIncrementalSearch();
        var isKeyUp = false;

        //var txtFilerId = 'searchInAllItems';
        //var myDataTableId = 'ItemModeDataTable';
        var $searchInAllItems = $('#' + txtFilerId);
        //var $ItemModeDataTable = $('#' + myDataTableId);

        $searchInAllItems.bind('propertychange input', function () {
            clearTimeout(timeouttc);


            if (isIncreamentSearch) {
                timeouttc = setTimeout(function () {
                    // incremental search on change in textbox
                    var filterVal = _Common.getGlobalFilterVal(false, txtFilerId);
                    var filterValTrimmed = _Common.getGlobalFilterVal(true, txtFilerId);

                    // trim starting space
                    self.trimStartGlobalFilter(txtFilerId);

                    if (filterValTrimmed.length > 2 || filterVal.length === 0) {
                        var searchtext = filterValTrimmed.replace(/'/g, "''");

                        // call incremental search logic
                        if (self.isFunction(fnIncrementSearch)) {
                            fnIncrementSearch(searchtext);
                        }

                    }
                    else {
                        // highlight text without API call
                        self.highlightTextInTable(txtFilerId, myDataTableId);

                    }
                }, 300);
            }
            else {

                // call search on enter if search val become blank
                if ($searchInAllItems.val().length === 0 && isKeyUp === false) {

                    clearTimeout(timeouttcEnter);

                    timeouttcEnter = setTimeout(function () {
                        if (self.isFunction(fnEnterSearch)) {
                            fnEnterSearch('', 0);
                        }
                    }, 200);
                }
            }

        });

        //if (!isIncreamentSearch) {
        // bind keyup


        //    $('#searchInAllItems').unbind("keypress");
        //$('#searchInAllItems').keypress(function (event) {
        $searchInAllItems.unbind("keyup").bind("keyup", function (event) {

            if (event.keyCode === 27 || event.key === "Escape" || event.key === "Esc") { // escape key maps to keycode `27`
                $searchInAllItems.val('');
                $("#" + myDataTableId + "").dataTable().fnFilter(
                    '',
                    null,
                    null,
                    null
                );
                $searchInAllItems.focus();
            }
            else if (!isIncreamentSearch) {
                clearTimeout(timeouttcEnter);

                timeouttcEnter = setTimeout(function () {
                    isKeyUp = true;
                    var KeyCode = (event.keyCode ? event.keyCode : event.which);
                    var filterVal = self.getGlobalFilterVal(false, txtFilerId);
                    var filterValTrimmed = self.getGlobalFilterVal(true, txtFilerId);

                    self.trimStartGlobalFilter(txtFilerId);

                    if ((filterValTrimmed.length > 0 && KeyCode === 13) || filterVal.length === 0) {

                        var searchtext = filterValTrimmed.replace(/'/g, "''");

                        if (self.isFunction(fnEnterSearch)) {
                            fnEnterSearch(searchtext, KeyCode);
                        }
                    }
                    else {
                        // highlight text without API call
                        self.highlightTextInTable(txtFilerId, myDataTableId);
                    }

                    isKeyUp = false;

                }, 350);
            }
        }); // keyup
        //};

    };

    self.isNullUndefined = function (obj) {
        return _utils.isNullUndefined(obj);
        //return typeof obj === 'undefined' || obj == null;
    }

    self.loadHeader = function (url) {

        var $divTopNav = $("#divTopNav");
        //$divTopNav.hide();

        _AjaxUtil.getText('/HeaderWithMenu/Index', null
            , function (response) {
                $divTopNav.html(response);

                self.bindbtnPollAll();
                self.bindbtnTareAll();
                self.bindbtnCalibrateAll();

                SetReplenishRedCount();
                SetConsumeRedCount();
                SetItemCountInMenu();
                //$divTopNav.show();
                //$divTopNav.slideDown(1000);

                // sort menu
                //$(document).ready(function () {
                $("li.sortthis").find('ul > li').tsort();
                // open tool/toolist if allowed
                if (isToolOrderAllowed !== undefined && isToolOrderAllowed != null && isToolOrderAllowed != '') {
                    var url = window.location.href;
                    if (url.toLowerCase().indexOf("tool/toollist") > -1 && isToolOrderAllowed.toLowerCase() === "false") {
                        window.location.href = url.toLowerCase().replace('tool/toollist', 'Assets/ToolList')
                    }
                    else if (url.toLowerCase().indexOf("assets/toollist") > -1 && isToolOrderAllowed.toLowerCase() === "true") {
                        window.location.href = url.toLowerCase().replace('assets/toollist', 'Tool/ToolList')
                    }

                    if (url.toLowerCase().indexOf("toolkit/kittoollist") > -1 && isToolOrderAllowed.toLowerCase() === "false") {
                        window.location.href = url.toLowerCase().replace('toolkit/kittoollist', 'Kit/KitToolList')
                    }
                    else if (url.toLowerCase().indexOf("kit/kittoollist") > -1 && isToolOrderAllowed.toLowerCase() === "true") {
                        var newURL = url.toLowerCase().replace('kit/kittoollist', 'ToolKit/KitToolList');
                        if (newURL.toLowerCase().includes("tooltoolkit/kittoollist")) {
                            newURL = newURL.toLowerCase().replace('tooltoolkit/kittoollist', 'ToolKit/KitToolList');
                        }
                        if (url.toLowerCase() != newURL.toLowerCase()) {
                            window.location.href = newURL
                        }
                    }
                }

                //});

                if (typeof _myProfile !== 'undefined' && _myProfile != null) {
                    _myProfile.LoadRedirectPageDDL();
                }

            }
            , function (err) {
            }
            , true
            , false);
    };

    self.bindbtnPollAll = function () {

        $("#btnPollAll").off("click").on("click", function () {
            $('#DivLoading').show();
            $.ajax({
                url: urlSetPollAllTrue,
                type: 'Get',
                data: {},
                dataType: 'json',
                async: false,
                success: function (response) {
                    if (response.Status == "ok") {
                        $('#DivLoading').hide();
                        showNotificationDialog();
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    }
                    else if (response.Status == "fail") {
                        $('#DivLoading').hide();
                        showNotificationDialog();
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');

                    }

                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    showNotificationDialog();
                    $("#spanGlobalMessage").html(MsgErrorInProcess);
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');

                }
            });


        });
    };

    self.bindbtnTareAll = function () {

        $("#btnTareAll").off("click").on("click", function () {
            $('#DivLoading').show();
            $.ajax({
                url: urlSetTareAllTrue,
                type: 'Get',
                data: {},
                dataType: 'json',
                async: false,
                success: function (response) {
                    if (response.Status == "ok") {
                        $('#DivLoading').hide();
                        showNotificationDialog();
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    }
                    else if (response.Status == "fail") {
                        $('#DivLoading').hide();
                        showNotificationDialog();
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');

                    }

                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    showNotificationDialog();
                    $("#spanGlobalMessage").html(MsgErrorInProcess);
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');

                }
            });


        });
    };

    self.bindbtnCalibrateAll = function () {

        $("#btnCalibrateAll").off("click").on("click", function () {
            $('#DivLoading').show();
            $.ajax({
                url: urlSetCalibrateAllTrue,
                type: 'Get',
                data: {},
                dataType: 'json',
                async: false,
                success: function (response) {
                    if (response.Status == "ok") {
                        $('#DivLoading').hide();
                        showNotificationDialog();
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('errorIcon WarningIcon').addClass('succesIcon');
                    }
                    else if (response.Status == "fail") {
                        $('#DivLoading').hide();
                        showNotificationDialog();
                        $("#spanGlobalMessage").html(response.Message);
                        $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');

                    }

                },
                error: function (xhr) {
                    $('#DivLoading').hide();
                    showNotificationDialog();
                    $("#spanGlobalMessage").html("Unknown error");
                    $("#spanGlobalMessage").removeClass('succesIcon WarningIcon').addClass('errorIcon');

                }
            });


        });
    };

    self.getParameterByName = function (name) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(window.location.search);
        if (results == null)
            return "";
        else
            return decodeURIComponent(results[1].replace(/\+/g, " "));
    };

    self.getBoolInFormat = function (val) {
        return val == null ? '' : (val == true ? 'Yes' : 'No');
    };

    self.getEmptyStrIfNull = function (str) {
        if (typeof str === 'undefined' || str === null) {
            return '';
        }
        return str;
    }

    self.addRequiredSign = function () {
        // get all controls with 'data-val-required' attribute
        var reqLabels = $('input[type=text][data-val-required],input[type=checkbox][data-val-required="Required"],textarea[data-val-required],select[data-val-required],input[type=email][data-val-required="Required"],input[type=number][data-val-required]', ".all");
        reqLabels.each(function () {
            var req = $(this).attr('data-val-required');
            //var isReadonly = $(this).is('[readonly]');
            if (typeof req !== 'undefined') {
                var label = $('label[for="' + $(this).attr('id') + '"]');
                if (label.length <= 0) {
                    // find label for the control
                    label = $(this).parent().parent().find('label');

                    if (label.length <= 0) {
                        label = $(this).parent().parent().parent().find('label');
                    }
                }
                if (label.length) {
                    var text = label.text();
                    var labelParent = label.parent();
                    if (text.length > 0 && labelParent.text().indexOf('*') < 0)
                    //if (text.length > 0)
                    {
                        labelParent.append('<em> *</em>');
                    }
                }
            }
        });
    }

    self.getQueryStringVal = function (url, key) {
        var queryStr = url.split('?')[1];
        var keyVals = queryStr.split('&');
        for (var i = 0; i < keyVals.length; i++) {
            var keyVal = keyVals[i].split('=');
            if (keyVal[0] == key) {
                return keyVal[1];
            }
        }

        return '';
    }

    return self;

})(jQuery);

//var _AutoCompleteWrapper = (function ($) {

//    var self = {};

//    self.selectedItem = null;

//    self.isInit = function (ddl) {
//        return ddl.data('is_init') == true;
//    }

//    self.init = function (ddl, dataUrl, fnGetAjaxReqData,fnGetAjaxResData,fnSelect,fnChange,isPost, isCheckInit) {

//        if (isCheckInit && ddl.data('is_init') == true) {
//            return false;
//        }

//        //self.getAjaxReqData = function (request) {
//        //    return fnGetAjaxReqData(request);
//        //};
//        ddl.data('is_init', true);

//        ddl.autocomplete({
//            source: function (request, response) {

//                if (isPost) {
//                    //_AjaxUtil.postJson(dataUrl
//                    //    , reqData
//                    //    , function (data) {
//                    //        response(fnGetAjaxResData(data));
//                    //    }, null, true, false
//                    //);
//                      $.ajax({
//                          url: dataUrl,
//                        type: 'POST',
//                        data: fnGetAjaxReqData(request), //ON.stringify({ 'NameStartWith': request.term }),
//                        contentType: 'application/json',
//                          dataType: 'json',
//                          success: function (data) {
//                            response(fnGetAjaxResData(data));
//                          }
//                    });
//                }
//                else {
//                    //_AjaxUtil.getJson(dataUrl
//                    //    , fnGetAjaxReqData(request)
//                    //    , function (data) {
//                    //        response(fnGetAjaxResData(data));
//                    //    }, null, true, false
//                    //);

//                    $.ajax({
//                        url: dataUrl,
//                        type: 'GET',
//                        data: fnGetAjaxReqData(request),
//                        contentType: 'application/json',
//                        dataType: 'json',
//                        success: function (data) {
//                            response(fnGetAjaxResData(data));
//                        }
//                    });
//                }


//            },
//            autoFocus: false,
//            minLength: 0,
//            select: function (event, ui) {

//                var curVal = $(this).val();
//                self.selectedItem = ui.item;

//                if ($(this).val() !== ui.item.value
//                    && ui.item.selval !== "More Locations" 
//                ) {
//                    $(this).val(ui.item.value);
//                }

//                if (_Common.isFunction(fnSelect)) {                    
//                    fnSelect(curVal, self.selectedItem);
//                }

//            },
//            change: function (event, ui) {
//                self.selectedItem = ui.item;
//                if (_Common.isFunction(fnChange)) {
//                    fnChange(self.selectedItem);
//                }                
//            },
//            open: function () {
//                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");

//                $(this).autocomplete('widget').css('z-index', '99999 !important');
//                $(this).data('is_open', true);
//            },
//            close: function () {
//                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
//                $(this).data('is_open', false);
//            }
//        });

//    };

//    self.focus = function (ddl) {
//        ddl.trigger("focus");
//        return this;
//    };

//    self.close = function (ddl) {
//        ddl.trigger("close");
//        return this;
//    };

//    self.search = function (ddl,searchVal) {
//        ddl.autocomplete("search", searchVal);
//        return this;
//    };

//    self.isOpen = function (ddl) {
//        return ddl.data("is_open") === true;
//    };

//    self.searchHide = function (ddl) {
//        if (self.isOpen(ddl)) {
//            self.close(ddl);
//        }
//        else {
//            ddl.trigger("focus").autocomplete("search", " ");
//        }
//    };

//    return self;
//})(jQuery);

var _GridWrapper = (function ($) {

    // grid wrapper class for grid common functions
    var cls = function (tableId) {

        var self = this;

        self.tableId = tableId;

        self.init = function () {
            return self;
        };

        self.getTableObj = function () {
            return $('#' + self.tableId).dataTable();
        };

        self.getSelectedRows = function () {
            var selRows = self.getTableObj().$('tr.row_selected');
            return selRows;
        };

        self.getSelectedRowNos = function (hdnId) {
            var selRows = self.getSelectedRows();
            var selRowIds = [];

            if (selRows.length) {
                var len = selRows.length;
                for (var i = 0; i < len; i++) {
                    // get text from td using RowNo class 
                    var rid = $(selRows[i]).find("#" + hdnId).val();
                    if (rid) {
                        selRowIds.push(rid);
                    }
                }
            }

            return selRowIds;
        };

        self.toggleSelectRowNo = function (rowArray, hdnId) {
            if (typeof rowArray !== 'undefined' && rowArray != null && rowArray.length) {
                var len = rowArray.length;
                var table = $("#" + self.tableId);
                for (var i = 0; i < len; i++) {
                    // get rows which has td with RowNo = array value
                    //var row = table.find("td.RowNo:contains(" + rowArray[i] + ")").closest("tr");

                    var row = table.find("#" + hdnId).filter(function () {
                        return $(this).val().toLowerCase() === rowArray[i];
                    }).closest("tr");

                    self.toggleSelectRow(row);
                }
            }
        };

        self.toggleSelectRow = function (row) {
            if ($(row).length) {
                $(row).toggleClass('row_selected');
            }
            return false;
        };

        self.adjustColumnSizing = function () {
            self.getTableObj().fnAdjustColumnSizing();
            return self;
        }

        return self;
    };

    return cls;

})(jQuery);

function ShowHideNextRunDate(notificationIsActiveElementId,execDateElementIdToHide) {
    if (typeof (notificationIsActiveElementId) != "undefined" && notificationIsActiveElementId != null && notificationIsActiveElementId.length > 0) {
        var isScheduleActiveElement = $("#" + notificationIsActiveElementId);

        if (typeof (isScheduleActiveElement) != "undefined" && isScheduleActiveElement != null && isScheduleActiveElement.length > 0) {
            var tmpisActiveSchedule = $("#" + notificationIsActiveElementId).is(':checked');

            if (typeof (tmpisActiveSchedule) != "undefined" && tmpisActiveSchedule != null && tmpisActiveSchedule == true) {
                $("#" + execDateElementIdToHide).show();
            }
            else {
                $("#" + execDateElementIdToHide).hide();
            }

            $("#" + notificationIsActiveElementId).off("click");
            $("#" + notificationIsActiveElementId).on('click', function () {
                var isActiveSchedule = $("#" + notificationIsActiveElementId).is(':checked');

                if (typeof (isActiveSchedule) != "undefined" && isActiveSchedule != null && isActiveSchedule == true) {
                    $("#" + execDateElementIdToHide).show();
                }
                else {
                    $("#" + execDateElementIdToHide).hide();
                }
            });
        }
    }
}

function FormatedCostQtyValuesByCurrentCulture(objValue, objType, currentCulture) {

    // objType = 1 = Cost 2 = Qty 3 = As it is
    if (objType == 1) {
        return parseFloat(objValue).toLocaleString(currentCulture, { minimumFractionDigits: parseInt($('#hdCurrencyDecimalDigits').val(), 10) });
    }
    else if (objType == 4) {
        return parseFloat(objValue).toLocaleString(currentCulture, { minimumFractionDigits: parseInt($('#hdTurnUsageLimit').val(), 10) });

        // return parseFloat(objValue).toFixed(parseInt($('#hdTurnUsageLimit').val(), 10));
    }
    else if (objType == 5) {

        var s = '', temp,
            num = parseFloat(objValue).toLocaleString(currentCulture, { minimumFractionDigits: parseInt($('#hdWeightPerPieceLimit').val(), 10) }).toString().split('.'), n = num[0];
        //num = parseFloat(objValue).toFixed(parseInt($('#hdWeightPerPieceLimit').val(), 10)).toString().split('.'), n = num[0];
        while (n.length > 3) {
            temp = n.substring(n.length - 3);
            s = ',' + temp + s;
            n = n.slice(0, -3);
        }
        if (n) s = n + s;
        if (num[1]) s += '.' + num[1];
        return s;

        //  return objValue.toFixed(parseInt($('#hdCostcentsLimit').val(), 10)).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
    else if (objType == 2) {
        //alert(parseFloat(objValue).toFixed(parseInt($('#hdNumberDecimalDigits').val(), 10)));
        //return parseFloat(objValue).toFixed(parseInt($('#hdQuantitycentsLimit').val(), 10));  //.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        // return parseFloat(objValue).toFixed(parseInt($('#hdNumberDecimalDigits').val(), 10));
        return parseFloat(objValue).toLocaleString(currentCulture, { minimumFractionDigits: parseInt($('#hdNumberDecimalDigits').val(), 10) });

    }
    else
        return objValue;
}

function ShowNotificationMessage(message)
{
    $("#spanGlobalMessage").html(message);
    showNotificationDialog();
}

function AddFromABCatalog(obj) {
    window.location.href = "/Master/ABAccountSetup?FromPage=ProductList";
}

function AddFromPastABOrder(obj) {
    window.location.href = "/Master/ABAccountSetup?FromPage=SyncABOrders";
}